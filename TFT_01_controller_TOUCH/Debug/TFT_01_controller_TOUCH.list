
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001548c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f98  08015630  08015630  00025630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080295c8  080295c8  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  080295c8  080295c8  000395c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080295d0  080295d0  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080295d0  080295d0  000395d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080295d4  080295d4  000395d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080295d8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20000214  080297ec  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  080297ec  00040c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250f0  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d8c  00000000  00000000  00065334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  0006a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0006bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5fc  00000000  00000000  0006d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ad0  00000000  00000000  0008992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099678  00000000  00000000  000b03fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149a74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008070  00000000  00000000  00149ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015614 	.word	0x08015614

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08015614 	.word	0x08015614

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff faa6 	bl	8000578 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4905      	ldr	r1, [pc, #20]	; (8001048 <ESP_SendCurrentTempInside+0x2c>)
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <ESP_SendCurrentTempInside+0x30>)
 8001034:	f010 fcd8 	bl	80119e8 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <ESP_SendCurrentTempInside+0x30>)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <ESP_SendCurrentTempInside+0x34>)
 800103c:	f008 fce0 	bl	8009a00 <UARTDMA_Print>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	0801563c 	.word	0x0801563c
 800104c:	20000300 	.word	0x20000300
 8001050:	200006bc 	.word	0x200006bc

08001054 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fa8a 	bl	8000578 <__aeabi_f2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4905      	ldr	r1, [pc, #20]	; (8001080 <ESP_SendCurrentTempOutside+0x2c>)
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <ESP_SendCurrentTempOutside+0x30>)
 800106c:	f010 fcbc 	bl	80119e8 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001070:	4904      	ldr	r1, [pc, #16]	; (8001084 <ESP_SendCurrentTempOutside+0x30>)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <ESP_SendCurrentTempOutside+0x34>)
 8001074:	f008 fcc4 	bl	8009a00 <UARTDMA_Print>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08015648 	.word	0x08015648
 8001084:	20000300 	.word	0x20000300
 8001088:	200006bc 	.word	0x200006bc

0800108c <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fa6e 	bl	8000578 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4905      	ldr	r1, [pc, #20]	; (80010b8 <ESP_SendCurrentPressure+0x2c>)
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <ESP_SendCurrentPressure+0x30>)
 80010a4:	f010 fca0 	bl	80119e8 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <ESP_SendCurrentPressure+0x30>)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <ESP_SendCurrentPressure+0x34>)
 80010ac:	f008 fca8 	bl	8009a00 <UARTDMA_Print>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	08015654 	.word	0x08015654
 80010bc:	20000300 	.word	0x20000300
 80010c0:	200006bc 	.word	0x200006bc

080010c4 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4906      	ldr	r1, [pc, #24]	; (80010e8 <ESP_SendCurrentWaterLvl+0x24>)
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <ESP_SendCurrentWaterLvl+0x28>)
 80010d2:	f010 fc89 	bl	80119e8 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80010d6:	4905      	ldr	r1, [pc, #20]	; (80010ec <ESP_SendCurrentWaterLvl+0x28>)
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <ESP_SendCurrentWaterLvl+0x2c>)
 80010da:	f008 fc91 	bl	8009a00 <UARTDMA_Print>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08015660 	.word	0x08015660
 80010ec:	20000300 	.word	0x20000300
 80010f0:	200006bc 	.word	0x200006bc

080010f4 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800110c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	425b      	neglt	r3, r3
 800111c:	429a      	cmp	r2, r3
 800111e:	bfcc      	ite	gt
 8001120:	2301      	movgt	r3, #1
 8001122:	2300      	movle	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001128:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dd0b      	ble.n	8001168 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29a      	uxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	b29b      	uxth	r3, r3
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	bfb8      	it	lt
 8001180:	425b      	neglt	r3, r3
 8001182:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001184:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001188:	0fda      	lsrs	r2, r3, #31
 800118a:	4413      	add	r3, r2
 800118c:	105b      	asrs	r3, r3, #1
 800118e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	da02      	bge.n	800119e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800119c:	e02e      	b.n	80011fc <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800119e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80011a4:	e02a      	b.n	80011fc <GFX_WriteLine+0x108>
	        if (steep) {
 80011a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	b211      	sxth	r1, r2
 80011b6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 feab 	bl	8001f14 <ILI9341_WritePixel>
 80011be:	e007      	b.n	80011d0 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	b211      	sxth	r1, r2
 80011c8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fea2 	bl	8001f14 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80011d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011d2:	8abb      	ldrh	r3, [r7, #20]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80011da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da09      	bge.n	80011f6 <GFX_WriteLine+0x102>
	            y_start += ystep;
 80011e2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80011ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011ee:	8afb      	ldrh	r3, [r7, #22]
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	ddd0      	ble.n	80011a6 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af02      	add	r7, sp, #8
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff60 	bl	80010f4 <GFX_WriteLine>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff ff4a 	bl	80010f4 <GFX_WriteLine>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af02      	add	r7, sp, #8
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	d113      	bne.n	80012a6 <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	dd05      	ble.n	8001292 <GFX_DrawLine+0x2a>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	8c3b      	ldrh	r3, [r7, #32]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff ffb5 	bl	800120e <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80012a4:	e01f      	b.n	80012e6 <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d113      	bne.n	80012d6 <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dd05      	ble.n	80012c2 <GFX_DrawLine+0x5a>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	8c3b      	ldrh	r3, [r7, #32]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ffb4 	bl	800123c <GFX_DrawFastHLine>
}
 80012d4:	e007      	b.n	80012e6 <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80012d6:	8c3b      	ldrh	r3, [r7, #32]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff07 	bl	80010f4 <GFX_WriteLine>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	4611      	mov	r1, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e008      	b.n	800131c <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 800130a:	88ba      	ldrh	r2, [r7, #4]
 800130c:	8c3b      	ldrh	r3, [r7, #32]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ff7c 	bl	800120e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <GFX_DrawFillRectangle+0x1c>
    }

}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b088      	sub	sp, #32
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	4611      	mov	r1, r2
 800133e:	461a      	mov	r2, r3
 8001340:	460b      	mov	r3, r1
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	f1c3 0301 	rsb	r3, r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	461a      	mov	r2, r3
 800135a:	03d2      	lsls	r2, r2, #15
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800136c:	e0b5      	b.n	80014da <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800136e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0e      	blt.n	8001394 <GFX_DrawCircleHelper+0x62>
            y--;
 8001376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001382:	8b7b      	ldrh	r3, [r7, #26]
 8001384:	3302      	adds	r3, #2
 8001386:	b29b      	uxth	r3, r3
 8001388:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800138a:	8bfa      	ldrh	r2, [r7, #30]
 800138c:	8b7b      	ldrh	r3, [r7, #26]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001394:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80013a0:	8bbb      	ldrh	r3, [r7, #28]
 80013a2:	3302      	adds	r3, #2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80013a8:	8bfa      	ldrh	r2, [r7, #30]
 80013aa:	8bbb      	ldrh	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80013b2:	797b      	ldrb	r3, [r7, #5]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01f      	beq.n	80013fc <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	8b3b      	ldrh	r3, [r7, #24]
 80013c2:	4413      	add	r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b218      	sxth	r0, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	8afb      	ldrh	r3, [r7, #22]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013d6:	4619      	mov	r1, r3
 80013d8:	f000 fd9c 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b218      	sxth	r0, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	8b3b      	ldrh	r3, [r7, #24]
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013f6:	4619      	mov	r1, r3
 80013f8:	f000 fd8c 	bl	8001f14 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01f      	beq.n	8001446 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	b29a      	uxth	r2, r3
 800140a:	8b3b      	ldrh	r3, [r7, #24]
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	b218      	sxth	r0, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	b29a      	uxth	r2, r3
 8001416:	8afb      	ldrh	r3, [r7, #22]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	b21b      	sxth	r3, r3
 800141e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001420:	4619      	mov	r1, r3
 8001422:	f000 fd77 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b29a      	uxth	r2, r3
 800142a:	8afb      	ldrh	r3, [r7, #22]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	b218      	sxth	r0, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	b29a      	uxth	r2, r3
 8001436:	8b3b      	ldrh	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21b      	sxth	r3, r3
 800143e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001440:	4619      	mov	r1, r3
 8001442:	f000 fd67 	bl	8001f14 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01f      	beq.n	8001490 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b29a      	uxth	r2, r3
 8001454:	8afb      	ldrh	r3, [r7, #22]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	b218      	sxth	r0, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	b29a      	uxth	r2, r3
 8001460:	8b3b      	ldrh	r3, [r7, #24]
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	b21b      	sxth	r3, r3
 8001468:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800146a:	4619      	mov	r1, r3
 800146c:	f000 fd52 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	b29a      	uxth	r2, r3
 8001474:	8b3b      	ldrh	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b29b      	uxth	r3, r3
 800147a:	b218      	sxth	r0, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	b29a      	uxth	r2, r3
 8001480:	8afb      	ldrh	r3, [r7, #22]
 8001482:	4413      	add	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21b      	sxth	r3, r3
 8001488:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800148a:	4619      	mov	r1, r3
 800148c:	f000 fd42 	bl	8001f14 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001490:	797b      	ldrb	r3, [r7, #5]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d01f      	beq.n	80014da <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	b29a      	uxth	r2, r3
 800149e:	8afb      	ldrh	r3, [r7, #22]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b218      	sxth	r0, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	8b3b      	ldrh	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	f000 fd2d 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	8b3b      	ldrh	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b218      	sxth	r0, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	8afb      	ldrh	r3, [r7, #22]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d4:	4619      	mov	r1, r3
 80014d6:	f000 fd1d 	bl	8001f14 <ILI9341_WritePixel>
    while (x<y) {
 80014da:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	f6ff af43 	blt.w	800136e <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	4611      	mov	r1, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	4613      	mov	r3, r2
 8001506:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	f1c3 0301 	rsb	r3, r3, #1
 800150e:	b29b      	uxth	r3, r3
 8001510:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	461a      	mov	r2, r3
 800151a:	03d2      	lsls	r2, r2, #15
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800152c:	e073      	b.n	8001616 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 800152e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0e      	blt.n	8001554 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8001536:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800153a:	b29b      	uxth	r3, r3
 800153c:	3b01      	subs	r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001542:	8b7b      	ldrh	r3, [r7, #26]
 8001544:	3302      	adds	r3, #2
 8001546:	b29b      	uxth	r3, r3
 8001548:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800154a:	8bfa      	ldrh	r2, [r7, #30]
 800154c:	8b7b      	ldrh	r3, [r7, #26]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001554:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001558:	b29b      	uxth	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	b29b      	uxth	r3, r3
 800155e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001560:	8bbb      	ldrh	r3, [r7, #28]
 8001562:	3302      	adds	r3, #2
 8001564:	b29b      	uxth	r3, r3
 8001566:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001568:	8bfa      	ldrh	r2, [r7, #30]
 800156a:	8bbb      	ldrh	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800157c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	18d0      	adds	r0, r2, r3
 8001584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	1ad1      	subs	r1, r2, r3
 800158c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001598:	441a      	add	r2, r3
 800159a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800159c:	f7ff fe37 	bl	800120e <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80015a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	18d0      	adds	r0, r2, r3
 80015a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	1ad1      	subs	r1, r2, r3
 80015b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015bc:	441a      	add	r2, r3
 80015be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015c0:	f7ff fe25 	bl	800120e <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80015c4:	797b      	ldrb	r3, [r7, #5]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80015ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	1ad0      	subs	r0, r2, r3
 80015d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	1ad1      	subs	r1, r2, r3
 80015de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015ea:	441a      	add	r2, r3
 80015ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015ee:	f7ff fe0e 	bl	800120e <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80015f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	1ad0      	subs	r0, r2, r3
 80015fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	1ad1      	subs	r1, r2, r3
 8001602:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800160e:	441a      	add	r2, r3
 8001610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001612:	f7ff fdfc 	bl	800120e <GFX_DrawFastVLine>
    while (x<y) {
 8001616:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800161a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800161e:	429a      	cmp	r2, r3
 8001620:	db85      	blt.n	800152e <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	4613      	mov	r3, r2
 8001640:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 8001642:	8b3a      	ldrh	r2, [r7, #24]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	18d0      	adds	r0, r2, r3
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	8b3b      	ldrh	r3, [r7, #24]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	f7ff fdf2 	bl	800123c <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001658:	8b3a      	ldrh	r2, [r7, #24]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	18d0      	adds	r0, r2, r3
 800165e:	88ba      	ldrh	r2, [r7, #4]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4413      	add	r3, r2
 8001664:	1e59      	subs	r1, r3, #1
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	8b3b      	ldrh	r3, [r7, #24]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	8bbb      	ldrh	r3, [r7, #28]
 8001670:	f7ff fde4 	bl	800123c <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001674:	8b3a      	ldrh	r2, [r7, #24]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	18d1      	adds	r1, r2, r3
 800167a:	88ba      	ldrh	r2, [r7, #4]
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	1ad2      	subs	r2, r2, r3
 8001682:	8bbb      	ldrh	r3, [r7, #28]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fdc2 	bl	800120e <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	1e58      	subs	r0, r3, #1
 8001692:	8b3a      	ldrh	r2, [r7, #24]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	18d1      	adds	r1, r2, r3
 8001698:	88ba      	ldrh	r2, [r7, #4]
 800169a:	8b3b      	ldrh	r3, [r7, #24]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	8bbb      	ldrh	r3, [r7, #28]
 80016a2:	f7ff fdb4 	bl	800120e <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80016a6:	8b3a      	ldrh	r2, [r7, #24]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	18d0      	adds	r0, r2, r3
 80016ac:	8b3a      	ldrh	r2, [r7, #24]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	18d1      	adds	r1, r2, r3
 80016b2:	8b3a      	ldrh	r2, [r7, #24]
 80016b4:	8bbb      	ldrh	r3, [r7, #28]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	f7ff fe3a 	bl	8001332 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	441a      	add	r2, r3
 80016c4:	8b3b      	ldrh	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	1e58      	subs	r0, r3, #1
 80016ca:	8b3a      	ldrh	r2, [r7, #24]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	18d1      	adds	r1, r2, r3
 80016d0:	8b3a      	ldrh	r2, [r7, #24]
 80016d2:	8bbb      	ldrh	r3, [r7, #28]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	f7ff fe2b 	bl	8001332 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80016dc:	88fa      	ldrh	r2, [r7, #6]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	441a      	add	r2, r3
 80016e2:	8b3b      	ldrh	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	88ba      	ldrh	r2, [r7, #4]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	441a      	add	r2, r3
 80016ee:	8b3b      	ldrh	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	1e59      	subs	r1, r3, #1
 80016f4:	8b3a      	ldrh	r2, [r7, #24]
 80016f6:	8bbb      	ldrh	r3, [r7, #28]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2304      	movs	r3, #4
 80016fc:	f7ff fe19 	bl	8001332 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001700:	8b3a      	ldrh	r2, [r7, #24]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	18d0      	adds	r0, r2, r3
 8001706:	88ba      	ldrh	r2, [r7, #4]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	441a      	add	r2, r3
 800170c:	8b3b      	ldrh	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	1e59      	subs	r1, r3, #1
 8001712:	8b3a      	ldrh	r2, [r7, #24]
 8001714:	8bbb      	ldrh	r3, [r7, #28]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2308      	movs	r3, #8
 800171a:	f7ff fe0a 	bl	8001332 <GFX_DrawCircleHelper>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b087      	sub	sp, #28
 800172a:	af02      	add	r7, sp, #8
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	460b      	mov	r3, r1
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4613      	mov	r3, r2
 800173a:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 800173c:	8c3a      	ldrh	r2, [r7, #32]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	18d0      	adds	r0, r2, r3
 8001742:	8c3b      	ldrh	r3, [r7, #32]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b29b      	uxth	r3, r3
 8001748:	88fa      	ldrh	r2, [r7, #6]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b29a      	uxth	r2, r3
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	460b      	mov	r3, r1
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	f7ff fdc9 	bl	80012ee <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	441a      	add	r2, r3
 8001762:	8c3b      	ldrh	r3, [r7, #32]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	8c3a      	ldrh	r2, [r7, #32]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	18d1      	adds	r1, r2, r3
 800176e:	8c3b      	ldrh	r3, [r7, #32]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	88ba      	ldrh	r2, [r7, #4]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21b      	sxth	r3, r3
 8001780:	8c3c      	ldrh	r4, [r7, #32]
 8001782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	4622      	mov	r2, r4
 800178c:	f7ff feb1 	bl	80014f2 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001790:	8c3a      	ldrh	r2, [r7, #32]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	18d0      	adds	r0, r2, r3
 8001796:	8c3a      	ldrh	r2, [r7, #32]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	18d1      	adds	r1, r2, r3
 800179c:	8c3b      	ldrh	r3, [r7, #32]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	88ba      	ldrh	r2, [r7, #4]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	8c3c      	ldrh	r4, [r7, #32]
 80017b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2302      	movs	r3, #2
 80017b8:	4622      	mov	r2, r4
 80017ba:	f7ff fe9a 	bl	80014f2 <GFX_DrawFillCircleHelper>
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
	...

080017c8 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <EF_SetFont+0x1c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000034c 	.word	0x2000034c

080017e8 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <EF_GetFontHeight+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	2000034c 	.word	0x2000034c

08001800 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <EF_GetFontStartChar+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	785b      	ldrb	r3, [r3, #1]
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	2000034c 	.word	0x2000034c

08001818 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <EF_GetFontEndChar+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	789b      	ldrb	r3, [r3, #2]
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	2000034c 	.word	0x2000034c

08001830 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <EF_GetFontSpaceWidth+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	78db      	ldrb	r3, [r3, #3]
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	2000034c 	.word	0x2000034c

08001848 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2bc5      	cmp	r3, #197	; 0xc5
 800185c:	d052      	beq.n	8001904 <EF_DecodePolish+0xbc>
 800185e:	2bc5      	cmp	r3, #197	; 0xc5
 8001860:	f300 80e7 	bgt.w	8001a32 <EF_DecodePolish+0x1ea>
 8001864:	2bc3      	cmp	r3, #195	; 0xc3
 8001866:	d002      	beq.n	800186e <EF_DecodePolish+0x26>
 8001868:	2bc4      	cmp	r3, #196	; 0xc4
 800186a:	d00a      	beq.n	8001882 <EF_DecodePolish+0x3a>
 800186c:	e0e1      	b.n	8001a32 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b93      	cmp	r3, #147	; 0x93
 8001872:	d002      	beq.n	800187a <EF_DecodePolish+0x32>
 8001874:	2bb3      	cmp	r3, #179	; 0xb3
 8001876:	d002      	beq.n	800187e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001878:	e0db      	b.n	8001a32 <EF_DecodePolish+0x1ea>
			return 0x84;
 800187a:	2384      	movs	r3, #132	; 0x84
 800187c:	e0da      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			return 0x8D;
 800187e:	238d      	movs	r3, #141	; 0x8d
 8001880:	e0d8      	b.n	8001a34 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	3b84      	subs	r3, #132	; 0x84
 8001886:	2b15      	cmp	r3, #21
 8001888:	f200 80d0 	bhi.w	8001a2c <EF_DecodePolish+0x1e4>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <EF_DecodePolish+0x4c>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018ed 	.word	0x080018ed
 8001898:	080018f9 	.word	0x080018f9
 800189c:	080018f5 	.word	0x080018f5
 80018a0:	08001901 	.word	0x08001901
 80018a4:	08001a2d 	.word	0x08001a2d
 80018a8:	08001a2d 	.word	0x08001a2d
 80018ac:	08001a2d 	.word	0x08001a2d
 80018b0:	08001a2d 	.word	0x08001a2d
 80018b4:	08001a2d 	.word	0x08001a2d
 80018b8:	08001a2d 	.word	0x08001a2d
 80018bc:	08001a2d 	.word	0x08001a2d
 80018c0:	08001a2d 	.word	0x08001a2d
 80018c4:	08001a2d 	.word	0x08001a2d
 80018c8:	08001a2d 	.word	0x08001a2d
 80018cc:	08001a2d 	.word	0x08001a2d
 80018d0:	08001a2d 	.word	0x08001a2d
 80018d4:	08001a2d 	.word	0x08001a2d
 80018d8:	08001a2d 	.word	0x08001a2d
 80018dc:	08001a2d 	.word	0x08001a2d
 80018e0:	08001a2d 	.word	0x08001a2d
 80018e4:	080018f1 	.word	0x080018f1
 80018e8:	080018fd 	.word	0x080018fd
		{
		case 0x84: // Ą
			return 0x7F;
 80018ec:	237f      	movs	r3, #127	; 0x7f
 80018ee:	e0a1      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 80018f0:	2381      	movs	r3, #129	; 0x81
 80018f2:	e09f      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	e09d      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 80018f8:	2388      	movs	r3, #136	; 0x88
 80018fa:	e09b      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 80018fc:	238a      	movs	r3, #138	; 0x8a
 80018fe:	e099      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001900:	2389      	movs	r3, #137	; 0x89
 8001902:	e097      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	3b81      	subs	r3, #129	; 0x81
 8001908:	2b3b      	cmp	r3, #59	; 0x3b
 800190a:	f200 8091 	bhi.w	8001a30 <EF_DecodePolish+0x1e8>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <EF_DecodePolish+0xcc>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001a05 	.word	0x08001a05
 8001918:	08001a19 	.word	0x08001a19
 800191c:	08001a09 	.word	0x08001a09
 8001920:	08001a1d 	.word	0x08001a1d
 8001924:	08001a31 	.word	0x08001a31
 8001928:	08001a31 	.word	0x08001a31
 800192c:	08001a31 	.word	0x08001a31
 8001930:	08001a31 	.word	0x08001a31
 8001934:	08001a31 	.word	0x08001a31
 8001938:	08001a31 	.word	0x08001a31
 800193c:	08001a31 	.word	0x08001a31
 8001940:	08001a31 	.word	0x08001a31
 8001944:	08001a31 	.word	0x08001a31
 8001948:	08001a31 	.word	0x08001a31
 800194c:	08001a31 	.word	0x08001a31
 8001950:	08001a31 	.word	0x08001a31
 8001954:	08001a31 	.word	0x08001a31
 8001958:	08001a31 	.word	0x08001a31
 800195c:	08001a31 	.word	0x08001a31
 8001960:	08001a31 	.word	0x08001a31
 8001964:	08001a31 	.word	0x08001a31
 8001968:	08001a31 	.word	0x08001a31
 800196c:	08001a31 	.word	0x08001a31
 8001970:	08001a31 	.word	0x08001a31
 8001974:	08001a31 	.word	0x08001a31
 8001978:	08001a0d 	.word	0x08001a0d
 800197c:	08001a21 	.word	0x08001a21
 8001980:	08001a31 	.word	0x08001a31
 8001984:	08001a31 	.word	0x08001a31
 8001988:	08001a31 	.word	0x08001a31
 800198c:	08001a31 	.word	0x08001a31
 8001990:	08001a31 	.word	0x08001a31
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a31 	.word	0x08001a31
 800199c:	08001a31 	.word	0x08001a31
 80019a0:	08001a31 	.word	0x08001a31
 80019a4:	08001a31 	.word	0x08001a31
 80019a8:	08001a31 	.word	0x08001a31
 80019ac:	08001a31 	.word	0x08001a31
 80019b0:	08001a31 	.word	0x08001a31
 80019b4:	08001a31 	.word	0x08001a31
 80019b8:	08001a31 	.word	0x08001a31
 80019bc:	08001a31 	.word	0x08001a31
 80019c0:	08001a31 	.word	0x08001a31
 80019c4:	08001a31 	.word	0x08001a31
 80019c8:	08001a31 	.word	0x08001a31
 80019cc:	08001a31 	.word	0x08001a31
 80019d0:	08001a31 	.word	0x08001a31
 80019d4:	08001a31 	.word	0x08001a31
 80019d8:	08001a31 	.word	0x08001a31
 80019dc:	08001a31 	.word	0x08001a31
 80019e0:	08001a31 	.word	0x08001a31
 80019e4:	08001a31 	.word	0x08001a31
 80019e8:	08001a31 	.word	0x08001a31
 80019ec:	08001a31 	.word	0x08001a31
 80019f0:	08001a31 	.word	0x08001a31
 80019f4:	08001a11 	.word	0x08001a11
 80019f8:	08001a25 	.word	0x08001a25
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a29 	.word	0x08001a29
		{
		case 0x81: // Ł
			return 0x82;
 8001a04:	2382      	movs	r3, #130	; 0x82
 8001a06:	e015      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001a08:	2383      	movs	r3, #131	; 0x83
 8001a0a:	e013      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001a0c:	2385      	movs	r3, #133	; 0x85
 8001a0e:	e011      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001a10:	2386      	movs	r3, #134	; 0x86
 8001a12:	e00f      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001a14:	2387      	movs	r3, #135	; 0x87
 8001a16:	e00d      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001a18:	238b      	movs	r3, #139	; 0x8b
 8001a1a:	e00b      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001a1c:	238c      	movs	r3, #140	; 0x8c
 8001a1e:	e009      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001a20:	238e      	movs	r3, #142	; 0x8e
 8001a22:	e007      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001a24:	238f      	movs	r3, #143	; 0x8f
 8001a26:	e005      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001a28:	2390      	movs	r3, #144	; 0x90
 8001a2a:	e003      	b.n	8001a34 <EF_DecodePolish+0x1ec>
		break;
 8001a2c:	bf00      	nop
 8001a2e:	e000      	b.n	8001a32 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001a30:	bf00      	nop
	}

	return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4604      	mov	r4, r0
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	4603      	mov	r3, r0
 8001a54:	80bb      	strh	r3, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001a5e:	f7ff fecf 	bl	8001800 <EF_GetFontStartChar>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d120      	bne.n	8001ab4 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001a72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d114      	bne.n	8001aa4 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001a7a:	88bc      	ldrh	r4, [r7, #4]
 8001a7c:	887d      	ldrh	r5, [r7, #2]
 8001a7e:	f7ff fed7 	bl	8001830 <EF_GetFontSpaceWidth>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	0052      	lsls	r2, r2, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b299      	uxth	r1, r3
 8001a96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fc25 	bl	80012ee <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001aa4:	f7ff fec4 	bl	8001830 <EF_GetFontSpaceWidth>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	0052      	lsls	r2, r2, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e09c      	b.n	8001bee <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001ab4:	f7ff fea4 	bl	8001800 <EF_GetFontStartChar>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d201      	bcs.n	8001ac6 <EF_PutChar+0x86>
	{
		return 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e093      	b.n	8001bee <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001ac6:	f7ff fea7 	bl	8001818 <EF_GetFontEndChar>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	7c7b      	ldrb	r3, [r7, #17]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <EF_PutChar+0x98>
	{
		return 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e08a      	b.n	8001bee <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	7c7b      	ldrb	r3, [r7, #17]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001ae6:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	6851      	ldr	r1, [r2, #4]
 8001af2:	7c7a      	ldrb	r2, [r7, #17]
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	440a      	add	r2, r1
 8001af8:	8852      	ldrh	r2, [r2, #2]
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	83fb      	strh	r3, [r7, #30]
 8001b02:	e066      	b.n	8001bd2 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	777b      	strb	r3, [r7, #29]
 8001b0e:	e053      	b.n	8001bb8 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001b16:	7efb      	ldrb	r3, [r7, #27]
 8001b18:	2b07      	cmp	r3, #7
 8001b1a:	d905      	bls.n	8001b28 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001b20:	7efb      	ldrb	r3, [r7, #27]
 8001b22:	3b08      	subs	r3, #8
 8001b24:	76fb      	strb	r3, [r7, #27]
 8001b26:	e001      	b.n	8001b2c <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001b28:	7efb      	ldrb	r3, [r7, #27]
 8001b2a:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	74bb      	strb	r3, [r7, #18]
 8001b30:	e038      	b.n	8001ba4 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001b32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da15      	bge.n	8001b66 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001b3a:	7f7b      	ldrb	r3, [r7, #29]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	88bb      	ldrh	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	7cbb      	ldrb	r3, [r7, #18]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b218      	sxth	r0, r3
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	8bfb      	ldrh	r3, [r7, #30]
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	883a      	ldrh	r2, [r7, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f000 f9d8 	bl	8001f14 <ILI9341_WritePixel>
 8001b64:	e018      	b.n	8001b98 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001b66:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d114      	bne.n	8001b98 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001b6e:	7f7b      	ldrb	r3, [r7, #29]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	7cbb      	ldrb	r3, [r7, #18]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b218      	sxth	r0, r3
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	8bfb      	ldrh	r3, [r7, #30]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b92:	4619      	mov	r1, r3
 8001b94:	f000 f9be 	bl	8001f14 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001b98:	7cbb      	ldrb	r3, [r7, #18]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	74bb      	strb	r3, [r7, #18]
 8001b9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	74fb      	strb	r3, [r7, #19]
 8001ba4:	7cba      	ldrb	r2, [r7, #18]
 8001ba6:	7f3b      	ldrb	r3, [r7, #28]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3c2      	bcc.n	8001b32 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001bb2:	7f7b      	ldrb	r3, [r7, #29]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	777b      	strb	r3, [r7, #29]
 8001bb8:	7f7a      	ldrb	r2, [r7, #29]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da00      	bge.n	8001bc6 <EF_PutChar+0x186>
 8001bc4:	3307      	adds	r3, #7
 8001bc6:	10db      	asrs	r3, r3, #3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dda1      	ble.n	8001b10 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	8bfa      	ldrh	r2, [r7, #30]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d391      	bcc.n	8001b04 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	7c7b      	ldrb	r3, [r7, #17]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000034c 	.word	0x2000034c

08001bfc <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7fe faec 	bl	80001f4 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001c20:	2300      	movs	r3, #0
 8001c22:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
 8001c28:	e05a      	b.n	8001ce0 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2bc5      	cmp	r3, #197	; 0xc5
 8001c34:	d817      	bhi.n	8001c66 <EF_PutString+0x6a>
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2bc2      	cmp	r3, #194	; 0xc2
 8001c40:	d911      	bls.n	8001c66 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	7818      	ldrb	r0, [r3, #0]
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7ff fdf7 	bl	8001848 <EF_DecodePolish>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	3301      	adds	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
 8001c64:	e004      	b.n	8001c70 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001c70:	897a      	ldrh	r2, [r7, #10]
 8001c72:	8abb      	ldrh	r3, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	b299      	uxth	r1, r3
 8001c78:	88fc      	ldrh	r4, [r7, #6]
 8001c7a:	893a      	ldrh	r2, [r7, #8]
 8001c7c:	7cf8      	ldrb	r0, [r7, #19]
 8001c7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4623      	mov	r3, r4
 8001c8a:	f7ff fed9 	bl	8001a40 <EF_PutChar>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001c92:	7c7b      	ldrb	r3, [r7, #17]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	8abb      	ldrh	r3, [r7, #20]
 8001c98:	4413      	add	r3, r2
 8001c9a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001c9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d113      	bne.n	8001ccc <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001ca4:	897a      	ldrh	r2, [r7, #10]
 8001ca6:	8abb      	ldrh	r3, [r7, #20]
 8001ca8:	18d4      	adds	r4, r2, r3
 8001caa:	893d      	ldrh	r5, [r7, #8]
 8001cac:	f7ff fdc0 	bl	8001830 <EF_GetFontSpaceWidth>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29e      	uxth	r6, r3
 8001cb4:	f7ff fd98 	bl	80017e8 <EF_GetFontHeight>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	4632      	mov	r2, r6
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff fb11 	bl	80012ee <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001ccc:	f7ff fdb0 	bl	8001830 <EF_GetFontSpaceWidth>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	8abb      	ldrh	r3, [r7, #20]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfa      	ldrb	r2, [r7, #23]
 8001ce2:	7cbb      	ldrb	r3, [r7, #18]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3a0      	bcc.n	8001c2a <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001ce8:	8abb      	ldrh	r3, [r7, #20]
 8001cea:	b2dc      	uxtb	r4, r3
 8001cec:	f7ff fda0 	bl	8001830 <EF_GetFontSpaceWidth>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	1ae3      	subs	r3, r4, r3
 8001cf4:	b2db      	uxtb	r3, r3
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cfe <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f008 f99e 	bl	800a048 <HAL_Delay>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001d1e:	e014      	b.n	8001d4a <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <ILI9341_SendToTFT+0x5c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d10c      	bne.n	8001d4a <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <ILI9341_SendToTFT+0x5c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	330c      	adds	r3, #12
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e7      	bne.n	8001d20 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001d50:	bf00      	nop
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <ILI9341_SendToTFT+0x5c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b80      	cmp	r3, #128	; 0x80
 8001d60:	d0f7      	beq.n	8001d52 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20000350 	.word	0x20000350

08001d74 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <ILI9341_SendComand+0x40>)
 8001d86:	f009 f8cf 	bl	800af28 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <ILI9341_SendComand+0x40>)
 8001d92:	f009 f8c9 	bl	800af28 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ffba 	bl	8001d14 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001da0:	2201      	movs	r2, #1
 8001da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <ILI9341_SendComand+0x40>)
 8001da8:	f009 f8be 	bl	800af28 <HAL_GPIO_WritePin>
#endif
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020400 	.word	0x40020400

08001db8 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001dce:	f009 f8ab 	bl	800af28 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001dda:	f009 f8a5 	bl	800af28 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001dde:	f107 030f 	add.w	r3, r7, #15
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff95 	bl	8001d14 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df0:	4808      	ldr	r0, [pc, #32]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001df2:	f009 f899 	bl	800af28 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f7ff ff8b 	bl	8001d14 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001e06:	f009 f88f 	bl	800af28 <HAL_GPIO_WritePin>
#endif

}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020400 	.word	0x40020400

08001e18 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d820      	bhi.n	8001e6a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d816      	bhi.n	8001e5c <ILI9341_SetRotation+0x44>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <ILI9341_SetRotation+0x1c>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e4b 	.word	0x08001e4b
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e57 	.word	0x08001e57
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001e44:	2348      	movs	r3, #72	; 0x48
 8001e46:	71fb      	strb	r3, [r7, #7]
		break;
 8001e48:	e008      	b.n	8001e5c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001e4a:	2328      	movs	r3, #40	; 0x28
 8001e4c:	71fb      	strb	r3, [r7, #7]
		break;
 8001e4e:	e005      	b.n	8001e5c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001e50:	2388      	movs	r3, #136	; 0x88
 8001e52:	71fb      	strb	r3, [r7, #7]
		break;
 8001e54:	e002      	b.n	8001e5c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001e56:	23e8      	movs	r3, #232	; 0xe8
 8001e58:	71fb      	strb	r3, [r7, #7]
		break;
 8001e5a:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	2036      	movs	r0, #54	; 0x36
 8001e64:	f7ff ffa8 	bl	8001db8 <ILI9341_SendCommandAndData>
 8001e68:	e000      	b.n	8001e6c <ILI9341_SetRotation+0x54>
		return;
 8001e6a:	bf00      	nop
}
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop

08001e74 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	80fb      	strh	r3, [r7, #6]
 8001e86:	4603      	mov	r3, r0
 8001e88:	80bb      	strh	r3, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	81fb      	strh	r3, [r7, #14]
 8001e9e:	88ba      	ldrh	r2, [r7, #4]
 8001ea0:	883b      	ldrh	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	202a      	movs	r0, #42	; 0x2a
 8001ed4:	f7ff ff70 	bl	8001db8 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001ed8:	88bb      	ldrh	r3, [r7, #4]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001ee2:	88bb      	ldrh	r3, [r7, #4]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001ee8:	89bb      	ldrh	r3, [r7, #12]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001ef2:	89bb      	ldrh	r3, [r7, #12]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	2204      	movs	r2, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	202b      	movs	r0, #43	; 0x2b
 8001f02:	f7ff ff59 	bl	8001db8 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001f06:	202c      	movs	r0, #44	; 0x2c
 8001f08:	f7ff ff34 	bl	8001d74 <ILI9341_SendComand>

}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	80bb      	strh	r3, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db21      	blt.n	8001f72 <ILI9341_WritePixel+0x5e>
 8001f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f36:	da1c      	bge.n	8001f72 <ILI9341_WritePixel+0x5e>
 8001f38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db18      	blt.n	8001f72 <ILI9341_WritePixel+0x5e>
 8001f40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f44:	2bef      	cmp	r3, #239	; 0xef
 8001f46:	dc14      	bgt.n	8001f72 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001f48:	88f8      	ldrh	r0, [r7, #6]
 8001f4a:	88b9      	ldrh	r1, [r7, #4]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f7ff ff90 	bl	8001e74 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	202c      	movs	r0, #44	; 0x2c
 8001f6e:	f7ff ff23 	bl	8001db8 <ILI9341_SendCommandAndData>
	}

}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	81fb      	strh	r3, [r7, #14]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	81bb      	strh	r3, [r7, #12]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001f90:	89fa      	ldrh	r2, [r7, #14]
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4413      	add	r3, r2
 8001f96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f9a:	dc14      	bgt.n	8001fc6 <ILI9341_DrawImage+0x4c>
 8001f9c:	89ba      	ldrh	r2, [r7, #12]
 8001f9e:	8b3b      	ldrh	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2bf0      	cmp	r3, #240	; 0xf0
 8001fa4:	dc0f      	bgt.n	8001fc6 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001fa6:	8b3b      	ldrh	r3, [r7, #24]
 8001fa8:	88fa      	ldrh	r2, [r7, #6]
 8001faa:	89b9      	ldrh	r1, [r7, #12]
 8001fac:	89f8      	ldrh	r0, [r7, #14]
 8001fae:	f7ff ff61 	bl	8001e74 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	8b3a      	ldrh	r2, [r7, #24]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	202c      	movs	r0, #44	; 0x2c
 8001fc2:	f7ff fef9 	bl	8001db8 <ILI9341_SendCommandAndData>
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001fda:	23f0      	movs	r3, #240	; 0xf0
 8001fdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff ff46 	bl	8001e74 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001fe8:	202c      	movs	r0, #44	; 0x2c
 8001fea:	f7ff fec3 	bl	8001d74 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001fee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001ff2:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <ILI9341_ClearDisplay+0xb4>)
 8001ffc:	f008 ff94 	bl	800af28 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8002000:	2201      	movs	r2, #1
 8002002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002006:	481f      	ldr	r0, [pc, #124]	; (8002084 <ILI9341_ClearDisplay+0xb4>)
 8002008:	f008 ff8e 	bl	800af28 <HAL_GPIO_WritePin>

    while (Length > 0U)
 800200c:	e023      	b.n	8002056 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d11b      	bne.n	8002056 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	330c      	adds	r3, #12
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8002030:	bf00      	nop
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d1f7      	bne.n	8002032 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	330c      	adds	r3, #12
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b01      	subs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1d8      	bne.n	800200e <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800205c:	bf00      	nop
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b80      	cmp	r3, #128	; 0x80
 800206c:	d0f7      	beq.n	800205e <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <ILI9341_ClearDisplay+0xb4>)
 8002076:	f008 ff57 	bl	800af28 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020400 	.word	0x40020400
 8002088:	20000350 	.word	0x20000350

0800208c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <ILI9341_Init+0x9c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <ILI9341_Init+0xa0>)
 800209c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 80020ae:	2200      	movs	r2, #0
 80020b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b4:	481e      	ldr	r0, [pc, #120]	; (8002130 <ILI9341_Init+0xa4>)
 80020b6:	f008 ff37 	bl	800af28 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80020ba:	200a      	movs	r0, #10
 80020bc:	f7ff fe1f 	bl	8001cfe <ILI9341_Delay>
	ILI9341_RST_HIGH;
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c6:	481a      	ldr	r0, [pc, #104]	; (8002130 <ILI9341_Init+0xa4>)
 80020c8:	f008 ff2e 	bl	800af28 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80020cc:	200a      	movs	r0, #10
 80020ce:	f7ff fe16 	bl	8001cfe <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 80020d2:	e019      	b.n	8002108 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60fa      	str	r2, [r7, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 80020de:	7abb      	ldrb	r3, [r7, #10]
 80020e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e4:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 80020e6:	7a7a      	ldrb	r2, [r7, #9]
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe63 	bl	8001db8 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 80020f2:	7a7b      	ldrb	r3, [r7, #9]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 80020fa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da02      	bge.n	8002108 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 8002102:	2096      	movs	r0, #150	; 0x96
 8002104:	f7ff fdfb 	bl	8001cfe <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60fa      	str	r2, [r7, #12]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	72fb      	strb	r3, [r7, #11]
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1dd      	bne.n	80020d4 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002118:	2003      	movs	r0, #3
 800211a:	f7ff fe7d 	bl	8001e18 <ILI9341_SetRotation>
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000350 	.word	0x20000350
 800212c:	08015f68 	.word	0x08015f68
 8002130:	40020400 	.word	0x40020400

08002134 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 800213a:	2200      	movs	r2, #0
 800213c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002140:	480a      	ldr	r0, [pc, #40]	; (800216c <XPT2046_GetRawData+0x38>)
 8002142:	f008 fef1 	bl	800af28 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <XPT2046_GetRawData+0x3c>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2305      	movs	r3, #5
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <XPT2046_GetRawData+0x40>)
 8002154:	4908      	ldr	r1, [pc, #32]	; (8002178 <XPT2046_GetRawData+0x44>)
 8002156:	f00c fd08 	bl	800eb6a <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <XPT2046_GetRawData+0x38>)
 8002162:	f008 fee1 	bl	800af28 <HAL_GPIO_WritePin>
#endif
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40020400 	.word	0x40020400
 8002170:	20000230 	.word	0x20000230
 8002174:	20000240 	.word	0x20000240
 8002178:	20000238 	.word	0x20000238

0800217c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 8002190:	789b      	ldrb	r3, [r3, #2]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b21b      	sxth	r3, r3
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 80021a0:	78db      	ldrb	r3, [r3, #3]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 80021a8:	791b      	ldrb	r3, [r3, #4]
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	801a      	strh	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000240 	.word	0x20000240

080021c8 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80021c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80021d4:	f107 020c 	add.w	r2, r7, #12
 80021d8:	f107 030e 	add.w	r3, r7, #14
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ffcc 	bl	800217c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 80021e4:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <XPT2046_ReadTouchPoint+0x118>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d16e      	bne.n	80022ca <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 80021ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f9ad 	bl	8000554 <__aeabi_i2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe fa11 	bl	8000628 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4690      	mov	r8, r2
 800220c:	4699      	mov	r9, r3
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 8002210:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002214:	89bb      	ldrh	r3, [r7, #12]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f99c 	bl	8000554 <__aeabi_i2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4620      	mov	r0, r4
 8002222:	4629      	mov	r1, r5
 8002224:	f7fe fa00 	bl	8000628 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4640      	mov	r0, r8
 800222e:	4649      	mov	r1, r9
 8002230:	f7fe f844 	bl	80002bc <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 800223e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002242:	f7fe f83b 	bl	80002bc <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fcc3 	bl	8000bd8 <__aeabi_d2uiz>
 8002252:	4603      	mov	r3, r0
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 800225c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f976 	bl	8000554 <__aeabi_i2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f9da 	bl	8000628 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4690      	mov	r8, r2
 800227a:	4699      	mov	r9, r3
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 800227e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002282:	89bb      	ldrh	r3, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f965 	bl	8000554 <__aeabi_i2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4620      	mov	r0, r4
 8002290:	4629      	mov	r1, r5
 8002292:	f7fe f9c9 	bl	8000628 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4640      	mov	r0, r8
 800229c:	4649      	mov	r1, r9
 800229e:	f7fe f80d 	bl	80002bc <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 80022ac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022b0:	f7fe f804 	bl	80002bc <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc8c 	bl	8000bd8 <__aeabi_d2uiz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80022c8:	e005      	b.n	80022d6 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80022ca:	89fa      	ldrh	r2, [r7, #14]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80022d0:	89ba      	ldrh	r2, [r7, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	801a      	strh	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022e0:	20000245 	.word	0x20000245
 80022e4:	20000000 	.word	0x20000000

080022e8 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e013      	b.n	8002328 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <XPT2046_GetTouchPoint+0x74>)
 8002304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002308:	461a      	mov	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <XPT2046_GetTouchPoint+0x74>)
 8002314:	330a      	adds	r3, #10
 8002316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800231a:	461a      	mov	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d9e8      	bls.n	8002300 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <XPT2046_GetTouchPoint+0x78>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <XPT2046_GetTouchPoint+0x78>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	b29a      	uxth	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	801a      	strh	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000354 	.word	0x20000354
 8002360:	cccccccd 	.word	0xcccccccd

08002364 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <XPT2046_IsTouched+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d101      	bne.n	8002376 <XPT2046_IsTouched+0x12>
		return 1;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <XPT2046_IsTouched+0x14>

	return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000037d 	.word	0x2000037d

08002388 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <XPT2046_Task+0x16c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b03      	cmp	r3, #3
 8002394:	f200 80ab 	bhi.w	80024ee <XPT2046_Task+0x166>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <XPT2046_Task+0x18>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080024e5 	.word	0x080024e5
 80023a4:	080023b1 	.word	0x080023b1
 80023a8:	08002427 	.word	0x08002427
 80023ac:	080024a3 	.word	0x080024a3
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80023b0:	f007 fe3e 	bl	800a030 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <XPT2046_Task+0x170>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	f240 8093 	bls.w	80024e8 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80023c2:	f7ff feb7 	bl	8002134 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <XPT2046_Task+0x174>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <XPT2046_Task+0x178>)
 80023ce:	441a      	add	r2, r3
 80023d0:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <XPT2046_Task+0x174>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	330a      	adds	r3, #10
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4949      	ldr	r1, [pc, #292]	; (8002500 <XPT2046_Task+0x178>)
 80023da:	440b      	add	r3, r1
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff fef2 	bl	80021c8 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <XPT2046_Task+0x174>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b43      	ldr	r3, [pc, #268]	; (80024fc <XPT2046_Task+0x174>)
 80023ee:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <XPT2046_Task+0x174>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b0a      	cmp	r3, #10
 80023f6:	d105      	bne.n	8002404 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 80023f8:	4b40      	ldr	r3, [pc, #256]	; (80024fc <XPT2046_Task+0x174>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <XPT2046_Task+0x16c>)
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002408:	483e      	ldr	r0, [pc, #248]	; (8002504 <XPT2046_Task+0x17c>)
 800240a:	f008 fd75 	bl	800aef8 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <XPT2046_Task+0x16c>)
 8002416:	2203      	movs	r2, #3
 8002418:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800241a:	f007 fe09 	bl	800a030 <HAL_GetTick>
 800241e:	4603      	mov	r3, r0
 8002420:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <XPT2046_Task+0x170>)
 8002422:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002424:	e060      	b.n	80024e8 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002426:	f007 fe03 	bl	800a030 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <XPT2046_Task+0x170>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	d95a      	bls.n	80024ec <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002436:	f7ff fe7d 	bl	8002134 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <XPT2046_Task+0x174>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <XPT2046_Task+0x178>)
 8002442:	441a      	add	r2, r3
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <XPT2046_Task+0x174>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	330a      	adds	r3, #10
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	492c      	ldr	r1, [pc, #176]	; (8002500 <XPT2046_Task+0x178>)
 800244e:	440b      	add	r3, r1
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f7ff feb8 	bl	80021c8 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002458:	4b28      	ldr	r3, [pc, #160]	; (80024fc <XPT2046_Task+0x174>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <XPT2046_Task+0x174>)
 8002462:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <XPT2046_Task+0x174>)
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <XPT2046_Task+0x180>)
 800246a:	fba3 1302 	umull	r1, r3, r3, r2
 800246e:	08d9      	lsrs	r1, r3, #3
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <XPT2046_Task+0x174>)
 800247e:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002484:	481f      	ldr	r0, [pc, #124]	; (8002504 <XPT2046_Task+0x17c>)
 8002486:	f008 fd37 	bl	800aef8 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <XPT2046_Task+0x16c>)
 8002492:	2203      	movs	r2, #3
 8002494:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002496:	f007 fdcb 	bl	800a030 <HAL_GetTick>
 800249a:	4603      	mov	r3, r0
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <XPT2046_Task+0x170>)
 800249e:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80024a0:	e024      	b.n	80024ec <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <XPT2046_Task+0x16c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <XPT2046_Task+0x174>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80024ae:	e009      	b.n	80024c4 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <XPT2046_Task+0x184>)
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <XPT2046_Task+0x188>)
 80024ba:	f993 3000 	ldrsb.w	r3, [r3]
 80024be:	4618      	mov	r0, r3
 80024c0:	f007 ff78 	bl	800a3b4 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <XPT2046_Task+0x188>)
 80024c6:	f993 3000 	ldrsb.w	r3, [r3]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f007 ff63 	bl	800a396 <HAL_NVIC_GetPendingIRQ>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ec      	bne.n	80024b0 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <XPT2046_Task+0x188>)
 80024d8:	f993 3000 	ldrsb.w	r3, [r3]
 80024dc:	4618      	mov	r0, r3
 80024de:	f007 ff32 	bl	800a346 <HAL_NVIC_EnableIRQ>
		  break;
 80024e2:	e004      	b.n	80024ee <XPT2046_Task+0x166>
		  break;
 80024e4:	bf00      	nop
 80024e6:	e002      	b.n	80024ee <XPT2046_Task+0x166>
		  break;
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <XPT2046_Task+0x166>
		  break;
 80024ec:	bf00      	nop

	  }
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000037d 	.word	0x2000037d
 80024f8:	20000380 	.word	0x20000380
 80024fc:	2000037c 	.word	0x2000037c
 8002500:	20000354 	.word	0x20000354
 8002504:	40020000 	.word	0x40020000
 8002508:	cccccccd 	.word	0xcccccccd
 800250c:	40013c00 	.word	0x40013c00
 8002510:	20000234 	.word	0x20000234

08002514 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002518:	2017      	movs	r0, #23
 800251a:	f007 ff22 	bl	800a362 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 800251e:	4b02      	ldr	r3, [pc, #8]	; (8002528 <XPT2046_IRQ+0x14>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000037d 	.word	0x2000037d

0800252c <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <XPT2046_Init+0x84>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <XPT2046_Init+0x88>)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <XPT2046_Init+0x8c>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002550:	481a      	ldr	r0, [pc, #104]	; (80025bc <XPT2046_Init+0x90>)
 8002552:	f008 fce9 	bl	800af28 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <XPT2046_Init+0x94>)
 8002558:	2290      	movs	r2, #144	; 0x90
 800255a:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <XPT2046_Init+0x98>)
 800255e:	22d0      	movs	r2, #208	; 0xd0
 8002560:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <XPT2046_Init+0x9c>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002568:	f7ff fde4 	bl	8002134 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 800256c:	2001      	movs	r0, #1
 800256e:	f007 fd6b 	bl	800a048 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <XPT2046_Init+0x94>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <XPT2046_Init+0x9c>)
 800257c:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <XPT2046_Init+0x94>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	015b      	lsls	r3, r3, #5
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <XPT2046_Init+0x9c>)
 8002588:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <XPT2046_Init+0x98>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <XPT2046_Init+0x9c>)
 8002594:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <XPT2046_Init+0x98>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	015b      	lsls	r3, r3, #5
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <XPT2046_Init+0x9c>)
 80025a0:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <XPT2046_Init+0x9c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	711a      	strb	r2, [r3, #4]
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000230 	.word	0x20000230
 80025b4:	20000234 	.word	0x20000234
 80025b8:	2000037d 	.word	0x2000037d
 80025bc:	40020400 	.word	0x40020400
 80025c0:	20000235 	.word	0x20000235
 80025c4:	20000236 	.word	0x20000236
 80025c8:	20000238 	.word	0x20000238

080025cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <MX_DMA_Init+0xa8>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <MX_DMA_Init+0xa8>)
 80025dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <MX_DMA_Init+0xa8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <MX_DMA_Init+0xa8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <MX_DMA_Init+0xa8>)
 80025f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_DMA_Init+0xa8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	200b      	movs	r0, #11
 8002610:	f007 fe7d 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002614:	200b      	movs	r0, #11
 8002616:	f007 fe96 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	200c      	movs	r0, #12
 8002620:	f007 fe75 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002624:	200c      	movs	r0, #12
 8002626:	f007 fe8e 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2010      	movs	r0, #16
 8002630:	f007 fe6d 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002634:	2010      	movs	r0, #16
 8002636:	f007 fe86 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2011      	movs	r0, #17
 8002640:	f007 fe65 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002644:	2011      	movs	r0, #17
 8002646:	f007 fe7e 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	203a      	movs	r0, #58	; 0x3a
 8002650:	f007 fe5d 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002654:	203a      	movs	r0, #58	; 0x3a
 8002656:	f007 fe76 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2046      	movs	r0, #70	; 0x46
 8002660:	f007 fe55 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002664:	2046      	movs	r0, #70	; 0x46
 8002666:	f007 fe6e 	bl	800a346 <HAL_NVIC_EnableIRQ>

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002680:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <DS3231_Init+0x30>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f8ca 	bl	8002820 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800268c:	2000      	movs	r0, #0
 800268e:	f000 f88e 	bl	80027ae <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002692:	f000 f8e7 	bl	8002864 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002696:	f000 f8ad 	bl	80027f4 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800269a:	2001      	movs	r0, #1
 800269c:	f000 f846 	bl	800272c <DS3231_SetInterruptMode>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000384 	.word	0x20000384

080026ac <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	4603      	mov	r3, r0
 80026b4:	460a      	mov	r2, r1
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	733b      	strb	r3, [r7, #12]
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <DS3231_SetRegByte+0x38>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2302      	movs	r3, #2
 80026d4:	21d0      	movs	r1, #208	; 0xd0
 80026d6:	f008 fdb7 	bl	800b248 <HAL_I2C_Master_Transmit>
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000384 	.word	0x20000384

080026e8 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <DS3231_GetRegByte+0x40>)
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	1dfa      	adds	r2, r7, #7
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2301      	movs	r3, #1
 8002700:	21d0      	movs	r1, #208	; 0xd0
 8002702:	f008 fda1 	bl	800b248 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <DS3231_GetRegByte+0x40>)
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f107 020f 	add.w	r2, r7, #15
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2301      	movs	r3, #1
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f008 fe94 	bl	800b444 <HAL_I2C_Master_Receive>
	return val;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000384 	.word	0x20000384

0800272c <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002736:	200e      	movs	r0, #14
 8002738:	f7ff ffd6 	bl	80026e8 <DS3231_GetRegByte>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	b25a      	sxtb	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	b25b      	sxtb	r3, r3
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	b25b      	sxtb	r3, r3
 8002756:	4313      	orrs	r3, r2
 8002758:	b25b      	sxtb	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	200e      	movs	r0, #14
 8002760:	f7ff ffa4 	bl	80026ac <DS3231_SetRegByte>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002776:	200e      	movs	r0, #14
 8002778:	f7ff ffb6 	bl	80026e8 <DS3231_GetRegByte>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002788:	b25b      	sxtb	r3, r3
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	2a00      	cmp	r2, #0
 800278e:	d102      	bne.n	8002796 <DS3231_EnableOscillator+0x2a>
 8002790:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002794:	e000      	b.n	8002798 <DS3231_EnableOscillator+0x2c>
 8002796:	2200      	movs	r2, #0
 8002798:	4313      	orrs	r3, r2
 800279a:	b25b      	sxtb	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	200e      	movs	r0, #14
 80027a2:	f7ff ff83 	bl	80026ac <DS3231_SetRegByte>
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80027b8:	200e      	movs	r0, #14
 80027ba:	f7ff ff95 	bl	80026e8 <DS3231_GetRegByte>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	f023 0302 	bic.w	r3, r3, #2
 80027ca:	b25a      	sxtb	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	200e      	movs	r0, #14
 80027e2:	f7ff ff63 	bl	80026ac <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7ff ffa0 	bl	800272c <DS3231_SetInterruptMode>
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80027fa:	200f      	movs	r0, #15
 80027fc:	f7ff ff74 	bl	80026e8 <DS3231_GetRegByte>
 8002800:	4603      	mov	r3, r0
 8002802:	f023 0302 	bic.w	r3, r3, #2
 8002806:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f023 0302 	bic.w	r3, r3, #2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	200f      	movs	r0, #15
 8002814:	f7ff ff4a 	bl	80026ac <DS3231_SetRegByte>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800282a:	200e      	movs	r0, #14
 800282c:	f7ff ff5c 	bl	80026e8 <DS3231_GetRegByte>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	b25a      	sxtb	r2, r3
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	200e      	movs	r0, #14
 8002852:	f7ff ff2b 	bl	80026ac <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff ff68 	bl	800272c <DS3231_SetInterruptMode>
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 800286a:	200f      	movs	r0, #15
 800286c:	f7ff ff3c 	bl	80026e8 <DS3231_GetRegByte>
 8002870:	4603      	mov	r3, r0
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	200f      	movs	r0, #15
 8002884:	f7ff ff12 	bl	80026ac <DS3231_SetRegByte>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002894:	2003      	movs	r0, #3
 8002896:	f7ff ff27 	bl	80026e8 <DS3231_GetRegByte>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f866 	bl	800296e <DS3231_DecodeBCD>
 80028a2:	4603      	mov	r3, r0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 80028ac:	2002      	movs	r0, #2
 80028ae:	f7ff ff1b 	bl	80026e8 <DS3231_GetRegByte>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f85a 	bl	800296e <DS3231_DecodeBCD>
 80028ba:	4603      	mov	r3, r0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}

080028c0 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7ff ff0f 	bl	80026e8 <DS3231_GetRegByte>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f84e 	bl	800296e <DS3231_DecodeBCD>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f85b 	bl	80029a0 <DS3231_EncodeBCD>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4619      	mov	r1, r3
 80028ee:	2003      	movs	r0, #3
 80028f0:	f7ff fedc 	bl	80026ac <DS3231_SetRegByte>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f846 	bl	80029a0 <DS3231_EncodeBCD>
 8002914:	4603      	mov	r3, r0
 8002916:	4619      	mov	r1, r3
 8002918:	2002      	movs	r0, #2
 800291a:	f7ff fec7 	bl	80026ac <DS3231_SetRegByte>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f834 	bl	80029a0 <DS3231_EncodeBCD>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff feb5 	bl	80026ac <DS3231_SetRegByte>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f822 	bl	80029a0 <DS3231_EncodeBCD>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fea3 	bl	80026ac <DS3231_SetRegByte>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4413      	add	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	b2db      	uxtb	r3, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <DS3231_EncodeBCD+0x40>)
 80029ae:	fba3 1302 	umull	r1, r3, r3, r2
 80029b2:	08d9      	lsrs	r1, r3, #3
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4907      	ldr	r1, [pc, #28]	; (80029e0 <DS3231_EncodeBCD+0x40>)
 80029c4:	fba1 1303 	umull	r1, r3, r1, r3
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	cccccccd 	.word	0xcccccccd

080029e4 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80029e8:	bf00      	nop
 80029ea:	f007 fb21 	bl	800a030 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <eeprom_wait+0x1c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d9f7      	bls.n	80029ea <eeprom_wait+0x6>
    {
    }
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000248 	.word	0x20000248

08002a04 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002a10:	f7ff ffe8 	bl	80029e4 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	9102      	str	r1, [sp, #8]
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	21a0      	movs	r1, #160	; 0xa0
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <eeprom_read+0x38>)
 8002a2e:	f009 f829 	bl	800ba84 <HAL_I2C_Mem_Read>
 8002a32:	4603      	mov	r3, r0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000388 	.word	0x20000388

08002a40 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002a4c:	f7ff ffca 	bl	80029e4 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	9102      	str	r1, [sp, #8]
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	21a0      	movs	r1, #160	; 0xa0
 8002a68:	4807      	ldr	r0, [pc, #28]	; (8002a88 <eeprom_write+0x48>)
 8002a6a:	f008 ff11 	bl	800b890 <HAL_I2C_Mem_Write>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002a72:	f007 fadd 	bl	800a030 <HAL_GetTick>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <eeprom_write+0x4c>)
 8002a7a:	6013      	str	r3, [r2, #0]

    return rc;
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000388 	.word	0x20000388
 8002a8c:	20000248 	.word	0x20000248

08002a90 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002aa0:	79bb      	ldrb	r3, [r7, #6]
 8002aa2:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <EEPROM_RelayStateUpdate+0x2a>
 8002aaa:	f107 030f 	add.w	r3, r7, #15
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	202e      	movs	r0, #46	; 0x2e
 8002ab4:	f7ff ffc4 	bl	8002a40 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002ab8:	e01f      	b.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d107      	bne.n	8002ad0 <EEPROM_RelayStateUpdate+0x40>
 8002ac0:	f107 030f 	add.w	r3, r7, #15
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	202f      	movs	r0, #47	; 0x2f
 8002aca:	f7ff ffb9 	bl	8002a40 <eeprom_write>
}
 8002ace:	e014      	b.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <EEPROM_RelayStateUpdate+0x56>
 8002ad6:	f107 030f 	add.w	r3, r7, #15
 8002ada:	2201      	movs	r2, #1
 8002adc:	4619      	mov	r1, r3
 8002ade:	2030      	movs	r0, #48	; 0x30
 8002ae0:	f7ff ffae 	bl	8002a40 <eeprom_write>
}
 8002ae4:	e009      	b.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d106      	bne.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
 8002aec:	f107 030f 	add.w	r3, r7, #15
 8002af0:	2201      	movs	r2, #1
 8002af2:	4619      	mov	r1, r3
 8002af4:	2031      	movs	r0, #49	; 0x31
 8002af6:	f7ff ffa3 	bl	8002a40 <eeprom_write>
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	71fb      	strb	r3, [r7, #7]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <EEPROM_LightStateUpdate+0x2a>
 8002b1c:	f107 030f 	add.w	r3, r7, #15
 8002b20:	2201      	movs	r2, #1
 8002b22:	4619      	mov	r1, r3
 8002b24:	2033      	movs	r0, #51	; 0x33
 8002b26:	f7ff ff8b 	bl	8002a40 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002b2a:	e01f      	b.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <EEPROM_LightStateUpdate+0x40>
 8002b32:	f107 030f 	add.w	r3, r7, #15
 8002b36:	2201      	movs	r2, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2034      	movs	r0, #52	; 0x34
 8002b3c:	f7ff ff80 	bl	8002a40 <eeprom_write>
}
 8002b40:	e014      	b.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d107      	bne.n	8002b58 <EEPROM_LightStateUpdate+0x56>
 8002b48:	f107 030f 	add.w	r3, r7, #15
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4619      	mov	r1, r3
 8002b50:	2035      	movs	r0, #53	; 0x35
 8002b52:	f7ff ff75 	bl	8002a40 <eeprom_write>
}
 8002b56:	e009      	b.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d106      	bne.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
 8002b5e:	f107 030f 	add.w	r3, r7, #15
 8002b62:	2201      	movs	r2, #1
 8002b64:	4619      	mov	r1, r3
 8002b66:	2036      	movs	r0, #54	; 0x36
 8002b68:	f7ff ff6a 	bl	8002a40 <eeprom_write>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <EEPROM_RelayStateRead+0x24>
 8002b88:	f107 030f 	add.w	r3, r7, #15
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4619      	mov	r1, r3
 8002b90:	202e      	movs	r0, #46	; 0x2e
 8002b92:	f7ff ff37 	bl	8002a04 <eeprom_read>
 8002b96:	e01f      	b.n	8002bd8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <EEPROM_RelayStateRead+0x3a>
 8002b9e:	f107 030f 	add.w	r3, r7, #15
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	202f      	movs	r0, #47	; 0x2f
 8002ba8:	f7ff ff2c 	bl	8002a04 <eeprom_read>
 8002bac:	e014      	b.n	8002bd8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d107      	bne.n	8002bc4 <EEPROM_RelayStateRead+0x50>
 8002bb4:	f107 030f 	add.w	r3, r7, #15
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4619      	mov	r1, r3
 8002bbc:	2030      	movs	r0, #48	; 0x30
 8002bbe:	f7ff ff21 	bl	8002a04 <eeprom_read>
 8002bc2:	e009      	b.n	8002bd8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d106      	bne.n	8002bd8 <EEPROM_RelayStateRead+0x64>
 8002bca:	f107 030f 	add.w	r3, r7, #15
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	2031      	movs	r0, #49	; 0x31
 8002bd4:	f7ff ff16 	bl	8002a04 <eeprom_read>

	return RelayStan;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <EEPROM_LightStateRead+0x24>
 8002bf6:	f107 030f 	add.w	r3, r7, #15
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	2033      	movs	r0, #51	; 0x33
 8002c00:	f7ff ff00 	bl	8002a04 <eeprom_read>
 8002c04:	e01f      	b.n	8002c46 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d107      	bne.n	8002c1c <EEPROM_LightStateRead+0x3a>
 8002c0c:	f107 030f 	add.w	r3, r7, #15
 8002c10:	2201      	movs	r2, #1
 8002c12:	4619      	mov	r1, r3
 8002c14:	2034      	movs	r0, #52	; 0x34
 8002c16:	f7ff fef5 	bl	8002a04 <eeprom_read>
 8002c1a:	e014      	b.n	8002c46 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <EEPROM_LightStateRead+0x50>
 8002c22:	f107 030f 	add.w	r3, r7, #15
 8002c26:	2201      	movs	r2, #1
 8002c28:	4619      	mov	r1, r3
 8002c2a:	2035      	movs	r0, #53	; 0x35
 8002c2c:	f7ff feea 	bl	8002a04 <eeprom_read>
 8002c30:	e009      	b.n	8002c46 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d106      	bne.n	8002c46 <EEPROM_LightStateRead+0x64>
 8002c38:	f107 030f 	add.w	r3, r7, #15
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4619      	mov	r1, r3
 8002c40:	2036      	movs	r0, #54	; 0x36
 8002c42:	f7ff fedf 	bl	8002a04 <eeprom_read>

	return AktualnyStan;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff ff8d 	bl	8002b74 <EEPROM_RelayStateRead>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <EEPROM_RelayStateRestore+0x18>
 8002c60:	2005      	movs	r0, #5
 8002c62:	f005 ffa5 	bl	8008bb0 <SendComand>
 8002c66:	e002      	b.n	8002c6e <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002c68:	2006      	movs	r0, #6
 8002c6a:	f005 ffa1 	bl	8008bb0 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7ff ff80 	bl	8002b74 <EEPROM_RelayStateRead>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <EEPROM_RelayStateRestore+0x32>
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f005 ff98 	bl	8008bb0 <SendComand>
 8002c80:	e002      	b.n	8002c88 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002c82:	2008      	movs	r0, #8
 8002c84:	f005 ff94 	bl	8008bb0 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f7ff ff73 	bl	8002b74 <EEPROM_RelayStateRead>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <EEPROM_RelayStateRestore+0x4c>
 8002c94:	2009      	movs	r0, #9
 8002c96:	f005 ff8b 	bl	8008bb0 <SendComand>
 8002c9a:	e002      	b.n	8002ca2 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002c9c:	200a      	movs	r0, #10
 8002c9e:	f005 ff87 	bl	8008bb0 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff ff66 	bl	8002b74 <EEPROM_RelayStateRead>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <EEPROM_RelayStateRestore+0x66>
 8002cae:	200b      	movs	r0, #11
 8002cb0:	f005 ff7e 	bl	8008bb0 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002cb4:	e002      	b.n	8002cbc <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002cb6:	200c      	movs	r0, #12
 8002cb8:	f005 ff7a 	bl	8008bb0 <SendComand>
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff ff8c 	bl	8002be2 <EEPROM_LightStateRead>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <EEPROM_LightStateRestore+0x18>
 8002cd0:	200d      	movs	r0, #13
 8002cd2:	f005 ff6d 	bl	8008bb0 <SendComand>
 8002cd6:	e002      	b.n	8002cde <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002cd8:	200e      	movs	r0, #14
 8002cda:	f005 ff69 	bl	8008bb0 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f7ff ff7f 	bl	8002be2 <EEPROM_LightStateRead>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <EEPROM_LightStateRestore+0x32>
 8002cea:	200f      	movs	r0, #15
 8002cec:	f005 ff60 	bl	8008bb0 <SendComand>
 8002cf0:	e002      	b.n	8002cf8 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002cf2:	2010      	movs	r0, #16
 8002cf4:	f005 ff5c 	bl	8008bb0 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f7ff ff72 	bl	8002be2 <EEPROM_LightStateRead>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <EEPROM_LightStateRestore+0x4c>
 8002d04:	2011      	movs	r0, #17
 8002d06:	f005 ff53 	bl	8008bb0 <SendComand>
 8002d0a:	e002      	b.n	8002d12 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002d0c:	2012      	movs	r0, #18
 8002d0e:	f005 ff4f 	bl	8008bb0 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002d12:	2004      	movs	r0, #4
 8002d14:	f7ff ff65 	bl	8002be2 <EEPROM_LightStateRead>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <EEPROM_LightStateRestore+0x66>
 8002d1e:	2013      	movs	r0, #19
 8002d20:	f005 ff46 	bl	8008bb0 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002d24:	e002      	b.n	8002d2c <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002d26:	2014      	movs	r0, #20
 8002d28:	f005 ff42 	bl	8008bb0 <SendComand>
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d46:	f107 030a 	add.w	r3, r7, #10
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2005      	movs	r0, #5
 8002d50:	f7ff fe58 	bl	8002a04 <eeprom_read>
 8002d54:	e009      	b.n	8002d6a <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d106      	bne.n	8002d6a <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d5c:	f107 030a 	add.w	r3, r7, #10
 8002d60:	2201      	movs	r2, #1
 8002d62:	4619      	mov	r1, r3
 8002d64:	200c      	movs	r0, #12
 8002d66:	f7ff fe4d 	bl	8002a04 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	e016      	b.n	8002da2 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002d74:	7abb      	ldrb	r3, [r7, #10]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e004      	b.n	8002d96 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	72fb      	strb	r3, [r7, #11]
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d9e5      	bls.n	8002d74 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	6039      	str	r1, [r7, #0]
 8002dbc:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	72fb      	strb	r3, [r7, #11]
 8002dca:	e011      	b.n	8002df0 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	7abb      	ldrb	r3, [r7, #10]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	3301      	adds	r3, #1
 8002dee:	72fb      	strb	r3, [r7, #11]
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d9ea      	bls.n	8002dcc <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002dfc:	f107 030a 	add.w	r3, r7, #10
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	2005      	movs	r0, #5
 8002e06:	f7ff fe1b 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002e0a:	e009      	b.n	8002e20 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d106      	bne.n	8002e20 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002e12:	f107 030a 	add.w	r3, r7, #10
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	200c      	movs	r0, #12
 8002e1c:	f7ff fe10 	bl	8002a40 <eeprom_write>
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10e      	bne.n	8002e60 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002e42:	f107 0309 	add.w	r3, r7, #9
 8002e46:	2201      	movs	r2, #1
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2006      	movs	r0, #6
 8002e4c:	f7ff fdda 	bl	8002a04 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002e50:	f107 0308 	add.w	r3, r7, #8
 8002e54:	2201      	movs	r2, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	2007      	movs	r0, #7
 8002e5a:	f7ff fdd3 	bl	8002a04 <eeprom_read>
 8002e5e:	e010      	b.n	8002e82 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d10d      	bne.n	8002e82 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002e66:	f107 0309 	add.w	r3, r7, #9
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	200d      	movs	r0, #13
 8002e70:	f7ff fdc8 	bl	8002a04 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	200e      	movs	r0, #14
 8002e7e:	f7ff fdc1 	bl	8002a04 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002e82:	2301      	movs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	72fb      	strb	r3, [r7, #11]
 8002e8a:	e016      	b.n	8002eba <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002e8c:	7a7b      	ldrb	r3, [r7, #9]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e004      	b.n	8002eae <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	72fb      	strb	r3, [r7, #11]
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d9e5      	bls.n	8002e8c <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	72bb      	strb	r3, [r7, #10]
 8002ec8:	e016      	b.n	8002ef8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002eca:	7a3b      	ldrb	r3, [r7, #8]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002ed6:	7abb      	ldrb	r3, [r7, #10]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e004      	b.n	8002eec <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002ee2:	7abb      	ldrb	r3, [r7, #10]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002ef2:	7abb      	ldrb	r3, [r7, #10]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	72bb      	strb	r3, [r7, #10]
 8002ef8:	7abb      	ldrb	r3, [r7, #10]
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d9e5      	bls.n	8002eca <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	72fb      	strb	r3, [r7, #11]
 8002f24:	e011      	b.n	8002f4a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	7a7b      	ldrb	r3, [r7, #9]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	3301      	adds	r3, #1
 8002f48:	72fb      	strb	r3, [r7, #11]
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d9ea      	bls.n	8002f26 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002f50:	2301      	movs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002f54:	2304      	movs	r3, #4
 8002f56:	72bb      	strb	r3, [r7, #10]
 8002f58:	e011      	b.n	8002f7e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002f5a:	7abb      	ldrb	r3, [r7, #10]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	7a3b      	ldrb	r3, [r7, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002f78:	7abb      	ldrb	r3, [r7, #10]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	72bb      	strb	r3, [r7, #10]
 8002f7e:	7abb      	ldrb	r3, [r7, #10]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d9ea      	bls.n	8002f5a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10e      	bne.n	8002fa8 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002f8a:	f107 0309 	add.w	r3, r7, #9
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4619      	mov	r1, r3
 8002f92:	2006      	movs	r0, #6
 8002f94:	f7ff fd54 	bl	8002a40 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2007      	movs	r0, #7
 8002fa2:	f7ff fd4d 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002fa6:	e010      	b.n	8002fca <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d10d      	bne.n	8002fca <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002fae:	f107 0309 	add.w	r3, r7, #9
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	200d      	movs	r0, #13
 8002fb8:	f7ff fd42 	bl	8002a40 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	200e      	movs	r0, #14
 8002fc6:	f7ff fd3b 	bl	8002a40 <eeprom_write>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6039      	str	r1, [r7, #0]
 8002fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002fe8:	f107 030f 	add.w	r3, r7, #15
 8002fec:	2201      	movs	r2, #1
 8002fee:	4619      	mov	r1, r3
 8002ff0:	2008      	movs	r0, #8
 8002ff2:	f7ff fd07 	bl	8002a04 <eeprom_read>
 8002ff6:	e009      	b.n	800300c <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d106      	bne.n	800300c <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002ffe:	f107 030f 	add.w	r3, r7, #15
 8003002:	2201      	movs	r2, #1
 8003004:	4619      	mov	r1, r3
 8003006:	200f      	movs	r0, #15
 8003008:	f7ff fcfc 	bl	8002a04 <eeprom_read>
	}

	*hourOn = TempHour;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	701a      	strb	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	6039      	str	r1, [r7, #0]
 8003024:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003030:	f107 030f 	add.w	r3, r7, #15
 8003034:	2201      	movs	r2, #1
 8003036:	4619      	mov	r1, r3
 8003038:	2009      	movs	r0, #9
 800303a:	f7ff fce3 	bl	8002a04 <eeprom_read>
 800303e:	e009      	b.n	8003054 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d106      	bne.n	8003054 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003046:	f107 030f 	add.w	r3, r7, #15
 800304a:	2201      	movs	r2, #1
 800304c:	4619      	mov	r1, r3
 800304e:	2010      	movs	r0, #16
 8003050:	f7ff fcd8 	bl	8002a04 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	701a      	strb	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	6039      	str	r1, [r7, #0]
 800306c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003078:	f107 030f 	add.w	r3, r7, #15
 800307c:	2201      	movs	r2, #1
 800307e:	4619      	mov	r1, r3
 8003080:	200a      	movs	r0, #10
 8003082:	f7ff fcbf 	bl	8002a04 <eeprom_read>
 8003086:	e009      	b.n	800309c <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d106      	bne.n	800309c <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 800308e:	f107 030f 	add.w	r3, r7, #15
 8003092:	2201      	movs	r2, #1
 8003094:	4619      	mov	r1, r3
 8003096:	2011      	movs	r0, #17
 8003098:	f7ff fcb4 	bl	8002a04 <eeprom_read>
	}

	*hourOff = TempHour;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	701a      	strb	r2, [r3, #0]

}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	6039      	str	r1, [r7, #0]
 80030b4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80030c0:	f107 030f 	add.w	r3, r7, #15
 80030c4:	2201      	movs	r2, #1
 80030c6:	4619      	mov	r1, r3
 80030c8:	200b      	movs	r0, #11
 80030ca:	f7ff fc9b 	bl	8002a04 <eeprom_read>
 80030ce:	e009      	b.n	80030e4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d106      	bne.n	80030e4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80030d6:	f107 030f 	add.w	r3, r7, #15
 80030da:	2201      	movs	r2, #1
 80030dc:	4619      	mov	r1, r3
 80030de:	2012      	movs	r0, #18
 80030e0:	f7ff fc90 	bl	8002a04 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	701a      	strb	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	460a      	mov	r2, r1
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	4613      	mov	r3, r2
 8003100:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <EEPROM_ScheduleHourOnUpdate+0x2a>
 800310c:	f107 030f 	add.w	r3, r7, #15
 8003110:	2201      	movs	r2, #1
 8003112:	4619      	mov	r1, r3
 8003114:	2008      	movs	r0, #8
 8003116:	f7ff fc93 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 800311a:	e009      	b.n	8003130 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d106      	bne.n	8003130 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003122:	f107 030f 	add.w	r3, r7, #15
 8003126:	2201      	movs	r2, #1
 8003128:	4619      	mov	r1, r3
 800312a:	200f      	movs	r0, #15
 800312c:	f7ff fc88 	bl	8002a40 <eeprom_write>
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	460a      	mov	r2, r1
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	4613      	mov	r3, r2
 8003146:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003148:	79bb      	ldrb	r3, [r7, #6]
 800314a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003152:	f107 030f 	add.w	r3, r7, #15
 8003156:	2201      	movs	r2, #1
 8003158:	4619      	mov	r1, r3
 800315a:	2009      	movs	r0, #9
 800315c:	f7ff fc70 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003160:	e009      	b.n	8003176 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d106      	bne.n	8003176 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003168:	f107 030f 	add.w	r3, r7, #15
 800316c:	2201      	movs	r2, #1
 800316e:	4619      	mov	r1, r3
 8003170:	2010      	movs	r0, #16
 8003172:	f7ff fc65 	bl	8002a40 <eeprom_write>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	460a      	mov	r2, r1
 8003188:	71fb      	strb	r3, [r7, #7]
 800318a:	4613      	mov	r3, r2
 800318c:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800318e:	79bb      	ldrb	r3, [r7, #6]
 8003190:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003198:	f107 030f 	add.w	r3, r7, #15
 800319c:	2201      	movs	r2, #1
 800319e:	4619      	mov	r1, r3
 80031a0:	200a      	movs	r0, #10
 80031a2:	f7ff fc4d 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 80031a6:	e009      	b.n	80031bc <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d106      	bne.n	80031bc <EEPROM_ScheduleHourOffUpdate+0x3e>
 80031ae:	f107 030f 	add.w	r3, r7, #15
 80031b2:	2201      	movs	r2, #1
 80031b4:	4619      	mov	r1, r3
 80031b6:	2011      	movs	r0, #17
 80031b8:	f7ff fc42 	bl	8002a40 <eeprom_write>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	460a      	mov	r2, r1
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80031d4:	79bb      	ldrb	r3, [r7, #6]
 80031d6:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80031de:	f107 030f 	add.w	r3, r7, #15
 80031e2:	2201      	movs	r2, #1
 80031e4:	4619      	mov	r1, r3
 80031e6:	200b      	movs	r0, #11
 80031e8:	f7ff fc2a 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80031ec:	e009      	b.n	8003202 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d106      	bne.n	8003202 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80031f4:	f107 030f 	add.w	r3, r7, #15
 80031f8:	2201      	movs	r2, #1
 80031fa:	4619      	mov	r1, r3
 80031fc:	2012      	movs	r0, #18
 80031fe:	f7ff fc1f 	bl	8002a40 <eeprom_write>
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003212:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003216:	f7fe fedb 	bl	8001fd0 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 800321a:	238c      	movs	r3, #140	; 0x8c
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	23f0      	movs	r3, #240	; 0xf0
 8003220:	4aae      	ldr	r2, [pc, #696]	; (80034dc <system_init+0x2d0>)
 8003222:	2132      	movs	r1, #50	; 0x32
 8003224:	201e      	movs	r0, #30
 8003226:	f7fe fea8 	bl	8001f7a <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800322a:	48ad      	ldr	r0, [pc, #692]	; (80034e0 <system_init+0x2d4>)
 800322c:	f7fe facc 	bl	80017c8 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003230:	49ac      	ldr	r1, [pc, #688]	; (80034e4 <system_init+0x2d8>)
 8003232:	48ad      	ldr	r0, [pc, #692]	; (80034e8 <system_init+0x2dc>)
 8003234:	f00e fbd8 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003238:	f24c 6318 	movw	r3, #50712	; 0xc618
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2300      	movs	r3, #0
 8003244:	220a      	movs	r2, #10
 8003246:	213c      	movs	r1, #60	; 0x3c
 8003248:	48a7      	ldr	r0, [pc, #668]	; (80034e8 <system_init+0x2dc>)
 800324a:	f7fe fcd7 	bl	8001bfc <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800324e:	f006 feef 	bl	800a030 <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4aa5      	ldr	r2, [pc, #660]	; (80034ec <system_init+0x2e0>)
 8003256:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003258:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2314      	movs	r3, #20
 8003264:	2214      	movs	r2, #20
 8003266:	21be      	movs	r1, #190	; 0xbe
 8003268:	203c      	movs	r0, #60	; 0x3c
 800326a:	f7fe f9df 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800326e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	2305      	movs	r3, #5
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2314      	movs	r3, #20
 800327a:	2214      	movs	r2, #20
 800327c:	21be      	movs	r1, #190	; 0xbe
 800327e:	205a      	movs	r0, #90	; 0x5a
 8003280:	f7fe f9d4 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003284:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2305      	movs	r3, #5
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2314      	movs	r3, #20
 8003290:	2214      	movs	r2, #20
 8003292:	21be      	movs	r1, #190	; 0xbe
 8003294:	2078      	movs	r0, #120	; 0x78
 8003296:	f7fe f9c9 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800329a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2305      	movs	r3, #5
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2314      	movs	r3, #20
 80032a6:	2214      	movs	r2, #20
 80032a8:	21be      	movs	r1, #190	; 0xbe
 80032aa:	2096      	movs	r0, #150	; 0x96
 80032ac:	f7fe f9be 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 80032b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2305      	movs	r3, #5
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2314      	movs	r3, #20
 80032bc:	2214      	movs	r2, #20
 80032be:	21be      	movs	r1, #190	; 0xbe
 80032c0:	20b4      	movs	r0, #180	; 0xb4
 80032c2:	f7fe f9b3 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80032c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2305      	movs	r3, #5
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2314      	movs	r3, #20
 80032d2:	2214      	movs	r2, #20
 80032d4:	21be      	movs	r1, #190	; 0xbe
 80032d6:	20d2      	movs	r0, #210	; 0xd2
 80032d8:	f7fe f9a8 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80032dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2305      	movs	r3, #5
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2314      	movs	r3, #20
 80032e8:	2214      	movs	r2, #20
 80032ea:	21be      	movs	r1, #190	; 0xbe
 80032ec:	20f0      	movs	r0, #240	; 0xf0
 80032ee:	f7fe f99d 	bl	800162c <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80032f2:	f006 fe9d 	bl	800a030 <HAL_GetTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <system_init+0x2e0>)
 80032fa:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80032fc:	487c      	ldr	r0, [pc, #496]	; (80034f0 <system_init+0x2e4>)
 80032fe:	f7fe fa63 	bl	80017c8 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003302:	20c8      	movs	r0, #200	; 0xc8
 8003304:	f002 f8e6 	bl	80054d4 <initWait>
	  	  LastTime = HAL_GetTick();
 8003308:	f006 fe92 	bl	800a030 <HAL_GetTick>
 800330c:	4603      	mov	r3, r0
 800330e:	4a77      	ldr	r2, [pc, #476]	; (80034ec <system_init+0x2e0>)
 8003310:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 8003312:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2305      	movs	r3, #5
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2314      	movs	r3, #20
 800331e:	2214      	movs	r2, #20
 8003320:	21be      	movs	r1, #190	; 0xbe
 8003322:	203c      	movs	r0, #60	; 0x3c
 8003324:	f7fe f9ff 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003328:	2201      	movs	r2, #1
 800332a:	4972      	ldr	r1, [pc, #456]	; (80034f4 <system_init+0x2e8>)
 800332c:	2001      	movs	r0, #1
 800332e:	f7ff fb69 	bl	8002a04 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8003332:	2025      	movs	r0, #37	; 0x25
 8003334:	f005 fc3c 	bl	8008bb0 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003338:	486f      	ldr	r0, [pc, #444]	; (80034f8 <system_init+0x2ec>)
 800333a:	f006 fb99 	bl	8009a70 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800333e:	496f      	ldr	r1, [pc, #444]	; (80034fc <system_init+0x2f0>)
 8003340:	4869      	ldr	r0, [pc, #420]	; (80034e8 <system_init+0x2dc>)
 8003342:	f00e fb51 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003346:	f24c 6318 	movw	r3, #50712	; 0xc618
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	2301      	movs	r3, #1
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2300      	movs	r3, #0
 8003352:	22dc      	movs	r2, #220	; 0xdc
 8003354:	2114      	movs	r1, #20
 8003356:	4864      	ldr	r0, [pc, #400]	; (80034e8 <system_init+0x2dc>)
 8003358:	f7fe fc50 	bl	8001bfc <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800335c:	20c8      	movs	r0, #200	; 0xc8
 800335e:	f002 f8b9 	bl	80054d4 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003362:	f006 fe65 	bl	800a030 <HAL_GetTick>
 8003366:	4603      	mov	r3, r0
 8003368:	4a60      	ldr	r2, [pc, #384]	; (80034ec <system_init+0x2e0>)
 800336a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 800336c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2305      	movs	r3, #5
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2314      	movs	r3, #20
 8003378:	2214      	movs	r2, #20
 800337a:	21be      	movs	r1, #190	; 0xbe
 800337c:	205a      	movs	r0, #90	; 0x5a
 800337e:	f7fe f9d2 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003382:	201b      	movs	r0, #27
 8003384:	f005 fc14 	bl	8008bb0 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003388:	f7ff fc62 	bl	8002c50 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800338c:	485a      	ldr	r0, [pc, #360]	; (80034f8 <system_init+0x2ec>)
 800338e:	f006 fb6f 	bl	8009a70 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003392:	495b      	ldr	r1, [pc, #364]	; (8003500 <system_init+0x2f4>)
 8003394:	4854      	ldr	r0, [pc, #336]	; (80034e8 <system_init+0x2dc>)
 8003396:	f00e fb27 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800339a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2301      	movs	r3, #1
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	22dc      	movs	r2, #220	; 0xdc
 80033a8:	2114      	movs	r1, #20
 80033aa:	484f      	ldr	r0, [pc, #316]	; (80034e8 <system_init+0x2dc>)
 80033ac:	f7fe fc26 	bl	8001bfc <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80033b0:	20c8      	movs	r0, #200	; 0xc8
 80033b2:	f002 f88f 	bl	80054d4 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80033b6:	f006 fe3b 	bl	800a030 <HAL_GetTick>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <system_init+0x2e0>)
 80033be:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80033c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2305      	movs	r3, #5
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2314      	movs	r3, #20
 80033cc:	2214      	movs	r2, #20
 80033ce:	21be      	movs	r1, #190	; 0xbe
 80033d0:	2078      	movs	r0, #120	; 0x78
 80033d2:	f7fe f9a8 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80033d6:	2004      	movs	r0, #4
 80033d8:	f005 fbea 	bl	8008bb0 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80033dc:	2001      	movs	r0, #1
 80033de:	f004 fab5 	bl	800794c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80033e2:	20c8      	movs	r0, #200	; 0xc8
 80033e4:	f002 f876 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 80033e8:	f006 fe22 	bl	800a030 <HAL_GetTick>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <system_init+0x2e0>)
 80033f0:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80033f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	2305      	movs	r3, #5
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2314      	movs	r3, #20
 80033fe:	2214      	movs	r2, #20
 8003400:	21be      	movs	r1, #190	; 0xbe
 8003402:	2096      	movs	r0, #150	; 0x96
 8003404:	f7fe f98f 	bl	8001726 <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8003408:	f7ff fc5a 	bl	8002cc0 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800340c:	483a      	ldr	r0, [pc, #232]	; (80034f8 <system_init+0x2ec>)
 800340e:	f006 fb2f 	bl	8009a70 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 8003412:	493c      	ldr	r1, [pc, #240]	; (8003504 <system_init+0x2f8>)
 8003414:	4834      	ldr	r0, [pc, #208]	; (80034e8 <system_init+0x2dc>)
 8003416:	f00e fae7 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800341a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2301      	movs	r3, #1
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	22dc      	movs	r2, #220	; 0xdc
 8003428:	2114      	movs	r1, #20
 800342a:	482f      	ldr	r0, [pc, #188]	; (80034e8 <system_init+0x2dc>)
 800342c:	f7fe fbe6 	bl	8001bfc <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003430:	20c8      	movs	r0, #200	; 0xc8
 8003432:	f002 f84f 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 8003436:	f006 fdfb 	bl	800a030 <HAL_GetTick>
 800343a:	4603      	mov	r3, r0
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <system_init+0x2e0>)
 800343e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003440:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2305      	movs	r3, #5
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2314      	movs	r3, #20
 800344c:	2214      	movs	r2, #20
 800344e:	21be      	movs	r1, #190	; 0xbe
 8003450:	20b4      	movs	r0, #180	; 0xb4
 8003452:	f7fe f968 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8003456:	2003      	movs	r0, #3
 8003458:	f005 fbaa 	bl	8008bb0 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 800345c:	2002      	movs	r0, #2
 800345e:	f004 fa75 	bl	800794c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003462:	20c8      	movs	r0, #200	; 0xc8
 8003464:	f002 f836 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 8003468:	f006 fde2 	bl	800a030 <HAL_GetTick>
 800346c:	4603      	mov	r3, r0
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <system_init+0x2e0>)
 8003470:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003472:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2305      	movs	r3, #5
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2314      	movs	r3, #20
 800347e:	2214      	movs	r2, #20
 8003480:	21be      	movs	r1, #190	; 0xbe
 8003482:	20d2      	movs	r0, #210	; 0xd2
 8003484:	f7fe f94f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003488:	2015      	movs	r0, #21
 800348a:	f005 fb91 	bl	8008bb0 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800348e:	20c8      	movs	r0, #200	; 0xc8
 8003490:	f002 f820 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 8003494:	f006 fdcc 	bl	800a030 <HAL_GetTick>
 8003498:	4603      	mov	r3, r0
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <system_init+0x2e0>)
 800349c:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800349e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2305      	movs	r3, #5
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2314      	movs	r3, #20
 80034aa:	2214      	movs	r2, #20
 80034ac:	21be      	movs	r1, #190	; 0xbe
 80034ae:	20f0      	movs	r0, #240	; 0xf0
 80034b0:	f7fe f939 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80034b4:	2016      	movs	r0, #22
 80034b6:	f005 fb7b 	bl	8008bb0 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80034ba:	480f      	ldr	r0, [pc, #60]	; (80034f8 <system_init+0x2ec>)
 80034bc:	f006 fad8 	bl	8009a70 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80034c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80034c4:	f002 f806 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 80034c8:	f006 fdb2 	bl	800a030 <HAL_GetTick>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <system_init+0x2e0>)
 80034d0:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	08015fd8 	.word	0x08015fd8
 80034e0:	080290a0 	.word	0x080290a0
 80034e4:	0801566c 	.word	0x0801566c
 80034e8:	200002c0 	.word	0x200002c0
 80034ec:	20000250 	.word	0x20000250
 80034f0:	08027128 	.word	0x08027128
 80034f4:	20000033 	.word	0x20000033
 80034f8:	200004f0 	.word	0x200004f0
 80034fc:	08015680 	.word	0x08015680
 8003500:	0801569c 	.word	0x0801569c
 8003504:	080156bc 	.word	0x080156bc

08003508 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003512:	edc7 0a04 	vstr	s1, [r7, #16]
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	460b      	mov	r3, r1
 800351a:	ed87 1a01 	vstr	s2, [r7, #4]
 800351e:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003520:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003524:	f7fe fd54 	bl	8001fd0 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003528:	2003      	movs	r0, #3
 800352a:	f005 fb41 	bl	8008bb0 <SendComand>
	  SendComand(UCMD_PRES_1);
 800352e:	2004      	movs	r0, #4
 8003530:	f005 fb3e 	bl	8008bb0 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003534:	201b      	movs	r0, #27
 8003536:	f005 fb3b 	bl	8008bb0 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800353a:	f7ff f9b5 	bl	80028a8 <DS3231_GetHour>
 800353e:	4603      	mov	r3, r0
 8003540:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8003542:	f7ff f9bd 	bl	80028c0 <DS3231_GetMinute>
 8003546:	4603      	mov	r3, r0
 8003548:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 800354a:	4881      	ldr	r0, [pc, #516]	; (8003750 <showCurrentParameters+0x248>)
 800354c:	f7fe f93c 	bl	80017c8 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003550:	4980      	ldr	r1, [pc, #512]	; (8003754 <showCurrentParameters+0x24c>)
 8003552:	4881      	ldr	r0, [pc, #516]	; (8003758 <showCurrentParameters+0x250>)
 8003554:	f00e fa48 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003558:	f24c 6318 	movw	r3, #50712	; 0xc618
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003566:	220a      	movs	r2, #10
 8003568:	212f      	movs	r1, #47	; 0x2f
 800356a:	487b      	ldr	r0, [pc, #492]	; (8003758 <showCurrentParameters+0x250>)
 800356c:	f7fe fb46 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003570:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2329      	movs	r3, #41	; 0x29
 8003578:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800357c:	2129      	movs	r1, #41	; 0x29
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd fe72 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003584:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	232b      	movs	r3, #43	; 0x2b
 800358c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003590:	212b      	movs	r1, #43	; 0x2b
 8003592:	2000      	movs	r0, #0
 8003594:	f7fd fe68 	bl	8001268 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003598:	7ffb      	ldrb	r3, [r7, #31]
 800359a:	2b09      	cmp	r3, #9
 800359c:	d809      	bhi.n	80035b2 <showCurrentParameters+0xaa>
 800359e:	7fbb      	ldrb	r3, [r7, #30]
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	d806      	bhi.n	80035b2 <showCurrentParameters+0xaa>
 80035a4:	7ffa      	ldrb	r2, [r7, #31]
 80035a6:	7fbb      	ldrb	r3, [r7, #30]
 80035a8:	496c      	ldr	r1, [pc, #432]	; (800375c <showCurrentParameters+0x254>)
 80035aa:	486b      	ldr	r0, [pc, #428]	; (8003758 <showCurrentParameters+0x250>)
 80035ac:	f00e fa1c 	bl	80119e8 <siprintf>
 80035b0:	e019      	b.n	80035e6 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b09      	cmp	r3, #9
 80035b6:	d806      	bhi.n	80035c6 <showCurrentParameters+0xbe>
 80035b8:	7ffa      	ldrb	r2, [r7, #31]
 80035ba:	7fbb      	ldrb	r3, [r7, #30]
 80035bc:	4968      	ldr	r1, [pc, #416]	; (8003760 <showCurrentParameters+0x258>)
 80035be:	4866      	ldr	r0, [pc, #408]	; (8003758 <showCurrentParameters+0x250>)
 80035c0:	f00e fa12 	bl	80119e8 <siprintf>
 80035c4:	e00f      	b.n	80035e6 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80035c6:	7fbb      	ldrb	r3, [r7, #30]
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	d806      	bhi.n	80035da <showCurrentParameters+0xd2>
 80035cc:	7ffa      	ldrb	r2, [r7, #31]
 80035ce:	7fbb      	ldrb	r3, [r7, #30]
 80035d0:	4964      	ldr	r1, [pc, #400]	; (8003764 <showCurrentParameters+0x25c>)
 80035d2:	4861      	ldr	r0, [pc, #388]	; (8003758 <showCurrentParameters+0x250>)
 80035d4:	f00e fa08 	bl	80119e8 <siprintf>
 80035d8:	e005      	b.n	80035e6 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80035da:	7ffa      	ldrb	r2, [r7, #31]
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
 80035de:	4962      	ldr	r1, [pc, #392]	; (8003768 <showCurrentParameters+0x260>)
 80035e0:	485d      	ldr	r0, [pc, #372]	; (8003758 <showCurrentParameters+0x250>)
 80035e2:	f00e fa01 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80035e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	2300      	movs	r3, #0
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	2232      	movs	r2, #50	; 0x32
 80035f4:	2114      	movs	r1, #20
 80035f6:	4858      	ldr	r0, [pc, #352]	; (8003758 <showCurrentParameters+0x250>)
 80035f8:	f7fe fb00 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80035fc:	4b5b      	ldr	r3, [pc, #364]	; (800376c <showCurrentParameters+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc ffb9 	bl	8000578 <__aeabi_f2d>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4959      	ldr	r1, [pc, #356]	; (8003770 <showCurrentParameters+0x268>)
 800360c:	4852      	ldr	r0, [pc, #328]	; (8003758 <showCurrentParameters+0x250>)
 800360e:	f00e f9eb 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003612:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2301      	movs	r3, #1
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	2250      	movs	r2, #80	; 0x50
 8003620:	2114      	movs	r1, #20
 8003622:	484d      	ldr	r0, [pc, #308]	; (8003758 <showCurrentParameters+0x250>)
 8003624:	f7fe faea 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <showCurrentParameters+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ffa3 	bl	8000578 <__aeabi_f2d>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4950      	ldr	r1, [pc, #320]	; (8003778 <showCurrentParameters+0x270>)
 8003638:	4847      	ldr	r0, [pc, #284]	; (8003758 <showCurrentParameters+0x250>)
 800363a:	f00e f9d5 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800363e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2300      	movs	r3, #0
 800364a:	226e      	movs	r2, #110	; 0x6e
 800364c:	2114      	movs	r1, #20
 800364e:	4842      	ldr	r0, [pc, #264]	; (8003758 <showCurrentParameters+0x250>)
 8003650:	f7fe fad4 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <showCurrentParameters+0x274>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4949      	ldr	r1, [pc, #292]	; (8003780 <showCurrentParameters+0x278>)
 800365c:	483e      	ldr	r0, [pc, #248]	; (8003758 <showCurrentParameters+0x250>)
 800365e:	f00e f9c3 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003662:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	228c      	movs	r2, #140	; 0x8c
 8003670:	2114      	movs	r1, #20
 8003672:	4839      	ldr	r0, [pc, #228]	; (8003758 <showCurrentParameters+0x250>)
 8003674:	f7fe fac2 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003678:	4b42      	ldr	r3, [pc, #264]	; (8003784 <showCurrentParameters+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff7b 	bl	8000578 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4940      	ldr	r1, [pc, #256]	; (8003788 <showCurrentParameters+0x280>)
 8003688:	4833      	ldr	r0, [pc, #204]	; (8003758 <showCurrentParameters+0x250>)
 800368a:	f00e f9ad 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800368e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2300      	movs	r3, #0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	22aa      	movs	r2, #170	; 0xaa
 800369c:	2114      	movs	r1, #20
 800369e:	482e      	ldr	r0, [pc, #184]	; (8003758 <showCurrentParameters+0x250>)
 80036a0:	f7fe faac 	bl	8001bfc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80036a4:	4839      	ldr	r0, [pc, #228]	; (800378c <showCurrentParameters+0x284>)
 80036a6:	f7fe f88f 	bl	80017c8 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2305      	movs	r3, #5
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2314      	movs	r3, #20
 80036b6:	225f      	movs	r2, #95	; 0x5f
 80036b8:	21d8      	movs	r1, #216	; 0xd8
 80036ba:	20dc      	movs	r0, #220	; 0xdc
 80036bc:	f7fe f833 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80036c0:	4933      	ldr	r1, [pc, #204]	; (8003790 <showCurrentParameters+0x288>)
 80036c2:	4825      	ldr	r0, [pc, #148]	; (8003758 <showCurrentParameters+0x250>)
 80036c4:	f00e f990 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80036c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	22da      	movs	r2, #218	; 0xda
 80036d6:	21df      	movs	r1, #223	; 0xdf
 80036d8:	481f      	ldr	r0, [pc, #124]	; (8003758 <showCurrentParameters+0x250>)
 80036da:	f7fe fa8f 	bl	8001bfc <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2305      	movs	r3, #5
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2314      	movs	r3, #20
 80036ea:	2264      	movs	r2, #100	; 0x64
 80036ec:	21d8      	movs	r1, #216	; 0xd8
 80036ee:	200a      	movs	r0, #10
 80036f0:	f7fe f819 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80036f4:	4927      	ldr	r1, [pc, #156]	; (8003794 <showCurrentParameters+0x28c>)
 80036f6:	4818      	ldr	r0, [pc, #96]	; (8003758 <showCurrentParameters+0x250>)
 80036f8:	f00e f976 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80036fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	22da      	movs	r2, #218	; 0xda
 800370a:	2114      	movs	r1, #20
 800370c:	4812      	ldr	r0, [pc, #72]	; (8003758 <showCurrentParameters+0x250>)
 800370e:	f7fe fa75 	bl	8001bfc <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003712:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	2305      	movs	r3, #5
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2314      	movs	r3, #20
 800371e:	225a      	movs	r2, #90	; 0x5a
 8003720:	21d8      	movs	r1, #216	; 0xd8
 8003722:	2078      	movs	r0, #120	; 0x78
 8003724:	f7fd ffff 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003728:	491b      	ldr	r1, [pc, #108]	; (8003798 <showCurrentParameters+0x290>)
 800372a:	480b      	ldr	r0, [pc, #44]	; (8003758 <showCurrentParameters+0x250>)
 800372c:	f00e f95c 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003730:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	22da      	movs	r2, #218	; 0xda
 800373e:	2184      	movs	r1, #132	; 0x84
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <showCurrentParameters+0x250>)
 8003742:	f7fe fa5b 	bl	8001bfc <EF_PutString>
}
 8003746:	bf00      	nop
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	080290a0 	.word	0x080290a0
 8003754:	080156dc 	.word	0x080156dc
 8003758:	200002c0 	.word	0x200002c0
 800375c:	080156ec 	.word	0x080156ec
 8003760:	080156fc 	.word	0x080156fc
 8003764:	0801570c 	.word	0x0801570c
 8003768:	0801571c 	.word	0x0801571c
 800376c:	20000294 	.word	0x20000294
 8003770:	0801572c 	.word	0x0801572c
 8003774:	200002a0 	.word	0x200002a0
 8003778:	08015740 	.word	0x08015740
 800377c:	200002a4 	.word	0x200002a4
 8003780:	08015754 	.word	0x08015754
 8003784:	2000029c 	.word	0x2000029c
 8003788:	08015768 	.word	0x08015768
 800378c:	08027128 	.word	0x08027128
 8003790:	08015780 	.word	0x08015780
 8003794:	0801578c 	.word	0x0801578c
 8003798:	08015798 	.word	0x08015798

0800379c <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80037a2:	2015      	movs	r0, #21
 80037a4:	f005 fa04 	bl	8008bb0 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80037a8:	f24c 6018 	movw	r0, #50712	; 0xc618
 80037ac:	f7fe fc10 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037b0:	485c      	ldr	r0, [pc, #368]	; (8003924 <showControlPanel+0x188>)
 80037b2:	f7fe f809 	bl	80017c8 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80037b6:	495c      	ldr	r1, [pc, #368]	; (8003928 <showControlPanel+0x18c>)
 80037b8:	485c      	ldr	r0, [pc, #368]	; (800392c <showControlPanel+0x190>)
 80037ba:	f00e f915 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	2300      	movs	r3, #0
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	231f      	movs	r3, #31
 80037ca:	220a      	movs	r2, #10
 80037cc:	2123      	movs	r1, #35	; 0x23
 80037ce:	4857      	ldr	r0, [pc, #348]	; (800392c <showControlPanel+0x190>)
 80037d0:	f7fe fa14 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80037d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2329      	movs	r3, #41	; 0x29
 80037dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037e0:	2129      	movs	r1, #41	; 0x29
 80037e2:	2000      	movs	r0, #0
 80037e4:	f7fd fd40 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80037e8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	232b      	movs	r3, #43	; 0x2b
 80037f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037f4:	212b      	movs	r1, #43	; 0x2b
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fd fd36 	bl	8001268 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80037fc:	494c      	ldr	r1, [pc, #304]	; (8003930 <showControlPanel+0x194>)
 80037fe:	484b      	ldr	r0, [pc, #300]	; (800392c <showControlPanel+0x190>)
 8003800:	f00e f8f2 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003804:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	223c      	movs	r2, #60	; 0x3c
 8003812:	2114      	movs	r1, #20
 8003814:	4845      	ldr	r0, [pc, #276]	; (800392c <showControlPanel+0x190>)
 8003816:	f7fe f9f1 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 800381a:	4946      	ldr	r1, [pc, #280]	; (8003934 <showControlPanel+0x198>)
 800381c:	4843      	ldr	r0, [pc, #268]	; (800392c <showControlPanel+0x190>)
 800381e:	f00e f8e3 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003822:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2301      	movs	r3, #1
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	225a      	movs	r2, #90	; 0x5a
 8003830:	2114      	movs	r1, #20
 8003832:	483e      	ldr	r0, [pc, #248]	; (800392c <showControlPanel+0x190>)
 8003834:	f7fe f9e2 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003838:	493f      	ldr	r1, [pc, #252]	; (8003938 <showControlPanel+0x19c>)
 800383a:	483c      	ldr	r0, [pc, #240]	; (800392c <showControlPanel+0x190>)
 800383c:	f00e f8d4 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003840:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2278      	movs	r2, #120	; 0x78
 800384e:	2114      	movs	r1, #20
 8003850:	4836      	ldr	r0, [pc, #216]	; (800392c <showControlPanel+0x190>)
 8003852:	f7fe f9d3 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003856:	4939      	ldr	r1, [pc, #228]	; (800393c <showControlPanel+0x1a0>)
 8003858:	4834      	ldr	r0, [pc, #208]	; (800392c <showControlPanel+0x190>)
 800385a:	f00e f8c5 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800385e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2300      	movs	r3, #0
 800386a:	2296      	movs	r2, #150	; 0x96
 800386c:	2114      	movs	r1, #20
 800386e:	482f      	ldr	r0, [pc, #188]	; (800392c <showControlPanel+0x190>)
 8003870:	f7fe f9c4 	bl	8001bfc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003874:	4832      	ldr	r0, [pc, #200]	; (8003940 <showControlPanel+0x1a4>)
 8003876:	f7fd ffa7 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800387a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2305      	movs	r3, #5
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2314      	movs	r3, #20
 8003886:	225f      	movs	r2, #95	; 0x5f
 8003888:	21d8      	movs	r1, #216	; 0xd8
 800388a:	20dc      	movs	r0, #220	; 0xdc
 800388c:	f7fd ff4b 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003890:	492c      	ldr	r1, [pc, #176]	; (8003944 <showControlPanel+0x1a8>)
 8003892:	4826      	ldr	r0, [pc, #152]	; (800392c <showControlPanel+0x190>)
 8003894:	f00e f8a8 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003898:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	22da      	movs	r2, #218	; 0xda
 80038a6:	21df      	movs	r1, #223	; 0xdf
 80038a8:	4820      	ldr	r0, [pc, #128]	; (800392c <showControlPanel+0x190>)
 80038aa:	f7fe f9a7 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80038ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	2305      	movs	r3, #5
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2314      	movs	r3, #20
 80038ba:	2264      	movs	r2, #100	; 0x64
 80038bc:	21d8      	movs	r1, #216	; 0xd8
 80038be:	200a      	movs	r0, #10
 80038c0:	f7fd ff31 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80038c4:	4920      	ldr	r1, [pc, #128]	; (8003948 <showControlPanel+0x1ac>)
 80038c6:	4819      	ldr	r0, [pc, #100]	; (800392c <showControlPanel+0x190>)
 80038c8:	f00e f88e 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2300      	movs	r3, #0
 80038d8:	22da      	movs	r2, #218	; 0xda
 80038da:	2114      	movs	r1, #20
 80038dc:	4813      	ldr	r0, [pc, #76]	; (800392c <showControlPanel+0x190>)
 80038de:	f7fe f98d 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80038e2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2305      	movs	r3, #5
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2314      	movs	r3, #20
 80038ee:	225a      	movs	r2, #90	; 0x5a
 80038f0:	21d8      	movs	r1, #216	; 0xd8
 80038f2:	2078      	movs	r0, #120	; 0x78
 80038f4:	f7fd ff17 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80038f8:	4914      	ldr	r1, [pc, #80]	; (800394c <showControlPanel+0x1b0>)
 80038fa:	480c      	ldr	r0, [pc, #48]	; (800392c <showControlPanel+0x190>)
 80038fc:	f00e f874 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003900:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	22da      	movs	r2, #218	; 0xda
 800390e:	217e      	movs	r1, #126	; 0x7e
 8003910:	4806      	ldr	r0, [pc, #24]	; (800392c <showControlPanel+0x190>)
 8003912:	f7fe f973 	bl	8001bfc <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003916:	4803      	ldr	r0, [pc, #12]	; (8003924 <showControlPanel+0x188>)
 8003918:	f7fd ff56 	bl	80017c8 <EF_SetFont>


}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	080290a0 	.word	0x080290a0
 8003928:	080157a0 	.word	0x080157a0
 800392c:	200002c0 	.word	0x200002c0
 8003930:	080157b4 	.word	0x080157b4
 8003934:	080157c8 	.word	0x080157c8
 8003938:	080157dc 	.word	0x080157dc
 800393c:	080157f0 	.word	0x080157f0
 8003940:	08027128 	.word	0x08027128
 8003944:	08015804 	.word	0x08015804
 8003948:	08015810 	.word	0x08015810
 800394c:	08015818 	.word	0x08015818

08003950 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003956:	2016      	movs	r0, #22
 8003958:	f005 f92a 	bl	8008bb0 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800395c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003960:	f7fe fb36 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003964:	485b      	ldr	r0, [pc, #364]	; (8003ad4 <showLightsControlPanel+0x184>)
 8003966:	f7fd ff2f 	bl	80017c8 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800396a:	495b      	ldr	r1, [pc, #364]	; (8003ad8 <showLightsControlPanel+0x188>)
 800396c:	485b      	ldr	r0, [pc, #364]	; (8003adc <showLightsControlPanel+0x18c>)
 800396e:	f00e f83b 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003972:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	2300      	movs	r3, #0
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003980:	220a      	movs	r2, #10
 8003982:	2146      	movs	r1, #70	; 0x46
 8003984:	4855      	ldr	r0, [pc, #340]	; (8003adc <showLightsControlPanel+0x18c>)
 8003986:	f7fe f939 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800398a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2329      	movs	r3, #41	; 0x29
 8003992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003996:	2129      	movs	r1, #41	; 0x29
 8003998:	2000      	movs	r0, #0
 800399a:	f7fd fc65 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800399e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	232b      	movs	r3, #43	; 0x2b
 80039a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039aa:	212b      	movs	r1, #43	; 0x2b
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fd fc5b 	bl	8001268 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80039b2:	494b      	ldr	r1, [pc, #300]	; (8003ae0 <showLightsControlPanel+0x190>)
 80039b4:	4849      	ldr	r0, [pc, #292]	; (8003adc <showLightsControlPanel+0x18c>)
 80039b6:	f00e f817 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	223c      	movs	r2, #60	; 0x3c
 80039c8:	2114      	movs	r1, #20
 80039ca:	4844      	ldr	r0, [pc, #272]	; (8003adc <showLightsControlPanel+0x18c>)
 80039cc:	f7fe f916 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80039d0:	4944      	ldr	r1, [pc, #272]	; (8003ae4 <showLightsControlPanel+0x194>)
 80039d2:	4842      	ldr	r0, [pc, #264]	; (8003adc <showLightsControlPanel+0x18c>)
 80039d4:	f00e f808 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80039d8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	2301      	movs	r3, #1
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	225a      	movs	r2, #90	; 0x5a
 80039e6:	2114      	movs	r1, #20
 80039e8:	483c      	ldr	r0, [pc, #240]	; (8003adc <showLightsControlPanel+0x18c>)
 80039ea:	f7fe f907 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80039ee:	493e      	ldr	r1, [pc, #248]	; (8003ae8 <showLightsControlPanel+0x198>)
 80039f0:	483a      	ldr	r0, [pc, #232]	; (8003adc <showLightsControlPanel+0x18c>)
 80039f2:	f00d fff9 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2300      	movs	r3, #0
 8003a02:	2278      	movs	r2, #120	; 0x78
 8003a04:	2114      	movs	r1, #20
 8003a06:	4835      	ldr	r0, [pc, #212]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a08:	f7fe f8f8 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003a0c:	4937      	ldr	r1, [pc, #220]	; (8003aec <showLightsControlPanel+0x19c>)
 8003a0e:	4833      	ldr	r0, [pc, #204]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a10:	f00d ffea 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2296      	movs	r2, #150	; 0x96
 8003a22:	2114      	movs	r1, #20
 8003a24:	482d      	ldr	r0, [pc, #180]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a26:	f7fe f8e9 	bl	8001bfc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003a2a:	4831      	ldr	r0, [pc, #196]	; (8003af0 <showLightsControlPanel+0x1a0>)
 8003a2c:	f7fd fecc 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	2305      	movs	r3, #5
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2314      	movs	r3, #20
 8003a3c:	225f      	movs	r2, #95	; 0x5f
 8003a3e:	21d8      	movs	r1, #216	; 0xd8
 8003a40:	20dc      	movs	r0, #220	; 0xdc
 8003a42:	f7fd fe70 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003a46:	492b      	ldr	r1, [pc, #172]	; (8003af4 <showLightsControlPanel+0x1a4>)
 8003a48:	4824      	ldr	r0, [pc, #144]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a4a:	f00d ffcd 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	2300      	movs	r3, #0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	22da      	movs	r2, #218	; 0xda
 8003a5c:	21e6      	movs	r1, #230	; 0xe6
 8003a5e:	481f      	ldr	r0, [pc, #124]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a60:	f7fe f8cc 	bl	8001bfc <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003a64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2314      	movs	r3, #20
 8003a70:	225a      	movs	r2, #90	; 0x5a
 8003a72:	21d8      	movs	r1, #216	; 0xd8
 8003a74:	2078      	movs	r0, #120	; 0x78
 8003a76:	f7fd fe56 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003a7a:	491f      	ldr	r1, [pc, #124]	; (8003af8 <showLightsControlPanel+0x1a8>)
 8003a7c:	4817      	ldr	r0, [pc, #92]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a7e:	f00d ffb3 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	22da      	movs	r2, #218	; 0xda
 8003a90:	217e      	movs	r1, #126	; 0x7e
 8003a92:	4812      	ldr	r0, [pc, #72]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a94:	f7fe f8b2 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2314      	movs	r3, #20
 8003aa4:	2264      	movs	r2, #100	; 0x64
 8003aa6:	21d8      	movs	r1, #216	; 0xd8
 8003aa8:	200a      	movs	r0, #10
 8003aaa:	f7fd fe3c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003aae:	4913      	ldr	r1, [pc, #76]	; (8003afc <showLightsControlPanel+0x1ac>)
 8003ab0:	480a      	ldr	r0, [pc, #40]	; (8003adc <showLightsControlPanel+0x18c>)
 8003ab2:	f00d ff99 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ab6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	22da      	movs	r2, #218	; 0xda
 8003ac4:	210d      	movs	r1, #13
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <showLightsControlPanel+0x18c>)
 8003ac8:	f7fe f898 	bl	8001bfc <EF_PutString>


}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	080290a0 	.word	0x080290a0
 8003ad8:	08015824 	.word	0x08015824
 8003adc:	200002c0 	.word	0x200002c0
 8003ae0:	08015834 	.word	0x08015834
 8003ae4:	08015844 	.word	0x08015844
 8003ae8:	08015854 	.word	0x08015854
 8003aec:	08015864 	.word	0x08015864
 8003af0:	08027128 	.word	0x08027128
 8003af4:	08015874 	.word	0x08015874
 8003af8:	0801587c 	.word	0x0801587c
 8003afc:	08015888 	.word	0x08015888

08003b00 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003b06:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003b0a:	f7fe fa61 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003b0e:	48a2      	ldr	r0, [pc, #648]	; (8003d98 <showClockSetPanel+0x298>)
 8003b10:	f7fd fe5a 	bl	80017c8 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003b14:	f7fe fec8 	bl	80028a8 <DS3231_GetHour>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003b1c:	f7fe fed0 	bl	80028c0 <DS3231_GetMinute>
 8003b20:	4603      	mov	r3, r0
 8003b22:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003b24:	f7fe feb4 	bl	8002890 <DS3231_GetDayOfWeek>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003b2c:	499b      	ldr	r1, [pc, #620]	; (8003d9c <showClockSetPanel+0x29c>)
 8003b2e:	489c      	ldr	r0, [pc, #624]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b30:	f00d ff5a 	bl	80119e8 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b34:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b42:	220a      	movs	r2, #10
 8003b44:	212f      	movs	r1, #47	; 0x2f
 8003b46:	4896      	ldr	r0, [pc, #600]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b48:	f7fe f858 	bl	8001bfc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2329      	movs	r3, #41	; 0x29
 8003b54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b58:	2129      	movs	r1, #41	; 0x29
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fd fb84 	bl	8001268 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003b60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	232b      	movs	r3, #43	; 0x2b
 8003b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b6c:	212b      	movs	r1, #43	; 0x2b
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fd fb7a 	bl	8001268 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	461a      	mov	r2, r3
 8003b78:	498a      	ldr	r1, [pc, #552]	; (8003da4 <showClockSetPanel+0x2a4>)
 8003b7a:	4889      	ldr	r0, [pc, #548]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b7c:	f00d ff34 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2246      	movs	r2, #70	; 0x46
 8003b8e:	2114      	movs	r1, #20
 8003b90:	4883      	ldr	r0, [pc, #524]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b92:	f7fe f833 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003b96:	79bb      	ldrb	r3, [r7, #6]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4983      	ldr	r1, [pc, #524]	; (8003da8 <showClockSetPanel+0x2a8>)
 8003b9c:	4880      	ldr	r0, [pc, #512]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b9e:	f00d ff23 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ba2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	2301      	movs	r3, #1
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	226e      	movs	r2, #110	; 0x6e
 8003bb0:	2114      	movs	r1, #20
 8003bb2:	487b      	ldr	r0, [pc, #492]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bb4:	f7fe f822 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003bb8:	797b      	ldrb	r3, [r7, #5]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	497b      	ldr	r1, [pc, #492]	; (8003dac <showClockSetPanel+0x2ac>)
 8003bbe:	4878      	ldr	r0, [pc, #480]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bc0:	f00d ff12 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003bc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2296      	movs	r2, #150	; 0x96
 8003bd2:	2114      	movs	r1, #20
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bd6:	f7fe f811 	bl	8001bfc <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003bda:	4875      	ldr	r0, [pc, #468]	; (8003db0 <showClockSetPanel+0x2b0>)
 8003bdc:	f7fd fdf4 	bl	80017c8 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2305      	movs	r3, #5
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2315      	movs	r3, #21
 8003bec:	221e      	movs	r2, #30
 8003bee:	214b      	movs	r1, #75	; 0x4b
 8003bf0:	20f0      	movs	r0, #240	; 0xf0
 8003bf2:	f7fd fd98 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003bf6:	496f      	ldr	r1, [pc, #444]	; (8003db4 <showClockSetPanel+0x2b4>)
 8003bf8:	4869      	ldr	r0, [pc, #420]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bfa:	f00d fef5 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bfe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	224d      	movs	r2, #77	; 0x4d
 8003c0c:	21f3      	movs	r1, #243	; 0xf3
 8003c0e:	4864      	ldr	r0, [pc, #400]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c10:	f7fd fff4 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c14:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2315      	movs	r3, #21
 8003c20:	221e      	movs	r2, #30
 8003c22:	214b      	movs	r1, #75	; 0x4b
 8003c24:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003c28:	f7fd fd7d 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003c2c:	4962      	ldr	r1, [pc, #392]	; (8003db8 <showClockSetPanel+0x2b8>)
 8003c2e:	485c      	ldr	r0, [pc, #368]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c30:	f00d feda 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c34:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	224d      	movs	r2, #77	; 0x4d
 8003c42:	f240 111d 	movw	r1, #285	; 0x11d
 8003c46:	4856      	ldr	r0, [pc, #344]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c48:	f7fd ffd8 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	2305      	movs	r3, #5
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2315      	movs	r3, #21
 8003c58:	221e      	movs	r2, #30
 8003c5a:	2173      	movs	r1, #115	; 0x73
 8003c5c:	20f0      	movs	r0, #240	; 0xf0
 8003c5e:	f7fd fd62 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003c62:	4954      	ldr	r1, [pc, #336]	; (8003db4 <showClockSetPanel+0x2b4>)
 8003c64:	484e      	ldr	r0, [pc, #312]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c66:	f00d febf 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c6a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	2275      	movs	r2, #117	; 0x75
 8003c78:	21f5      	movs	r1, #245	; 0xf5
 8003c7a:	4849      	ldr	r0, [pc, #292]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c7c:	f7fd ffbe 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c80:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	2305      	movs	r3, #5
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2315      	movs	r3, #21
 8003c8c:	221e      	movs	r2, #30
 8003c8e:	2173      	movs	r1, #115	; 0x73
 8003c90:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003c94:	f7fd fd47 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003c98:	4948      	ldr	r1, [pc, #288]	; (8003dbc <showClockSetPanel+0x2bc>)
 8003c9a:	4841      	ldr	r0, [pc, #260]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c9c:	f00d fea4 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ca0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	2275      	movs	r2, #117	; 0x75
 8003cae:	f240 111b 	movw	r1, #283	; 0x11b
 8003cb2:	483b      	ldr	r0, [pc, #236]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003cb4:	f7fd ffa2 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003cb8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2315      	movs	r3, #21
 8003cc4:	221e      	movs	r2, #30
 8003cc6:	219b      	movs	r1, #155	; 0x9b
 8003cc8:	20f0      	movs	r0, #240	; 0xf0
 8003cca:	f7fd fd2c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003cce:	493c      	ldr	r1, [pc, #240]	; (8003dc0 <showClockSetPanel+0x2c0>)
 8003cd0:	4833      	ldr	r0, [pc, #204]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003cd2:	f00d fe89 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003cd6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	229d      	movs	r2, #157	; 0x9d
 8003ce4:	21f3      	movs	r1, #243	; 0xf3
 8003ce6:	482e      	ldr	r0, [pc, #184]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003ce8:	f7fd ff88 	bl	8001bfc <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003cec:	4830      	ldr	r0, [pc, #192]	; (8003db0 <showClockSetPanel+0x2b0>)
 8003cee:	f7fd fd6b 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cf2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2314      	movs	r3, #20
 8003cfe:	225f      	movs	r2, #95	; 0x5f
 8003d00:	21d8      	movs	r1, #216	; 0xd8
 8003d02:	20dc      	movs	r0, #220	; 0xdc
 8003d04:	f7fd fd0f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003d08:	492e      	ldr	r1, [pc, #184]	; (8003dc4 <showClockSetPanel+0x2c4>)
 8003d0a:	4825      	ldr	r0, [pc, #148]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d0c:	f00d fe6c 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	22da      	movs	r2, #218	; 0xda
 8003d1e:	21e6      	movs	r1, #230	; 0xe6
 8003d20:	481f      	ldr	r0, [pc, #124]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d22:	f7fd ff6b 	bl	8001bfc <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003d26:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2316      	movs	r3, #22
 8003d32:	22aa      	movs	r2, #170	; 0xaa
 8003d34:	21be      	movs	r1, #190	; 0xbe
 8003d36:	2050      	movs	r0, #80	; 0x50
 8003d38:	f7fd fcf5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003d3c:	4922      	ldr	r1, [pc, #136]	; (8003dc8 <showClockSetPanel+0x2c8>)
 8003d3e:	4818      	ldr	r0, [pc, #96]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d40:	f00d fe52 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	22c1      	movs	r2, #193	; 0xc1
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	4812      	ldr	r0, [pc, #72]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d56:	f7fd ff51 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	2305      	movs	r3, #5
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2314      	movs	r3, #20
 8003d66:	2264      	movs	r2, #100	; 0x64
 8003d68:	21d8      	movs	r1, #216	; 0xd8
 8003d6a:	200a      	movs	r0, #10
 8003d6c:	f7fd fcdb 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <showClockSetPanel+0x2cc>)
 8003d72:	480b      	ldr	r0, [pc, #44]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d74:	f00d fe38 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	22da      	movs	r2, #218	; 0xda
 8003d86:	210d      	movs	r1, #13
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d8a:	f7fd ff37 	bl	8001bfc <EF_PutString>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	080290a0 	.word	0x080290a0
 8003d9c:	08015894 	.word	0x08015894
 8003da0:	200002c0 	.word	0x200002c0
 8003da4:	080158a4 	.word	0x080158a4
 8003da8:	080158b0 	.word	0x080158b0
 8003dac:	080158c0 	.word	0x080158c0
 8003db0:	08027128 	.word	0x08027128
 8003db4:	080158d0 	.word	0x080158d0
 8003db8:	080158d4 	.word	0x080158d4
 8003dbc:	080158d8 	.word	0x080158d8
 8003dc0:	080158dc 	.word	0x080158dc
 8003dc4:	080158e0 	.word	0x080158e0
 8003dc8:	080158e8 	.word	0x080158e8
 8003dcc:	080158f8 	.word	0x080158f8

08003dd0 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003dd6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003dda:	f7fe f8f9 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003dde:	487a      	ldr	r0, [pc, #488]	; (8003fc8 <showPreparedActivitiesPanel+0x1f8>)
 8003de0:	f7fd fcf2 	bl	80017c8 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003de4:	4979      	ldr	r1, [pc, #484]	; (8003fcc <showPreparedActivitiesPanel+0x1fc>)
 8003de6:	487a      	ldr	r0, [pc, #488]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003de8:	f00d fdfe 	bl	80119e8 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003dec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	231f      	movs	r3, #31
 8003df8:	220a      	movs	r2, #10
 8003dfa:	212f      	movs	r1, #47	; 0x2f
 8003dfc:	4874      	ldr	r0, [pc, #464]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003dfe:	f7fd fefd 	bl	8001bfc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003e02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2329      	movs	r3, #41	; 0x29
 8003e0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e0e:	2129      	movs	r1, #41	; 0x29
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fd fa29 	bl	8001268 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003e16:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	232b      	movs	r3, #43	; 0x2b
 8003e1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e22:	212b      	movs	r1, #43	; 0x2b
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fd fa1f 	bl	8001268 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003e2a:	486a      	ldr	r0, [pc, #424]	; (8003fd4 <showPreparedActivitiesPanel+0x204>)
 8003e2c:	f7fd fccc 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003e30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2305      	movs	r3, #5
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2314      	movs	r3, #20
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	21d8      	movs	r1, #216	; 0xd8
 8003e40:	200a      	movs	r0, #10
 8003e42:	f7fd fc70 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003e46:	4964      	ldr	r1, [pc, #400]	; (8003fd8 <showPreparedActivitiesPanel+0x208>)
 8003e48:	4861      	ldr	r0, [pc, #388]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e4a:	f00d fdcd 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003e4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	22da      	movs	r2, #218	; 0xda
 8003e5c:	210d      	movs	r1, #13
 8003e5e:	485c      	ldr	r0, [pc, #368]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e60:	f7fd fecc 	bl	8001bfc <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003e64:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <showPreparedActivitiesPanel+0x20c>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d029      	beq.n	8003ec0 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	230a      	movs	r3, #10
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2328      	movs	r3, #40	; 0x28
 8003e78:	2278      	movs	r2, #120	; 0x78
 8003e7a:	213c      	movs	r1, #60	; 0x3c
 8003e7c:	2064      	movs	r0, #100	; 0x64
 8003e7e:	f7fd fc52 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003e82:	4957      	ldr	r1, [pc, #348]	; (8003fe0 <showPreparedActivitiesPanel+0x210>)
 8003e84:	4852      	ldr	r0, [pc, #328]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e86:	f00d fdaf 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e8a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	223e      	movs	r2, #62	; 0x3e
 8003e98:	2177      	movs	r1, #119	; 0x77
 8003e9a:	484d      	ldr	r0, [pc, #308]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e9c:	f7fd feae 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003ea0:	4950      	ldr	r1, [pc, #320]	; (8003fe4 <showPreparedActivitiesPanel+0x214>)
 8003ea2:	484b      	ldr	r0, [pc, #300]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003ea4:	f00d fda0 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003ea8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2250      	movs	r2, #80	; 0x50
 8003eb6:	2193      	movs	r1, #147	; 0x93
 8003eb8:	4845      	ldr	r0, [pc, #276]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003eba:	f7fd fe9f 	bl	8001bfc <EF_PutString>
 8003ebe:	e028      	b.n	8003f12 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003ec0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2328      	movs	r3, #40	; 0x28
 8003ecc:	2278      	movs	r2, #120	; 0x78
 8003ece:	213c      	movs	r1, #60	; 0x3c
 8003ed0:	2064      	movs	r0, #100	; 0x64
 8003ed2:	f7fd fc28 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003ed6:	4942      	ldr	r1, [pc, #264]	; (8003fe0 <showPreparedActivitiesPanel+0x210>)
 8003ed8:	483d      	ldr	r0, [pc, #244]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003eda:	f00d fd85 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ede:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	223e      	movs	r2, #62	; 0x3e
 8003eec:	2177      	movs	r1, #119	; 0x77
 8003eee:	4838      	ldr	r0, [pc, #224]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003ef0:	f7fd fe84 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003ef4:	493c      	ldr	r1, [pc, #240]	; (8003fe8 <showPreparedActivitiesPanel+0x218>)
 8003ef6:	4836      	ldr	r0, [pc, #216]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003ef8:	f00d fd76 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003efc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	2250      	movs	r2, #80	; 0x50
 8003f0a:	2193      	movs	r1, #147	; 0x93
 8003f0c:	4830      	ldr	r0, [pc, #192]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f0e:	f7fd fe75 	bl	8001bfc <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <showPreparedActivitiesPanel+0x20c>)
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d029      	beq.n	8003f6e <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	230a      	movs	r3, #10
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2328      	movs	r3, #40	; 0x28
 8003f26:	2278      	movs	r2, #120	; 0x78
 8003f28:	2178      	movs	r1, #120	; 0x78
 8003f2a:	2064      	movs	r0, #100	; 0x64
 8003f2c:	f7fd fbfb 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003f30:	492e      	ldr	r1, [pc, #184]	; (8003fec <showPreparedActivitiesPanel+0x21c>)
 8003f32:	4827      	ldr	r0, [pc, #156]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f34:	f00d fd58 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	227a      	movs	r2, #122	; 0x7a
 8003f46:	2169      	movs	r1, #105	; 0x69
 8003f48:	4821      	ldr	r0, [pc, #132]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f4a:	f7fd fe57 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003f4e:	4925      	ldr	r1, [pc, #148]	; (8003fe4 <showPreparedActivitiesPanel+0x214>)
 8003f50:	481f      	ldr	r0, [pc, #124]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f52:	f00d fd49 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	228c      	movs	r2, #140	; 0x8c
 8003f64:	2193      	movs	r1, #147	; 0x93
 8003f66:	481a      	ldr	r0, [pc, #104]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f68:	f7fd fe48 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003f6c:	e028      	b.n	8003fc0 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	230a      	movs	r3, #10
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2328      	movs	r3, #40	; 0x28
 8003f7a:	2278      	movs	r2, #120	; 0x78
 8003f7c:	2178      	movs	r1, #120	; 0x78
 8003f7e:	2064      	movs	r0, #100	; 0x64
 8003f80:	f7fd fbd1 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003f84:	4919      	ldr	r1, [pc, #100]	; (8003fec <showPreparedActivitiesPanel+0x21c>)
 8003f86:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f88:	f00d fd2e 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2300      	movs	r3, #0
 8003f98:	227a      	movs	r2, #122	; 0x7a
 8003f9a:	2169      	movs	r1, #105	; 0x69
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f9e:	f7fd fe2d 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003fa2:	4911      	ldr	r1, [pc, #68]	; (8003fe8 <showPreparedActivitiesPanel+0x218>)
 8003fa4:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003fa6:	f00d fd1f 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003faa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	228c      	movs	r2, #140	; 0x8c
 8003fb8:	2193      	movs	r1, #147	; 0x93
 8003fba:	4805      	ldr	r0, [pc, #20]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003fbc:	f7fd fe1e 	bl	8001bfc <EF_PutString>
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	080290a0 	.word	0x080290a0
 8003fcc:	08015900 	.word	0x08015900
 8003fd0:	200002c0 	.word	0x200002c0
 8003fd4:	08027128 	.word	0x08027128
 8003fd8:	080158f8 	.word	0x080158f8
 8003fdc:	200002b0 	.word	0x200002b0
 8003fe0:	08015910 	.word	0x08015910
 8003fe4:	0801591c 	.word	0x0801591c
 8003fe8:	08015920 	.word	0x08015920
 8003fec:	08015924 	.word	0x08015924

08003ff0 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ff6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003ffa:	f7fd ffe9 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003ffe:	48c7      	ldr	r0, [pc, #796]	; (800431c <showWSLedPanel+0x32c>)
 8004000:	f7fd fbe2 	bl	80017c8 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8004004:	49c6      	ldr	r1, [pc, #792]	; (8004320 <showWSLedPanel+0x330>)
 8004006:	48c7      	ldr	r0, [pc, #796]	; (8004324 <showWSLedPanel+0x334>)
 8004008:	f00d fcee 	bl	80119e8 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800400c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	231f      	movs	r3, #31
 8004018:	220a      	movs	r2, #10
 800401a:	2146      	movs	r1, #70	; 0x46
 800401c:	48c1      	ldr	r0, [pc, #772]	; (8004324 <showWSLedPanel+0x334>)
 800401e:	f7fd fded 	bl	8001bfc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004022:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	2329      	movs	r3, #41	; 0x29
 800402a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800402e:	2129      	movs	r1, #41	; 0x29
 8004030:	2000      	movs	r0, #0
 8004032:	f7fd f919 	bl	8001268 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004036:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	232b      	movs	r3, #43	; 0x2b
 800403e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004042:	212b      	movs	r1, #43	; 0x2b
 8004044:	2000      	movs	r0, #0
 8004046:	f7fd f90f 	bl	8001268 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800404a:	4bb7      	ldr	r3, [pc, #732]	; (8004328 <showWSLedPanel+0x338>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	49b6      	ldr	r1, [pc, #728]	; (800432c <showWSLedPanel+0x33c>)
 8004052:	48b4      	ldr	r0, [pc, #720]	; (8004324 <showWSLedPanel+0x334>)
 8004054:	f00d fcc8 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004058:	f24c 6318 	movw	r3, #50712	; 0xc618
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	223c      	movs	r2, #60	; 0x3c
 8004066:	2114      	movs	r1, #20
 8004068:	48ae      	ldr	r0, [pc, #696]	; (8004324 <showWSLedPanel+0x334>)
 800406a:	f7fd fdc7 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 800406e:	49b0      	ldr	r1, [pc, #704]	; (8004330 <showWSLedPanel+0x340>)
 8004070:	48ac      	ldr	r0, [pc, #688]	; (8004324 <showWSLedPanel+0x334>)
 8004072:	f00d fcb9 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004076:	f24c 6318 	movw	r3, #50712	; 0xc618
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	225a      	movs	r2, #90	; 0x5a
 8004084:	2114      	movs	r1, #20
 8004086:	48a7      	ldr	r0, [pc, #668]	; (8004324 <showWSLedPanel+0x334>)
 8004088:	f7fd fdb8 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 800408c:	49a9      	ldr	r1, [pc, #676]	; (8004334 <showWSLedPanel+0x344>)
 800408e:	48a5      	ldr	r0, [pc, #660]	; (8004324 <showWSLedPanel+0x334>)
 8004090:	f00d fcaa 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004094:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2300      	movs	r3, #0
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	2278      	movs	r2, #120	; 0x78
 80040a2:	2114      	movs	r1, #20
 80040a4:	489f      	ldr	r0, [pc, #636]	; (8004324 <showWSLedPanel+0x334>)
 80040a6:	f7fd fda9 	bl	8001bfc <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 80040aa:	48a3      	ldr	r0, [pc, #652]	; (8004338 <showWSLedPanel+0x348>)
 80040ac:	f7fd fb8c 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80040b0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	2305      	movs	r3, #5
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2315      	movs	r3, #21
 80040bc:	221e      	movs	r2, #30
 80040be:	2141      	movs	r1, #65	; 0x41
 80040c0:	20d9      	movs	r0, #217	; 0xd9
 80040c2:	f7fd fb30 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80040c6:	499d      	ldr	r1, [pc, #628]	; (800433c <showWSLedPanel+0x34c>)
 80040c8:	4896      	ldr	r0, [pc, #600]	; (8004324 <showWSLedPanel+0x334>)
 80040ca:	f00d fc8d 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80040ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2300      	movs	r3, #0
 80040da:	2243      	movs	r2, #67	; 0x43
 80040dc:	21df      	movs	r1, #223	; 0xdf
 80040de:	4891      	ldr	r0, [pc, #580]	; (8004324 <showWSLedPanel+0x334>)
 80040e0:	f7fd fd8c 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80040e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	2305      	movs	r3, #5
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2315      	movs	r3, #21
 80040f0:	221e      	movs	r2, #30
 80040f2:	2141      	movs	r1, #65	; 0x41
 80040f4:	20fc      	movs	r0, #252	; 0xfc
 80040f6:	f7fd fb16 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80040fa:	4991      	ldr	r1, [pc, #580]	; (8004340 <showWSLedPanel+0x350>)
 80040fc:	4889      	ldr	r0, [pc, #548]	; (8004324 <showWSLedPanel+0x334>)
 80040fe:	f00d fc73 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8004102:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	2300      	movs	r3, #0
 800410e:	2243      	movs	r2, #67	; 0x43
 8004110:	f240 1101 	movw	r1, #257	; 0x101
 8004114:	4883      	ldr	r0, [pc, #524]	; (8004324 <showWSLedPanel+0x334>)
 8004116:	f7fd fd71 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800411a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	2305      	movs	r3, #5
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	2315      	movs	r3, #21
 8004126:	221e      	movs	r2, #30
 8004128:	2141      	movs	r1, #65	; 0x41
 800412a:	f240 101f 	movw	r0, #287	; 0x11f
 800412e:	f7fd fafa 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004132:	4984      	ldr	r1, [pc, #528]	; (8004344 <showWSLedPanel+0x354>)
 8004134:	487b      	ldr	r0, [pc, #492]	; (8004324 <showWSLedPanel+0x334>)
 8004136:	f00d fc57 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800413a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	2243      	movs	r2, #67	; 0x43
 8004148:	f44f 7192 	mov.w	r1, #292	; 0x124
 800414c:	4875      	ldr	r0, [pc, #468]	; (8004324 <showWSLedPanel+0x334>)
 800414e:	f7fd fd55 	bl	8001bfc <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	2305      	movs	r3, #5
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2315      	movs	r3, #21
 800415e:	2228      	movs	r2, #40	; 0x28
 8004160:	215f      	movs	r1, #95	; 0x5f
 8004162:	2096      	movs	r0, #150	; 0x96
 8004164:	f7fd fadf 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004168:	4977      	ldr	r1, [pc, #476]	; (8004348 <showWSLedPanel+0x358>)
 800416a:	486e      	ldr	r0, [pc, #440]	; (8004324 <showWSLedPanel+0x334>)
 800416c:	f00d fc3c 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	2261      	movs	r2, #97	; 0x61
 800417e:	219b      	movs	r1, #155	; 0x9b
 8004180:	4868      	ldr	r0, [pc, #416]	; (8004324 <showWSLedPanel+0x334>)
 8004182:	f7fd fd3b 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	2305      	movs	r3, #5
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2315      	movs	r3, #21
 8004192:	2228      	movs	r2, #40	; 0x28
 8004194:	215f      	movs	r1, #95	; 0x5f
 8004196:	20ca      	movs	r0, #202	; 0xca
 8004198:	f7fd fac5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800419c:	496b      	ldr	r1, [pc, #428]	; (800434c <showWSLedPanel+0x35c>)
 800419e:	4861      	ldr	r0, [pc, #388]	; (8004324 <showWSLedPanel+0x334>)
 80041a0:	f00d fc22 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80041a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	2261      	movs	r2, #97	; 0x61
 80041b2:	21d2      	movs	r1, #210	; 0xd2
 80041b4:	485b      	ldr	r0, [pc, #364]	; (8004324 <showWSLedPanel+0x334>)
 80041b6:	f7fd fd21 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80041ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2305      	movs	r3, #5
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2315      	movs	r3, #21
 80041c6:	2228      	movs	r2, #40	; 0x28
 80041c8:	215f      	movs	r1, #95	; 0x5f
 80041ca:	20fe      	movs	r0, #254	; 0xfe
 80041cc:	f7fd faab 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80041d0:	495f      	ldr	r1, [pc, #380]	; (8004350 <showWSLedPanel+0x360>)
 80041d2:	4854      	ldr	r0, [pc, #336]	; (8004324 <showWSLedPanel+0x334>)
 80041d4:	f00d fc08 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80041d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2300      	movs	r3, #0
 80041e4:	2261      	movs	r2, #97	; 0x61
 80041e6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80041ea:	484e      	ldr	r0, [pc, #312]	; (8004324 <showWSLedPanel+0x334>)
 80041ec:	f7fd fd06 	bl	8001bfc <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80041f0:	231f      	movs	r3, #31
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	2305      	movs	r3, #5
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2315      	movs	r3, #21
 80041fa:	2228      	movs	r2, #40	; 0x28
 80041fc:	217d      	movs	r1, #125	; 0x7d
 80041fe:	2096      	movs	r0, #150	; 0x96
 8004200:	f7fd fa91 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004204:	4950      	ldr	r1, [pc, #320]	; (8004348 <showWSLedPanel+0x358>)
 8004206:	4847      	ldr	r0, [pc, #284]	; (8004324 <showWSLedPanel+0x334>)
 8004208:	f00d fbee 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800420c:	231f      	movs	r3, #31
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	227f      	movs	r2, #127	; 0x7f
 8004218:	219b      	movs	r1, #155	; 0x9b
 800421a:	4842      	ldr	r0, [pc, #264]	; (8004324 <showWSLedPanel+0x334>)
 800421c:	f7fd fcee 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004220:	231f      	movs	r3, #31
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2305      	movs	r3, #5
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2315      	movs	r3, #21
 800422a:	2228      	movs	r2, #40	; 0x28
 800422c:	217d      	movs	r1, #125	; 0x7d
 800422e:	20ca      	movs	r0, #202	; 0xca
 8004230:	f7fd fa79 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004234:	4945      	ldr	r1, [pc, #276]	; (800434c <showWSLedPanel+0x35c>)
 8004236:	483b      	ldr	r0, [pc, #236]	; (8004324 <showWSLedPanel+0x334>)
 8004238:	f00d fbd6 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800423c:	231f      	movs	r3, #31
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	2300      	movs	r3, #0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	227f      	movs	r2, #127	; 0x7f
 8004248:	21d2      	movs	r1, #210	; 0xd2
 800424a:	4836      	ldr	r0, [pc, #216]	; (8004324 <showWSLedPanel+0x334>)
 800424c:	f7fd fcd6 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004250:	231f      	movs	r3, #31
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	2305      	movs	r3, #5
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2315      	movs	r3, #21
 800425a:	2228      	movs	r2, #40	; 0x28
 800425c:	217d      	movs	r1, #125	; 0x7d
 800425e:	20fe      	movs	r0, #254	; 0xfe
 8004260:	f7fd fa61 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004264:	493a      	ldr	r1, [pc, #232]	; (8004350 <showWSLedPanel+0x360>)
 8004266:	482f      	ldr	r0, [pc, #188]	; (8004324 <showWSLedPanel+0x334>)
 8004268:	f00d fbbe 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800426c:	231f      	movs	r3, #31
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	2300      	movs	r3, #0
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	227f      	movs	r2, #127	; 0x7f
 8004278:	f44f 7183 	mov.w	r1, #262	; 0x106
 800427c:	4829      	ldr	r0, [pc, #164]	; (8004324 <showWSLedPanel+0x334>)
 800427e:	f7fd fcbd 	bl	8001bfc <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004282:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	2305      	movs	r3, #5
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2315      	movs	r3, #21
 800428e:	2250      	movs	r2, #80	; 0x50
 8004290:	219c      	movs	r1, #156	; 0x9c
 8004292:	2014      	movs	r0, #20
 8004294:	f7fd fa47 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004298:	492e      	ldr	r1, [pc, #184]	; (8004354 <showWSLedPanel+0x364>)
 800429a:	4822      	ldr	r0, [pc, #136]	; (8004324 <showWSLedPanel+0x334>)
 800429c:	f00d fba4 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 80042a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2300      	movs	r3, #0
 80042ac:	229e      	movs	r2, #158	; 0x9e
 80042ae:	211c      	movs	r1, #28
 80042b0:	481c      	ldr	r0, [pc, #112]	; (8004324 <showWSLedPanel+0x334>)
 80042b2:	f7fd fca3 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	2305      	movs	r3, #5
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2315      	movs	r3, #21
 80042c2:	2250      	movs	r2, #80	; 0x50
 80042c4:	219c      	movs	r1, #156	; 0x9c
 80042c6:	2078      	movs	r0, #120	; 0x78
 80042c8:	f7fd fa2d 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80042cc:	4922      	ldr	r1, [pc, #136]	; (8004358 <showWSLedPanel+0x368>)
 80042ce:	4815      	ldr	r0, [pc, #84]	; (8004324 <showWSLedPanel+0x334>)
 80042d0:	f00d fb8a 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	229e      	movs	r2, #158	; 0x9e
 80042e2:	2187      	movs	r1, #135	; 0x87
 80042e4:	480f      	ldr	r0, [pc, #60]	; (8004324 <showWSLedPanel+0x334>)
 80042e6:	f7fd fc89 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80042ea:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	2305      	movs	r3, #5
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2315      	movs	r3, #21
 80042f6:	2250      	movs	r2, #80	; 0x50
 80042f8:	219c      	movs	r1, #156	; 0x9c
 80042fa:	20dc      	movs	r0, #220	; 0xdc
 80042fc:	f7fd fa13 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8004300:	4916      	ldr	r1, [pc, #88]	; (800435c <showWSLedPanel+0x36c>)
 8004302:	4808      	ldr	r0, [pc, #32]	; (8004324 <showWSLedPanel+0x334>)
 8004304:	f00d fb70 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8004308:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	229e      	movs	r2, #158	; 0x9e
 8004316:	21e9      	movs	r1, #233	; 0xe9
 8004318:	e022      	b.n	8004360 <showWSLedPanel+0x370>
 800431a:	bf00      	nop
 800431c:	080290a0 	.word	0x080290a0
 8004320:	08015930 	.word	0x08015930
 8004324:	200002c0 	.word	0x200002c0
 8004328:	20000033 	.word	0x20000033
 800432c:	0801593c 	.word	0x0801593c
 8004330:	0801594c 	.word	0x0801594c
 8004334:	08015954 	.word	0x08015954
 8004338:	08027128 	.word	0x08027128
 800433c:	080158d0 	.word	0x080158d0
 8004340:	080158d8 	.word	0x080158d8
 8004344:	0801595c 	.word	0x0801595c
 8004348:	08015960 	.word	0x08015960
 800434c:	08015964 	.word	0x08015964
 8004350:	08015968 	.word	0x08015968
 8004354:	0801596c 	.word	0x0801596c
 8004358:	08015920 	.word	0x08015920
 800435c:	08015974 	.word	0x08015974
 8004360:	482b      	ldr	r0, [pc, #172]	; (8004410 <showWSLedPanel+0x420>)
 8004362:	f7fd fc4b 	bl	8001bfc <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004366:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2305      	movs	r3, #5
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2315      	movs	r3, #21
 8004372:	2250      	movs	r2, #80	; 0x50
 8004374:	21bb      	movs	r1, #187	; 0xbb
 8004376:	2046      	movs	r0, #70	; 0x46
 8004378:	f7fd f9d5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 800437c:	4925      	ldr	r1, [pc, #148]	; (8004414 <showWSLedPanel+0x424>)
 800437e:	4824      	ldr	r0, [pc, #144]	; (8004410 <showWSLedPanel+0x420>)
 8004380:	f00d fb32 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004384:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	2300      	movs	r3, #0
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	22bd      	movs	r2, #189	; 0xbd
 8004392:	214e      	movs	r1, #78	; 0x4e
 8004394:	481e      	ldr	r0, [pc, #120]	; (8004410 <showWSLedPanel+0x420>)
 8004396:	f7fd fc31 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800439a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	2305      	movs	r3, #5
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2315      	movs	r3, #21
 80043a6:	2250      	movs	r2, #80	; 0x50
 80043a8:	21bb      	movs	r1, #187	; 0xbb
 80043aa:	20aa      	movs	r0, #170	; 0xaa
 80043ac:	f7fd f9bb 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 80043b0:	4919      	ldr	r1, [pc, #100]	; (8004418 <showWSLedPanel+0x428>)
 80043b2:	4817      	ldr	r0, [pc, #92]	; (8004410 <showWSLedPanel+0x420>)
 80043b4:	f00d fb18 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80043b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	22bd      	movs	r2, #189	; 0xbd
 80043c6:	21b5      	movs	r1, #181	; 0xb5
 80043c8:	4811      	ldr	r0, [pc, #68]	; (8004410 <showWSLedPanel+0x420>)
 80043ca:	f7fd fc17 	bl	8001bfc <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80043ce:	4813      	ldr	r0, [pc, #76]	; (800441c <showWSLedPanel+0x42c>)
 80043d0:	f7fd f9fa 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80043d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	2305      	movs	r3, #5
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2314      	movs	r3, #20
 80043e0:	2264      	movs	r2, #100	; 0x64
 80043e2:	21d8      	movs	r1, #216	; 0xd8
 80043e4:	200a      	movs	r0, #10
 80043e6:	f7fd f99e 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80043ea:	490d      	ldr	r1, [pc, #52]	; (8004420 <showWSLedPanel+0x430>)
 80043ec:	4808      	ldr	r0, [pc, #32]	; (8004410 <showWSLedPanel+0x420>)
 80043ee:	f00d fafb 	bl	80119e8 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80043f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	2300      	movs	r3, #0
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	22da      	movs	r2, #218	; 0xda
 8004400:	210d      	movs	r1, #13
 8004402:	4803      	ldr	r0, [pc, #12]	; (8004410 <showWSLedPanel+0x420>)
 8004404:	f7fd fbfa 	bl	8001bfc <EF_PutString>


}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200002c0 	.word	0x200002c0
 8004414:	0801597c 	.word	0x0801597c
 8004418:	08015984 	.word	0x08015984
 800441c:	08027128 	.word	0x08027128
 8004420:	080158f8 	.word	0x080158f8

08004424 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b090      	sub	sp, #64	; 0x40
 8004428:	af02      	add	r7, sp, #8
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800445e:	2300      	movs	r3, #0
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
 8004462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004466:	2100      	movs	r1, #0
 8004468:	460a      	mov	r2, r1
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	460a      	mov	r2, r1
 800446e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	f107 0320 	add.w	r3, r7, #32
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	2100      	movs	r1, #0
 8004488:	460a      	mov	r2, r1
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	460a      	mov	r2, r1
 800448e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800449e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	2305      	movs	r3, #5
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2314      	movs	r3, #20
 80044aa:	2214      	movs	r2, #20
 80044ac:	2132      	movs	r1, #50	; 0x32
 80044ae:	203c      	movs	r0, #60	; 0x3c
 80044b0:	f7fd f8bc 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2305      	movs	r3, #5
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2314      	movs	r3, #20
 80044c0:	2214      	movs	r2, #20
 80044c2:	2132      	movs	r1, #50	; 0x32
 80044c4:	205a      	movs	r0, #90	; 0x5a
 80044c6:	f7fd f8b1 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	2305      	movs	r3, #5
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2314      	movs	r3, #20
 80044d6:	2214      	movs	r2, #20
 80044d8:	2132      	movs	r1, #50	; 0x32
 80044da:	2078      	movs	r0, #120	; 0x78
 80044dc:	f7fd f8a6 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	2305      	movs	r3, #5
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2314      	movs	r3, #20
 80044ec:	2214      	movs	r2, #20
 80044ee:	2132      	movs	r1, #50	; 0x32
 80044f0:	2096      	movs	r0, #150	; 0x96
 80044f2:	f7fd f89b 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	2305      	movs	r3, #5
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2314      	movs	r3, #20
 8004502:	2214      	movs	r2, #20
 8004504:	2132      	movs	r1, #50	; 0x32
 8004506:	20b4      	movs	r0, #180	; 0xb4
 8004508:	f7fd f890 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800450c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	2305      	movs	r3, #5
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2314      	movs	r3, #20
 8004518:	2214      	movs	r2, #20
 800451a:	2132      	movs	r1, #50	; 0x32
 800451c:	20d2      	movs	r0, #210	; 0xd2
 800451e:	f7fd f885 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	2305      	movs	r3, #5
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2314      	movs	r3, #20
 800452e:	2214      	movs	r2, #20
 8004530:	2132      	movs	r1, #50	; 0x32
 8004532:	20f0      	movs	r0, #240	; 0xf0
 8004534:	f7fd f87a 	bl	800162c <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 feda 	bl	80052f4 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 ff43 	bl	80053ce <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004548:	48cc      	ldr	r0, [pc, #816]	; (800487c <drawschedulePanel+0x458>)
 800454a:	f7fd f93d 	bl	80017c8 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800454e:	49cc      	ldr	r1, [pc, #816]	; (8004880 <drawschedulePanel+0x45c>)
 8004550:	48cc      	ldr	r0, [pc, #816]	; (8004884 <drawschedulePanel+0x460>)
 8004552:	f00d fa49 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004556:	f24c 6318 	movw	r3, #50712	; 0xc618
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2301      	movs	r3, #1
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2300      	movs	r3, #0
 8004562:	224b      	movs	r2, #75	; 0x4b
 8004564:	213c      	movs	r1, #60	; 0x3c
 8004566:	48c7      	ldr	r0, [pc, #796]	; (8004884 <drawschedulePanel+0x460>)
 8004568:	f7fd fb48 	bl	8001bfc <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800456c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2305      	movs	r3, #5
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2314      	movs	r3, #20
 8004578:	2214      	movs	r2, #20
 800457a:	21aa      	movs	r1, #170	; 0xaa
 800457c:	2015      	movs	r0, #21
 800457e:	f7fd f855 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004582:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	2305      	movs	r3, #5
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2314      	movs	r3, #20
 800458e:	2214      	movs	r2, #20
 8004590:	21aa      	movs	r1, #170	; 0xaa
 8004592:	2035      	movs	r0, #53	; 0x35
 8004594:	f7fd f84a 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004598:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2305      	movs	r3, #5
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2314      	movs	r3, #20
 80045a4:	2214      	movs	r2, #20
 80045a6:	21aa      	movs	r1, #170	; 0xaa
 80045a8:	2055      	movs	r0, #85	; 0x55
 80045aa:	f7fd f83f 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2305      	movs	r3, #5
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2314      	movs	r3, #20
 80045ba:	2214      	movs	r2, #20
 80045bc:	21aa      	movs	r1, #170	; 0xaa
 80045be:	2075      	movs	r0, #117	; 0x75
 80045c0:	f7fd f834 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	2305      	movs	r3, #5
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2314      	movs	r3, #20
 80045d0:	2214      	movs	r2, #20
 80045d2:	21aa      	movs	r1, #170	; 0xaa
 80045d4:	2095      	movs	r0, #149	; 0x95
 80045d6:	f7fd f829 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	2305      	movs	r3, #5
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2314      	movs	r3, #20
 80045e6:	2214      	movs	r2, #20
 80045e8:	21aa      	movs	r1, #170	; 0xaa
 80045ea:	20b5      	movs	r0, #181	; 0xb5
 80045ec:	f7fd f81e 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	2305      	movs	r3, #5
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2314      	movs	r3, #20
 80045fc:	2214      	movs	r2, #20
 80045fe:	21aa      	movs	r1, #170	; 0xaa
 8004600:	20d5      	movs	r0, #213	; 0xd5
 8004602:	f7fd f813 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004606:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2305      	movs	r3, #5
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2314      	movs	r3, #20
 8004612:	2214      	movs	r2, #20
 8004614:	21aa      	movs	r1, #170	; 0xaa
 8004616:	20f5      	movs	r0, #245	; 0xf5
 8004618:	f7fd f808 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800461c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2305      	movs	r3, #5
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2314      	movs	r3, #20
 8004628:	2214      	movs	r2, #20
 800462a:	21aa      	movs	r1, #170	; 0xaa
 800462c:	f240 1015 	movw	r0, #277	; 0x115
 8004630:	f7fc fffc 	bl	800162c <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004634:	4994      	ldr	r1, [pc, #592]	; (8004888 <drawschedulePanel+0x464>)
 8004636:	4893      	ldr	r0, [pc, #588]	; (8004884 <drawschedulePanel+0x460>)
 8004638:	f00d f9d6 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800463c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	2301      	movs	r3, #1
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	22c3      	movs	r2, #195	; 0xc3
 800464a:	2115      	movs	r1, #21
 800464c:	488d      	ldr	r0, [pc, #564]	; (8004884 <drawschedulePanel+0x460>)
 800464e:	f7fd fad5 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004652:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	2305      	movs	r3, #5
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2314      	movs	r3, #20
 800465e:	2222      	movs	r2, #34	; 0x22
 8004660:	2165      	movs	r1, #101	; 0x65
 8004662:	20bb      	movs	r0, #187	; 0xbb
 8004664:	f7fd f85f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004668:	4988      	ldr	r1, [pc, #544]	; (800488c <drawschedulePanel+0x468>)
 800466a:	4886      	ldr	r0, [pc, #536]	; (8004884 <drawschedulePanel+0x460>)
 800466c:	f00d f9bc 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004670:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	2268      	movs	r2, #104	; 0x68
 800467e:	21c1      	movs	r1, #193	; 0xc1
 8004680:	4880      	ldr	r0, [pc, #512]	; (8004884 <drawschedulePanel+0x460>)
 8004682:	f7fd fabb 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004686:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	2305      	movs	r3, #5
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2314      	movs	r3, #20
 8004692:	2222      	movs	r2, #34	; 0x22
 8004694:	2165      	movs	r1, #101	; 0x65
 8004696:	20e9      	movs	r0, #233	; 0xe9
 8004698:	f7fd f845 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800469c:	497c      	ldr	r1, [pc, #496]	; (8004890 <drawschedulePanel+0x46c>)
 800469e:	4879      	ldr	r0, [pc, #484]	; (8004884 <drawschedulePanel+0x460>)
 80046a0:	f00d f9a2 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	2268      	movs	r2, #104	; 0x68
 80046b2:	21ec      	movs	r1, #236	; 0xec
 80046b4:	4873      	ldr	r0, [pc, #460]	; (8004884 <drawschedulePanel+0x460>)
 80046b6:	f7fd faa1 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2305      	movs	r3, #5
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2314      	movs	r3, #20
 80046c6:	2222      	movs	r2, #34	; 0x22
 80046c8:	2165      	movs	r1, #101	; 0x65
 80046ca:	f240 1017 	movw	r0, #279	; 0x117
 80046ce:	f7fd f82a 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80046d2:	4970      	ldr	r1, [pc, #448]	; (8004894 <drawschedulePanel+0x470>)
 80046d4:	486b      	ldr	r0, [pc, #428]	; (8004884 <drawschedulePanel+0x460>)
 80046d6:	f00d f987 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	2268      	movs	r2, #104	; 0x68
 80046e8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80046ec:	4865      	ldr	r0, [pc, #404]	; (8004884 <drawschedulePanel+0x460>)
 80046ee:	f7fd fa85 	bl	8001bfc <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	2305      	movs	r3, #5
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2314      	movs	r3, #20
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	2188      	movs	r1, #136	; 0x88
 8004702:	20bb      	movs	r0, #187	; 0xbb
 8004704:	f7fd f80f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004708:	4960      	ldr	r1, [pc, #384]	; (800488c <drawschedulePanel+0x468>)
 800470a:	485e      	ldr	r0, [pc, #376]	; (8004884 <drawschedulePanel+0x460>)
 800470c:	f00d f96c 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004710:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	2300      	movs	r3, #0
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2300      	movs	r3, #0
 800471c:	228b      	movs	r2, #139	; 0x8b
 800471e:	21c1      	movs	r1, #193	; 0xc1
 8004720:	4858      	ldr	r0, [pc, #352]	; (8004884 <drawschedulePanel+0x460>)
 8004722:	f7fd fa6b 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004726:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	2305      	movs	r3, #5
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2314      	movs	r3, #20
 8004732:	2222      	movs	r2, #34	; 0x22
 8004734:	2188      	movs	r1, #136	; 0x88
 8004736:	20e9      	movs	r0, #233	; 0xe9
 8004738:	f7fc fff5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800473c:	4954      	ldr	r1, [pc, #336]	; (8004890 <drawschedulePanel+0x46c>)
 800473e:	4851      	ldr	r0, [pc, #324]	; (8004884 <drawschedulePanel+0x460>)
 8004740:	f00d f952 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004744:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	228b      	movs	r2, #139	; 0x8b
 8004752:	21ec      	movs	r1, #236	; 0xec
 8004754:	484b      	ldr	r0, [pc, #300]	; (8004884 <drawschedulePanel+0x460>)
 8004756:	f7fd fa51 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800475a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	2305      	movs	r3, #5
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2314      	movs	r3, #20
 8004766:	2222      	movs	r2, #34	; 0x22
 8004768:	2188      	movs	r1, #136	; 0x88
 800476a:	f240 1017 	movw	r0, #279	; 0x117
 800476e:	f7fc ffda 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004772:	4948      	ldr	r1, [pc, #288]	; (8004894 <drawschedulePanel+0x470>)
 8004774:	4843      	ldr	r0, [pc, #268]	; (8004884 <drawschedulePanel+0x460>)
 8004776:	f00d f937 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800477a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	228b      	movs	r2, #139	; 0x8b
 8004788:	f44f 718c 	mov.w	r1, #280	; 0x118
 800478c:	483d      	ldr	r0, [pc, #244]	; (8004884 <drawschedulePanel+0x460>)
 800478e:	f7fd fa35 	bl	8001bfc <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004792:	4841      	ldr	r0, [pc, #260]	; (8004898 <drawschedulePanel+0x474>)
 8004794:	f7fd f818 	bl	80017c8 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b01      	cmp	r3, #1
 800479c:	f040 80db 	bne.w	8004956 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 80047a0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80047a4:	4619      	mov	r1, r3
 80047a6:	2001      	movs	r0, #1
 80047a8:	f7fe fc13 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 80047ac:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80047b0:	4619      	mov	r1, r3
 80047b2:	2001      	movs	r0, #1
 80047b4:	f7fe fc31 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 80047b8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80047bc:	4619      	mov	r1, r3
 80047be:	2001      	movs	r0, #1
 80047c0:	f7fe fc4f 	bl	8003062 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80047c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047c8:	4619      	mov	r1, r3
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7fe fc6d 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80047d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d4:	4619      	mov	r1, r3
 80047d6:	2001      	movs	r0, #1
 80047d8:	f7fe faaa 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80047dc:	f107 031c 	add.w	r3, r7, #28
 80047e0:	4619      	mov	r1, r3
 80047e2:	2001      	movs	r0, #1
 80047e4:	f7fe fb20 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80047e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047ec:	2b17      	cmp	r3, #23
 80047ee:	d902      	bls.n	80047f6 <drawschedulePanel+0x3d2>
 80047f0:	2317      	movs	r3, #23
 80047f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80047f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047fa:	2b3b      	cmp	r3, #59	; 0x3b
 80047fc:	d902      	bls.n	8004804 <drawschedulePanel+0x3e0>
 80047fe:	233b      	movs	r3, #59	; 0x3b
 8004800:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 8004804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004808:	2b17      	cmp	r3, #23
 800480a:	d902      	bls.n	8004812 <drawschedulePanel+0x3ee>
 800480c:	2317      	movs	r3, #23
 800480e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 8004812:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004816:	2b3b      	cmp	r3, #59	; 0x3b
 8004818:	d902      	bls.n	8004820 <drawschedulePanel+0x3fc>
 800481a:	233b      	movs	r3, #59	; 0x3b
 800481c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004824:	2b09      	cmp	r3, #9
 8004826:	d80d      	bhi.n	8004844 <drawschedulePanel+0x420>
 8004828:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800482c:	2b09      	cmp	r3, #9
 800482e:	d809      	bhi.n	8004844 <drawschedulePanel+0x420>
 8004830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004834:	461a      	mov	r2, r3
 8004836:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800483a:	4918      	ldr	r1, [pc, #96]	; (800489c <drawschedulePanel+0x478>)
 800483c:	4811      	ldr	r0, [pc, #68]	; (8004884 <drawschedulePanel+0x460>)
 800483e:	f00d f8d3 	bl	80119e8 <siprintf>
 8004842:	e03a      	b.n	80048ba <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004848:	2b09      	cmp	r3, #9
 800484a:	d809      	bhi.n	8004860 <drawschedulePanel+0x43c>
 800484c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004850:	461a      	mov	r2, r3
 8004852:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004856:	4912      	ldr	r1, [pc, #72]	; (80048a0 <drawschedulePanel+0x47c>)
 8004858:	480a      	ldr	r0, [pc, #40]	; (8004884 <drawschedulePanel+0x460>)
 800485a:	f00d f8c5 	bl	80119e8 <siprintf>
 800485e:	e02c      	b.n	80048ba <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004860:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004864:	2b09      	cmp	r3, #9
 8004866:	d81f      	bhi.n	80048a8 <drawschedulePanel+0x484>
 8004868:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800486c:	461a      	mov	r2, r3
 800486e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004872:	490c      	ldr	r1, [pc, #48]	; (80048a4 <drawschedulePanel+0x480>)
 8004874:	4803      	ldr	r0, [pc, #12]	; (8004884 <drawschedulePanel+0x460>)
 8004876:	f00d f8b7 	bl	80119e8 <siprintf>
 800487a:	e01e      	b.n	80048ba <drawschedulePanel+0x496>
 800487c:	08027128 	.word	0x08027128
 8004880:	0801598c 	.word	0x0801598c
 8004884:	200002c0 	.word	0x200002c0
 8004888:	080159a4 	.word	0x080159a4
 800488c:	080159c8 	.word	0x080159c8
 8004890:	080159cc 	.word	0x080159cc
 8004894:	080159d0 	.word	0x080159d0
 8004898:	080290a0 	.word	0x080290a0
 800489c:	080159d8 	.word	0x080159d8
 80048a0:	080159e8 	.word	0x080159e8
 80048a4:	080159f8 	.word	0x080159f8
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 80048a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048ac:	461a      	mov	r2, r3
 80048ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80048b2:	498f      	ldr	r1, [pc, #572]	; (8004af0 <drawschedulePanel+0x6cc>)
 80048b4:	488f      	ldr	r0, [pc, #572]	; (8004af4 <drawschedulePanel+0x6d0>)
 80048b6:	f00d f897 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80048ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	2301      	movs	r3, #1
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2300      	movs	r3, #0
 80048c6:	2264      	movs	r2, #100	; 0x64
 80048c8:	210a      	movs	r1, #10
 80048ca:	488a      	ldr	r0, [pc, #552]	; (8004af4 <drawschedulePanel+0x6d0>)
 80048cc:	f7fd f996 	bl	8001bfc <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80048d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d80d      	bhi.n	80048f4 <drawschedulePanel+0x4d0>
 80048d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d809      	bhi.n	80048f4 <drawschedulePanel+0x4d0>
 80048e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048e4:	461a      	mov	r2, r3
 80048e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ea:	4983      	ldr	r1, [pc, #524]	; (8004af8 <drawschedulePanel+0x6d4>)
 80048ec:	4881      	ldr	r0, [pc, #516]	; (8004af4 <drawschedulePanel+0x6d0>)
 80048ee:	f00d f87b 	bl	80119e8 <siprintf>
 80048f2:	e024      	b.n	800493e <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80048f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	d809      	bhi.n	8004910 <drawschedulePanel+0x4ec>
 80048fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004900:	461a      	mov	r2, r3
 8004902:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004906:	497d      	ldr	r1, [pc, #500]	; (8004afc <drawschedulePanel+0x6d8>)
 8004908:	487a      	ldr	r0, [pc, #488]	; (8004af4 <drawschedulePanel+0x6d0>)
 800490a:	f00d f86d 	bl	80119e8 <siprintf>
 800490e:	e016      	b.n	800493e <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004910:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004914:	2b09      	cmp	r3, #9
 8004916:	d809      	bhi.n	800492c <drawschedulePanel+0x508>
 8004918:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800491c:	461a      	mov	r2, r3
 800491e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004922:	4977      	ldr	r1, [pc, #476]	; (8004b00 <drawschedulePanel+0x6dc>)
 8004924:	4873      	ldr	r0, [pc, #460]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004926:	f00d f85f 	bl	80119e8 <siprintf>
 800492a:	e008      	b.n	800493e <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 800492c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004930:	461a      	mov	r2, r3
 8004932:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004936:	4973      	ldr	r1, [pc, #460]	; (8004b04 <drawschedulePanel+0x6e0>)
 8004938:	486e      	ldr	r0, [pc, #440]	; (8004af4 <drawschedulePanel+0x6d0>)
 800493a:	f00d f855 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800493e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2301      	movs	r3, #1
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	2287      	movs	r2, #135	; 0x87
 800494c:	210a      	movs	r1, #10
 800494e:	4869      	ldr	r0, [pc, #420]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004950:	f7fd f954 	bl	8001bfc <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004954:	e0c7      	b.n	8004ae6 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f040 80c4 	bne.w	8004ae6 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800495e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004962:	4619      	mov	r1, r3
 8004964:	2002      	movs	r0, #2
 8004966:	f7fe fb34 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 800496a:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800496e:	4619      	mov	r1, r3
 8004970:	2002      	movs	r0, #2
 8004972:	f7fe fb52 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004976:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800497a:	4619      	mov	r1, r3
 800497c:	2002      	movs	r0, #2
 800497e:	f7fe fb70 	bl	8003062 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004986:	4619      	mov	r1, r3
 8004988:	2002      	movs	r0, #2
 800498a:	f7fe fb8e 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	4619      	mov	r1, r3
 8004994:	2002      	movs	r0, #2
 8004996:	f7fe f9cb 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4619      	mov	r1, r3
 80049a0:	2002      	movs	r0, #2
 80049a2:	f7fe fa41 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 80049a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049aa:	2b17      	cmp	r3, #23
 80049ac:	d902      	bls.n	80049b4 <drawschedulePanel+0x590>
 80049ae:	2317      	movs	r3, #23
 80049b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 80049b4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049b8:	2b3b      	cmp	r3, #59	; 0x3b
 80049ba:	d902      	bls.n	80049c2 <drawschedulePanel+0x59e>
 80049bc:	233b      	movs	r3, #59	; 0x3b
 80049be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80049c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049c6:	2b17      	cmp	r3, #23
 80049c8:	d902      	bls.n	80049d0 <drawschedulePanel+0x5ac>
 80049ca:	2317      	movs	r3, #23
 80049cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80049d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049d4:	2b3b      	cmp	r3, #59	; 0x3b
 80049d6:	d902      	bls.n	80049de <drawschedulePanel+0x5ba>
 80049d8:	233b      	movs	r3, #59	; 0x3b
 80049da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80049de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d80d      	bhi.n	8004a02 <drawschedulePanel+0x5de>
 80049e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d809      	bhi.n	8004a02 <drawschedulePanel+0x5de>
 80049ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049f2:	461a      	mov	r2, r3
 80049f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049f8:	4943      	ldr	r1, [pc, #268]	; (8004b08 <drawschedulePanel+0x6e4>)
 80049fa:	483e      	ldr	r0, [pc, #248]	; (8004af4 <drawschedulePanel+0x6d0>)
 80049fc:	f00c fff4 	bl	80119e8 <siprintf>
 8004a00:	e024      	b.n	8004a4c <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a06:	2b09      	cmp	r3, #9
 8004a08:	d809      	bhi.n	8004a1e <drawschedulePanel+0x5fa>
 8004a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <drawschedulePanel+0x6e8>)
 8004a16:	4837      	ldr	r0, [pc, #220]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a18:	f00c ffe6 	bl	80119e8 <siprintf>
 8004a1c:	e016      	b.n	8004a4c <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004a1e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a22:	2b09      	cmp	r3, #9
 8004a24:	d809      	bhi.n	8004a3a <drawschedulePanel+0x616>
 8004a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a30:	4937      	ldr	r1, [pc, #220]	; (8004b10 <drawschedulePanel+0x6ec>)
 8004a32:	4830      	ldr	r0, [pc, #192]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a34:	f00c ffd8 	bl	80119e8 <siprintf>
 8004a38:	e008      	b.n	8004a4c <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a44:	4933      	ldr	r1, [pc, #204]	; (8004b14 <drawschedulePanel+0x6f0>)
 8004a46:	482b      	ldr	r0, [pc, #172]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a48:	f00c ffce 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	2301      	movs	r3, #1
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	2264      	movs	r2, #100	; 0x64
 8004a5a:	210a      	movs	r1, #10
 8004a5c:	4825      	ldr	r0, [pc, #148]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a5e:	f7fd f8cd 	bl	8001bfc <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004a62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	d80d      	bhi.n	8004a86 <drawschedulePanel+0x662>
 8004a6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	d809      	bhi.n	8004a86 <drawschedulePanel+0x662>
 8004a72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a76:	461a      	mov	r2, r3
 8004a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a7c:	4926      	ldr	r1, [pc, #152]	; (8004b18 <drawschedulePanel+0x6f4>)
 8004a7e:	481d      	ldr	r0, [pc, #116]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a80:	f00c ffb2 	bl	80119e8 <siprintf>
 8004a84:	e024      	b.n	8004ad0 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004a86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a8a:	2b09      	cmp	r3, #9
 8004a8c:	d809      	bhi.n	8004aa2 <drawschedulePanel+0x67e>
 8004a8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a92:	461a      	mov	r2, r3
 8004a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a98:	4920      	ldr	r1, [pc, #128]	; (8004b1c <drawschedulePanel+0x6f8>)
 8004a9a:	4816      	ldr	r0, [pc, #88]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a9c:	f00c ffa4 	bl	80119e8 <siprintf>
 8004aa0:	e016      	b.n	8004ad0 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004aa2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004aa6:	2b09      	cmp	r3, #9
 8004aa8:	d809      	bhi.n	8004abe <drawschedulePanel+0x69a>
 8004aaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ab4:	491a      	ldr	r1, [pc, #104]	; (8004b20 <drawschedulePanel+0x6fc>)
 8004ab6:	480f      	ldr	r0, [pc, #60]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004ab8:	f00c ff96 	bl	80119e8 <siprintf>
 8004abc:	e008      	b.n	8004ad0 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004abe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ac8:	4916      	ldr	r1, [pc, #88]	; (8004b24 <drawschedulePanel+0x700>)
 8004aca:	480a      	ldr	r0, [pc, #40]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004acc:	f00c ff8c 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ad0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	2287      	movs	r2, #135	; 0x87
 8004ade:	210c      	movs	r1, #12
 8004ae0:	4804      	ldr	r0, [pc, #16]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004ae2:	f7fd f88b 	bl	8001bfc <EF_PutString>
}
 8004ae6:	bf00      	nop
 8004ae8:	3738      	adds	r7, #56	; 0x38
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	08015a08 	.word	0x08015a08
 8004af4:	200002c0 	.word	0x200002c0
 8004af8:	08015a18 	.word	0x08015a18
 8004afc:	08015a28 	.word	0x08015a28
 8004b00:	08015a38 	.word	0x08015a38
 8004b04:	08015a48 	.word	0x08015a48
 8004b08:	08015a58 	.word	0x08015a58
 8004b0c:	08015a68 	.word	0x08015a68
 8004b10:	08015a78 	.word	0x08015a78
 8004b14:	08015a88 	.word	0x08015a88
 8004b18:	08015a98 	.word	0x08015a98
 8004b1c:	08015aa8 	.word	0x08015aa8
 8004b20:	08015ab8 	.word	0x08015ab8
 8004b24:	08015ac8 	.word	0x08015ac8

08004b28 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b2e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b32:	f7fd fa4d 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b36:	483f      	ldr	r0, [pc, #252]	; (8004c34 <showSchedule1Panel+0x10c>)
 8004b38:	f7fc fe46 	bl	80017c8 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004b3c:	493e      	ldr	r1, [pc, #248]	; (8004c38 <showSchedule1Panel+0x110>)
 8004b3e:	483f      	ldr	r0, [pc, #252]	; (8004c3c <showSchedule1Panel+0x114>)
 8004b40:	f00c ff52 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b52:	220a      	movs	r2, #10
 8004b54:	212a      	movs	r1, #42	; 0x2a
 8004b56:	4839      	ldr	r0, [pc, #228]	; (8004c3c <showSchedule1Panel+0x114>)
 8004b58:	f7fd f850 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2329      	movs	r3, #41	; 0x29
 8004b64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b68:	2129      	movs	r1, #41	; 0x29
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fc fb7c 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	232b      	movs	r3, #43	; 0x2b
 8004b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b7c:	212b      	movs	r1, #43	; 0x2b
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fc fb72 	bl	8001268 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7ff fc4d 	bl	8004424 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b8a:	482d      	ldr	r0, [pc, #180]	; (8004c40 <showSchedule1Panel+0x118>)
 8004b8c:	f7fc fe1c 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004b90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	2305      	movs	r3, #5
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2314      	movs	r3, #20
 8004b9c:	225f      	movs	r2, #95	; 0x5f
 8004b9e:	21d8      	movs	r1, #216	; 0xd8
 8004ba0:	20dc      	movs	r0, #220	; 0xdc
 8004ba2:	f7fc fdc0 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004ba6:	4927      	ldr	r1, [pc, #156]	; (8004c44 <showSchedule1Panel+0x11c>)
 8004ba8:	4824      	ldr	r0, [pc, #144]	; (8004c3c <showSchedule1Panel+0x114>)
 8004baa:	f00c ff1d 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	22da      	movs	r2, #218	; 0xda
 8004bbc:	21e6      	movs	r1, #230	; 0xe6
 8004bbe:	481f      	ldr	r0, [pc, #124]	; (8004c3c <showSchedule1Panel+0x114>)
 8004bc0:	f7fd f81c 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004bc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	2305      	movs	r3, #5
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2314      	movs	r3, #20
 8004bd0:	225a      	movs	r2, #90	; 0x5a
 8004bd2:	21d8      	movs	r1, #216	; 0xd8
 8004bd4:	2078      	movs	r0, #120	; 0x78
 8004bd6:	f7fc fda6 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <showSchedule1Panel+0x120>)
 8004bdc:	4817      	ldr	r0, [pc, #92]	; (8004c3c <showSchedule1Panel+0x114>)
 8004bde:	f00c ff03 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004be2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	22da      	movs	r2, #218	; 0xda
 8004bf0:	217e      	movs	r1, #126	; 0x7e
 8004bf2:	4812      	ldr	r0, [pc, #72]	; (8004c3c <showSchedule1Panel+0x114>)
 8004bf4:	f7fd f802 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bf8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	2305      	movs	r3, #5
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2314      	movs	r3, #20
 8004c04:	2264      	movs	r2, #100	; 0x64
 8004c06:	21d8      	movs	r1, #216	; 0xd8
 8004c08:	200a      	movs	r0, #10
 8004c0a:	f7fc fd8c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004c0e:	490f      	ldr	r1, [pc, #60]	; (8004c4c <showSchedule1Panel+0x124>)
 8004c10:	480a      	ldr	r0, [pc, #40]	; (8004c3c <showSchedule1Panel+0x114>)
 8004c12:	f00c fee9 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004c16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	22da      	movs	r2, #218	; 0xda
 8004c24:	210d      	movs	r1, #13
 8004c26:	4805      	ldr	r0, [pc, #20]	; (8004c3c <showSchedule1Panel+0x114>)
 8004c28:	f7fc ffe8 	bl	8001bfc <EF_PutString>
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	080290a0 	.word	0x080290a0
 8004c38:	08015ad8 	.word	0x08015ad8
 8004c3c:	200002c0 	.word	0x200002c0
 8004c40:	08027128 	.word	0x08027128
 8004c44:	08015ae8 	.word	0x08015ae8
 8004c48:	08015af4 	.word	0x08015af4
 8004c4c:	08015afc 	.word	0x08015afc

08004c50 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004c56:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004c5a:	f7fd f9b9 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c5e:	4832      	ldr	r0, [pc, #200]	; (8004d28 <showSchedule2Panel+0xd8>)
 8004c60:	f7fc fdb2 	bl	80017c8 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004c64:	4931      	ldr	r1, [pc, #196]	; (8004d2c <showSchedule2Panel+0xdc>)
 8004c66:	4832      	ldr	r0, [pc, #200]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004c68:	f00c febe 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004c6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c7a:	220a      	movs	r2, #10
 8004c7c:	212a      	movs	r1, #42	; 0x2a
 8004c7e:	482c      	ldr	r0, [pc, #176]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004c80:	f7fc ffbc 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004c84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2329      	movs	r3, #41	; 0x29
 8004c8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c90:	2129      	movs	r1, #41	; 0x29
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7fc fae8 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004c98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	232b      	movs	r3, #43	; 0x2b
 8004ca0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ca4:	212b      	movs	r1, #43	; 0x2b
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fc fade 	bl	8001268 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004cac:	2002      	movs	r0, #2
 8004cae:	f7ff fbb9 	bl	8004424 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004cb2:	4820      	ldr	r0, [pc, #128]	; (8004d34 <showSchedule2Panel+0xe4>)
 8004cb4:	f7fc fd88 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004cb8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	2305      	movs	r3, #5
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2314      	movs	r3, #20
 8004cc4:	225a      	movs	r2, #90	; 0x5a
 8004cc6:	21d8      	movs	r1, #216	; 0xd8
 8004cc8:	2078      	movs	r0, #120	; 0x78
 8004cca:	f7fc fd2c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004cce:	491a      	ldr	r1, [pc, #104]	; (8004d38 <showSchedule2Panel+0xe8>)
 8004cd0:	4817      	ldr	r0, [pc, #92]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004cd2:	f00c fe89 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004cd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	22da      	movs	r2, #218	; 0xda
 8004ce4:	217e      	movs	r1, #126	; 0x7e
 8004ce6:	4812      	ldr	r0, [pc, #72]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004ce8:	f7fc ff88 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004cec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	2305      	movs	r3, #5
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2314      	movs	r3, #20
 8004cf8:	2264      	movs	r2, #100	; 0x64
 8004cfa:	21d8      	movs	r1, #216	; 0xd8
 8004cfc:	200a      	movs	r0, #10
 8004cfe:	f7fc fd12 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004d02:	490e      	ldr	r1, [pc, #56]	; (8004d3c <showSchedule2Panel+0xec>)
 8004d04:	480a      	ldr	r0, [pc, #40]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004d06:	f00c fe6f 	bl	80119e8 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004d0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	2300      	movs	r3, #0
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	22da      	movs	r2, #218	; 0xda
 8004d18:	210d      	movs	r1, #13
 8004d1a:	4805      	ldr	r0, [pc, #20]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004d1c:	f7fc ff6e 	bl	8001bfc <EF_PutString>
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	080290a0 	.word	0x080290a0
 8004d2c:	08015b08 	.word	0x08015b08
 8004d30:	200002c0 	.word	0x200002c0
 8004d34:	08027128 	.word	0x08027128
 8004d38:	08015af4 	.word	0x08015af4
 8004d3c:	08015afc 	.word	0x08015afc

08004d40 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004d46:	f7fd fdaf 	bl	80028a8 <DS3231_GetHour>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004d4e:	f7fd fdb7 	bl	80028c0 <DS3231_GetMinute>
 8004d52:	4603      	mov	r3, r0
 8004d54:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004d56:	482a      	ldr	r0, [pc, #168]	; (8004e00 <ChangeHourOnScreen+0xc0>)
 8004d58:	f7fc fd36 	bl	80017c8 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <ChangeHourOnScreen+0xc4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	79fa      	ldrb	r2, [r7, #7]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d021      	beq.n	8004daa <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004d66:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <ChangeHourOnScreen+0xc8>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d11d      	bne.n	8004daa <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b09      	cmp	r3, #9
 8004d72:	d806      	bhi.n	8004d82 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4924      	ldr	r1, [pc, #144]	; (8004e0c <ChangeHourOnScreen+0xcc>)
 8004d7a:	4825      	ldr	r0, [pc, #148]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004d7c:	f00c fe34 	bl	80119e8 <siprintf>
 8004d80:	e005      	b.n	8004d8e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4923      	ldr	r1, [pc, #140]	; (8004e14 <ChangeHourOnScreen+0xd4>)
 8004d88:	4821      	ldr	r0, [pc, #132]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004d8a:	f00c fe2d 	bl	80119e8 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	2301      	movs	r3, #1
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2232      	movs	r2, #50	; 0x32
 8004d9c:	2161      	movs	r1, #97	; 0x61
 8004d9e:	481c      	ldr	r0, [pc, #112]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004da0:	f7fc ff2c 	bl	8001bfc <EF_PutString>
			  OldHours = CHour;
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <ChangeHourOnScreen+0xc4>)
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004daa:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <ChangeHourOnScreen+0xd8>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	79ba      	ldrb	r2, [r7, #6]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d021      	beq.n	8004df8 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004db4:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <ChangeHourOnScreen+0xc8>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d11d      	bne.n	8004df8 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004dbc:	79bb      	ldrb	r3, [r7, #6]
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	d806      	bhi.n	8004dd0 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004dc2:	79bb      	ldrb	r3, [r7, #6]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4915      	ldr	r1, [pc, #84]	; (8004e1c <ChangeHourOnScreen+0xdc>)
 8004dc8:	4811      	ldr	r0, [pc, #68]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004dca:	f00c fe0d 	bl	80119e8 <siprintf>
 8004dce:	e005      	b.n	8004ddc <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004dd0:	79bb      	ldrb	r3, [r7, #6]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <ChangeHourOnScreen+0xe0>)
 8004dd6:	480e      	ldr	r0, [pc, #56]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004dd8:	f00c fe06 	bl	80119e8 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ddc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	2301      	movs	r3, #1
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	2232      	movs	r2, #50	; 0x32
 8004dea:	2196      	movs	r1, #150	; 0x96
 8004dec:	4808      	ldr	r0, [pc, #32]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004dee:	f7fc ff05 	bl	8001bfc <EF_PutString>
			  OldMinutes = CMinute;
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <ChangeHourOnScreen+0xd8>)
 8004df4:	79bb      	ldrb	r3, [r7, #6]
 8004df6:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	080290a0 	.word	0x080290a0
 8004e04:	2000024c 	.word	0x2000024c
 8004e08:	20000290 	.word	0x20000290
 8004e0c:	08015b18 	.word	0x08015b18
 8004e10:	200002c0 	.word	0x200002c0
 8004e14:	08015b20 	.word	0x08015b20
 8004e18:	2000024d 	.word	0x2000024d
 8004e1c:	08015b24 	.word	0x08015b24
 8004e20:	08015b2c 	.word	0x08015b2c

08004e24 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004e38:	f7fd ff0a 	bl	8002c50 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004e3c:	f7fd ff40 	bl	8002cc0 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004e40:	e005      	b.n	8004e4e <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004e42:	2018      	movs	r0, #24
 8004e44:	f003 feb4 	bl	8008bb0 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004e48:	2019      	movs	r0, #25
 8004e4a:	f003 feb1 	bl	8008bb0 <SendComand>
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d12e      	bne.n	8004eca <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004e6c:	f7fd fef0 	bl	8002c50 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004e70:	481b      	ldr	r0, [pc, #108]	; (8004ee0 <predefinedActivityKarmienie+0x88>)
 8004e72:	f7fc fca9 	bl	80017c8 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2328      	movs	r3, #40	; 0x28
 8004e82:	2278      	movs	r2, #120	; 0x78
 8004e84:	213c      	movs	r1, #60	; 0x3c
 8004e86:	2064      	movs	r0, #100	; 0x64
 8004e88:	f7fc fc4d 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004e8c:	4915      	ldr	r1, [pc, #84]	; (8004ee4 <predefinedActivityKarmienie+0x8c>)
 8004e8e:	4816      	ldr	r0, [pc, #88]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004e90:	f00c fdaa 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	223e      	movs	r2, #62	; 0x3e
 8004ea2:	2177      	movs	r1, #119	; 0x77
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004ea6:	f7fc fea9 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004eaa:	4910      	ldr	r1, [pc, #64]	; (8004eec <predefinedActivityKarmienie+0x94>)
 8004eac:	480e      	ldr	r0, [pc, #56]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004eae:	f00c fd9b 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2250      	movs	r2, #80	; 0x50
 8004ec0:	2193      	movs	r1, #147	; 0x93
 8004ec2:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004ec4:	f7fc fe9a 	bl	8001bfc <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004ec8:	e005      	b.n	8004ed6 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004eca:	2018      	movs	r0, #24
 8004ecc:	f003 fe70 	bl	8008bb0 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004ed0:	4807      	ldr	r0, [pc, #28]	; (8004ef0 <predefinedActivityKarmienie+0x98>)
 8004ed2:	f00a fa25 	bl	800f320 <HAL_TIM_Base_Start_IT>
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	08027128 	.word	0x08027128
 8004ee4:	08015910 	.word	0x08015910
 8004ee8:	200002c0 	.word	0x200002c0
 8004eec:	08015920 	.word	0x08015920
 8004ef0:	20000990 	.word	0x20000990

08004ef4 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004efa:	487d      	ldr	r0, [pc, #500]	; (80050f0 <drawCurrentStateOfSwitches+0x1fc>)
 8004efc:	f7fc fc64 	bl	80017c8 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004f00:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01c      	beq.n	8004f42 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2305      	movs	r3, #5
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2315      	movs	r3, #21
 8004f14:	2221      	movs	r2, #33	; 0x21
 8004f16:	2141      	movs	r1, #65	; 0x41
 8004f18:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f1c:	f7fc fc03 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f20:	4975      	ldr	r1, [pc, #468]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8004f22:	4876      	ldr	r0, [pc, #472]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f24:	f00c fd60 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f28:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	2243      	movs	r2, #67	; 0x43
 8004f36:	f240 1111 	movw	r1, #273	; 0x111
 8004f3a:	4870      	ldr	r0, [pc, #448]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f3c:	f7fc fe5e 	bl	8001bfc <EF_PutString>
 8004f40:	e01b      	b.n	8004f7a <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2305      	movs	r3, #5
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2315      	movs	r3, #21
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	2141      	movs	r1, #65	; 0x41
 8004f52:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f56:	f7fc fbe6 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f5a:	4969      	ldr	r1, [pc, #420]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 8004f5c:	4867      	ldr	r0, [pc, #412]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f5e:	f00c fd43 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2243      	movs	r2, #67	; 0x43
 8004f70:	f240 1111 	movw	r1, #273	; 0x111
 8004f74:	4861      	ldr	r0, [pc, #388]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f76:	f7fc fe41 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01c      	beq.n	8004fbc <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	2305      	movs	r3, #5
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2315      	movs	r3, #21
 8004f8e:	2221      	movs	r2, #33	; 0x21
 8004f90:	215f      	movs	r1, #95	; 0x5f
 8004f92:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f96:	f7fc fbc6 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f9a:	4957      	ldr	r1, [pc, #348]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8004f9c:	4857      	ldr	r0, [pc, #348]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f9e:	f00c fd23 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004fa2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2300      	movs	r3, #0
 8004fae:	2261      	movs	r2, #97	; 0x61
 8004fb0:	f240 1111 	movw	r1, #273	; 0x111
 8004fb4:	4851      	ldr	r0, [pc, #324]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004fb6:	f7fc fe21 	bl	8001bfc <EF_PutString>
 8004fba:	e01b      	b.n	8004ff4 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2315      	movs	r3, #21
 8004fc8:	2221      	movs	r2, #33	; 0x21
 8004fca:	215f      	movs	r1, #95	; 0x5f
 8004fcc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fd0:	f7fc fba9 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fd4:	494a      	ldr	r1, [pc, #296]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 8004fd6:	4849      	ldr	r0, [pc, #292]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004fd8:	f00c fd06 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2261      	movs	r2, #97	; 0x61
 8004fea:	f240 1111 	movw	r1, #273	; 0x111
 8004fee:	4843      	ldr	r0, [pc, #268]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004ff0:	f7fc fe04 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01c      	beq.n	8005036 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ffc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2305      	movs	r3, #5
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2315      	movs	r3, #21
 8005008:	2221      	movs	r2, #33	; 0x21
 800500a:	217d      	movs	r1, #125	; 0x7d
 800500c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005010:	f7fc fb89 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005014:	4938      	ldr	r1, [pc, #224]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8005016:	4839      	ldr	r0, [pc, #228]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005018:	f00c fce6 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800501c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	2300      	movs	r3, #0
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	227f      	movs	r2, #127	; 0x7f
 800502a:	f240 1111 	movw	r1, #273	; 0x111
 800502e:	4833      	ldr	r0, [pc, #204]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005030:	f7fc fde4 	bl	8001bfc <EF_PutString>
 8005034:	e01b      	b.n	800506e <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005036:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	2305      	movs	r3, #5
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2315      	movs	r3, #21
 8005042:	2221      	movs	r2, #33	; 0x21
 8005044:	217d      	movs	r1, #125	; 0x7d
 8005046:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800504a:	f7fc fb6c 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800504e:	492c      	ldr	r1, [pc, #176]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 8005050:	482a      	ldr	r0, [pc, #168]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005052:	f00c fcc9 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005056:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	227f      	movs	r2, #127	; 0x7f
 8005064:	f240 1111 	movw	r1, #273	; 0x111
 8005068:	4824      	ldr	r0, [pc, #144]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 800506a:	f7fc fdc7 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8005070:	78db      	ldrb	r3, [r3, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01c      	beq.n	80050b0 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005076:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2305      	movs	r3, #5
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2315      	movs	r3, #21
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	219b      	movs	r1, #155	; 0x9b
 8005086:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800508a:	f7fc fb4c 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800508e:	491a      	ldr	r1, [pc, #104]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8005090:	481a      	ldr	r0, [pc, #104]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005092:	f00c fca9 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005096:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	2300      	movs	r3, #0
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	229d      	movs	r2, #157	; 0x9d
 80050a4:	f240 1111 	movw	r1, #273	; 0x111
 80050a8:	4814      	ldr	r0, [pc, #80]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 80050aa:	f7fc fda7 	bl	8001bfc <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80050ae:	e01b      	b.n	80050e8 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	2305      	movs	r3, #5
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2315      	movs	r3, #21
 80050bc:	2221      	movs	r2, #33	; 0x21
 80050be:	219b      	movs	r1, #155	; 0x9b
 80050c0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80050c4:	f7fc fb2f 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050c8:	490d      	ldr	r1, [pc, #52]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 80050ca:	480c      	ldr	r0, [pc, #48]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 80050cc:	f00c fc8c 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	229d      	movs	r2, #157	; 0x9d
 80050de:	f240 1111 	movw	r1, #273	; 0x111
 80050e2:	4806      	ldr	r0, [pc, #24]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 80050e4:	f7fc fd8a 	bl	8001bfc <EF_PutString>
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08027128 	.word	0x08027128
 80050f4:	200002a8 	.word	0x200002a8
 80050f8:	0801591c 	.word	0x0801591c
 80050fc:	200002c0 	.word	0x200002c0
 8005100:	08015920 	.word	0x08015920

08005104 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800510a:	4875      	ldr	r0, [pc, #468]	; (80052e0 <drawCurrentStateOfLights+0x1dc>)
 800510c:	f7fc fb5c 	bl	80017c8 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005110:	4b74      	ldr	r3, [pc, #464]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01a      	beq.n	800514e <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005118:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	2305      	movs	r3, #5
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2315      	movs	r3, #21
 8005124:	2221      	movs	r2, #33	; 0x21
 8005126:	2141      	movs	r1, #65	; 0x41
 8005128:	20c8      	movs	r0, #200	; 0xc8
 800512a:	f7fc fafc 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800512e:	496e      	ldr	r1, [pc, #440]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 8005130:	486e      	ldr	r0, [pc, #440]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005132:	f00c fc59 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005136:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	2243      	movs	r2, #67	; 0x43
 8005144:	21cb      	movs	r1, #203	; 0xcb
 8005146:	4869      	ldr	r0, [pc, #420]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005148:	f7fc fd58 	bl	8001bfc <EF_PutString>
 800514c:	e019      	b.n	8005182 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800514e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	2305      	movs	r3, #5
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2315      	movs	r3, #21
 800515a:	2221      	movs	r2, #33	; 0x21
 800515c:	2141      	movs	r1, #65	; 0x41
 800515e:	20c8      	movs	r0, #200	; 0xc8
 8005160:	f7fc fae1 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005164:	4962      	ldr	r1, [pc, #392]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 8005166:	4861      	ldr	r0, [pc, #388]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005168:	f00c fc3e 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800516c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	2243      	movs	r2, #67	; 0x43
 800517a:	21cb      	movs	r1, #203	; 0xcb
 800517c:	485b      	ldr	r0, [pc, #364]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800517e:	f7fc fd3d 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8005182:	4b58      	ldr	r3, [pc, #352]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01a      	beq.n	80051c0 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800518a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	2305      	movs	r3, #5
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2315      	movs	r3, #21
 8005196:	2221      	movs	r2, #33	; 0x21
 8005198:	215f      	movs	r1, #95	; 0x5f
 800519a:	20c8      	movs	r0, #200	; 0xc8
 800519c:	f7fc fac3 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80051a0:	4951      	ldr	r1, [pc, #324]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 80051a2:	4852      	ldr	r0, [pc, #328]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051a4:	f00c fc20 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	2261      	movs	r2, #97	; 0x61
 80051b6:	21cb      	movs	r1, #203	; 0xcb
 80051b8:	484c      	ldr	r0, [pc, #304]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051ba:	f7fc fd1f 	bl	8001bfc <EF_PutString>
 80051be:	e019      	b.n	80051f4 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	2305      	movs	r3, #5
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2315      	movs	r3, #21
 80051cc:	2221      	movs	r2, #33	; 0x21
 80051ce:	215f      	movs	r1, #95	; 0x5f
 80051d0:	20c8      	movs	r0, #200	; 0xc8
 80051d2:	f7fc faa8 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051d6:	4946      	ldr	r1, [pc, #280]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 80051d8:	4844      	ldr	r0, [pc, #272]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051da:	f00c fc05 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	2300      	movs	r3, #0
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	2261      	movs	r2, #97	; 0x61
 80051ec:	21cb      	movs	r1, #203	; 0xcb
 80051ee:	483f      	ldr	r0, [pc, #252]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051f0:	f7fc fd04 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80051f4:	4b3b      	ldr	r3, [pc, #236]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	2305      	movs	r3, #5
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2315      	movs	r3, #21
 8005208:	2221      	movs	r2, #33	; 0x21
 800520a:	217d      	movs	r1, #125	; 0x7d
 800520c:	20c8      	movs	r0, #200	; 0xc8
 800520e:	f7fc fa8a 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005212:	4935      	ldr	r1, [pc, #212]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 8005214:	4835      	ldr	r0, [pc, #212]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005216:	f00c fbe7 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800521a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	2300      	movs	r3, #0
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	227f      	movs	r2, #127	; 0x7f
 8005228:	21cb      	movs	r1, #203	; 0xcb
 800522a:	4830      	ldr	r0, [pc, #192]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800522c:	f7fc fce6 	bl	8001bfc <EF_PutString>
 8005230:	e019      	b.n	8005266 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005232:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	2305      	movs	r3, #5
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2315      	movs	r3, #21
 800523e:	2221      	movs	r2, #33	; 0x21
 8005240:	217d      	movs	r1, #125	; 0x7d
 8005242:	20c8      	movs	r0, #200	; 0xc8
 8005244:	f7fc fa6f 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005248:	4929      	ldr	r1, [pc, #164]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 800524a:	4828      	ldr	r0, [pc, #160]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800524c:	f00c fbcc 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005250:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	2300      	movs	r3, #0
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	227f      	movs	r2, #127	; 0x7f
 800525e:	21cb      	movs	r1, #203	; 0xcb
 8005260:	4822      	ldr	r0, [pc, #136]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005262:	f7fc fccb 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 8005268:	78db      	ldrb	r3, [r3, #3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01a      	beq.n	80052a4 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800526e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	2305      	movs	r3, #5
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2315      	movs	r3, #21
 800527a:	2221      	movs	r2, #33	; 0x21
 800527c:	219b      	movs	r1, #155	; 0x9b
 800527e:	20c8      	movs	r0, #200	; 0xc8
 8005280:	f7fc fa51 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005284:	4918      	ldr	r1, [pc, #96]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 8005286:	4819      	ldr	r0, [pc, #100]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005288:	f00c fbae 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800528c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	2300      	movs	r3, #0
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2300      	movs	r3, #0
 8005298:	229d      	movs	r2, #157	; 0x9d
 800529a:	21cb      	movs	r1, #203	; 0xcb
 800529c:	4813      	ldr	r0, [pc, #76]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800529e:	f7fc fcad 	bl	8001bfc <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80052a2:	e019      	b.n	80052d8 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2305      	movs	r3, #5
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2315      	movs	r3, #21
 80052b0:	2221      	movs	r2, #33	; 0x21
 80052b2:	219b      	movs	r1, #155	; 0x9b
 80052b4:	20c8      	movs	r0, #200	; 0xc8
 80052b6:	f7fc fa36 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80052ba:	490d      	ldr	r1, [pc, #52]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80052be:	f00c fb93 	bl	80119e8 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	2300      	movs	r3, #0
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	229d      	movs	r2, #157	; 0x9d
 80052d0:	21cb      	movs	r1, #203	; 0xcb
 80052d2:	4806      	ldr	r0, [pc, #24]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80052d4:	f7fc fc92 	bl	8001bfc <EF_PutString>
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	08027128 	.word	0x08027128
 80052e4:	200002ac 	.word	0x200002ac
 80052e8:	0801591c 	.word	0x0801591c
 80052ec:	200002c0 	.word	0x200002c0
 80052f0:	08015920 	.word	0x08015920

080052f4 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	f107 030c 	add.w	r3, r7, #12
 8005306:	2100      	movs	r1, #0
 8005308:	460a      	mov	r2, r1
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	460a      	mov	r2, r1
 800530e:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005310:	f107 0208 	add.w	r2, r7, #8
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7fd fd09 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800531e:	7a3b      	ldrb	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <restoreTFTScheduleDayOfWeek+0x3a>
 8005324:	2101      	movs	r1, #1
 8005326:	2001      	movs	r0, #1
 8005328:	f001 fae2 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800532c:	e003      	b.n	8005336 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800532e:	2100      	movs	r1, #0
 8005330:	2001      	movs	r0, #1
 8005332:	f001 fadd 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005336:	7a7b      	ldrb	r3, [r7, #9]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <restoreTFTScheduleDayOfWeek+0x52>
 800533c:	2101      	movs	r1, #1
 800533e:	2002      	movs	r0, #2
 8005340:	f001 fad6 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8005344:	e003      	b.n	800534e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005346:	2100      	movs	r1, #0
 8005348:	2002      	movs	r0, #2
 800534a:	f001 fad1 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800534e:	7abb      	ldrb	r3, [r7, #10]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <restoreTFTScheduleDayOfWeek+0x6a>
 8005354:	2101      	movs	r1, #1
 8005356:	2003      	movs	r0, #3
 8005358:	f001 faca 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800535c:	e003      	b.n	8005366 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800535e:	2100      	movs	r1, #0
 8005360:	2003      	movs	r0, #3
 8005362:	f001 fac5 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <restoreTFTScheduleDayOfWeek+0x82>
 800536c:	2101      	movs	r1, #1
 800536e:	2004      	movs	r0, #4
 8005370:	f001 fabe 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8005374:	e003      	b.n	800537e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005376:	2100      	movs	r1, #0
 8005378:	2004      	movs	r0, #4
 800537a:	f001 fab9 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800537e:	7b3b      	ldrb	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <restoreTFTScheduleDayOfWeek+0x9a>
 8005384:	2101      	movs	r1, #1
 8005386:	2005      	movs	r0, #5
 8005388:	f001 fab2 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800538c:	e003      	b.n	8005396 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800538e:	2100      	movs	r1, #0
 8005390:	2005      	movs	r0, #5
 8005392:	f001 faad 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005396:	7b7b      	ldrb	r3, [r7, #13]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <restoreTFTScheduleDayOfWeek+0xb2>
 800539c:	2101      	movs	r1, #1
 800539e:	2006      	movs	r0, #6
 80053a0:	f001 faa6 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80053a4:	e003      	b.n	80053ae <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80053a6:	2100      	movs	r1, #0
 80053a8:	2006      	movs	r0, #6
 80053aa:	f001 faa1 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <restoreTFTScheduleDayOfWeek+0xca>
 80053b4:	2101      	movs	r1, #1
 80053b6:	2007      	movs	r0, #7
 80053b8:	f001 fa9a 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80053bc:	e003      	b.n	80053c6 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80053be:	2100      	movs	r1, #0
 80053c0:	2007      	movs	r0, #7
 80053c2:	f001 fa95 	bl	80068f0 <changeTFTScheduleDayOfWeek>
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80053e6:	f107 020c 	add.w	r2, r7, #12
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fd fd1a 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80053f4:	7b3b      	ldrb	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <restoreTFTScheduleRelayLights+0x36>
 80053fa:	2101      	movs	r1, #1
 80053fc:	2001      	movs	r0, #1
 80053fe:	f001 fb54 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005402:	e003      	b.n	800540c <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 8005404:	2100      	movs	r1, #0
 8005406:	2001      	movs	r0, #1
 8005408:	f001 fb4f 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 800540c:	7b7b      	ldrb	r3, [r7, #13]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <restoreTFTScheduleRelayLights+0x4e>
 8005412:	2101      	movs	r1, #1
 8005414:	2002      	movs	r0, #2
 8005416:	f001 fb48 	bl	8006aaa <changeTFTScheduleRelayLights>
 800541a:	e003      	b.n	8005424 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 800541c:	2100      	movs	r1, #0
 800541e:	2002      	movs	r0, #2
 8005420:	f001 fb43 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <restoreTFTScheduleRelayLights+0x66>
 800542a:	2101      	movs	r1, #1
 800542c:	2003      	movs	r0, #3
 800542e:	f001 fb3c 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005432:	e003      	b.n	800543c <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005434:	2100      	movs	r1, #0
 8005436:	2003      	movs	r0, #3
 8005438:	f001 fb37 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <restoreTFTScheduleRelayLights+0x7e>
 8005442:	2101      	movs	r1, #1
 8005444:	2004      	movs	r0, #4
 8005446:	f001 fb30 	bl	8006aaa <changeTFTScheduleRelayLights>
 800544a:	e003      	b.n	8005454 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 800544c:	2100      	movs	r1, #0
 800544e:	2004      	movs	r0, #4
 8005450:	f001 fb2b 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005454:	7c3b      	ldrb	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <restoreTFTScheduleRelayLights+0x96>
 800545a:	2101      	movs	r1, #1
 800545c:	2005      	movs	r0, #5
 800545e:	f001 fb24 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005462:	e003      	b.n	800546c <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005464:	2100      	movs	r1, #0
 8005466:	2005      	movs	r0, #5
 8005468:	f001 fb1f 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 800546c:	7c7b      	ldrb	r3, [r7, #17]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <restoreTFTScheduleRelayLights+0xae>
 8005472:	2101      	movs	r1, #1
 8005474:	2006      	movs	r0, #6
 8005476:	f001 fb18 	bl	8006aaa <changeTFTScheduleRelayLights>
 800547a:	e003      	b.n	8005484 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 800547c:	2100      	movs	r1, #0
 800547e:	2006      	movs	r0, #6
 8005480:	f001 fb13 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005484:	7cbb      	ldrb	r3, [r7, #18]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <restoreTFTScheduleRelayLights+0xc6>
 800548a:	2101      	movs	r1, #1
 800548c:	2007      	movs	r0, #7
 800548e:	f001 fb0c 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005492:	e003      	b.n	800549c <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005494:	2100      	movs	r1, #0
 8005496:	2007      	movs	r0, #7
 8005498:	f001 fb07 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <restoreTFTScheduleRelayLights+0xde>
 80054a2:	2101      	movs	r1, #1
 80054a4:	2008      	movs	r0, #8
 80054a6:	f001 fb00 	bl	8006aaa <changeTFTScheduleRelayLights>
 80054aa:	e003      	b.n	80054b4 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80054ac:	2100      	movs	r1, #0
 80054ae:	2008      	movs	r0, #8
 80054b0:	f001 fafb 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80054b4:	7d3b      	ldrb	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <restoreTFTScheduleRelayLights+0xf6>
 80054ba:	2101      	movs	r1, #1
 80054bc:	2009      	movs	r0, #9
 80054be:	f001 faf4 	bl	8006aaa <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80054c2:	e003      	b.n	80054cc <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80054c4:	2100      	movs	r1, #0
 80054c6:	2009      	movs	r0, #9
 80054c8:	f001 faef 	bl	8006aaa <changeTFTScheduleRelayLights>
}
 80054cc:	bf00      	nop
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80054dc:	bf00      	nop
 80054de:	f004 fda7 	bl	800a030 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <initWait+0x28>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d2f6      	bcs.n	80054de <initWait+0xa>
    {
    }
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000250 	.word	0x20000250

08005500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005506:	f107 0314 	add.w	r3, r7, #20
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <MX_GPIO_Init+0x198>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	4a5e      	ldr	r2, [pc, #376]	; (8005698 <MX_GPIO_Init+0x198>)
 8005520:	f043 0304 	orr.w	r3, r3, #4
 8005524:	6313      	str	r3, [r2, #48]	; 0x30
 8005526:	4b5c      	ldr	r3, [pc, #368]	; (8005698 <MX_GPIO_Init+0x198>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b58      	ldr	r3, [pc, #352]	; (8005698 <MX_GPIO_Init+0x198>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4a57      	ldr	r2, [pc, #348]	; (8005698 <MX_GPIO_Init+0x198>)
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	6313      	str	r3, [r2, #48]	; 0x30
 8005542:	4b55      	ldr	r3, [pc, #340]	; (8005698 <MX_GPIO_Init+0x198>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b51      	ldr	r3, [pc, #324]	; (8005698 <MX_GPIO_Init+0x198>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	4a50      	ldr	r2, [pc, #320]	; (8005698 <MX_GPIO_Init+0x198>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
 800555e:	4b4e      	ldr	r3, [pc, #312]	; (8005698 <MX_GPIO_Init+0x198>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	4b4a      	ldr	r3, [pc, #296]	; (8005698 <MX_GPIO_Init+0x198>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a49      	ldr	r2, [pc, #292]	; (8005698 <MX_GPIO_Init+0x198>)
 8005574:	f043 0302 	orr.w	r3, r3, #2
 8005578:	6313      	str	r3, [r2, #48]	; 0x30
 800557a:	4b47      	ldr	r3, [pc, #284]	; (8005698 <MX_GPIO_Init+0x198>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005586:	2200      	movs	r2, #0
 8005588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800558c:	4843      	ldr	r0, [pc, #268]	; (800569c <MX_GPIO_Init+0x19c>)
 800558e:	f005 fccb 	bl	800af28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005592:	2200      	movs	r2, #0
 8005594:	f247 4102 	movw	r1, #29698	; 0x7402
 8005598:	4841      	ldr	r0, [pc, #260]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 800559a:	f005 fcc5 	bl	800af28 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 800559e:	2200      	movs	r2, #0
 80055a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055a4:	483f      	ldr	r0, [pc, #252]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 80055a6:	f005 fcbf 	bl	800af28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80055aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b0:	2301      	movs	r3, #1
 80055b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b8:	2300      	movs	r3, #0
 80055ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	4619      	mov	r1, r3
 80055c2:	4836      	ldr	r0, [pc, #216]	; (800569c <MX_GPIO_Init+0x19c>)
 80055c4:	f005 fb14 	bl	800abf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 80055c8:	2310      	movs	r3, #16
 80055ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80055cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80055d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	4831      	ldr	r0, [pc, #196]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 80055de:	f005 fb07 	bl	800abf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 80055e2:	f247 4302 	movw	r3, #29698	; 0x7402
 80055e6:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e8:	2301      	movs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4619      	mov	r1, r3
 80055fa:	4829      	ldr	r0, [pc, #164]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 80055fc:	f005 faf8 	bl	800abf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005600:	2304      	movs	r3, #4
 8005602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005604:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	4619      	mov	r1, r3
 8005614:	4822      	ldr	r0, [pc, #136]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 8005616:	f005 faeb 	bl	800abf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	4619      	mov	r1, r3
 800562e:	481c      	ldr	r0, [pc, #112]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 8005630:	f005 fade 	bl	800abf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800563a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800563e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005644:	f107 0314 	add.w	r3, r7, #20
 8005648:	4619      	mov	r1, r3
 800564a:	4816      	ldr	r0, [pc, #88]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 800564c:	f005 fad0 	bl	800abf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005656:	2301      	movs	r3, #1
 8005658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005662:	f107 0314 	add.w	r3, r7, #20
 8005666:	4619      	mov	r1, r3
 8005668:	480e      	ldr	r0, [pc, #56]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 800566a:	f005 fac1 	bl	800abf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800566e:	2200      	movs	r2, #0
 8005670:	2100      	movs	r1, #0
 8005672:	2008      	movs	r0, #8
 8005674:	f004 fe4b 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005678:	2008      	movs	r0, #8
 800567a:	f004 fe64 	bl	800a346 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800567e:	2200      	movs	r2, #0
 8005680:	2100      	movs	r1, #0
 8005682:	2017      	movs	r0, #23
 8005684:	f004 fe43 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005688:	2017      	movs	r0, #23
 800568a:	f004 fe5c 	bl	800a346 <HAL_NVIC_EnableIRQ>

}
 800568e:	bf00      	nop
 8005690:	3728      	adds	r7, #40	; 0x28
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800
 800569c:	40020800 	.word	0x40020800
 80056a0:	40020400 	.word	0x40020400
 80056a4:	40020000 	.word	0x40020000

080056a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <MX_I2C1_Init+0x54>)
 80056b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80056b2:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <MX_I2C1_Init+0x58>)
 80056b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056be:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056da:	2200      	movs	r2, #0
 80056dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056e4:	4804      	ldr	r0, [pc, #16]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056e6:	f005 fc6b 	bl	800afc0 <HAL_I2C_Init>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80056f0:	f000 fa82 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80056f4:	bf00      	nop
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	2000043c 	.word	0x2000043c
 80056fc:	40005400 	.word	0x40005400
 8005700:	00061a80 	.word	0x00061a80

08005704 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <MX_I2C3_Init+0x50>)
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <MX_I2C3_Init+0x54>)
 800570c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <MX_I2C3_Init+0x50>)
 8005710:	4a12      	ldr	r2, [pc, #72]	; (800575c <MX_I2C3_Init+0x58>)
 8005712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <MX_I2C3_Init+0x50>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <MX_I2C3_Init+0x50>)
 800571c:	2200      	movs	r2, #0
 800571e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <MX_I2C3_Init+0x50>)
 8005722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005726:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <MX_I2C3_Init+0x50>)
 800572a:	2200      	movs	r2, #0
 800572c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <MX_I2C3_Init+0x50>)
 8005730:	2200      	movs	r2, #0
 8005732:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <MX_I2C3_Init+0x50>)
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <MX_I2C3_Init+0x50>)
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005740:	4804      	ldr	r0, [pc, #16]	; (8005754 <MX_I2C3_Init+0x50>)
 8005742:	f005 fc3d 	bl	800afc0 <HAL_I2C_Init>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800574c:	f000 fa54 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005750:	bf00      	nop
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000388 	.word	0x20000388
 8005758:	40005c00 	.word	0x40005c00
 800575c:	000186a0 	.word	0x000186a0

08005760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a74      	ldr	r2, [pc, #464]	; (8005950 <HAL_I2C_MspInit+0x1f0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f040 8091 	bne.w	80058a6 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	4b72      	ldr	r3, [pc, #456]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	4a71      	ldr	r2, [pc, #452]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	6313      	str	r3, [r2, #48]	; 0x30
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 80057a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80057a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057a6:	2312      	movs	r3, #18
 80057a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ae:	2303      	movs	r3, #3
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057b2:	2304      	movs	r3, #4
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b6:	f107 031c 	add.w	r3, r7, #28
 80057ba:	4619      	mov	r1, r3
 80057bc:	4866      	ldr	r0, [pc, #408]	; (8005958 <HAL_I2C_MspInit+0x1f8>)
 80057be:	f005 fa17 	bl	800abf0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	4a62      	ldr	r2, [pc, #392]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80057cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d0:	6413      	str	r3, [r2, #64]	; 0x40
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80057de:	4b5f      	ldr	r3, [pc, #380]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057e0:	4a5f      	ldr	r2, [pc, #380]	; (8005960 <HAL_I2C_MspInit+0x200>)
 80057e2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80057e4:	4b5d      	ldr	r3, [pc, #372]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057ec:	4b5b      	ldr	r3, [pc, #364]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057f2:	4b5a      	ldr	r3, [pc, #360]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057f8:	4b58      	ldr	r3, [pc, #352]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005800:	4b56      	ldr	r3, [pc, #344]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005802:	2200      	movs	r2, #0
 8005804:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005806:	4b55      	ldr	r3, [pc, #340]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005808:	2200      	movs	r2, #0
 800580a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800580c:	4b53      	ldr	r3, [pc, #332]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 800580e:	2200      	movs	r2, #0
 8005810:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005812:	4b52      	ldr	r3, [pc, #328]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005814:	2200      	movs	r2, #0
 8005816:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005818:	4b50      	ldr	r3, [pc, #320]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 800581a:	2200      	movs	r2, #0
 800581c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800581e:	484f      	ldr	r0, [pc, #316]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005820:	f004 fdd6 	bl	800a3d0 <HAL_DMA_Init>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800582a:	f000 f9e5 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4a      	ldr	r2, [pc, #296]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
 8005834:	4a49      	ldr	r2, [pc, #292]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800583a:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800583c:	4a4a      	ldr	r2, [pc, #296]	; (8005968 <HAL_I2C_MspInit+0x208>)
 800583e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005840:	4b48      	ldr	r3, [pc, #288]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800584c:	4b45      	ldr	r3, [pc, #276]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800584e:	2200      	movs	r2, #0
 8005850:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005852:	4b44      	ldr	r3, [pc, #272]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005858:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800585a:	4b42      	ldr	r3, [pc, #264]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800585c:	2200      	movs	r2, #0
 800585e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005860:	4b40      	ldr	r3, [pc, #256]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005862:	2200      	movs	r2, #0
 8005864:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005866:	4b3f      	ldr	r3, [pc, #252]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005868:	2200      	movs	r2, #0
 800586a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800586c:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800586e:	2200      	movs	r2, #0
 8005870:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005872:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005874:	2200      	movs	r2, #0
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005878:	483a      	ldr	r0, [pc, #232]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800587a:	f004 fda9 	bl	800a3d0 <HAL_DMA_Init>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005884:	f000 f9b8 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a36      	ldr	r2, [pc, #216]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800588c:	635a      	str	r2, [r3, #52]	; 0x34
 800588e:	4a35      	ldr	r2, [pc, #212]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	2020      	movs	r0, #32
 800589a:	f004 fd38 	bl	800a30e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800589e:	2020      	movs	r0, #32
 80058a0:	f004 fd51 	bl	800a346 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80058a4:	e050      	b.n	8005948 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a30      	ldr	r2, [pc, #192]	; (800596c <HAL_I2C_MspInit+0x20c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d14b      	bne.n	8005948 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	4a26      	ldr	r2, [pc, #152]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6313      	str	r3, [r2, #48]	; 0x30
 80058c0:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058d6:	f043 0302 	orr.w	r3, r3, #2
 80058da:	6313      	str	r3, [r2, #48]	; 0x30
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 80058e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058ee:	2312      	movs	r3, #18
 80058f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f6:	2303      	movs	r3, #3
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80058fa:	2304      	movs	r3, #4
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80058fe:	f107 031c 	add.w	r3, r7, #28
 8005902:	4619      	mov	r1, r3
 8005904:	481a      	ldr	r0, [pc, #104]	; (8005970 <HAL_I2C_MspInit+0x210>)
 8005906:	f005 f973 	bl	800abf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 800590a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800590e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005910:	2312      	movs	r3, #18
 8005912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005918:	2303      	movs	r3, #3
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800591c:	2309      	movs	r3, #9
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	4619      	mov	r1, r3
 8005926:	480c      	ldr	r0, [pc, #48]	; (8005958 <HAL_I2C_MspInit+0x1f8>)
 8005928:	f005 f962 	bl	800abf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800592c:	2300      	movs	r3, #0
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	4a07      	ldr	r2, [pc, #28]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 8005936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800593a:	6413      	str	r3, [r2, #64]	; 0x40
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	3730      	adds	r7, #48	; 0x30
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40005400 	.word	0x40005400
 8005954:	40023800 	.word	0x40023800
 8005958:	40020400 	.word	0x40020400
 800595c:	20000490 	.word	0x20000490
 8005960:	40026010 	.word	0x40026010
 8005964:	200003dc 	.word	0x200003dc
 8005968:	40026028 	.word	0x40026028
 800596c:	40005c00 	.word	0x40005c00
 8005970:	40020000 	.word	0x40020000

08005974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800597a:	f004 faf3 	bl	8009f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800597e:	f000 f865 	bl	8005a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005982:	f7ff fdbd 	bl	8005500 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005986:	f003 faf5 	bl	8008f74 <MX_SPI1_Init>
  MX_DMA_Init();
 800598a:	f7fc fe1f 	bl	80025cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800598e:	f004 f923 	bl	8009bd8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005992:	f003 fb25 	bl	8008fe0 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005996:	f7ff fe87 	bl	80056a8 <MX_I2C1_Init>
  MX_TIM11_Init();
 800599a:	f003 fe9f 	bl	80096dc <MX_TIM11_Init>
  MX_TIM10_Init();
 800599e:	f003 fe79 	bl	8009694 <MX_TIM10_Init>
  MX_I2C3_Init();
 80059a2:	f7ff feaf 	bl	8005704 <MX_I2C3_Init>
  MX_SPI5_Init();
 80059a6:	f003 fb51 	bl	800904c <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80059aa:	f004 f8eb 	bl	8009b84 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80059ae:	f003 fe1d 	bl	80095ec <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80059b2:	f000 f8b3 	bl	8005b1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80059b6:	481d      	ldr	r0, [pc, #116]	; (8005a2c <main+0xb8>)
 80059b8:	f009 fcb2 	bl	800f320 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80059bc:	481c      	ldr	r0, [pc, #112]	; (8005a30 <main+0xbc>)
 80059be:	f7fc fb65 	bl	800208c <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 80059c2:	491c      	ldr	r1, [pc, #112]	; (8005a34 <main+0xc0>)
 80059c4:	481c      	ldr	r0, [pc, #112]	; (8005a38 <main+0xc4>)
 80059c6:	f004 f88e 	bl	8009ae6 <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 80059ca:	491c      	ldr	r1, [pc, #112]	; (8005a3c <main+0xc8>)
 80059cc:	481c      	ldr	r0, [pc, #112]	; (8005a40 <main+0xcc>)
 80059ce:	f004 f88a 	bl	8009ae6 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80059d2:	2117      	movs	r1, #23
 80059d4:	481b      	ldr	r0, [pc, #108]	; (8005a44 <main+0xd0>)
 80059d6:	f7fc fda9 	bl	800252c <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 80059da:	481b      	ldr	r0, [pc, #108]	; (8005a48 <main+0xd4>)
 80059dc:	f7fc fe4c 	bl	8002678 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f7fc fea3 	bl	800272c <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7fc fec0 	bl	800276c <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 80059f0:	1dfb      	adds	r3, r7, #7
 80059f2:	2201      	movs	r2, #1
 80059f4:	4619      	mov	r1, r3
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7fd f804 	bl	8002a04 <eeprom_read>
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80059fc:	480e      	ldr	r0, [pc, #56]	; (8005a38 <main+0xc4>)
 80059fe:	f004 f825 	bl	8009a4c <UARTDMA_IsDataReceivedReady>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <main+0x9a>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <main+0xc4>)
 8005a0a:	f002 fddb 	bl	80085c4 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005a0e:	480a      	ldr	r0, [pc, #40]	; (8005a38 <main+0xc4>)
 8005a10:	f004 f82e 	bl	8009a70 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8005a14:	480a      	ldr	r0, [pc, #40]	; (8005a40 <main+0xcc>)
 8005a16:	f004 f819 	bl	8009a4c <UARTDMA_IsDataReceivedReady>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8005a1a:	4809      	ldr	r0, [pc, #36]	; (8005a40 <main+0xcc>)
 8005a1c:	f004 f828 	bl	8009a70 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8005a20:	f7fc fcb2 	bl	8002388 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005a24:	f000 f924 	bl	8005c70 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005a28:	e7e8      	b.n	80059fc <main+0x88>
 8005a2a:	bf00      	nop
 8005a2c:	200009d8 	.word	0x200009d8
 8005a30:	20000938 	.word	0x20000938
 8005a34:	20000c2c 	.word	0x20000c2c
 8005a38:	200004f0 	.word	0x200004f0
 8005a3c:	20000be8 	.word	0x20000be8
 8005a40:	200006bc 	.word	0x200006bc
 8005a44:	200008e0 	.word	0x200008e0
 8005a48:	2000043c 	.word	0x2000043c

08005a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b094      	sub	sp, #80	; 0x50
 8005a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a52:	f107 0320 	add.w	r3, r7, #32
 8005a56:	2230      	movs	r2, #48	; 0x30
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f00b f93c 	bl	8010cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <SystemClock_Config+0xc8>)
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <SystemClock_Config+0xc8>)
 8005a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a80:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <SystemClock_Config+0xc8>)
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <SystemClock_Config+0xcc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <SystemClock_Config+0xcc>)
 8005a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <SystemClock_Config+0xcc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005abc:	230c      	movs	r3, #12
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005ac0:	2360      	movs	r3, #96	; 0x60
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005acc:	f107 0320 	add.w	r3, r7, #32
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f008 fb79 	bl	800e1c8 <HAL_RCC_OscConfig>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005adc:	f000 f88c 	bl	8005bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ae0:	230f      	movs	r3, #15
 8005ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005af6:	f107 030c 	add.w	r3, r7, #12
 8005afa:	2103      	movs	r1, #3
 8005afc:	4618      	mov	r0, r3
 8005afe:	f008 fddb 	bl	800e6b8 <HAL_RCC_ClockConfig>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005b08:	f000 f876 	bl	8005bf8 <Error_Handler>
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3750      	adds	r7, #80	; 0x50
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40007000 	.word	0x40007000

08005b1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005b20:	2200      	movs	r2, #0
 8005b22:	2100      	movs	r1, #0
 8005b24:	200a      	movs	r0, #10
 8005b26:	f004 fbf2 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005b2a:	200a      	movs	r0, #10
 8005b2c:	f004 fc0b 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	201f      	movs	r0, #31
 8005b36:	f004 fbea 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005b3a:	201f      	movs	r0, #31
 8005b3c:	f004 fc03 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	2026      	movs	r0, #38	; 0x26
 8005b46:	f004 fbe2 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b4a:	2026      	movs	r0, #38	; 0x26
 8005b4c:	f004 fbfb 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	2033      	movs	r0, #51	; 0x33
 8005b56:	f004 fbda 	bl	800a30e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005b5a:	2033      	movs	r0, #51	; 0x33
 8005b5c:	f004 fbf3 	bl	800a346 <HAL_NVIC_EnableIRQ>
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005b76:	f7ff f8e3 	bl	8004d40 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d117      	bne.n	8005bb4 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d90d      	bls.n	8005ba8 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b90:	480d      	ldr	r0, [pc, #52]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005b92:	f005 f9e2 	bl	800af5a <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7ff f95e 	bl	8004e58 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005ba2:	480a      	ldr	r0, [pc, #40]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005ba4:	f009 fc1e 	bl	800f3e4 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005bb2:	701a      	strb	r2, [r3, #0]
	}
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	20000254 	.word	0x20000254
 8005bc8:	40020800 	.word	0x40020800
 8005bcc:	20000990 	.word	0x20000990

08005bd0 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be0:	d101      	bne.n	8005be6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005be2:	f7fc fc97 	bl	8002514 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d101      	bne.n	8005bf0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005bec:	f7fc fe02 	bl	80027f4 <DS3231_ClearAlarm2Flag>

	}
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005bfe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005c02:	f7fc f9e5 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005c06:	4814      	ldr	r0, [pc, #80]	; (8005c58 <Error_Handler+0x60>)
 8005c08:	f7fb fdde 	bl	80017c8 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005c0c:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <Error_Handler+0x64>)
 8005c0e:	4914      	ldr	r1, [pc, #80]	; (8005c60 <Error_Handler+0x68>)
 8005c10:	4814      	ldr	r0, [pc, #80]	; (8005c64 <Error_Handler+0x6c>)
 8005c12:	f00b fee9 	bl	80119e8 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005c16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	2300      	movs	r3, #0
 8005c22:	2214      	movs	r2, #20
 8005c24:	210a      	movs	r1, #10
 8005c26:	480f      	ldr	r0, [pc, #60]	; (8005c64 <Error_Handler+0x6c>)
 8005c28:	f7fb ffe8 	bl	8001bfc <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005c2c:	f240 1345 	movw	r3, #325	; 0x145
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <Error_Handler+0x70>)
 8005c32:	490e      	ldr	r1, [pc, #56]	; (8005c6c <Error_Handler+0x74>)
 8005c34:	480b      	ldr	r0, [pc, #44]	; (8005c64 <Error_Handler+0x6c>)
 8005c36:	f00b fed7 	bl	80119e8 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005c3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	2301      	movs	r3, #1
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	2232      	movs	r2, #50	; 0x32
 8005c48:	210a      	movs	r1, #10
 8005c4a:	4806      	ldr	r0, [pc, #24]	; (8005c64 <Error_Handler+0x6c>)
 8005c4c:	f7fb ffd6 	bl	8001bfc <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c50:	b672      	cpsid	i
}
 8005c52:	bf00      	nop

  __disable_irq();

  while (1)
 8005c54:	e7fe      	b.n	8005c54 <Error_Handler+0x5c>
 8005c56:	bf00      	nop
 8005c58:	08027128 	.word	0x08027128
 8005c5c:	08015b34 	.word	0x08015b34
 8005c60:	08015b48 	.word	0x08015b48
 8005c64:	200002c0 	.word	0x200002c0
 8005c68:	08026658 	.word	0x08026658
 8005c6c:	08015b60 	.word	0x08015b60

08005c70 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	switch(State)
 8005c74:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <MenuTFT+0x144>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	f200 8098 	bhi.w	8005dae <MenuTFT+0x13e>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <MenuTFT+0x14>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cbb 	.word	0x08005cbb
 8005c8c:	08005cef 	.word	0x08005cef
 8005c90:	08005d1f 	.word	0x08005d1f
 8005c94:	08005d3d 	.word	0x08005d3d
 8005c98:	08005d07 	.word	0x08005d07
 8005c9c:	08005d55 	.word	0x08005d55
 8005ca0:	08005d73 	.word	0x08005d73
 8005ca4:	08005d91 	.word	0x08005d91
	{
	case MENUTFT_INIT:
		system_init();
 8005ca8:	f7fd fab0 	bl	800320c <system_init>
		State = MENUTFT_PARAMETERS;
 8005cac:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <MenuTFT+0x144>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005cb2:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <MenuTFT+0x148>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
		break;
 8005cb8:	e079      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005cba:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <MenuTFT+0x148>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d112      	bne.n	8005ce8 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <MenuTFT+0x14c>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <MenuTFT+0x150>)
 8005cca:	ed93 7a00 	vldr	s14, [r3]
 8005cce:	eeb0 1a47 	vmov.f32	s2, s14
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005dc4 <MenuTFT+0x154>
 8005cda:	eeb0 0a67 	vmov.f32	s0, s15
 8005cde:	f7fd fc13 	bl	8003508 <showCurrentParameters>
			StateChangeFlag = 0;
 8005ce2:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <MenuTFT+0x148>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005ce8:	f000 f874 	bl	8005dd4 <TouchParametersActivity>
		break;
 8005cec:	e05f      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005cee:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <MenuTFT+0x148>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d104      	bne.n	8005d00 <MenuTFT+0x90>
		{
			showControlPanel();
 8005cf6:	f7fd fd51 	bl	800379c <showControlPanel>
			StateChangeFlag = 0;
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <MenuTFT+0x148>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005d00:	f000 f8c8 	bl	8005e94 <TouchSwitchActivity>
		break;
 8005d04:	e053      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005d06:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <MenuTFT+0x148>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d104      	bne.n	8005d18 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005d0e:	f7fd fe1f 	bl	8003950 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005d12:	4b29      	ldr	r3, [pc, #164]	; (8005db8 <MenuTFT+0x148>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005d18:	f000 f92e 	bl	8005f78 <TouchLightsActivity>
		break;
 8005d1c:	e047      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005d1e:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <MenuTFT+0x148>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d107      	bne.n	8005d36 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005d26:	f7fd feeb 	bl	8003b00 <showClockSetPanel>
			ClockChangeFlag = 1;
 8005d2a:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <MenuTFT+0x158>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d30:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <MenuTFT+0x148>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005d36:	f000 f98f 	bl	8006058 <TouchClockActivity>
		break;
 8005d3a:	e038      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <MenuTFT+0x148>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d104      	bne.n	8005d4e <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005d44:	f7fe f844 	bl	8003dd0 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005d48:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <MenuTFT+0x148>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005d4e:	f000 fa47 	bl	80061e0 <TouchPredefinedActivityActivity>
		break;
 8005d52:	e02c      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005d54:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <MenuTFT+0x148>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d107      	bne.n	8005d6c <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005d5c:	f7fe f948 	bl	8003ff0 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <MenuTFT+0x15c>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <MenuTFT+0x148>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005d6c:	f000 fa82 	bl	8006274 <TouchWSLedActivity>
		break;
 8005d70:	e01d      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <MenuTFT+0x148>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005d7a:	f7fe fed5 	bl	8004b28 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005d7e:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <MenuTFT+0x160>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <MenuTFT+0x148>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005d8a:	f000 fadf 	bl	800634c <Schedule1Activity>
		break;
 8005d8e:	e00e      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <MenuTFT+0x148>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005d98:	f7fe ff5a 	bl	8004c50 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <MenuTFT+0x160>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <MenuTFT+0x148>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005da8:	f000 fbd2 	bl	8006550 <Schedule2Activity>
		break;
 8005dac:	bf00      	nop
	}
}
 8005dae:	bf00      	nop
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000290 	.word	0x20000290
 8005db8:	20000255 	.word	0x20000255
 8005dbc:	20000294 	.word	0x20000294
 8005dc0:	2000029c 	.word	0x2000029c
 8005dc4:	00000000 	.word	0x00000000
 8005dc8:	20000256 	.word	0x20000256
 8005dcc:	20000257 	.word	0x20000257
 8005dd0:	20000258 	.word	0x20000258

08005dd4 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005dda:	f7fc fac3 	bl	8002364 <XPT2046_IsTouched>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d04c      	beq.n	8005e7e <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005de4:	f004 f924 	bl	800a030 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <TouchParametersActivity+0xb4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df4:	d343      	bcc.n	8005e7e <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005df6:	1d3a      	adds	r2, r7, #4
 8005df8:	1dbb      	adds	r3, r7, #6
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fa73 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	d90f      	bls.n	8005e28 <TouchParametersActivity+0x54>
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	2b6e      	cmp	r3, #110	; 0x6e
 8005e0c:	d80c      	bhi.n	8005e28 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e0e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e10:	2bd7      	cmp	r3, #215	; 0xd7
 8005e12:	d909      	bls.n	8005e28 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	2bec      	cmp	r3, #236	; 0xec
 8005e18:	d806      	bhi.n	8005e28 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <TouchParametersActivity+0xb8>)
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <TouchParametersActivity+0xbc>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e025      	b.n	8005e74 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	2bdb      	cmp	r3, #219	; 0xdb
 8005e2c:	d910      	bls.n	8005e50 <TouchParametersActivity+0x7c>
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005e34:	d20c      	bcs.n	8005e50 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e36:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e38:	2bd7      	cmp	r3, #215	; 0xd7
 8005e3a:	d909      	bls.n	8005e50 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e3c:	88bb      	ldrh	r3, [r7, #4]
 8005e3e:	2bec      	cmp	r3, #236	; 0xec
 8005e40:	d806      	bhi.n	8005e50 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <TouchParametersActivity+0xb8>)
 8005e44:	2202      	movs	r2, #2
 8005e46:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <TouchParametersActivity+0xbc>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e011      	b.n	8005e74 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	2b77      	cmp	r3, #119	; 0x77
 8005e54:	d90e      	bls.n	8005e74 <TouchParametersActivity+0xa0>
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	2bd2      	cmp	r3, #210	; 0xd2
 8005e5a:	d80b      	bhi.n	8005e74 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e5c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e5e:	2bd7      	cmp	r3, #215	; 0xd7
 8005e60:	d908      	bls.n	8005e74 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e62:	88bb      	ldrh	r3, [r7, #4]
 8005e64:	2bec      	cmp	r3, #236	; 0xec
 8005e66:	d805      	bhi.n	8005e74 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <TouchParametersActivity+0xb8>)
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <TouchParametersActivity+0xbc>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005e74:	f004 f8dc 	bl	800a030 <HAL_GetTick>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4a03      	ldr	r2, [pc, #12]	; (8005e88 <TouchParametersActivity+0xb4>)
 8005e7c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	2000028c 	.word	0x2000028c
 8005e8c:	20000290 	.word	0x20000290
 8005e90:	20000255 	.word	0x20000255

08005e94 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e9a:	f7fc fa63 	bl	8002364 <XPT2046_IsTouched>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d05d      	beq.n	8005f60 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005ea4:	f004 f8c4 	bl	800a030 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <TouchSwitchActivity+0xd4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb4:	d354      	bcc.n	8005f60 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005eb6:	1d3a      	adds	r2, r7, #4
 8005eb8:	1dbb      	adds	r3, r7, #6
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fc fa13 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d90f      	bls.n	8005ee8 <TouchSwitchActivity+0x54>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b6e      	cmp	r3, #110	; 0x6e
 8005ecc:	d80c      	bhi.n	8005ee8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ece:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ed0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ed2:	d909      	bls.n	8005ee8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ed4:	88bb      	ldrh	r3, [r7, #4]
 8005ed6:	2bec      	cmp	r3, #236	; 0xec
 8005ed8:	d806      	bhi.n	8005ee8 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005eda:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <TouchSwitchActivity+0xd8>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ee0:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <TouchSwitchActivity+0xdc>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e036      	b.n	8005f56 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	2bdb      	cmp	r3, #219	; 0xdb
 8005eec:	d910      	bls.n	8005f10 <TouchSwitchActivity+0x7c>
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005ef4:	d20c      	bcs.n	8005f10 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ef6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ef8:	2bd7      	cmp	r3, #215	; 0xd7
 8005efa:	d909      	bls.n	8005f10 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005efc:	88bb      	ldrh	r3, [r7, #4]
 8005efe:	2bec      	cmp	r3, #236	; 0xec
 8005f00:	d806      	bhi.n	8005f10 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <TouchSwitchActivity+0xd8>)
 8005f04:	2205      	movs	r2, #5
 8005f06:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f08:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <TouchSwitchActivity+0xdc>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	e022      	b.n	8005f56 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b77      	cmp	r3, #119	; 0x77
 8005f14:	d90f      	bls.n	8005f36 <TouchSwitchActivity+0xa2>
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	2bd2      	cmp	r3, #210	; 0xd2
 8005f1a:	d80c      	bhi.n	8005f36 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005f1c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005f1e:	2bd7      	cmp	r3, #215	; 0xd7
 8005f20:	d909      	bls.n	8005f36 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005f22:	88bb      	ldrh	r3, [r7, #4]
 8005f24:	2bec      	cmp	r3, #236	; 0xec
 8005f26:	d806      	bhi.n	8005f36 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <TouchSwitchActivity+0xd8>)
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <TouchSwitchActivity+0xdc>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e00f      	b.n	8005f56 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005f3c:	d30b      	bcc.n	8005f56 <TouchSwitchActivity+0xc2>
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005f44:	d207      	bcs.n	8005f56 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005f46:	480b      	ldr	r0, [pc, #44]	; (8005f74 <TouchSwitchActivity+0xe0>)
 8005f48:	f7fb fc3e 	bl	80017c8 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005f4c:	88bb      	ldrh	r3, [r7, #4]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fe55 	bl	8007c00 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005f56:	f004 f86b 	bl	800a030 <HAL_GetTick>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4a02      	ldr	r2, [pc, #8]	; (8005f68 <TouchSwitchActivity+0xd4>)
 8005f5e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2000028c 	.word	0x2000028c
 8005f6c:	20000290 	.word	0x20000290
 8005f70:	20000255 	.word	0x20000255
 8005f74:	08027128 	.word	0x08027128

08005f78 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005f7e:	f7fc f9f1 	bl	8002364 <XPT2046_IsTouched>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d05b      	beq.n	8006040 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f88:	f004 f852 	bl	800a030 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <TouchLightsActivity+0xd0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f98:	d352      	bcc.n	8006040 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005f9a:	1d3a      	adds	r2, r7, #4
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fc f9a1 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d90f      	bls.n	8005fcc <TouchLightsActivity+0x54>
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	2b6e      	cmp	r3, #110	; 0x6e
 8005fb0:	d80c      	bhi.n	8005fcc <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fb4:	2bd7      	cmp	r3, #215	; 0xd7
 8005fb6:	d909      	bls.n	8005fcc <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fb8:	88bb      	ldrh	r3, [r7, #4]
 8005fba:	2bec      	cmp	r3, #236	; 0xec
 8005fbc:	d806      	bhi.n	8005fcc <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <TouchLightsActivity+0xd4>)
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <TouchLightsActivity+0xd8>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e034      	b.n	8006036 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	2bdb      	cmp	r3, #219	; 0xdb
 8005fd0:	d910      	bls.n	8005ff4 <TouchLightsActivity+0x7c>
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005fd8:	d20c      	bcs.n	8005ff4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fda:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fdc:	2bd7      	cmp	r3, #215	; 0xd7
 8005fde:	d909      	bls.n	8005ff4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fe0:	88bb      	ldrh	r3, [r7, #4]
 8005fe2:	2bec      	cmp	r3, #236	; 0xec
 8005fe4:	d806      	bhi.n	8005ff4 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <TouchLightsActivity+0xd4>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fec:	4b18      	ldr	r3, [pc, #96]	; (8006050 <TouchLightsActivity+0xd8>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e020      	b.n	8006036 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b77      	cmp	r3, #119	; 0x77
 8005ff8:	d90f      	bls.n	800601a <TouchLightsActivity+0xa2>
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	2bd2      	cmp	r3, #210	; 0xd2
 8005ffe:	d80c      	bhi.n	800601a <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006000:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006002:	2bd7      	cmp	r3, #215	; 0xd7
 8006004:	d909      	bls.n	800601a <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006006:	88bb      	ldrh	r3, [r7, #4]
 8006008:	2bec      	cmp	r3, #236	; 0xec
 800600a:	d806      	bhi.n	800601a <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 800600c:	4b0f      	ldr	r3, [pc, #60]	; (800604c <TouchLightsActivity+0xd4>)
 800600e:	2206      	movs	r2, #6
 8006010:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <TouchLightsActivity+0xd8>)
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e00d      	b.n	8006036 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	2bc7      	cmp	r3, #199	; 0xc7
 800601e:	d90a      	bls.n	8006036 <TouchLightsActivity+0xbe>
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	2be9      	cmp	r3, #233	; 0xe9
 8006024:	d807      	bhi.n	8006036 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8006026:	480b      	ldr	r0, [pc, #44]	; (8006054 <TouchLightsActivity+0xdc>)
 8006028:	f7fb fbce 	bl	80017c8 <EF_SetFont>
				changeLightsStatusTouch(y);
 800602c:	88bb      	ldrh	r3, [r7, #4]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	4618      	mov	r0, r3
 8006032:	f001 ff5b 	bl	8007eec <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8006036:	f003 fffb 	bl	800a030 <HAL_GetTick>
 800603a:	4603      	mov	r3, r0
 800603c:	4a02      	ldr	r2, [pc, #8]	; (8006048 <TouchLightsActivity+0xd0>)
 800603e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	2000028c 	.word	0x2000028c
 800604c:	20000290 	.word	0x20000290
 8006050:	20000255 	.word	0x20000255
 8006054:	08027128 	.word	0x08027128

08006058 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800605e:	f7fc f981 	bl	8002364 <XPT2046_IsTouched>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80a3 	beq.w	80061b0 <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800606a:	4853      	ldr	r0, [pc, #332]	; (80061b8 <TouchClockActivity+0x160>)
 800606c:	f7fb fbac 	bl	80017c8 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006070:	f003 ffde 	bl	800a030 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	4b51      	ldr	r3, [pc, #324]	; (80061bc <TouchClockActivity+0x164>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006080:	f0c0 8096 	bcc.w	80061b0 <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006084:	1d3a      	adds	r2, r7, #4
 8006086:	1dbb      	adds	r3, r7, #6
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc f92c 	bl	80022e8 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <TouchClockActivity+0x168>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d114      	bne.n	80060c2 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006098:	f7fc fc06 	bl	80028a8 <DS3231_GetHour>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	4b48      	ldr	r3, [pc, #288]	; (80061c4 <TouchClockActivity+0x16c>)
 80060a2:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 80060a4:	f7fc fc0c 	bl	80028c0 <DS3231_GetMinute>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	4b46      	ldr	r3, [pc, #280]	; (80061c8 <TouchClockActivity+0x170>)
 80060ae:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 80060b0:	f7fc fbee 	bl	8002890 <DS3231_GetDayOfWeek>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	4b44      	ldr	r3, [pc, #272]	; (80061cc <TouchClockActivity+0x174>)
 80060ba:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 80060bc:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <TouchClockActivity+0x168>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d90f      	bls.n	80060e8 <TouchClockActivity+0x90>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b6e      	cmp	r3, #110	; 0x6e
 80060cc:	d80c      	bhi.n	80060e8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060ce:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060d0:	2bd7      	cmp	r3, #215	; 0xd7
 80060d2:	d909      	bls.n	80060e8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060d4:	88bb      	ldrh	r3, [r7, #4]
 80060d6:	2bec      	cmp	r3, #236	; 0xec
 80060d8:	d806      	bhi.n	80060e8 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 80060da:	4b3d      	ldr	r3, [pc, #244]	; (80061d0 <TouchClockActivity+0x178>)
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80060e0:	4b3c      	ldr	r3, [pc, #240]	; (80061d4 <TouchClockActivity+0x17c>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e05e      	b.n	80061a6 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	2bdb      	cmp	r3, #219	; 0xdb
 80060ec:	d92c      	bls.n	8006148 <TouchClockActivity+0xf0>
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80060f4:	d228      	bcs.n	8006148 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060f6:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060f8:	2bd7      	cmp	r3, #215	; 0xd7
 80060fa:	d925      	bls.n	8006148 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	2bec      	cmp	r3, #236	; 0xec
 8006100:	d822      	bhi.n	8006148 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 8006102:	4b32      	ldr	r3, [pc, #200]	; (80061cc <TouchClockActivity+0x174>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7fc fbe6 	bl	80028d8 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <TouchClockActivity+0x16c>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fc fbf3 	bl	80028fc <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8006116:	4b2c      	ldr	r3, [pc, #176]	; (80061c8 <TouchClockActivity+0x170>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc fc03 	bl	8002926 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8006120:	2032      	movs	r0, #50	; 0x32
 8006122:	f7fc fc12 	bl	800294a <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8006126:	492c      	ldr	r1, [pc, #176]	; (80061d8 <TouchClockActivity+0x180>)
 8006128:	482c      	ldr	r0, [pc, #176]	; (80061dc <TouchClockActivity+0x184>)
 800612a:	f00b fc5d 	bl	80119e8 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800612e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	2301      	movs	r3, #1
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800613c:	220a      	movs	r2, #10
 800613e:	212f      	movs	r1, #47	; 0x2f
 8006140:	4826      	ldr	r0, [pc, #152]	; (80061dc <TouchClockActivity+0x184>)
 8006142:	f7fb fd5b 	bl	8001bfc <EF_PutString>
 8006146:	e02e      	b.n	80061a6 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	2b6d      	cmp	r3, #109	; 0x6d
 800614c:	d90f      	bls.n	800616e <TouchClockActivity+0x116>
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2bdc      	cmp	r3, #220	; 0xdc
 8006152:	d80c      	bhi.n	800616e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006154:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006156:	2bbd      	cmp	r3, #189	; 0xbd
 8006158:	d909      	bls.n	800616e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800615a:	88bb      	ldrh	r3, [r7, #4]
 800615c:	2bd4      	cmp	r3, #212	; 0xd4
 800615e:	d806      	bhi.n	800616e <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <TouchClockActivity+0x178>)
 8006162:	2207      	movs	r2, #7
 8006164:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <TouchClockActivity+0x17c>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e01b      	b.n	80061a6 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2bef      	cmp	r3, #239	; 0xef
 8006172:	d90a      	bls.n	800618a <TouchClockActivity+0x132>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800617a:	d806      	bhi.n	800618a <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	88ba      	ldrh	r2, [r7, #4]
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fc36 	bl	80079f4 <clockIncreaseOneHourAndMinute>
 8006188:	e00d      	b.n	80061a6 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006190:	d309      	bcc.n	80061a6 <TouchClockActivity+0x14e>
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006198:	d805      	bhi.n	80061a6 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	88ba      	ldrh	r2, [r7, #4]
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fcb5 	bl	8007b10 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 80061a6:	f003 ff43 	bl	800a030 <HAL_GetTick>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4a03      	ldr	r2, [pc, #12]	; (80061bc <TouchClockActivity+0x164>)
 80061ae:	6013      	str	r3, [r2, #0]
			}
		}
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	080290a0 	.word	0x080290a0
 80061bc:	2000028c 	.word	0x2000028c
 80061c0:	20000256 	.word	0x20000256
 80061c4:	20000031 	.word	0x20000031
 80061c8:	20000032 	.word	0x20000032
 80061cc:	20000030 	.word	0x20000030
 80061d0:	20000290 	.word	0x20000290
 80061d4:	20000255 	.word	0x20000255
 80061d8:	08015b78 	.word	0x08015b78
 80061dc:	200002c0 	.word	0x200002c0

080061e0 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 80061e6:	f7fc f8bd 	bl	8002364 <XPT2046_IsTouched>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d034      	beq.n	800625a <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80061f0:	f003 ff1e 	bl	800a030 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <TouchPredefinedActivityActivity+0x84>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006200:	d32b      	bcc.n	800625a <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006202:	1d3a      	adds	r2, r7, #4
 8006204:	1dbb      	adds	r3, r7, #6
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc f86d 	bl	80022e8 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 800620e:	4816      	ldr	r0, [pc, #88]	; (8006268 <TouchPredefinedActivityActivity+0x88>)
 8006210:	f7fb fada 	bl	80017c8 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b09      	cmp	r3, #9
 8006218:	d90f      	bls.n	800623a <TouchPredefinedActivityActivity+0x5a>
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	2b6e      	cmp	r3, #110	; 0x6e
 800621e:	d80c      	bhi.n	800623a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006220:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006222:	2bd7      	cmp	r3, #215	; 0xd7
 8006224:	d909      	bls.n	800623a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006226:	88bb      	ldrh	r3, [r7, #4]
 8006228:	2bec      	cmp	r3, #236	; 0xec
 800622a:	d806      	bhi.n	800623a <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 800622c:	4b0f      	ldr	r3, [pc, #60]	; (800626c <TouchPredefinedActivityActivity+0x8c>)
 800622e:	2202      	movs	r2, #2
 8006230:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <TouchPredefinedActivityActivity+0x90>)
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e00a      	b.n	8006250 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	2b63      	cmp	r3, #99	; 0x63
 800623e:	d907      	bls.n	8006250 <TouchPredefinedActivityActivity+0x70>
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	2bdc      	cmp	r3, #220	; 0xdc
 8006244:	d804      	bhi.n	8006250 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 8006246:	88bb      	ldrh	r3, [r7, #4]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	4618      	mov	r0, r3
 800624c:	f001 ffb4 	bl	80081b8 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 8006250:	f003 feee 	bl	800a030 <HAL_GetTick>
 8006254:	4603      	mov	r3, r0
 8006256:	4a03      	ldr	r2, [pc, #12]	; (8006264 <TouchPredefinedActivityActivity+0x84>)
 8006258:	6013      	str	r3, [r2, #0]
		}
	}
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	2000028c 	.word	0x2000028c
 8006268:	08027128 	.word	0x08027128
 800626c:	20000290 	.word	0x20000290
 8006270:	20000255 	.word	0x20000255

08006274 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800627a:	f7fc f873 	bl	8002364 <XPT2046_IsTouched>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d050      	beq.n	8006326 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006284:	482a      	ldr	r0, [pc, #168]	; (8006330 <TouchWSLedActivity+0xbc>)
 8006286:	f7fb fa9f 	bl	80017c8 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800628a:	f003 fed1 	bl	800a030 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <TouchWSLedActivity+0xc0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629a:	d344      	bcc.n	8006326 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800629c:	1d3a      	adds	r2, r7, #4
 800629e:	1dbb      	adds	r3, r7, #6
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fc f820 	bl	80022e8 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80062a8:	4b23      	ldr	r3, [pc, #140]	; (8006338 <TouchWSLedActivity+0xc4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10b      	bne.n	80062c8 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80062b0:	bf00      	nop
 80062b2:	2201      	movs	r2, #1
 80062b4:	4921      	ldr	r1, [pc, #132]	; (800633c <TouchWSLedActivity+0xc8>)
 80062b6:	2001      	movs	r0, #1
 80062b8:	f7fc fba4 	bl	8002a04 <eeprom_read>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f7      	bne.n	80062b2 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <TouchWSLedActivity+0xcc>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d90f      	bls.n	80062ee <TouchWSLedActivity+0x7a>
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b6e      	cmp	r3, #110	; 0x6e
 80062d2:	d80c      	bhi.n	80062ee <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062d4:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062d6:	2bd7      	cmp	r3, #215	; 0xd7
 80062d8:	d909      	bls.n	80062ee <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062da:	88bb      	ldrh	r3, [r7, #4]
 80062dc:	2bec      	cmp	r3, #236	; 0xec
 80062de:	d806      	bhi.n	80062ee <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <TouchWSLedActivity+0xd0>)
 80062e2:	2205      	movs	r2, #5
 80062e4:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <TouchWSLedActivity+0xd4>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e016      	b.n	800631c <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80062ee:	88bb      	ldrh	r3, [r7, #4]
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d90b      	bls.n	800630c <TouchWSLedActivity+0x98>
 80062f4:	88bb      	ldrh	r3, [r7, #4]
 80062f6:	2b56      	cmp	r3, #86	; 0x56
 80062f8:	d808      	bhi.n	800630c <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	88ba      	ldrh	r2, [r7, #4]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f002 f841 	bl	800838c <increaseNumberOfWSLedOnTFT>
 800630a:	e007      	b.n	800631c <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	88ba      	ldrh	r2, [r7, #4]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f002 f8c2 	bl	80084a0 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 800631c:	f003 fe88 	bl	800a030 <HAL_GetTick>
 8006320:	4603      	mov	r3, r0
 8006322:	4a04      	ldr	r2, [pc, #16]	; (8006334 <TouchWSLedActivity+0xc0>)
 8006324:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	080290a0 	.word	0x080290a0
 8006334:	2000028c 	.word	0x2000028c
 8006338:	20000256 	.word	0x20000256
 800633c:	20000033 	.word	0x20000033
 8006340:	20000257 	.word	0x20000257
 8006344:	20000290 	.word	0x20000290
 8006348:	20000255 	.word	0x20000255

0800634c <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006352:	4b70      	ldr	r3, [pc, #448]	; (8006514 <Schedule1Activity+0x1c8>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d105      	bne.n	8006366 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 800635a:	2001      	movs	r0, #1
 800635c:	f001 faf6 	bl	800794c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006360:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <Schedule1Activity+0x1c8>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006366:	f7fb fffd 	bl	8002364 <XPT2046_IsTouched>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80cc 	beq.w	800650a <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006372:	f003 fe5d 	bl	800a030 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	4b67      	ldr	r3, [pc, #412]	; (8006518 <Schedule1Activity+0x1cc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006382:	f0c0 80c2 	bcc.w	800650a <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006386:	1d3a      	adds	r2, r7, #4
 8006388:	1dbb      	adds	r3, r7, #6
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fb ffab 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b09      	cmp	r3, #9
 8006396:	d90f      	bls.n	80063b8 <Schedule1Activity+0x6c>
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	2b6e      	cmp	r3, #110	; 0x6e
 800639c:	d80c      	bhi.n	80063b8 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800639e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063a0:	2bd7      	cmp	r3, #215	; 0xd7
 80063a2:	d909      	bls.n	80063b8 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063a4:	88bb      	ldrh	r3, [r7, #4]
 80063a6:	2bec      	cmp	r3, #236	; 0xec
 80063a8:	d806      	bhi.n	80063b8 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 80063aa:	4b5c      	ldr	r3, [pc, #368]	; (800651c <Schedule1Activity+0x1d0>)
 80063ac:	2203      	movs	r2, #3
 80063ae:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063b0:	4b5b      	ldr	r3, [pc, #364]	; (8006520 <Schedule1Activity+0x1d4>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e0a3      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	2bdb      	cmp	r3, #219	; 0xdb
 80063bc:	d910      	bls.n	80063e0 <Schedule1Activity+0x94>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80063c4:	d20c      	bcs.n	80063e0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063c6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 80063c8:	2bd7      	cmp	r3, #215	; 0xd7
 80063ca:	d909      	bls.n	80063e0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063cc:	88bb      	ldrh	r3, [r7, #4]
 80063ce:	2bec      	cmp	r3, #236	; 0xec
 80063d0:	d806      	bhi.n	80063e0 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 80063d2:	4b52      	ldr	r3, [pc, #328]	; (800651c <Schedule1Activity+0x1d0>)
 80063d4:	2208      	movs	r2, #8
 80063d6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063d8:	4b51      	ldr	r3, [pc, #324]	; (8006520 <Schedule1Activity+0x1d4>)
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e08f      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80063e0:	88bb      	ldrh	r3, [r7, #4]
 80063e2:	2b31      	cmp	r3, #49	; 0x31
 80063e4:	d909      	bls.n	80063fa <Schedule1Activity+0xae>
 80063e6:	88bb      	ldrh	r3, [r7, #4]
 80063e8:	2b46      	cmp	r3, #70	; 0x46
 80063ea:	d806      	bhi.n	80063fa <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	88ba      	ldrh	r2, [r7, #4]
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f99a 	bl	800672c <MenuTFTSchedule1ActivityDayOfWeekRow>
 80063f8:	e082      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80063fa:	88bb      	ldrh	r3, [r7, #4]
 80063fc:	2b64      	cmp	r3, #100	; 0x64
 80063fe:	d909      	bls.n	8006414 <Schedule1Activity+0xc8>
 8006400:	88bb      	ldrh	r3, [r7, #4]
 8006402:	2b79      	cmp	r3, #121	; 0x79
 8006404:	d806      	bhi.n	8006414 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	88ba      	ldrh	r2, [r7, #4]
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fc67 	bl	8006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006412:	e075      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006414:	88bb      	ldrh	r3, [r7, #4]
 8006416:	2b87      	cmp	r3, #135	; 0x87
 8006418:	d909      	bls.n	800642e <Schedule1Activity+0xe2>
 800641a:	88bb      	ldrh	r3, [r7, #4]
 800641c:	2b9c      	cmp	r3, #156	; 0x9c
 800641e:	d806      	bhi.n	800642e <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	88ba      	ldrh	r2, [r7, #4]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fd24 	bl	8006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 800642c:	e068      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800642e:	88bb      	ldrh	r3, [r7, #4]
 8006430:	2ba9      	cmp	r3, #169	; 0xa9
 8006432:	d909      	bls.n	8006448 <Schedule1Activity+0xfc>
 8006434:	88bb      	ldrh	r3, [r7, #4]
 8006436:	2bbe      	cmp	r3, #190	; 0xbe
 8006438:	d806      	bhi.n	8006448 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	88ba      	ldrh	r2, [r7, #4]
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f857 	bl	80074f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006446:	e05b      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	2b77      	cmp	r3, #119	; 0x77
 800644c:	d958      	bls.n	8006500 <Schedule1Activity+0x1b4>
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	2bd2      	cmp	r3, #210	; 0xd2
 8006452:	d855      	bhi.n	8006500 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006454:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006456:	2bd7      	cmp	r3, #215	; 0xd7
 8006458:	d952      	bls.n	8006500 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800645a:	88bb      	ldrh	r3, [r7, #4]
 800645c:	2bec      	cmp	r3, #236	; 0xec
 800645e:	d84f      	bhi.n	8006500 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006460:	4b30      	ldr	r3, [pc, #192]	; (8006524 <Schedule1Activity+0x1d8>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	4619      	mov	r1, r3
 8006466:	2001      	movs	r0, #1
 8006468:	f7fc fe43 	bl	80030f2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 800646c:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <Schedule1Activity+0x1dc>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4619      	mov	r1, r3
 8006472:	2001      	movs	r0, #1
 8006474:	f7fc fe60 	bl	8003138 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006478:	4b2c      	ldr	r3, [pc, #176]	; (800652c <Schedule1Activity+0x1e0>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	2001      	movs	r0, #1
 8006480:	f7fc fe7d 	bl	800317e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006484:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <Schedule1Activity+0x1e4>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	2001      	movs	r0, #1
 800648c:	f7fc fe9a 	bl	80031c4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006490:	4928      	ldr	r1, [pc, #160]	; (8006534 <Schedule1Activity+0x1e8>)
 8006492:	2001      	movs	r0, #1
 8006494:	f7fc fc8d 	bl	8002db2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006498:	4927      	ldr	r1, [pc, #156]	; (8006538 <Schedule1Activity+0x1ec>)
 800649a:	2001      	movs	r0, #1
 800649c:	f7fc fd34 	bl	8002f08 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 80064a0:	4826      	ldr	r0, [pc, #152]	; (800653c <Schedule1Activity+0x1f0>)
 80064a2:	f7fb f991 	bl	80017c8 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 80064a6:	4926      	ldr	r1, [pc, #152]	; (8006540 <Schedule1Activity+0x1f4>)
 80064a8:	4826      	ldr	r0, [pc, #152]	; (8006544 <Schedule1Activity+0x1f8>)
 80064aa:	f00b fa9d 	bl	80119e8 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 80064ae:	f24c 6318 	movw	r3, #50712	; 0xc618
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	2301      	movs	r3, #1
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80064bc:	220a      	movs	r2, #10
 80064be:	2128      	movs	r1, #40	; 0x28
 80064c0:	4820      	ldr	r0, [pc, #128]	; (8006544 <Schedule1Activity+0x1f8>)
 80064c2:	f7fb fb9b 	bl	8001bfc <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80064c6:	4820      	ldr	r0, [pc, #128]	; (8006548 <Schedule1Activity+0x1fc>)
 80064c8:	f7fb f97e 	bl	80017c8 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80064cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	2305      	movs	r3, #5
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2314      	movs	r3, #20
 80064d8:	225a      	movs	r2, #90	; 0x5a
 80064da:	21d8      	movs	r1, #216	; 0xd8
 80064dc:	2078      	movs	r0, #120	; 0x78
 80064de:	f7fb f922 	bl	8001726 <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80064e2:	491a      	ldr	r1, [pc, #104]	; (800654c <Schedule1Activity+0x200>)
 80064e4:	4817      	ldr	r0, [pc, #92]	; (8006544 <Schedule1Activity+0x1f8>)
 80064e6:	f00b fa7f 	bl	80119e8 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80064ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2300      	movs	r3, #0
 80064f6:	22da      	movs	r2, #218	; 0xda
 80064f8:	217e      	movs	r1, #126	; 0x7e
 80064fa:	4812      	ldr	r0, [pc, #72]	; (8006544 <Schedule1Activity+0x1f8>)
 80064fc:	f7fb fb7e 	bl	8001bfc <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006500:	f003 fd96 	bl	800a030 <HAL_GetTick>
 8006504:	4603      	mov	r3, r0
 8006506:	4a04      	ldr	r2, [pc, #16]	; (8006518 <Schedule1Activity+0x1cc>)
 8006508:	6013      	str	r3, [r2, #0]
		}
	}
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000258 	.word	0x20000258
 8006518:	2000028c 	.word	0x2000028c
 800651c:	20000290 	.word	0x20000290
 8006520:	20000255 	.word	0x20000255
 8006524:	20000281 	.word	0x20000281
 8006528:	20000283 	.word	0x20000283
 800652c:	20000282 	.word	0x20000282
 8006530:	20000284 	.word	0x20000284
 8006534:	2000025c 	.word	0x2000025c
 8006538:	20000264 	.word	0x20000264
 800653c:	080290a0 	.word	0x080290a0
 8006540:	08015b88 	.word	0x08015b88
 8006544:	200002c0 	.word	0x200002c0
 8006548:	08027128 	.word	0x08027128
 800654c:	08015b9c 	.word	0x08015b9c

08006550 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006556:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <Schedule2Activity+0x1a0>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d105      	bne.n	800656a <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 800655e:	2002      	movs	r0, #2
 8006560:	f001 f9f4 	bl	800794c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006564:	4b62      	ldr	r3, [pc, #392]	; (80066f0 <Schedule2Activity+0x1a0>)
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 800656a:	f7fb fefb 	bl	8002364 <XPT2046_IsTouched>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80b8 	beq.w	80066e6 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006576:	f003 fd5b 	bl	800a030 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	4b5d      	ldr	r3, [pc, #372]	; (80066f4 <Schedule2Activity+0x1a4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	f0c0 80ae 	bcc.w	80066e6 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800658a:	1d3a      	adds	r2, r7, #4
 800658c:	1dbb      	adds	r3, r7, #6
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f7fb fea9 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b09      	cmp	r3, #9
 800659a:	d90f      	bls.n	80065bc <Schedule2Activity+0x6c>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b6e      	cmp	r3, #110	; 0x6e
 80065a0:	d80c      	bhi.n	80065bc <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80065a2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80065a4:	2bd7      	cmp	r3, #215	; 0xd7
 80065a6:	d909      	bls.n	80065bc <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80065a8:	88bb      	ldrh	r3, [r7, #4]
 80065aa:	2bec      	cmp	r3, #236	; 0xec
 80065ac:	d806      	bhi.n	80065bc <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 80065ae:	4b52      	ldr	r3, [pc, #328]	; (80066f8 <Schedule2Activity+0x1a8>)
 80065b0:	2203      	movs	r2, #3
 80065b2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065b4:	4b51      	ldr	r3, [pc, #324]	; (80066fc <Schedule2Activity+0x1ac>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e08f      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	2b31      	cmp	r3, #49	; 0x31
 80065c0:	d909      	bls.n	80065d6 <Schedule2Activity+0x86>
 80065c2:	88bb      	ldrh	r3, [r7, #4]
 80065c4:	2b46      	cmp	r3, #70	; 0x46
 80065c6:	d806      	bhi.n	80065d6 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	88ba      	ldrh	r2, [r7, #4]
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fd1a 	bl	8007008 <MenuTFTSchedule2ActivityDayOfWeekRow>
 80065d4:	e082      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065d6:	88bb      	ldrh	r3, [r7, #4]
 80065d8:	2b64      	cmp	r3, #100	; 0x64
 80065da:	d909      	bls.n	80065f0 <Schedule2Activity+0xa0>
 80065dc:	88bb      	ldrh	r3, [r7, #4]
 80065de:	2b79      	cmp	r3, #121	; 0x79
 80065e0:	d806      	bhi.n	80065f0 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	88ba      	ldrh	r2, [r7, #4]
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fdef 	bl	80071cc <MenuTFTSchedule2ActivityHourMinuteONAdd>
 80065ee:	e075      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065f0:	88bb      	ldrh	r3, [r7, #4]
 80065f2:	2b87      	cmp	r3, #135	; 0x87
 80065f4:	d909      	bls.n	800660a <Schedule2Activity+0xba>
 80065f6:	88bb      	ldrh	r3, [r7, #4]
 80065f8:	2b9c      	cmp	r3, #156	; 0x9c
 80065fa:	d806      	bhi.n	800660a <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	88ba      	ldrh	r2, [r7, #4]
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 feac 	bl	8007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006608:	e068      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800660a:	88bb      	ldrh	r3, [r7, #4]
 800660c:	2ba9      	cmp	r3, #169	; 0xa9
 800660e:	d909      	bls.n	8006624 <Schedule2Activity+0xd4>
 8006610:	88bb      	ldrh	r3, [r7, #4]
 8006612:	2bbe      	cmp	r3, #190	; 0xbe
 8006614:	d806      	bhi.n	8006624 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	88ba      	ldrh	r2, [r7, #4]
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f87f 	bl	8007720 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006622:	e05b      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	2b77      	cmp	r3, #119	; 0x77
 8006628:	d958      	bls.n	80066dc <Schedule2Activity+0x18c>
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2bd2      	cmp	r3, #210	; 0xd2
 800662e:	d855      	bhi.n	80066dc <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006630:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006632:	2bd7      	cmp	r3, #215	; 0xd7
 8006634:	d952      	bls.n	80066dc <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006636:	88bb      	ldrh	r3, [r7, #4]
 8006638:	2bec      	cmp	r3, #236	; 0xec
 800663a:	d84f      	bhi.n	80066dc <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 800663c:	4b30      	ldr	r3, [pc, #192]	; (8006700 <Schedule2Activity+0x1b0>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	2002      	movs	r0, #2
 8006644:	f7fc fd55 	bl	80030f2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006648:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <Schedule2Activity+0x1b4>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	2002      	movs	r0, #2
 8006650:	f7fc fd72 	bl	8003138 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006654:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <Schedule2Activity+0x1b8>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	4619      	mov	r1, r3
 800665a:	2002      	movs	r0, #2
 800665c:	f7fc fd8f 	bl	800317e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <Schedule2Activity+0x1bc>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	4619      	mov	r1, r3
 8006666:	2002      	movs	r0, #2
 8006668:	f7fc fdac 	bl	80031c4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 800666c:	4928      	ldr	r1, [pc, #160]	; (8006710 <Schedule2Activity+0x1c0>)
 800666e:	2002      	movs	r0, #2
 8006670:	f7fc fb9f 	bl	8002db2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006674:	4927      	ldr	r1, [pc, #156]	; (8006714 <Schedule2Activity+0x1c4>)
 8006676:	2002      	movs	r0, #2
 8006678:	f7fc fc46 	bl	8002f08 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 800667c:	4826      	ldr	r0, [pc, #152]	; (8006718 <Schedule2Activity+0x1c8>)
 800667e:	f7fb f8a3 	bl	80017c8 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006682:	4926      	ldr	r1, [pc, #152]	; (800671c <Schedule2Activity+0x1cc>)
 8006684:	4826      	ldr	r0, [pc, #152]	; (8006720 <Schedule2Activity+0x1d0>)
 8006686:	f00b f9af 	bl	80119e8 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800668a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	2301      	movs	r3, #1
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006698:	220a      	movs	r2, #10
 800669a:	2128      	movs	r1, #40	; 0x28
 800669c:	4820      	ldr	r0, [pc, #128]	; (8006720 <Schedule2Activity+0x1d0>)
 800669e:	f7fb faad 	bl	8001bfc <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80066a2:	4820      	ldr	r0, [pc, #128]	; (8006724 <Schedule2Activity+0x1d4>)
 80066a4:	f7fb f890 	bl	80017c8 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80066a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	2305      	movs	r3, #5
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	2314      	movs	r3, #20
 80066b4:	225a      	movs	r2, #90	; 0x5a
 80066b6:	21d8      	movs	r1, #216	; 0xd8
 80066b8:	2078      	movs	r0, #120	; 0x78
 80066ba:	f7fb f834 	bl	8001726 <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80066be:	491a      	ldr	r1, [pc, #104]	; (8006728 <Schedule2Activity+0x1d8>)
 80066c0:	4817      	ldr	r0, [pc, #92]	; (8006720 <Schedule2Activity+0x1d0>)
 80066c2:	f00b f991 	bl	80119e8 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80066c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	2300      	movs	r3, #0
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	2300      	movs	r3, #0
 80066d2:	22da      	movs	r2, #218	; 0xda
 80066d4:	217e      	movs	r1, #126	; 0x7e
 80066d6:	4812      	ldr	r0, [pc, #72]	; (8006720 <Schedule2Activity+0x1d0>)
 80066d8:	f7fb fa90 	bl	8001bfc <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 80066dc:	f003 fca8 	bl	800a030 <HAL_GetTick>
 80066e0:	4603      	mov	r3, r0
 80066e2:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <Schedule2Activity+0x1a4>)
 80066e4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000258 	.word	0x20000258
 80066f4:	2000028c 	.word	0x2000028c
 80066f8:	20000290 	.word	0x20000290
 80066fc:	20000255 	.word	0x20000255
 8006700:	20000285 	.word	0x20000285
 8006704:	20000287 	.word	0x20000287
 8006708:	20000286 	.word	0x20000286
 800670c:	20000288 	.word	0x20000288
 8006710:	20000270 	.word	0x20000270
 8006714:	20000278 	.word	0x20000278
 8006718:	080290a0 	.word	0x080290a0
 800671c:	08015ba4 	.word	0x08015ba4
 8006720:	200002c0 	.word	0x200002c0
 8006724:	08027128 	.word	0x08027128
 8006728:	08015b9c 	.word	0x08015b9c

0800672c <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	460a      	mov	r2, r1
 8006736:	80fb      	strh	r3, [r7, #6]
 8006738:	4613      	mov	r3, r2
 800673a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b3b      	cmp	r3, #59	; 0x3b
 8006740:	d91a      	bls.n	8006778 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b50      	cmp	r3, #80	; 0x50
 8006746:	d817      	bhi.n	8006778 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006748:	4b68      	ldr	r3, [pc, #416]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006750:	2100      	movs	r1, #0
 8006752:	2001      	movs	r0, #1
 8006754:	f000 f8cc 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006758:	e003      	b.n	8006762 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 800675a:	2101      	movs	r1, #1
 800675c:	2001      	movs	r0, #1
 800675e:	f000 f8c7 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006762:	4b62      	ldr	r3, [pc, #392]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e0b4      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	2b59      	cmp	r3, #89	; 0x59
 800677c:	d91a      	bls.n	80067b4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b6e      	cmp	r3, #110	; 0x6e
 8006782:	d817      	bhi.n	80067b4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 800678c:	2100      	movs	r1, #0
 800678e:	2002      	movs	r0, #2
 8006790:	f000 f8ae 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006794:	e003      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006796:	2101      	movs	r1, #1
 8006798:	2002      	movs	r0, #2
 800679a:	f000 f8a9 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 800679e:	4b53      	ldr	r3, [pc, #332]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067b0:	705a      	strb	r2, [r3, #1]
 80067b2:	e096      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	2b77      	cmp	r3, #119	; 0x77
 80067b8:	d91a      	bls.n	80067f0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	2b8c      	cmp	r3, #140	; 0x8c
 80067be:	d817      	bhi.n	80067f0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 80067c0:	4b4a      	ldr	r3, [pc, #296]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067c2:	789b      	ldrb	r3, [r3, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 80067c8:	2100      	movs	r1, #0
 80067ca:	2003      	movs	r0, #3
 80067cc:	f000 f890 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80067d0:	e003      	b.n	80067da <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80067d2:	2101      	movs	r1, #1
 80067d4:	2003      	movs	r0, #3
 80067d6:	f000 f88b 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 80067da:	4b44      	ldr	r3, [pc, #272]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067dc:	789b      	ldrb	r3, [r3, #2]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b40      	ldr	r3, [pc, #256]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ec:	709a      	strb	r2, [r3, #2]
 80067ee:	e078      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b95      	cmp	r3, #149	; 0x95
 80067f4:	d91a      	bls.n	800682c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2baa      	cmp	r3, #170	; 0xaa
 80067fa:	d817      	bhi.n	800682c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80067fc:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006804:	2100      	movs	r1, #0
 8006806:	2004      	movs	r0, #4
 8006808:	f000 f872 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800680c:	e003      	b.n	8006816 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800680e:	2101      	movs	r1, #1
 8006810:	2004      	movs	r0, #4
 8006812:	f000 f86d 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006816:	4b35      	ldr	r3, [pc, #212]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006818:	78db      	ldrb	r3, [r3, #3]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	4b31      	ldr	r3, [pc, #196]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006828:	70da      	strb	r2, [r3, #3]
 800682a:	e05a      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	2bb3      	cmp	r3, #179	; 0xb3
 8006830:	d91a      	bls.n	8006868 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2bc8      	cmp	r3, #200	; 0xc8
 8006836:	d817      	bhi.n	8006868 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006838:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006840:	2100      	movs	r1, #0
 8006842:	2005      	movs	r0, #5
 8006844:	f000 f854 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006848:	e003      	b.n	8006852 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 800684a:	2101      	movs	r1, #1
 800684c:	2005      	movs	r0, #5
 800684e:	f000 f84f 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006854:	791b      	ldrb	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006864:	711a      	strb	r2, [r3, #4]
 8006866:	e03c      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	2bd1      	cmp	r3, #209	; 0xd1
 800686c:	d91a      	bls.n	80068a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2be6      	cmp	r3, #230	; 0xe6
 8006872:	d817      	bhi.n	80068a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006876:	795b      	ldrb	r3, [r3, #5]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 800687c:	2100      	movs	r1, #0
 800687e:	2006      	movs	r0, #6
 8006880:	f000 f836 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006884:	e003      	b.n	800688e <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006886:	2101      	movs	r1, #1
 8006888:	2006      	movs	r0, #6
 800688a:	f000 f831 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 800688e:	4b17      	ldr	r3, [pc, #92]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006890:	795b      	ldrb	r3, [r3, #5]
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068a0:	715a      	strb	r2, [r3, #5]
 80068a2:	e01e      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	2bef      	cmp	r3, #239	; 0xef
 80068a8:	d91b      	bls.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b0:	d817      	bhi.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 80068b2:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068b4:	799b      	ldrb	r3, [r3, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 80068ba:	2100      	movs	r1, #0
 80068bc:	2007      	movs	r0, #7
 80068be:	f000 f817 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80068c2:	e003      	b.n	80068cc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 80068c4:	2101      	movs	r1, #1
 80068c6:	2007      	movs	r0, #7
 80068c8:	f000 f812 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068ce:	799b      	ldrb	r3, [r3, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068de:	719a      	strb	r2, [r3, #6]
	}
}
 80068e0:	e7ff      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2000025c 	.word	0x2000025c

080068f0 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	4603      	mov	r3, r0
 80068f8:	460a      	mov	r2, r1
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	4613      	mov	r3, r2
 80068fe:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d11a      	bne.n	800693c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006906:	79bb      	ldrb	r3, [r7, #6]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800690c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	2305      	movs	r3, #5
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	2312      	movs	r3, #18
 8006918:	2212      	movs	r2, #18
 800691a:	2133      	movs	r1, #51	; 0x33
 800691c:	203d      	movs	r0, #61	; 0x3d
 800691e:	f7fa ff02 	bl	8001726 <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006922:	e0be      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006924:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	2305      	movs	r3, #5
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	2312      	movs	r3, #18
 8006930:	2212      	movs	r2, #18
 8006932:	2133      	movs	r1, #51	; 0x33
 8006934:	203d      	movs	r0, #61	; 0x3d
 8006936:	f7fa fef6 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 800693a:	e0b2      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d11a      	bne.n	8006978 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006942:	79bb      	ldrb	r3, [r7, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006948:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2305      	movs	r3, #5
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2312      	movs	r3, #18
 8006954:	2212      	movs	r2, #18
 8006956:	2133      	movs	r1, #51	; 0x33
 8006958:	205b      	movs	r0, #91	; 0x5b
 800695a:	f7fa fee4 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 800695e:	e0a0      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006960:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	2305      	movs	r3, #5
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	2312      	movs	r3, #18
 800696c:	2212      	movs	r2, #18
 800696e:	2133      	movs	r1, #51	; 0x33
 8006970:	205b      	movs	r0, #91	; 0x5b
 8006972:	f7fa fed8 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006976:	e094      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d11a      	bne.n	80069b4 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 800697e:	79bb      	ldrb	r3, [r7, #6]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10b      	bne.n	800699c <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006984:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	2305      	movs	r3, #5
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	2312      	movs	r3, #18
 8006990:	2212      	movs	r2, #18
 8006992:	2133      	movs	r1, #51	; 0x33
 8006994:	2079      	movs	r0, #121	; 0x79
 8006996:	f7fa fec6 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 800699a:	e082      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800699c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	2305      	movs	r3, #5
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2312      	movs	r3, #18
 80069a8:	2212      	movs	r2, #18
 80069aa:	2133      	movs	r1, #51	; 0x33
 80069ac:	2079      	movs	r0, #121	; 0x79
 80069ae:	f7fa feba 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 80069b2:	e076      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d11a      	bne.n	80069f0 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 80069ba:	79bb      	ldrb	r3, [r7, #6]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	2305      	movs	r3, #5
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	2312      	movs	r3, #18
 80069cc:	2212      	movs	r2, #18
 80069ce:	2133      	movs	r1, #51	; 0x33
 80069d0:	2097      	movs	r0, #151	; 0x97
 80069d2:	f7fa fea8 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 80069d6:	e064      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	2305      	movs	r3, #5
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2312      	movs	r3, #18
 80069e4:	2212      	movs	r2, #18
 80069e6:	2133      	movs	r1, #51	; 0x33
 80069e8:	2097      	movs	r0, #151	; 0x97
 80069ea:	f7fa fe9c 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 80069ee:	e058      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d11a      	bne.n	8006a2c <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 80069f6:	79bb      	ldrb	r3, [r7, #6]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	2305      	movs	r3, #5
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	2312      	movs	r3, #18
 8006a08:	2212      	movs	r2, #18
 8006a0a:	2133      	movs	r1, #51	; 0x33
 8006a0c:	20b5      	movs	r0, #181	; 0xb5
 8006a0e:	f7fa fe8a 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a12:	e046      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	2305      	movs	r3, #5
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2312      	movs	r3, #18
 8006a20:	2212      	movs	r2, #18
 8006a22:	2133      	movs	r1, #51	; 0x33
 8006a24:	20b5      	movs	r0, #181	; 0xb5
 8006a26:	f7fa fe7e 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a2a:	e03a      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d11a      	bne.n	8006a68 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006a32:	79bb      	ldrb	r3, [r7, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2305      	movs	r3, #5
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2312      	movs	r3, #18
 8006a44:	2212      	movs	r2, #18
 8006a46:	2133      	movs	r1, #51	; 0x33
 8006a48:	20d3      	movs	r0, #211	; 0xd3
 8006a4a:	f7fa fe6c 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a4e:	e028      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	2305      	movs	r3, #5
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	2312      	movs	r3, #18
 8006a5c:	2212      	movs	r2, #18
 8006a5e:	2133      	movs	r1, #51	; 0x33
 8006a60:	20d3      	movs	r0, #211	; 0xd3
 8006a62:	f7fa fe60 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a66:	e01c      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d119      	bne.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8006a6e:	79bb      	ldrb	r3, [r7, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	2305      	movs	r3, #5
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2312      	movs	r3, #18
 8006a80:	2212      	movs	r2, #18
 8006a82:	2133      	movs	r1, #51	; 0x33
 8006a84:	20f1      	movs	r0, #241	; 0xf1
 8006a86:	f7fa fe4e 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a8a:	e00a      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	2305      	movs	r3, #5
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	2312      	movs	r3, #18
 8006a98:	2212      	movs	r2, #18
 8006a9a:	2133      	movs	r1, #51	; 0x33
 8006a9c:	20f1      	movs	r0, #241	; 0xf1
 8006a9e:	f7fa fe42 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	71fb      	strb	r3, [r7, #7]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d11a      	bne.n	8006af6 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8006ac0:	79bb      	ldrb	r3, [r7, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ac6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	2305      	movs	r3, #5
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2312      	movs	r3, #18
 8006ad2:	2212      	movs	r2, #18
 8006ad4:	21ab      	movs	r1, #171	; 0xab
 8006ad6:	2016      	movs	r0, #22
 8006ad8:	f7fa fe25 	bl	8001726 <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006adc:	e0fc      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ade:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	2305      	movs	r3, #5
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	2312      	movs	r3, #18
 8006aea:	2212      	movs	r2, #18
 8006aec:	21ab      	movs	r1, #171	; 0xab
 8006aee:	2016      	movs	r0, #22
 8006af0:	f7fa fe19 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006af4:	e0f0      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d11a      	bne.n	8006b32 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8006afc:	79bb      	ldrb	r3, [r7, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10b      	bne.n	8006b1a <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	2305      	movs	r3, #5
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2312      	movs	r3, #18
 8006b0e:	2212      	movs	r2, #18
 8006b10:	21ab      	movs	r1, #171	; 0xab
 8006b12:	2036      	movs	r0, #54	; 0x36
 8006b14:	f7fa fe07 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b18:	e0de      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	2305      	movs	r3, #5
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2312      	movs	r3, #18
 8006b26:	2212      	movs	r2, #18
 8006b28:	21ab      	movs	r1, #171	; 0xab
 8006b2a:	2036      	movs	r0, #54	; 0x36
 8006b2c:	f7fa fdfb 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b30:	e0d2      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d11a      	bne.n	8006b6e <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006b38:	79bb      	ldrb	r3, [r7, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	2305      	movs	r3, #5
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2312      	movs	r3, #18
 8006b4a:	2212      	movs	r2, #18
 8006b4c:	21ab      	movs	r1, #171	; 0xab
 8006b4e:	2056      	movs	r0, #86	; 0x56
 8006b50:	f7fa fde9 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b54:	e0c0      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	2305      	movs	r3, #5
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2312      	movs	r3, #18
 8006b62:	2212      	movs	r2, #18
 8006b64:	21ab      	movs	r1, #171	; 0xab
 8006b66:	2056      	movs	r0, #86	; 0x56
 8006b68:	f7fa fddd 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b6c:	e0b4      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d11a      	bne.n	8006baa <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006b74:	79bb      	ldrb	r3, [r7, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	2305      	movs	r3, #5
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2312      	movs	r3, #18
 8006b86:	2212      	movs	r2, #18
 8006b88:	21ab      	movs	r1, #171	; 0xab
 8006b8a:	2076      	movs	r0, #118	; 0x76
 8006b8c:	f7fa fdcb 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b90:	e0a2      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2305      	movs	r3, #5
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2312      	movs	r3, #18
 8006b9e:	2212      	movs	r2, #18
 8006ba0:	21ab      	movs	r1, #171	; 0xab
 8006ba2:	2076      	movs	r0, #118	; 0x76
 8006ba4:	f7fa fdbf 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006ba8:	e096      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d11a      	bne.n	8006be6 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006bb0:	79bb      	ldrb	r3, [r7, #6]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2305      	movs	r3, #5
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2312      	movs	r3, #18
 8006bc2:	2212      	movs	r2, #18
 8006bc4:	21ab      	movs	r1, #171	; 0xab
 8006bc6:	2096      	movs	r0, #150	; 0x96
 8006bc8:	f7fa fdad 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006bcc:	e084      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006bce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	2305      	movs	r3, #5
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	2312      	movs	r3, #18
 8006bda:	2212      	movs	r2, #18
 8006bdc:	21ab      	movs	r1, #171	; 0xab
 8006bde:	2096      	movs	r0, #150	; 0x96
 8006be0:	f7fa fda1 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006be4:	e078      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d11a      	bne.n	8006c22 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006bec:	79bb      	ldrb	r3, [r7, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bf2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	2305      	movs	r3, #5
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2312      	movs	r3, #18
 8006bfe:	2212      	movs	r2, #18
 8006c00:	21ab      	movs	r1, #171	; 0xab
 8006c02:	20b6      	movs	r0, #182	; 0xb6
 8006c04:	f7fa fd8f 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c08:	e066      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	2305      	movs	r3, #5
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	2312      	movs	r3, #18
 8006c16:	2212      	movs	r2, #18
 8006c18:	21ab      	movs	r1, #171	; 0xab
 8006c1a:	20b6      	movs	r0, #182	; 0xb6
 8006c1c:	f7fa fd83 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c20:	e05a      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d11a      	bne.n	8006c5e <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006c28:	79bb      	ldrb	r3, [r7, #6]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	2305      	movs	r3, #5
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2312      	movs	r3, #18
 8006c3a:	2212      	movs	r2, #18
 8006c3c:	21ab      	movs	r1, #171	; 0xab
 8006c3e:	20d6      	movs	r0, #214	; 0xd6
 8006c40:	f7fa fd71 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c44:	e048      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	2305      	movs	r3, #5
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2312      	movs	r3, #18
 8006c52:	2212      	movs	r2, #18
 8006c54:	21ab      	movs	r1, #171	; 0xab
 8006c56:	20d6      	movs	r0, #214	; 0xd6
 8006c58:	f7fa fd65 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c5c:	e03c      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d11a      	bne.n	8006c9a <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006c64:	79bb      	ldrb	r3, [r7, #6]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	2305      	movs	r3, #5
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	2312      	movs	r3, #18
 8006c76:	2212      	movs	r2, #18
 8006c78:	21ab      	movs	r1, #171	; 0xab
 8006c7a:	20f6      	movs	r0, #246	; 0xf6
 8006c7c:	f7fa fd53 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c80:	e02a      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	2305      	movs	r3, #5
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2312      	movs	r3, #18
 8006c8e:	2212      	movs	r2, #18
 8006c90:	21ab      	movs	r1, #171	; 0xab
 8006c92:	20f6      	movs	r0, #246	; 0xf6
 8006c94:	f7fa fd47 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c98:	e01e      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d11b      	bne.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006ca0:	79bb      	ldrb	r3, [r7, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ca6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	2305      	movs	r3, #5
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	2312      	movs	r3, #18
 8006cb2:	2212      	movs	r2, #18
 8006cb4:	21ab      	movs	r1, #171	; 0xab
 8006cb6:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006cba:	f7fa fd34 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006cbe:	e00b      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006cc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	2305      	movs	r3, #5
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	2312      	movs	r3, #18
 8006ccc:	2212      	movs	r2, #18
 8006cce:	21ab      	movs	r1, #171	; 0xab
 8006cd0:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006cd4:	f7fa fd27 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	460a      	mov	r2, r1
 8006cea:	80fb      	strh	r3, [r7, #6]
 8006cec:	4613      	mov	r3, r2
 8006cee:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006cf0:	4859      	ldr	r0, [pc, #356]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006cf2:	f7fa fd69 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2bba      	cmp	r3, #186	; 0xba
 8006cfa:	d92f      	bls.n	8006d5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	2bdd      	cmp	r3, #221	; 0xdd
 8006d00:	d82c      	bhi.n	8006d5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006d02:	4b56      	ldr	r3, [pc, #344]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b17      	cmp	r3, #23
 8006d08:	d806      	bhi.n	8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006d0a:	4b54      	ldr	r3, [pc, #336]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4b52      	ldr	r3, [pc, #328]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006d18:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006d1e:	4b4f      	ldr	r3, [pc, #316]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d907      	bls.n	8006d36 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006d26:	4b4d      	ldr	r3, [pc, #308]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	494c      	ldr	r1, [pc, #304]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006d2e:	484d      	ldr	r0, [pc, #308]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d30:	f00a fe5a 	bl	80119e8 <siprintf>
 8006d34:	e006      	b.n	8006d44 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006d36:	4b49      	ldr	r3, [pc, #292]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	494a      	ldr	r1, [pc, #296]	; (8006e68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006d3e:	4849      	ldr	r0, [pc, #292]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d40:	f00a fe52 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2264      	movs	r2, #100	; 0x64
 8006d52:	2150      	movs	r1, #80	; 0x50
 8006d54:	4843      	ldr	r0, [pc, #268]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d56:	f7fa ff51 	bl	8001bfc <EF_PutString>
 8006d5a:	e078      	b.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	2be8      	cmp	r3, #232	; 0xe8
 8006d60:	d930      	bls.n	8006dc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006d68:	d22c      	bcs.n	8006dc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006d6a:	4b40      	ldr	r3, [pc, #256]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b3a      	cmp	r3, #58	; 0x3a
 8006d70:	d806      	bhi.n	8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006d72:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e002      	b.n	8006d86 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006d86:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d907      	bls.n	8006d9e <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006d8e:	4b37      	ldr	r3, [pc, #220]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	4932      	ldr	r1, [pc, #200]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006d96:	4833      	ldr	r0, [pc, #204]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d98:	f00a fe26 	bl	80119e8 <siprintf>
 8006d9c:	e006      	b.n	8006dac <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006d9e:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	4930      	ldr	r1, [pc, #192]	; (8006e68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006da6:	482f      	ldr	r0, [pc, #188]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006da8:	f00a fe1e 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006dac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	2301      	movs	r3, #1
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	2264      	movs	r2, #100	; 0x64
 8006dba:	218a      	movs	r1, #138	; 0x8a
 8006dbc:	4829      	ldr	r0, [pc, #164]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006dbe:	f7fa ff1d 	bl	8001bfc <EF_PutString>
 8006dc2:	e044      	b.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006dca:	d940      	bls.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006dd2:	d23c      	bcs.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b30      	cmp	r3, #48	; 0x30
 8006dda:	d806      	bhi.n	8006dea <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006ddc:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	330a      	adds	r3, #10
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	4b21      	ldr	r3, [pc, #132]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	e012      	b.n	8006e10 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006dea:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f103 020a 	add.w	r2, r3, #10
 8006df2:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006df4:	fb83 1302 	smull	r1, r3, r3, r2
 8006df8:	4413      	add	r3, r2
 8006dfa:	1159      	asrs	r1, r3, #5
 8006dfc:	17d3      	asrs	r3, r2, #31
 8006dfe:	1ac9      	subs	r1, r1, r3
 8006e00:	460b      	mov	r3, r1
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	1a5b      	subs	r3, r3, r1
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	1ad1      	subs	r1, r2, r3
 8006e0a:	b2ca      	uxtb	r2, r1
 8006e0c:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e0e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b09      	cmp	r3, #9
 8006e16:	d907      	bls.n	8006e28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4910      	ldr	r1, [pc, #64]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006e20:	4810      	ldr	r0, [pc, #64]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e22:	f00a fde1 	bl	80119e8 <siprintf>
 8006e26:	e006      	b.n	8006e36 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006e28:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	490e      	ldr	r1, [pc, #56]	; (8006e68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006e30:	480c      	ldr	r0, [pc, #48]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e32:	f00a fdd9 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e36:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	2264      	movs	r2, #100	; 0x64
 8006e44:	218a      	movs	r1, #138	; 0x8a
 8006e46:	4807      	ldr	r0, [pc, #28]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e48:	f7fa fed8 	bl	8001bfc <EF_PutString>
	}
}
 8006e4c:	e7ff      	b.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	080290a0 	.word	0x080290a0
 8006e5c:	20000281 	.word	0x20000281
 8006e60:	08015bbc 	.word	0x08015bbc
 8006e64:	200002c0 	.word	0x200002c0
 8006e68:	08015bc4 	.word	0x08015bc4
 8006e6c:	20000283 	.word	0x20000283
 8006e70:	88888889 	.word	0x88888889

08006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	80fb      	strh	r3, [r7, #6]
 8006e80:	4613      	mov	r3, r2
 8006e82:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006e84:	4859      	ldr	r0, [pc, #356]	; (8006fec <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006e86:	f7fa fc9f 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	2bba      	cmp	r3, #186	; 0xba
 8006e8e:	d92f      	bls.n	8006ef0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	2bdd      	cmp	r3, #221	; 0xdd
 8006e94:	d82c      	bhi.n	8006ef0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006e96:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b17      	cmp	r3, #23
 8006e9c:	d806      	bhi.n	8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006e9e:	4b54      	ldr	r3, [pc, #336]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006eac:	4b50      	ldr	r3, [pc, #320]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006eb2:	4b4f      	ldr	r3, [pc, #316]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b09      	cmp	r3, #9
 8006eb8:	d907      	bls.n	8006eca <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006eba:	4b4d      	ldr	r3, [pc, #308]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	494c      	ldr	r1, [pc, #304]	; (8006ff4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006ec2:	484d      	ldr	r0, [pc, #308]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ec4:	f00a fd90 	bl	80119e8 <siprintf>
 8006ec8:	e006      	b.n	8006ed8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006eca:	4b49      	ldr	r3, [pc, #292]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	494a      	ldr	r1, [pc, #296]	; (8006ffc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006ed2:	4849      	ldr	r0, [pc, #292]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ed4:	f00a fd88 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006ed8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2287      	movs	r2, #135	; 0x87
 8006ee6:	214e      	movs	r1, #78	; 0x4e
 8006ee8:	4843      	ldr	r0, [pc, #268]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006eea:	f7fa fe87 	bl	8001bfc <EF_PutString>
 8006eee:	e078      	b.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	2be8      	cmp	r3, #232	; 0xe8
 8006ef4:	d930      	bls.n	8006f58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006efc:	d22c      	bcs.n	8006f58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006efe:	4b40      	ldr	r3, [pc, #256]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b3a      	cmp	r3, #58	; 0x3a
 8006f04:	d806      	bhi.n	8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	4b3c      	ldr	r3, [pc, #240]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e002      	b.n	8006f1a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006f14:	4b3a      	ldr	r3, [pc, #232]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006f1a:	4b39      	ldr	r3, [pc, #228]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d907      	bls.n	8006f32 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	4932      	ldr	r1, [pc, #200]	; (8006ff4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006f2a:	4833      	ldr	r0, [pc, #204]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f2c:	f00a fd5c 	bl	80119e8 <siprintf>
 8006f30:	e006      	b.n	8006f40 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006f32:	4b33      	ldr	r3, [pc, #204]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4930      	ldr	r1, [pc, #192]	; (8006ffc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006f3a:	482f      	ldr	r0, [pc, #188]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f3c:	f00a fd54 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006f40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	2301      	movs	r3, #1
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2287      	movs	r2, #135	; 0x87
 8006f4e:	218a      	movs	r1, #138	; 0x8a
 8006f50:	4829      	ldr	r0, [pc, #164]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f52:	f7fa fe53 	bl	8001bfc <EF_PutString>
 8006f56:	e044      	b.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006f5e:	d940      	bls.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006f66:	d23c      	bcs.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006f68:	4b25      	ldr	r3, [pc, #148]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b30      	cmp	r3, #48	; 0x30
 8006f6e:	d806      	bhi.n	8006f7e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006f70:	4b23      	ldr	r3, [pc, #140]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	330a      	adds	r3, #10
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	4b21      	ldr	r3, [pc, #132]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e012      	b.n	8006fa4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f103 020a 	add.w	r2, r3, #10
 8006f86:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006f88:	fb83 1302 	smull	r1, r3, r3, r2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	1159      	asrs	r1, r3, #5
 8006f90:	17d3      	asrs	r3, r2, #31
 8006f92:	1ac9      	subs	r1, r1, r3
 8006f94:	460b      	mov	r3, r1
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	1a5b      	subs	r3, r3, r1
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	1ad1      	subs	r1, r2, r3
 8006f9e:	b2ca      	uxtb	r2, r1
 8006fa0:	4b17      	ldr	r3, [pc, #92]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fa2:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006fa4:	4b16      	ldr	r3, [pc, #88]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b09      	cmp	r3, #9
 8006faa:	d907      	bls.n	8006fbc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4910      	ldr	r1, [pc, #64]	; (8006ff4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006fb4:	4810      	ldr	r0, [pc, #64]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fb6:	f00a fd17 	bl	80119e8 <siprintf>
 8006fba:	e006      	b.n	8006fca <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	490e      	ldr	r1, [pc, #56]	; (8006ffc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006fc4:	480c      	ldr	r0, [pc, #48]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fc6:	f00a fd0f 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006fca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2287      	movs	r2, #135	; 0x87
 8006fd8:	218a      	movs	r1, #138	; 0x8a
 8006fda:	4807      	ldr	r0, [pc, #28]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fdc:	f7fa fe0e 	bl	8001bfc <EF_PutString>
	}
}
 8006fe0:	e7ff      	b.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	080290a0 	.word	0x080290a0
 8006ff0:	20000282 	.word	0x20000282
 8006ff4:	08015bbc 	.word	0x08015bbc
 8006ff8:	200002c0 	.word	0x200002c0
 8006ffc:	08015bc4 	.word	0x08015bc4
 8007000:	20000284 	.word	0x20000284
 8007004:	88888889 	.word	0x88888889

08007008 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	460a      	mov	r2, r1
 8007012:	80fb      	strh	r3, [r7, #6]
 8007014:	4613      	mov	r3, r2
 8007016:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	2b3b      	cmp	r3, #59	; 0x3b
 800701c:	d91a      	bls.n	8007054 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	2b50      	cmp	r3, #80	; 0x50
 8007022:	d817      	bhi.n	8007054 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8007024:	4b68      	ldr	r3, [pc, #416]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 800702c:	2100      	movs	r1, #0
 800702e:	2001      	movs	r0, #1
 8007030:	f7ff fc5e 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007034:	e003      	b.n	800703e <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8007036:	2101      	movs	r1, #1
 8007038:	2001      	movs	r0, #1
 800703a:	f7ff fc59 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 800703e:	4b62      	ldr	r3, [pc, #392]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf0c      	ite	eq
 8007046:	2301      	moveq	r3, #1
 8007048:	2300      	movne	r3, #0
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	4b5e      	ldr	r3, [pc, #376]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e0b4      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	2b59      	cmp	r3, #89	; 0x59
 8007058:	d91a      	bls.n	8007090 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b6e      	cmp	r3, #110	; 0x6e
 800705e:	d817      	bhi.n	8007090 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007060:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007068:	2100      	movs	r1, #0
 800706a:	2002      	movs	r0, #2
 800706c:	f7ff fc40 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007070:	e003      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007072:	2101      	movs	r1, #1
 8007074:	2002      	movs	r0, #2
 8007076:	f7ff fc3b 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 800707a:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b00      	cmp	r3, #0
 8007080:	bf0c      	ite	eq
 8007082:	2301      	moveq	r3, #1
 8007084:	2300      	movne	r3, #0
 8007086:	b2db      	uxtb	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	4b4f      	ldr	r3, [pc, #316]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800708c:	705a      	strb	r2, [r3, #1]
 800708e:	e096      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	2b77      	cmp	r3, #119	; 0x77
 8007094:	d91a      	bls.n	80070cc <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	2b8c      	cmp	r3, #140	; 0x8c
 800709a:	d817      	bhi.n	80070cc <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 800709c:	4b4a      	ldr	r3, [pc, #296]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800709e:	789b      	ldrb	r3, [r3, #2]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 80070a4:	2100      	movs	r1, #0
 80070a6:	2003      	movs	r0, #3
 80070a8:	f7ff fc22 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80070ac:	e003      	b.n	80070b6 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80070ae:	2101      	movs	r1, #1
 80070b0:	2003      	movs	r0, #3
 80070b2:	f7ff fc1d 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 80070b6:	4b44      	ldr	r3, [pc, #272]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070b8:	789b      	ldrb	r3, [r3, #2]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	4b40      	ldr	r3, [pc, #256]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070c8:	709a      	strb	r2, [r3, #2]
 80070ca:	e078      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	2b95      	cmp	r3, #149	; 0x95
 80070d0:	d91a      	bls.n	8007108 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2baa      	cmp	r3, #170	; 0xaa
 80070d6:	d817      	bhi.n	8007108 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80070d8:	4b3b      	ldr	r3, [pc, #236]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070da:	78db      	ldrb	r3, [r3, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 80070e0:	2100      	movs	r1, #0
 80070e2:	2004      	movs	r0, #4
 80070e4:	f7ff fc04 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80070e8:	e003      	b.n	80070f2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80070ea:	2101      	movs	r1, #1
 80070ec:	2004      	movs	r0, #4
 80070ee:	f7ff fbff 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 80070f2:	4b35      	ldr	r3, [pc, #212]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070f4:	78db      	ldrb	r3, [r3, #3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007104:	70da      	strb	r2, [r3, #3]
 8007106:	e05a      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	2bb3      	cmp	r3, #179	; 0xb3
 800710c:	d91a      	bls.n	8007144 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	2bc8      	cmp	r3, #200	; 0xc8
 8007112:	d817      	bhi.n	8007144 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007114:	4b2c      	ldr	r3, [pc, #176]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 800711c:	2100      	movs	r1, #0
 800711e:	2005      	movs	r0, #5
 8007120:	f7ff fbe6 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007124:	e003      	b.n	800712e <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007126:	2101      	movs	r1, #1
 8007128:	2005      	movs	r0, #5
 800712a:	f7ff fbe1 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007130:	791b      	ldrb	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf0c      	ite	eq
 8007136:	2301      	moveq	r3, #1
 8007138:	2300      	movne	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007140:	711a      	strb	r2, [r3, #4]
 8007142:	e03c      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	2bd1      	cmp	r3, #209	; 0xd1
 8007148:	d91a      	bls.n	8007180 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	2be6      	cmp	r3, #230	; 0xe6
 800714e:	d817      	bhi.n	8007180 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007150:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007152:	795b      	ldrb	r3, [r3, #5]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007158:	2100      	movs	r1, #0
 800715a:	2006      	movs	r0, #6
 800715c:	f7ff fbc8 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007160:	e003      	b.n	800716a <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007162:	2101      	movs	r1, #1
 8007164:	2006      	movs	r0, #6
 8007166:	f7ff fbc3 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800716c:	795b      	ldrb	r3, [r3, #5]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf0c      	ite	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	2300      	movne	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800717c:	715a      	strb	r2, [r3, #5]
 800717e:	e01e      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	2bef      	cmp	r3, #239	; 0xef
 8007184:	d91b      	bls.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800718c:	d817      	bhi.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800718e:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007190:	799b      	ldrb	r3, [r3, #6]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007196:	2100      	movs	r1, #0
 8007198:	2007      	movs	r0, #7
 800719a:	f7ff fba9 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800719e:	e003      	b.n	80071a8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 80071a0:	2101      	movs	r1, #1
 80071a2:	2007      	movs	r0, #7
 80071a4:	f7ff fba4 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80071aa:	799b      	ldrb	r3, [r3, #6]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80071ba:	719a      	strb	r2, [r3, #6]
	}
}
 80071bc:	e7ff      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000270 	.word	0x20000270

080071cc <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	4603      	mov	r3, r0
 80071d4:	460a      	mov	r2, r1
 80071d6:	80fb      	strh	r3, [r7, #6]
 80071d8:	4613      	mov	r3, r2
 80071da:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80071dc:	4859      	ldr	r0, [pc, #356]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 80071de:	f7fa faf3 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	2bba      	cmp	r3, #186	; 0xba
 80071e6:	d92f      	bls.n	8007248 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	2bdd      	cmp	r3, #221	; 0xdd
 80071ec:	d82c      	bhi.n	8007248 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 80071ee:	4b56      	ldr	r3, [pc, #344]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b17      	cmp	r3, #23
 80071f4:	d806      	bhi.n	8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 80071f6:	4b54      	ldr	r3, [pc, #336]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b52      	ldr	r3, [pc, #328]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e002      	b.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007204:	4b50      	ldr	r3, [pc, #320]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 800720a:	4b4f      	ldr	r3, [pc, #316]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b09      	cmp	r3, #9
 8007210:	d907      	bls.n	8007222 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 8007212:	4b4d      	ldr	r3, [pc, #308]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	494c      	ldr	r1, [pc, #304]	; (800734c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800721a:	484d      	ldr	r0, [pc, #308]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800721c:	f00a fbe4 	bl	80119e8 <siprintf>
 8007220:	e006      	b.n	8007230 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007222:	4b49      	ldr	r3, [pc, #292]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	494a      	ldr	r1, [pc, #296]	; (8007354 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800722a:	4849      	ldr	r0, [pc, #292]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800722c:	f00a fbdc 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007230:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	2301      	movs	r3, #1
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	2264      	movs	r2, #100	; 0x64
 800723e:	214e      	movs	r1, #78	; 0x4e
 8007240:	4843      	ldr	r0, [pc, #268]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007242:	f7fa fcdb 	bl	8001bfc <EF_PutString>
 8007246:	e078      	b.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2be8      	cmp	r3, #232	; 0xe8
 800724c:	d930      	bls.n	80072b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007254:	d22c      	bcs.n	80072b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007256:	4b40      	ldr	r3, [pc, #256]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b3a      	cmp	r3, #58	; 0x3a
 800725c:	d806      	bhi.n	800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 800725e:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	4b3c      	ldr	r3, [pc, #240]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 800726c:	4b3a      	ldr	r3, [pc, #232]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007272:	4b39      	ldr	r3, [pc, #228]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b09      	cmp	r3, #9
 8007278:	d907      	bls.n	800728a <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 800727a:	4b37      	ldr	r3, [pc, #220]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	4932      	ldr	r1, [pc, #200]	; (800734c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007282:	4833      	ldr	r0, [pc, #204]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007284:	f00a fbb0 	bl	80119e8 <siprintf>
 8007288:	e006      	b.n	8007298 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 800728a:	4b33      	ldr	r3, [pc, #204]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	4930      	ldr	r1, [pc, #192]	; (8007354 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007292:	482f      	ldr	r0, [pc, #188]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007294:	f00a fba8 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007298:	f24c 6318 	movw	r3, #50712	; 0xc618
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	2301      	movs	r3, #1
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	2264      	movs	r2, #100	; 0x64
 80072a6:	218a      	movs	r1, #138	; 0x8a
 80072a8:	4829      	ldr	r0, [pc, #164]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80072aa:	f7fa fca7 	bl	8001bfc <EF_PutString>
 80072ae:	e044      	b.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80072b6:	d940      	bls.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80072be:	d23c      	bcs.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 80072c0:	4b25      	ldr	r3, [pc, #148]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b30      	cmp	r3, #48	; 0x30
 80072c6:	d806      	bhi.n	80072d6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 80072c8:	4b23      	ldr	r3, [pc, #140]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	330a      	adds	r3, #10
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	4b21      	ldr	r3, [pc, #132]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e012      	b.n	80072fc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 80072d6:	4b20      	ldr	r3, [pc, #128]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f103 020a 	add.w	r2, r3, #10
 80072de:	4b1f      	ldr	r3, [pc, #124]	; (800735c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 80072e0:	fb83 1302 	smull	r1, r3, r3, r2
 80072e4:	4413      	add	r3, r2
 80072e6:	1159      	asrs	r1, r3, #5
 80072e8:	17d3      	asrs	r3, r2, #31
 80072ea:	1ac9      	subs	r1, r1, r3
 80072ec:	460b      	mov	r3, r1
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	1a5b      	subs	r3, r3, r1
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	1ad1      	subs	r1, r2, r3
 80072f6:	b2ca      	uxtb	r2, r1
 80072f8:	4b17      	ldr	r3, [pc, #92]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072fa:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80072fc:	4b16      	ldr	r3, [pc, #88]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b09      	cmp	r3, #9
 8007302:	d907      	bls.n	8007314 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007304:	4b14      	ldr	r3, [pc, #80]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	4910      	ldr	r1, [pc, #64]	; (800734c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800730c:	4810      	ldr	r0, [pc, #64]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800730e:	f00a fb6b 	bl	80119e8 <siprintf>
 8007312:	e006      	b.n	8007322 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	490e      	ldr	r1, [pc, #56]	; (8007354 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800731c:	480c      	ldr	r0, [pc, #48]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800731e:	f00a fb63 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007322:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	2301      	movs	r3, #1
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	2300      	movs	r3, #0
 800732e:	2264      	movs	r2, #100	; 0x64
 8007330:	218a      	movs	r1, #138	; 0x8a
 8007332:	4807      	ldr	r0, [pc, #28]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007334:	f7fa fc62 	bl	8001bfc <EF_PutString>
	}
}
 8007338:	e7ff      	b.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	080290a0 	.word	0x080290a0
 8007348:	20000285 	.word	0x20000285
 800734c:	08015bbc 	.word	0x08015bbc
 8007350:	200002c0 	.word	0x200002c0
 8007354:	08015bc4 	.word	0x08015bc4
 8007358:	20000287 	.word	0x20000287
 800735c:	88888889 	.word	0x88888889

08007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af02      	add	r7, sp, #8
 8007366:	4603      	mov	r3, r0
 8007368:	460a      	mov	r2, r1
 800736a:	80fb      	strh	r3, [r7, #6]
 800736c:	4613      	mov	r3, r2
 800736e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007370:	4859      	ldr	r0, [pc, #356]	; (80074d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 8007372:	f7fa fa29 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2bba      	cmp	r3, #186	; 0xba
 800737a:	d92f      	bls.n	80073dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2bdd      	cmp	r3, #221	; 0xdd
 8007380:	d82c      	bhi.n	80073dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 8007382:	4b56      	ldr	r3, [pc, #344]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b17      	cmp	r3, #23
 8007388:	d806      	bhi.n	8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 800738a:	4b54      	ldr	r3, [pc, #336]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b52      	ldr	r3, [pc, #328]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	e002      	b.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007398:	4b50      	ldr	r3, [pc, #320]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800739a:	2201      	movs	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 800739e:	4b4f      	ldr	r3, [pc, #316]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b09      	cmp	r3, #9
 80073a4:	d907      	bls.n	80073b6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 80073a6:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	494c      	ldr	r1, [pc, #304]	; (80074e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80073ae:	484d      	ldr	r0, [pc, #308]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073b0:	f00a fb1a 	bl	80119e8 <siprintf>
 80073b4:	e006      	b.n	80073c4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 80073b6:	4b49      	ldr	r3, [pc, #292]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	494a      	ldr	r1, [pc, #296]	; (80074e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80073be:	4849      	ldr	r0, [pc, #292]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073c0:	f00a fb12 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	2301      	movs	r3, #1
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	2300      	movs	r3, #0
 80073d0:	2287      	movs	r2, #135	; 0x87
 80073d2:	2150      	movs	r1, #80	; 0x50
 80073d4:	4843      	ldr	r0, [pc, #268]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073d6:	f7fa fc11 	bl	8001bfc <EF_PutString>
 80073da:	e078      	b.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	2be8      	cmp	r3, #232	; 0xe8
 80073e0:	d930      	bls.n	8007444 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80073e8:	d22c      	bcs.n	8007444 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 80073ea:	4b40      	ldr	r3, [pc, #256]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b3a      	cmp	r3, #58	; 0x3a
 80073f0:	d806      	bhi.n	8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 80073f2:	4b3e      	ldr	r3, [pc, #248]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4b3c      	ldr	r3, [pc, #240]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 8007400:	4b3a      	ldr	r3, [pc, #232]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007406:	4b39      	ldr	r3, [pc, #228]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b09      	cmp	r3, #9
 800740c:	d907      	bls.n	800741e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4932      	ldr	r1, [pc, #200]	; (80074e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007416:	4833      	ldr	r0, [pc, #204]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007418:	f00a fae6 	bl	80119e8 <siprintf>
 800741c:	e006      	b.n	800742c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 800741e:	4b33      	ldr	r3, [pc, #204]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	4930      	ldr	r1, [pc, #192]	; (80074e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007426:	482f      	ldr	r0, [pc, #188]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007428:	f00a fade 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800742c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	2301      	movs	r3, #1
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	2300      	movs	r3, #0
 8007438:	2287      	movs	r2, #135	; 0x87
 800743a:	218a      	movs	r1, #138	; 0x8a
 800743c:	4829      	ldr	r0, [pc, #164]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800743e:	f7fa fbdd 	bl	8001bfc <EF_PutString>
 8007442:	e044      	b.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800744a:	d940      	bls.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007452:	d23c      	bcs.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b30      	cmp	r3, #48	; 0x30
 800745a:	d806      	bhi.n	800746a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	330a      	adds	r3, #10
 8007462:	b2da      	uxtb	r2, r3
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e012      	b.n	8007490 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 800746a:	4b20      	ldr	r3, [pc, #128]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f103 020a 	add.w	r2, r3, #10
 8007472:	4b1f      	ldr	r3, [pc, #124]	; (80074f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007474:	fb83 1302 	smull	r1, r3, r3, r2
 8007478:	4413      	add	r3, r2
 800747a:	1159      	asrs	r1, r3, #5
 800747c:	17d3      	asrs	r3, r2, #31
 800747e:	1ac9      	subs	r1, r1, r3
 8007480:	460b      	mov	r3, r1
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	1a5b      	subs	r3, r3, r1
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	1ad1      	subs	r1, r2, r3
 800748a:	b2ca      	uxtb	r2, r1
 800748c:	4b17      	ldr	r3, [pc, #92]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800748e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007490:	4b16      	ldr	r3, [pc, #88]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b09      	cmp	r3, #9
 8007496:	d907      	bls.n	80074a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007498:	4b14      	ldr	r3, [pc, #80]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	4910      	ldr	r1, [pc, #64]	; (80074e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80074a0:	4810      	ldr	r0, [pc, #64]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80074a2:	f00a faa1 	bl	80119e8 <siprintf>
 80074a6:	e006      	b.n	80074b6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80074a8:	4b10      	ldr	r3, [pc, #64]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	490e      	ldr	r1, [pc, #56]	; (80074e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80074b0:	480c      	ldr	r0, [pc, #48]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80074b2:	f00a fa99 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	2301      	movs	r3, #1
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	2287      	movs	r2, #135	; 0x87
 80074c4:	218a      	movs	r1, #138	; 0x8a
 80074c6:	4807      	ldr	r0, [pc, #28]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80074c8:	f7fa fb98 	bl	8001bfc <EF_PutString>
	}
}
 80074cc:	e7ff      	b.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	080290a0 	.word	0x080290a0
 80074dc:	20000286 	.word	0x20000286
 80074e0:	08015bbc 	.word	0x08015bbc
 80074e4:	200002c0 	.word	0x200002c0
 80074e8:	08015bc4 	.word	0x08015bc4
 80074ec:	20000288 	.word	0x20000288
 80074f0:	88888889 	.word	0x88888889

080074f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	460a      	mov	r2, r1
 80074fe:	80fb      	strh	r3, [r7, #6]
 8007500:	4613      	mov	r3, r2
 8007502:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b14      	cmp	r3, #20
 8007508:	d919      	bls.n	800753e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b29      	cmp	r3, #41	; 0x29
 800750e:	d816      	bhi.n	800753e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007510:	4b82      	ldr	r3, [pc, #520]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007518:	2100      	movs	r1, #0
 800751a:	2001      	movs	r0, #1
 800751c:	f7ff fac5 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007520:	e003      	b.n	800752a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007522:	2101      	movs	r1, #1
 8007524:	2001      	movs	r0, #1
 8007526:	f7ff fac0 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800752a:	4b7c      	ldr	r3, [pc, #496]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	4b78      	ldr	r3, [pc, #480]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800753c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	2b34      	cmp	r3, #52	; 0x34
 8007542:	d919      	bls.n	8007578 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b49      	cmp	r3, #73	; 0x49
 8007548:	d816      	bhi.n	8007578 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800754a:	4b74      	ldr	r3, [pc, #464]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007552:	2100      	movs	r1, #0
 8007554:	2002      	movs	r0, #2
 8007556:	f7ff faa8 	bl	8006aaa <changeTFTScheduleRelayLights>
 800755a:	e003      	b.n	8007564 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 800755c:	2101      	movs	r1, #1
 800755e:	2002      	movs	r0, #2
 8007560:	f7ff faa3 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007564:	4b6d      	ldr	r3, [pc, #436]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf0c      	ite	eq
 800756c:	2301      	moveq	r3, #1
 800756e:	2300      	movne	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	4b69      	ldr	r3, [pc, #420]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007576:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	2b54      	cmp	r3, #84	; 0x54
 800757c:	d919      	bls.n	80075b2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	2b69      	cmp	r3, #105	; 0x69
 8007582:	d816      	bhi.n	80075b2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007584:	4b65      	ldr	r3, [pc, #404]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007586:	789b      	ldrb	r3, [r3, #2]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 800758c:	2100      	movs	r1, #0
 800758e:	2003      	movs	r0, #3
 8007590:	f7ff fa8b 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007594:	e003      	b.n	800759e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007596:	2101      	movs	r1, #1
 8007598:	2003      	movs	r0, #3
 800759a:	f7ff fa86 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800759e:	4b5f      	ldr	r3, [pc, #380]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075a0:	789b      	ldrb	r3, [r3, #2]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf0c      	ite	eq
 80075a6:	2301      	moveq	r3, #1
 80075a8:	2300      	movne	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	4b5b      	ldr	r3, [pc, #364]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075b0:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	2b74      	cmp	r3, #116	; 0x74
 80075b6:	d919      	bls.n	80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	2b89      	cmp	r3, #137	; 0x89
 80075bc:	d816      	bhi.n	80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80075be:	4b57      	ldr	r3, [pc, #348]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 80075c6:	2100      	movs	r1, #0
 80075c8:	2004      	movs	r0, #4
 80075ca:	f7ff fa6e 	bl	8006aaa <changeTFTScheduleRelayLights>
 80075ce:	e003      	b.n	80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80075d0:	2101      	movs	r1, #1
 80075d2:	2004      	movs	r0, #4
 80075d4:	f7ff fa69 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80075d8:	4b50      	ldr	r3, [pc, #320]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075da:	78db      	ldrb	r3, [r3, #3]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	4b4c      	ldr	r3, [pc, #304]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075ea:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b94      	cmp	r3, #148	; 0x94
 80075f0:	d919      	bls.n	8007626 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2ba9      	cmp	r3, #169	; 0xa9
 80075f6:	d816      	bhi.n	8007626 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80075f8:	4b48      	ldr	r3, [pc, #288]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8007600:	2100      	movs	r1, #0
 8007602:	2005      	movs	r0, #5
 8007604:	f7ff fa51 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007608:	e003      	b.n	8007612 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800760a:	2101      	movs	r1, #1
 800760c:	2005      	movs	r0, #5
 800760e:	f7ff fa4c 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007612:	4b42      	ldr	r3, [pc, #264]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007614:	791b      	ldrb	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007624:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	2bb4      	cmp	r3, #180	; 0xb4
 800762a:	d919      	bls.n	8007660 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	2bc9      	cmp	r3, #201	; 0xc9
 8007630:	d816      	bhi.n	8007660 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007632:	4b3a      	ldr	r3, [pc, #232]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007634:	795b      	ldrb	r3, [r3, #5]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800763a:	2100      	movs	r1, #0
 800763c:	2006      	movs	r0, #6
 800763e:	f7ff fa34 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007642:	e003      	b.n	800764c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007644:	2101      	movs	r1, #1
 8007646:	2006      	movs	r0, #6
 8007648:	f7ff fa2f 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 800764c:	4b33      	ldr	r3, [pc, #204]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800764e:	795b      	ldrb	r3, [r3, #5]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	4b2f      	ldr	r3, [pc, #188]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800765e:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2bd4      	cmp	r3, #212	; 0xd4
 8007664:	d919      	bls.n	800769a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	2be9      	cmp	r3, #233	; 0xe9
 800766a:	d816      	bhi.n	800769a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800766e:	799b      	ldrb	r3, [r3, #6]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007674:	2100      	movs	r1, #0
 8007676:	2007      	movs	r0, #7
 8007678:	f7ff fa17 	bl	8006aaa <changeTFTScheduleRelayLights>
 800767c:	e003      	b.n	8007686 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800767e:	2101      	movs	r1, #1
 8007680:	2007      	movs	r0, #7
 8007682:	f7ff fa12 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007688:	799b      	ldrb	r3, [r3, #6]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	4b21      	ldr	r3, [pc, #132]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007698:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2bf4      	cmp	r3, #244	; 0xf4
 800769e:	d91a      	bls.n	80076d6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80076a6:	d216      	bcs.n	80076d6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076aa:	79db      	ldrb	r3, [r3, #7]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 80076b0:	2100      	movs	r1, #0
 80076b2:	2008      	movs	r0, #8
 80076b4:	f7ff f9f9 	bl	8006aaa <changeTFTScheduleRelayLights>
 80076b8:	e003      	b.n	80076c2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80076ba:	2101      	movs	r1, #1
 80076bc:	2008      	movs	r0, #8
 80076be:	f7ff f9f4 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076c4:	79db      	ldrb	r3, [r3, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076d4:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80076dc:	d91a      	bls.n	8007714 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80076e4:	d216      	bcs.n	8007714 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076e8:	7a1b      	ldrb	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80076ee:	2100      	movs	r1, #0
 80076f0:	2009      	movs	r0, #9
 80076f2:	f7ff f9da 	bl	8006aaa <changeTFTScheduleRelayLights>
 80076f6:	e003      	b.n	8007700 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80076f8:	2101      	movs	r1, #1
 80076fa:	2009      	movs	r0, #9
 80076fc:	f7ff f9d5 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007700:	4b06      	ldr	r3, [pc, #24]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007702:	7a1b      	ldrb	r3, [r3, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	4b02      	ldr	r3, [pc, #8]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007712:	721a      	strb	r2, [r3, #8]
	}

}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000264 	.word	0x20000264

08007720 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	460a      	mov	r2, r1
 800772a:	80fb      	strh	r3, [r7, #6]
 800772c:	4613      	mov	r3, r2
 800772e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b14      	cmp	r3, #20
 8007734:	d919      	bls.n	800776a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b29      	cmp	r3, #41	; 0x29
 800773a:	d816      	bhi.n	800776a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800773c:	4b82      	ldr	r3, [pc, #520]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007744:	2100      	movs	r1, #0
 8007746:	2001      	movs	r0, #1
 8007748:	f7ff f9af 	bl	8006aaa <changeTFTScheduleRelayLights>
 800774c:	e003      	b.n	8007756 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800774e:	2101      	movs	r1, #1
 8007750:	2001      	movs	r0, #1
 8007752:	f7ff f9aa 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007756:	4b7c      	ldr	r3, [pc, #496]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	bf0c      	ite	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	2300      	movne	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	4b78      	ldr	r3, [pc, #480]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007768:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b34      	cmp	r3, #52	; 0x34
 800776e:	d919      	bls.n	80077a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	2b49      	cmp	r3, #73	; 0x49
 8007774:	d816      	bhi.n	80077a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007776:	4b74      	ldr	r3, [pc, #464]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800777e:	2100      	movs	r1, #0
 8007780:	2002      	movs	r0, #2
 8007782:	f7ff f992 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007786:	e003      	b.n	8007790 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007788:	2101      	movs	r1, #1
 800778a:	2002      	movs	r0, #2
 800778c:	f7ff f98d 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007790:	4b6d      	ldr	r3, [pc, #436]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	4b69      	ldr	r3, [pc, #420]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077a2:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b54      	cmp	r3, #84	; 0x54
 80077a8:	d919      	bls.n	80077de <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b69      	cmp	r3, #105	; 0x69
 80077ae:	d816      	bhi.n	80077de <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80077b0:	4b65      	ldr	r3, [pc, #404]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077b2:	789b      	ldrb	r3, [r3, #2]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 80077b8:	2100      	movs	r1, #0
 80077ba:	2003      	movs	r0, #3
 80077bc:	f7ff f975 	bl	8006aaa <changeTFTScheduleRelayLights>
 80077c0:	e003      	b.n	80077ca <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80077c2:	2101      	movs	r1, #1
 80077c4:	2003      	movs	r0, #3
 80077c6:	f7ff f970 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80077ca:	4b5f      	ldr	r3, [pc, #380]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077dc:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b74      	cmp	r3, #116	; 0x74
 80077e2:	d919      	bls.n	8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	2b89      	cmp	r3, #137	; 0x89
 80077e8:	d816      	bhi.n	8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80077ea:	4b57      	ldr	r3, [pc, #348]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077ec:	78db      	ldrb	r3, [r3, #3]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80077f2:	2100      	movs	r1, #0
 80077f4:	2004      	movs	r0, #4
 80077f6:	f7ff f958 	bl	8006aaa <changeTFTScheduleRelayLights>
 80077fa:	e003      	b.n	8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80077fc:	2101      	movs	r1, #1
 80077fe:	2004      	movs	r0, #4
 8007800:	f7ff f953 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007804:	4b50      	ldr	r3, [pc, #320]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007806:	78db      	ldrb	r3, [r3, #3]
 8007808:	2b00      	cmp	r3, #0
 800780a:	bf0c      	ite	eq
 800780c:	2301      	moveq	r3, #1
 800780e:	2300      	movne	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	4b4c      	ldr	r3, [pc, #304]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007816:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b94      	cmp	r3, #148	; 0x94
 800781c:	d919      	bls.n	8007852 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2ba9      	cmp	r3, #169	; 0xa9
 8007822:	d816      	bhi.n	8007852 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007824:	4b48      	ldr	r3, [pc, #288]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 800782c:	2100      	movs	r1, #0
 800782e:	2005      	movs	r0, #5
 8007830:	f7ff f93b 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007834:	e003      	b.n	800783e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007836:	2101      	movs	r1, #1
 8007838:	2005      	movs	r0, #5
 800783a:	f7ff f936 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800783e:	4b42      	ldr	r3, [pc, #264]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	4b3e      	ldr	r3, [pc, #248]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007850:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2bb4      	cmp	r3, #180	; 0xb4
 8007856:	d919      	bls.n	800788c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2bc9      	cmp	r3, #201	; 0xc9
 800785c:	d816      	bhi.n	800788c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800785e:	4b3a      	ldr	r3, [pc, #232]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007860:	795b      	ldrb	r3, [r3, #5]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007866:	2100      	movs	r1, #0
 8007868:	2006      	movs	r0, #6
 800786a:	f7ff f91e 	bl	8006aaa <changeTFTScheduleRelayLights>
 800786e:	e003      	b.n	8007878 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007870:	2101      	movs	r1, #1
 8007872:	2006      	movs	r0, #6
 8007874:	f7ff f919 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007878:	4b33      	ldr	r3, [pc, #204]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800788a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	2bd4      	cmp	r3, #212	; 0xd4
 8007890:	d919      	bls.n	80078c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2be9      	cmp	r3, #233	; 0xe9
 8007896:	d816      	bhi.n	80078c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800789a:	799b      	ldrb	r3, [r3, #6]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80078a0:	2100      	movs	r1, #0
 80078a2:	2007      	movs	r0, #7
 80078a4:	f7ff f901 	bl	8006aaa <changeTFTScheduleRelayLights>
 80078a8:	e003      	b.n	80078b2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80078aa:	2101      	movs	r1, #1
 80078ac:	2007      	movs	r0, #7
 80078ae:	f7ff f8fc 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80078b2:	4b25      	ldr	r3, [pc, #148]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078b4:	799b      	ldrb	r3, [r3, #6]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b21      	ldr	r3, [pc, #132]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078c4:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80078c6:	88fb      	ldrh	r3, [r7, #6]
 80078c8:	2bf4      	cmp	r3, #244	; 0xf4
 80078ca:	d91a      	bls.n	8007902 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80078d2:	d216      	bcs.n	8007902 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80078d4:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078d6:	79db      	ldrb	r3, [r3, #7]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80078dc:	2100      	movs	r1, #0
 80078de:	2008      	movs	r0, #8
 80078e0:	f7ff f8e3 	bl	8006aaa <changeTFTScheduleRelayLights>
 80078e4:	e003      	b.n	80078ee <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80078e6:	2101      	movs	r1, #1
 80078e8:	2008      	movs	r0, #8
 80078ea:	f7ff f8de 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078f0:	79db      	ldrb	r3, [r3, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007900:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007908:	d91a      	bls.n	8007940 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007910:	d216      	bcs.n	8007940 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007914:	7a1b      	ldrb	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 800791a:	2100      	movs	r1, #0
 800791c:	2009      	movs	r0, #9
 800791e:	f7ff f8c4 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007922:	e003      	b.n	800792c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007924:	2101      	movs	r1, #1
 8007926:	2009      	movs	r0, #9
 8007928:	f7ff f8bf 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800792e:	7a1b      	ldrb	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	4b02      	ldr	r3, [pc, #8]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800793e:	721a      	strb	r2, [r3, #8]
	}
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20000278 	.word	0x20000278

0800794c <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d118      	bne.n	800798e <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 800795c:	491b      	ldr	r1, [pc, #108]	; (80079cc <updateAllSchedulesInfo+0x80>)
 800795e:	2001      	movs	r0, #1
 8007960:	f7fb fb37 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007964:	491a      	ldr	r1, [pc, #104]	; (80079d0 <updateAllSchedulesInfo+0x84>)
 8007966:	2001      	movs	r0, #1
 8007968:	f7fb fb57 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 800796c:	4919      	ldr	r1, [pc, #100]	; (80079d4 <updateAllSchedulesInfo+0x88>)
 800796e:	2001      	movs	r0, #1
 8007970:	f7fb fb77 	bl	8003062 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007974:	4918      	ldr	r1, [pc, #96]	; (80079d8 <updateAllSchedulesInfo+0x8c>)
 8007976:	2001      	movs	r0, #1
 8007978:	f7fb fb97 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 800797c:	4917      	ldr	r1, [pc, #92]	; (80079dc <updateAllSchedulesInfo+0x90>)
 800797e:	2001      	movs	r0, #1
 8007980:	f7fb f9d6 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007984:	4916      	ldr	r1, [pc, #88]	; (80079e0 <updateAllSchedulesInfo+0x94>)
 8007986:	2001      	movs	r0, #1
 8007988:	f7fb fa4e 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 800798c:	e01a      	b.n	80079c4 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d117      	bne.n	80079c4 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007994:	4913      	ldr	r1, [pc, #76]	; (80079e4 <updateAllSchedulesInfo+0x98>)
 8007996:	2002      	movs	r0, #2
 8007998:	f7fb fb1b 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 800799c:	4912      	ldr	r1, [pc, #72]	; (80079e8 <updateAllSchedulesInfo+0x9c>)
 800799e:	2002      	movs	r0, #2
 80079a0:	f7fb fb3b 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 80079a4:	4911      	ldr	r1, [pc, #68]	; (80079ec <updateAllSchedulesInfo+0xa0>)
 80079a6:	2002      	movs	r0, #2
 80079a8:	f7fb fb5b 	bl	8003062 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 80079ac:	4910      	ldr	r1, [pc, #64]	; (80079f0 <updateAllSchedulesInfo+0xa4>)
 80079ae:	2002      	movs	r0, #2
 80079b0:	f7fb fb7b 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 80079b4:	4909      	ldr	r1, [pc, #36]	; (80079dc <updateAllSchedulesInfo+0x90>)
 80079b6:	2002      	movs	r0, #2
 80079b8:	f7fb f9ba 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 80079bc:	4908      	ldr	r1, [pc, #32]	; (80079e0 <updateAllSchedulesInfo+0x94>)
 80079be:	2002      	movs	r0, #2
 80079c0:	f7fb fa32 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000281 	.word	0x20000281
 80079d0:	20000283 	.word	0x20000283
 80079d4:	20000282 	.word	0x20000282
 80079d8:	20000284 	.word	0x20000284
 80079dc:	2000025c 	.word	0x2000025c
 80079e0:	20000264 	.word	0x20000264
 80079e4:	20000285 	.word	0x20000285
 80079e8:	20000287 	.word	0x20000287
 80079ec:	20000286 	.word	0x20000286
 80079f0:	20000288 	.word	0x20000288

080079f4 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	4603      	mov	r3, r0
 80079fc:	460a      	mov	r2, r1
 80079fe:	80fb      	strh	r3, [r7, #6]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007a04:	88bb      	ldrh	r3, [r7, #4]
 8007a06:	2b4a      	cmp	r3, #74	; 0x4a
 8007a08:	d923      	bls.n	8007a52 <clockIncreaseOneHourAndMinute+0x5e>
 8007a0a:	88bb      	ldrh	r3, [r7, #4]
 8007a0c:	2b60      	cmp	r3, #96	; 0x60
 8007a0e:	d820      	bhi.n	8007a52 <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 8007a10:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b17      	cmp	r3, #23
 8007a16:	d806      	bhi.n	8007a26 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 8007a18:	4b37      	ldr	r3, [pc, #220]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e002      	b.n	8007a2c <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 8007a26:	4b34      	ldr	r3, [pc, #208]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	4932      	ldr	r1, [pc, #200]	; (8007afc <clockIncreaseOneHourAndMinute+0x108>)
 8007a34:	4832      	ldr	r0, [pc, #200]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a36:	f009 ffd7 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a3a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	2246      	movs	r2, #70	; 0x46
 8007a48:	21a0      	movs	r1, #160	; 0xa0
 8007a4a:	482d      	ldr	r0, [pc, #180]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a4c:	f7fa f8d6 	bl	8001bfc <EF_PutString>
 8007a50:	e04d      	b.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007a52:	88bb      	ldrh	r3, [r7, #4]
 8007a54:	2b72      	cmp	r3, #114	; 0x72
 8007a56:	d923      	bls.n	8007aa0 <clockIncreaseOneHourAndMinute+0xac>
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	2b88      	cmp	r3, #136	; 0x88
 8007a5c:	d820      	bhi.n	8007aa0 <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b3a      	cmp	r3, #58	; 0x3a
 8007a64:	d806      	bhi.n	8007a74 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	4b25      	ldr	r3, [pc, #148]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007a74:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007a7a:	4b22      	ldr	r3, [pc, #136]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	491e      	ldr	r1, [pc, #120]	; (8007afc <clockIncreaseOneHourAndMinute+0x108>)
 8007a82:	481f      	ldr	r0, [pc, #124]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a84:	f009 ffb0 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a88:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	226e      	movs	r2, #110	; 0x6e
 8007a96:	21a0      	movs	r1, #160	; 0xa0
 8007a98:	4819      	ldr	r0, [pc, #100]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a9a:	f7fa f8af 	bl	8001bfc <EF_PutString>
 8007a9e:	e026      	b.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007aa0:	88bb      	ldrh	r3, [r7, #4]
 8007aa2:	2b9a      	cmp	r3, #154	; 0x9a
 8007aa4:	d923      	bls.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	2bb0      	cmp	r3, #176	; 0xb0
 8007aaa:	d820      	bhi.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b06      	cmp	r3, #6
 8007ab2:	d806      	bhi.n	8007ac2 <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007ab4:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e002      	b.n	8007ac8 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	490f      	ldr	r1, [pc, #60]	; (8007b0c <clockIncreaseOneHourAndMinute+0x118>)
 8007ad0:	480b      	ldr	r0, [pc, #44]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007ad2:	f009 ff89 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ad6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	2301      	movs	r3, #1
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2296      	movs	r2, #150	; 0x96
 8007ae4:	2114      	movs	r1, #20
 8007ae6:	4806      	ldr	r0, [pc, #24]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007ae8:	f7fa f888 	bl	8001bfc <EF_PutString>
	}
}
 8007aec:	e7ff      	b.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000031 	.word	0x20000031
 8007afc:	08015bcc 	.word	0x08015bcc
 8007b00:	200002c0 	.word	0x200002c0
 8007b04:	20000032 	.word	0x20000032
 8007b08:	20000030 	.word	0x20000030
 8007b0c:	08015bd4 	.word	0x08015bd4

08007b10 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	4603      	mov	r3, r0
 8007b18:	460a      	mov	r2, r1
 8007b1a:	80fb      	strh	r3, [r7, #6]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8007b20:	88bb      	ldrh	r3, [r7, #4]
 8007b22:	2b4a      	cmp	r3, #74	; 0x4a
 8007b24:	d923      	bls.n	8007b6e <clockIncreaseSixHoursTenMinutes+0x5e>
 8007b26:	88bb      	ldrh	r3, [r7, #4]
 8007b28:	2b60      	cmp	r3, #96	; 0x60
 8007b2a:	d820      	bhi.n	8007b6e <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 8007b2c:	4b2e      	ldr	r3, [pc, #184]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b12      	cmp	r3, #18
 8007b32:	d806      	bhi.n	8007b42 <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007b34:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	3306      	adds	r3, #6
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e002      	b.n	8007b48 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 8007b42:	4b29      	ldr	r3, [pc, #164]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4927      	ldr	r1, [pc, #156]	; (8007bec <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007b50:	4827      	ldr	r0, [pc, #156]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b52:	f009 ff49 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007b56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	2300      	movs	r3, #0
 8007b62:	2246      	movs	r2, #70	; 0x46
 8007b64:	219d      	movs	r1, #157	; 0x9d
 8007b66:	4822      	ldr	r0, [pc, #136]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b68:	f7fa f848 	bl	8001bfc <EF_PutString>
 8007b6c:	e035      	b.n	8007bda <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007b6e:	88bb      	ldrh	r3, [r7, #4]
 8007b70:	2b72      	cmp	r3, #114	; 0x72
 8007b72:	d932      	bls.n	8007bda <clockIncreaseSixHoursTenMinutes+0xca>
 8007b74:	88bb      	ldrh	r3, [r7, #4]
 8007b76:	2b88      	cmp	r3, #136	; 0x88
 8007b78:	d82f      	bhi.n	8007bda <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b30      	cmp	r3, #48	; 0x30
 8007b80:	d806      	bhi.n	8007b90 <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	330a      	adds	r3, #10
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e012      	b.n	8007bb6 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007b90:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f103 020a 	add.w	r2, r3, #10
 8007b98:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007b9a:	fb83 1302 	smull	r1, r3, r3, r2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	1159      	asrs	r1, r3, #5
 8007ba2:	17d3      	asrs	r3, r2, #31
 8007ba4:	1ac9      	subs	r1, r1, r3
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	1a5b      	subs	r3, r3, r1
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	1ad1      	subs	r1, r2, r3
 8007bb0:	b2ca      	uxtb	r2, r1
 8007bb2:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007bb4:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	490b      	ldr	r1, [pc, #44]	; (8007bec <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007bbe:	480c      	ldr	r0, [pc, #48]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007bc0:	f009 ff12 	bl	80119e8 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007bc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	226e      	movs	r2, #110	; 0x6e
 8007bd2:	219c      	movs	r1, #156	; 0x9c
 8007bd4:	4806      	ldr	r0, [pc, #24]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007bd6:	f7fa f811 	bl	8001bfc <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007bda:	4808      	ldr	r0, [pc, #32]	; (8007bfc <clockIncreaseSixHoursTenMinutes+0xec>)
 8007bdc:	f7f9 fdf4 	bl	80017c8 <EF_SetFont>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000031 	.word	0x20000031
 8007bec:	08015bcc 	.word	0x08015bcc
 8007bf0:	200002c0 	.word	0x200002c0
 8007bf4:	20000032 	.word	0x20000032
 8007bf8:	88888889 	.word	0x88888889
 8007bfc:	080290a0 	.word	0x080290a0

08007c00 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	d954      	bls.n	8007cba <changeSwitchStatusTouch+0xba>
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	2b56      	cmp	r3, #86	; 0x56
 8007c14:	d851      	bhi.n	8007cba <changeSwitchStatusTouch+0xba>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c16:	4bb0      	ldr	r3, [pc, #704]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d026      	beq.n	8007c6c <changeSwitchStatusTouch+0x6c>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8007c1e:	2006      	movs	r0, #6
 8007c20:	f000 ffc6 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007c24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	2305      	movs	r3, #5
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2315      	movs	r3, #21
 8007c30:	2221      	movs	r2, #33	; 0x21
 8007c32:	2141      	movs	r1, #65	; 0x41
 8007c34:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c38:	f7f9 fd75 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007c3c:	49a7      	ldr	r1, [pc, #668]	; (8007edc <changeSwitchStatusTouch+0x2dc>)
 8007c3e:	48a8      	ldr	r0, [pc, #672]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007c40:	f009 fed2 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007c44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2243      	movs	r2, #67	; 0x43
 8007c52:	f240 1111 	movw	r1, #273	; 0x111
 8007c56:	48a2      	ldr	r0, [pc, #648]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007c58:	f7f9 ffd0 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[0] = 0;
 8007c5c:	4b9e      	ldr	r3, [pc, #632]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 0);
 8007c62:	2100      	movs	r1, #0
 8007c64:	2001      	movs	r0, #1
 8007c66:	f7fa ff13 	bl	8002a90 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c6a:	e12d      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8007c6c:	2005      	movs	r0, #5
 8007c6e:	f000 ff9f 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007c72:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	2305      	movs	r3, #5
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2315      	movs	r3, #21
 8007c7e:	2221      	movs	r2, #33	; 0x21
 8007c80:	2141      	movs	r1, #65	; 0x41
 8007c82:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c86:	f7f9 fd4e 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007c8a:	4996      	ldr	r1, [pc, #600]	; (8007ee4 <changeSwitchStatusTouch+0x2e4>)
 8007c8c:	4894      	ldr	r0, [pc, #592]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007c8e:	f009 feab 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007c92:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2243      	movs	r2, #67	; 0x43
 8007ca0:	f240 1111 	movw	r1, #273	; 0x111
 8007ca4:	488e      	ldr	r0, [pc, #568]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007ca6:	f7f9 ffa9 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[0] = 1;
 8007caa:	4b8b      	ldr	r3, [pc, #556]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 1);
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	f7fa feec 	bl	8002a90 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007cb8:	e106      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}

	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b5e      	cmp	r3, #94	; 0x5e
 8007cbe:	d954      	bls.n	8007d6a <changeSwitchStatusTouch+0x16a>
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b74      	cmp	r3, #116	; 0x74
 8007cc4:	d851      	bhi.n	8007d6a <changeSwitchStatusTouch+0x16a>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007cc6:	4b84      	ldr	r3, [pc, #528]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d026      	beq.n	8007d1c <changeSwitchStatusTouch+0x11c>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8007cce:	2008      	movs	r0, #8
 8007cd0:	f000 ff6e 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007cd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	2305      	movs	r3, #5
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2315      	movs	r3, #21
 8007ce0:	2221      	movs	r2, #33	; 0x21
 8007ce2:	215f      	movs	r1, #95	; 0x5f
 8007ce4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007ce8:	f7f9 fd1d 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007cec:	497b      	ldr	r1, [pc, #492]	; (8007edc <changeSwitchStatusTouch+0x2dc>)
 8007cee:	487c      	ldr	r0, [pc, #496]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007cf0:	f009 fe7a 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007cf4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2261      	movs	r2, #97	; 0x61
 8007d02:	f240 1111 	movw	r1, #273	; 0x111
 8007d06:	4876      	ldr	r0, [pc, #472]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007d08:	f7f9 ff78 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[1] = 0;
 8007d0c:	4b72      	ldr	r3, [pc, #456]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 0);
 8007d12:	2100      	movs	r1, #0
 8007d14:	2002      	movs	r0, #2
 8007d16:	f7fa febb 	bl	8002a90 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007d1a:	e0d5      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8007d1c:	2007      	movs	r0, #7
 8007d1e:	f000 ff47 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007d22:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	2305      	movs	r3, #5
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2315      	movs	r3, #21
 8007d2e:	2221      	movs	r2, #33	; 0x21
 8007d30:	215f      	movs	r1, #95	; 0x5f
 8007d32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d36:	f7f9 fcf6 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007d3a:	496a      	ldr	r1, [pc, #424]	; (8007ee4 <changeSwitchStatusTouch+0x2e4>)
 8007d3c:	4868      	ldr	r0, [pc, #416]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007d3e:	f009 fe53 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007d42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2261      	movs	r2, #97	; 0x61
 8007d50:	f240 1111 	movw	r1, #273	; 0x111
 8007d54:	4862      	ldr	r0, [pc, #392]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007d56:	f7f9 ff51 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[1] = 1;
 8007d5a:	4b5f      	ldr	r3, [pc, #380]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 1);
 8007d60:	2101      	movs	r1, #1
 8007d62:	2002      	movs	r0, #2
 8007d64:	f7fa fe94 	bl	8002a90 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007d68:	e0ae      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	2b7c      	cmp	r3, #124	; 0x7c
 8007d6e:	d954      	bls.n	8007e1a <changeSwitchStatusTouch+0x21a>
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	2b92      	cmp	r3, #146	; 0x92
 8007d74:	d851      	bhi.n	8007e1a <changeSwitchStatusTouch+0x21a>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007d76:	4b58      	ldr	r3, [pc, #352]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007d78:	789b      	ldrb	r3, [r3, #2]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d026      	beq.n	8007dcc <changeSwitchStatusTouch+0x1cc>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8007d7e:	200a      	movs	r0, #10
 8007d80:	f000 ff16 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007d84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	2305      	movs	r3, #5
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	2315      	movs	r3, #21
 8007d90:	2221      	movs	r2, #33	; 0x21
 8007d92:	217d      	movs	r1, #125	; 0x7d
 8007d94:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d98:	f7f9 fcc5 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007d9c:	494f      	ldr	r1, [pc, #316]	; (8007edc <changeSwitchStatusTouch+0x2dc>)
 8007d9e:	4850      	ldr	r0, [pc, #320]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007da0:	f009 fe22 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007da4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	227f      	movs	r2, #127	; 0x7f
 8007db2:	f240 1111 	movw	r1, #273	; 0x111
 8007db6:	484a      	ldr	r0, [pc, #296]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007db8:	f7f9 ff20 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[2] = 0;
 8007dbc:	4b46      	ldr	r3, [pc, #280]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 0);
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	2003      	movs	r0, #3
 8007dc6:	f7fa fe63 	bl	8002a90 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007dca:	e07d      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8007dcc:	2009      	movs	r0, #9
 8007dce:	f000 feef 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007dd2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	2305      	movs	r3, #5
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	2315      	movs	r3, #21
 8007dde:	2221      	movs	r2, #33	; 0x21
 8007de0:	217d      	movs	r1, #125	; 0x7d
 8007de2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007de6:	f7f9 fc9e 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007dea:	493e      	ldr	r1, [pc, #248]	; (8007ee4 <changeSwitchStatusTouch+0x2e4>)
 8007dec:	483c      	ldr	r0, [pc, #240]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007dee:	f009 fdfb 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007df2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	227f      	movs	r2, #127	; 0x7f
 8007e00:	f240 1111 	movw	r1, #273	; 0x111
 8007e04:	4836      	ldr	r0, [pc, #216]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007e06:	f7f9 fef9 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[2] = 1;
 8007e0a:	4b33      	ldr	r3, [pc, #204]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 1);
 8007e10:	2101      	movs	r1, #1
 8007e12:	2003      	movs	r0, #3
 8007e14:	f7fa fe3c 	bl	8002a90 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007e18:	e056      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	2b9a      	cmp	r3, #154	; 0x9a
 8007e1e:	d953      	bls.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2bb0      	cmp	r3, #176	; 0xb0
 8007e24:	d850      	bhi.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007e26:	4b2c      	ldr	r3, [pc, #176]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007e28:	78db      	ldrb	r3, [r3, #3]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d026      	beq.n	8007e7c <changeSwitchStatusTouch+0x27c>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8007e2e:	200c      	movs	r0, #12
 8007e30:	f000 febe 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2305      	movs	r3, #5
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2315      	movs	r3, #21
 8007e40:	2221      	movs	r2, #33	; 0x21
 8007e42:	219b      	movs	r1, #155	; 0x9b
 8007e44:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007e48:	f7f9 fc6d 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007e4c:	4923      	ldr	r1, [pc, #140]	; (8007edc <changeSwitchStatusTouch+0x2dc>)
 8007e4e:	4824      	ldr	r0, [pc, #144]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007e50:	f009 fdca 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	229d      	movs	r2, #157	; 0x9d
 8007e62:	f240 1111 	movw	r1, #273	; 0x111
 8007e66:	481e      	ldr	r0, [pc, #120]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007e68:	f7f9 fec8 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[3] = 0;
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 0);
 8007e72:	2100      	movs	r1, #0
 8007e74:	2004      	movs	r0, #4
 8007e76:	f7fa fe0b 	bl	8002a90 <EEPROM_RelayStateUpdate>
 8007e7a:	e025      	b.n	8007ec8 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8007e7c:	200b      	movs	r0, #11
 8007e7e:	f000 fe97 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007e82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	2305      	movs	r3, #5
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2315      	movs	r3, #21
 8007e8e:	2221      	movs	r2, #33	; 0x21
 8007e90:	219b      	movs	r1, #155	; 0x9b
 8007e92:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007e96:	f7f9 fc46 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007e9a:	4912      	ldr	r1, [pc, #72]	; (8007ee4 <changeSwitchStatusTouch+0x2e4>)
 8007e9c:	4810      	ldr	r0, [pc, #64]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007e9e:	f009 fda3 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007ea2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	2300      	movs	r3, #0
 8007eae:	229d      	movs	r2, #157	; 0x9d
 8007eb0:	f240 1111 	movw	r1, #273	; 0x111
 8007eb4:	480a      	ldr	r0, [pc, #40]	; (8007ee0 <changeSwitchStatusTouch+0x2e0>)
 8007eb6:	f7f9 fea1 	bl	8001bfc <EF_PutString>
			SwitchesButtonState[3] = 1;
 8007eba:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <changeSwitchStatusTouch+0x2d8>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 1);
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	2004      	movs	r0, #4
 8007ec4:	f7fa fde4 	bl	8002a90 <EEPROM_RelayStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007ec8:	4807      	ldr	r0, [pc, #28]	; (8007ee8 <changeSwitchStatusTouch+0x2e8>)
 8007eca:	f7f9 fc7d 	bl	80017c8 <EF_SetFont>
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200002a8 	.word	0x200002a8
 8007edc:	08015be8 	.word	0x08015be8
 8007ee0:	200002c0 	.word	0x200002c0
 8007ee4:	08015bec 	.word	0x08015bec
 8007ee8:	080290a0 	.word	0x080290a0

08007eec <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	2b40      	cmp	r3, #64	; 0x40
 8007efa:	d950      	bls.n	8007f9e <changeLightsStatusTouch+0xb2>
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	2b56      	cmp	r3, #86	; 0x56
 8007f00:	d84d      	bhi.n	8007f9e <changeLightsStatusTouch+0xb2>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007f02:	4ba8      	ldr	r3, [pc, #672]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d024      	beq.n	8007f54 <changeLightsStatusTouch+0x68>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8007f0a:	200e      	movs	r0, #14
 8007f0c:	f000 fe50 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	2305      	movs	r3, #5
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	2315      	movs	r3, #21
 8007f1c:	2221      	movs	r2, #33	; 0x21
 8007f1e:	2141      	movs	r1, #65	; 0x41
 8007f20:	20c8      	movs	r0, #200	; 0xc8
 8007f22:	f7f9 fc00 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007f26:	49a0      	ldr	r1, [pc, #640]	; (80081a8 <changeLightsStatusTouch+0x2bc>)
 8007f28:	48a0      	ldr	r0, [pc, #640]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8007f2a:	f009 fd5d 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	2300      	movs	r3, #0
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2243      	movs	r2, #67	; 0x43
 8007f3c:	21cb      	movs	r1, #203	; 0xcb
 8007f3e:	489b      	ldr	r0, [pc, #620]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8007f40:	f7f9 fe5c 	bl	8001bfc <EF_PutString>
			LightsButtonState[0] = 0;
 8007f44:	4b97      	ldr	r3, [pc, #604]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 0);
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7fa fdd8 	bl	8002b02 <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007f52:	e11f      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8007f54:	200d      	movs	r0, #13
 8007f56:	f000 fe2b 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007f5a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	2305      	movs	r3, #5
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	2315      	movs	r3, #21
 8007f66:	2221      	movs	r2, #33	; 0x21
 8007f68:	2141      	movs	r1, #65	; 0x41
 8007f6a:	20c8      	movs	r0, #200	; 0xc8
 8007f6c:	f7f9 fbdb 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007f70:	498f      	ldr	r1, [pc, #572]	; (80081b0 <changeLightsStatusTouch+0x2c4>)
 8007f72:	488e      	ldr	r0, [pc, #568]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8007f74:	f009 fd38 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	2243      	movs	r2, #67	; 0x43
 8007f86:	21cb      	movs	r1, #203	; 0xcb
 8007f88:	4888      	ldr	r0, [pc, #544]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8007f8a:	f7f9 fe37 	bl	8001bfc <EF_PutString>
			LightsButtonState[0] = 1;
 8007f8e:	4b85      	ldr	r3, [pc, #532]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 1);
 8007f94:	2101      	movs	r1, #1
 8007f96:	2001      	movs	r0, #1
 8007f98:	f7fa fdb3 	bl	8002b02 <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007f9c:	e0fa      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b5e      	cmp	r3, #94	; 0x5e
 8007fa2:	d950      	bls.n	8008046 <changeLightsStatusTouch+0x15a>
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b74      	cmp	r3, #116	; 0x74
 8007fa8:	d84d      	bhi.n	8008046 <changeLightsStatusTouch+0x15a>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007faa:	4b7e      	ldr	r3, [pc, #504]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d024      	beq.n	8007ffc <changeLightsStatusTouch+0x110>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f000 fdfc 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007fb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2305      	movs	r3, #5
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	2315      	movs	r3, #21
 8007fc4:	2221      	movs	r2, #33	; 0x21
 8007fc6:	215f      	movs	r1, #95	; 0x5f
 8007fc8:	20c8      	movs	r0, #200	; 0xc8
 8007fca:	f7f9 fbac 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007fce:	4976      	ldr	r1, [pc, #472]	; (80081a8 <changeLightsStatusTouch+0x2bc>)
 8007fd0:	4876      	ldr	r0, [pc, #472]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8007fd2:	f009 fd09 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007fd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2261      	movs	r2, #97	; 0x61
 8007fe4:	21cb      	movs	r1, #203	; 0xcb
 8007fe6:	4871      	ldr	r0, [pc, #452]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8007fe8:	f7f9 fe08 	bl	8001bfc <EF_PutString>
			LightsButtonState[1] = 0;
 8007fec:	4b6d      	ldr	r3, [pc, #436]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 0);
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	2002      	movs	r0, #2
 8007ff6:	f7fa fd84 	bl	8002b02 <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007ffa:	e0cb      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8007ffc:	200f      	movs	r0, #15
 8007ffe:	f000 fdd7 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008002:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	2305      	movs	r3, #5
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2315      	movs	r3, #21
 800800e:	2221      	movs	r2, #33	; 0x21
 8008010:	215f      	movs	r1, #95	; 0x5f
 8008012:	20c8      	movs	r0, #200	; 0xc8
 8008014:	f7f9 fb87 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008018:	4965      	ldr	r1, [pc, #404]	; (80081b0 <changeLightsStatusTouch+0x2c4>)
 800801a:	4864      	ldr	r0, [pc, #400]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 800801c:	f009 fce4 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008020:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	2300      	movs	r3, #0
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	2300      	movs	r3, #0
 800802c:	2261      	movs	r2, #97	; 0x61
 800802e:	21cb      	movs	r1, #203	; 0xcb
 8008030:	485e      	ldr	r0, [pc, #376]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8008032:	f7f9 fde3 	bl	8001bfc <EF_PutString>
			LightsButtonState[1] = 1;
 8008036:	4b5b      	ldr	r3, [pc, #364]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8008038:	2201      	movs	r2, #1
 800803a:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 1);
 800803c:	2101      	movs	r1, #1
 800803e:	2002      	movs	r0, #2
 8008040:	f7fa fd5f 	bl	8002b02 <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8008044:	e0a6      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b7c      	cmp	r3, #124	; 0x7c
 800804a:	d950      	bls.n	80080ee <changeLightsStatusTouch+0x202>
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	2b92      	cmp	r3, #146	; 0x92
 8008050:	d84d      	bhi.n	80080ee <changeLightsStatusTouch+0x202>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8008052:	4b54      	ldr	r3, [pc, #336]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8008054:	789b      	ldrb	r3, [r3, #2]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d024      	beq.n	80080a4 <changeLightsStatusTouch+0x1b8>
		{
			SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 800805a:	2012      	movs	r0, #18
 800805c:	f000 fda8 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008060:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	2305      	movs	r3, #5
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	2315      	movs	r3, #21
 800806c:	2221      	movs	r2, #33	; 0x21
 800806e:	217d      	movs	r1, #125	; 0x7d
 8008070:	20c8      	movs	r0, #200	; 0xc8
 8008072:	f7f9 fb58 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008076:	494c      	ldr	r1, [pc, #304]	; (80081a8 <changeLightsStatusTouch+0x2bc>)
 8008078:	484c      	ldr	r0, [pc, #304]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 800807a:	f009 fcb5 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800807e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	2300      	movs	r3, #0
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	2300      	movs	r3, #0
 800808a:	227f      	movs	r2, #127	; 0x7f
 800808c:	21cb      	movs	r1, #203	; 0xcb
 800808e:	4847      	ldr	r0, [pc, #284]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8008090:	f7f9 fdb4 	bl	8001bfc <EF_PutString>
			LightsButtonState[2] = 0;
 8008094:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8008096:	2200      	movs	r2, #0
 8008098:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 0);
 800809a:	2100      	movs	r1, #0
 800809c:	2003      	movs	r0, #3
 800809e:	f7fa fd30 	bl	8002b02 <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 80080a2:	e077      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80080a4:	2011      	movs	r0, #17
 80080a6:	f000 fd83 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80080aa:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	2305      	movs	r3, #5
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2315      	movs	r3, #21
 80080b6:	2221      	movs	r2, #33	; 0x21
 80080b8:	217d      	movs	r1, #125	; 0x7d
 80080ba:	20c8      	movs	r0, #200	; 0xc8
 80080bc:	f7f9 fb33 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80080c0:	493b      	ldr	r1, [pc, #236]	; (80081b0 <changeLightsStatusTouch+0x2c4>)
 80080c2:	483a      	ldr	r0, [pc, #232]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 80080c4:	f009 fc90 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80080c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	2300      	movs	r3, #0
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	227f      	movs	r2, #127	; 0x7f
 80080d6:	21cb      	movs	r1, #203	; 0xcb
 80080d8:	4834      	ldr	r0, [pc, #208]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 80080da:	f7f9 fd8f 	bl	8001bfc <EF_PutString>
			LightsButtonState[2] = 1;
 80080de:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 1);
 80080e4:	2101      	movs	r1, #1
 80080e6:	2003      	movs	r0, #3
 80080e8:	f7fa fd0b 	bl	8002b02 <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 80080ec:	e052      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	2b9a      	cmp	r3, #154	; 0x9a
 80080f2:	d94f      	bls.n	8008194 <changeLightsStatusTouch+0x2a8>
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2bb0      	cmp	r3, #176	; 0xb0
 80080f8:	d84c      	bhi.n	8008194 <changeLightsStatusTouch+0x2a8>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 80080fa:	4b2a      	ldr	r3, [pc, #168]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 80080fc:	78db      	ldrb	r3, [r3, #3]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d024      	beq.n	800814c <changeLightsStatusTouch+0x260>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8008102:	2014      	movs	r0, #20
 8008104:	f000 fd54 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008108:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	2305      	movs	r3, #5
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2315      	movs	r3, #21
 8008114:	2221      	movs	r2, #33	; 0x21
 8008116:	219b      	movs	r1, #155	; 0x9b
 8008118:	20c8      	movs	r0, #200	; 0xc8
 800811a:	f7f9 fb04 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 800811e:	4922      	ldr	r1, [pc, #136]	; (80081a8 <changeLightsStatusTouch+0x2bc>)
 8008120:	4822      	ldr	r0, [pc, #136]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8008122:	f009 fc61 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008126:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	229d      	movs	r2, #157	; 0x9d
 8008134:	21cb      	movs	r1, #203	; 0xcb
 8008136:	481d      	ldr	r0, [pc, #116]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8008138:	f7f9 fd60 	bl	8001bfc <EF_PutString>
			LightsButtonState[3] = 0;
 800813c:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 800813e:	2200      	movs	r2, #0
 8008140:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 0);
 8008142:	2100      	movs	r1, #0
 8008144:	2004      	movs	r0, #4
 8008146:	f7fa fcdc 	bl	8002b02 <EEPROM_LightStateUpdate>
 800814a:	e023      	b.n	8008194 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800814c:	2013      	movs	r0, #19
 800814e:	f000 fd2f 	bl	8008bb0 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008152:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	2305      	movs	r3, #5
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2315      	movs	r3, #21
 800815e:	2221      	movs	r2, #33	; 0x21
 8008160:	219b      	movs	r1, #155	; 0x9b
 8008162:	20c8      	movs	r0, #200	; 0xc8
 8008164:	f7f9 fadf 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008168:	4911      	ldr	r1, [pc, #68]	; (80081b0 <changeLightsStatusTouch+0x2c4>)
 800816a:	4810      	ldr	r0, [pc, #64]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 800816c:	f009 fc3c 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	2300      	movs	r3, #0
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	229d      	movs	r2, #157	; 0x9d
 800817e:	21cb      	movs	r1, #203	; 0xcb
 8008180:	480a      	ldr	r0, [pc, #40]	; (80081ac <changeLightsStatusTouch+0x2c0>)
 8008182:	f7f9 fd3b 	bl	8001bfc <EF_PutString>
			LightsButtonState[3] = 1;
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <changeLightsStatusTouch+0x2b8>)
 8008188:	2201      	movs	r2, #1
 800818a:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 1);
 800818c:	2101      	movs	r1, #1
 800818e:	2004      	movs	r0, #4
 8008190:	f7fa fcb7 	bl	8002b02 <EEPROM_LightStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008194:	4807      	ldr	r0, [pc, #28]	; (80081b4 <changeLightsStatusTouch+0x2c8>)
 8008196:	f7f9 fb17 	bl	80017c8 <EF_SetFont>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	200002ac 	.word	0x200002ac
 80081a8:	08015be8 	.word	0x08015be8
 80081ac:	200002c0 	.word	0x200002c0
 80081b0:	08015bec 	.word	0x08015bec
 80081b4:	080290a0 	.word	0x080290a0

080081b8 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af02      	add	r7, sp, #8
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	2b3b      	cmp	r3, #59	; 0x3b
 80081c6:	d966      	bls.n	8008296 <predefinedActivityTouchAction+0xde>
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b64      	cmp	r3, #100	; 0x64
 80081cc:	d863      	bhi.n	8008296 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 80081ce:	4b69      	ldr	r3, [pc, #420]	; (8008374 <predefinedActivityTouchAction+0x1bc>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d02f      	beq.n	8008236 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 80081d6:	4b67      	ldr	r3, [pc, #412]	; (8008374 <predefinedActivityTouchAction+0x1bc>)
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80081dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	230a      	movs	r3, #10
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2328      	movs	r3, #40	; 0x28
 80081e8:	2278      	movs	r2, #120	; 0x78
 80081ea:	213c      	movs	r1, #60	; 0x3c
 80081ec:	2064      	movs	r0, #100	; 0x64
 80081ee:	f7f9 fa9a 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80081f2:	4961      	ldr	r1, [pc, #388]	; (8008378 <predefinedActivityTouchAction+0x1c0>)
 80081f4:	4861      	ldr	r0, [pc, #388]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 80081f6:	f009 fbf7 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	2300      	movs	r3, #0
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2300      	movs	r3, #0
 8008206:	223e      	movs	r2, #62	; 0x3e
 8008208:	2177      	movs	r1, #119	; 0x77
 800820a:	485c      	ldr	r0, [pc, #368]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 800820c:	f7f9 fcf6 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008210:	495b      	ldr	r1, [pc, #364]	; (8008380 <predefinedActivityTouchAction+0x1c8>)
 8008212:	485a      	ldr	r0, [pc, #360]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 8008214:	f009 fbe8 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008218:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	2300      	movs	r3, #0
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	2250      	movs	r2, #80	; 0x50
 8008226:	2193      	movs	r1, #147	; 0x93
 8008228:	4854      	ldr	r0, [pc, #336]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 800822a:	f7f9 fce7 	bl	8001bfc <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 800822e:	2000      	movs	r0, #0
 8008230:	f7fc fe12 	bl	8004e58 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008234:	e099      	b.n	800836a <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008236:	4b4f      	ldr	r3, [pc, #316]	; (8008374 <predefinedActivityTouchAction+0x1bc>)
 8008238:	2201      	movs	r2, #1
 800823a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800823c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	230a      	movs	r3, #10
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	2328      	movs	r3, #40	; 0x28
 8008248:	2278      	movs	r2, #120	; 0x78
 800824a:	213c      	movs	r1, #60	; 0x3c
 800824c:	2064      	movs	r0, #100	; 0x64
 800824e:	f7f9 fa6a 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8008252:	4949      	ldr	r1, [pc, #292]	; (8008378 <predefinedActivityTouchAction+0x1c0>)
 8008254:	4849      	ldr	r0, [pc, #292]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 8008256:	f009 fbc7 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800825a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	2300      	movs	r3, #0
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	2300      	movs	r3, #0
 8008266:	223e      	movs	r2, #62	; 0x3e
 8008268:	2177      	movs	r1, #119	; 0x77
 800826a:	4844      	ldr	r0, [pc, #272]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 800826c:	f7f9 fcc6 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008270:	4944      	ldr	r1, [pc, #272]	; (8008384 <predefinedActivityTouchAction+0x1cc>)
 8008272:	4842      	ldr	r0, [pc, #264]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 8008274:	f009 fbb8 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008278:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	2300      	movs	r3, #0
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	2250      	movs	r2, #80	; 0x50
 8008286:	2193      	movs	r1, #147	; 0x93
 8008288:	483c      	ldr	r0, [pc, #240]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 800828a:	f7f9 fcb7 	bl	8001bfc <EF_PutString>
			predefinedActivityKarmienie(1);
 800828e:	2001      	movs	r0, #1
 8008290:	f7fc fde2 	bl	8004e58 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008294:	e069      	b.n	800836a <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	2b77      	cmp	r3, #119	; 0x77
 800829a:	d966      	bls.n	800836a <predefinedActivityTouchAction+0x1b2>
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	2ba0      	cmp	r3, #160	; 0xa0
 80082a0:	d863      	bhi.n	800836a <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 80082a2:	4b34      	ldr	r3, [pc, #208]	; (8008374 <predefinedActivityTouchAction+0x1bc>)
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d02f      	beq.n	800830a <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 80082aa:	4b32      	ldr	r3, [pc, #200]	; (8008374 <predefinedActivityTouchAction+0x1bc>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80082b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	230a      	movs	r3, #10
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	2328      	movs	r3, #40	; 0x28
 80082bc:	2278      	movs	r2, #120	; 0x78
 80082be:	2178      	movs	r1, #120	; 0x78
 80082c0:	2064      	movs	r0, #100	; 0x64
 80082c2:	f7f9 fa30 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80082c6:	4930      	ldr	r1, [pc, #192]	; (8008388 <predefinedActivityTouchAction+0x1d0>)
 80082c8:	482c      	ldr	r0, [pc, #176]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 80082ca:	f009 fb8d 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80082ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	2300      	movs	r3, #0
 80082da:	227a      	movs	r2, #122	; 0x7a
 80082dc:	2169      	movs	r1, #105	; 0x69
 80082de:	4827      	ldr	r0, [pc, #156]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 80082e0:	f7f9 fc8c 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80082e4:	4926      	ldr	r1, [pc, #152]	; (8008380 <predefinedActivityTouchAction+0x1c8>)
 80082e6:	4825      	ldr	r0, [pc, #148]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 80082e8:	f009 fb7e 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80082ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	2300      	movs	r3, #0
 80082f8:	228c      	movs	r2, #140	; 0x8c
 80082fa:	2193      	movs	r1, #147	; 0x93
 80082fc:	481f      	ldr	r0, [pc, #124]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 80082fe:	f7f9 fc7d 	bl	8001bfc <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008302:	2000      	movs	r0, #0
 8008304:	f7fc fd8e 	bl	8004e24 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008308:	e02f      	b.n	800836a <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 800830a:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <predefinedActivityTouchAction+0x1bc>)
 800830c:	2201      	movs	r2, #1
 800830e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008310:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	230a      	movs	r3, #10
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2328      	movs	r3, #40	; 0x28
 800831c:	2278      	movs	r2, #120	; 0x78
 800831e:	2178      	movs	r1, #120	; 0x78
 8008320:	2064      	movs	r0, #100	; 0x64
 8008322:	f7f9 fa00 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008326:	4918      	ldr	r1, [pc, #96]	; (8008388 <predefinedActivityTouchAction+0x1d0>)
 8008328:	4814      	ldr	r0, [pc, #80]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 800832a:	f009 fb5d 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800832e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	2300      	movs	r3, #0
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	227a      	movs	r2, #122	; 0x7a
 800833c:	2169      	movs	r1, #105	; 0x69
 800833e:	480f      	ldr	r0, [pc, #60]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 8008340:	f7f9 fc5c 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008344:	490f      	ldr	r1, [pc, #60]	; (8008384 <predefinedActivityTouchAction+0x1cc>)
 8008346:	480d      	ldr	r0, [pc, #52]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 8008348:	f009 fb4e 	bl	80119e8 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800834c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	2300      	movs	r3, #0
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	2300      	movs	r3, #0
 8008358:	228c      	movs	r2, #140	; 0x8c
 800835a:	2193      	movs	r1, #147	; 0x93
 800835c:	4807      	ldr	r0, [pc, #28]	; (800837c <predefinedActivityTouchAction+0x1c4>)
 800835e:	f7f9 fc4d 	bl	8001bfc <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8008362:	2001      	movs	r0, #1
 8008364:	f7fc fd5e 	bl	8004e24 <predefinedActivityCzyszczenie>
}
 8008368:	e7ff      	b.n	800836a <predefinedActivityTouchAction+0x1b2>
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200002b0 	.word	0x200002b0
 8008378:	08015bf0 	.word	0x08015bf0
 800837c:	200002c0 	.word	0x200002c0
 8008380:	08015be8 	.word	0x08015be8
 8008384:	08015bec 	.word	0x08015bec
 8008388:	08015bfc 	.word	0x08015bfc

0800838c <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af02      	add	r7, sp, #8
 8008392:	4603      	mov	r3, r0
 8008394:	460a      	mov	r2, r1
 8008396:	71fb      	strb	r3, [r7, #7]
 8008398:	4613      	mov	r3, r2
 800839a:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2bd8      	cmp	r3, #216	; 0xd8
 80083a0:	d92f      	bls.n	8008402 <increaseNumberOfWSLedOnTFT+0x76>
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	2bf7      	cmp	r3, #247	; 0xf7
 80083a6:	d82c      	bhi.n	8008402 <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 80083a8:	4b38      	ldr	r3, [pc, #224]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b61      	cmp	r3, #97	; 0x61
 80083ae:	d806      	bhi.n	80083be <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 80083b0:	4b36      	ldr	r3, [pc, #216]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	4b34      	ldr	r3, [pc, #208]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	e002      	b.n	80083c4 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 80083be:	4b33      	ldr	r3, [pc, #204]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80083c4:	4b31      	ldr	r3, [pc, #196]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d807      	bhi.n	80083dc <increaseNumberOfWSLedOnTFT+0x50>
 80083cc:	4b2f      	ldr	r3, [pc, #188]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	492f      	ldr	r1, [pc, #188]	; (8008490 <increaseNumberOfWSLedOnTFT+0x104>)
 80083d4:	482f      	ldr	r0, [pc, #188]	; (8008494 <increaseNumberOfWSLedOnTFT+0x108>)
 80083d6:	f009 fb07 	bl	80119e8 <siprintf>
 80083da:	e006      	b.n	80083ea <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 80083dc:	4b2b      	ldr	r3, [pc, #172]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	492d      	ldr	r1, [pc, #180]	; (8008498 <increaseNumberOfWSLedOnTFT+0x10c>)
 80083e4:	482b      	ldr	r0, [pc, #172]	; (8008494 <increaseNumberOfWSLedOnTFT+0x108>)
 80083e6:	f009 faff 	bl	80119e8 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80083ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	2301      	movs	r3, #1
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	223c      	movs	r2, #60	; 0x3c
 80083f8:	21ac      	movs	r1, #172	; 0xac
 80083fa:	4826      	ldr	r0, [pc, #152]	; (8008494 <increaseNumberOfWSLedOnTFT+0x108>)
 80083fc:	f7f9 fbfe 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008400:	e03f      	b.n	8008482 <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	2bfb      	cmp	r3, #251	; 0xfb
 8008406:	d93c      	bls.n	8008482 <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 8008408:	4b20      	ldr	r3, [pc, #128]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b59      	cmp	r3, #89	; 0x59
 800840e:	d806      	bhi.n	800841e <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 8008410:	4b1e      	ldr	r3, [pc, #120]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	330a      	adds	r3, #10
 8008416:	b2da      	uxtb	r2, r3
 8008418:	4b1c      	ldr	r3, [pc, #112]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	e013      	b.n	8008446 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 800841e:	4b1b      	ldr	r3, [pc, #108]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f103 020a 	add.w	r2, r3, #10
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <increaseNumberOfWSLedOnTFT+0x110>)
 8008428:	fb83 1302 	smull	r1, r3, r3, r2
 800842c:	4413      	add	r3, r2
 800842e:	1199      	asrs	r1, r3, #6
 8008430:	17d3      	asrs	r3, r2, #31
 8008432:	1ac9      	subs	r1, r1, r3
 8008434:	460b      	mov	r3, r1
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	440b      	add	r3, r1
 800843a:	0159      	lsls	r1, r3, #5
 800843c:	440b      	add	r3, r1
 800843e:	1ad1      	subs	r1, r2, r3
 8008440:	b2ca      	uxtb	r2, r1
 8008442:	4b12      	ldr	r3, [pc, #72]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 8008444:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008446:	4b11      	ldr	r3, [pc, #68]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b09      	cmp	r3, #9
 800844c:	d807      	bhi.n	800845e <increaseNumberOfWSLedOnTFT+0xd2>
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	490e      	ldr	r1, [pc, #56]	; (8008490 <increaseNumberOfWSLedOnTFT+0x104>)
 8008456:	480f      	ldr	r0, [pc, #60]	; (8008494 <increaseNumberOfWSLedOnTFT+0x108>)
 8008458:	f009 fac6 	bl	80119e8 <siprintf>
 800845c:	e006      	b.n	800846c <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <increaseNumberOfWSLedOnTFT+0x100>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	490c      	ldr	r1, [pc, #48]	; (8008498 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008466:	480b      	ldr	r0, [pc, #44]	; (8008494 <increaseNumberOfWSLedOnTFT+0x108>)
 8008468:	f009 fabe 	bl	80119e8 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800846c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	2301      	movs	r3, #1
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	2300      	movs	r3, #0
 8008478:	223c      	movs	r2, #60	; 0x3c
 800847a:	21ac      	movs	r1, #172	; 0xac
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <increaseNumberOfWSLedOnTFT+0x108>)
 800847e:	f7f9 fbbd 	bl	8001bfc <EF_PutString>
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000033 	.word	0x20000033
 8008490:	08015c08 	.word	0x08015c08
 8008494:	200002c0 	.word	0x200002c0
 8008498:	08015c10 	.word	0x08015c10
 800849c:	a57eb503 	.word	0xa57eb503

080084a0 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	460a      	mov	r2, r1
 80084aa:	71fb      	strb	r3, [r7, #7]
 80084ac:	4613      	mov	r3, r2
 80084ae:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 80084b0:	79bb      	ldrb	r3, [r7, #6]
 80084b2:	2b5e      	cmp	r3, #94	; 0x5e
 80084b4:	d91e      	bls.n	80084f4 <changeTypeOfWSLights+0x54>
 80084b6:	79bb      	ldrb	r3, [r7, #6]
 80084b8:	2b74      	cmp	r3, #116	; 0x74
 80084ba:	d81b      	bhi.n	80084f4 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	2b95      	cmp	r3, #149	; 0x95
 80084c0:	d906      	bls.n	80084d0 <changeTypeOfWSLights+0x30>
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	2bbe      	cmp	r3, #190	; 0xbe
 80084c6:	d803      	bhi.n	80084d0 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 80084c8:	201d      	movs	r0, #29
 80084ca:	f000 fb71 	bl	8008bb0 <SendComand>
 80084ce:	e010      	b.n	80084f2 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2bc9      	cmp	r3, #201	; 0xc9
 80084d4:	d906      	bls.n	80084e4 <changeTypeOfWSLights+0x44>
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	2bf2      	cmp	r3, #242	; 0xf2
 80084da:	d803      	bhi.n	80084e4 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 80084dc:	201e      	movs	r0, #30
 80084de:	f000 fb67 	bl	8008bb0 <SendComand>
 80084e2:	e006      	b.n	80084f2 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	2bfd      	cmp	r3, #253	; 0xfd
 80084e8:	d962      	bls.n	80085b0 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 80084ea:	201f      	movs	r0, #31
 80084ec:	f000 fb60 	bl	8008bb0 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80084f0:	e05e      	b.n	80085b0 <changeTypeOfWSLights+0x110>
 80084f2:	e05d      	b.n	80085b0 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80084f4:	79bb      	ldrb	r3, [r7, #6]
 80084f6:	2b7c      	cmp	r3, #124	; 0x7c
 80084f8:	d91e      	bls.n	8008538 <changeTypeOfWSLights+0x98>
 80084fa:	79bb      	ldrb	r3, [r7, #6]
 80084fc:	2b92      	cmp	r3, #146	; 0x92
 80084fe:	d81b      	bhi.n	8008538 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b95      	cmp	r3, #149	; 0x95
 8008504:	d906      	bls.n	8008514 <changeTypeOfWSLights+0x74>
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	2bbe      	cmp	r3, #190	; 0xbe
 800850a:	d803      	bhi.n	8008514 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 800850c:	2020      	movs	r0, #32
 800850e:	f000 fb4f 	bl	8008bb0 <SendComand>
 8008512:	e010      	b.n	8008536 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	2bc9      	cmp	r3, #201	; 0xc9
 8008518:	d906      	bls.n	8008528 <changeTypeOfWSLights+0x88>
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	2bf2      	cmp	r3, #242	; 0xf2
 800851e:	d803      	bhi.n	8008528 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008520:	2021      	movs	r0, #33	; 0x21
 8008522:	f000 fb45 	bl	8008bb0 <SendComand>
 8008526:	e006      	b.n	8008536 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2bfd      	cmp	r3, #253	; 0xfd
 800852c:	d942      	bls.n	80085b4 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 800852e:	2022      	movs	r0, #34	; 0x22
 8008530:	f000 fb3e 	bl	8008bb0 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008534:	e03e      	b.n	80085b4 <changeTypeOfWSLights+0x114>
 8008536:	e03d      	b.n	80085b4 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008538:	79bb      	ldrb	r3, [r7, #6]
 800853a:	2b9b      	cmp	r3, #155	; 0x9b
 800853c:	d91e      	bls.n	800857c <changeTypeOfWSLights+0xdc>
 800853e:	79bb      	ldrb	r3, [r7, #6]
 8008540:	2bb1      	cmp	r3, #177	; 0xb1
 8008542:	d81b      	bhi.n	800857c <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b13      	cmp	r3, #19
 8008548:	d906      	bls.n	8008558 <changeTypeOfWSLights+0xb8>
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	2b64      	cmp	r3, #100	; 0x64
 800854e:	d803      	bhi.n	8008558 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008550:	2023      	movs	r0, #35	; 0x23
 8008552:	f000 fb2d 	bl	8008bb0 <SendComand>
 8008556:	e010      	b.n	800857a <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	2b77      	cmp	r3, #119	; 0x77
 800855c:	d906      	bls.n	800856c <changeTypeOfWSLights+0xcc>
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2bc8      	cmp	r3, #200	; 0xc8
 8008562:	d803      	bhi.n	800856c <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008564:	201c      	movs	r0, #28
 8008566:	f000 fb23 	bl	8008bb0 <SendComand>
 800856a:	e006      	b.n	800857a <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	2bdb      	cmp	r3, #219	; 0xdb
 8008570:	d922      	bls.n	80085b8 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 8008572:	2024      	movs	r0, #36	; 0x24
 8008574:	f000 fb1c 	bl	8008bb0 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008578:	e01e      	b.n	80085b8 <changeTypeOfWSLights+0x118>
 800857a:	e01d      	b.n	80085b8 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 800857c:	79bb      	ldrb	r3, [r7, #6]
 800857e:	2bba      	cmp	r3, #186	; 0xba
 8008580:	d91b      	bls.n	80085ba <changeTypeOfWSLights+0x11a>
 8008582:	79bb      	ldrb	r3, [r7, #6]
 8008584:	2bd0      	cmp	r3, #208	; 0xd0
 8008586:	d818      	bhi.n	80085ba <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	2b45      	cmp	r3, #69	; 0x45
 800858c:	d906      	bls.n	800859c <changeTypeOfWSLights+0xfc>
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	2b96      	cmp	r3, #150	; 0x96
 8008592:	d803      	bhi.n	800859c <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008594:	2026      	movs	r0, #38	; 0x26
 8008596:	f000 fb0b 	bl	8008bb0 <SendComand>
 800859a:	e00e      	b.n	80085ba <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2ba9      	cmp	r3, #169	; 0xa9
 80085a0:	d90b      	bls.n	80085ba <changeTypeOfWSLights+0x11a>
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	2bfa      	cmp	r3, #250	; 0xfa
 80085a6:	d808      	bhi.n	80085ba <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 80085a8:	2027      	movs	r0, #39	; 0x27
 80085aa:	f000 fb01 	bl	8008bb0 <SendComand>
		}
	}
}
 80085ae:	e004      	b.n	80085ba <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80085b0:	bf00      	nop
 80085b2:	e002      	b.n	80085ba <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80085b4:	bf00      	nop
 80085b6:	e000      	b.n	80085ba <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80085b8:	bf00      	nop
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b094      	sub	sp, #80	; 0x50
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80085cc:	f107 0308 	add.w	r3, r7, #8
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f9e3 	bl	800999e <UARTDMA_GetLineFromReceiveBuffer>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d15f      	bne.n	800869e <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4931      	ldr	r1, [pc, #196]	; (80086a8 <UART_ParseLine+0xe4>)
 80085e4:	4618      	mov	r0, r3
 80085e6:	f00a f857 	bl	8012698 <strtok>
 80085ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80085ec:	492f      	ldr	r1, [pc, #188]	; (80086ac <UART_ParseLine+0xe8>)
 80085ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80085f0:	f7f7 fdf6 	bl	80001e0 <strcmp>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80085fa:	f000 f869 	bl	80086d0 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80085fe:	e04e      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8008600:	492b      	ldr	r1, [pc, #172]	; (80086b0 <UART_ParseLine+0xec>)
 8008602:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008604:	f7f7 fdec 	bl	80001e0 <strcmp>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 800860e:	f000 f8ad 	bl	800876c <UART_ParseAnswStatus>
}
 8008612:	e044      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8008614:	4927      	ldr	r1, [pc, #156]	; (80086b4 <UART_ParseLine+0xf0>)
 8008616:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008618:	f7f7 fde2 	bl	80001e0 <strcmp>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8008622:	f000 f8ab 	bl	800877c <UART_ParseAnswTemp>
}
 8008626:	e03a      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8008628:	4923      	ldr	r1, [pc, #140]	; (80086b8 <UART_ParseLine+0xf4>)
 800862a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800862c:	f7f7 fdd8 	bl	80001e0 <strcmp>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8008636:	f000 f953 	bl	80088e0 <UART_ParseAnswPres>
}
 800863a:	e030      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 800863c:	491f      	ldr	r1, [pc, #124]	; (80086bc <UART_ParseLine+0xf8>)
 800863e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008640:	f7f7 fdce 	bl	80001e0 <strcmp>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 800864a:	f000 f9d7 	bl	80089fc <UART_ParseAnswChangeRelayState>
}
 800864e:	e026      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8008650:	491b      	ldr	r1, [pc, #108]	; (80086c0 <UART_ParseLine+0xfc>)
 8008652:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008654:	f7f7 fdc4 	bl	80001e0 <strcmp>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d102      	bne.n	8008664 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 800865e:	f000 f9d4 	bl	8008a0a <UART_ParseAnswChangeLightState>
}
 8008662:	e01c      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008664:	4917      	ldr	r1, [pc, #92]	; (80086c4 <UART_ParseLine+0x100>)
 8008666:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008668:	f7f7 fdba 	bl	80001e0 <strcmp>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d102      	bne.n	8008678 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8008672:	f000 f9d1 	bl	8008a18 <UART_ParseAnswRelayStateStatus>
}
 8008676:	e012      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008678:	4913      	ldr	r1, [pc, #76]	; (80086c8 <UART_ParseLine+0x104>)
 800867a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800867c:	f7f7 fdb0 	bl	80001e0 <strcmp>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d102      	bne.n	800868c <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8008686:	f000 fa2d 	bl	8008ae4 <UART_ParseAnswLightsStateStatus>
}
 800868a:	e008      	b.n	800869e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 800868c:	490f      	ldr	r1, [pc, #60]	; (80086cc <UART_ParseLine+0x108>)
 800868e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008690:	f7f7 fda6 	bl	80001e0 <strcmp>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 800869a:	f000 f96d 	bl	8008978 <UART_ParseAnswDist>
}
 800869e:	bf00      	nop
 80086a0:	3750      	adds	r7, #80	; 0x50
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08015c14 	.word	0x08015c14
 80086ac:	08015c18 	.word	0x08015c18
 80086b0:	08015c1c 	.word	0x08015c1c
 80086b4:	08015c24 	.word	0x08015c24
 80086b8:	08015c2c 	.word	0x08015c2c
 80086bc:	08015c34 	.word	0x08015c34
 80086c0:	08015c40 	.word	0x08015c40
 80086c4:	08015c4c 	.word	0x08015c4c
 80086c8:	08015c58 	.word	0x08015c58
 80086cc:	08015c64 	.word	0x08015c64

080086d0 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80086d6:	491f      	ldr	r1, [pc, #124]	; (8008754 <UART_ParseLED+0x84>)
 80086d8:	2000      	movs	r0, #0
 80086da:	f009 ffdd 	bl	8012698 <strtok>
 80086de:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d031      	beq.n	800874c <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b2f      	cmp	r3, #47	; 0x2f
 80086ee:	d903      	bls.n	80086f8 <UART_ParseLED+0x28>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b39      	cmp	r3, #57	; 0x39
 80086f6:	d904      	bls.n	8008702 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80086f8:	4917      	ldr	r1, [pc, #92]	; (8008758 <UART_ParseLED+0x88>)
 80086fa:	4818      	ldr	r0, [pc, #96]	; (800875c <UART_ParseLED+0x8c>)
 80086fc:	f001 f980 	bl	8009a00 <UARTDMA_Print>
			return;	// And exit parsing
 8008700:	e024      	b.n	800874c <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f008 fab9 	bl	8010c7a <atoi>
 8008708:	4603      	mov	r3, r0
 800870a:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d10a      	bne.n	8008728 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8008712:	2200      	movs	r2, #0
 8008714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008718:	4811      	ldr	r0, [pc, #68]	; (8008760 <UART_ParseLED+0x90>)
 800871a:	f002 fc05 	bl	800af28 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 800871e:	4911      	ldr	r1, [pc, #68]	; (8008764 <UART_ParseLED+0x94>)
 8008720:	480e      	ldr	r0, [pc, #56]	; (800875c <UART_ParseLED+0x8c>)
 8008722:	f001 f96d 	bl	8009a00 <UARTDMA_Print>
 8008726:	e011      	b.n	800874c <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800872e:	2201      	movs	r2, #1
 8008730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008734:	480a      	ldr	r0, [pc, #40]	; (8008760 <UART_ParseLED+0x90>)
 8008736:	f002 fbf7 	bl	800af28 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800873a:	490b      	ldr	r1, [pc, #44]	; (8008768 <UART_ParseLED+0x98>)
 800873c:	4807      	ldr	r0, [pc, #28]	; (800875c <UART_ParseLED+0x8c>)
 800873e:	f001 f95f 	bl	8009a00 <UARTDMA_Print>
 8008742:	e003      	b.n	800874c <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008744:	4904      	ldr	r1, [pc, #16]	; (8008758 <UART_ParseLED+0x88>)
 8008746:	4805      	ldr	r0, [pc, #20]	; (800875c <UART_ParseLED+0x8c>)
 8008748:	f001 f95a 	bl	8009a00 <UARTDMA_Print>
		}
	}
}
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	08015c6c 	.word	0x08015c6c
 8008758:	08015c70 	.word	0x08015c70
 800875c:	200004f0 	.word	0x200004f0
 8008760:	40020800 	.word	0x40020800
 8008764:	08015c80 	.word	0x08015c80
 8008768:	08015c8c 	.word	0x08015c8c

0800876c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8008786:	494e      	ldr	r1, [pc, #312]	; (80088c0 <UART_ParseAnswTemp+0x144>)
 8008788:	2000      	movs	r0, #0
 800878a:	f009 ff85 	bl	8012698 <strtok>
 800878e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 808f 	beq.w	80088b8 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 800879a:	68b8      	ldr	r0, [r7, #8]
 800879c:	f008 fa6d 	bl	8010c7a <atoi>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d010      	beq.n	80087ce <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80087ac:	4944      	ldr	r1, [pc, #272]	; (80088c0 <UART_ParseAnswTemp+0x144>)
 80087ae:	2000      	movs	r0, #0
 80087b0:	f009 ff72 	bl	8012698 <strtok>
 80087b4:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f008 fa5c 	bl	8010c74 <atof>
 80087bc:	ec53 2b10 	vmov	r2, r3, d0
 80087c0:	4610      	mov	r0, r2
 80087c2:	4619      	mov	r1, r3
 80087c4:	f7f8 fa28 	bl	8000c18 <__aeabi_d2f>
 80087c8:	4603      	mov	r3, r0
 80087ca:	4a3e      	ldr	r2, [pc, #248]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 80087cc:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 80087ce:	4b3e      	ldr	r3, [pc, #248]	; (80088c8 <UART_ParseAnswTemp+0x14c>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d170      	bne.n	80088b8 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d120      	bne.n	800881e <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80087dc:	483b      	ldr	r0, [pc, #236]	; (80088cc <UART_ParseAnswTemp+0x150>)
 80087de:	f7f8 fff3 	bl	80017c8 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80087e2:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7f7 fec6 	bl	8000578 <__aeabi_f2d>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4937      	ldr	r1, [pc, #220]	; (80088d0 <UART_ParseAnswTemp+0x154>)
 80087f2:	4838      	ldr	r0, [pc, #224]	; (80088d4 <UART_ParseAnswTemp+0x158>)
 80087f4:	f009 f8f8 	bl	80119e8 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80087f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	2301      	movs	r3, #1
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	2250      	movs	r2, #80	; 0x50
 8008806:	2114      	movs	r1, #20
 8008808:	4832      	ldr	r0, [pc, #200]	; (80088d4 <UART_ParseAnswTemp+0x158>)
 800880a:	f7f9 f9f7 	bl	8001bfc <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 800880e:	4b2d      	ldr	r3, [pc, #180]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 8008810:	edd3 7a00 	vldr	s15, [r3]
 8008814:	eeb0 0a67 	vmov.f32	s0, s15
 8008818:	f7f8 fc1c 	bl	8001054 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 800881c:	e04c      	b.n	80088b8 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d149      	bne.n	80088b8 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8008824:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 8008826:	edd3 7a00 	vldr	s15, [r3]
 800882a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800882e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008832:	d11d      	bne.n	8008870 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8008834:	4b28      	ldr	r3, [pc, #160]	; (80088d8 <UART_ParseAnswTemp+0x15c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a22      	ldr	r2, [pc, #136]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 800883a:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 800883c:	4823      	ldr	r0, [pc, #140]	; (80088cc <UART_ParseAnswTemp+0x150>)
 800883e:	f7f8 ffc3 	bl	80017c8 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008842:	4b20      	ldr	r3, [pc, #128]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f7f7 fe96 	bl	8000578 <__aeabi_f2d>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4922      	ldr	r1, [pc, #136]	; (80088dc <UART_ParseAnswTemp+0x160>)
 8008852:	4820      	ldr	r0, [pc, #128]	; (80088d4 <UART_ParseAnswTemp+0x158>)
 8008854:	f009 f8c8 	bl	80119e8 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008858:	f24c 6318 	movw	r3, #50712	; 0xc618
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	2301      	movs	r3, #1
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2300      	movs	r3, #0
 8008864:	226e      	movs	r2, #110	; 0x6e
 8008866:	2114      	movs	r1, #20
 8008868:	481a      	ldr	r0, [pc, #104]	; (80088d4 <UART_ParseAnswTemp+0x158>)
 800886a:	f7f9 f9c7 	bl	8001bfc <EF_PutString>
	}
 800886e:	e023      	b.n	80088b8 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008870:	4816      	ldr	r0, [pc, #88]	; (80088cc <UART_ParseAnswTemp+0x150>)
 8008872:	f7f8 ffa9 	bl	80017c8 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008876:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f7f7 fe7c 	bl	8000578 <__aeabi_f2d>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4915      	ldr	r1, [pc, #84]	; (80088dc <UART_ParseAnswTemp+0x160>)
 8008886:	4813      	ldr	r0, [pc, #76]	; (80088d4 <UART_ParseAnswTemp+0x158>)
 8008888:	f009 f8ae 	bl	80119e8 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800888c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	2301      	movs	r3, #1
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	226e      	movs	r2, #110	; 0x6e
 800889a:	2114      	movs	r1, #20
 800889c:	480d      	ldr	r0, [pc, #52]	; (80088d4 <UART_ParseAnswTemp+0x158>)
 800889e:	f7f9 f9ad 	bl	8001bfc <EF_PutString>
							LCTemp = CTemp;
 80088a2:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0c      	ldr	r2, [pc, #48]	; (80088d8 <UART_ParseAnswTemp+0x15c>)
 80088a8:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 80088aa:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <UART_ParseAnswTemp+0x148>)
 80088ac:	edd3 7a00 	vldr	s15, [r3]
 80088b0:	eeb0 0a67 	vmov.f32	s0, s15
 80088b4:	f7f8 fbb2 	bl	800101c <ESP_SendCurrentTempInside>
	}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	08015c6c 	.word	0x08015c6c
 80088c4:	20000294 	.word	0x20000294
 80088c8:	20000290 	.word	0x20000290
 80088cc:	080290a0 	.word	0x080290a0
 80088d0:	08015c98 	.word	0x08015c98
 80088d4:	200002c0 	.word	0x200002c0
 80088d8:	20000298 	.word	0x20000298
 80088dc:	08015cac 	.word	0x08015cac

080088e0 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80088e6:	491e      	ldr	r1, [pc, #120]	; (8008960 <UART_ParseAnswPres+0x80>)
 80088e8:	2000      	movs	r0, #0
 80088ea:	f009 fed5 	bl	8012698 <strtok>
 80088ee:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d02f      	beq.n	8008958 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f008 f9bb 	bl	8010c74 <atof>
 80088fe:	ec53 2b10 	vmov	r2, r3, d0
 8008902:	4610      	mov	r0, r2
 8008904:	4619      	mov	r1, r3
 8008906:	f7f8 f987 	bl	8000c18 <__aeabi_d2f>
 800890a:	4603      	mov	r3, r0
 800890c:	4a15      	ldr	r2, [pc, #84]	; (8008964 <UART_ParseAnswPres+0x84>)
 800890e:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008910:	4b15      	ldr	r3, [pc, #84]	; (8008968 <UART_ParseAnswPres+0x88>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d11f      	bne.n	8008958 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008918:	4814      	ldr	r0, [pc, #80]	; (800896c <UART_ParseAnswPres+0x8c>)
 800891a:	f7f8 ff55 	bl	80017c8 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <UART_ParseAnswPres+0x84>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f7f7 fe28 	bl	8000578 <__aeabi_f2d>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4910      	ldr	r1, [pc, #64]	; (8008970 <UART_ParseAnswPres+0x90>)
 800892e:	4811      	ldr	r0, [pc, #68]	; (8008974 <UART_ParseAnswPres+0x94>)
 8008930:	f009 f85a 	bl	80119e8 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008934:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2301      	movs	r3, #1
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	22aa      	movs	r2, #170	; 0xaa
 8008942:	2114      	movs	r1, #20
 8008944:	480b      	ldr	r0, [pc, #44]	; (8008974 <UART_ParseAnswPres+0x94>)
 8008946:	f7f9 f959 	bl	8001bfc <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 800894a:	4b06      	ldr	r3, [pc, #24]	; (8008964 <UART_ParseAnswPres+0x84>)
 800894c:	edd3 7a00 	vldr	s15, [r3]
 8008950:	eeb0 0a67 	vmov.f32	s0, s15
 8008954:	f7f8 fb9a 	bl	800108c <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	08015c6c 	.word	0x08015c6c
 8008964:	2000029c 	.word	0x2000029c
 8008968:	20000290 	.word	0x20000290
 800896c:	080290a0 	.word	0x080290a0
 8008970:	08015cc0 	.word	0x08015cc0
 8008974:	200002c0 	.word	0x200002c0

08008978 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800897e:	4919      	ldr	r1, [pc, #100]	; (80089e4 <UART_ParseAnswDist+0x6c>)
 8008980:	2000      	movs	r0, #0
 8008982:	f009 fe89 	bl	8012698 <strtok>
 8008986:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d024      	beq.n	80089da <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f008 f972 	bl	8010c7a <atoi>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <UART_ParseAnswDist+0x70>)
 800899c:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 800899e:	4b13      	ldr	r3, [pc, #76]	; (80089ec <UART_ParseAnswDist+0x74>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d119      	bne.n	80089da <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80089a6:	4812      	ldr	r0, [pc, #72]	; (80089f0 <UART_ParseAnswDist+0x78>)
 80089a8:	f7f8 ff0e 	bl	80017c8 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <UART_ParseAnswDist+0x70>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	4910      	ldr	r1, [pc, #64]	; (80089f4 <UART_ParseAnswDist+0x7c>)
 80089b4:	4810      	ldr	r0, [pc, #64]	; (80089f8 <UART_ParseAnswDist+0x80>)
 80089b6:	f009 f817 	bl	80119e8 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80089ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	2301      	movs	r3, #1
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	228c      	movs	r2, #140	; 0x8c
 80089c8:	21ad      	movs	r1, #173	; 0xad
 80089ca:	480b      	ldr	r0, [pc, #44]	; (80089f8 <UART_ParseAnswDist+0x80>)
 80089cc:	f7f9 f916 	bl	8001bfc <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <UART_ParseAnswDist+0x70>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7f8 fb75 	bl	80010c4 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	08015c6c 	.word	0x08015c6c
 80089e8:	200002a4 	.word	0x200002a4
 80089ec:	20000290 	.word	0x20000290
 80089f0:	080290a0 	.word	0x080290a0
 80089f4:	08015cd8 	.word	0x08015cd8
 80089f8:	200002c0 	.word	0x200002c0

080089fc <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
	//TODO!
}
 8008a00:	bf00      	nop
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	af00      	add	r7, sp, #0
	//TODO!
}
 8008a0e:	bf00      	nop
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008a1e:	2300      	movs	r3, #0
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	e04a      	b.n	8008aba <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008a24:	4928      	ldr	r1, [pc, #160]	; (8008ac8 <UART_ParseAnswRelayStateStatus+0xb0>)
 8008a26:	2000      	movs	r0, #0
 8008a28:	f009 fe36 	bl	8012698 <strtok>
 8008a2c:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d02f      	beq.n	8008a96 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008a36:	2300      	movs	r3, #0
 8008a38:	71bb      	strb	r3, [r7, #6]
 8008a3a:	e025      	b.n	8008a88 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008a3c:	79bb      	ldrb	r3, [r7, #6]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b2f      	cmp	r3, #47	; 0x2f
 8008a46:	d905      	bls.n	8008a54 <UART_ParseAnswRelayStateStatus+0x3c>
 8008a48:	79bb      	ldrb	r3, [r7, #6]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b39      	cmp	r3, #57	; 0x39
 8008a52:	d90e      	bls.n	8008a72 <UART_ParseAnswRelayStateStatus+0x5a>
 8008a54:	79bb      	ldrb	r3, [r7, #6]
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4413      	add	r3, r2
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a5e:	d008      	beq.n	8008a72 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008a60:	491a      	ldr	r1, [pc, #104]	; (8008acc <UART_ParseAnswRelayStateStatus+0xb4>)
 8008a62:	481b      	ldr	r0, [pc, #108]	; (8008ad0 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a64:	f008 ffc0 	bl	80119e8 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008a68:	4919      	ldr	r1, [pc, #100]	; (8008ad0 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a6a:	481a      	ldr	r0, [pc, #104]	; (8008ad4 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008a6c:	f000 ffc8 	bl	8009a00 <UARTDMA_Print>
					return;	// And exit parsing
 8008a70:	e026      	b.n	8008ac0 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008a72:	6838      	ldr	r0, [r7, #0]
 8008a74:	f008 f901 	bl	8010c7a <atoi>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	b2d1      	uxtb	r1, r2
 8008a7e:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <UART_ParseAnswRelayStateStatus+0xc0>)
 8008a80:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008a82:	79bb      	ldrb	r3, [r7, #6]
 8008a84:	3301      	adds	r3, #1
 8008a86:	71bb      	strb	r3, [r7, #6]
 8008a88:	79bb      	ldrb	r3, [r7, #6]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1d3      	bne.n	8008a3c <UART_ParseAnswRelayStateStatus+0x24>
 8008a94:	e008      	b.n	8008aa8 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008a96:	4911      	ldr	r1, [pc, #68]	; (8008adc <UART_ParseAnswRelayStateStatus+0xc4>)
 8008a98:	480d      	ldr	r0, [pc, #52]	; (8008ad0 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a9a:	f008 ffa5 	bl	80119e8 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008a9e:	490c      	ldr	r1, [pc, #48]	; (8008ad0 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008aa0:	480c      	ldr	r0, [pc, #48]	; (8008ad4 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008aa2:	f000 ffad 	bl	8009a00 <UARTDMA_Print>
			return;	// And exit parsing
 8008aa6:	e00b      	b.n	8008ac0 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <UART_ParseAnswRelayStateStatus+0xc8>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d101      	bne.n	8008ab4 <UART_ParseAnswRelayStateStatus+0x9c>
 8008ab0:	f7fc fa20 	bl	8004ef4 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	71fb      	strb	r3, [r7, #7]
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d9b1      	bls.n	8008a24 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	08015c6c 	.word	0x08015c6c
 8008acc:	08015ce4 	.word	0x08015ce4
 8008ad0:	20000300 	.word	0x20000300
 8008ad4:	200004f0 	.word	0x200004f0
 8008ad8:	200002a8 	.word	0x200002a8
 8008adc:	08015cf8 	.word	0x08015cf8
 8008ae0:	20000290 	.word	0x20000290

08008ae4 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008aea:	2300      	movs	r3, #0
 8008aec:	71fb      	strb	r3, [r7, #7]
 8008aee:	e04a      	b.n	8008b86 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008af0:	4928      	ldr	r1, [pc, #160]	; (8008b94 <UART_ParseAnswLightsStateStatus+0xb0>)
 8008af2:	2000      	movs	r0, #0
 8008af4:	f009 fdd0 	bl	8012698 <strtok>
 8008af8:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d02f      	beq.n	8008b62 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008b02:	2300      	movs	r3, #0
 8008b04:	71bb      	strb	r3, [r7, #6]
 8008b06:	e025      	b.n	8008b54 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008b08:	79bb      	ldrb	r3, [r7, #6]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b2f      	cmp	r3, #47	; 0x2f
 8008b12:	d905      	bls.n	8008b20 <UART_ParseAnswLightsStateStatus+0x3c>
 8008b14:	79bb      	ldrb	r3, [r7, #6]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4413      	add	r3, r2
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b39      	cmp	r3, #57	; 0x39
 8008b1e:	d90e      	bls.n	8008b3e <UART_ParseAnswLightsStateStatus+0x5a>
 8008b20:	79bb      	ldrb	r3, [r7, #6]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b2e      	cmp	r3, #46	; 0x2e
 8008b2a:	d008      	beq.n	8008b3e <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008b2c:	491a      	ldr	r1, [pc, #104]	; (8008b98 <UART_ParseAnswLightsStateStatus+0xb4>)
 8008b2e:	481b      	ldr	r0, [pc, #108]	; (8008b9c <UART_ParseAnswLightsStateStatus+0xb8>)
 8008b30:	f008 ff5a 	bl	80119e8 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008b34:	4919      	ldr	r1, [pc, #100]	; (8008b9c <UART_ParseAnswLightsStateStatus+0xb8>)
 8008b36:	481a      	ldr	r0, [pc, #104]	; (8008ba0 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008b38:	f000 ff62 	bl	8009a00 <UARTDMA_Print>
					return;	// And exit parsing
 8008b3c:	e026      	b.n	8008b8c <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008b3e:	6838      	ldr	r0, [r7, #0]
 8008b40:	f008 f89b 	bl	8010c7a <atoi>
 8008b44:	4602      	mov	r2, r0
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	b2d1      	uxtb	r1, r2
 8008b4a:	4a16      	ldr	r2, [pc, #88]	; (8008ba4 <UART_ParseAnswLightsStateStatus+0xc0>)
 8008b4c:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008b4e:	79bb      	ldrb	r3, [r7, #6]
 8008b50:	3301      	adds	r3, #1
 8008b52:	71bb      	strb	r3, [r7, #6]
 8008b54:	79bb      	ldrb	r3, [r7, #6]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1d3      	bne.n	8008b08 <UART_ParseAnswLightsStateStatus+0x24>
 8008b60:	e008      	b.n	8008b74 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008b62:	4911      	ldr	r1, [pc, #68]	; (8008ba8 <UART_ParseAnswLightsStateStatus+0xc4>)
 8008b64:	480d      	ldr	r0, [pc, #52]	; (8008b9c <UART_ParseAnswLightsStateStatus+0xb8>)
 8008b66:	f008 ff3f 	bl	80119e8 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008b6a:	490c      	ldr	r1, [pc, #48]	; (8008b9c <UART_ParseAnswLightsStateStatus+0xb8>)
 8008b6c:	480c      	ldr	r0, [pc, #48]	; (8008ba0 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008b6e:	f000 ff47 	bl	8009a00 <UARTDMA_Print>
			return;	// And exit parsing
 8008b72:	e00b      	b.n	8008b8c <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <UART_ParseAnswLightsStateStatus+0xc8>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	d101      	bne.n	8008b80 <UART_ParseAnswLightsStateStatus+0x9c>
 8008b7c:	f7fc fac2 	bl	8005104 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	3301      	adds	r3, #1
 8008b84:	71fb      	strb	r3, [r7, #7]
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d9b1      	bls.n	8008af0 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	08015c6c 	.word	0x08015c6c
 8008b98:	08015ce4 	.word	0x08015ce4
 8008b9c:	20000300 	.word	0x20000300
 8008ba0:	200004f0 	.word	0x200004f0
 8008ba4:	200002ac 	.word	0x200002ac
 8008ba8:	08015cf8 	.word	0x08015cf8
 8008bac:	20000290 	.word	0x20000290

08008bb0 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	2b27      	cmp	r3, #39	; 0x27
 8008bc2:	f200 8129 	bhi.w	8008e18 <SendComand+0x268>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <SendComand+0x1c>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008c6d 	.word	0x08008c6d
 8008bd0:	08008c77 	.word	0x08008c77
 8008bd4:	08008c81 	.word	0x08008c81
 8008bd8:	08008c8b 	.word	0x08008c8b
 8008bdc:	08008c9f 	.word	0x08008c9f
 8008be0:	08008ca9 	.word	0x08008ca9
 8008be4:	08008cb3 	.word	0x08008cb3
 8008be8:	08008cbd 	.word	0x08008cbd
 8008bec:	08008cc7 	.word	0x08008cc7
 8008bf0:	08008cd1 	.word	0x08008cd1
 8008bf4:	08008cdb 	.word	0x08008cdb
 8008bf8:	08008ce5 	.word	0x08008ce5
 8008bfc:	08008cef 	.word	0x08008cef
 8008c00:	08008d17 	.word	0x08008d17
 8008c04:	08008d21 	.word	0x08008d21
 8008c08:	08008d2b 	.word	0x08008d2b
 8008c0c:	08008d35 	.word	0x08008d35
 8008c10:	08008d3f 	.word	0x08008d3f
 8008c14:	08008d49 	.word	0x08008d49
 8008c18:	08008d53 	.word	0x08008d53
 8008c1c:	08008d5d 	.word	0x08008d5d
 8008c20:	08008d0d 	.word	0x08008d0d
 8008c24:	08008d7b 	.word	0x08008d7b
 8008c28:	08008cf9 	.word	0x08008cf9
 8008c2c:	08008d03 	.word	0x08008d03
 8008c30:	08008d67 	.word	0x08008d67
 8008c34:	08008d71 	.word	0x08008d71
 8008c38:	08008c95 	.word	0x08008c95
 8008c3c:	08008d85 	.word	0x08008d85
 8008c40:	08008d8f 	.word	0x08008d8f
 8008c44:	08008d99 	.word	0x08008d99
 8008c48:	08008da3 	.word	0x08008da3
 8008c4c:	08008dad 	.word	0x08008dad
 8008c50:	08008db7 	.word	0x08008db7
 8008c54:	08008dc1 	.word	0x08008dc1
 8008c58:	08008dcb 	.word	0x08008dcb
 8008c5c:	08008dd5 	.word	0x08008dd5
 8008c60:	08008ddf 	.word	0x08008ddf
 8008c64:	08008e05 	.word	0x08008e05
 8008c68:	08008e0f 	.word	0x08008e0f
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008c6c:	496d      	ldr	r1, [pc, #436]	; (8008e24 <SendComand+0x274>)
 8008c6e:	486e      	ldr	r0, [pc, #440]	; (8008e28 <SendComand+0x278>)
 8008c70:	f000 fec6 	bl	8009a00 <UARTDMA_Print>
			break;
 8008c74:	e0d0      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008c76:	496d      	ldr	r1, [pc, #436]	; (8008e2c <SendComand+0x27c>)
 8008c78:	486b      	ldr	r0, [pc, #428]	; (8008e28 <SendComand+0x278>)
 8008c7a:	f000 fec1 	bl	8009a00 <UARTDMA_Print>
			break;
 8008c7e:	e0cb      	b.n	8008e18 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008c80:	496b      	ldr	r1, [pc, #428]	; (8008e30 <SendComand+0x280>)
 8008c82:	4869      	ldr	r0, [pc, #420]	; (8008e28 <SendComand+0x278>)
 8008c84:	f000 febc 	bl	8009a00 <UARTDMA_Print>
			break;
 8008c88:	e0c6      	b.n	8008e18 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008c8a:	496a      	ldr	r1, [pc, #424]	; (8008e34 <SendComand+0x284>)
 8008c8c:	4866      	ldr	r0, [pc, #408]	; (8008e28 <SendComand+0x278>)
 8008c8e:	f000 feb7 	bl	8009a00 <UARTDMA_Print>
			break;
 8008c92:	e0c1      	b.n	8008e18 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008c94:	4968      	ldr	r1, [pc, #416]	; (8008e38 <SendComand+0x288>)
 8008c96:	4864      	ldr	r0, [pc, #400]	; (8008e28 <SendComand+0x278>)
 8008c98:	f000 feb2 	bl	8009a00 <UARTDMA_Print>
			break;
 8008c9c:	e0bc      	b.n	8008e18 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008c9e:	4967      	ldr	r1, [pc, #412]	; (8008e3c <SendComand+0x28c>)
 8008ca0:	4861      	ldr	r0, [pc, #388]	; (8008e28 <SendComand+0x278>)
 8008ca2:	f000 fead 	bl	8009a00 <UARTDMA_Print>
			break;
 8008ca6:	e0b7      	b.n	8008e18 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008ca8:	4965      	ldr	r1, [pc, #404]	; (8008e40 <SendComand+0x290>)
 8008caa:	485f      	ldr	r0, [pc, #380]	; (8008e28 <SendComand+0x278>)
 8008cac:	f000 fea8 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cb0:	e0b2      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008cb2:	4964      	ldr	r1, [pc, #400]	; (8008e44 <SendComand+0x294>)
 8008cb4:	485c      	ldr	r0, [pc, #368]	; (8008e28 <SendComand+0x278>)
 8008cb6:	f000 fea3 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cba:	e0ad      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008cbc:	4962      	ldr	r1, [pc, #392]	; (8008e48 <SendComand+0x298>)
 8008cbe:	485a      	ldr	r0, [pc, #360]	; (8008e28 <SendComand+0x278>)
 8008cc0:	f000 fe9e 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cc4:	e0a8      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008cc6:	4961      	ldr	r1, [pc, #388]	; (8008e4c <SendComand+0x29c>)
 8008cc8:	4857      	ldr	r0, [pc, #348]	; (8008e28 <SendComand+0x278>)
 8008cca:	f000 fe99 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cce:	e0a3      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008cd0:	495f      	ldr	r1, [pc, #380]	; (8008e50 <SendComand+0x2a0>)
 8008cd2:	4855      	ldr	r0, [pc, #340]	; (8008e28 <SendComand+0x278>)
 8008cd4:	f000 fe94 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cd8:	e09e      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008cda:	495e      	ldr	r1, [pc, #376]	; (8008e54 <SendComand+0x2a4>)
 8008cdc:	4852      	ldr	r0, [pc, #328]	; (8008e28 <SendComand+0x278>)
 8008cde:	f000 fe8f 	bl	8009a00 <UARTDMA_Print>
			break;
 8008ce2:	e099      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008ce4:	495c      	ldr	r1, [pc, #368]	; (8008e58 <SendComand+0x2a8>)
 8008ce6:	4850      	ldr	r0, [pc, #320]	; (8008e28 <SendComand+0x278>)
 8008ce8:	f000 fe8a 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cec:	e094      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008cee:	495b      	ldr	r1, [pc, #364]	; (8008e5c <SendComand+0x2ac>)
 8008cf0:	484d      	ldr	r0, [pc, #308]	; (8008e28 <SendComand+0x278>)
 8008cf2:	f000 fe85 	bl	8009a00 <UARTDMA_Print>
			break;
 8008cf6:	e08f      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008cf8:	4959      	ldr	r1, [pc, #356]	; (8008e60 <SendComand+0x2b0>)
 8008cfa:	484b      	ldr	r0, [pc, #300]	; (8008e28 <SendComand+0x278>)
 8008cfc:	f000 fe80 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d00:	e08a      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008d02:	4958      	ldr	r1, [pc, #352]	; (8008e64 <SendComand+0x2b4>)
 8008d04:	4848      	ldr	r0, [pc, #288]	; (8008e28 <SendComand+0x278>)
 8008d06:	f000 fe7b 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d0a:	e085      	b.n	8008e18 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008d0c:	4956      	ldr	r1, [pc, #344]	; (8008e68 <SendComand+0x2b8>)
 8008d0e:	4846      	ldr	r0, [pc, #280]	; (8008e28 <SendComand+0x278>)
 8008d10:	f000 fe76 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d14:	e080      	b.n	8008e18 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008d16:	4955      	ldr	r1, [pc, #340]	; (8008e6c <SendComand+0x2bc>)
 8008d18:	4843      	ldr	r0, [pc, #268]	; (8008e28 <SendComand+0x278>)
 8008d1a:	f000 fe71 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d1e:	e07b      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008d20:	4953      	ldr	r1, [pc, #332]	; (8008e70 <SendComand+0x2c0>)
 8008d22:	4841      	ldr	r0, [pc, #260]	; (8008e28 <SendComand+0x278>)
 8008d24:	f000 fe6c 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d28:	e076      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008d2a:	4952      	ldr	r1, [pc, #328]	; (8008e74 <SendComand+0x2c4>)
 8008d2c:	483e      	ldr	r0, [pc, #248]	; (8008e28 <SendComand+0x278>)
 8008d2e:	f000 fe67 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d32:	e071      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008d34:	4950      	ldr	r1, [pc, #320]	; (8008e78 <SendComand+0x2c8>)
 8008d36:	483c      	ldr	r0, [pc, #240]	; (8008e28 <SendComand+0x278>)
 8008d38:	f000 fe62 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d3c:	e06c      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008d3e:	494f      	ldr	r1, [pc, #316]	; (8008e7c <SendComand+0x2cc>)
 8008d40:	4839      	ldr	r0, [pc, #228]	; (8008e28 <SendComand+0x278>)
 8008d42:	f000 fe5d 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d46:	e067      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008d48:	494d      	ldr	r1, [pc, #308]	; (8008e80 <SendComand+0x2d0>)
 8008d4a:	4837      	ldr	r0, [pc, #220]	; (8008e28 <SendComand+0x278>)
 8008d4c:	f000 fe58 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d50:	e062      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008d52:	494c      	ldr	r1, [pc, #304]	; (8008e84 <SendComand+0x2d4>)
 8008d54:	4834      	ldr	r0, [pc, #208]	; (8008e28 <SendComand+0x278>)
 8008d56:	f000 fe53 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d5a:	e05d      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008d5c:	494a      	ldr	r1, [pc, #296]	; (8008e88 <SendComand+0x2d8>)
 8008d5e:	4832      	ldr	r0, [pc, #200]	; (8008e28 <SendComand+0x278>)
 8008d60:	f000 fe4e 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d64:	e058      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008d66:	4949      	ldr	r1, [pc, #292]	; (8008e8c <SendComand+0x2dc>)
 8008d68:	482f      	ldr	r0, [pc, #188]	; (8008e28 <SendComand+0x278>)
 8008d6a:	f000 fe49 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d6e:	e053      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008d70:	4947      	ldr	r1, [pc, #284]	; (8008e90 <SendComand+0x2e0>)
 8008d72:	482d      	ldr	r0, [pc, #180]	; (8008e28 <SendComand+0x278>)
 8008d74:	f000 fe44 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d78:	e04e      	b.n	8008e18 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008d7a:	4946      	ldr	r1, [pc, #280]	; (8008e94 <SendComand+0x2e4>)
 8008d7c:	482a      	ldr	r0, [pc, #168]	; (8008e28 <SendComand+0x278>)
 8008d7e:	f000 fe3f 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d82:	e049      	b.n	8008e18 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008d84:	4944      	ldr	r1, [pc, #272]	; (8008e98 <SendComand+0x2e8>)
 8008d86:	4828      	ldr	r0, [pc, #160]	; (8008e28 <SendComand+0x278>)
 8008d88:	f000 fe3a 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d8c:	e044      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008d8e:	4943      	ldr	r1, [pc, #268]	; (8008e9c <SendComand+0x2ec>)
 8008d90:	4825      	ldr	r0, [pc, #148]	; (8008e28 <SendComand+0x278>)
 8008d92:	f000 fe35 	bl	8009a00 <UARTDMA_Print>
			break;
 8008d96:	e03f      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008d98:	4941      	ldr	r1, [pc, #260]	; (8008ea0 <SendComand+0x2f0>)
 8008d9a:	4823      	ldr	r0, [pc, #140]	; (8008e28 <SendComand+0x278>)
 8008d9c:	f000 fe30 	bl	8009a00 <UARTDMA_Print>
			break;
 8008da0:	e03a      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008da2:	4940      	ldr	r1, [pc, #256]	; (8008ea4 <SendComand+0x2f4>)
 8008da4:	4820      	ldr	r0, [pc, #128]	; (8008e28 <SendComand+0x278>)
 8008da6:	f000 fe2b 	bl	8009a00 <UARTDMA_Print>
			break;
 8008daa:	e035      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008dac:	493e      	ldr	r1, [pc, #248]	; (8008ea8 <SendComand+0x2f8>)
 8008dae:	481e      	ldr	r0, [pc, #120]	; (8008e28 <SendComand+0x278>)
 8008db0:	f000 fe26 	bl	8009a00 <UARTDMA_Print>
			break;
 8008db4:	e030      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008db6:	493d      	ldr	r1, [pc, #244]	; (8008eac <SendComand+0x2fc>)
 8008db8:	481b      	ldr	r0, [pc, #108]	; (8008e28 <SendComand+0x278>)
 8008dba:	f000 fe21 	bl	8009a00 <UARTDMA_Print>
			break;
 8008dbe:	e02b      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008dc0:	493b      	ldr	r1, [pc, #236]	; (8008eb0 <SendComand+0x300>)
 8008dc2:	4819      	ldr	r0, [pc, #100]	; (8008e28 <SendComand+0x278>)
 8008dc4:	f000 fe1c 	bl	8009a00 <UARTDMA_Print>
			break;
 8008dc8:	e026      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008dca:	493a      	ldr	r1, [pc, #232]	; (8008eb4 <SendComand+0x304>)
 8008dcc:	4816      	ldr	r0, [pc, #88]	; (8008e28 <SendComand+0x278>)
 8008dce:	f000 fe17 	bl	8009a00 <UARTDMA_Print>
			break;
 8008dd2:	e021      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008dd4:	4938      	ldr	r1, [pc, #224]	; (8008eb8 <SendComand+0x308>)
 8008dd6:	4814      	ldr	r0, [pc, #80]	; (8008e28 <SendComand+0x278>)
 8008dd8:	f000 fe12 	bl	8009a00 <UARTDMA_Print>
			break;
 8008ddc:	e01c      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008dde:	4b37      	ldr	r3, [pc, #220]	; (8008ebc <SendComand+0x30c>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d802      	bhi.n	8008dec <SendComand+0x23c>
 8008de6:	4b35      	ldr	r3, [pc, #212]	; (8008ebc <SendComand+0x30c>)
 8008de8:	2209      	movs	r2, #9
 8008dea:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008dec:	4b33      	ldr	r3, [pc, #204]	; (8008ebc <SendComand+0x30c>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	4933      	ldr	r1, [pc, #204]	; (8008ec0 <SendComand+0x310>)
 8008df4:	4833      	ldr	r0, [pc, #204]	; (8008ec4 <SendComand+0x314>)
 8008df6:	f008 fdf7 	bl	80119e8 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008dfa:	4932      	ldr	r1, [pc, #200]	; (8008ec4 <SendComand+0x314>)
 8008dfc:	480a      	ldr	r0, [pc, #40]	; (8008e28 <SendComand+0x278>)
 8008dfe:	f000 fdff 	bl	8009a00 <UARTDMA_Print>
			break;
 8008e02:	e009      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008e04:	4930      	ldr	r1, [pc, #192]	; (8008ec8 <SendComand+0x318>)
 8008e06:	4808      	ldr	r0, [pc, #32]	; (8008e28 <SendComand+0x278>)
 8008e08:	f000 fdfa 	bl	8009a00 <UARTDMA_Print>
			break;
 8008e0c:	e004      	b.n	8008e18 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008e0e:	492f      	ldr	r1, [pc, #188]	; (8008ecc <SendComand+0x31c>)
 8008e10:	4805      	ldr	r0, [pc, #20]	; (8008e28 <SendComand+0x278>)
 8008e12:	f000 fdf5 	bl	8009a00 <UARTDMA_Print>
			break;
 8008e16:	bf00      	nop
		}
	return 1;
 8008e18:	2301      	movs	r3, #1
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	08015d14 	.word	0x08015d14
 8008e28:	200004f0 	.word	0x200004f0
 8008e2c:	08015d1c 	.word	0x08015d1c
 8008e30:	08015d24 	.word	0x08015d24
 8008e34:	08015d30 	.word	0x08015d30
 8008e38:	08015d38 	.word	0x08015d38
 8008e3c:	08015d40 	.word	0x08015d40
 8008e40:	08015d48 	.word	0x08015d48
 8008e44:	08015d58 	.word	0x08015d58
 8008e48:	08015d68 	.word	0x08015d68
 8008e4c:	08015d78 	.word	0x08015d78
 8008e50:	08015d88 	.word	0x08015d88
 8008e54:	08015d98 	.word	0x08015d98
 8008e58:	08015da8 	.word	0x08015da8
 8008e5c:	08015db8 	.word	0x08015db8
 8008e60:	08015dc8 	.word	0x08015dc8
 8008e64:	08015dd8 	.word	0x08015dd8
 8008e68:	08015de8 	.word	0x08015de8
 8008e6c:	08015df8 	.word	0x08015df8
 8008e70:	08015e08 	.word	0x08015e08
 8008e74:	08015e18 	.word	0x08015e18
 8008e78:	08015e28 	.word	0x08015e28
 8008e7c:	08015e38 	.word	0x08015e38
 8008e80:	08015e48 	.word	0x08015e48
 8008e84:	08015e58 	.word	0x08015e58
 8008e88:	08015e68 	.word	0x08015e68
 8008e8c:	08015e78 	.word	0x08015e78
 8008e90:	08015e88 	.word	0x08015e88
 8008e94:	08015e98 	.word	0x08015e98
 8008e98:	08015ea8 	.word	0x08015ea8
 8008e9c:	08015eb8 	.word	0x08015eb8
 8008ea0:	08015ec8 	.word	0x08015ec8
 8008ea4:	08015ed8 	.word	0x08015ed8
 8008ea8:	08015ee8 	.word	0x08015ee8
 8008eac:	08015ef8 	.word	0x08015ef8
 8008eb0:	08015f08 	.word	0x08015f08
 8008eb4:	08015f18 	.word	0x08015f18
 8008eb8:	08015f28 	.word	0x08015f28
 8008ebc:	20000033 	.word	0x20000033
 8008ec0:	08015f38 	.word	0x08015f38
 8008ec4:	20000300 	.word	0x20000300
 8008ec8:	08015f48 	.word	0x08015f48
 8008ecc:	08015f58 	.word	0x08015f58

08008ed0 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d101      	bne.n	8008eea <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e015      	b.n	8008f16 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	789a      	ldrb	r2, [r3, #2]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	3301      	adds	r3, #1
 8008f00:	425a      	negs	r2, r3
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f0a:	bf58      	it	pl
 8008f0c:	4253      	negpl	r3, r2
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	3301      	adds	r3, #1
 8008f34:	425a      	negs	r2, r3
 8008f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f3e:	bf58      	it	pl
 8008f40:	4253      	negpl	r3, r2
 8008f42:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	7bfa      	ldrb	r2, [r7, #15]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d101      	bne.n	8008f52 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e00a      	b.n	8008f68 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7bfa      	ldrb	r2, [r7, #15]
 8008f64:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008f78:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008f7a:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <MX_SPI1_Init+0x68>)
 8008f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008f7e:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008f86:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f8c:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f92:	4b11      	ldr	r3, [pc, #68]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008f9e:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fa8:	2210      	movs	r2, #16
 8008faa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008fb2:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008fc4:	4804      	ldr	r0, [pc, #16]	; (8008fd8 <MX_SPI1_Init+0x64>)
 8008fc6:	f005 fd47 	bl	800ea58 <HAL_SPI_Init>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008fd0:	f7fc fe12 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008fd4:	bf00      	nop
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20000938 	.word	0x20000938
 8008fdc:	40013000 	.word	0x40013000

08008fe0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <MX_SPI3_Init+0x64>)
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <MX_SPI3_Init+0x68>)
 8008fe8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008fea:	4b16      	ldr	r3, [pc, #88]	; (8009044 <MX_SPI3_Init+0x64>)
 8008fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ff0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008ff2:	4b14      	ldr	r3, [pc, #80]	; (8009044 <MX_SPI3_Init+0x64>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ff8:	4b12      	ldr	r3, [pc, #72]	; (8009044 <MX_SPI3_Init+0x64>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ffe:	4b11      	ldr	r3, [pc, #68]	; (8009044 <MX_SPI3_Init+0x64>)
 8009000:	2200      	movs	r2, #0
 8009002:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <MX_SPI3_Init+0x64>)
 8009006:	2200      	movs	r2, #0
 8009008:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800900a:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <MX_SPI3_Init+0x64>)
 800900c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009010:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009012:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <MX_SPI3_Init+0x64>)
 8009014:	2220      	movs	r2, #32
 8009016:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009018:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <MX_SPI3_Init+0x64>)
 800901a:	2200      	movs	r2, #0
 800901c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <MX_SPI3_Init+0x64>)
 8009020:	2200      	movs	r2, #0
 8009022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <MX_SPI3_Init+0x64>)
 8009026:	2200      	movs	r2, #0
 8009028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800902a:	4b06      	ldr	r3, [pc, #24]	; (8009044 <MX_SPI3_Init+0x64>)
 800902c:	220a      	movs	r2, #10
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009030:	4804      	ldr	r0, [pc, #16]	; (8009044 <MX_SPI3_Init+0x64>)
 8009032:	f005 fd11 	bl	800ea58 <HAL_SPI_Init>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800903c:	f7fc fddc 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	200008e0 	.word	0x200008e0
 8009048:	40003c00 	.word	0x40003c00

0800904c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8009050:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009052:	4a18      	ldr	r2, [pc, #96]	; (80090b4 <MX_SPI5_Init+0x68>)
 8009054:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8009056:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800905c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009060:	2200      	movs	r2, #0
 8009062:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8009064:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009066:	2200      	movs	r2, #0
 8009068:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800906a:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <MX_SPI5_Init+0x64>)
 800906c:	2200      	movs	r2, #0
 800906e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009070:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009072:	2200      	movs	r2, #0
 8009074:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8009076:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800907c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800907e:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009080:	2200      	movs	r2, #0
 8009082:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009086:	2200      	movs	r2, #0
 8009088:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <MX_SPI5_Init+0x64>)
 800908c:	2200      	movs	r2, #0
 800908e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009092:	2200      	movs	r2, #0
 8009094:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8009096:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <MX_SPI5_Init+0x64>)
 8009098:	220a      	movs	r2, #10
 800909a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800909c:	4804      	ldr	r0, [pc, #16]	; (80090b0 <MX_SPI5_Init+0x64>)
 800909e:	f005 fcdb 	bl	800ea58 <HAL_SPI_Init>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80090a8:	f7fc fda6 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80090ac:	bf00      	nop
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000888 	.word	0x20000888
 80090b4:	40015000 	.word	0x40015000

080090b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	; 0x38
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a5a      	ldr	r2, [pc, #360]	; (8009240 <HAL_SPI_MspInit+0x188>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d12c      	bne.n	8009134 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80090da:	2300      	movs	r3, #0
 80090dc:	623b      	str	r3, [r7, #32]
 80090de:	4b59      	ldr	r3, [pc, #356]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80090e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e2:	4a58      	ldr	r2, [pc, #352]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80090e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090e8:	6453      	str	r3, [r2, #68]	; 0x44
 80090ea:	4b56      	ldr	r3, [pc, #344]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80090ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f2:	623b      	str	r3, [r7, #32]
 80090f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090f6:	2300      	movs	r3, #0
 80090f8:	61fb      	str	r3, [r7, #28]
 80090fa:	4b52      	ldr	r3, [pc, #328]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fe:	4a51      	ldr	r2, [pc, #324]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009100:	f043 0301 	orr.w	r3, r3, #1
 8009104:	6313      	str	r3, [r2, #48]	; 0x30
 8009106:	4b4f      	ldr	r3, [pc, #316]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8009112:	23e0      	movs	r3, #224	; 0xe0
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009116:	2302      	movs	r3, #2
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911a:	2300      	movs	r3, #0
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800911e:	2303      	movs	r3, #3
 8009120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009122:	2305      	movs	r3, #5
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800912a:	4619      	mov	r1, r3
 800912c:	4846      	ldr	r0, [pc, #280]	; (8009248 <HAL_SPI_MspInit+0x190>)
 800912e:	f001 fd5f 	bl	800abf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009132:	e081      	b.n	8009238 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a44      	ldr	r2, [pc, #272]	; (800924c <HAL_SPI_MspInit+0x194>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d12c      	bne.n	8009198 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800913e:	2300      	movs	r3, #0
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	4b40      	ldr	r3, [pc, #256]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	4a3f      	ldr	r2, [pc, #252]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800914c:	6413      	str	r3, [r2, #64]	; 0x40
 800914e:	4b3d      	ldr	r3, [pc, #244]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800915a:	2300      	movs	r3, #0
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	4b39      	ldr	r3, [pc, #228]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	4a38      	ldr	r2, [pc, #224]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 8009164:	f043 0302 	orr.w	r3, r3, #2
 8009168:	6313      	str	r3, [r2, #48]	; 0x30
 800916a:	4b36      	ldr	r3, [pc, #216]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 8009176:	2338      	movs	r3, #56	; 0x38
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800917a:	2302      	movs	r3, #2
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917e:	2300      	movs	r3, #0
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009182:	2303      	movs	r3, #3
 8009184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009186:	2306      	movs	r3, #6
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800918a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918e:	4619      	mov	r1, r3
 8009190:	482f      	ldr	r0, [pc, #188]	; (8009250 <HAL_SPI_MspInit+0x198>)
 8009192:	f001 fd2d 	bl	800abf0 <HAL_GPIO_Init>
}
 8009196:	e04f      	b.n	8009238 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a2d      	ldr	r2, [pc, #180]	; (8009254 <HAL_SPI_MspInit+0x19c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d14a      	bne.n	8009238 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	613b      	str	r3, [r7, #16]
 80091a6:	4b27      	ldr	r3, [pc, #156]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091aa:	4a26      	ldr	r2, [pc, #152]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091b0:	6453      	str	r3, [r2, #68]	; 0x44
 80091b2:	4b24      	ldr	r3, [pc, #144]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	4b20      	ldr	r3, [pc, #128]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091c8:	f043 0302 	orr.w	r3, r3, #2
 80091cc:	6313      	str	r3, [r2, #48]	; 0x30
 80091ce:	4b1d      	ldr	r3, [pc, #116]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091da:	2300      	movs	r3, #0
 80091dc:	60bb      	str	r3, [r7, #8]
 80091de:	4b19      	ldr	r3, [pc, #100]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	4a18      	ldr	r2, [pc, #96]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091e4:	f043 0301 	orr.w	r3, r3, #1
 80091e8:	6313      	str	r3, [r2, #48]	; 0x30
 80091ea:	4b16      	ldr	r3, [pc, #88]	; (8009244 <HAL_SPI_MspInit+0x18c>)
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	60bb      	str	r3, [r7, #8]
 80091f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 80091f6:	2301      	movs	r3, #1
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fa:	2302      	movs	r3, #2
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009202:	2303      	movs	r3, #3
 8009204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009206:	2306      	movs	r3, #6
 8009208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 800920a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800920e:	4619      	mov	r1, r3
 8009210:	480f      	ldr	r0, [pc, #60]	; (8009250 <HAL_SPI_MspInit+0x198>)
 8009212:	f001 fced 	bl	800abf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 8009216:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800921c:	2302      	movs	r3, #2
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009220:	2300      	movs	r3, #0
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009224:	2303      	movs	r3, #3
 8009226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009228:	2306      	movs	r3, #6
 800922a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800922c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009230:	4619      	mov	r1, r3
 8009232:	4805      	ldr	r0, [pc, #20]	; (8009248 <HAL_SPI_MspInit+0x190>)
 8009234:	f001 fcdc 	bl	800abf0 <HAL_GPIO_Init>
}
 8009238:	bf00      	nop
 800923a:	3738      	adds	r7, #56	; 0x38
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	40013000 	.word	0x40013000
 8009244:	40023800 	.word	0x40023800
 8009248:	40020000 	.word	0x40020000
 800924c:	40003c00 	.word	0x40003c00
 8009250:	40020400 	.word	0x40020400
 8009254:	40015000 	.word	0x40015000

08009258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800925e:	2300      	movs	r3, #0
 8009260:	607b      	str	r3, [r7, #4]
 8009262:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <HAL_MspInit+0x4c>)
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	4a0f      	ldr	r2, [pc, #60]	; (80092a4 <HAL_MspInit+0x4c>)
 8009268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800926c:	6453      	str	r3, [r2, #68]	; 0x44
 800926e:	4b0d      	ldr	r3, [pc, #52]	; (80092a4 <HAL_MspInit+0x4c>)
 8009270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009276:	607b      	str	r3, [r7, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800927a:	2300      	movs	r3, #0
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <HAL_MspInit+0x4c>)
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	4a08      	ldr	r2, [pc, #32]	; (80092a4 <HAL_MspInit+0x4c>)
 8009284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009288:	6413      	str	r3, [r2, #64]	; 0x40
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <HAL_MspInit+0x4c>)
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40023800 	.word	0x40023800

080092a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80092ac:	e7fe      	b.n	80092ac <NMI_Handler+0x4>

080092ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092ae:	b480      	push	{r7}
 80092b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092b2:	e7fe      	b.n	80092b2 <HardFault_Handler+0x4>

080092b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80092b8:	e7fe      	b.n	80092b8 <MemManage_Handler+0x4>

080092ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092ba:	b480      	push	{r7}
 80092bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80092be:	e7fe      	b.n	80092be <BusFault_Handler+0x4>

080092c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80092c4:	e7fe      	b.n	80092c4 <UsageFault_Handler+0x4>

080092c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80092c6:	b480      	push	{r7}
 80092c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80092ca:	bf00      	nop
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80092d8:	bf00      	nop
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092e2:	b480      	push	{r7}
 80092e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092e6:	bf00      	nop
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092f4:	f000 fe88 	bl	800a008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092f8:	bf00      	nop
 80092fa:	bd80      	pop	{r7, pc}

080092fc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 8009300:	2004      	movs	r0, #4
 8009302:	f001 fe45 	bl	800af90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009306:	bf00      	nop
 8009308:	bd80      	pop	{r7, pc}

0800930a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 800930e:	2010      	movs	r0, #16
 8009310:	f001 fe3e 	bl	800af90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009314:	bf00      	nop
 8009316:	bd80      	pop	{r7, pc}

08009318 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800931c:	4802      	ldr	r0, [pc, #8]	; (8009328 <DMA1_Stream0_IRQHandler+0x10>)
 800931e:	f001 f9ef 	bl	800a700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009322:	bf00      	nop
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000490 	.word	0x20000490

0800932c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009330:	4802      	ldr	r0, [pc, #8]	; (800933c <DMA1_Stream1_IRQHandler+0x10>)
 8009332:	f001 f9e5 	bl	800a700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009336:	bf00      	nop
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	200003dc 	.word	0x200003dc

08009340 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8009344:	4802      	ldr	r0, [pc, #8]	; (8009350 <DMA1_Stream5_IRQHandler+0x10>)
 8009346:	f000 faa5 	bl	8009894 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800934a:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200004f0 	.word	0x200004f0

08009354 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009358:	4802      	ldr	r0, [pc, #8]	; (8009364 <DMA1_Stream6_IRQHandler+0x10>)
 800935a:	f001 f9d1 	bl	800a700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800935e:	bf00      	nop
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000b88 	.word	0x20000b88

08009368 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800936c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009370:	f001 fe0e 	bl	800af90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009374:	bf00      	nop
 8009376:	bd80      	pop	{r7, pc}

08009378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800937c:	4802      	ldr	r0, [pc, #8]	; (8009388 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800937e:	f006 f906 	bl	800f58e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009382:	bf00      	nop
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20000990 	.word	0x20000990

0800938c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8009390:	4802      	ldr	r0, [pc, #8]	; (800939c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8009392:	f006 f8fc 	bl	800f58e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8009396:	bf00      	nop
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	200009d8 	.word	0x200009d8

080093a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80093a4:	4802      	ldr	r0, [pc, #8]	; (80093b0 <I2C1_EV_IRQHandler+0x10>)
 80093a6:	f002 fd93 	bl	800bed0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80093aa:	bf00      	nop
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	2000043c 	.word	0x2000043c

080093b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80093b8:	4802      	ldr	r0, [pc, #8]	; (80093c4 <I2C1_ER_IRQHandler+0x10>)
 80093ba:	f002 fefa 	bl	800c1b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80093be:	bf00      	nop
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	2000043c 	.word	0x2000043c

080093c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 80093cc:	4803      	ldr	r0, [pc, #12]	; (80093dc <USART1_IRQHandler+0x14>)
 80093ce:	f000 fa37 	bl	8009840 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80093d2:	4803      	ldr	r0, [pc, #12]	; (80093e0 <USART1_IRQHandler+0x18>)
 80093d4:	f006 fc0a 	bl	800fbec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80093d8:	bf00      	nop
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	200006bc 	.word	0x200006bc
 80093e0:	20000be8 	.word	0x20000be8

080093e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80093e8:	4803      	ldr	r0, [pc, #12]	; (80093f8 <USART2_IRQHandler+0x14>)
 80093ea:	f000 fa29 	bl	8009840 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80093ee:	4803      	ldr	r0, [pc, #12]	; (80093fc <USART2_IRQHandler+0x18>)
 80093f0:	f006 fbfc 	bl	800fbec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80093f4:	bf00      	nop
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	200004f0 	.word	0x200004f0
 80093fc:	20000c2c 	.word	0x20000c2c

08009400 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8009404:	4802      	ldr	r0, [pc, #8]	; (8009410 <SPI3_IRQHandler+0x10>)
 8009406:	f005 fd53 	bl	800eeb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800940a:	bf00      	nop
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200008e0 	.word	0x200008e0

08009414 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 8009418:	4802      	ldr	r0, [pc, #8]	; (8009424 <DMA2_Stream2_IRQHandler+0x10>)
 800941a:	f000 fa3b 	bl	8009894 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800941e:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200006bc 	.word	0x200006bc

08009428 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800942c:	4802      	ldr	r0, [pc, #8]	; (8009438 <DMA2_Stream7_IRQHandler+0x10>)
 800942e:	f001 f967 	bl	800a700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009432:	bf00      	nop
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20000ac8 	.word	0x20000ac8

0800943c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
	return 1;
 8009440:	2301      	movs	r3, #1
}
 8009442:	4618      	mov	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <_kill>:

int _kill(int pid, int sig)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009456:	f007 fc15 	bl	8010c84 <__errno>
 800945a:	4603      	mov	r3, r0
 800945c:	2216      	movs	r2, #22
 800945e:	601a      	str	r2, [r3, #0]
	return -1;
 8009460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <_exit>:

void _exit (int status)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009474:	f04f 31ff 	mov.w	r1, #4294967295
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff ffe7 	bl	800944c <_kill>
	while (1) {}		/* Make sure we hang here */
 800947e:	e7fe      	b.n	800947e <_exit+0x12>

08009480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e00a      	b.n	80094a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009492:	f3af 8000 	nop.w
 8009496:	4601      	mov	r1, r0
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	60ba      	str	r2, [r7, #8]
 800949e:	b2ca      	uxtb	r2, r1
 80094a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	3301      	adds	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	dbf0      	blt.n	8009492 <_read+0x12>
	}

return len;
 80094b0:	687b      	ldr	r3, [r7, #4]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b086      	sub	sp, #24
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e009      	b.n	80094e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	60ba      	str	r2, [r7, #8]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	3301      	adds	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	dbf1      	blt.n	80094cc <_write+0x12>
	}
	return len;
 80094e8:	687b      	ldr	r3, [r7, #4]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <_close>:

int _close(int file)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
	return -1;
 80094fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800951a:	605a      	str	r2, [r3, #4]
	return 0;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <_isatty>:

int _isatty(int file)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
	return 1;
 8009532:	2301      	movs	r3, #1
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
	return 0;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
	...

0800955c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009564:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <_sbrk+0x5c>)
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <_sbrk+0x60>)
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009570:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <_sbrk+0x64>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009578:	4b11      	ldr	r3, [pc, #68]	; (80095c0 <_sbrk+0x64>)
 800957a:	4a12      	ldr	r2, [pc, #72]	; (80095c4 <_sbrk+0x68>)
 800957c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800957e:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <_sbrk+0x64>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4413      	add	r3, r2
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	429a      	cmp	r2, r3
 800958a:	d207      	bcs.n	800959c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800958c:	f007 fb7a 	bl	8010c84 <__errno>
 8009590:	4603      	mov	r3, r0
 8009592:	220c      	movs	r2, #12
 8009594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009596:	f04f 33ff 	mov.w	r3, #4294967295
 800959a:	e009      	b.n	80095b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800959c:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <_sbrk+0x64>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80095a2:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <_sbrk+0x64>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4413      	add	r3, r2
 80095aa:	4a05      	ldr	r2, [pc, #20]	; (80095c0 <_sbrk+0x64>)
 80095ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20020000 	.word	0x20020000
 80095bc:	00000400 	.word	0x00000400
 80095c0:	200002b4 	.word	0x200002b4
 80095c4:	20000c88 	.word	0x20000c88

080095c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095c8:	b480      	push	{r7}
 80095ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <SystemInit+0x20>)
 80095ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d2:	4a05      	ldr	r2, [pc, #20]	; (80095e8 <SystemInit+0x20>)
 80095d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80095dc:	bf00      	nop
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	e000ed00 	.word	0xe000ed00

080095ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08c      	sub	sp, #48	; 0x30
 80095f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80095f2:	f107 030c 	add.w	r3, r7, #12
 80095f6:	2224      	movs	r2, #36	; 0x24
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f007 fb6c 	bl	8010cd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009608:	4b21      	ldr	r3, [pc, #132]	; (8009690 <MX_TIM2_Init+0xa4>)
 800960a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800960e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009610:	4b1f      	ldr	r3, [pc, #124]	; (8009690 <MX_TIM2_Init+0xa4>)
 8009612:	2200      	movs	r2, #0
 8009614:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009616:	4b1e      	ldr	r3, [pc, #120]	; (8009690 <MX_TIM2_Init+0xa4>)
 8009618:	2200      	movs	r2, #0
 800961a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800961c:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <MX_TIM2_Init+0xa4>)
 800961e:	f04f 32ff 	mov.w	r2, #4294967295
 8009622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009624:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <MX_TIM2_Init+0xa4>)
 8009626:	2200      	movs	r2, #0
 8009628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800962a:	4b19      	ldr	r3, [pc, #100]	; (8009690 <MX_TIM2_Init+0xa4>)
 800962c:	2200      	movs	r2, #0
 800962e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009630:	2301      	movs	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009638:	2301      	movs	r3, #1
 800963a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800963c:	2300      	movs	r3, #0
 800963e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009644:	2300      	movs	r3, #0
 8009646:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009648:	2301      	movs	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800964c:	2300      	movs	r3, #0
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4619      	mov	r1, r3
 800965a:	480d      	ldr	r0, [pc, #52]	; (8009690 <MX_TIM2_Init+0xa4>)
 800965c:	f005 fef1 	bl	800f442 <HAL_TIM_Encoder_Init>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8009666:	f7fc fac7 	bl	8005bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800966a:	2300      	movs	r3, #0
 800966c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009672:	1d3b      	adds	r3, r7, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4806      	ldr	r0, [pc, #24]	; (8009690 <MX_TIM2_Init+0xa4>)
 8009678:	f006 f93a 	bl	800f8f0 <HAL_TIMEx_MasterConfigSynchronization>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8009682:	f7fc fab9 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009686:	bf00      	nop
 8009688:	3730      	adds	r7, #48	; 0x30
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000a20 	.word	0x20000a20

08009694 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009698:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <MX_TIM10_Init+0x40>)
 800969a:	4a0f      	ldr	r2, [pc, #60]	; (80096d8 <MX_TIM10_Init+0x44>)
 800969c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <MX_TIM10_Init+0x40>)
 80096a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80096a4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <MX_TIM10_Init+0x40>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80096ac:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <MX_TIM10_Init+0x40>)
 80096ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80096b2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096b4:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <MX_TIM10_Init+0x40>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096ba:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <MX_TIM10_Init+0x40>)
 80096bc:	2200      	movs	r2, #0
 80096be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80096c0:	4804      	ldr	r0, [pc, #16]	; (80096d4 <MX_TIM10_Init+0x40>)
 80096c2:	f005 fddd 	bl	800f280 <HAL_TIM_Base_Init>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80096cc:	f7fc fa94 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80096d0:	bf00      	nop
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20000990 	.word	0x20000990
 80096d8:	40014400 	.word	0x40014400

080096dc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80096e0:	4b0f      	ldr	r3, [pc, #60]	; (8009720 <MX_TIM11_Init+0x44>)
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <MX_TIM11_Init+0x48>)
 80096e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80096e6:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <MX_TIM11_Init+0x44>)
 80096e8:	f643 2297 	movw	r2, #14999	; 0x3a97
 80096ec:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <MX_TIM11_Init+0x44>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 80096f4:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <MX_TIM11_Init+0x44>)
 80096f6:	f247 522f 	movw	r2, #29999	; 0x752f
 80096fa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80096fc:	4b08      	ldr	r3, [pc, #32]	; (8009720 <MX_TIM11_Init+0x44>)
 80096fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009702:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <MX_TIM11_Init+0x44>)
 8009706:	2200      	movs	r2, #0
 8009708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800970a:	4805      	ldr	r0, [pc, #20]	; (8009720 <MX_TIM11_Init+0x44>)
 800970c:	f005 fdb8 	bl	800f280 <HAL_TIM_Base_Init>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8009716:	f7fc fa6f 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800971a:	bf00      	nop
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200009d8 	.word	0x200009d8
 8009724:	40014800 	.word	0x40014800

08009728 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009730:	f107 0314 	add.w	r3, r7, #20
 8009734:	2200      	movs	r2, #0
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	605a      	str	r2, [r3, #4]
 800973a:	609a      	str	r2, [r3, #8]
 800973c:	60da      	str	r2, [r3, #12]
 800973e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d12b      	bne.n	80097a2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800974a:	2300      	movs	r3, #0
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	4b17      	ldr	r3, [pc, #92]	; (80097ac <HAL_TIM_Encoder_MspInit+0x84>)
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	4a16      	ldr	r2, [pc, #88]	; (80097ac <HAL_TIM_Encoder_MspInit+0x84>)
 8009754:	f043 0301 	orr.w	r3, r3, #1
 8009758:	6413      	str	r3, [r2, #64]	; 0x40
 800975a:	4b14      	ldr	r3, [pc, #80]	; (80097ac <HAL_TIM_Encoder_MspInit+0x84>)
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <HAL_TIM_Encoder_MspInit+0x84>)
 800976c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976e:	4a0f      	ldr	r2, [pc, #60]	; (80097ac <HAL_TIM_Encoder_MspInit+0x84>)
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	6313      	str	r3, [r2, #48]	; 0x30
 8009776:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <HAL_TIM_Encoder_MspInit+0x84>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 8009782:	2303      	movs	r3, #3
 8009784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009786:	2302      	movs	r3, #2
 8009788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978a:	2300      	movs	r3, #0
 800978c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800978e:	2300      	movs	r3, #0
 8009790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009792:	2301      	movs	r3, #1
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009796:	f107 0314 	add.w	r3, r7, #20
 800979a:	4619      	mov	r1, r3
 800979c:	4804      	ldr	r0, [pc, #16]	; (80097b0 <HAL_TIM_Encoder_MspInit+0x88>)
 800979e:	f001 fa27 	bl	800abf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80097a2:	bf00      	nop
 80097a4:	3728      	adds	r7, #40	; 0x28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	40023800 	.word	0x40023800
 80097b0:	40020000 	.word	0x40020000

080097b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a1c      	ldr	r2, [pc, #112]	; (8009834 <HAL_TIM_Base_MspInit+0x80>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d116      	bne.n	80097f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <HAL_TIM_Base_MspInit+0x84>)
 80097cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ce:	4a1a      	ldr	r2, [pc, #104]	; (8009838 <HAL_TIM_Base_MspInit+0x84>)
 80097d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097d4:	6453      	str	r3, [r2, #68]	; 0x44
 80097d6:	4b18      	ldr	r3, [pc, #96]	; (8009838 <HAL_TIM_Base_MspInit+0x84>)
 80097d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80097e2:	2200      	movs	r2, #0
 80097e4:	2100      	movs	r1, #0
 80097e6:	2019      	movs	r0, #25
 80097e8:	f000 fd91 	bl	800a30e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80097ec:	2019      	movs	r0, #25
 80097ee:	f000 fdaa 	bl	800a346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80097f2:	e01a      	b.n	800982a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a10      	ldr	r2, [pc, #64]	; (800983c <HAL_TIM_Base_MspInit+0x88>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d115      	bne.n	800982a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80097fe:	2300      	movs	r3, #0
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <HAL_TIM_Base_MspInit+0x84>)
 8009804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009806:	4a0c      	ldr	r2, [pc, #48]	; (8009838 <HAL_TIM_Base_MspInit+0x84>)
 8009808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800980c:	6453      	str	r3, [r2, #68]	; 0x44
 800980e:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <HAL_TIM_Base_MspInit+0x84>)
 8009810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009816:	60bb      	str	r3, [r7, #8]
 8009818:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800981a:	2200      	movs	r2, #0
 800981c:	2100      	movs	r1, #0
 800981e:	201a      	movs	r0, #26
 8009820:	f000 fd75 	bl	800a30e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009824:	201a      	movs	r0, #26
 8009826:	f000 fd8e 	bl	800a346 <HAL_NVIC_EnableIRQ>
}
 800982a:	bf00      	nop
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40014400 	.word	0x40014400
 8009838:	40023800 	.word	0x40023800
 800983c:	40014800 	.word	0x40014800

08009840 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d017      	beq.n	8009888 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	60fb      	str	r3, [r7, #12]
	}
}
 8009888:	bf00      	nop
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a4:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0310 	and.w	r3, r3, #16
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d056      	beq.n	8009966 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c0:	2220      	movs	r2, #32
 80098c2:	409a      	lsls	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80098d8:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3304      	adds	r3, #4
 80098de:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80098e0:	2300      	movs	r3, #0
 80098e2:	82fb      	strh	r3, [r7, #22]
 80098e4:	e01a      	b.n	800991c <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80098ec:	8afb      	ldrh	r3, [r7, #22]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7ff fb14 	bl	8008f22 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 80098fa:	8afb      	ldrh	r3, [r7, #22]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	4413      	add	r3, r2
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b0a      	cmp	r3, #10
 8009904:	d107      	bne.n	8009916 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800990c:	3301      	adds	r3, #1
 800990e:	b2da      	uxtb	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009916:	8afb      	ldrh	r3, [r7, #22]
 8009918:	3301      	adds	r3, #1
 800991a:	82fb      	strh	r3, [r7, #22]
 800991c:	8afa      	ldrh	r2, [r7, #22]
 800991e:	89fb      	ldrh	r3, [r7, #14]
 8009920:	429a      	cmp	r2, r3
 8009922:	d3e0      	bcc.n	80098e6 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992c:	223f      	movs	r2, #63	; 0x3f
 800992e:	409a      	lsls	r2, r3
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	1d1a      	adds	r2, r3, #4
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2240      	movs	r2, #64	; 0x40
 800994c:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f042 0201 	orr.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]
	}
}
 8009966:	bf00      	nop
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	4611      	mov	r1, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff facc 	bl	8008f22 <RB_Write>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d01f      	beq.n	80099f6 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80099b6:	e013      	b.n	80099e0 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b0a      	cmp	r3, #10
 80099be:	d10c      	bne.n	80099da <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 80099d6:	2300      	movs	r3, #0
 80099d8:	e00e      	b.n	80099f8 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3344      	adds	r3, #68	; 0x44
 80099e4:	68f9      	ldr	r1, [r7, #12]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fa72 	bl	8008ed0 <RB_Read>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0e2      	beq.n	80099b8 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 80099f2:	2300      	movs	r3, #0
 80099f4:	e000      	b.n	80099f8 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 80099f6:	2301      	movs	r3, #1
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009a0e:	e012      	b.n	8009a36 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ffaa 	bl	800996e <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	2b0a      	cmp	r3, #10
 8009a24:	d107      	bne.n	8009a36 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	72fb      	strb	r3, [r7, #11]
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e6      	bne.n	8009a10 <UARTDMA_Print+0x10>
		}
	}
}
 8009a42:	bf00      	nop
 8009a44:	bf00      	nop
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009a78:	2300      	movs	r3, #0
 8009a7a:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d028      	beq.n	8009ade <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009a8c:	e013      	b.n	8009ab6 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8009a8e:	7b7b      	ldrb	r3, [r7, #13]
 8009a90:	2b0a      	cmp	r3, #10
 8009a92:	d107      	bne.n	8009aa4 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8009aa4:	89fb      	ldrh	r3, [r7, #14]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	81fa      	strh	r2, [r7, #14]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	7b7a      	ldrb	r2, [r7, #13]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	440b      	add	r3, r1
 8009ab2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009abc:	f107 020d 	add.w	r2, r7, #13
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fa04 	bl	8008ed0 <RB_Read>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0df      	beq.n	8009a8e <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	33c7      	adds	r3, #199	; 0xc7
 8009ad6:	89fa      	ldrh	r2, [r7, #14]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f005 ffd9 	bl	800fa90 <HAL_UART_Transmit_DMA>
	}
}
 8009ade:	bf00      	nop
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f042 0210 	orr.w	r2, r2, #16
 8009b08:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0210 	orr.w	r2, r2, #16
 8009b20:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0210 	orr.w	r2, r2, #16
 8009b38:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3304      	adds	r3, #4
 8009b42:	2240      	movs	r2, #64	; 0x40
 8009b44:	4619      	mov	r1, r3
 8009b46:	f006 f821 	bl	800fb8c <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0208 	bic.w	r2, r2, #8
 8009b60:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0208 	bic.w	r2, r2, #8
 8009b78:	601a      	str	r2, [r3, #0]
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009b8a:	4a12      	ldr	r2, [pc, #72]	; (8009bd4 <MX_USART1_UART_Init+0x50>)
 8009b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009b8e:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009b96:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ba8:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009baa:	220c      	movs	r2, #12
 8009bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009bae:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bb4:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009bba:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <MX_USART1_UART_Init+0x4c>)
 8009bbc:	f005 ff1a 	bl	800f9f4 <HAL_UART_Init>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009bc6:	f7fc f817 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009bca:	bf00      	nop
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	20000be8 	.word	0x20000be8
 8009bd4:	40011000 	.word	0x40011000

08009bd8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009bdc:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009bde:	4a12      	ldr	r2, [pc, #72]	; (8009c28 <MX_USART2_UART_Init+0x50>)
 8009be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009be2:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009bea:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009bfc:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009bfe:	220c      	movs	r2, #12
 8009c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c02:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009c0e:	4805      	ldr	r0, [pc, #20]	; (8009c24 <MX_USART2_UART_Init+0x4c>)
 8009c10:	f005 fef0 	bl	800f9f4 <HAL_UART_Init>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009c1a:	f7fb ffed 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009c1e:	bf00      	nop
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000c2c 	.word	0x20000c2c
 8009c28:	40004400 	.word	0x40004400

08009c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08c      	sub	sp, #48	; 0x30
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c34:	f107 031c 	add.w	r3, r7, #28
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	609a      	str	r2, [r3, #8]
 8009c40:	60da      	str	r2, [r3, #12]
 8009c42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a59      	ldr	r2, [pc, #356]	; (8009db0 <HAL_UART_MspInit+0x184>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	f040 80c0 	bne.w	8009dd0 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009c50:	2300      	movs	r3, #0
 8009c52:	61bb      	str	r3, [r7, #24]
 8009c54:	4b57      	ldr	r3, [pc, #348]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c58:	4a56      	ldr	r2, [pc, #344]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c5a:	f043 0310 	orr.w	r3, r3, #16
 8009c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8009c60:	4b54      	ldr	r3, [pc, #336]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c64:	f003 0310 	and.w	r3, r3, #16
 8009c68:	61bb      	str	r3, [r7, #24]
 8009c6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	4b50      	ldr	r3, [pc, #320]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	4a4f      	ldr	r2, [pc, #316]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c76:	f043 0301 	orr.w	r3, r3, #1
 8009c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8009c7c:	4b4d      	ldr	r3, [pc, #308]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	617b      	str	r3, [r7, #20]
 8009c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c88:	2300      	movs	r3, #0
 8009c8a:	613b      	str	r3, [r7, #16]
 8009c8c:	4b49      	ldr	r3, [pc, #292]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	4a48      	ldr	r2, [pc, #288]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c92:	f043 0302 	orr.w	r3, r3, #2
 8009c96:	6313      	str	r3, [r2, #48]	; 0x30
 8009c98:	4b46      	ldr	r3, [pc, #280]	; (8009db4 <HAL_UART_MspInit+0x188>)
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	f003 0302 	and.w	r3, r3, #2
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 8009ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009caa:	2302      	movs	r3, #2
 8009cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009cb6:	2307      	movs	r3, #7
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009cba:	f107 031c 	add.w	r3, r7, #28
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	483d      	ldr	r0, [pc, #244]	; (8009db8 <HAL_UART_MspInit+0x18c>)
 8009cc2:	f000 ff95 	bl	800abf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 8009cc6:	2380      	movs	r3, #128	; 0x80
 8009cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009cd6:	2307      	movs	r3, #7
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009cda:	f107 031c 	add.w	r3, r7, #28
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4836      	ldr	r0, [pc, #216]	; (8009dbc <HAL_UART_MspInit+0x190>)
 8009ce2:	f000 ff85 	bl	800abf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009ce6:	4b36      	ldr	r3, [pc, #216]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009ce8:	4a36      	ldr	r2, [pc, #216]	; (8009dc4 <HAL_UART_MspInit+0x198>)
 8009cea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009cec:	4b34      	ldr	r3, [pc, #208]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cf2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cf4:	4b32      	ldr	r3, [pc, #200]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cfa:	4b31      	ldr	r3, [pc, #196]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009d00:	4b2f      	ldr	r3, [pc, #188]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d06:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d08:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d0e:	4b2c      	ldr	r3, [pc, #176]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009d14:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009d1a:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d20:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009d26:	4826      	ldr	r0, [pc, #152]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d28:	f000 fb52 	bl	800a3d0 <HAL_DMA_Init>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8009d32:	f7fb ff61 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a21      	ldr	r2, [pc, #132]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8009d3c:	4a20      	ldr	r2, [pc, #128]	; (8009dc0 <HAL_UART_MspInit+0x194>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009d42:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d44:	4a21      	ldr	r2, [pc, #132]	; (8009dcc <HAL_UART_MspInit+0x1a0>)
 8009d46:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009d48:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d50:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d52:	2240      	movs	r2, #64	; 0x40
 8009d54:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d56:	4b1c      	ldr	r3, [pc, #112]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009d5c:	4b1a      	ldr	r3, [pc, #104]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d64:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d6a:	4b17      	ldr	r3, [pc, #92]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009d70:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d7c:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009d82:	4811      	ldr	r0, [pc, #68]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d84:	f000 fb24 	bl	800a3d0 <HAL_DMA_Init>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8009d8e:	f7fb ff33 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a0c      	ldr	r2, [pc, #48]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d96:	635a      	str	r2, [r3, #52]	; 0x34
 8009d98:	4a0b      	ldr	r2, [pc, #44]	; (8009dc8 <HAL_UART_MspInit+0x19c>)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	2025      	movs	r0, #37	; 0x25
 8009da4:	f000 fab3 	bl	800a30e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009da8:	2025      	movs	r0, #37	; 0x25
 8009daa:	f000 facc 	bl	800a346 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009dae:	e09d      	b.n	8009eec <HAL_UART_MspInit+0x2c0>
 8009db0:	40011000 	.word	0x40011000
 8009db4:	40023800 	.word	0x40023800
 8009db8:	40020000 	.word	0x40020000
 8009dbc:	40020400 	.word	0x40020400
 8009dc0:	20000b28 	.word	0x20000b28
 8009dc4:	40026440 	.word	0x40026440
 8009dc8:	20000ac8 	.word	0x20000ac8
 8009dcc:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a47      	ldr	r2, [pc, #284]	; (8009ef4 <HAL_UART_MspInit+0x2c8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	f040 8088 	bne.w	8009eec <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	4b45      	ldr	r3, [pc, #276]	; (8009ef8 <HAL_UART_MspInit+0x2cc>)
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	4a44      	ldr	r2, [pc, #272]	; (8009ef8 <HAL_UART_MspInit+0x2cc>)
 8009de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dea:	6413      	str	r3, [r2, #64]	; 0x40
 8009dec:	4b42      	ldr	r3, [pc, #264]	; (8009ef8 <HAL_UART_MspInit+0x2cc>)
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60bb      	str	r3, [r7, #8]
 8009dfc:	4b3e      	ldr	r3, [pc, #248]	; (8009ef8 <HAL_UART_MspInit+0x2cc>)
 8009dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e00:	4a3d      	ldr	r2, [pc, #244]	; (8009ef8 <HAL_UART_MspInit+0x2cc>)
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	6313      	str	r3, [r2, #48]	; 0x30
 8009e08:	4b3b      	ldr	r3, [pc, #236]	; (8009ef8 <HAL_UART_MspInit+0x2cc>)
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	60bb      	str	r3, [r7, #8]
 8009e12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 8009e14:	230c      	movs	r3, #12
 8009e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e20:	2303      	movs	r3, #3
 8009e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009e24:	2307      	movs	r3, #7
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e28:	f107 031c 	add.w	r3, r7, #28
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4833      	ldr	r0, [pc, #204]	; (8009efc <HAL_UART_MspInit+0x2d0>)
 8009e30:	f000 fede 	bl	800abf0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009e34:	4b32      	ldr	r3, [pc, #200]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e36:	4a33      	ldr	r2, [pc, #204]	; (8009f04 <HAL_UART_MspInit+0x2d8>)
 8009e38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009e3a:	4b31      	ldr	r3, [pc, #196]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e42:	4b2f      	ldr	r3, [pc, #188]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e48:	4b2d      	ldr	r3, [pc, #180]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e4e:	4b2c      	ldr	r3, [pc, #176]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e56:	4b2a      	ldr	r3, [pc, #168]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e5c:	4b28      	ldr	r3, [pc, #160]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009e62:	4b27      	ldr	r3, [pc, #156]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e6e:	4b24      	ldr	r3, [pc, #144]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009e74:	4822      	ldr	r0, [pc, #136]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e76:	f000 faab 	bl	800a3d0 <HAL_DMA_Init>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8009e80:	f7fb feba 	bl	8005bf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1e      	ldr	r2, [pc, #120]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e88:	639a      	str	r2, [r3, #56]	; 0x38
 8009e8a:	4a1d      	ldr	r2, [pc, #116]	; (8009f00 <HAL_UART_MspInit+0x2d4>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8009e90:	4b1d      	ldr	r3, [pc, #116]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009e92:	4a1e      	ldr	r2, [pc, #120]	; (8009f0c <HAL_UART_MspInit+0x2e0>)
 8009e94:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8009e96:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e9e:	4b1a      	ldr	r3, [pc, #104]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ea0:	2240      	movs	r2, #64	; 0x40
 8009ea2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ea4:	4b18      	ldr	r3, [pc, #96]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009eaa:	4b17      	ldr	r3, [pc, #92]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eb0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009eb2:	4b15      	ldr	r3, [pc, #84]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009eb8:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009ebe:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009ec4:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009eca:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009ed0:	480d      	ldr	r0, [pc, #52]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ed2:	f000 fa7d 	bl	800a3d0 <HAL_DMA_Init>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8009edc:	f7fb fe8c 	bl	8005bf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a09      	ldr	r2, [pc, #36]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8009ee6:	4a08      	ldr	r2, [pc, #32]	; (8009f08 <HAL_UART_MspInit+0x2dc>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009eec:	bf00      	nop
 8009eee:	3730      	adds	r7, #48	; 0x30
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40004400 	.word	0x40004400
 8009ef8:	40023800 	.word	0x40023800
 8009efc:	40020000 	.word	0x40020000
 8009f00:	20000a68 	.word	0x20000a68
 8009f04:	40026088 	.word	0x40026088
 8009f08:	20000b88 	.word	0x20000b88
 8009f0c:	400260a0 	.word	0x400260a0

08009f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009f14:	480d      	ldr	r0, [pc, #52]	; (8009f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009f16:	490e      	ldr	r1, [pc, #56]	; (8009f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009f18:	4a0e      	ldr	r2, [pc, #56]	; (8009f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009f1c:	e002      	b.n	8009f24 <LoopCopyDataInit>

08009f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f22:	3304      	adds	r3, #4

08009f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f28:	d3f9      	bcc.n	8009f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f2a:	4a0b      	ldr	r2, [pc, #44]	; (8009f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009f2c:	4c0b      	ldr	r4, [pc, #44]	; (8009f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8009f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f30:	e001      	b.n	8009f36 <LoopFillZerobss>

08009f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f34:	3204      	adds	r2, #4

08009f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f38:	d3fb      	bcc.n	8009f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009f3a:	f7ff fb45 	bl	80095c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009f3e:	f006 fea7 	bl	8010c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009f42:	f7fb fd17 	bl	8005974 <main>
  bx  lr    
 8009f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f50:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8009f54:	080295d8 	.word	0x080295d8
  ldr r2, =_sbss
 8009f58:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009f5c:	20000c84 	.word	0x20000c84

08009f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f60:	e7fe      	b.n	8009f60 <ADC_IRQHandler>
	...

08009f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009f68:	4b0e      	ldr	r3, [pc, #56]	; (8009fa4 <HAL_Init+0x40>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a0d      	ldr	r2, [pc, #52]	; (8009fa4 <HAL_Init+0x40>)
 8009f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009f74:	4b0b      	ldr	r3, [pc, #44]	; (8009fa4 <HAL_Init+0x40>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a0a      	ldr	r2, [pc, #40]	; (8009fa4 <HAL_Init+0x40>)
 8009f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009f80:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <HAL_Init+0x40>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a07      	ldr	r2, [pc, #28]	; (8009fa4 <HAL_Init+0x40>)
 8009f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f8c:	2003      	movs	r0, #3
 8009f8e:	f000 f9b3 	bl	800a2f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009f92:	2000      	movs	r0, #0
 8009f94:	f000 f808 	bl	8009fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f98:	f7ff f95e 	bl	8009258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	40023c00 	.word	0x40023c00

08009fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009fb0:	4b12      	ldr	r3, [pc, #72]	; (8009ffc <HAL_InitTick+0x54>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	4b12      	ldr	r3, [pc, #72]	; (800a000 <HAL_InitTick+0x58>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f9d9 	bl	800a37e <HAL_SYSTICK_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e00e      	b.n	8009ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b0f      	cmp	r3, #15
 8009fda:	d80a      	bhi.n	8009ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009fdc:	2200      	movs	r2, #0
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	f000 f993 	bl	800a30e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009fe8:	4a06      	ldr	r2, [pc, #24]	; (800a004 <HAL_InitTick+0x5c>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e000      	b.n	8009ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000034 	.word	0x20000034
 800a000:	2000003c 	.word	0x2000003c
 800a004:	20000038 	.word	0x20000038

0800a008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a00c:	4b06      	ldr	r3, [pc, #24]	; (800a028 <HAL_IncTick+0x20>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	461a      	mov	r2, r3
 800a012:	4b06      	ldr	r3, [pc, #24]	; (800a02c <HAL_IncTick+0x24>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4413      	add	r3, r2
 800a018:	4a04      	ldr	r2, [pc, #16]	; (800a02c <HAL_IncTick+0x24>)
 800a01a:	6013      	str	r3, [r2, #0]
}
 800a01c:	bf00      	nop
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	2000003c 	.word	0x2000003c
 800a02c:	20000c70 	.word	0x20000c70

0800a030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
  return uwTick;
 800a034:	4b03      	ldr	r3, [pc, #12]	; (800a044 <HAL_GetTick+0x14>)
 800a036:	681b      	ldr	r3, [r3, #0]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000c70 	.word	0x20000c70

0800a048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a050:	f7ff ffee 	bl	800a030 <HAL_GetTick>
 800a054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a060:	d005      	beq.n	800a06e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a062:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <HAL_Delay+0x44>)
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a06e:	bf00      	nop
 800a070:	f7ff ffde 	bl	800a030 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d8f7      	bhi.n	800a070 <HAL_Delay+0x28>
  {
  }
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	2000003c 	.word	0x2000003c

0800a090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0a0:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <__NVIC_SetPriorityGrouping+0x44>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a0b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a0bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a0c2:	4a04      	ldr	r2, [pc, #16]	; (800a0d4 <__NVIC_SetPriorityGrouping+0x44>)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	60d3      	str	r3, [r2, #12]
}
 800a0c8:	bf00      	nop
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	e000ed00 	.word	0xe000ed00

0800a0d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <__NVIC_GetPriorityGrouping+0x18>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	0a1b      	lsrs	r3, r3, #8
 800a0e2:	f003 0307 	and.w	r3, r3, #7
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	e000ed00 	.word	0xe000ed00

0800a0f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a102:	2b00      	cmp	r3, #0
 800a104:	db0b      	blt.n	800a11e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	f003 021f 	and.w	r2, r3, #31
 800a10c:	4907      	ldr	r1, [pc, #28]	; (800a12c <__NVIC_EnableIRQ+0x38>)
 800a10e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a112:	095b      	lsrs	r3, r3, #5
 800a114:	2001      	movs	r0, #1
 800a116:	fa00 f202 	lsl.w	r2, r0, r2
 800a11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	e000e100 	.word	0xe000e100

0800a130 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	db12      	blt.n	800a168 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	f003 021f 	and.w	r2, r3, #31
 800a148:	490a      	ldr	r1, [pc, #40]	; (800a174 <__NVIC_DisableIRQ+0x44>)
 800a14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a14e:	095b      	lsrs	r3, r3, #5
 800a150:	2001      	movs	r0, #1
 800a152:	fa00 f202 	lsl.w	r2, r0, r2
 800a156:	3320      	adds	r3, #32
 800a158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a15c:	f3bf 8f4f 	dsb	sy
}
 800a160:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a162:	f3bf 8f6f 	isb	sy
}
 800a166:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	e000e100 	.word	0xe000e100

0800a178 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a186:	2b00      	cmp	r3, #0
 800a188:	db0e      	blt.n	800a1a8 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800a18a:	4a0b      	ldr	r2, [pc, #44]	; (800a1b8 <__NVIC_GetPendingIRQ+0x40>)
 800a18c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a190:	095b      	lsrs	r3, r3, #5
 800a192:	3340      	adds	r3, #64	; 0x40
 800a194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	f003 031f 	and.w	r3, r3, #31
 800a19e:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	e000      	b.n	800a1aa <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800a1a8:	2300      	movs	r3, #0
  }
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	e000e100 	.word	0xe000e100

0800a1bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	db0c      	blt.n	800a1e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	f003 021f 	and.w	r2, r3, #31
 800a1d4:	4907      	ldr	r1, [pc, #28]	; (800a1f4 <__NVIC_ClearPendingIRQ+0x38>)
 800a1d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	2001      	movs	r0, #1
 800a1de:	fa00 f202 	lsl.w	r2, r0, r2
 800a1e2:	3360      	adds	r3, #96	; 0x60
 800a1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	e000e100 	.word	0xe000e100

0800a1f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db0a      	blt.n	800a222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	490c      	ldr	r1, [pc, #48]	; (800a244 <__NVIC_SetPriority+0x4c>)
 800a212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a216:	0112      	lsls	r2, r2, #4
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	440b      	add	r3, r1
 800a21c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a220:	e00a      	b.n	800a238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	b2da      	uxtb	r2, r3
 800a226:	4908      	ldr	r1, [pc, #32]	; (800a248 <__NVIC_SetPriority+0x50>)
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	f003 030f 	and.w	r3, r3, #15
 800a22e:	3b04      	subs	r3, #4
 800a230:	0112      	lsls	r2, r2, #4
 800a232:	b2d2      	uxtb	r2, r2
 800a234:	440b      	add	r3, r1
 800a236:	761a      	strb	r2, [r3, #24]
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	e000e100 	.word	0xe000e100
 800a248:	e000ed00 	.word	0xe000ed00

0800a24c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b089      	sub	sp, #36	; 0x24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f1c3 0307 	rsb	r3, r3, #7
 800a266:	2b04      	cmp	r3, #4
 800a268:	bf28      	it	cs
 800a26a:	2304      	movcs	r3, #4
 800a26c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	3304      	adds	r3, #4
 800a272:	2b06      	cmp	r3, #6
 800a274:	d902      	bls.n	800a27c <NVIC_EncodePriority+0x30>
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	3b03      	subs	r3, #3
 800a27a:	e000      	b.n	800a27e <NVIC_EncodePriority+0x32>
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a280:	f04f 32ff 	mov.w	r2, #4294967295
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	fa02 f303 	lsl.w	r3, r2, r3
 800a28a:	43da      	mvns	r2, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	401a      	ands	r2, r3
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a294:	f04f 31ff 	mov.w	r1, #4294967295
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	fa01 f303 	lsl.w	r3, r1, r3
 800a29e:	43d9      	mvns	r1, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2a4:	4313      	orrs	r3, r2
         );
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3724      	adds	r7, #36	; 0x24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2c4:	d301      	bcc.n	800a2ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e00f      	b.n	800a2ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2ca:	4a0a      	ldr	r2, [pc, #40]	; (800a2f4 <SysTick_Config+0x40>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2d2:	210f      	movs	r1, #15
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	f7ff ff8e 	bl	800a1f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2dc:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <SysTick_Config+0x40>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2e2:	4b04      	ldr	r3, [pc, #16]	; (800a2f4 <SysTick_Config+0x40>)
 800a2e4:	2207      	movs	r2, #7
 800a2e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	e000e010 	.word	0xe000e010

0800a2f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff fec5 	bl	800a090 <__NVIC_SetPriorityGrouping>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	4603      	mov	r3, r0
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a320:	f7ff feda 	bl	800a0d8 <__NVIC_GetPriorityGrouping>
 800a324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	6978      	ldr	r0, [r7, #20]
 800a32c:	f7ff ff8e 	bl	800a24c <NVIC_EncodePriority>
 800a330:	4602      	mov	r2, r0
 800a332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff ff5d 	bl	800a1f8 <__NVIC_SetPriority>
}
 800a33e:	bf00      	nop
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	4603      	mov	r3, r0
 800a34e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff fecd 	bl	800a0f4 <__NVIC_EnableIRQ>
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	4603      	mov	r3, r0
 800a36a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a36c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff fedd 	bl	800a130 <__NVIC_DisableIRQ>
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff ff94 	bl	800a2b4 <SysTick_Config>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	4603      	mov	r3, r0
 800a39e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a3a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fee7 	bl	800a178 <__NVIC_GetPendingIRQ>
 800a3aa:	4603      	mov	r3, r0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fefa 	bl	800a1bc <__NVIC_ClearPendingIRQ>
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3dc:	f7ff fe28 	bl	800a030 <HAL_GetTick>
 800a3e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e099      	b.n	800a520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0201 	bic.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a40c:	e00f      	b.n	800a42e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a40e:	f7ff fe0f 	bl	800a030 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b05      	cmp	r3, #5
 800a41a:	d908      	bls.n	800a42e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2203      	movs	r2, #3
 800a426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e078      	b.n	800a520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e8      	bne.n	800a40e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4b38      	ldr	r3, [pc, #224]	; (800a528 <HAL_DMA_Init+0x158>)
 800a448:	4013      	ands	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a45a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	2b04      	cmp	r3, #4
 800a486:	d107      	bne.n	800a498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a490:	4313      	orrs	r3, r2
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d117      	bne.n	800a4f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00e      	beq.n	800a4f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fb0f 	bl	800aaf8 <DMA_CheckFifoParam>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2240      	movs	r2, #64	; 0x40
 800a4e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e016      	b.n	800a520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fac6 	bl	800aa8c <DMA_CalcBaseAndBitshift>
 800a500:	4603      	mov	r3, r0
 800a502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a508:	223f      	movs	r2, #63	; 0x3f
 800a50a:	409a      	lsls	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	f010803f 	.word	0xf010803f

0800a52c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a542:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_DMA_Start_IT+0x26>
 800a54e:	2302      	movs	r3, #2
 800a550:	e040      	b.n	800a5d4 <HAL_DMA_Start_IT+0xa8>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b01      	cmp	r3, #1
 800a564:	d12f      	bne.n	800a5c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2202      	movs	r2, #2
 800a56a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	68b9      	ldr	r1, [r7, #8]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 fa58 	bl	800aa30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a584:	223f      	movs	r2, #63	; 0x3f
 800a586:	409a      	lsls	r2, r3
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f042 0216 	orr.w	r2, r2, #22
 800a59a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d007      	beq.n	800a5b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f042 0208 	orr.w	r2, r2, #8
 800a5b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0201 	orr.w	r2, r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	e005      	b.n	800a5d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a5ea:	f7ff fd21 	bl	800a030 <HAL_GetTick>
 800a5ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d008      	beq.n	800a60e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2280      	movs	r2, #128	; 0x80
 800a600:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e052      	b.n	800a6b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f022 0216 	bic.w	r2, r2, #22
 800a61c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	695a      	ldr	r2, [r3, #20]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a62c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <HAL_DMA_Abort+0x62>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d007      	beq.n	800a64e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0208 	bic.w	r2, r2, #8
 800a64c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a65e:	e013      	b.n	800a688 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a660:	f7ff fce6 	bl	800a030 <HAL_GetTick>
 800a664:	4602      	mov	r2, r0
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	2b05      	cmp	r3, #5
 800a66c:	d90c      	bls.n	800a688 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2203      	movs	r2, #3
 800a678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e015      	b.n	800a6b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1e4      	bne.n	800a660 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69a:	223f      	movs	r2, #63	; 0x3f
 800a69c:	409a      	lsls	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d004      	beq.n	800a6da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2280      	movs	r2, #128	; 0x80
 800a6d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e00c      	b.n	800a6f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2205      	movs	r2, #5
 800a6de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0201 	bic.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a70c:	4b92      	ldr	r3, [pc, #584]	; (800a958 <HAL_DMA_IRQHandler+0x258>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a92      	ldr	r2, [pc, #584]	; (800a95c <HAL_DMA_IRQHandler+0x25c>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	0a9b      	lsrs	r3, r3, #10
 800a718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72a:	2208      	movs	r2, #8
 800a72c:	409a      	lsls	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4013      	ands	r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d01a      	beq.n	800a76c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d013      	beq.n	800a76c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f022 0204 	bic.w	r2, r2, #4
 800a752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a758:	2208      	movs	r2, #8
 800a75a:	409a      	lsls	r2, r3
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a764:	f043 0201 	orr.w	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a770:	2201      	movs	r2, #1
 800a772:	409a      	lsls	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4013      	ands	r3, r2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d012      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78e:	2201      	movs	r2, #1
 800a790:	409a      	lsls	r2, r3
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79a:	f043 0202 	orr.w	r2, r3, #2
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	409a      	lsls	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d012      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00b      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c4:	2204      	movs	r2, #4
 800a7c6:	409a      	lsls	r2, r3
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d0:	f043 0204 	orr.w	r2, r3, #4
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7dc:	2210      	movs	r2, #16
 800a7de:	409a      	lsls	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d043      	beq.n	800a870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d03c      	beq.n	800a870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fa:	2210      	movs	r2, #16
 800a7fc:	409a      	lsls	r2, r3
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d018      	beq.n	800a842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d108      	bne.n	800a830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	d024      	beq.n	800a870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	4798      	blx	r3
 800a82e:	e01f      	b.n	800a870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a834:	2b00      	cmp	r3, #0
 800a836:	d01b      	beq.n	800a870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	4798      	blx	r3
 800a840:	e016      	b.n	800a870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d107      	bne.n	800a860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f022 0208 	bic.w	r2, r2, #8
 800a85e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a874:	2220      	movs	r2, #32
 800a876:	409a      	lsls	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4013      	ands	r3, r2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 808e 	beq.w	800a99e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0310 	and.w	r3, r3, #16
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 8086 	beq.w	800a99e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a896:	2220      	movs	r2, #32
 800a898:	409a      	lsls	r2, r3
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b05      	cmp	r3, #5
 800a8a8:	d136      	bne.n	800a918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0216 	bic.w	r2, r2, #22
 800a8b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	695a      	ldr	r2, [r3, #20]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <HAL_DMA_IRQHandler+0x1da>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d007      	beq.n	800a8ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0208 	bic.w	r2, r2, #8
 800a8e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ee:	223f      	movs	r2, #63	; 0x3f
 800a8f0:	409a      	lsls	r2, r3
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d07d      	beq.n	800aa0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
        }
        return;
 800a916:	e078      	b.n	800aa0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d01c      	beq.n	800a960 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d108      	bne.n	800a946 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d030      	beq.n	800a99e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	4798      	blx	r3
 800a944:	e02b      	b.n	800a99e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d027      	beq.n	800a99e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	4798      	blx	r3
 800a956:	e022      	b.n	800a99e <HAL_DMA_IRQHandler+0x29e>
 800a958:	20000034 	.word	0x20000034
 800a95c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10f      	bne.n	800a98e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f022 0210 	bic.w	r2, r2, #16
 800a97c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d032      	beq.n	800aa0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d022      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2205      	movs	r2, #5
 800a9b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 0201 	bic.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60bb      	str	r3, [r7, #8]
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d307      	bcc.n	800a9e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1f2      	bne.n	800a9ca <HAL_DMA_IRQHandler+0x2ca>
 800a9e4:	e000      	b.n	800a9e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a9e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	4798      	blx	r3
 800aa08:	e000      	b.n	800aa0c <HAL_DMA_IRQHandler+0x30c>
        return;
 800aa0a:	bf00      	nop
    }
  }
}
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop

0800aa14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa22:	b2db      	uxtb	r3, r3
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d108      	bne.n	800aa70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aa6e:	e007      	b.n	800aa80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	60da      	str	r2, [r3, #12]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	3b10      	subs	r3, #16
 800aa9c:	4a14      	ldr	r2, [pc, #80]	; (800aaf0 <DMA_CalcBaseAndBitshift+0x64>)
 800aa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa2:	091b      	lsrs	r3, r3, #4
 800aaa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800aaa6:	4a13      	ldr	r2, [pc, #76]	; (800aaf4 <DMA_CalcBaseAndBitshift+0x68>)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4413      	add	r3, r2
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d909      	bls.n	800aace <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aac2:	f023 0303 	bic.w	r3, r3, #3
 800aac6:	1d1a      	adds	r2, r3, #4
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	659a      	str	r2, [r3, #88]	; 0x58
 800aacc:	e007      	b.n	800aade <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aad6:	f023 0303 	bic.w	r3, r3, #3
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	aaaaaaab 	.word	0xaaaaaaab
 800aaf4:	080290ac 	.word	0x080290ac

0800aaf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d11f      	bne.n	800ab52 <DMA_CheckFifoParam+0x5a>
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b03      	cmp	r3, #3
 800ab16:	d856      	bhi.n	800abc6 <DMA_CheckFifoParam+0xce>
 800ab18:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <DMA_CheckFifoParam+0x28>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800ab31 	.word	0x0800ab31
 800ab24:	0800ab43 	.word	0x0800ab43
 800ab28:	0800ab31 	.word	0x0800ab31
 800ab2c:	0800abc7 	.word	0x0800abc7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d046      	beq.n	800abca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab40:	e043      	b.n	800abca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab4a:	d140      	bne.n	800abce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab50:	e03d      	b.n	800abce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5a:	d121      	bne.n	800aba0 <DMA_CheckFifoParam+0xa8>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d837      	bhi.n	800abd2 <DMA_CheckFifoParam+0xda>
 800ab62:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <DMA_CheckFifoParam+0x70>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800ab79 	.word	0x0800ab79
 800ab6c:	0800ab7f 	.word	0x0800ab7f
 800ab70:	0800ab79 	.word	0x0800ab79
 800ab74:	0800ab91 	.word	0x0800ab91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab7c:	e030      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d025      	beq.n	800abd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab8e:	e022      	b.n	800abd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab98:	d11f      	bne.n	800abda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ab9e:	e01c      	b.n	800abda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d903      	bls.n	800abae <DMA_CheckFifoParam+0xb6>
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d003      	beq.n	800abb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800abac:	e018      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	73fb      	strb	r3, [r7, #15]
      break;
 800abb2:	e015      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00e      	beq.n	800abde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	73fb      	strb	r3, [r7, #15]
      break;
 800abc4:	e00b      	b.n	800abde <DMA_CheckFifoParam+0xe6>
      break;
 800abc6:	bf00      	nop
 800abc8:	e00a      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      break;
 800abca:	bf00      	nop
 800abcc:	e008      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      break;
 800abce:	bf00      	nop
 800abd0:	e006      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      break;
 800abd2:	bf00      	nop
 800abd4:	e004      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      break;
 800abd6:	bf00      	nop
 800abd8:	e002      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      break;   
 800abda:	bf00      	nop
 800abdc:	e000      	b.n	800abe0 <DMA_CheckFifoParam+0xe8>
      break;
 800abde:	bf00      	nop
    }
  } 
  
  return status; 
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop

0800abf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b089      	sub	sp, #36	; 0x24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ac02:	2300      	movs	r3, #0
 800ac04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac06:	2300      	movs	r3, #0
 800ac08:	61fb      	str	r3, [r7, #28]
 800ac0a:	e159      	b.n	800aec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	f040 8148 	bne.w	800aeba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d005      	beq.n	800ac42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d130      	bne.n	800aca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac52:	43db      	mvns	r3, r3
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	4013      	ands	r3, r2
 800ac58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	fa02 f303 	lsl.w	r3, r2, r3
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac78:	2201      	movs	r2, #1
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	43db      	mvns	r3, r3
 800ac82:	69ba      	ldr	r2, [r7, #24]
 800ac84:	4013      	ands	r3, r2
 800ac86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	091b      	lsrs	r3, r3, #4
 800ac8e:	f003 0201 	and.w	r2, r3, #1
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	fa02 f303 	lsl.w	r3, r2, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	2b03      	cmp	r3, #3
 800acae:	d017      	beq.n	800ace0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	2203      	movs	r2, #3
 800acbc:	fa02 f303 	lsl.w	r3, r2, r3
 800acc0:	43db      	mvns	r3, r3
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	4013      	ands	r3, r2
 800acc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	fa02 f303 	lsl.w	r3, r2, r3
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d123      	bne.n	800ad34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	08da      	lsrs	r2, r3, #3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3208      	adds	r2, #8
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	220f      	movs	r2, #15
 800ad04:	fa02 f303 	lsl.w	r3, r2, r3
 800ad08:	43db      	mvns	r3, r3
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	691a      	ldr	r2, [r3, #16]
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	08da      	lsrs	r2, r3, #3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3208      	adds	r2, #8
 800ad2e:	69b9      	ldr	r1, [r7, #24]
 800ad30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	2203      	movs	r2, #3
 800ad40:	fa02 f303 	lsl.w	r3, r2, r3
 800ad44:	43db      	mvns	r3, r3
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f003 0203 	and.w	r2, r3, #3
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	fa02 f303 	lsl.w	r3, r2, r3
 800ad5c:	69ba      	ldr	r2, [r7, #24]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 80a2 	beq.w	800aeba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	4b57      	ldr	r3, [pc, #348]	; (800aed8 <HAL_GPIO_Init+0x2e8>)
 800ad7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7e:	4a56      	ldr	r2, [pc, #344]	; (800aed8 <HAL_GPIO_Init+0x2e8>)
 800ad80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad84:	6453      	str	r3, [r2, #68]	; 0x44
 800ad86:	4b54      	ldr	r3, [pc, #336]	; (800aed8 <HAL_GPIO_Init+0x2e8>)
 800ad88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad92:	4a52      	ldr	r2, [pc, #328]	; (800aedc <HAL_GPIO_Init+0x2ec>)
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	089b      	lsrs	r3, r3, #2
 800ad98:	3302      	adds	r3, #2
 800ad9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	220f      	movs	r2, #15
 800adaa:	fa02 f303 	lsl.w	r3, r2, r3
 800adae:	43db      	mvns	r3, r3
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	4013      	ands	r3, r2
 800adb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a49      	ldr	r2, [pc, #292]	; (800aee0 <HAL_GPIO_Init+0x2f0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d019      	beq.n	800adf2 <HAL_GPIO_Init+0x202>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a48      	ldr	r2, [pc, #288]	; (800aee4 <HAL_GPIO_Init+0x2f4>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d013      	beq.n	800adee <HAL_GPIO_Init+0x1fe>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a47      	ldr	r2, [pc, #284]	; (800aee8 <HAL_GPIO_Init+0x2f8>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d00d      	beq.n	800adea <HAL_GPIO_Init+0x1fa>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a46      	ldr	r2, [pc, #280]	; (800aeec <HAL_GPIO_Init+0x2fc>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d007      	beq.n	800ade6 <HAL_GPIO_Init+0x1f6>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a45      	ldr	r2, [pc, #276]	; (800aef0 <HAL_GPIO_Init+0x300>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d101      	bne.n	800ade2 <HAL_GPIO_Init+0x1f2>
 800adde:	2304      	movs	r3, #4
 800ade0:	e008      	b.n	800adf4 <HAL_GPIO_Init+0x204>
 800ade2:	2307      	movs	r3, #7
 800ade4:	e006      	b.n	800adf4 <HAL_GPIO_Init+0x204>
 800ade6:	2303      	movs	r3, #3
 800ade8:	e004      	b.n	800adf4 <HAL_GPIO_Init+0x204>
 800adea:	2302      	movs	r3, #2
 800adec:	e002      	b.n	800adf4 <HAL_GPIO_Init+0x204>
 800adee:	2301      	movs	r3, #1
 800adf0:	e000      	b.n	800adf4 <HAL_GPIO_Init+0x204>
 800adf2:	2300      	movs	r3, #0
 800adf4:	69fa      	ldr	r2, [r7, #28]
 800adf6:	f002 0203 	and.w	r2, r2, #3
 800adfa:	0092      	lsls	r2, r2, #2
 800adfc:	4093      	lsls	r3, r2
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae04:	4935      	ldr	r1, [pc, #212]	; (800aedc <HAL_GPIO_Init+0x2ec>)
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	089b      	lsrs	r3, r3, #2
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ae12:	4b38      	ldr	r3, [pc, #224]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	43db      	mvns	r3, r3
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	4013      	ands	r3, r2
 800ae20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ae36:	4a2f      	ldr	r2, [pc, #188]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ae3c:	4b2d      	ldr	r3, [pc, #180]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	43db      	mvns	r3, r3
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	4013      	ands	r3, r2
 800ae4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ae60:	4a24      	ldr	r2, [pc, #144]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae66:	4b23      	ldr	r3, [pc, #140]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	43db      	mvns	r3, r3
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	4013      	ands	r3, r2
 800ae74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae8a:	4a1a      	ldr	r2, [pc, #104]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae90:	4b18      	ldr	r3, [pc, #96]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	43db      	mvns	r3, r3
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aeb4:	4a0f      	ldr	r2, [pc, #60]	; (800aef4 <HAL_GPIO_Init+0x304>)
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	3301      	adds	r3, #1
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	2b0f      	cmp	r3, #15
 800aec4:	f67f aea2 	bls.w	800ac0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	3724      	adds	r7, #36	; 0x24
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	40023800 	.word	0x40023800
 800aedc:	40013800 	.word	0x40013800
 800aee0:	40020000 	.word	0x40020000
 800aee4:	40020400 	.word	0x40020400
 800aee8:	40020800 	.word	0x40020800
 800aeec:	40020c00 	.word	0x40020c00
 800aef0:	40021000 	.word	0x40021000
 800aef4:	40013c00 	.word	0x40013c00

0800aef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	691a      	ldr	r2, [r3, #16]
 800af08:	887b      	ldrh	r3, [r7, #2]
 800af0a:	4013      	ands	r3, r2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800af10:	2301      	movs	r3, #1
 800af12:	73fb      	strb	r3, [r7, #15]
 800af14:	e001      	b.n	800af1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800af16:	2300      	movs	r3, #0
 800af18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	807b      	strh	r3, [r7, #2]
 800af34:	4613      	mov	r3, r2
 800af36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800af38:	787b      	ldrb	r3, [r7, #1]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800af3e:	887a      	ldrh	r2, [r7, #2]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800af44:	e003      	b.n	800af4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800af46:	887b      	ldrh	r3, [r7, #2]
 800af48:	041a      	lsls	r2, r3, #16
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	619a      	str	r2, [r3, #24]
}
 800af4e:	bf00      	nop
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b085      	sub	sp, #20
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af6c:	887a      	ldrh	r2, [r7, #2]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4013      	ands	r3, r2
 800af72:	041a      	lsls	r2, r3, #16
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	43d9      	mvns	r1, r3
 800af78:	887b      	ldrh	r3, [r7, #2]
 800af7a:	400b      	ands	r3, r1
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	619a      	str	r2, [r3, #24]
}
 800af82:	bf00      	nop
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
	...

0800af90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800af9a:	4b08      	ldr	r3, [pc, #32]	; (800afbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af9c:	695a      	ldr	r2, [r3, #20]
 800af9e:	88fb      	ldrh	r3, [r7, #6]
 800afa0:	4013      	ands	r3, r2
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d006      	beq.n	800afb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800afa6:	4a05      	ldr	r2, [pc, #20]	; (800afbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800afa8:	88fb      	ldrh	r3, [r7, #6]
 800afaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800afac:	88fb      	ldrh	r3, [r7, #6]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fa fe0e 	bl	8005bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	40013c00 	.word	0x40013c00

0800afc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e12b      	b.n	800b22a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7fa fbba 	bl	8005760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2224      	movs	r2, #36	; 0x24
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f022 0201 	bic.w	r2, r2, #1
 800b002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b024:	f003 fcf0 	bl	800ea08 <HAL_RCC_GetPCLK1Freq>
 800b028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4a81      	ldr	r2, [pc, #516]	; (800b234 <HAL_I2C_Init+0x274>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d807      	bhi.n	800b044 <HAL_I2C_Init+0x84>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4a80      	ldr	r2, [pc, #512]	; (800b238 <HAL_I2C_Init+0x278>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	bf94      	ite	ls
 800b03c:	2301      	movls	r3, #1
 800b03e:	2300      	movhi	r3, #0
 800b040:	b2db      	uxtb	r3, r3
 800b042:	e006      	b.n	800b052 <HAL_I2C_Init+0x92>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4a7d      	ldr	r2, [pc, #500]	; (800b23c <HAL_I2C_Init+0x27c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	bf94      	ite	ls
 800b04c:	2301      	movls	r3, #1
 800b04e:	2300      	movhi	r3, #0
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e0e7      	b.n	800b22a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4a78      	ldr	r2, [pc, #480]	; (800b240 <HAL_I2C_Init+0x280>)
 800b05e:	fba2 2303 	umull	r2, r3, r2, r3
 800b062:	0c9b      	lsrs	r3, r3, #18
 800b064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	430a      	orrs	r2, r1
 800b078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4a6a      	ldr	r2, [pc, #424]	; (800b234 <HAL_I2C_Init+0x274>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d802      	bhi.n	800b094 <HAL_I2C_Init+0xd4>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	3301      	adds	r3, #1
 800b092:	e009      	b.n	800b0a8 <HAL_I2C_Init+0xe8>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b09a:	fb02 f303 	mul.w	r3, r2, r3
 800b09e:	4a69      	ldr	r2, [pc, #420]	; (800b244 <HAL_I2C_Init+0x284>)
 800b0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a4:	099b      	lsrs	r3, r3, #6
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	6812      	ldr	r2, [r2, #0]
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b0ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	495c      	ldr	r1, [pc, #368]	; (800b234 <HAL_I2C_Init+0x274>)
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	d819      	bhi.n	800b0fc <HAL_I2C_Init+0x13c>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	1e59      	subs	r1, r3, #1
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0d6:	1c59      	adds	r1, r3, #1
 800b0d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b0dc:	400b      	ands	r3, r1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <HAL_I2C_Init+0x138>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	1e59      	subs	r1, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0f6:	e051      	b.n	800b19c <HAL_I2C_Init+0x1dc>
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	e04f      	b.n	800b19c <HAL_I2C_Init+0x1dc>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d111      	bne.n	800b128 <HAL_I2C_Init+0x168>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	1e58      	subs	r0, r3, #1
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6859      	ldr	r1, [r3, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	440b      	add	r3, r1
 800b112:	fbb0 f3f3 	udiv	r3, r0, r3
 800b116:	3301      	adds	r3, #1
 800b118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bf0c      	ite	eq
 800b120:	2301      	moveq	r3, #1
 800b122:	2300      	movne	r3, #0
 800b124:	b2db      	uxtb	r3, r3
 800b126:	e012      	b.n	800b14e <HAL_I2C_Init+0x18e>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	1e58      	subs	r0, r3, #1
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6859      	ldr	r1, [r3, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	0099      	lsls	r1, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b13e:	3301      	adds	r3, #1
 800b140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b144:	2b00      	cmp	r3, #0
 800b146:	bf0c      	ite	eq
 800b148:	2301      	moveq	r3, #1
 800b14a:	2300      	movne	r3, #0
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <HAL_I2C_Init+0x196>
 800b152:	2301      	movs	r3, #1
 800b154:	e022      	b.n	800b19c <HAL_I2C_Init+0x1dc>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10e      	bne.n	800b17c <HAL_I2C_Init+0x1bc>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	1e58      	subs	r0, r3, #1
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6859      	ldr	r1, [r3, #4]
 800b166:	460b      	mov	r3, r1
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	440b      	add	r3, r1
 800b16c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b170:	3301      	adds	r3, #1
 800b172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b17a:	e00f      	b.n	800b19c <HAL_I2C_Init+0x1dc>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	1e58      	subs	r0, r3, #1
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6859      	ldr	r1, [r3, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	440b      	add	r3, r1
 800b18a:	0099      	lsls	r1, r3, #2
 800b18c:	440b      	add	r3, r1
 800b18e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b192:	3301      	adds	r3, #1
 800b194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	6809      	ldr	r1, [r1, #0]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69da      	ldr	r2, [r3, #28]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b1ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	6911      	ldr	r1, [r2, #16]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	68d2      	ldr	r2, [r2, #12]
 800b1d6:	4311      	orrs	r1, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6812      	ldr	r2, [r2, #0]
 800b1dc:	430b      	orrs	r3, r1
 800b1de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	695a      	ldr	r2, [r3, #20]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f042 0201 	orr.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2220      	movs	r2, #32
 800b216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	000186a0 	.word	0x000186a0
 800b238:	001e847f 	.word	0x001e847f
 800b23c:	003d08ff 	.word	0x003d08ff
 800b240:	431bde83 	.word	0x431bde83
 800b244:	10624dd3 	.word	0x10624dd3

0800b248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	607a      	str	r2, [r7, #4]
 800b252:	461a      	mov	r2, r3
 800b254:	460b      	mov	r3, r1
 800b256:	817b      	strh	r3, [r7, #10]
 800b258:	4613      	mov	r3, r2
 800b25a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b25c:	f7fe fee8 	bl	800a030 <HAL_GetTick>
 800b260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	f040 80e0 	bne.w	800b430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	2319      	movs	r3, #25
 800b276:	2201      	movs	r2, #1
 800b278:	4970      	ldr	r1, [pc, #448]	; (800b43c <HAL_I2C_Master_Transmit+0x1f4>)
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f002 fd7a 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b286:	2302      	movs	r3, #2
 800b288:	e0d3      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b290:	2b01      	cmp	r3, #1
 800b292:	d101      	bne.n	800b298 <HAL_I2C_Master_Transmit+0x50>
 800b294:	2302      	movs	r3, #2
 800b296:	e0cc      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ea>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d007      	beq.n	800b2be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f042 0201 	orr.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2221      	movs	r2, #33	; 0x21
 800b2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2210      	movs	r2, #16
 800b2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	893a      	ldrh	r2, [r7, #8]
 800b2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4a50      	ldr	r2, [pc, #320]	; (800b440 <HAL_I2C_Master_Transmit+0x1f8>)
 800b2fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b300:	8979      	ldrh	r1, [r7, #10]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	6a3a      	ldr	r2, [r7, #32]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f002 f9be 	bl	800d688 <I2C_MasterRequestWrite>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e08d      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b316:	2300      	movs	r3, #0
 800b318:	613b      	str	r3, [r7, #16]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	613b      	str	r3, [r7, #16]
 800b32a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b32c:	e066      	b.n	800b3fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	6a39      	ldr	r1, [r7, #32]
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f002 fdf4 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00d      	beq.n	800b35a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	2b04      	cmp	r3, #4
 800b344:	d107      	bne.n	800b356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e06b      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	781a      	ldrb	r2, [r3, #0]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b374:	b29b      	uxth	r3, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	b29a      	uxth	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b382:	3b01      	subs	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b04      	cmp	r3, #4
 800b396:	d11b      	bne.n	800b3d0 <HAL_I2C_Master_Transmit+0x188>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d017      	beq.n	800b3d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	781a      	ldrb	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	6a39      	ldr	r1, [r7, #32]
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f002 fde4 	bl	800dfa2 <I2C_WaitOnBTFFlagUntilTimeout>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00d      	beq.n	800b3fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d107      	bne.n	800b3f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e01a      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b400:	2b00      	cmp	r3, #0
 800b402:	d194      	bne.n	800b32e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2220      	movs	r2, #32
 800b418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	e000      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b430:	2302      	movs	r3, #2
  }
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	00100002 	.word	0x00100002
 800b440:	ffff0000 	.word	0xffff0000

0800b444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08c      	sub	sp, #48	; 0x30
 800b448:	af02      	add	r7, sp, #8
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	461a      	mov	r2, r3
 800b450:	460b      	mov	r3, r1
 800b452:	817b      	strh	r3, [r7, #10]
 800b454:	4613      	mov	r3, r2
 800b456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b458:	f7fe fdea 	bl	800a030 <HAL_GetTick>
 800b45c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b20      	cmp	r3, #32
 800b468:	f040 820b 	bne.w	800b882 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2319      	movs	r3, #25
 800b472:	2201      	movs	r2, #1
 800b474:	497c      	ldr	r1, [pc, #496]	; (800b668 <HAL_I2C_Master_Receive+0x224>)
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f002 fc7c 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b482:	2302      	movs	r3, #2
 800b484:	e1fe      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d101      	bne.n	800b494 <HAL_I2C_Master_Receive+0x50>
 800b490:	2302      	movs	r3, #2
 800b492:	e1f7      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d007      	beq.n	800b4ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f042 0201 	orr.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2222      	movs	r2, #34	; 0x22
 800b4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2210      	movs	r2, #16
 800b4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	893a      	ldrh	r2, [r7, #8]
 800b4ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4a5c      	ldr	r2, [pc, #368]	; (800b66c <HAL_I2C_Master_Receive+0x228>)
 800b4fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4fc:	8979      	ldrh	r1, [r7, #10]
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f002 f942 	bl	800d78c <I2C_MasterRequestRead>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e1b8      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b516:	2b00      	cmp	r3, #0
 800b518:	d113      	bne.n	800b542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b51a:	2300      	movs	r3, #0
 800b51c:	623b      	str	r3, [r7, #32]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	623b      	str	r3, [r7, #32]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	623b      	str	r3, [r7, #32]
 800b52e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	e18c      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b546:	2b01      	cmp	r3, #1
 800b548:	d11b      	bne.n	800b582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b55a:	2300      	movs	r3, #0
 800b55c:	61fb      	str	r3, [r7, #28]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	61fb      	str	r3, [r7, #28]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	61fb      	str	r3, [r7, #28]
 800b56e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	e16c      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b586:	2b02      	cmp	r3, #2
 800b588:	d11b      	bne.n	800b5c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	61bb      	str	r3, [r7, #24]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	e14c      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	617b      	str	r3, [r7, #20]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b5e8:	e138      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	f200 80f1 	bhi.w	800b7d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d123      	bne.n	800b644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f002 fd41 	bl	800e088 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e139      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	691a      	ldr	r2, [r3, #16]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	b2d2      	uxtb	r2, r2
 800b61c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b62c:	3b01      	subs	r3, #1
 800b62e:	b29a      	uxth	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b638:	b29b      	uxth	r3, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b642:	e10b      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d14e      	bne.n	800b6ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	2200      	movs	r2, #0
 800b654:	4906      	ldr	r1, [pc, #24]	; (800b670 <HAL_I2C_Master_Receive+0x22c>)
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f002 fb8c 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d008      	beq.n	800b674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e10e      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
 800b666:	bf00      	nop
 800b668:	00100002 	.word	0x00100002
 800b66c:	ffff0000 	.word	0xffff0000
 800b670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	691a      	ldr	r2, [r3, #16]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	691a      	ldr	r2, [r3, #16]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	b2d2      	uxtb	r2, r2
 800b6c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6e8:	e0b8      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4966      	ldr	r1, [pc, #408]	; (800b88c <HAL_I2C_Master_Receive+0x448>)
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f002 fb3d 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e0bf      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	691a      	ldr	r2, [r3, #16]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b730:	3b01      	subs	r3, #1
 800b732:	b29a      	uxth	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	b29a      	uxth	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	2200      	movs	r2, #0
 800b74e:	494f      	ldr	r1, [pc, #316]	; (800b88c <HAL_I2C_Master_Receive+0x448>)
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f002 fb0f 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e091      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b76e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	691a      	ldr	r2, [r3, #16]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	b2d2      	uxtb	r2, r2
 800b77c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78c:	3b01      	subs	r3, #1
 800b78e:	b29a      	uxth	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b798:	b29b      	uxth	r3, r3
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	691a      	ldr	r2, [r3, #16]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	b2d2      	uxtb	r2, r2
 800b7ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7d4:	e042      	b.n	800b85c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f002 fc54 	bl	800e088 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e04c      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	691a      	ldr	r2, [r3, #16]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b806:	3b01      	subs	r3, #1
 800b808:	b29a      	uxth	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b812:	b29b      	uxth	r3, r3
 800b814:	3b01      	subs	r3, #1
 800b816:	b29a      	uxth	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	f003 0304 	and.w	r3, r3, #4
 800b826:	2b04      	cmp	r3, #4
 800b828:	d118      	bne.n	800b85c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	691a      	ldr	r2, [r3, #16]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	b2d2      	uxtb	r2, r2
 800b836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b846:	3b01      	subs	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b852:	b29b      	uxth	r3, r3
 800b854:	3b01      	subs	r3, #1
 800b856:	b29a      	uxth	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b860:	2b00      	cmp	r3, #0
 800b862:	f47f aec2 	bne.w	800b5ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2220      	movs	r2, #32
 800b86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	e000      	b.n	800b884 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b882:	2302      	movs	r3, #2
  }
}
 800b884:	4618      	mov	r0, r3
 800b886:	3728      	adds	r7, #40	; 0x28
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	00010004 	.word	0x00010004

0800b890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af02      	add	r7, sp, #8
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	4608      	mov	r0, r1
 800b89a:	4611      	mov	r1, r2
 800b89c:	461a      	mov	r2, r3
 800b89e:	4603      	mov	r3, r0
 800b8a0:	817b      	strh	r3, [r7, #10]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	813b      	strh	r3, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8aa:	f7fe fbc1 	bl	800a030 <HAL_GetTick>
 800b8ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b20      	cmp	r3, #32
 800b8ba:	f040 80d9 	bne.w	800ba70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	2319      	movs	r3, #25
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	496d      	ldr	r1, [pc, #436]	; (800ba7c <HAL_I2C_Mem_Write+0x1ec>)
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f002 fa53 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e0cc      	b.n	800ba72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d101      	bne.n	800b8e6 <HAL_I2C_Mem_Write+0x56>
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e0c5      	b.n	800ba72 <HAL_I2C_Mem_Write+0x1e2>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d007      	beq.n	800b90c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f042 0201 	orr.w	r2, r2, #1
 800b90a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b91a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2221      	movs	r2, #33	; 0x21
 800b920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2240      	movs	r2, #64	; 0x40
 800b928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a3a      	ldr	r2, [r7, #32]
 800b936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b93c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b942:	b29a      	uxth	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4a4d      	ldr	r2, [pc, #308]	; (800ba80 <HAL_I2C_Mem_Write+0x1f0>)
 800b94c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b94e:	88f8      	ldrh	r0, [r7, #6]
 800b950:	893a      	ldrh	r2, [r7, #8]
 800b952:	8979      	ldrh	r1, [r7, #10]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4603      	mov	r3, r0
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f001 ffe2 	bl	800d928 <I2C_RequestMemoryWrite>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d052      	beq.n	800ba10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e081      	b.n	800ba72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f002 fad4 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00d      	beq.n	800b99a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	2b04      	cmp	r3, #4
 800b984:	d107      	bne.n	800b996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e06b      	b.n	800ba72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	781a      	ldrb	r2, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	d11b      	bne.n	800ba10 <HAL_I2C_Mem_Write+0x180>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d017      	beq.n	800ba10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	781a      	ldrb	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1aa      	bne.n	800b96e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f002 fac0 	bl	800dfa2 <I2C_WaitOnBTFFlagUntilTimeout>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00d      	beq.n	800ba44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2c:	2b04      	cmp	r3, #4
 800ba2e:	d107      	bne.n	800ba40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e016      	b.n	800ba72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e000      	b.n	800ba72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ba70:	2302      	movs	r3, #2
  }
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	00100002 	.word	0x00100002
 800ba80:	ffff0000 	.word	0xffff0000

0800ba84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08c      	sub	sp, #48	; 0x30
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	461a      	mov	r2, r3
 800ba92:	4603      	mov	r3, r0
 800ba94:	817b      	strh	r3, [r7, #10]
 800ba96:	460b      	mov	r3, r1
 800ba98:	813b      	strh	r3, [r7, #8]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba9e:	f7fe fac7 	bl	800a030 <HAL_GetTick>
 800baa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b20      	cmp	r3, #32
 800baae:	f040 8208 	bne.w	800bec2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	2319      	movs	r3, #25
 800bab8:	2201      	movs	r2, #1
 800baba:	497b      	ldr	r1, [pc, #492]	; (800bca8 <HAL_I2C_Mem_Read+0x224>)
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f002 f959 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bac8:	2302      	movs	r3, #2
 800baca:	e1fb      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d101      	bne.n	800bada <HAL_I2C_Mem_Read+0x56>
 800bad6:	2302      	movs	r3, #2
 800bad8:	e1f4      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b01      	cmp	r3, #1
 800baee:	d007      	beq.n	800bb00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0201 	orr.w	r2, r2, #1
 800bafe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2222      	movs	r2, #34	; 0x22
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2240      	movs	r2, #64	; 0x40
 800bb1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bb30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	4a5b      	ldr	r2, [pc, #364]	; (800bcac <HAL_I2C_Mem_Read+0x228>)
 800bb40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb42:	88f8      	ldrh	r0, [r7, #6]
 800bb44:	893a      	ldrh	r2, [r7, #8]
 800bb46:	8979      	ldrh	r1, [r7, #10]
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	4603      	mov	r3, r0
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f001 ff7e 	bl	800da54 <I2C_RequestMemoryRead>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e1b0      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d113      	bne.n	800bb92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	623b      	str	r3, [r7, #32]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	623b      	str	r3, [r7, #32]
 800bb7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	e184      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d11b      	bne.n	800bbd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61fb      	str	r3, [r7, #28]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	61fb      	str	r3, [r7, #28]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	61fb      	str	r3, [r7, #28]
 800bbbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	e164      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d11b      	bne.n	800bc12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbe8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61bb      	str	r3, [r7, #24]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	61bb      	str	r3, [r7, #24]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	61bb      	str	r3, [r7, #24]
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	e144      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	617b      	str	r3, [r7, #20]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	617b      	str	r3, [r7, #20]
 800bc26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bc28:	e138      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	f200 80f1 	bhi.w	800be16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d123      	bne.n	800bc84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f002 fa21 	bl	800e088 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e139      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	691a      	ldr	r2, [r3, #16]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc82:	e10b      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d14e      	bne.n	800bd2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc92:	2200      	movs	r2, #0
 800bc94:	4906      	ldr	r1, [pc, #24]	; (800bcb0 <HAL_I2C_Mem_Read+0x22c>)
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f002 f86c 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d008      	beq.n	800bcb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e10e      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
 800bca6:	bf00      	nop
 800bca8:	00100002 	.word	0x00100002
 800bcac:	ffff0000 	.word	0xffff0000
 800bcb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	691a      	ldr	r2, [r3, #16]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	b2d2      	uxtb	r2, r2
 800bcd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce0:	3b01      	subs	r3, #1
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	691a      	ldr	r2, [r3, #16]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	b2d2      	uxtb	r2, r2
 800bd02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd12:	3b01      	subs	r3, #1
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	3b01      	subs	r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd28:	e0b8      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	2200      	movs	r2, #0
 800bd32:	4966      	ldr	r1, [pc, #408]	; (800becc <HAL_I2C_Mem_Read+0x448>)
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f002 f81d 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e0bf      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691a      	ldr	r2, [r3, #16]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd70:	3b01      	subs	r3, #1
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	494f      	ldr	r1, [pc, #316]	; (800becc <HAL_I2C_Mem_Read+0x448>)
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f001 ffef 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e091      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	1c5a      	adds	r2, r3, #1
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	691a      	ldr	r2, [r3, #16]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdfe:	3b01      	subs	r3, #1
 800be00:	b29a      	uxth	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b29a      	uxth	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800be14:	e042      	b.n	800be9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f002 f934 	bl	800e088 <I2C_WaitOnRXNEFlagUntilTimeout>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e04c      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	691a      	ldr	r2, [r3, #16]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	b2d2      	uxtb	r2, r2
 800be36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be46:	3b01      	subs	r3, #1
 800be48:	b29a      	uxth	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be52:	b29b      	uxth	r3, r3
 800be54:	3b01      	subs	r3, #1
 800be56:	b29a      	uxth	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	f003 0304 	and.w	r3, r3, #4
 800be66:	2b04      	cmp	r3, #4
 800be68:	d118      	bne.n	800be9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	691a      	ldr	r2, [r3, #16]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be74:	b2d2      	uxtb	r2, r2
 800be76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be86:	3b01      	subs	r3, #1
 800be88:	b29a      	uxth	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be92:	b29b      	uxth	r3, r3
 800be94:	3b01      	subs	r3, #1
 800be96:	b29a      	uxth	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f47f aec2 	bne.w	800bc2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2220      	movs	r2, #32
 800beaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e000      	b.n	800bec4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bec2:	2302      	movs	r3, #2
  }
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3728      	adds	r7, #40	; 0x28
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	00010004 	.word	0x00010004

0800bed0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bef0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bef8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	2b10      	cmp	r3, #16
 800befe:	d003      	beq.n	800bf08 <HAL_I2C_EV_IRQHandler+0x38>
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	2b40      	cmp	r3, #64	; 0x40
 800bf04:	f040 80c1 	bne.w	800c08a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10d      	bne.n	800bf3e <HAL_I2C_EV_IRQHandler+0x6e>
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bf28:	d003      	beq.n	800bf32 <HAL_I2C_EV_IRQHandler+0x62>
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bf30:	d101      	bne.n	800bf36 <HAL_I2C_EV_IRQHandler+0x66>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e000      	b.n	800bf38 <HAL_I2C_EV_IRQHandler+0x68>
 800bf36:	2300      	movs	r3, #0
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	f000 8132 	beq.w	800c1a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00c      	beq.n	800bf62 <HAL_I2C_EV_IRQHandler+0x92>
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	0a5b      	lsrs	r3, r3, #9
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d006      	beq.n	800bf62 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f002 f91c 	bl	800e192 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fd79 	bl	800ca52 <I2C_Master_SB>
 800bf60:	e092      	b.n	800c088 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	08db      	lsrs	r3, r3, #3
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <HAL_I2C_EV_IRQHandler+0xb2>
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	0a5b      	lsrs	r3, r3, #9
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fdef 	bl	800cb5e <I2C_Master_ADD10>
 800bf80:	e082      	b.n	800c088 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	085b      	lsrs	r3, r3, #1
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <HAL_I2C_EV_IRQHandler+0xd2>
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fe09 	bl	800cbb2 <I2C_Master_ADDR>
 800bfa0:	e072      	b.n	800c088 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	089b      	lsrs	r3, r3, #2
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d03b      	beq.n	800c026 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfbc:	f000 80f3 	beq.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	09db      	lsrs	r3, r3, #7
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00f      	beq.n	800bfec <HAL_I2C_EV_IRQHandler+0x11c>
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	0a9b      	lsrs	r3, r3, #10
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <HAL_I2C_EV_IRQHandler+0x11c>
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	089b      	lsrs	r3, r3, #2
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d103      	bne.n	800bfec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f9f3 	bl	800c3d0 <I2C_MasterTransmit_TXE>
 800bfea:	e04d      	b.n	800c088 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	089b      	lsrs	r3, r3, #2
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 80d6 	beq.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	0a5b      	lsrs	r3, r3, #9
 800bffe:	f003 0301 	and.w	r3, r3, #1
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 80cf 	beq.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	2b21      	cmp	r3, #33	; 0x21
 800c00c:	d103      	bne.n	800c016 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fa7a 	bl	800c508 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c014:	e0c7      	b.n	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	2b40      	cmp	r3, #64	; 0x40
 800c01a:	f040 80c4 	bne.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fae8 	bl	800c5f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c024:	e0bf      	b.n	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c034:	f000 80b7 	beq.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	099b      	lsrs	r3, r3, #6
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00f      	beq.n	800c064 <HAL_I2C_EV_IRQHandler+0x194>
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	0a9b      	lsrs	r3, r3, #10
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d009      	beq.n	800c064 <HAL_I2C_EV_IRQHandler+0x194>
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	089b      	lsrs	r3, r3, #2
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d103      	bne.n	800c064 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fb5d 	bl	800c71c <I2C_MasterReceive_RXNE>
 800c062:	e011      	b.n	800c088 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	089b      	lsrs	r3, r3, #2
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 809a 	beq.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	0a5b      	lsrs	r3, r3, #9
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 8093 	beq.w	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fbfc 	bl	800c87e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c086:	e08e      	b.n	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c088:	e08d      	b.n	800c1a6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	61fb      	str	r3, [r7, #28]
 800c09a:	e007      	b.n	800c0ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d012      	beq.n	800c0de <HAL_I2C_EV_IRQHandler+0x20e>
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	0a5b      	lsrs	r3, r3, #9
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00c      	beq.n	800c0de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c0d4:	69b9      	ldr	r1, [r7, #24]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 ffba 	bl	800d050 <I2C_Slave_ADDR>
 800c0dc:	e066      	b.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	091b      	lsrs	r3, r3, #4
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d009      	beq.n	800c0fe <HAL_I2C_EV_IRQHandler+0x22e>
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	0a5b      	lsrs	r3, r3, #9
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fff4 	bl	800d0e4 <I2C_Slave_STOPF>
 800c0fc:	e056      	b.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c0fe:	7bbb      	ldrb	r3, [r7, #14]
 800c100:	2b21      	cmp	r3, #33	; 0x21
 800c102:	d002      	beq.n	800c10a <HAL_I2C_EV_IRQHandler+0x23a>
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	2b29      	cmp	r3, #41	; 0x29
 800c108:	d125      	bne.n	800c156 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	09db      	lsrs	r3, r3, #7
 800c10e:	f003 0301 	and.w	r3, r3, #1
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00f      	beq.n	800c136 <HAL_I2C_EV_IRQHandler+0x266>
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	0a9b      	lsrs	r3, r3, #10
 800c11a:	f003 0301 	and.w	r3, r3, #1
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d009      	beq.n	800c136 <HAL_I2C_EV_IRQHandler+0x266>
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	089b      	lsrs	r3, r3, #2
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d103      	bne.n	800c136 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fed0 	bl	800ced4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c134:	e039      	b.n	800c1aa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	089b      	lsrs	r3, r3, #2
 800c13a:	f003 0301 	and.w	r3, r3, #1
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d033      	beq.n	800c1aa <HAL_I2C_EV_IRQHandler+0x2da>
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	0a5b      	lsrs	r3, r3, #9
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d02d      	beq.n	800c1aa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fefd 	bl	800cf4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c154:	e029      	b.n	800c1aa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	099b      	lsrs	r3, r3, #6
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00f      	beq.n	800c182 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	0a9b      	lsrs	r3, r3, #10
 800c166:	f003 0301 	and.w	r3, r3, #1
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d009      	beq.n	800c182 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	089b      	lsrs	r3, r3, #2
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 ff08 	bl	800cf90 <I2C_SlaveReceive_RXNE>
 800c180:	e014      	b.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	089b      	lsrs	r3, r3, #2
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00e      	beq.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	0a5b      	lsrs	r3, r3, #9
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	d008      	beq.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 ff36 	bl	800d00c <I2C_SlaveReceive_BTF>
 800c1a0:	e004      	b.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c1a2:	bf00      	nop
 800c1a4:	e002      	b.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c1a6:	bf00      	nop
 800c1a8:	e000      	b.n	800c1ac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c1aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c1ac:	3720      	adds	r7, #32
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b08a      	sub	sp, #40	; 0x28
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	695b      	ldr	r3, [r3, #20]
 800c1c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	0a1b      	lsrs	r3, r3, #8
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00e      	beq.n	800c200 <HAL_I2C_ER_IRQHandler+0x4e>
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	0a1b      	lsrs	r3, r3, #8
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d008      	beq.n	800c200 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	f043 0301 	orr.w	r3, r3, #1
 800c1f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1fe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	0a5b      	lsrs	r3, r3, #9
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00e      	beq.n	800c22a <HAL_I2C_ER_IRQHandler+0x78>
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	0a1b      	lsrs	r3, r3, #8
 800c210:	f003 0301 	and.w	r3, r3, #1
 800c214:	2b00      	cmp	r3, #0
 800c216:	d008      	beq.n	800c22a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	f043 0302 	orr.w	r3, r3, #2
 800c21e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c228:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	0a9b      	lsrs	r3, r3, #10
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d03f      	beq.n	800c2b6 <HAL_I2C_ER_IRQHandler+0x104>
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	0a1b      	lsrs	r3, r3, #8
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d039      	beq.n	800c2b6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c242:	7efb      	ldrb	r3, [r7, #27]
 800c244:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c254:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c25c:	7ebb      	ldrb	r3, [r7, #26]
 800c25e:	2b20      	cmp	r3, #32
 800c260:	d112      	bne.n	800c288 <HAL_I2C_ER_IRQHandler+0xd6>
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10f      	bne.n	800c288 <HAL_I2C_ER_IRQHandler+0xd6>
 800c268:	7cfb      	ldrb	r3, [r7, #19]
 800c26a:	2b21      	cmp	r3, #33	; 0x21
 800c26c:	d008      	beq.n	800c280 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c26e:	7cfb      	ldrb	r3, [r7, #19]
 800c270:	2b29      	cmp	r3, #41	; 0x29
 800c272:	d005      	beq.n	800c280 <HAL_I2C_ER_IRQHandler+0xce>
 800c274:	7cfb      	ldrb	r3, [r7, #19]
 800c276:	2b28      	cmp	r3, #40	; 0x28
 800c278:	d106      	bne.n	800c288 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b21      	cmp	r3, #33	; 0x21
 800c27e:	d103      	bne.n	800c288 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f001 f85f 	bl	800d344 <I2C_Slave_AF>
 800c286:	e016      	b.n	800c2b6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c290:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	f043 0304 	orr.w	r3, r3, #4
 800c298:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c29a:	7efb      	ldrb	r3, [r7, #27]
 800c29c:	2b10      	cmp	r3, #16
 800c29e:	d002      	beq.n	800c2a6 <HAL_I2C_ER_IRQHandler+0xf4>
 800c2a0:	7efb      	ldrb	r3, [r7, #27]
 800c2a2:	2b40      	cmp	r3, #64	; 0x40
 800c2a4:	d107      	bne.n	800c2b6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2b4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c2b6:	6a3b      	ldr	r3, [r7, #32]
 800c2b8:	0adb      	lsrs	r3, r3, #11
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00e      	beq.n	800c2e0 <HAL_I2C_ER_IRQHandler+0x12e>
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	0a1b      	lsrs	r3, r3, #8
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d008      	beq.n	800c2e0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d0:	f043 0308 	orr.w	r3, r3, #8
 800c2d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c2de:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d008      	beq.n	800c2f8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	431a      	orrs	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f001 f896 	bl	800d424 <I2C_ITError>
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3728      	adds	r7, #40	; 0x28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
 800c35c:	4613      	mov	r3, r2
 800c35e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d150      	bne.n	800c498 <I2C_MasterTransmit_TXE+0xc8>
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
 800c3f8:	2b21      	cmp	r3, #33	; 0x21
 800c3fa:	d14d      	bne.n	800c498 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b08      	cmp	r3, #8
 800c400:	d01d      	beq.n	800c43e <I2C_MasterTransmit_TXE+0x6e>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b20      	cmp	r3, #32
 800c406:	d01a      	beq.n	800c43e <I2C_MasterTransmit_TXE+0x6e>
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c40e:	d016      	beq.n	800c43e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c41e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2211      	movs	r2, #17
 800c424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2220      	movs	r2, #32
 800c432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff ff62 	bl	800c300 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c43c:	e060      	b.n	800c500 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c44c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c45c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2220      	movs	r2, #32
 800c468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b40      	cmp	r3, #64	; 0x40
 800c476:	d107      	bne.n	800c488 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ff7d 	bl	800c380 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c486:	e03b      	b.n	800c500 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff ff35 	bl	800c300 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c496:	e033      	b.n	800c500 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	2b21      	cmp	r3, #33	; 0x21
 800c49c:	d005      	beq.n	800c4aa <I2C_MasterTransmit_TXE+0xda>
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	2b40      	cmp	r3, #64	; 0x40
 800c4a2:	d12d      	bne.n	800c500 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
 800c4a6:	2b22      	cmp	r3, #34	; 0x22
 800c4a8:	d12a      	bne.n	800c500 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d108      	bne.n	800c4c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c4c4:	e01c      	b.n	800c500 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b40      	cmp	r3, #64	; 0x40
 800c4d0:	d103      	bne.n	800c4da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f88e 	bl	800c5f4 <I2C_MemoryTransmit_TXE_BTF>
}
 800c4d8:	e012      	b.n	800c500 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	781a      	ldrb	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c4fe:	e7ff      	b.n	800c500 <I2C_MasterTransmit_TXE+0x130>
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b21      	cmp	r3, #33	; 0x21
 800c520:	d164      	bne.n	800c5ec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c526:	b29b      	uxth	r3, r3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d012      	beq.n	800c552 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c530:	781a      	ldrb	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c546:	b29b      	uxth	r3, r3
 800c548:	3b01      	subs	r3, #1
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c550:	e04c      	b.n	800c5ec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2b08      	cmp	r3, #8
 800c556:	d01d      	beq.n	800c594 <I2C_MasterTransmit_BTF+0x8c>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b20      	cmp	r3, #32
 800c55c:	d01a      	beq.n	800c594 <I2C_MasterTransmit_BTF+0x8c>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c564:	d016      	beq.n	800c594 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c574:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2211      	movs	r2, #17
 800c57a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2220      	movs	r2, #32
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff feb7 	bl	800c300 <HAL_I2C_MasterTxCpltCallback>
}
 800c592:	e02b      	b.n	800c5ec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c5a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2220      	movs	r2, #32
 800c5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b40      	cmp	r3, #64	; 0x40
 800c5cc:	d107      	bne.n	800c5de <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff fed2 	bl	800c380 <HAL_I2C_MemTxCpltCallback>
}
 800c5dc:	e006      	b.n	800c5ec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff fe8a 	bl	800c300 <HAL_I2C_MasterTxCpltCallback>
}
 800c5ec:	bf00      	nop
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c602:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d11d      	bne.n	800c648 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c610:	2b01      	cmp	r3, #1
 800c612:	d10b      	bne.n	800c62c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c624:	1c9a      	adds	r2, r3, #2
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c62a:	e073      	b.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c630:	b29b      	uxth	r3, r3
 800c632:	121b      	asrs	r3, r3, #8
 800c634:	b2da      	uxtb	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c646:	e065      	b.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d10b      	bne.n	800c668 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c654:	b2da      	uxtb	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c666:	e055      	b.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d151      	bne.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	2b22      	cmp	r3, #34	; 0x22
 800c674:	d10d      	bne.n	800c692 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c684:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c690:	e040      	b.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c696:	b29b      	uxth	r3, r3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d015      	beq.n	800c6c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2b21      	cmp	r3, #33	; 0x21
 800c6a0:	d112      	bne.n	800c6c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a6:	781a      	ldrb	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c6c6:	e025      	b.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d120      	bne.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
 800c6d4:	2b21      	cmp	r3, #33	; 0x21
 800c6d6:	d11d      	bne.n	800c714 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2220      	movs	r2, #32
 800c702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fe36 	bl	800c380 <HAL_I2C_MemTxCpltCallback>
}
 800c714:	bf00      	nop
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b22      	cmp	r3, #34	; 0x22
 800c72e:	f040 80a2 	bne.w	800c876 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c736:	b29b      	uxth	r3, r3
 800c738:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d921      	bls.n	800c784 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	691a      	ldr	r2, [r3, #16]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74a:	b2d2      	uxtb	r2, r2
 800c74c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	3b01      	subs	r3, #1
 800c760:	b29a      	uxth	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	f040 8082 	bne.w	800c876 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c780:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c782:	e078      	b.n	800c876 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d074      	beq.n	800c876 <I2C_MasterReceive_RXNE+0x15a>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d002      	beq.n	800c798 <I2C_MasterReceive_RXNE+0x7c>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d16e      	bne.n	800c876 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f001 fc43 	bl	800e024 <I2C_WaitOnSTOPRequestThroughIT>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d142      	bne.n	800c82a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7b2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685a      	ldr	r2, [r3, #4]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c7c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ce:	b2d2      	uxtb	r2, r2
 800c7d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2220      	movs	r2, #32
 800c7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b40      	cmp	r3, #64	; 0x40
 800c7fc:	d10a      	bne.n	800c814 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff fdc1 	bl	800c394 <HAL_I2C_MemRxCpltCallback>
}
 800c812:	e030      	b.n	800c876 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2212      	movs	r2, #18
 800c820:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff fd76 	bl	800c314 <HAL_I2C_MasterRxCpltCallback>
}
 800c828:	e025      	b.n	800c876 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c838:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	691a      	ldr	r2, [r3, #16]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	b2d2      	uxtb	r2, r2
 800c846:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	1c5a      	adds	r2, r3, #1
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c856:	b29b      	uxth	r3, r3
 800c858:	3b01      	subs	r3, #1
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff fd99 	bl	800c3a8 <HAL_I2C_ErrorCallback>
}
 800c876:	bf00      	nop
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c890:	b29b      	uxth	r3, r3
 800c892:	2b04      	cmp	r3, #4
 800c894:	d11b      	bne.n	800c8ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b0:	b2d2      	uxtb	r2, r2
 800c8b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	1c5a      	adds	r2, r3, #1
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c8cc:	e0bd      	b.n	800ca4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	d129      	bne.n	800c92c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d00a      	beq.n	800c904 <I2C_MasterReceive_BTF+0x86>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d007      	beq.n	800c904 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c902:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691a      	ldr	r2, [r3, #16]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c920:	b29b      	uxth	r3, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c92a:	e08e      	b.n	800ca4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c930:	b29b      	uxth	r3, r3
 800c932:	2b02      	cmp	r3, #2
 800c934:	d176      	bne.n	800ca24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d002      	beq.n	800c942 <I2C_MasterReceive_BTF+0xc4>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d108      	bne.n	800c954 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	e019      	b.n	800c988 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b04      	cmp	r3, #4
 800c958:	d002      	beq.n	800c960 <I2C_MasterReceive_BTF+0xe2>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d108      	bne.n	800c972 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c96e:	601a      	str	r2, [r3, #0]
 800c970:	e00a      	b.n	800c988 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b10      	cmp	r3, #16
 800c976:	d007      	beq.n	800c988 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c986:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	691a      	ldr	r2, [r3, #16]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c9e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2220      	movs	r2, #32
 800c9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b40      	cmp	r3, #64	; 0x40
 800c9f6:	d10a      	bne.n	800ca0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff fcc4 	bl	800c394 <HAL_I2C_MemRxCpltCallback>
}
 800ca0c:	e01d      	b.n	800ca4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2212      	movs	r2, #18
 800ca1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff fc79 	bl	800c314 <HAL_I2C_MasterRxCpltCallback>
}
 800ca22:	e012      	b.n	800ca4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	691a      	ldr	r2, [r3, #16]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	3b01      	subs	r3, #1
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ca4a:	bf00      	nop
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b40      	cmp	r3, #64	; 0x40
 800ca64:	d117      	bne.n	800ca96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d109      	bne.n	800ca82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	461a      	mov	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ca7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ca80:	e067      	b.n	800cb52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	f043 0301 	orr.w	r3, r3, #1
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	611a      	str	r2, [r3, #16]
}
 800ca94:	e05d      	b.n	800cb52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca9e:	d133      	bne.n	800cb08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b21      	cmp	r3, #33	; 0x21
 800caaa:	d109      	bne.n	800cac0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	461a      	mov	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cabc:	611a      	str	r2, [r3, #16]
 800cabe:	e008      	b.n	800cad2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f043 0301 	orr.w	r3, r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d004      	beq.n	800cae4 <I2C_Master_SB+0x92>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d108      	bne.n	800caf6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d032      	beq.n	800cb52 <I2C_Master_SB+0x100>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d02d      	beq.n	800cb52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb04:	605a      	str	r2, [r3, #4]
}
 800cb06:	e024      	b.n	800cb52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10e      	bne.n	800cb2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	11db      	asrs	r3, r3, #7
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 0306 	and.w	r3, r3, #6
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f063 030f 	orn	r3, r3, #15
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	611a      	str	r2, [r3, #16]
}
 800cb2c:	e011      	b.n	800cb52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d10d      	bne.n	800cb52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	11db      	asrs	r3, r3, #7
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	f003 0306 	and.w	r3, r3, #6
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	f063 030e 	orn	r3, r3, #14
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	611a      	str	r2, [r3, #16]
}
 800cb52:	bf00      	nop
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d004      	beq.n	800cb84 <I2C_Master_ADD10+0x26>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d108      	bne.n	800cb96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00c      	beq.n	800cba6 <I2C_Master_ADD10+0x48>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d007      	beq.n	800cba6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cba4:	605a      	str	r2, [r3, #4]
  }
}
 800cba6:	bf00      	nop
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b091      	sub	sp, #68	; 0x44
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cbc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b22      	cmp	r3, #34	; 0x22
 800cbda:	f040 8169 	bne.w	800ceb0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10f      	bne.n	800cc06 <I2C_Master_ADDR+0x54>
 800cbe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbea:	2b40      	cmp	r3, #64	; 0x40
 800cbec:	d10b      	bne.n	800cc06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbee:	2300      	movs	r3, #0
 800cbf0:	633b      	str	r3, [r7, #48]	; 0x30
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	633b      	str	r3, [r7, #48]	; 0x30
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	633b      	str	r3, [r7, #48]	; 0x30
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	e160      	b.n	800cec8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d11d      	bne.n	800cc4a <I2C_Master_ADDR+0x98>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cc16:	d118      	bne.n	800cc4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc18:	2300      	movs	r3, #0
 800cc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	651a      	str	r2, [r3, #80]	; 0x50
 800cc48:	e13e      	b.n	800cec8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d113      	bne.n	800cc7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc54:	2300      	movs	r3, #0
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	e115      	b.n	800cea8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	f040 808a 	bne.w	800cd9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cc8e:	d137      	bne.n	800cd00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccae:	d113      	bne.n	800ccd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	e0e7      	b.n	800cea8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccd8:	2300      	movs	r3, #0
 800ccda:	623b      	str	r3, [r7, #32]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	623b      	str	r3, [r7, #32]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	699b      	ldr	r3, [r3, #24]
 800ccea:	623b      	str	r3, [r7, #32]
 800ccec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e0d3      	b.n	800cea8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	2b08      	cmp	r3, #8
 800cd04:	d02e      	beq.n	800cd64 <I2C_Master_ADDR+0x1b2>
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	2b20      	cmp	r3, #32
 800cd0a:	d02b      	beq.n	800cd64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0e:	2b12      	cmp	r3, #18
 800cd10:	d102      	bne.n	800cd18 <I2C_Master_ADDR+0x166>
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d125      	bne.n	800cd64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	2b04      	cmp	r3, #4
 800cd1c:	d00e      	beq.n	800cd3c <I2C_Master_ADDR+0x18a>
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d00b      	beq.n	800cd3c <I2C_Master_ADDR+0x18a>
 800cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd26:	2b10      	cmp	r3, #16
 800cd28:	d008      	beq.n	800cd3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	e007      	b.n	800cd4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	61fb      	str	r3, [r7, #28]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	61fb      	str	r3, [r7, #28]
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	e0a1      	b.n	800cea8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd74:	2300      	movs	r3, #0
 800cd76:	61bb      	str	r3, [r7, #24]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	61bb      	str	r3, [r7, #24]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	699b      	ldr	r3, [r3, #24]
 800cd86:	61bb      	str	r3, [r7, #24]
 800cd88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	e085      	b.n	800cea8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	d14d      	bne.n	800ce42 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	2b04      	cmp	r3, #4
 800cdaa:	d016      	beq.n	800cdda <I2C_Master_ADDR+0x228>
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d013      	beq.n	800cdda <I2C_Master_ADDR+0x228>
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	2b10      	cmp	r3, #16
 800cdb6:	d010      	beq.n	800cdda <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdc6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	e007      	b.n	800cdea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cde8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdf8:	d117      	bne.n	800ce2a <I2C_Master_ADDR+0x278>
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce00:	d00b      	beq.n	800ce1a <I2C_Master_ADDR+0x268>
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d008      	beq.n	800ce1a <I2C_Master_ADDR+0x268>
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	2b08      	cmp	r3, #8
 800ce0c:	d005      	beq.n	800ce1a <I2C_Master_ADDR+0x268>
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	2b10      	cmp	r3, #16
 800ce12:	d002      	beq.n	800ce1a <I2C_Master_ADDR+0x268>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	2b20      	cmp	r3, #32
 800ce18:	d107      	bne.n	800ce2a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	617b      	str	r3, [r7, #20]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	695b      	ldr	r3, [r3, #20]
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	617b      	str	r3, [r7, #20]
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	e032      	b.n	800cea8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce50:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce60:	d117      	bne.n	800ce92 <I2C_Master_ADDR+0x2e0>
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce68:	d00b      	beq.n	800ce82 <I2C_Master_ADDR+0x2d0>
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d008      	beq.n	800ce82 <I2C_Master_ADDR+0x2d0>
 800ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce72:	2b08      	cmp	r3, #8
 800ce74:	d005      	beq.n	800ce82 <I2C_Master_ADDR+0x2d0>
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	2b10      	cmp	r3, #16
 800ce7a:	d002      	beq.n	800ce82 <I2C_Master_ADDR+0x2d0>
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	2b20      	cmp	r3, #32
 800ce80:	d107      	bne.n	800ce92 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce92:	2300      	movs	r3, #0
 800ce94:	613b      	str	r3, [r7, #16]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	613b      	str	r3, [r7, #16]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	613b      	str	r3, [r7, #16]
 800cea6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ceae:	e00b      	b.n	800cec8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60fb      	str	r3, [r7, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	695b      	ldr	r3, [r3, #20]
 800ceba:	60fb      	str	r3, [r7, #12]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	68fb      	ldr	r3, [r7, #12]
}
 800cec6:	e7ff      	b.n	800cec8 <I2C_Master_ADDR+0x316>
 800cec8:	bf00      	nop
 800ceca:	3744      	adds	r7, #68	; 0x44
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cee2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d02b      	beq.n	800cf46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	781a      	ldrb	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d114      	bne.n	800cf46 <I2C_SlaveTransmit_TXE+0x72>
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	2b29      	cmp	r3, #41	; 0x29
 800cf20:	d111      	bne.n	800cf46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	685a      	ldr	r2, [r3, #4]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2221      	movs	r2, #33	; 0x21
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2228      	movs	r2, #40	; 0x28
 800cf3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7ff f9f1 	bl	800c328 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cf46:	bf00      	nop
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cf4e:	b480      	push	{r7}
 800cf50:	b083      	sub	sp, #12
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d011      	beq.n	800cf84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	781a      	ldrb	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d02c      	beq.n	800d004 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	691a      	ldr	r2, [r3, #16]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb4:	b2d2      	uxtb	r2, r2
 800cfb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	b29a      	uxth	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d114      	bne.n	800d004 <I2C_SlaveReceive_RXNE+0x74>
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	2b2a      	cmp	r3, #42	; 0x2a
 800cfde:	d111      	bne.n	800d004 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2222      	movs	r2, #34	; 0x22
 800cff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2228      	movs	r2, #40	; 0x28
 800cffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7ff f99c 	bl	800c33c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d004:	bf00      	nop
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d018:	b29b      	uxth	r3, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d012      	beq.n	800d044 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	691a      	ldr	r2, [r3, #16]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d028:	b2d2      	uxtb	r2, r2
 800d02a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	3b01      	subs	r3, #1
 800d03e:	b29a      	uxth	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d064:	b2db      	uxtb	r3, r3
 800d066:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d06a:	2b28      	cmp	r3, #40	; 0x28
 800d06c:	d127      	bne.n	800d0be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d07c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	089b      	lsrs	r3, r3, #2
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d08a:	2301      	movs	r3, #1
 800d08c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	09db      	lsrs	r3, r3, #7
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	2b00      	cmp	r3, #0
 800d098:	d103      	bne.n	800d0a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	81bb      	strh	r3, [r7, #12]
 800d0a0:	e002      	b.n	800d0a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d0b0:	89ba      	ldrh	r2, [r7, #12]
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7ff f94a 	bl	800c350 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d0bc:	e00e      	b.n	800d0dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60bb      	str	r3, [r7, #8]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	60bb      	str	r3, [r7, #8]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	60bb      	str	r3, [r7, #8]
 800d0d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d0dc:	bf00      	nop
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d102:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d104:	2300      	movs	r3, #0
 800d106:	60bb      	str	r3, [r7, #8]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	60bb      	str	r3, [r7, #8]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f042 0201 	orr.w	r2, r2, #1
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d130:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d13c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d140:	d172      	bne.n	800d228 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b22      	cmp	r3, #34	; 0x22
 800d146:	d002      	beq.n	800d14e <I2C_Slave_STOPF+0x6a>
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	2b2a      	cmp	r3, #42	; 0x2a
 800d14c:	d135      	bne.n	800d1ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	b29a      	uxth	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d160:	b29b      	uxth	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d005      	beq.n	800d172 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16a:	f043 0204 	orr.w	r2, r3, #4
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d180:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d186:	4618      	mov	r0, r3
 800d188:	f7fd fc44 	bl	800aa14 <HAL_DMA_GetState>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d049      	beq.n	800d226 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d196:	4a69      	ldr	r2, [pc, #420]	; (800d33c <I2C_Slave_STOPF+0x258>)
 800d198:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fd fa8c 	bl	800a6bc <HAL_DMA_Abort_IT>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d03d      	beq.n	800d226 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1b8:	e035      	b.n	800d226 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	f043 0204 	orr.w	r2, r3, #4
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fd fc0e 	bl	800aa14 <HAL_DMA_GetState>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d014      	beq.n	800d228 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d202:	4a4e      	ldr	r2, [pc, #312]	; (800d33c <I2C_Slave_STOPF+0x258>)
 800d204:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd fa56 	bl	800a6bc <HAL_DMA_Abort_IT>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d008      	beq.n	800d228 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d220:	4610      	mov	r0, r2
 800d222:	4798      	blx	r3
 800d224:	e000      	b.n	800d228 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d226:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d03e      	beq.n	800d2b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	d112      	bne.n	800d266 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	691a      	ldr	r2, [r3, #16]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	b2d2      	uxtb	r2, r2
 800d24c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	3b01      	subs	r3, #1
 800d260:	b29a      	uxth	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d270:	2b40      	cmp	r3, #64	; 0x40
 800d272:	d112      	bne.n	800d29a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	691a      	ldr	r2, [r3, #16]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d290:	b29b      	uxth	r3, r3
 800d292:	3b01      	subs	r3, #1
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d005      	beq.n	800d2b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a8:	f043 0204 	orr.w	r2, r3, #4
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f8b3 	bl	800d424 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d2be:	e039      	b.n	800d334 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
 800d2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c4:	d109      	bne.n	800d2da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2228      	movs	r2, #40	; 0x28
 800d2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff f831 	bl	800c33c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b28      	cmp	r3, #40	; 0x28
 800d2e4:	d111      	bne.n	800d30a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a15      	ldr	r2, [pc, #84]	; (800d340 <I2C_Slave_STOPF+0x25c>)
 800d2ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2220      	movs	r2, #32
 800d2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff f832 	bl	800c36c <HAL_I2C_ListenCpltCallback>
}
 800d308:	e014      	b.n	800d334 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d30e:	2b22      	cmp	r3, #34	; 0x22
 800d310:	d002      	beq.n	800d318 <I2C_Slave_STOPF+0x234>
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	2b22      	cmp	r3, #34	; 0x22
 800d316:	d10d      	bne.n	800d334 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2220      	movs	r2, #32
 800d322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff f804 	bl	800c33c <HAL_I2C_SlaveRxCpltCallback>
}
 800d334:	bf00      	nop
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0800dc25 	.word	0x0800dc25
 800d340:	ffff0000 	.word	0xffff0000

0800d344 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d352:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b08      	cmp	r3, #8
 800d35e:	d002      	beq.n	800d366 <I2C_Slave_AF+0x22>
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b20      	cmp	r3, #32
 800d364:	d129      	bne.n	800d3ba <I2C_Slave_AF+0x76>
 800d366:	7bfb      	ldrb	r3, [r7, #15]
 800d368:	2b28      	cmp	r3, #40	; 0x28
 800d36a:	d126      	bne.n	800d3ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a2c      	ldr	r2, [pc, #176]	; (800d420 <I2C_Slave_AF+0xdc>)
 800d370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	685a      	ldr	r2, [r3, #4]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d380:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d38a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d39a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2220      	movs	r2, #32
 800d3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7fe ffda 	bl	800c36c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d3b8:	e02e      	b.n	800d418 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d3ba:	7bfb      	ldrb	r3, [r7, #15]
 800d3bc:	2b21      	cmp	r3, #33	; 0x21
 800d3be:	d126      	bne.n	800d40e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a17      	ldr	r2, [pc, #92]	; (800d420 <I2C_Slave_AF+0xdc>)
 800d3c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2221      	movs	r2, #33	; 0x21
 800d3ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d3f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d404:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7fe ff8e 	bl	800c328 <HAL_I2C_SlaveTxCpltCallback>
}
 800d40c:	e004      	b.n	800d418 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d416:	615a      	str	r2, [r3, #20]
}
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	ffff0000 	.word	0xffff0000

0800d424 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d432:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d43a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
 800d43e:	2b10      	cmp	r3, #16
 800d440:	d002      	beq.n	800d448 <I2C_ITError+0x24>
 800d442:	7bbb      	ldrb	r3, [r7, #14]
 800d444:	2b40      	cmp	r3, #64	; 0x40
 800d446:	d10a      	bne.n	800d45e <I2C_ITError+0x3a>
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b22      	cmp	r3, #34	; 0x22
 800d44c:	d107      	bne.n	800d45e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d45c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
 800d460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d464:	2b28      	cmp	r3, #40	; 0x28
 800d466:	d107      	bne.n	800d478 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2228      	movs	r2, #40	; 0x28
 800d472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d476:	e015      	b.n	800d4a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d486:	d00a      	beq.n	800d49e <I2C_ITError+0x7a>
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	2b60      	cmp	r3, #96	; 0x60
 800d48c:	d007      	beq.n	800d49e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2220      	movs	r2, #32
 800d492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4b2:	d162      	bne.n	800d57a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685a      	ldr	r2, [r3, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d4c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d020      	beq.n	800d514 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d6:	4a6a      	ldr	r2, [pc, #424]	; (800d680 <I2C_ITError+0x25c>)
 800d4d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fd f8ec 	bl	800a6bc <HAL_DMA_Abort_IT>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 8089 	beq.w	800d5fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 0201 	bic.w	r2, r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2220      	movs	r2, #32
 800d500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d50e:	4610      	mov	r0, r2
 800d510:	4798      	blx	r3
 800d512:	e074      	b.n	800d5fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	4a59      	ldr	r2, [pc, #356]	; (800d680 <I2C_ITError+0x25c>)
 800d51a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d520:	4618      	mov	r0, r3
 800d522:	f7fd f8cb 	bl	800a6bc <HAL_DMA_Abort_IT>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d068      	beq.n	800d5fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d536:	2b40      	cmp	r3, #64	; 0x40
 800d538:	d10b      	bne.n	800d552 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	691a      	ldr	r2, [r3, #16]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d544:	b2d2      	uxtb	r2, r2
 800d546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54c:	1c5a      	adds	r2, r3, #1
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f022 0201 	bic.w	r2, r2, #1
 800d560:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2220      	movs	r2, #32
 800d566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d574:	4610      	mov	r0, r2
 800d576:	4798      	blx	r3
 800d578:	e041      	b.n	800d5fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b60      	cmp	r3, #96	; 0x60
 800d584:	d125      	bne.n	800d5d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2220      	movs	r2, #32
 800d58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59e:	2b40      	cmp	r3, #64	; 0x40
 800d5a0:	d10b      	bne.n	800d5ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	691a      	ldr	r2, [r3, #16]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ac:	b2d2      	uxtb	r2, r2
 800d5ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b4:	1c5a      	adds	r2, r3, #1
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f022 0201 	bic.w	r2, r2, #1
 800d5c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7fe fef6 	bl	800c3bc <HAL_I2C_AbortCpltCallback>
 800d5d0:	e015      	b.n	800d5fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5dc:	2b40      	cmp	r3, #64	; 0x40
 800d5de:	d10b      	bne.n	800d5f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	691a      	ldr	r2, [r3, #16]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ea:	b2d2      	uxtb	r2, r2
 800d5ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7fe fed5 	bl	800c3a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d602:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10e      	bne.n	800d62c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d614:	2b00      	cmp	r3, #0
 800d616:	d109      	bne.n	800d62c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d104      	bne.n	800d62c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d007      	beq.n	800d63c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d63a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d642:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	f003 0304 	and.w	r3, r3, #4
 800d64c:	2b04      	cmp	r3, #4
 800d64e:	d113      	bne.n	800d678 <I2C_ITError+0x254>
 800d650:	7bfb      	ldrb	r3, [r7, #15]
 800d652:	2b28      	cmp	r3, #40	; 0x28
 800d654:	d110      	bne.n	800d678 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a0a      	ldr	r2, [pc, #40]	; (800d684 <I2C_ITError+0x260>)
 800d65a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2220      	movs	r2, #32
 800d666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7fe fe7a 	bl	800c36c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0800dc25 	.word	0x0800dc25
 800d684:	ffff0000 	.word	0xffff0000

0800d688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af02      	add	r7, sp, #8
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	607a      	str	r2, [r7, #4]
 800d692:	603b      	str	r3, [r7, #0]
 800d694:	460b      	mov	r3, r1
 800d696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2b08      	cmp	r3, #8
 800d6a2:	d006      	beq.n	800d6b2 <I2C_MasterRequestWrite+0x2a>
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d003      	beq.n	800d6b2 <I2C_MasterRequestWrite+0x2a>
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6b0:	d108      	bne.n	800d6c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	e00b      	b.n	800d6dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c8:	2b12      	cmp	r3, #18
 800d6ca:	d107      	bne.n	800d6dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 fb43 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00d      	beq.n	800d710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d702:	d103      	bne.n	800d70c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d70a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e035      	b.n	800d77c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d718:	d108      	bne.n	800d72c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d71a:	897b      	ldrh	r3, [r7, #10]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	461a      	mov	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d728:	611a      	str	r2, [r3, #16]
 800d72a:	e01b      	b.n	800d764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d72c:	897b      	ldrh	r3, [r7, #10]
 800d72e:	11db      	asrs	r3, r3, #7
 800d730:	b2db      	uxtb	r3, r3
 800d732:	f003 0306 	and.w	r3, r3, #6
 800d736:	b2db      	uxtb	r3, r3
 800d738:	f063 030f 	orn	r3, r3, #15
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	490e      	ldr	r1, [pc, #56]	; (800d784 <I2C_MasterRequestWrite+0xfc>)
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f000 fb69 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e010      	b.n	800d77c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d75a:	897b      	ldrh	r3, [r7, #10]
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	4907      	ldr	r1, [pc, #28]	; (800d788 <I2C_MasterRequestWrite+0x100>)
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f000 fb59 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	e000      	b.n	800d77c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3718      	adds	r7, #24
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	00010008 	.word	0x00010008
 800d788:	00010002 	.word	0x00010002

0800d78c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af02      	add	r7, sp, #8
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	607a      	str	r2, [r7, #4]
 800d796:	603b      	str	r3, [r7, #0]
 800d798:	460b      	mov	r3, r1
 800d79a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d006      	beq.n	800d7c6 <I2C_MasterRequestRead+0x3a>
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d003      	beq.n	800d7c6 <I2C_MasterRequestRead+0x3a>
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d7c4:	d108      	bne.n	800d7d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	e00b      	b.n	800d7f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7dc:	2b11      	cmp	r3, #17
 800d7de:	d107      	bne.n	800d7f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f000 fab9 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00d      	beq.n	800d824 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d816:	d103      	bne.n	800d820 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d81e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e079      	b.n	800d918 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d82c:	d108      	bne.n	800d840 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f043 0301 	orr.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	611a      	str	r2, [r3, #16]
 800d83e:	e05f      	b.n	800d900 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d840:	897b      	ldrh	r3, [r7, #10]
 800d842:	11db      	asrs	r3, r3, #7
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 0306 	and.w	r3, r3, #6
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f063 030f 	orn	r3, r3, #15
 800d850:	b2da      	uxtb	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	4930      	ldr	r1, [pc, #192]	; (800d920 <I2C_MasterRequestRead+0x194>)
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 fadf 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	e054      	b.n	800d918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d86e:	897b      	ldrh	r3, [r7, #10]
 800d870:	b2da      	uxtb	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	4929      	ldr	r1, [pc, #164]	; (800d924 <I2C_MasterRequestRead+0x198>)
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f000 facf 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e044      	b.n	800d918 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d88e:	2300      	movs	r3, #0
 800d890:	613b      	str	r3, [r7, #16]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	613b      	str	r3, [r7, #16]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	613b      	str	r3, [r7, #16]
 800d8a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f000 fa57 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00d      	beq.n	800d8e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8da:	d103      	bne.n	800d8e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d8e4:	2303      	movs	r3, #3
 800d8e6:	e017      	b.n	800d918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d8e8:	897b      	ldrh	r3, [r7, #10]
 800d8ea:	11db      	asrs	r3, r3, #7
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f003 0306 	and.w	r3, r3, #6
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f063 030e 	orn	r3, r3, #14
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	4907      	ldr	r1, [pc, #28]	; (800d924 <I2C_MasterRequestRead+0x198>)
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f000 fa8b 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e000      	b.n	800d918 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3718      	adds	r7, #24
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	00010008 	.word	0x00010008
 800d924:	00010002 	.word	0x00010002

0800d928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b088      	sub	sp, #32
 800d92c:	af02      	add	r7, sp, #8
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	4608      	mov	r0, r1
 800d932:	4611      	mov	r1, r2
 800d934:	461a      	mov	r2, r3
 800d936:	4603      	mov	r3, r0
 800d938:	817b      	strh	r3, [r7, #10]
 800d93a:	460b      	mov	r3, r1
 800d93c:	813b      	strh	r3, [r7, #8]
 800d93e:	4613      	mov	r3, r2
 800d940:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	2200      	movs	r2, #0
 800d95a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f000 fa08 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00d      	beq.n	800d986 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d978:	d103      	bne.n	800d982 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e05f      	b.n	800da46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d986:	897b      	ldrh	r3, [r7, #10]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	461a      	mov	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	6a3a      	ldr	r2, [r7, #32]
 800d99a:	492d      	ldr	r1, [pc, #180]	; (800da50 <I2C_RequestMemoryWrite+0x128>)
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 fa40 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e04c      	b.n	800da46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	617b      	str	r3, [r7, #20]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	617b      	str	r3, [r7, #20]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c4:	6a39      	ldr	r1, [r7, #32]
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 faaa 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00d      	beq.n	800d9ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d107      	bne.n	800d9ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e02b      	b.n	800da46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d9ee:	88fb      	ldrh	r3, [r7, #6]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d105      	bne.n	800da00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d9f4:	893b      	ldrh	r3, [r7, #8]
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	611a      	str	r2, [r3, #16]
 800d9fe:	e021      	b.n	800da44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800da00:	893b      	ldrh	r3, [r7, #8]
 800da02:	0a1b      	lsrs	r3, r3, #8
 800da04:	b29b      	uxth	r3, r3
 800da06:	b2da      	uxtb	r2, r3
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da10:	6a39      	ldr	r1, [r7, #32]
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 fa84 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00d      	beq.n	800da3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da22:	2b04      	cmp	r3, #4
 800da24:	d107      	bne.n	800da36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	e005      	b.n	800da46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800da3a:	893b      	ldrh	r3, [r7, #8]
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	00010002 	.word	0x00010002

0800da54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af02      	add	r7, sp, #8
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	4608      	mov	r0, r1
 800da5e:	4611      	mov	r1, r2
 800da60:	461a      	mov	r2, r3
 800da62:	4603      	mov	r3, r0
 800da64:	817b      	strh	r3, [r7, #10]
 800da66:	460b      	mov	r3, r1
 800da68:	813b      	strh	r3, [r7, #8]
 800da6a:	4613      	mov	r3, r2
 800da6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	2200      	movs	r2, #0
 800da96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f000 f96a 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00d      	beq.n	800dac2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dab4:	d103      	bne.n	800dabe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dabc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dabe:	2303      	movs	r3, #3
 800dac0:	e0aa      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dac2:	897b      	ldrh	r3, [r7, #10]
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	461a      	mov	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	6a3a      	ldr	r2, [r7, #32]
 800dad6:	4952      	ldr	r1, [pc, #328]	; (800dc20 <I2C_RequestMemoryRead+0x1cc>)
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f000 f9a2 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e097      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dae8:	2300      	movs	r3, #0
 800daea:	617b      	str	r3, [r7, #20]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	617b      	str	r3, [r7, #20]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	617b      	str	r3, [r7, #20]
 800dafc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db00:	6a39      	ldr	r1, [r7, #32]
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f000 fa0c 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00d      	beq.n	800db2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db12:	2b04      	cmp	r3, #4
 800db14:	d107      	bne.n	800db26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e076      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d105      	bne.n	800db3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800db30:	893b      	ldrh	r3, [r7, #8]
 800db32:	b2da      	uxtb	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	611a      	str	r2, [r3, #16]
 800db3a:	e021      	b.n	800db80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800db3c:	893b      	ldrh	r3, [r7, #8]
 800db3e:	0a1b      	lsrs	r3, r3, #8
 800db40:	b29b      	uxth	r3, r3
 800db42:	b2da      	uxtb	r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4c:	6a39      	ldr	r1, [r7, #32]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 f9e6 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00d      	beq.n	800db76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db5e:	2b04      	cmp	r3, #4
 800db60:	d107      	bne.n	800db72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e050      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800db76:	893b      	ldrh	r3, [r7, #8]
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db82:	6a39      	ldr	r1, [r7, #32]
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f000 f9cb 	bl	800df20 <I2C_WaitOnTXEFlagUntilTimeout>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00d      	beq.n	800dbac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db94:	2b04      	cmp	r3, #4
 800db96:	d107      	bne.n	800dba8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dba6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e035      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f000 f8d3 	bl	800dd74 <I2C_WaitOnFlagUntilTimeout>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00d      	beq.n	800dbf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbe2:	d103      	bne.n	800dbec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dbec:	2303      	movs	r3, #3
 800dbee:	e013      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dbf0:	897b      	ldrh	r3, [r7, #10]
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	f043 0301 	orr.w	r3, r3, #1
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	6a3a      	ldr	r2, [r7, #32]
 800dc04:	4906      	ldr	r1, [pc, #24]	; (800dc20 <I2C_RequestMemoryRead+0x1cc>)
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 f90b 	bl	800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e000      	b.n	800dc18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3718      	adds	r7, #24
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	00010002 	.word	0x00010002

0800dc24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800dc3e:	4b4b      	ldr	r3, [pc, #300]	; (800dd6c <I2C_DMAAbort+0x148>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	08db      	lsrs	r3, r3, #3
 800dc44:	4a4a      	ldr	r2, [pc, #296]	; (800dd70 <I2C_DMAAbort+0x14c>)
 800dc46:	fba2 2303 	umull	r2, r3, r2, r3
 800dc4a:	0a1a      	lsrs	r2, r3, #8
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	00da      	lsls	r2, r3, #3
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc62:	f043 0220 	orr.w	r2, r3, #32
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800dc6a:	e00a      	b.n	800dc82 <I2C_DMAAbort+0x5e>
    }
    count--;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc80:	d0ea      	beq.n	800dc58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8e:	2200      	movs	r2, #0
 800dc90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d003      	beq.n	800dca2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	2200      	movs	r2, #0
 800dca0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d003      	beq.n	800dcc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d003      	beq.n	800dcd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f022 0201 	bic.w	r2, r2, #1
 800dce6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2b60      	cmp	r3, #96	; 0x60
 800dcf2:	d10e      	bne.n	800dd12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2200      	movs	r2, #0
 800dd08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800dd0a:	6978      	ldr	r0, [r7, #20]
 800dd0c:	f7fe fb56 	bl	800c3bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dd10:	e027      	b.n	800dd62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dd12:	7cfb      	ldrb	r3, [r7, #19]
 800dd14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dd18:	2b28      	cmp	r3, #40	; 0x28
 800dd1a:	d117      	bne.n	800dd4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f042 0201 	orr.w	r2, r2, #1
 800dd2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	2228      	movs	r2, #40	; 0x28
 800dd46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dd4a:	e007      	b.n	800dd5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2220      	movs	r2, #32
 800dd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800dd5c:	6978      	ldr	r0, [r7, #20]
 800dd5e:	f7fe fb23 	bl	800c3a8 <HAL_I2C_ErrorCallback>
}
 800dd62:	bf00      	nop
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20000034 	.word	0x20000034
 800dd70:	14f8b589 	.word	0x14f8b589

0800dd74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	603b      	str	r3, [r7, #0]
 800dd80:	4613      	mov	r3, r2
 800dd82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dd84:	e025      	b.n	800ddd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8c:	d021      	beq.n	800ddd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd8e:	f7fc f94f 	bl	800a030 <HAL_GetTick>
 800dd92:	4602      	mov	r2, r0
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d302      	bcc.n	800dda4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d116      	bne.n	800ddd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2220      	movs	r2, #32
 800ddae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbe:	f043 0220 	orr.w	r2, r3, #32
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e023      	b.n	800de1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	0c1b      	lsrs	r3, r3, #16
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d10d      	bne.n	800ddf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	43da      	mvns	r2, r3
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	4013      	ands	r3, r2
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bf0c      	ite	eq
 800ddee:	2301      	moveq	r3, #1
 800ddf0:	2300      	movne	r3, #0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	e00c      	b.n	800de12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	43da      	mvns	r2, r3
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	4013      	ands	r3, r2
 800de04:	b29b      	uxth	r3, r3
 800de06:	2b00      	cmp	r3, #0
 800de08:	bf0c      	ite	eq
 800de0a:	2301      	moveq	r3, #1
 800de0c:	2300      	movne	r3, #0
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	461a      	mov	r2, r3
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	429a      	cmp	r2, r3
 800de16:	d0b6      	beq.n	800dd86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b084      	sub	sp, #16
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	607a      	str	r2, [r7, #4]
 800de2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800de30:	e051      	b.n	800ded6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de40:	d123      	bne.n	800de8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2220      	movs	r2, #32
 800de66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de76:	f043 0204 	orr.w	r2, r3, #4
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	e046      	b.n	800df18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de90:	d021      	beq.n	800ded6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de92:	f7fc f8cd 	bl	800a030 <HAL_GetTick>
 800de96:	4602      	mov	r2, r0
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d302      	bcc.n	800dea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d116      	bne.n	800ded6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2220      	movs	r2, #32
 800deb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec2:	f043 0220 	orr.w	r2, r3, #32
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e020      	b.n	800df18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	0c1b      	lsrs	r3, r3, #16
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d10c      	bne.n	800defa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	43da      	mvns	r2, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	4013      	ands	r3, r2
 800deec:	b29b      	uxth	r3, r3
 800deee:	2b00      	cmp	r3, #0
 800def0:	bf14      	ite	ne
 800def2:	2301      	movne	r3, #1
 800def4:	2300      	moveq	r3, #0
 800def6:	b2db      	uxtb	r3, r3
 800def8:	e00b      	b.n	800df12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	43da      	mvns	r2, r3
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	4013      	ands	r3, r2
 800df06:	b29b      	uxth	r3, r3
 800df08:	2b00      	cmp	r3, #0
 800df0a:	bf14      	ite	ne
 800df0c:	2301      	movne	r3, #1
 800df0e:	2300      	moveq	r3, #0
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d18d      	bne.n	800de32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df2c:	e02d      	b.n	800df8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f900 	bl	800e134 <I2C_IsAcknowledgeFailed>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e02d      	b.n	800df9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df44:	d021      	beq.n	800df8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df46:	f7fc f873 	bl	800a030 <HAL_GetTick>
 800df4a:	4602      	mov	r2, r0
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	429a      	cmp	r2, r3
 800df54:	d302      	bcc.n	800df5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d116      	bne.n	800df8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2220      	movs	r2, #32
 800df66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df76:	f043 0220 	orr.w	r2, r3, #32
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	e007      	b.n	800df9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	695b      	ldr	r3, [r3, #20]
 800df90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df94:	2b80      	cmp	r3, #128	; 0x80
 800df96:	d1ca      	bne.n	800df2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b084      	sub	sp, #16
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	60f8      	str	r0, [r7, #12]
 800dfaa:	60b9      	str	r1, [r7, #8]
 800dfac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dfae:	e02d      	b.n	800e00c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f000 f8bf 	bl	800e134 <I2C_IsAcknowledgeFailed>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e02d      	b.n	800e01c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d021      	beq.n	800e00c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfc8:	f7fc f832 	bl	800a030 <HAL_GetTick>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d302      	bcc.n	800dfde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d116      	bne.n	800e00c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2220      	movs	r2, #32
 800dfe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff8:	f043 0220 	orr.w	r2, r3, #32
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e007      	b.n	800e01c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	f003 0304 	and.w	r3, r3, #4
 800e016:	2b04      	cmp	r3, #4
 800e018:	d1ca      	bne.n	800dfb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e02c:	2300      	movs	r3, #0
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e030:	4b13      	ldr	r3, [pc, #76]	; (800e080 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	08db      	lsrs	r3, r3, #3
 800e036:	4a13      	ldr	r2, [pc, #76]	; (800e084 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e038:	fba2 2303 	umull	r2, r3, r2, r3
 800e03c:	0a1a      	lsrs	r2, r3, #8
 800e03e:	4613      	mov	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	4413      	add	r3, r2
 800e044:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3b01      	subs	r3, #1
 800e04a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d107      	bne.n	800e062 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e056:	f043 0220 	orr.w	r2, r3, #32
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e008      	b.n	800e074 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e06c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e070:	d0e9      	beq.n	800e046 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	20000034 	.word	0x20000034
 800e084:	14f8b589 	.word	0x14f8b589

0800e088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e094:	e042      	b.n	800e11c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	f003 0310 	and.w	r3, r3, #16
 800e0a0:	2b10      	cmp	r3, #16
 800e0a2:	d119      	bne.n	800e0d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f06f 0210 	mvn.w	r2, #16
 800e0ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2220      	movs	r2, #32
 800e0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e029      	b.n	800e12c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0d8:	f7fb ffaa 	bl	800a030 <HAL_GetTick>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d302      	bcc.n	800e0ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d116      	bne.n	800e11c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e108:	f043 0220 	orr.w	r2, r3, #32
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e007      	b.n	800e12c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e126:	2b40      	cmp	r3, #64	; 0x40
 800e128:	d1b5      	bne.n	800e096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e14a:	d11b      	bne.n	800e184 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e154:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2220      	movs	r2, #32
 800e160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e170:	f043 0204 	orr.w	r2, r3, #4
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e000      	b.n	800e186 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e1a2:	d103      	bne.n	800e1ac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e1aa:	e007      	b.n	800e1bc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e1b4:	d102      	bne.n	800e1bc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2208      	movs	r2, #8
 800e1ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e1bc:	bf00      	nop
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e264      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d075      	beq.n	800e2d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e1e6:	4ba3      	ldr	r3, [pc, #652]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f003 030c 	and.w	r3, r3, #12
 800e1ee:	2b04      	cmp	r3, #4
 800e1f0:	d00c      	beq.n	800e20c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1f2:	4ba0      	ldr	r3, [pc, #640]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e1fa:	2b08      	cmp	r3, #8
 800e1fc:	d112      	bne.n	800e224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1fe:	4b9d      	ldr	r3, [pc, #628]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e20a:	d10b      	bne.n	800e224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e20c:	4b99      	ldr	r3, [pc, #612]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d05b      	beq.n	800e2d0 <HAL_RCC_OscConfig+0x108>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d157      	bne.n	800e2d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e23f      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e22c:	d106      	bne.n	800e23c <HAL_RCC_OscConfig+0x74>
 800e22e:	4b91      	ldr	r3, [pc, #580]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a90      	ldr	r2, [pc, #576]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e238:	6013      	str	r3, [r2, #0]
 800e23a:	e01d      	b.n	800e278 <HAL_RCC_OscConfig+0xb0>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e244:	d10c      	bne.n	800e260 <HAL_RCC_OscConfig+0x98>
 800e246:	4b8b      	ldr	r3, [pc, #556]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a8a      	ldr	r2, [pc, #552]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e24c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	4b88      	ldr	r3, [pc, #544]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a87      	ldr	r2, [pc, #540]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e25c:	6013      	str	r3, [r2, #0]
 800e25e:	e00b      	b.n	800e278 <HAL_RCC_OscConfig+0xb0>
 800e260:	4b84      	ldr	r3, [pc, #528]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a83      	ldr	r2, [pc, #524]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e26a:	6013      	str	r3, [r2, #0]
 800e26c:	4b81      	ldr	r3, [pc, #516]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a80      	ldr	r2, [pc, #512]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d013      	beq.n	800e2a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e280:	f7fb fed6 	bl	800a030 <HAL_GetTick>
 800e284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e286:	e008      	b.n	800e29a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e288:	f7fb fed2 	bl	800a030 <HAL_GetTick>
 800e28c:	4602      	mov	r2, r0
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	2b64      	cmp	r3, #100	; 0x64
 800e294:	d901      	bls.n	800e29a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e296:	2303      	movs	r3, #3
 800e298:	e204      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e29a:	4b76      	ldr	r3, [pc, #472]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d0f0      	beq.n	800e288 <HAL_RCC_OscConfig+0xc0>
 800e2a6:	e014      	b.n	800e2d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2a8:	f7fb fec2 	bl	800a030 <HAL_GetTick>
 800e2ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2ae:	e008      	b.n	800e2c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e2b0:	f7fb febe 	bl	800a030 <HAL_GetTick>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	2b64      	cmp	r3, #100	; 0x64
 800e2bc:	d901      	bls.n	800e2c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e1f0      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2c2:	4b6c      	ldr	r3, [pc, #432]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1f0      	bne.n	800e2b0 <HAL_RCC_OscConfig+0xe8>
 800e2ce:	e000      	b.n	800e2d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f003 0302 	and.w	r3, r3, #2
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d063      	beq.n	800e3a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e2de:	4b65      	ldr	r3, [pc, #404]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e2e0:	689b      	ldr	r3, [r3, #8]
 800e2e2:	f003 030c 	and.w	r3, r3, #12
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00b      	beq.n	800e302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2ea:	4b62      	ldr	r3, [pc, #392]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e2f2:	2b08      	cmp	r3, #8
 800e2f4:	d11c      	bne.n	800e330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2f6:	4b5f      	ldr	r3, [pc, #380]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d116      	bne.n	800e330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e302:	4b5c      	ldr	r3, [pc, #368]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 0302 	and.w	r3, r3, #2
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d005      	beq.n	800e31a <HAL_RCC_OscConfig+0x152>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d001      	beq.n	800e31a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e316:	2301      	movs	r3, #1
 800e318:	e1c4      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e31a:	4b56      	ldr	r3, [pc, #344]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	4952      	ldr	r1, [pc, #328]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e32a:	4313      	orrs	r3, r2
 800e32c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e32e:	e03a      	b.n	800e3a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d020      	beq.n	800e37a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e338:	4b4f      	ldr	r3, [pc, #316]	; (800e478 <HAL_RCC_OscConfig+0x2b0>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e33e:	f7fb fe77 	bl	800a030 <HAL_GetTick>
 800e342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e344:	e008      	b.n	800e358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e346:	f7fb fe73 	bl	800a030 <HAL_GetTick>
 800e34a:	4602      	mov	r2, r0
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	2b02      	cmp	r3, #2
 800e352:	d901      	bls.n	800e358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	e1a5      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e358:	4b46      	ldr	r3, [pc, #280]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f003 0302 	and.w	r3, r3, #2
 800e360:	2b00      	cmp	r3, #0
 800e362:	d0f0      	beq.n	800e346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e364:	4b43      	ldr	r3, [pc, #268]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	00db      	lsls	r3, r3, #3
 800e372:	4940      	ldr	r1, [pc, #256]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e374:	4313      	orrs	r3, r2
 800e376:	600b      	str	r3, [r1, #0]
 800e378:	e015      	b.n	800e3a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e37a:	4b3f      	ldr	r3, [pc, #252]	; (800e478 <HAL_RCC_OscConfig+0x2b0>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e380:	f7fb fe56 	bl	800a030 <HAL_GetTick>
 800e384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e386:	e008      	b.n	800e39a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e388:	f7fb fe52 	bl	800a030 <HAL_GetTick>
 800e38c:	4602      	mov	r2, r0
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	2b02      	cmp	r3, #2
 800e394:	d901      	bls.n	800e39a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e396:	2303      	movs	r3, #3
 800e398:	e184      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e39a:	4b36      	ldr	r3, [pc, #216]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 0302 	and.w	r3, r3, #2
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1f0      	bne.n	800e388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f003 0308 	and.w	r3, r3, #8
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d030      	beq.n	800e414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d016      	beq.n	800e3e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e3ba:	4b30      	ldr	r3, [pc, #192]	; (800e47c <HAL_RCC_OscConfig+0x2b4>)
 800e3bc:	2201      	movs	r2, #1
 800e3be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3c0:	f7fb fe36 	bl	800a030 <HAL_GetTick>
 800e3c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3c6:	e008      	b.n	800e3da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e3c8:	f7fb fe32 	bl	800a030 <HAL_GetTick>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d901      	bls.n	800e3da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e164      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3da:	4b26      	ldr	r3, [pc, #152]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e3dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3de:	f003 0302 	and.w	r3, r3, #2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0f0      	beq.n	800e3c8 <HAL_RCC_OscConfig+0x200>
 800e3e6:	e015      	b.n	800e414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e3e8:	4b24      	ldr	r3, [pc, #144]	; (800e47c <HAL_RCC_OscConfig+0x2b4>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e3ee:	f7fb fe1f 	bl	800a030 <HAL_GetTick>
 800e3f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3f4:	e008      	b.n	800e408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e3f6:	f7fb fe1b 	bl	800a030 <HAL_GetTick>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	2b02      	cmp	r3, #2
 800e402:	d901      	bls.n	800e408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e404:	2303      	movs	r3, #3
 800e406:	e14d      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e408:	4b1a      	ldr	r3, [pc, #104]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e40a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e40c:	f003 0302 	and.w	r3, r3, #2
 800e410:	2b00      	cmp	r3, #0
 800e412:	d1f0      	bne.n	800e3f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f003 0304 	and.w	r3, r3, #4
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 80a0 	beq.w	800e562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e422:	2300      	movs	r3, #0
 800e424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e426:	4b13      	ldr	r3, [pc, #76]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10f      	bne.n	800e452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e432:	2300      	movs	r3, #0
 800e434:	60bb      	str	r3, [r7, #8]
 800e436:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e43a:	4a0e      	ldr	r2, [pc, #56]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e440:	6413      	str	r3, [r2, #64]	; 0x40
 800e442:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <HAL_RCC_OscConfig+0x2ac>)
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e44a:	60bb      	str	r3, [r7, #8]
 800e44c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e44e:	2301      	movs	r3, #1
 800e450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e452:	4b0b      	ldr	r3, [pc, #44]	; (800e480 <HAL_RCC_OscConfig+0x2b8>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d121      	bne.n	800e4a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e45e:	4b08      	ldr	r3, [pc, #32]	; (800e480 <HAL_RCC_OscConfig+0x2b8>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a07      	ldr	r2, [pc, #28]	; (800e480 <HAL_RCC_OscConfig+0x2b8>)
 800e464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e46a:	f7fb fde1 	bl	800a030 <HAL_GetTick>
 800e46e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e470:	e011      	b.n	800e496 <HAL_RCC_OscConfig+0x2ce>
 800e472:	bf00      	nop
 800e474:	40023800 	.word	0x40023800
 800e478:	42470000 	.word	0x42470000
 800e47c:	42470e80 	.word	0x42470e80
 800e480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e484:	f7fb fdd4 	bl	800a030 <HAL_GetTick>
 800e488:	4602      	mov	r2, r0
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d901      	bls.n	800e496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e492:	2303      	movs	r3, #3
 800e494:	e106      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e496:	4b85      	ldr	r3, [pc, #532]	; (800e6ac <HAL_RCC_OscConfig+0x4e4>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d0f0      	beq.n	800e484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d106      	bne.n	800e4b8 <HAL_RCC_OscConfig+0x2f0>
 800e4aa:	4b81      	ldr	r3, [pc, #516]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ae:	4a80      	ldr	r2, [pc, #512]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4b0:	f043 0301 	orr.w	r3, r3, #1
 800e4b4:	6713      	str	r3, [r2, #112]	; 0x70
 800e4b6:	e01c      	b.n	800e4f2 <HAL_RCC_OscConfig+0x32a>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	2b05      	cmp	r3, #5
 800e4be:	d10c      	bne.n	800e4da <HAL_RCC_OscConfig+0x312>
 800e4c0:	4b7b      	ldr	r3, [pc, #492]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c4:	4a7a      	ldr	r2, [pc, #488]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4c6:	f043 0304 	orr.w	r3, r3, #4
 800e4ca:	6713      	str	r3, [r2, #112]	; 0x70
 800e4cc:	4b78      	ldr	r3, [pc, #480]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4d0:	4a77      	ldr	r2, [pc, #476]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4d2:	f043 0301 	orr.w	r3, r3, #1
 800e4d6:	6713      	str	r3, [r2, #112]	; 0x70
 800e4d8:	e00b      	b.n	800e4f2 <HAL_RCC_OscConfig+0x32a>
 800e4da:	4b75      	ldr	r3, [pc, #468]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4de:	4a74      	ldr	r2, [pc, #464]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4e0:	f023 0301 	bic.w	r3, r3, #1
 800e4e4:	6713      	str	r3, [r2, #112]	; 0x70
 800e4e6:	4b72      	ldr	r3, [pc, #456]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ea:	4a71      	ldr	r2, [pc, #452]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e4ec:	f023 0304 	bic.w	r3, r3, #4
 800e4f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d015      	beq.n	800e526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4fa:	f7fb fd99 	bl	800a030 <HAL_GetTick>
 800e4fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e500:	e00a      	b.n	800e518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e502:	f7fb fd95 	bl	800a030 <HAL_GetTick>
 800e506:	4602      	mov	r2, r0
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e510:	4293      	cmp	r3, r2
 800e512:	d901      	bls.n	800e518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e514:	2303      	movs	r3, #3
 800e516:	e0c5      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e518:	4b65      	ldr	r3, [pc, #404]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0ee      	beq.n	800e502 <HAL_RCC_OscConfig+0x33a>
 800e524:	e014      	b.n	800e550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e526:	f7fb fd83 	bl	800a030 <HAL_GetTick>
 800e52a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e52c:	e00a      	b.n	800e544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e52e:	f7fb fd7f 	bl	800a030 <HAL_GetTick>
 800e532:	4602      	mov	r2, r0
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	f241 3288 	movw	r2, #5000	; 0x1388
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d901      	bls.n	800e544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e540:	2303      	movs	r3, #3
 800e542:	e0af      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e544:	4b5a      	ldr	r3, [pc, #360]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e548:	f003 0302 	and.w	r3, r3, #2
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1ee      	bne.n	800e52e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d105      	bne.n	800e562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e556:	4b56      	ldr	r3, [pc, #344]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55a:	4a55      	ldr	r2, [pc, #340]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e55c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	699b      	ldr	r3, [r3, #24]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 809b 	beq.w	800e6a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e56c:	4b50      	ldr	r3, [pc, #320]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	f003 030c 	and.w	r3, r3, #12
 800e574:	2b08      	cmp	r3, #8
 800e576:	d05c      	beq.n	800e632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	699b      	ldr	r3, [r3, #24]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d141      	bne.n	800e604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e580:	4b4c      	ldr	r3, [pc, #304]	; (800e6b4 <HAL_RCC_OscConfig+0x4ec>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e586:	f7fb fd53 	bl	800a030 <HAL_GetTick>
 800e58a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e58c:	e008      	b.n	800e5a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e58e:	f7fb fd4f 	bl	800a030 <HAL_GetTick>
 800e592:	4602      	mov	r2, r0
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d901      	bls.n	800e5a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e59c:	2303      	movs	r3, #3
 800e59e:	e081      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5a0:	4b43      	ldr	r3, [pc, #268]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1f0      	bne.n	800e58e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	69da      	ldr	r2, [r3, #28]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a1b      	ldr	r3, [r3, #32]
 800e5b4:	431a      	orrs	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ba:	019b      	lsls	r3, r3, #6
 800e5bc:	431a      	orrs	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c2:	085b      	lsrs	r3, r3, #1
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	041b      	lsls	r3, r3, #16
 800e5c8:	431a      	orrs	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ce:	061b      	lsls	r3, r3, #24
 800e5d0:	4937      	ldr	r1, [pc, #220]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5d6:	4b37      	ldr	r3, [pc, #220]	; (800e6b4 <HAL_RCC_OscConfig+0x4ec>)
 800e5d8:	2201      	movs	r2, #1
 800e5da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e5dc:	f7fb fd28 	bl	800a030 <HAL_GetTick>
 800e5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5e2:	e008      	b.n	800e5f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e5e4:	f7fb fd24 	bl	800a030 <HAL_GetTick>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d901      	bls.n	800e5f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	e056      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5f6:	4b2e      	ldr	r3, [pc, #184]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0f0      	beq.n	800e5e4 <HAL_RCC_OscConfig+0x41c>
 800e602:	e04e      	b.n	800e6a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e604:	4b2b      	ldr	r3, [pc, #172]	; (800e6b4 <HAL_RCC_OscConfig+0x4ec>)
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e60a:	f7fb fd11 	bl	800a030 <HAL_GetTick>
 800e60e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e610:	e008      	b.n	800e624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e612:	f7fb fd0d 	bl	800a030 <HAL_GetTick>
 800e616:	4602      	mov	r2, r0
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d901      	bls.n	800e624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e620:	2303      	movs	r3, #3
 800e622:	e03f      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e624:	4b22      	ldr	r3, [pc, #136]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1f0      	bne.n	800e612 <HAL_RCC_OscConfig+0x44a>
 800e630:	e037      	b.n	800e6a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	699b      	ldr	r3, [r3, #24]
 800e636:	2b01      	cmp	r3, #1
 800e638:	d101      	bne.n	800e63e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e032      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e63e:	4b1c      	ldr	r3, [pc, #112]	; (800e6b0 <HAL_RCC_OscConfig+0x4e8>)
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d028      	beq.n	800e69e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e656:	429a      	cmp	r2, r3
 800e658:	d121      	bne.n	800e69e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e664:	429a      	cmp	r2, r3
 800e666:	d11a      	bne.n	800e69e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e66e:	4013      	ands	r3, r2
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e674:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e676:	4293      	cmp	r3, r2
 800e678:	d111      	bne.n	800e69e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e684:	085b      	lsrs	r3, r3, #1
 800e686:	3b01      	subs	r3, #1
 800e688:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d107      	bne.n	800e69e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e698:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d001      	beq.n	800e6a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3718      	adds	r7, #24
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	40007000 	.word	0x40007000
 800e6b0:	40023800 	.word	0x40023800
 800e6b4:	42470060 	.word	0x42470060

0800e6b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d101      	bne.n	800e6cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e0cc      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e6cc:	4b68      	ldr	r3, [pc, #416]	; (800e870 <HAL_RCC_ClockConfig+0x1b8>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f003 0307 	and.w	r3, r3, #7
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d90c      	bls.n	800e6f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6da:	4b65      	ldr	r3, [pc, #404]	; (800e870 <HAL_RCC_ClockConfig+0x1b8>)
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	b2d2      	uxtb	r2, r2
 800e6e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6e2:	4b63      	ldr	r3, [pc, #396]	; (800e870 <HAL_RCC_ClockConfig+0x1b8>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f003 0307 	and.w	r3, r3, #7
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d001      	beq.n	800e6f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e0b8      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 0302 	and.w	r3, r3, #2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d020      	beq.n	800e742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 0304 	and.w	r3, r3, #4
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d005      	beq.n	800e718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e70c:	4b59      	ldr	r3, [pc, #356]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	4a58      	ldr	r2, [pc, #352]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f003 0308 	and.w	r3, r3, #8
 800e720:	2b00      	cmp	r3, #0
 800e722:	d005      	beq.n	800e730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e724:	4b53      	ldr	r3, [pc, #332]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	4a52      	ldr	r2, [pc, #328]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e72a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e72e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e730:	4b50      	ldr	r3, [pc, #320]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	494d      	ldr	r1, [pc, #308]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e73e:	4313      	orrs	r3, r2
 800e740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f003 0301 	and.w	r3, r3, #1
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d044      	beq.n	800e7d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d107      	bne.n	800e766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e756:	4b47      	ldr	r3, [pc, #284]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d119      	bne.n	800e796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e07f      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d003      	beq.n	800e776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e772:	2b03      	cmp	r3, #3
 800e774:	d107      	bne.n	800e786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e776:	4b3f      	ldr	r3, [pc, #252]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d109      	bne.n	800e796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	e06f      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e786:	4b3b      	ldr	r3, [pc, #236]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f003 0302 	and.w	r3, r3, #2
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e067      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e796:	4b37      	ldr	r3, [pc, #220]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	f023 0203 	bic.w	r2, r3, #3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	4934      	ldr	r1, [pc, #208]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e7a8:	f7fb fc42 	bl	800a030 <HAL_GetTick>
 800e7ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7ae:	e00a      	b.n	800e7c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e7b0:	f7fb fc3e 	bl	800a030 <HAL_GetTick>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d901      	bls.n	800e7c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	e04f      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7c6:	4b2b      	ldr	r3, [pc, #172]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	f003 020c 	and.w	r2, r3, #12
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d1eb      	bne.n	800e7b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e7d8:	4b25      	ldr	r3, [pc, #148]	; (800e870 <HAL_RCC_ClockConfig+0x1b8>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 0307 	and.w	r3, r3, #7
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d20c      	bcs.n	800e800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e7e6:	4b22      	ldr	r3, [pc, #136]	; (800e870 <HAL_RCC_ClockConfig+0x1b8>)
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	b2d2      	uxtb	r2, r2
 800e7ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e7ee:	4b20      	ldr	r3, [pc, #128]	; (800e870 <HAL_RCC_ClockConfig+0x1b8>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d001      	beq.n	800e800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e032      	b.n	800e866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f003 0304 	and.w	r3, r3, #4
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d008      	beq.n	800e81e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e80c:	4b19      	ldr	r3, [pc, #100]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	4916      	ldr	r1, [pc, #88]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e81a:	4313      	orrs	r3, r2
 800e81c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f003 0308 	and.w	r3, r3, #8
 800e826:	2b00      	cmp	r3, #0
 800e828:	d009      	beq.n	800e83e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e82a:	4b12      	ldr	r3, [pc, #72]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	00db      	lsls	r3, r3, #3
 800e838:	490e      	ldr	r1, [pc, #56]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e83a:	4313      	orrs	r3, r2
 800e83c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e83e:	f000 f821 	bl	800e884 <HAL_RCC_GetSysClockFreq>
 800e842:	4602      	mov	r2, r0
 800e844:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <HAL_RCC_ClockConfig+0x1bc>)
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	091b      	lsrs	r3, r3, #4
 800e84a:	f003 030f 	and.w	r3, r3, #15
 800e84e:	490a      	ldr	r1, [pc, #40]	; (800e878 <HAL_RCC_ClockConfig+0x1c0>)
 800e850:	5ccb      	ldrb	r3, [r1, r3]
 800e852:	fa22 f303 	lsr.w	r3, r2, r3
 800e856:	4a09      	ldr	r2, [pc, #36]	; (800e87c <HAL_RCC_ClockConfig+0x1c4>)
 800e858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e85a:	4b09      	ldr	r3, [pc, #36]	; (800e880 <HAL_RCC_ClockConfig+0x1c8>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fb fba2 	bl	8009fa8 <HAL_InitTick>

  return HAL_OK;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	40023c00 	.word	0x40023c00
 800e874:	40023800 	.word	0x40023800
 800e878:	08026668 	.word	0x08026668
 800e87c:	20000034 	.word	0x20000034
 800e880:	20000038 	.word	0x20000038

0800e884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e884:	b5b0      	push	{r4, r5, r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e88a:	2100      	movs	r1, #0
 800e88c:	6079      	str	r1, [r7, #4]
 800e88e:	2100      	movs	r1, #0
 800e890:	60f9      	str	r1, [r7, #12]
 800e892:	2100      	movs	r1, #0
 800e894:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e896:	2100      	movs	r1, #0
 800e898:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e89a:	4952      	ldr	r1, [pc, #328]	; (800e9e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e89c:	6889      	ldr	r1, [r1, #8]
 800e89e:	f001 010c 	and.w	r1, r1, #12
 800e8a2:	2908      	cmp	r1, #8
 800e8a4:	d00d      	beq.n	800e8c2 <HAL_RCC_GetSysClockFreq+0x3e>
 800e8a6:	2908      	cmp	r1, #8
 800e8a8:	f200 8094 	bhi.w	800e9d4 <HAL_RCC_GetSysClockFreq+0x150>
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	d002      	beq.n	800e8b6 <HAL_RCC_GetSysClockFreq+0x32>
 800e8b0:	2904      	cmp	r1, #4
 800e8b2:	d003      	beq.n	800e8bc <HAL_RCC_GetSysClockFreq+0x38>
 800e8b4:	e08e      	b.n	800e9d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e8b6:	4b4c      	ldr	r3, [pc, #304]	; (800e9e8 <HAL_RCC_GetSysClockFreq+0x164>)
 800e8b8:	60bb      	str	r3, [r7, #8]
       break;
 800e8ba:	e08e      	b.n	800e9da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e8bc:	4b4b      	ldr	r3, [pc, #300]	; (800e9ec <HAL_RCC_GetSysClockFreq+0x168>)
 800e8be:	60bb      	str	r3, [r7, #8]
      break;
 800e8c0:	e08b      	b.n	800e9da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e8c2:	4948      	ldr	r1, [pc, #288]	; (800e9e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e8c4:	6849      	ldr	r1, [r1, #4]
 800e8c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e8ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e8cc:	4945      	ldr	r1, [pc, #276]	; (800e9e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e8ce:	6849      	ldr	r1, [r1, #4]
 800e8d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	d024      	beq.n	800e922 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e8d8:	4942      	ldr	r1, [pc, #264]	; (800e9e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e8da:	6849      	ldr	r1, [r1, #4]
 800e8dc:	0989      	lsrs	r1, r1, #6
 800e8de:	4608      	mov	r0, r1
 800e8e0:	f04f 0100 	mov.w	r1, #0
 800e8e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e8e8:	f04f 0500 	mov.w	r5, #0
 800e8ec:	ea00 0204 	and.w	r2, r0, r4
 800e8f0:	ea01 0305 	and.w	r3, r1, r5
 800e8f4:	493d      	ldr	r1, [pc, #244]	; (800e9ec <HAL_RCC_GetSysClockFreq+0x168>)
 800e8f6:	fb01 f003 	mul.w	r0, r1, r3
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	fb01 f102 	mul.w	r1, r1, r2
 800e900:	1844      	adds	r4, r0, r1
 800e902:	493a      	ldr	r1, [pc, #232]	; (800e9ec <HAL_RCC_GetSysClockFreq+0x168>)
 800e904:	fba2 0101 	umull	r0, r1, r2, r1
 800e908:	1863      	adds	r3, r4, r1
 800e90a:	4619      	mov	r1, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	461a      	mov	r2, r3
 800e910:	f04f 0300 	mov.w	r3, #0
 800e914:	f7f2 f9d0 	bl	8000cb8 <__aeabi_uldivmod>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	4613      	mov	r3, r2
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	e04a      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e922:	4b30      	ldr	r3, [pc, #192]	; (800e9e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	099b      	lsrs	r3, r3, #6
 800e928:	461a      	mov	r2, r3
 800e92a:	f04f 0300 	mov.w	r3, #0
 800e92e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e932:	f04f 0100 	mov.w	r1, #0
 800e936:	ea02 0400 	and.w	r4, r2, r0
 800e93a:	ea03 0501 	and.w	r5, r3, r1
 800e93e:	4620      	mov	r0, r4
 800e940:	4629      	mov	r1, r5
 800e942:	f04f 0200 	mov.w	r2, #0
 800e946:	f04f 0300 	mov.w	r3, #0
 800e94a:	014b      	lsls	r3, r1, #5
 800e94c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e950:	0142      	lsls	r2, r0, #5
 800e952:	4610      	mov	r0, r2
 800e954:	4619      	mov	r1, r3
 800e956:	1b00      	subs	r0, r0, r4
 800e958:	eb61 0105 	sbc.w	r1, r1, r5
 800e95c:	f04f 0200 	mov.w	r2, #0
 800e960:	f04f 0300 	mov.w	r3, #0
 800e964:	018b      	lsls	r3, r1, #6
 800e966:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e96a:	0182      	lsls	r2, r0, #6
 800e96c:	1a12      	subs	r2, r2, r0
 800e96e:	eb63 0301 	sbc.w	r3, r3, r1
 800e972:	f04f 0000 	mov.w	r0, #0
 800e976:	f04f 0100 	mov.w	r1, #0
 800e97a:	00d9      	lsls	r1, r3, #3
 800e97c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e980:	00d0      	lsls	r0, r2, #3
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	1912      	adds	r2, r2, r4
 800e988:	eb45 0303 	adc.w	r3, r5, r3
 800e98c:	f04f 0000 	mov.w	r0, #0
 800e990:	f04f 0100 	mov.w	r1, #0
 800e994:	0299      	lsls	r1, r3, #10
 800e996:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e99a:	0290      	lsls	r0, r2, #10
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	f04f 0300 	mov.w	r3, #0
 800e9ac:	f7f2 f984 	bl	8000cb8 <__aeabi_uldivmod>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	0c1b      	lsrs	r3, r3, #16
 800e9be:	f003 0303 	and.w	r3, r3, #3
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d0:	60bb      	str	r3, [r7, #8]
      break;
 800e9d2:	e002      	b.n	800e9da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e9d4:	4b04      	ldr	r3, [pc, #16]	; (800e9e8 <HAL_RCC_GetSysClockFreq+0x164>)
 800e9d6:	60bb      	str	r3, [r7, #8]
      break;
 800e9d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e9da:	68bb      	ldr	r3, [r7, #8]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3710      	adds	r7, #16
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bdb0      	pop	{r4, r5, r7, pc}
 800e9e4:	40023800 	.word	0x40023800
 800e9e8:	00f42400 	.word	0x00f42400
 800e9ec:	017d7840 	.word	0x017d7840

0800e9f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e9f4:	4b03      	ldr	r3, [pc, #12]	; (800ea04 <HAL_RCC_GetHCLKFreq+0x14>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	20000034 	.word	0x20000034

0800ea08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ea0c:	f7ff fff0 	bl	800e9f0 <HAL_RCC_GetHCLKFreq>
 800ea10:	4602      	mov	r2, r0
 800ea12:	4b05      	ldr	r3, [pc, #20]	; (800ea28 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	0a9b      	lsrs	r3, r3, #10
 800ea18:	f003 0307 	and.w	r3, r3, #7
 800ea1c:	4903      	ldr	r1, [pc, #12]	; (800ea2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ea1e:	5ccb      	ldrb	r3, [r1, r3]
 800ea20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	40023800 	.word	0x40023800
 800ea2c:	08026678 	.word	0x08026678

0800ea30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ea34:	f7ff ffdc 	bl	800e9f0 <HAL_RCC_GetHCLKFreq>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	4b05      	ldr	r3, [pc, #20]	; (800ea50 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	0b5b      	lsrs	r3, r3, #13
 800ea40:	f003 0307 	and.w	r3, r3, #7
 800ea44:	4903      	ldr	r1, [pc, #12]	; (800ea54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea46:	5ccb      	ldrb	r3, [r1, r3]
 800ea48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	40023800 	.word	0x40023800
 800ea54:	08026678 	.word	0x08026678

0800ea58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d101      	bne.n	800ea6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e07b      	b.n	800eb62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d108      	bne.n	800ea84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea7a:	d009      	beq.n	800ea90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	61da      	str	r2, [r3, #28]
 800ea82:	e005      	b.n	800ea90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d106      	bne.n	800eab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7fa fb04 	bl	80090b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2202      	movs	r2, #2
 800eab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eae2:	431a      	orrs	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	f003 0302 	and.w	r3, r3, #2
 800eaec:	431a      	orrs	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb00:	431a      	orrs	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	69db      	ldr	r3, [r3, #28]
 800eb06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a1b      	ldr	r3, [r3, #32]
 800eb10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb14:	ea42 0103 	orr.w	r1, r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	430a      	orrs	r2, r1
 800eb26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	699b      	ldr	r3, [r3, #24]
 800eb2c:	0c1b      	lsrs	r3, r3, #16
 800eb2e:	f003 0104 	and.w	r1, r3, #4
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	f003 0210 	and.w	r2, r3, #16
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	69da      	ldr	r2, [r3, #28]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b08c      	sub	sp, #48	; 0x30
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	60f8      	str	r0, [r7, #12]
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	607a      	str	r2, [r7, #4]
 800eb76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d101      	bne.n	800eb90 <HAL_SPI_TransmitReceive+0x26>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	e18a      	b.n	800eea6 <HAL_SPI_TransmitReceive+0x33c>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb98:	f7fb fa4a 	bl	800a030 <HAL_GetTick>
 800eb9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ebae:	887b      	ldrh	r3, [r7, #2]
 800ebb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ebb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d00f      	beq.n	800ebda <HAL_SPI_TransmitReceive+0x70>
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebc0:	d107      	bne.n	800ebd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d103      	bne.n	800ebd2 <HAL_SPI_TransmitReceive+0x68>
 800ebca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebce:	2b04      	cmp	r3, #4
 800ebd0:	d003      	beq.n	800ebda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ebd2:	2302      	movs	r3, #2
 800ebd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebd8:	e15b      	b.n	800ee92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d005      	beq.n	800ebec <HAL_SPI_TransmitReceive+0x82>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d002      	beq.n	800ebec <HAL_SPI_TransmitReceive+0x82>
 800ebe6:	887b      	ldrh	r3, [r7, #2]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d103      	bne.n	800ebf4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebf2:	e14e      	b.n	800ee92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d003      	beq.n	800ec08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2205      	movs	r2, #5
 800ec04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	887a      	ldrh	r2, [r7, #2]
 800ec18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	887a      	ldrh	r2, [r7, #2]
 800ec1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	887a      	ldrh	r2, [r7, #2]
 800ec2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	887a      	ldrh	r2, [r7, #2]
 800ec30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec48:	2b40      	cmp	r3, #64	; 0x40
 800ec4a:	d007      	beq.n	800ec5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec64:	d178      	bne.n	800ed58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <HAL_SPI_TransmitReceive+0x10a>
 800ec6e:	8b7b      	ldrh	r3, [r7, #26]
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d166      	bne.n	800ed42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec78:	881a      	ldrh	r2, [r3, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec84:	1c9a      	adds	r2, r3, #2
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	3b01      	subs	r3, #1
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec98:	e053      	b.n	800ed42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	f003 0302 	and.w	r3, r3, #2
 800eca4:	2b02      	cmp	r3, #2
 800eca6:	d11b      	bne.n	800ece0 <HAL_SPI_TransmitReceive+0x176>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d016      	beq.n	800ece0 <HAL_SPI_TransmitReceive+0x176>
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d113      	bne.n	800ece0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecbc:	881a      	ldrh	r2, [r3, #0]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc8:	1c9a      	adds	r2, r3, #2
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d119      	bne.n	800ed22 <HAL_SPI_TransmitReceive+0x1b8>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d014      	beq.n	800ed22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	68da      	ldr	r2, [r3, #12]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed02:	b292      	uxth	r2, r2
 800ed04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed0a:	1c9a      	adds	r2, r3, #2
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	3b01      	subs	r3, #1
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ed22:	f7fb f985 	bl	800a030 <HAL_GetTick>
 800ed26:	4602      	mov	r2, r0
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d807      	bhi.n	800ed42 <HAL_SPI_TransmitReceive+0x1d8>
 800ed32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed38:	d003      	beq.n	800ed42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ed3a:	2303      	movs	r3, #3
 800ed3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed40:	e0a7      	b.n	800ee92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1a6      	bne.n	800ec9a <HAL_SPI_TransmitReceive+0x130>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1a1      	bne.n	800ec9a <HAL_SPI_TransmitReceive+0x130>
 800ed56:	e07c      	b.n	800ee52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <HAL_SPI_TransmitReceive+0x1fc>
 800ed60:	8b7b      	ldrh	r3, [r7, #26]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d16b      	bne.n	800ee3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	330c      	adds	r3, #12
 800ed70:	7812      	ldrb	r2, [r2, #0]
 800ed72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed78:	1c5a      	adds	r2, r3, #1
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed8c:	e057      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	f003 0302 	and.w	r3, r3, #2
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	d11c      	bne.n	800edd6 <HAL_SPI_TransmitReceive+0x26c>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d017      	beq.n	800edd6 <HAL_SPI_TransmitReceive+0x26c>
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d114      	bne.n	800edd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	330c      	adds	r3, #12
 800edb6:	7812      	ldrb	r2, [r2, #0]
 800edb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edc8:	b29b      	uxth	r3, r3
 800edca:	3b01      	subs	r3, #1
 800edcc:	b29a      	uxth	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800edd2:	2300      	movs	r3, #0
 800edd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f003 0301 	and.w	r3, r3, #1
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d119      	bne.n	800ee18 <HAL_SPI_TransmitReceive+0x2ae>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ede8:	b29b      	uxth	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d014      	beq.n	800ee18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68da      	ldr	r2, [r3, #12]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf8:	b2d2      	uxtb	r2, r2
 800edfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee00:	1c5a      	adds	r2, r3, #1
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee14:	2301      	movs	r3, #1
 800ee16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ee18:	f7fb f90a 	bl	800a030 <HAL_GetTick>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d803      	bhi.n	800ee30 <HAL_SPI_TransmitReceive+0x2c6>
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2e:	d102      	bne.n	800ee36 <HAL_SPI_TransmitReceive+0x2cc>
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d103      	bne.n	800ee3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ee36:	2303      	movs	r3, #3
 800ee38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee3c:	e029      	b.n	800ee92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1a2      	bne.n	800ed8e <HAL_SPI_TransmitReceive+0x224>
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d19d      	bne.n	800ed8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f000 f9d0 	bl	800f1fc <SPI_EndRxTxTransaction>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d006      	beq.n	800ee70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2220      	movs	r2, #32
 800ee6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ee6e:	e010      	b.n	800ee92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10b      	bne.n	800ee90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee78:	2300      	movs	r3, #0
 800ee7a:	617b      	str	r3, [r7, #20]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	617b      	str	r3, [r7, #20]
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	e000      	b.n	800ee92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ee90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2201      	movs	r2, #1
 800ee96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eea2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3730      	adds	r7, #48	; 0x30
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b088      	sub	sp, #32
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	099b      	lsrs	r3, r3, #6
 800eecc:	f003 0301 	and.w	r3, r3, #1
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10f      	bne.n	800eef4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00a      	beq.n	800eef4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	099b      	lsrs	r3, r3, #6
 800eee2:	f003 0301 	and.w	r3, r3, #1
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d004      	beq.n	800eef4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	4798      	blx	r3
    return;
 800eef2:	e0d7      	b.n	800f0a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	085b      	lsrs	r3, r3, #1
 800eef8:	f003 0301 	and.w	r3, r3, #1
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00a      	beq.n	800ef16 <HAL_SPI_IRQHandler+0x66>
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	09db      	lsrs	r3, r3, #7
 800ef04:	f003 0301 	and.w	r3, r3, #1
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d004      	beq.n	800ef16 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	4798      	blx	r3
    return;
 800ef14:	e0c6      	b.n	800f0a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	095b      	lsrs	r3, r3, #5
 800ef1a:	f003 0301 	and.w	r3, r3, #1
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10c      	bne.n	800ef3c <HAL_SPI_IRQHandler+0x8c>
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	099b      	lsrs	r3, r3, #6
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d106      	bne.n	800ef3c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	0a1b      	lsrs	r3, r3, #8
 800ef32:	f003 0301 	and.w	r3, r3, #1
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 80b4 	beq.w	800f0a4 <HAL_SPI_IRQHandler+0x1f4>
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	095b      	lsrs	r3, r3, #5
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 80ad 	beq.w	800f0a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	099b      	lsrs	r3, r3, #6
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d023      	beq.n	800ef9e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	2b03      	cmp	r3, #3
 800ef60:	d011      	beq.n	800ef86 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef66:	f043 0204 	orr.w	r2, r3, #4
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef6e:	2300      	movs	r3, #0
 800ef70:	617b      	str	r3, [r7, #20]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	617b      	str	r3, [r7, #20]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	617b      	str	r3, [r7, #20]
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	e00b      	b.n	800ef9e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	613b      	str	r3, [r7, #16]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	613b      	str	r3, [r7, #16]
 800ef9a:	693b      	ldr	r3, [r7, #16]
        return;
 800ef9c:	e082      	b.n	800f0a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	095b      	lsrs	r3, r3, #5
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d014      	beq.n	800efd4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efae:	f043 0201 	orr.w	r2, r3, #1
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800efb6:	2300      	movs	r3, #0
 800efb8:	60fb      	str	r3, [r7, #12]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	60fb      	str	r3, [r7, #12]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efd0:	601a      	str	r2, [r3, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	0a1b      	lsrs	r3, r3, #8
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00c      	beq.n	800effa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe4:	f043 0208 	orr.w	r2, r3, #8
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800efec:	2300      	movs	r3, #0
 800efee:	60bb      	str	r3, [r7, #8]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	60bb      	str	r3, [r7, #8]
 800eff8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effe:	2b00      	cmp	r3, #0
 800f000:	d04f      	beq.n	800f0a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	685a      	ldr	r2, [r3, #4]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f010:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	f003 0302 	and.w	r3, r3, #2
 800f020:	2b00      	cmp	r3, #0
 800f022:	d104      	bne.n	800f02e <HAL_SPI_IRQHandler+0x17e>
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d034      	beq.n	800f098 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f022 0203 	bic.w	r2, r2, #3
 800f03c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f042:	2b00      	cmp	r3, #0
 800f044:	d011      	beq.n	800f06a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f04a:	4a18      	ldr	r2, [pc, #96]	; (800f0ac <HAL_SPI_IRQHandler+0x1fc>)
 800f04c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f052:	4618      	mov	r0, r3
 800f054:	f7fb fb32 	bl	800a6bc <HAL_DMA_Abort_IT>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d005      	beq.n	800f06a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d016      	beq.n	800f0a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f076:	4a0d      	ldr	r2, [pc, #52]	; (800f0ac <HAL_SPI_IRQHandler+0x1fc>)
 800f078:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fb fb1c 	bl	800a6bc <HAL_DMA_Abort_IT>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d00a      	beq.n	800f0a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f096:	e003      	b.n	800f0a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f809 	bl	800f0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f09e:	e000      	b.n	800f0a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f0a0:	bf00      	nop
    return;
 800f0a2:	bf00      	nop
  }
}
 800f0a4:	3720      	adds	r7, #32
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	0800f0c5 	.word	0x0800f0c5

0800f0b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f0b8:	bf00      	nop
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f7ff ffe6 	bl	800f0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f0e4:	bf00      	nop
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b088      	sub	sp, #32
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	603b      	str	r3, [r7, #0]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f0fc:	f7fa ff98 	bl	800a030 <HAL_GetTick>
 800f100:	4602      	mov	r2, r0
 800f102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f104:	1a9b      	subs	r3, r3, r2
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	4413      	add	r3, r2
 800f10a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f10c:	f7fa ff90 	bl	800a030 <HAL_GetTick>
 800f110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f112:	4b39      	ldr	r3, [pc, #228]	; (800f1f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	015b      	lsls	r3, r3, #5
 800f118:	0d1b      	lsrs	r3, r3, #20
 800f11a:	69fa      	ldr	r2, [r7, #28]
 800f11c:	fb02 f303 	mul.w	r3, r2, r3
 800f120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f122:	e054      	b.n	800f1ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d050      	beq.n	800f1ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f12c:	f7fa ff80 	bl	800a030 <HAL_GetTick>
 800f130:	4602      	mov	r2, r0
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	69fa      	ldr	r2, [r7, #28]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d902      	bls.n	800f142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d13d      	bne.n	800f1be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	685a      	ldr	r2, [r3, #4]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f15a:	d111      	bne.n	800f180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f164:	d004      	beq.n	800f170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f16e:	d107      	bne.n	800f180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f17e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f188:	d10f      	bne.n	800f1aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f198:	601a      	str	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	e017      	b.n	800f1ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	689a      	ldr	r2, [r3, #8]
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	bf0c      	ite	eq
 800f1de:	2301      	moveq	r3, #1
 800f1e0:	2300      	movne	r3, #0
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	79fb      	ldrb	r3, [r7, #7]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d19b      	bne.n	800f124 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3720      	adds	r7, #32
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20000034 	.word	0x20000034

0800f1fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b088      	sub	sp, #32
 800f200:	af02      	add	r7, sp, #8
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f208:	4b1b      	ldr	r3, [pc, #108]	; (800f278 <SPI_EndRxTxTransaction+0x7c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4a1b      	ldr	r2, [pc, #108]	; (800f27c <SPI_EndRxTxTransaction+0x80>)
 800f20e:	fba2 2303 	umull	r2, r3, r2, r3
 800f212:	0d5b      	lsrs	r3, r3, #21
 800f214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f218:	fb02 f303 	mul.w	r3, r2, r3
 800f21c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f226:	d112      	bne.n	800f24e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2200      	movs	r2, #0
 800f230:	2180      	movs	r1, #128	; 0x80
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f7ff ff5a 	bl	800f0ec <SPI_WaitFlagStateUntilTimeout>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d016      	beq.n	800f26c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f242:	f043 0220 	orr.w	r2, r3, #32
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f24a:	2303      	movs	r3, #3
 800f24c:	e00f      	b.n	800f26e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00a      	beq.n	800f26a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	3b01      	subs	r3, #1
 800f258:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f264:	2b80      	cmp	r3, #128	; 0x80
 800f266:	d0f2      	beq.n	800f24e <SPI_EndRxTxTransaction+0x52>
 800f268:	e000      	b.n	800f26c <SPI_EndRxTxTransaction+0x70>
        break;
 800f26a:	bf00      	nop
  }

  return HAL_OK;
 800f26c:	2300      	movs	r3, #0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3718      	adds	r7, #24
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	20000034 	.word	0x20000034
 800f27c:	165e9f81 	.word	0x165e9f81

0800f280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d101      	bne.n	800f292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f28e:	2301      	movs	r3, #1
 800f290:	e041      	b.n	800f316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d106      	bne.n	800f2ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7fa fa84 	bl	80097b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	4619      	mov	r1, r3
 800f2be:	4610      	mov	r0, r2
 800f2c0:	f000 fa96 	bl	800f7f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b01      	cmp	r3, #1
 800f332:	d001      	beq.n	800f338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	e044      	b.n	800f3c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2202      	movs	r2, #2
 800f33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68da      	ldr	r2, [r3, #12]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f042 0201 	orr.w	r2, r2, #1
 800f34e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a1e      	ldr	r2, [pc, #120]	; (800f3d0 <HAL_TIM_Base_Start_IT+0xb0>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d018      	beq.n	800f38c <HAL_TIM_Base_Start_IT+0x6c>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f362:	d013      	beq.n	800f38c <HAL_TIM_Base_Start_IT+0x6c>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a1a      	ldr	r2, [pc, #104]	; (800f3d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d00e      	beq.n	800f38c <HAL_TIM_Base_Start_IT+0x6c>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a19      	ldr	r2, [pc, #100]	; (800f3d8 <HAL_TIM_Base_Start_IT+0xb8>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d009      	beq.n	800f38c <HAL_TIM_Base_Start_IT+0x6c>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a17      	ldr	r2, [pc, #92]	; (800f3dc <HAL_TIM_Base_Start_IT+0xbc>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d004      	beq.n	800f38c <HAL_TIM_Base_Start_IT+0x6c>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a16      	ldr	r2, [pc, #88]	; (800f3e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d111      	bne.n	800f3b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	f003 0307 	and.w	r3, r3, #7
 800f396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2b06      	cmp	r3, #6
 800f39c:	d010      	beq.n	800f3c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f042 0201 	orr.w	r2, r2, #1
 800f3ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3ae:	e007      	b.n	800f3c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f042 0201 	orr.w	r2, r2, #1
 800f3be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	40010000 	.word	0x40010000
 800f3d4:	40000400 	.word	0x40000400
 800f3d8:	40000800 	.word	0x40000800
 800f3dc:	40000c00 	.word	0x40000c00
 800f3e0:	40014000 	.word	0x40014000

0800f3e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68da      	ldr	r2, [r3, #12]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f022 0201 	bic.w	r2, r2, #1
 800f3fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	6a1a      	ldr	r2, [r3, #32]
 800f402:	f241 1311 	movw	r3, #4369	; 0x1111
 800f406:	4013      	ands	r3, r2
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10f      	bne.n	800f42c <HAL_TIM_Base_Stop_IT+0x48>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	6a1a      	ldr	r2, [r3, #32]
 800f412:	f240 4344 	movw	r3, #1092	; 0x444
 800f416:	4013      	ands	r3, r2
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d107      	bne.n	800f42c <HAL_TIM_Base_Stop_IT+0x48>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f022 0201 	bic.w	r2, r2, #1
 800f42a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2201      	movs	r2, #1
 800f430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	370c      	adds	r7, #12
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr

0800f442 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b086      	sub	sp, #24
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d101      	bne.n	800f456 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	e097      	b.n	800f586 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7fa f95c 	bl	8009728 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2202      	movs	r2, #2
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	6812      	ldr	r2, [r2, #0]
 800f482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f486:	f023 0307 	bic.w	r3, r3, #7
 800f48a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3304      	adds	r3, #4
 800f494:	4619      	mov	r1, r3
 800f496:	4610      	mov	r0, r2
 800f498:	f000 f9aa 	bl	800f7f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	6a1b      	ldr	r3, [r3, #32]
 800f4b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	697a      	ldr	r2, [r7, #20]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4c4:	f023 0303 	bic.w	r3, r3, #3
 800f4c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	689a      	ldr	r2, [r3, #8]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	021b      	lsls	r3, r3, #8
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f4e2:	f023 030c 	bic.w	r3, r3, #12
 800f4e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f4ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f4f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	68da      	ldr	r2, [r3, #12]
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	69db      	ldr	r3, [r3, #28]
 800f4fc:	021b      	lsls	r3, r3, #8
 800f4fe:	4313      	orrs	r3, r2
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	4313      	orrs	r3, r2
 800f504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	011a      	lsls	r2, r3, #4
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	6a1b      	ldr	r3, [r3, #32]
 800f510:	031b      	lsls	r3, r3, #12
 800f512:	4313      	orrs	r3, r2
 800f514:	693a      	ldr	r2, [r7, #16]
 800f516:	4313      	orrs	r3, r2
 800f518:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f520:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f528:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	685a      	ldr	r2, [r3, #4]
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	695b      	ldr	r3, [r3, #20]
 800f532:	011b      	lsls	r3, r3, #4
 800f534:	4313      	orrs	r3, r2
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	4313      	orrs	r3, r2
 800f53a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	697a      	ldr	r2, [r7, #20]
 800f542:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	693a      	ldr	r2, [r7, #16]
 800f54a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f58e:	b580      	push	{r7, lr}
 800f590:	b082      	sub	sp, #8
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	f003 0302 	and.w	r3, r3, #2
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d122      	bne.n	800f5ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f003 0302 	and.w	r3, r3, #2
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d11b      	bne.n	800f5ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f06f 0202 	mvn.w	r2, #2
 800f5ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	f003 0303 	and.w	r3, r3, #3
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d003      	beq.n	800f5d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f8ee 	bl	800f7b2 <HAL_TIM_IC_CaptureCallback>
 800f5d6:	e005      	b.n	800f5e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 f8e0 	bl	800f79e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f8f1 	bl	800f7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	f003 0304 	and.w	r3, r3, #4
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	d122      	bne.n	800f63e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f003 0304 	and.w	r3, r3, #4
 800f602:	2b04      	cmp	r3, #4
 800f604:	d11b      	bne.n	800f63e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f06f 0204 	mvn.w	r2, #4
 800f60e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2202      	movs	r2, #2
 800f614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	699b      	ldr	r3, [r3, #24]
 800f61c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f8c4 	bl	800f7b2 <HAL_TIM_IC_CaptureCallback>
 800f62a:	e005      	b.n	800f638 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f8b6 	bl	800f79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 f8c7 	bl	800f7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	f003 0308 	and.w	r3, r3, #8
 800f648:	2b08      	cmp	r3, #8
 800f64a:	d122      	bne.n	800f692 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	f003 0308 	and.w	r3, r3, #8
 800f656:	2b08      	cmp	r3, #8
 800f658:	d11b      	bne.n	800f692 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f06f 0208 	mvn.w	r2, #8
 800f662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2204      	movs	r2, #4
 800f668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	69db      	ldr	r3, [r3, #28]
 800f670:	f003 0303 	and.w	r3, r3, #3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d003      	beq.n	800f680 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f89a 	bl	800f7b2 <HAL_TIM_IC_CaptureCallback>
 800f67e:	e005      	b.n	800f68c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 f88c 	bl	800f79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 f89d 	bl	800f7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	691b      	ldr	r3, [r3, #16]
 800f698:	f003 0310 	and.w	r3, r3, #16
 800f69c:	2b10      	cmp	r3, #16
 800f69e:	d122      	bne.n	800f6e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	f003 0310 	and.w	r3, r3, #16
 800f6aa:	2b10      	cmp	r3, #16
 800f6ac:	d11b      	bne.n	800f6e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f06f 0210 	mvn.w	r2, #16
 800f6b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2208      	movs	r2, #8
 800f6bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	69db      	ldr	r3, [r3, #28]
 800f6c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d003      	beq.n	800f6d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 f870 	bl	800f7b2 <HAL_TIM_IC_CaptureCallback>
 800f6d2:	e005      	b.n	800f6e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f862 	bl	800f79e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 f873 	bl	800f7c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	f003 0301 	and.w	r3, r3, #1
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d10e      	bne.n	800f712 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d107      	bne.n	800f712 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f06f 0201 	mvn.w	r2, #1
 800f70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7f6 fa29 	bl	8005b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	691b      	ldr	r3, [r3, #16]
 800f718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f71c:	2b80      	cmp	r3, #128	; 0x80
 800f71e:	d10e      	bne.n	800f73e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f72a:	2b80      	cmp	r3, #128	; 0x80
 800f72c:	d107      	bne.n	800f73e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 f951 	bl	800f9e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f748:	2b40      	cmp	r3, #64	; 0x40
 800f74a:	d10e      	bne.n	800f76a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f756:	2b40      	cmp	r3, #64	; 0x40
 800f758:	d107      	bne.n	800f76a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 f838 	bl	800f7da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	f003 0320 	and.w	r3, r3, #32
 800f774:	2b20      	cmp	r3, #32
 800f776:	d10e      	bne.n	800f796 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	f003 0320 	and.w	r3, r3, #32
 800f782:	2b20      	cmp	r3, #32
 800f784:	d107      	bne.n	800f796 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f06f 0220 	mvn.w	r2, #32
 800f78e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 f91b 	bl	800f9cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f796:	bf00      	nop
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b083      	sub	sp, #12
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f7a6:	bf00      	nop
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr

0800f7b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f7b2:	b480      	push	{r7}
 800f7b4:	b083      	sub	sp, #12
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f7ba:	bf00      	nop
 800f7bc:	370c      	adds	r7, #12
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b083      	sub	sp, #12
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7ce:	bf00      	nop
 800f7d0:	370c      	adds	r7, #12
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr

0800f7da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f7da:	b480      	push	{r7}
 800f7dc:	b083      	sub	sp, #12
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f7e2:	bf00      	nop
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
	...

0800f7f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a34      	ldr	r2, [pc, #208]	; (800f8d4 <TIM_Base_SetConfig+0xe4>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d00f      	beq.n	800f828 <TIM_Base_SetConfig+0x38>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f80e:	d00b      	beq.n	800f828 <TIM_Base_SetConfig+0x38>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4a31      	ldr	r2, [pc, #196]	; (800f8d8 <TIM_Base_SetConfig+0xe8>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d007      	beq.n	800f828 <TIM_Base_SetConfig+0x38>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a30      	ldr	r2, [pc, #192]	; (800f8dc <TIM_Base_SetConfig+0xec>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d003      	beq.n	800f828 <TIM_Base_SetConfig+0x38>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a2f      	ldr	r2, [pc, #188]	; (800f8e0 <TIM_Base_SetConfig+0xf0>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d108      	bne.n	800f83a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f82e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	4313      	orrs	r3, r2
 800f838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a25      	ldr	r2, [pc, #148]	; (800f8d4 <TIM_Base_SetConfig+0xe4>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d01b      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f848:	d017      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a22      	ldr	r2, [pc, #136]	; (800f8d8 <TIM_Base_SetConfig+0xe8>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d013      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4a21      	ldr	r2, [pc, #132]	; (800f8dc <TIM_Base_SetConfig+0xec>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d00f      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4a20      	ldr	r2, [pc, #128]	; (800f8e0 <TIM_Base_SetConfig+0xf0>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d00b      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4a1f      	ldr	r2, [pc, #124]	; (800f8e4 <TIM_Base_SetConfig+0xf4>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d007      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a1e      	ldr	r2, [pc, #120]	; (800f8e8 <TIM_Base_SetConfig+0xf8>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d003      	beq.n	800f87a <TIM_Base_SetConfig+0x8a>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a1d      	ldr	r2, [pc, #116]	; (800f8ec <TIM_Base_SetConfig+0xfc>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d108      	bne.n	800f88c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	4313      	orrs	r3, r2
 800f88a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	695b      	ldr	r3, [r3, #20]
 800f896:	4313      	orrs	r3, r2
 800f898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	689a      	ldr	r2, [r3, #8]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a08      	ldr	r2, [pc, #32]	; (800f8d4 <TIM_Base_SetConfig+0xe4>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d103      	bne.n	800f8c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	691a      	ldr	r2, [r3, #16]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	615a      	str	r2, [r3, #20]
}
 800f8c6:	bf00      	nop
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	40010000 	.word	0x40010000
 800f8d8:	40000400 	.word	0x40000400
 800f8dc:	40000800 	.word	0x40000800
 800f8e0:	40000c00 	.word	0x40000c00
 800f8e4:	40014000 	.word	0x40014000
 800f8e8:	40014400 	.word	0x40014400
 800f8ec:	40014800 	.word	0x40014800

0800f8f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f900:	2b01      	cmp	r3, #1
 800f902:	d101      	bne.n	800f908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f904:	2302      	movs	r3, #2
 800f906:	e050      	b.n	800f9aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2202      	movs	r2, #2
 800f914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f92e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	4313      	orrs	r3, r2
 800f938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a1c      	ldr	r2, [pc, #112]	; (800f9b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d018      	beq.n	800f97e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f954:	d013      	beq.n	800f97e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a18      	ldr	r2, [pc, #96]	; (800f9bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d00e      	beq.n	800f97e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4a16      	ldr	r2, [pc, #88]	; (800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d009      	beq.n	800f97e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	4a15      	ldr	r2, [pc, #84]	; (800f9c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d004      	beq.n	800f97e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4a13      	ldr	r2, [pc, #76]	; (800f9c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d10c      	bne.n	800f998 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	4313      	orrs	r3, r2
 800f98e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2201      	movs	r2, #1
 800f99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3714      	adds	r7, #20
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	40010000 	.word	0x40010000
 800f9bc:	40000400 	.word	0x40000400
 800f9c0:	40000800 	.word	0x40000800
 800f9c4:	40000c00 	.word	0x40000c00
 800f9c8:	40014000 	.word	0x40014000

0800f9cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f9d4:	bf00      	nop
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d101      	bne.n	800fa06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e03f      	b.n	800fa86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d106      	bne.n	800fa20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fa f906 	bl	8009c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2224      	movs	r2, #36	; 0x24
 800fa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68da      	ldr	r2, [r3, #12]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 ff53 	bl	80108e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	691a      	ldr	r2, [r3, #16]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	695a      	ldr	r2, [r3, #20]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68da      	ldr	r2, [r3, #12]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2220      	movs	r2, #32
 800fa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2220      	movs	r2, #32
 800fa80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b08c      	sub	sp, #48	; 0x30
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b20      	cmp	r3, #32
 800faa8:	d165      	bne.n	800fb76 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d002      	beq.n	800fab6 <HAL_UART_Transmit_DMA+0x26>
 800fab0:	88fb      	ldrh	r3, [r7, #6]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d101      	bne.n	800faba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fab6:	2301      	movs	r3, #1
 800fab8:	e05e      	b.n	800fb78 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d101      	bne.n	800fac8 <HAL_UART_Transmit_DMA+0x38>
 800fac4:	2302      	movs	r3, #2
 800fac6:	e057      	b.n	800fb78 <HAL_UART_Transmit_DMA+0xe8>
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2201      	movs	r2, #1
 800facc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	88fa      	ldrh	r2, [r7, #6]
 800fada:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	88fa      	ldrh	r2, [r7, #6]
 800fae0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2200      	movs	r2, #0
 800fae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2221      	movs	r2, #33	; 0x21
 800faec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf4:	4a22      	ldr	r2, [pc, #136]	; (800fb80 <HAL_UART_Transmit_DMA+0xf0>)
 800faf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fafc:	4a21      	ldr	r2, [pc, #132]	; (800fb84 <HAL_UART_Transmit_DMA+0xf4>)
 800fafe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb04:	4a20      	ldr	r2, [pc, #128]	; (800fb88 <HAL_UART_Transmit_DMA+0xf8>)
 800fb06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800fb10:	f107 0308 	add.w	r3, r7, #8
 800fb14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	6819      	ldr	r1, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	3304      	adds	r3, #4
 800fb24:	461a      	mov	r2, r3
 800fb26:	88fb      	ldrh	r3, [r7, #6]
 800fb28:	f7fa fd00 	bl	800a52c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fb34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3314      	adds	r3, #20
 800fb44:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	e853 3f00 	ldrex	r3, [r3]
 800fb4c:	617b      	str	r3, [r7, #20]
   return(result);
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb54:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3314      	adds	r3, #20
 800fb5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb5e:	627a      	str	r2, [r7, #36]	; 0x24
 800fb60:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb62:	6a39      	ldr	r1, [r7, #32]
 800fb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb66:	e841 2300 	strex	r3, r2, [r1]
 800fb6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1e5      	bne.n	800fb3e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fb72:	2300      	movs	r3, #0
 800fb74:	e000      	b.n	800fb78 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fb76:	2302      	movs	r3, #2
  }
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3730      	adds	r7, #48	; 0x30
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	08010185 	.word	0x08010185
 800fb84:	0801021f 	.word	0x0801021f
 800fb88:	08010397 	.word	0x08010397

0800fb8c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	4613      	mov	r3, r2
 800fb98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b20      	cmp	r3, #32
 800fba4:	d11d      	bne.n	800fbe2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d002      	beq.n	800fbb2 <HAL_UART_Receive_DMA+0x26>
 800fbac:	88fb      	ldrh	r3, [r7, #6]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e016      	b.n	800fbe4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d101      	bne.n	800fbc4 <HAL_UART_Receive_DMA+0x38>
 800fbc0:	2302      	movs	r3, #2
 800fbc2:	e00f      	b.n	800fbe4 <HAL_UART_Receive_DMA+0x58>
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	68b9      	ldr	r1, [r7, #8]
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f000 fc27 	bl	801042c <UART_Start_Receive_DMA>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	e000      	b.n	800fbe4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800fbe2:	2302      	movs	r3, #2
  }
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b0ba      	sub	sp, #232	; 0xe8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fc12:	2300      	movs	r3, #0
 800fc14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc22:	f003 030f 	and.w	r3, r3, #15
 800fc26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800fc2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d10f      	bne.n	800fc52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc36:	f003 0320 	and.w	r3, r3, #32
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d009      	beq.n	800fc52 <HAL_UART_IRQHandler+0x66>
 800fc3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc42:	f003 0320 	and.w	r3, r3, #32
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 fd8f 	bl	801076e <UART_Receive_IT>
      return;
 800fc50:	e256      	b.n	8010100 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fc52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	f000 80de 	beq.w	800fe18 <HAL_UART_IRQHandler+0x22c>
 800fc5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc60:	f003 0301 	and.w	r3, r3, #1
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d106      	bne.n	800fc76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fc68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f000 80d1 	beq.w	800fe18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00b      	beq.n	800fc9a <HAL_UART_IRQHandler+0xae>
 800fc82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d005      	beq.n	800fc9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc92:	f043 0201 	orr.w	r2, r3, #1
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc9e:	f003 0304 	and.w	r3, r3, #4
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00b      	beq.n	800fcbe <HAL_UART_IRQHandler+0xd2>
 800fca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcaa:	f003 0301 	and.w	r3, r3, #1
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d005      	beq.n	800fcbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcb6:	f043 0202 	orr.w	r2, r3, #2
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fcbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcc2:	f003 0302 	and.w	r3, r3, #2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00b      	beq.n	800fce2 <HAL_UART_IRQHandler+0xf6>
 800fcca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcce:	f003 0301 	and.w	r3, r3, #1
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d005      	beq.n	800fce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcda:	f043 0204 	orr.w	r2, r3, #4
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fce6:	f003 0308 	and.w	r3, r3, #8
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d011      	beq.n	800fd12 <HAL_UART_IRQHandler+0x126>
 800fcee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fcf2:	f003 0320 	and.w	r3, r3, #32
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d105      	bne.n	800fd06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fcfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcfe:	f003 0301 	and.w	r3, r3, #1
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d005      	beq.n	800fd12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd0a:	f043 0208 	orr.w	r2, r3, #8
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f000 81ed 	beq.w	80100f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fd1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd20:	f003 0320 	and.w	r3, r3, #32
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d008      	beq.n	800fd3a <HAL_UART_IRQHandler+0x14e>
 800fd28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd2c:	f003 0320 	and.w	r3, r3, #32
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 fd1a 	bl	801076e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	695b      	ldr	r3, [r3, #20]
 800fd40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd44:	2b40      	cmp	r3, #64	; 0x40
 800fd46:	bf0c      	ite	eq
 800fd48:	2301      	moveq	r3, #1
 800fd4a:	2300      	movne	r3, #0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd56:	f003 0308 	and.w	r3, r3, #8
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d103      	bne.n	800fd66 <HAL_UART_IRQHandler+0x17a>
 800fd5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d04f      	beq.n	800fe06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fc22 	bl	80105b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd76:	2b40      	cmp	r3, #64	; 0x40
 800fd78:	d141      	bne.n	800fdfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	3314      	adds	r3, #20
 800fd80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd88:	e853 3f00 	ldrex	r3, [r3]
 800fd8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fd90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fd94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3314      	adds	r3, #20
 800fda2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fda6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fdaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fdb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fdb6:	e841 2300 	strex	r3, r2, [r1]
 800fdba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fdbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1d9      	bne.n	800fd7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d013      	beq.n	800fdf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdd2:	4a7d      	ldr	r2, [pc, #500]	; (800ffc8 <HAL_UART_IRQHandler+0x3dc>)
 800fdd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fa fc6e 	bl	800a6bc <HAL_DMA_Abort_IT>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d016      	beq.n	800fe14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdf4:	e00e      	b.n	800fe14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f9ae 	bl	8010158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdfc:	e00a      	b.n	800fe14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 f9aa 	bl	8010158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe04:	e006      	b.n	800fe14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f9a6 	bl	8010158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fe12:	e170      	b.n	80100f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe14:	bf00      	nop
    return;
 800fe16:	e16e      	b.n	80100f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	f040 814a 	bne.w	80100b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fe22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe26:	f003 0310 	and.w	r3, r3, #16
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f000 8143 	beq.w	80100b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fe30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe34:	f003 0310 	and.w	r3, r3, #16
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 813c 	beq.w	80100b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60bb      	str	r3, [r7, #8]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	60bb      	str	r3, [r7, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	60bb      	str	r3, [r7, #8]
 800fe52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	695b      	ldr	r3, [r3, #20]
 800fe5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe5e:	2b40      	cmp	r3, #64	; 0x40
 800fe60:	f040 80b4 	bne.w	800ffcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fe70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 8140 	beq.w	80100fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fe7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fe82:	429a      	cmp	r2, r3
 800fe84:	f080 8139 	bcs.w	80100fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fe8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe94:	69db      	ldr	r3, [r3, #28]
 800fe96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe9a:	f000 8088 	beq.w	800ffae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	330c      	adds	r3, #12
 800fea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800feac:	e853 3f00 	ldrex	r3, [r3]
 800feb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800feb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800feb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800febc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	330c      	adds	r3, #12
 800fec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800feca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800feda:	e841 2300 	strex	r3, r2, [r1]
 800fede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1d9      	bne.n	800fe9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	3314      	adds	r3, #20
 800fef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fef4:	e853 3f00 	ldrex	r3, [r3]
 800fef8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fefa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fefc:	f023 0301 	bic.w	r3, r3, #1
 800ff00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3314      	adds	r3, #20
 800ff0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ff0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ff16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ff1a:	e841 2300 	strex	r3, r2, [r1]
 800ff1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ff20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1e1      	bne.n	800feea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	3314      	adds	r3, #20
 800ff2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff30:	e853 3f00 	ldrex	r3, [r3]
 800ff34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ff36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	3314      	adds	r3, #20
 800ff46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ff4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ff4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff52:	e841 2300 	strex	r3, r2, [r1]
 800ff56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ff58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1e3      	bne.n	800ff26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2220      	movs	r2, #32
 800ff62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	330c      	adds	r3, #12
 800ff72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff76:	e853 3f00 	ldrex	r3, [r3]
 800ff7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff7e:	f023 0310 	bic.w	r3, r3, #16
 800ff82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	330c      	adds	r3, #12
 800ff8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ff90:	65ba      	str	r2, [r7, #88]	; 0x58
 800ff92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff98:	e841 2300 	strex	r3, r2, [r1]
 800ff9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1e3      	bne.n	800ff6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fa fb17 	bl	800a5dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 f8d4 	bl	801016c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ffc4:	e099      	b.n	80100fa <HAL_UART_IRQHandler+0x50e>
 800ffc6:	bf00      	nop
 800ffc8:	08010677 	.word	0x08010677
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	f000 808b 	beq.w	80100fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ffe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f000 8086 	beq.w	80100fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	330c      	adds	r3, #12
 800fff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	e853 3f00 	ldrex	r3, [r3]
 8010000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	330c      	adds	r3, #12
 8010012:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010016:	647a      	str	r2, [r7, #68]	; 0x44
 8010018:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801001a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801001c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801001e:	e841 2300 	strex	r3, r2, [r1]
 8010022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1e3      	bne.n	800fff2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	3314      	adds	r3, #20
 8010030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010034:	e853 3f00 	ldrex	r3, [r3]
 8010038:	623b      	str	r3, [r7, #32]
   return(result);
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	f023 0301 	bic.w	r3, r3, #1
 8010040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	3314      	adds	r3, #20
 801004a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801004e:	633a      	str	r2, [r7, #48]	; 0x30
 8010050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010056:	e841 2300 	strex	r3, r2, [r1]
 801005a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801005c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1e3      	bne.n	801002a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2220      	movs	r2, #32
 8010066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	330c      	adds	r3, #12
 8010076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	e853 3f00 	ldrex	r3, [r3]
 801007e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f023 0310 	bic.w	r3, r3, #16
 8010086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	330c      	adds	r3, #12
 8010090:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010094:	61fa      	str	r2, [r7, #28]
 8010096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010098:	69b9      	ldr	r1, [r7, #24]
 801009a:	69fa      	ldr	r2, [r7, #28]
 801009c:	e841 2300 	strex	r3, r2, [r1]
 80100a0:	617b      	str	r3, [r7, #20]
   return(result);
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1e3      	bne.n	8010070 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80100a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f85c 	bl	801016c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80100b4:	e023      	b.n	80100fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80100b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d009      	beq.n	80100d6 <HAL_UART_IRQHandler+0x4ea>
 80100c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d003      	beq.n	80100d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 fae5 	bl	801069e <UART_Transmit_IT>
    return;
 80100d4:	e014      	b.n	8010100 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80100d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00e      	beq.n	8010100 <HAL_UART_IRQHandler+0x514>
 80100e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d008      	beq.n	8010100 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 fb25 	bl	801073e <UART_EndTransmit_IT>
    return;
 80100f4:	e004      	b.n	8010100 <HAL_UART_IRQHandler+0x514>
    return;
 80100f6:	bf00      	nop
 80100f8:	e002      	b.n	8010100 <HAL_UART_IRQHandler+0x514>
      return;
 80100fa:	bf00      	nop
 80100fc:	e000      	b.n	8010100 <HAL_UART_IRQHandler+0x514>
      return;
 80100fe:	bf00      	nop
  }
}
 8010100:	37e8      	adds	r7, #232	; 0xe8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop

08010108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	460b      	mov	r3, r1
 8010176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b090      	sub	sp, #64	; 0x40
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010190:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801019c:	2b00      	cmp	r3, #0
 801019e:	d137      	bne.n	8010210 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80101a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101a2:	2200      	movs	r2, #0
 80101a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80101a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3314      	adds	r3, #20
 80101ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b0:	e853 3f00 	ldrex	r3, [r3]
 80101b4:	623b      	str	r3, [r7, #32]
   return(result);
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80101be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3314      	adds	r3, #20
 80101c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101c6:	633a      	str	r2, [r7, #48]	; 0x30
 80101c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ce:	e841 2300 	strex	r3, r2, [r1]
 80101d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80101d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1e5      	bne.n	80101a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80101da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	330c      	adds	r3, #12
 80101e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	e853 3f00 	ldrex	r3, [r3]
 80101e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101f0:	637b      	str	r3, [r7, #52]	; 0x34
 80101f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	330c      	adds	r3, #12
 80101f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101fa:	61fa      	str	r2, [r7, #28]
 80101fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101fe:	69b9      	ldr	r1, [r7, #24]
 8010200:	69fa      	ldr	r2, [r7, #28]
 8010202:	e841 2300 	strex	r3, r2, [r1]
 8010206:	617b      	str	r3, [r7, #20]
   return(result);
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1e5      	bne.n	80101da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801020e:	e002      	b.n	8010216 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010212:	f7ff ff79 	bl	8010108 <HAL_UART_TxCpltCallback>
}
 8010216:	bf00      	nop
 8010218:	3740      	adds	r7, #64	; 0x40
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801022a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f7ff ff75 	bl	801011c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b09c      	sub	sp, #112	; 0x70
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010246:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010252:	2b00      	cmp	r3, #0
 8010254:	d172      	bne.n	801033c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010258:	2200      	movs	r2, #0
 801025a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801025c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	330c      	adds	r3, #12
 8010262:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010266:	e853 3f00 	ldrex	r3, [r3]
 801026a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801026c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801026e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010272:	66bb      	str	r3, [r7, #104]	; 0x68
 8010274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	330c      	adds	r3, #12
 801027a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801027c:	65ba      	str	r2, [r7, #88]	; 0x58
 801027e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010284:	e841 2300 	strex	r3, r2, [r1]
 8010288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801028a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801028c:	2b00      	cmp	r3, #0
 801028e:	d1e5      	bne.n	801025c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	3314      	adds	r3, #20
 8010296:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	e853 3f00 	ldrex	r3, [r3]
 801029e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80102a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a2:	f023 0301 	bic.w	r3, r3, #1
 80102a6:	667b      	str	r3, [r7, #100]	; 0x64
 80102a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	3314      	adds	r3, #20
 80102ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80102b0:	647a      	str	r2, [r7, #68]	; 0x44
 80102b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102b8:	e841 2300 	strex	r3, r2, [r1]
 80102bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80102be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d1e5      	bne.n	8010290 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3314      	adds	r3, #20
 80102ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ce:	e853 3f00 	ldrex	r3, [r3]
 80102d2:	623b      	str	r3, [r7, #32]
   return(result);
 80102d4:	6a3b      	ldr	r3, [r7, #32]
 80102d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102da:	663b      	str	r3, [r7, #96]	; 0x60
 80102dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3314      	adds	r3, #20
 80102e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102e4:	633a      	str	r2, [r7, #48]	; 0x30
 80102e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ec:	e841 2300 	strex	r3, r2, [r1]
 80102f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80102f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1e5      	bne.n	80102c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80102f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102fa:	2220      	movs	r2, #32
 80102fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010304:	2b01      	cmp	r3, #1
 8010306:	d119      	bne.n	801033c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	330c      	adds	r3, #12
 801030e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	e853 3f00 	ldrex	r3, [r3]
 8010316:	60fb      	str	r3, [r7, #12]
   return(result);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f023 0310 	bic.w	r3, r3, #16
 801031e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	330c      	adds	r3, #12
 8010326:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010328:	61fa      	str	r2, [r7, #28]
 801032a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801032c:	69b9      	ldr	r1, [r7, #24]
 801032e:	69fa      	ldr	r2, [r7, #28]
 8010330:	e841 2300 	strex	r3, r2, [r1]
 8010334:	617b      	str	r3, [r7, #20]
   return(result);
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1e5      	bne.n	8010308 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801033c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010340:	2b01      	cmp	r3, #1
 8010342:	d106      	bne.n	8010352 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010346:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010348:	4619      	mov	r1, r3
 801034a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801034c:	f7ff ff0e 	bl	801016c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010350:	e002      	b.n	8010358 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010352:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010354:	f7ff feec 	bl	8010130 <HAL_UART_RxCpltCallback>
}
 8010358:	bf00      	nop
 801035a:	3770      	adds	r7, #112	; 0x70
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010372:	2b01      	cmp	r3, #1
 8010374:	d108      	bne.n	8010388 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801037a:	085b      	lsrs	r3, r3, #1
 801037c:	b29b      	uxth	r3, r3
 801037e:	4619      	mov	r1, r3
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7ff fef3 	bl	801016c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010386:	e002      	b.n	801038e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010388:	68f8      	ldr	r0, [r7, #12]
 801038a:	f7ff fedb 	bl	8010144 <HAL_UART_RxHalfCpltCallback>
}
 801038e:	bf00      	nop
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}

08010396 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b084      	sub	sp, #16
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801039e:	2300      	movs	r3, #0
 80103a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103b2:	2b80      	cmp	r3, #128	; 0x80
 80103b4:	bf0c      	ite	eq
 80103b6:	2301      	moveq	r3, #1
 80103b8:	2300      	movne	r3, #0
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b21      	cmp	r3, #33	; 0x21
 80103c8:	d108      	bne.n	80103dc <UART_DMAError+0x46>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d005      	beq.n	80103dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2200      	movs	r2, #0
 80103d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80103d6:	68b8      	ldr	r0, [r7, #8]
 80103d8:	f000 f8c2 	bl	8010560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	695b      	ldr	r3, [r3, #20]
 80103e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e6:	2b40      	cmp	r3, #64	; 0x40
 80103e8:	bf0c      	ite	eq
 80103ea:	2301      	moveq	r3, #1
 80103ec:	2300      	movne	r3, #0
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	2b22      	cmp	r3, #34	; 0x22
 80103fc:	d108      	bne.n	8010410 <UART_DMAError+0x7a>
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d005      	beq.n	8010410 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	2200      	movs	r2, #0
 8010408:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801040a:	68b8      	ldr	r0, [r7, #8]
 801040c:	f000 f8d0 	bl	80105b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010414:	f043 0210 	orr.w	r2, r3, #16
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801041c:	68b8      	ldr	r0, [r7, #8]
 801041e:	f7ff fe9b 	bl	8010158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010422:	bf00      	nop
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
	...

0801042c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b098      	sub	sp, #96	; 0x60
 8010430:	af00      	add	r7, sp, #0
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	4613      	mov	r3, r2
 8010438:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	88fa      	ldrh	r2, [r7, #6]
 8010444:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2200      	movs	r2, #0
 801044a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2222      	movs	r2, #34	; 0x22
 8010450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010458:	4a3e      	ldr	r2, [pc, #248]	; (8010554 <UART_Start_Receive_DMA+0x128>)
 801045a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010460:	4a3d      	ldr	r2, [pc, #244]	; (8010558 <UART_Start_Receive_DMA+0x12c>)
 8010462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010468:	4a3c      	ldr	r2, [pc, #240]	; (801055c <UART_Start_Receive_DMA+0x130>)
 801046a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010470:	2200      	movs	r2, #0
 8010472:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010474:	f107 0308 	add.w	r3, r7, #8
 8010478:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	3304      	adds	r3, #4
 8010484:	4619      	mov	r1, r3
 8010486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	88fb      	ldrh	r3, [r7, #6]
 801048c:	f7fa f84e 	bl	800a52c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010490:	2300      	movs	r3, #0
 8010492:	613b      	str	r3, [r7, #16]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	613b      	str	r3, [r7, #16]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	613b      	str	r3, [r7, #16]
 80104a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	330c      	adds	r3, #12
 80104b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80104be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	330c      	adds	r3, #12
 80104cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80104d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80104d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104d6:	e841 2300 	strex	r3, r2, [r1]
 80104da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80104dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1e5      	bne.n	80104ae <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	3314      	adds	r3, #20
 80104e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ec:	e853 3f00 	ldrex	r3, [r3]
 80104f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	f043 0301 	orr.w	r3, r3, #1
 80104f8:	657b      	str	r3, [r7, #84]	; 0x54
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	3314      	adds	r3, #20
 8010500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010502:	63ba      	str	r2, [r7, #56]	; 0x38
 8010504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010506:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801050a:	e841 2300 	strex	r3, r2, [r1]
 801050e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1e5      	bne.n	80104e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3314      	adds	r3, #20
 801051c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	e853 3f00 	ldrex	r3, [r3]
 8010524:	617b      	str	r3, [r7, #20]
   return(result);
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801052c:	653b      	str	r3, [r7, #80]	; 0x50
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	3314      	adds	r3, #20
 8010534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010536:	627a      	str	r2, [r7, #36]	; 0x24
 8010538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053a:	6a39      	ldr	r1, [r7, #32]
 801053c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801053e:	e841 2300 	strex	r3, r2, [r1]
 8010542:	61fb      	str	r3, [r7, #28]
   return(result);
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1e5      	bne.n	8010516 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3760      	adds	r7, #96	; 0x60
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	0801023b 	.word	0x0801023b
 8010558:	08010361 	.word	0x08010361
 801055c:	08010397 	.word	0x08010397

08010560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010560:	b480      	push	{r7}
 8010562:	b089      	sub	sp, #36	; 0x24
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	330c      	adds	r3, #12
 801056e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	e853 3f00 	ldrex	r3, [r3]
 8010576:	60bb      	str	r3, [r7, #8]
   return(result);
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801057e:	61fb      	str	r3, [r7, #28]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	330c      	adds	r3, #12
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	61ba      	str	r2, [r7, #24]
 801058a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058c:	6979      	ldr	r1, [r7, #20]
 801058e:	69ba      	ldr	r2, [r7, #24]
 8010590:	e841 2300 	strex	r3, r2, [r1]
 8010594:	613b      	str	r3, [r7, #16]
   return(result);
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1e5      	bne.n	8010568 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2220      	movs	r2, #32
 80105a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80105a4:	bf00      	nop
 80105a6:	3724      	adds	r7, #36	; 0x24
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b095      	sub	sp, #84	; 0x54
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	330c      	adds	r3, #12
 80105be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c2:	e853 3f00 	ldrex	r3, [r3]
 80105c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	330c      	adds	r3, #12
 80105d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105d8:	643a      	str	r2, [r7, #64]	; 0x40
 80105da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105e0:	e841 2300 	strex	r3, r2, [r1]
 80105e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1e5      	bne.n	80105b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	3314      	adds	r3, #20
 80105f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f4:	6a3b      	ldr	r3, [r7, #32]
 80105f6:	e853 3f00 	ldrex	r3, [r3]
 80105fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	f023 0301 	bic.w	r3, r3, #1
 8010602:	64bb      	str	r3, [r7, #72]	; 0x48
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	3314      	adds	r3, #20
 801060a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801060c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801060e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010614:	e841 2300 	strex	r3, r2, [r1]
 8010618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1e5      	bne.n	80105ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010624:	2b01      	cmp	r3, #1
 8010626:	d119      	bne.n	801065c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	330c      	adds	r3, #12
 801062e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	e853 3f00 	ldrex	r3, [r3]
 8010636:	60bb      	str	r3, [r7, #8]
   return(result);
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	f023 0310 	bic.w	r3, r3, #16
 801063e:	647b      	str	r3, [r7, #68]	; 0x44
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	330c      	adds	r3, #12
 8010646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010648:	61ba      	str	r2, [r7, #24]
 801064a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064c:	6979      	ldr	r1, [r7, #20]
 801064e:	69ba      	ldr	r2, [r7, #24]
 8010650:	e841 2300 	strex	r3, r2, [r1]
 8010654:	613b      	str	r3, [r7, #16]
   return(result);
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1e5      	bne.n	8010628 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2220      	movs	r2, #32
 8010660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	631a      	str	r2, [r3, #48]	; 0x30
}
 801066a:	bf00      	nop
 801066c:	3754      	adds	r7, #84	; 0x54
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b084      	sub	sp, #16
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2200      	movs	r2, #0
 8010688:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f7ff fd61 	bl	8010158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010696:	bf00      	nop
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801069e:	b480      	push	{r7}
 80106a0:	b085      	sub	sp, #20
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	2b21      	cmp	r3, #33	; 0x21
 80106b0:	d13e      	bne.n	8010730 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106ba:	d114      	bne.n	80106e6 <UART_Transmit_IT+0x48>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	691b      	ldr	r3, [r3, #16]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d110      	bne.n	80106e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6a1b      	ldr	r3, [r3, #32]
 80106c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80106d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a1b      	ldr	r3, [r3, #32]
 80106de:	1c9a      	adds	r2, r3, #2
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	621a      	str	r2, [r3, #32]
 80106e4:	e008      	b.n	80106f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	1c59      	adds	r1, r3, #1
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	6211      	str	r1, [r2, #32]
 80106f0:	781a      	ldrb	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	3b01      	subs	r3, #1
 8010700:	b29b      	uxth	r3, r3
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	4619      	mov	r1, r3
 8010706:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010708:	2b00      	cmp	r3, #0
 801070a:	d10f      	bne.n	801072c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68da      	ldr	r2, [r3, #12]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801071a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68da      	ldr	r2, [r3, #12]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801072a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	e000      	b.n	8010732 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010730:	2302      	movs	r3, #2
  }
}
 8010732:	4618      	mov	r0, r3
 8010734:	3714      	adds	r7, #20
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801073e:	b580      	push	{r7, lr}
 8010740:	b082      	sub	sp, #8
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	68da      	ldr	r2, [r3, #12]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010754:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2220      	movs	r2, #32
 801075a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7ff fcd2 	bl	8010108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b08c      	sub	sp, #48	; 0x30
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801077c:	b2db      	uxtb	r3, r3
 801077e:	2b22      	cmp	r3, #34	; 0x22
 8010780:	f040 80ab 	bne.w	80108da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801078c:	d117      	bne.n	80107be <UART_Receive_IT+0x50>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	691b      	ldr	r3, [r3, #16]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d113      	bne.n	80107be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010796:	2300      	movs	r3, #0
 8010798:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801079e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b6:	1c9a      	adds	r2, r3, #2
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	629a      	str	r2, [r3, #40]	; 0x28
 80107bc:	e026      	b.n	801080c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80107c4:	2300      	movs	r3, #0
 80107c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	689b      	ldr	r3, [r3, #8]
 80107cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107d0:	d007      	beq.n	80107e2 <UART_Receive_IT+0x74>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d10a      	bne.n	80107f0 <UART_Receive_IT+0x82>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	691b      	ldr	r3, [r3, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d106      	bne.n	80107f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ec:	701a      	strb	r2, [r3, #0]
 80107ee:	e008      	b.n	8010802 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010810:	b29b      	uxth	r3, r3
 8010812:	3b01      	subs	r3, #1
 8010814:	b29b      	uxth	r3, r3
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	4619      	mov	r1, r3
 801081a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801081c:	2b00      	cmp	r3, #0
 801081e:	d15a      	bne.n	80108d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68da      	ldr	r2, [r3, #12]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f022 0220 	bic.w	r2, r2, #32
 801082e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68da      	ldr	r2, [r3, #12]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801083e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	695a      	ldr	r2, [r3, #20]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f022 0201 	bic.w	r2, r2, #1
 801084e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2220      	movs	r2, #32
 8010854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085c:	2b01      	cmp	r3, #1
 801085e:	d135      	bne.n	80108cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	330c      	adds	r3, #12
 801086c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	e853 3f00 	ldrex	r3, [r3]
 8010874:	613b      	str	r3, [r7, #16]
   return(result);
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	f023 0310 	bic.w	r3, r3, #16
 801087c:	627b      	str	r3, [r7, #36]	; 0x24
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	330c      	adds	r3, #12
 8010884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010886:	623a      	str	r2, [r7, #32]
 8010888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088a:	69f9      	ldr	r1, [r7, #28]
 801088c:	6a3a      	ldr	r2, [r7, #32]
 801088e:	e841 2300 	strex	r3, r2, [r1]
 8010892:	61bb      	str	r3, [r7, #24]
   return(result);
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1e5      	bne.n	8010866 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f003 0310 	and.w	r3, r3, #16
 80108a4:	2b10      	cmp	r3, #16
 80108a6:	d10a      	bne.n	80108be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80108a8:	2300      	movs	r3, #0
 80108aa:	60fb      	str	r3, [r7, #12]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	60fb      	str	r3, [r7, #12]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	60fb      	str	r3, [r7, #12]
 80108bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80108c2:	4619      	mov	r1, r3
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7ff fc51 	bl	801016c <HAL_UARTEx_RxEventCallback>
 80108ca:	e002      	b.n	80108d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f7ff fc2f 	bl	8010130 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80108d2:	2300      	movs	r3, #0
 80108d4:	e002      	b.n	80108dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80108d6:	2300      	movs	r3, #0
 80108d8:	e000      	b.n	80108dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80108da:	2302      	movs	r3, #2
  }
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3730      	adds	r7, #48	; 0x30
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	b09f      	sub	sp, #124	; 0x7c
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80108f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108fa:	68d9      	ldr	r1, [r3, #12]
 80108fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	ea40 0301 	orr.w	r3, r0, r1
 8010904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010908:	689a      	ldr	r2, [r3, #8]
 801090a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	431a      	orrs	r2, r3
 8010910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010912:	695b      	ldr	r3, [r3, #20]
 8010914:	431a      	orrs	r2, r3
 8010916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010918:	69db      	ldr	r3, [r3, #28]
 801091a:	4313      	orrs	r3, r2
 801091c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801091e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010928:	f021 010c 	bic.w	r1, r1, #12
 801092c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010932:	430b      	orrs	r3, r1
 8010934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	695b      	ldr	r3, [r3, #20]
 801093c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010942:	6999      	ldr	r1, [r3, #24]
 8010944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	ea40 0301 	orr.w	r3, r0, r1
 801094c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801094e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	4bc5      	ldr	r3, [pc, #788]	; (8010c68 <UART_SetConfig+0x384>)
 8010954:	429a      	cmp	r2, r3
 8010956:	d004      	beq.n	8010962 <UART_SetConfig+0x7e>
 8010958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	4bc3      	ldr	r3, [pc, #780]	; (8010c6c <UART_SetConfig+0x388>)
 801095e:	429a      	cmp	r2, r3
 8010960:	d103      	bne.n	801096a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010962:	f7fe f865 	bl	800ea30 <HAL_RCC_GetPCLK2Freq>
 8010966:	6778      	str	r0, [r7, #116]	; 0x74
 8010968:	e002      	b.n	8010970 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801096a:	f7fe f84d 	bl	800ea08 <HAL_RCC_GetPCLK1Freq>
 801096e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010978:	f040 80b6 	bne.w	8010ae8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801097c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801097e:	461c      	mov	r4, r3
 8010980:	f04f 0500 	mov.w	r5, #0
 8010984:	4622      	mov	r2, r4
 8010986:	462b      	mov	r3, r5
 8010988:	1891      	adds	r1, r2, r2
 801098a:	6439      	str	r1, [r7, #64]	; 0x40
 801098c:	415b      	adcs	r3, r3
 801098e:	647b      	str	r3, [r7, #68]	; 0x44
 8010990:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010994:	1912      	adds	r2, r2, r4
 8010996:	eb45 0303 	adc.w	r3, r5, r3
 801099a:	f04f 0000 	mov.w	r0, #0
 801099e:	f04f 0100 	mov.w	r1, #0
 80109a2:	00d9      	lsls	r1, r3, #3
 80109a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80109a8:	00d0      	lsls	r0, r2, #3
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	1911      	adds	r1, r2, r4
 80109b0:	6639      	str	r1, [r7, #96]	; 0x60
 80109b2:	416b      	adcs	r3, r5
 80109b4:	667b      	str	r3, [r7, #100]	; 0x64
 80109b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	461a      	mov	r2, r3
 80109bc:	f04f 0300 	mov.w	r3, #0
 80109c0:	1891      	adds	r1, r2, r2
 80109c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80109c4:	415b      	adcs	r3, r3
 80109c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80109cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80109d0:	f7f0 f972 	bl	8000cb8 <__aeabi_uldivmod>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	4ba5      	ldr	r3, [pc, #660]	; (8010c70 <UART_SetConfig+0x38c>)
 80109da:	fba3 2302 	umull	r2, r3, r3, r2
 80109de:	095b      	lsrs	r3, r3, #5
 80109e0:	011e      	lsls	r6, r3, #4
 80109e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e4:	461c      	mov	r4, r3
 80109e6:	f04f 0500 	mov.w	r5, #0
 80109ea:	4622      	mov	r2, r4
 80109ec:	462b      	mov	r3, r5
 80109ee:	1891      	adds	r1, r2, r2
 80109f0:	6339      	str	r1, [r7, #48]	; 0x30
 80109f2:	415b      	adcs	r3, r3
 80109f4:	637b      	str	r3, [r7, #52]	; 0x34
 80109f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80109fa:	1912      	adds	r2, r2, r4
 80109fc:	eb45 0303 	adc.w	r3, r5, r3
 8010a00:	f04f 0000 	mov.w	r0, #0
 8010a04:	f04f 0100 	mov.w	r1, #0
 8010a08:	00d9      	lsls	r1, r3, #3
 8010a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010a0e:	00d0      	lsls	r0, r2, #3
 8010a10:	4602      	mov	r2, r0
 8010a12:	460b      	mov	r3, r1
 8010a14:	1911      	adds	r1, r2, r4
 8010a16:	65b9      	str	r1, [r7, #88]	; 0x58
 8010a18:	416b      	adcs	r3, r5
 8010a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	461a      	mov	r2, r3
 8010a22:	f04f 0300 	mov.w	r3, #0
 8010a26:	1891      	adds	r1, r2, r2
 8010a28:	62b9      	str	r1, [r7, #40]	; 0x28
 8010a2a:	415b      	adcs	r3, r3
 8010a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010a32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010a36:	f7f0 f93f 	bl	8000cb8 <__aeabi_uldivmod>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	4b8c      	ldr	r3, [pc, #560]	; (8010c70 <UART_SetConfig+0x38c>)
 8010a40:	fba3 1302 	umull	r1, r3, r3, r2
 8010a44:	095b      	lsrs	r3, r3, #5
 8010a46:	2164      	movs	r1, #100	; 0x64
 8010a48:	fb01 f303 	mul.w	r3, r1, r3
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	00db      	lsls	r3, r3, #3
 8010a50:	3332      	adds	r3, #50	; 0x32
 8010a52:	4a87      	ldr	r2, [pc, #540]	; (8010c70 <UART_SetConfig+0x38c>)
 8010a54:	fba2 2303 	umull	r2, r3, r2, r3
 8010a58:	095b      	lsrs	r3, r3, #5
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010a60:	441e      	add	r6, r3
 8010a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a64:	4618      	mov	r0, r3
 8010a66:	f04f 0100 	mov.w	r1, #0
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	1894      	adds	r4, r2, r2
 8010a70:	623c      	str	r4, [r7, #32]
 8010a72:	415b      	adcs	r3, r3
 8010a74:	627b      	str	r3, [r7, #36]	; 0x24
 8010a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010a7a:	1812      	adds	r2, r2, r0
 8010a7c:	eb41 0303 	adc.w	r3, r1, r3
 8010a80:	f04f 0400 	mov.w	r4, #0
 8010a84:	f04f 0500 	mov.w	r5, #0
 8010a88:	00dd      	lsls	r5, r3, #3
 8010a8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010a8e:	00d4      	lsls	r4, r2, #3
 8010a90:	4622      	mov	r2, r4
 8010a92:	462b      	mov	r3, r5
 8010a94:	1814      	adds	r4, r2, r0
 8010a96:	653c      	str	r4, [r7, #80]	; 0x50
 8010a98:	414b      	adcs	r3, r1
 8010a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8010a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	f04f 0300 	mov.w	r3, #0
 8010aa6:	1891      	adds	r1, r2, r2
 8010aa8:	61b9      	str	r1, [r7, #24]
 8010aaa:	415b      	adcs	r3, r3
 8010aac:	61fb      	str	r3, [r7, #28]
 8010aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010ab2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010ab6:	f7f0 f8ff 	bl	8000cb8 <__aeabi_uldivmod>
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	4b6c      	ldr	r3, [pc, #432]	; (8010c70 <UART_SetConfig+0x38c>)
 8010ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8010ac4:	095b      	lsrs	r3, r3, #5
 8010ac6:	2164      	movs	r1, #100	; 0x64
 8010ac8:	fb01 f303 	mul.w	r3, r1, r3
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	3332      	adds	r3, #50	; 0x32
 8010ad2:	4a67      	ldr	r2, [pc, #412]	; (8010c70 <UART_SetConfig+0x38c>)
 8010ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ad8:	095b      	lsrs	r3, r3, #5
 8010ada:	f003 0207 	and.w	r2, r3, #7
 8010ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4432      	add	r2, r6
 8010ae4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010ae6:	e0b9      	b.n	8010c5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010aea:	461c      	mov	r4, r3
 8010aec:	f04f 0500 	mov.w	r5, #0
 8010af0:	4622      	mov	r2, r4
 8010af2:	462b      	mov	r3, r5
 8010af4:	1891      	adds	r1, r2, r2
 8010af6:	6139      	str	r1, [r7, #16]
 8010af8:	415b      	adcs	r3, r3
 8010afa:	617b      	str	r3, [r7, #20]
 8010afc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010b00:	1912      	adds	r2, r2, r4
 8010b02:	eb45 0303 	adc.w	r3, r5, r3
 8010b06:	f04f 0000 	mov.w	r0, #0
 8010b0a:	f04f 0100 	mov.w	r1, #0
 8010b0e:	00d9      	lsls	r1, r3, #3
 8010b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010b14:	00d0      	lsls	r0, r2, #3
 8010b16:	4602      	mov	r2, r0
 8010b18:	460b      	mov	r3, r1
 8010b1a:	eb12 0804 	adds.w	r8, r2, r4
 8010b1e:	eb43 0905 	adc.w	r9, r3, r5
 8010b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f04f 0100 	mov.w	r1, #0
 8010b2c:	f04f 0200 	mov.w	r2, #0
 8010b30:	f04f 0300 	mov.w	r3, #0
 8010b34:	008b      	lsls	r3, r1, #2
 8010b36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010b3a:	0082      	lsls	r2, r0, #2
 8010b3c:	4640      	mov	r0, r8
 8010b3e:	4649      	mov	r1, r9
 8010b40:	f7f0 f8ba 	bl	8000cb8 <__aeabi_uldivmod>
 8010b44:	4602      	mov	r2, r0
 8010b46:	460b      	mov	r3, r1
 8010b48:	4b49      	ldr	r3, [pc, #292]	; (8010c70 <UART_SetConfig+0x38c>)
 8010b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8010b4e:	095b      	lsrs	r3, r3, #5
 8010b50:	011e      	lsls	r6, r3, #4
 8010b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b54:	4618      	mov	r0, r3
 8010b56:	f04f 0100 	mov.w	r1, #0
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	1894      	adds	r4, r2, r2
 8010b60:	60bc      	str	r4, [r7, #8]
 8010b62:	415b      	adcs	r3, r3
 8010b64:	60fb      	str	r3, [r7, #12]
 8010b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010b6a:	1812      	adds	r2, r2, r0
 8010b6c:	eb41 0303 	adc.w	r3, r1, r3
 8010b70:	f04f 0400 	mov.w	r4, #0
 8010b74:	f04f 0500 	mov.w	r5, #0
 8010b78:	00dd      	lsls	r5, r3, #3
 8010b7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010b7e:	00d4      	lsls	r4, r2, #3
 8010b80:	4622      	mov	r2, r4
 8010b82:	462b      	mov	r3, r5
 8010b84:	1814      	adds	r4, r2, r0
 8010b86:	64bc      	str	r4, [r7, #72]	; 0x48
 8010b88:	414b      	adcs	r3, r1
 8010b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f04f 0100 	mov.w	r1, #0
 8010b96:	f04f 0200 	mov.w	r2, #0
 8010b9a:	f04f 0300 	mov.w	r3, #0
 8010b9e:	008b      	lsls	r3, r1, #2
 8010ba0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010ba4:	0082      	lsls	r2, r0, #2
 8010ba6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010baa:	f7f0 f885 	bl	8000cb8 <__aeabi_uldivmod>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	4b2f      	ldr	r3, [pc, #188]	; (8010c70 <UART_SetConfig+0x38c>)
 8010bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8010bb8:	095b      	lsrs	r3, r3, #5
 8010bba:	2164      	movs	r1, #100	; 0x64
 8010bbc:	fb01 f303 	mul.w	r3, r1, r3
 8010bc0:	1ad3      	subs	r3, r2, r3
 8010bc2:	011b      	lsls	r3, r3, #4
 8010bc4:	3332      	adds	r3, #50	; 0x32
 8010bc6:	4a2a      	ldr	r2, [pc, #168]	; (8010c70 <UART_SetConfig+0x38c>)
 8010bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8010bcc:	095b      	lsrs	r3, r3, #5
 8010bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bd2:	441e      	add	r6, r3
 8010bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f04f 0100 	mov.w	r1, #0
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	1894      	adds	r4, r2, r2
 8010be2:	603c      	str	r4, [r7, #0]
 8010be4:	415b      	adcs	r3, r3
 8010be6:	607b      	str	r3, [r7, #4]
 8010be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bec:	1812      	adds	r2, r2, r0
 8010bee:	eb41 0303 	adc.w	r3, r1, r3
 8010bf2:	f04f 0400 	mov.w	r4, #0
 8010bf6:	f04f 0500 	mov.w	r5, #0
 8010bfa:	00dd      	lsls	r5, r3, #3
 8010bfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010c00:	00d4      	lsls	r4, r2, #3
 8010c02:	4622      	mov	r2, r4
 8010c04:	462b      	mov	r3, r5
 8010c06:	eb12 0a00 	adds.w	sl, r2, r0
 8010c0a:	eb43 0b01 	adc.w	fp, r3, r1
 8010c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	4618      	mov	r0, r3
 8010c14:	f04f 0100 	mov.w	r1, #0
 8010c18:	f04f 0200 	mov.w	r2, #0
 8010c1c:	f04f 0300 	mov.w	r3, #0
 8010c20:	008b      	lsls	r3, r1, #2
 8010c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010c26:	0082      	lsls	r2, r0, #2
 8010c28:	4650      	mov	r0, sl
 8010c2a:	4659      	mov	r1, fp
 8010c2c:	f7f0 f844 	bl	8000cb8 <__aeabi_uldivmod>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	4b0e      	ldr	r3, [pc, #56]	; (8010c70 <UART_SetConfig+0x38c>)
 8010c36:	fba3 1302 	umull	r1, r3, r3, r2
 8010c3a:	095b      	lsrs	r3, r3, #5
 8010c3c:	2164      	movs	r1, #100	; 0x64
 8010c3e:	fb01 f303 	mul.w	r3, r1, r3
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	011b      	lsls	r3, r3, #4
 8010c46:	3332      	adds	r3, #50	; 0x32
 8010c48:	4a09      	ldr	r2, [pc, #36]	; (8010c70 <UART_SetConfig+0x38c>)
 8010c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c4e:	095b      	lsrs	r3, r3, #5
 8010c50:	f003 020f 	and.w	r2, r3, #15
 8010c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4432      	add	r2, r6
 8010c5a:	609a      	str	r2, [r3, #8]
}
 8010c5c:	bf00      	nop
 8010c5e:	377c      	adds	r7, #124	; 0x7c
 8010c60:	46bd      	mov	sp, r7
 8010c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c66:	bf00      	nop
 8010c68:	40011000 	.word	0x40011000
 8010c6c:	40011400 	.word	0x40011400
 8010c70:	51eb851f 	.word	0x51eb851f

08010c74 <atof>:
 8010c74:	2100      	movs	r1, #0
 8010c76:	f001 bd03 	b.w	8012680 <strtod>

08010c7a <atoi>:
 8010c7a:	220a      	movs	r2, #10
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	f001 bded 	b.w	801285c <strtol>
	...

08010c84 <__errno>:
 8010c84:	4b01      	ldr	r3, [pc, #4]	; (8010c8c <__errno+0x8>)
 8010c86:	6818      	ldr	r0, [r3, #0]
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	20000040 	.word	0x20000040

08010c90 <__libc_init_array>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	4d0d      	ldr	r5, [pc, #52]	; (8010cc8 <__libc_init_array+0x38>)
 8010c94:	4c0d      	ldr	r4, [pc, #52]	; (8010ccc <__libc_init_array+0x3c>)
 8010c96:	1b64      	subs	r4, r4, r5
 8010c98:	10a4      	asrs	r4, r4, #2
 8010c9a:	2600      	movs	r6, #0
 8010c9c:	42a6      	cmp	r6, r4
 8010c9e:	d109      	bne.n	8010cb4 <__libc_init_array+0x24>
 8010ca0:	4d0b      	ldr	r5, [pc, #44]	; (8010cd0 <__libc_init_array+0x40>)
 8010ca2:	4c0c      	ldr	r4, [pc, #48]	; (8010cd4 <__libc_init_array+0x44>)
 8010ca4:	f004 fcb6 	bl	8015614 <_init>
 8010ca8:	1b64      	subs	r4, r4, r5
 8010caa:	10a4      	asrs	r4, r4, #2
 8010cac:	2600      	movs	r6, #0
 8010cae:	42a6      	cmp	r6, r4
 8010cb0:	d105      	bne.n	8010cbe <__libc_init_array+0x2e>
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cb8:	4798      	blx	r3
 8010cba:	3601      	adds	r6, #1
 8010cbc:	e7ee      	b.n	8010c9c <__libc_init_array+0xc>
 8010cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cc2:	4798      	blx	r3
 8010cc4:	3601      	adds	r6, #1
 8010cc6:	e7f2      	b.n	8010cae <__libc_init_array+0x1e>
 8010cc8:	080295d0 	.word	0x080295d0
 8010ccc:	080295d0 	.word	0x080295d0
 8010cd0:	080295d0 	.word	0x080295d0
 8010cd4:	080295d4 	.word	0x080295d4

08010cd8 <memset>:
 8010cd8:	4402      	add	r2, r0
 8010cda:	4603      	mov	r3, r0
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d100      	bne.n	8010ce2 <memset+0xa>
 8010ce0:	4770      	bx	lr
 8010ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8010ce6:	e7f9      	b.n	8010cdc <memset+0x4>

08010ce8 <__cvt>:
 8010ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cec:	ec55 4b10 	vmov	r4, r5, d0
 8010cf0:	2d00      	cmp	r5, #0
 8010cf2:	460e      	mov	r6, r1
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	462b      	mov	r3, r5
 8010cf8:	bfbb      	ittet	lt
 8010cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010cfe:	461d      	movlt	r5, r3
 8010d00:	2300      	movge	r3, #0
 8010d02:	232d      	movlt	r3, #45	; 0x2d
 8010d04:	700b      	strb	r3, [r1, #0]
 8010d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d0c:	4691      	mov	r9, r2
 8010d0e:	f023 0820 	bic.w	r8, r3, #32
 8010d12:	bfbc      	itt	lt
 8010d14:	4622      	movlt	r2, r4
 8010d16:	4614      	movlt	r4, r2
 8010d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d1c:	d005      	beq.n	8010d2a <__cvt+0x42>
 8010d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010d22:	d100      	bne.n	8010d26 <__cvt+0x3e>
 8010d24:	3601      	adds	r6, #1
 8010d26:	2102      	movs	r1, #2
 8010d28:	e000      	b.n	8010d2c <__cvt+0x44>
 8010d2a:	2103      	movs	r1, #3
 8010d2c:	ab03      	add	r3, sp, #12
 8010d2e:	9301      	str	r3, [sp, #4]
 8010d30:	ab02      	add	r3, sp, #8
 8010d32:	9300      	str	r3, [sp, #0]
 8010d34:	ec45 4b10 	vmov	d0, r4, r5
 8010d38:	4653      	mov	r3, sl
 8010d3a:	4632      	mov	r2, r6
 8010d3c:	f001 fe44 	bl	80129c8 <_dtoa_r>
 8010d40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d44:	4607      	mov	r7, r0
 8010d46:	d102      	bne.n	8010d4e <__cvt+0x66>
 8010d48:	f019 0f01 	tst.w	r9, #1
 8010d4c:	d022      	beq.n	8010d94 <__cvt+0xac>
 8010d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d52:	eb07 0906 	add.w	r9, r7, r6
 8010d56:	d110      	bne.n	8010d7a <__cvt+0x92>
 8010d58:	783b      	ldrb	r3, [r7, #0]
 8010d5a:	2b30      	cmp	r3, #48	; 0x30
 8010d5c:	d10a      	bne.n	8010d74 <__cvt+0x8c>
 8010d5e:	2200      	movs	r2, #0
 8010d60:	2300      	movs	r3, #0
 8010d62:	4620      	mov	r0, r4
 8010d64:	4629      	mov	r1, r5
 8010d66:	f7ef fec7 	bl	8000af8 <__aeabi_dcmpeq>
 8010d6a:	b918      	cbnz	r0, 8010d74 <__cvt+0x8c>
 8010d6c:	f1c6 0601 	rsb	r6, r6, #1
 8010d70:	f8ca 6000 	str.w	r6, [sl]
 8010d74:	f8da 3000 	ldr.w	r3, [sl]
 8010d78:	4499      	add	r9, r3
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4620      	mov	r0, r4
 8010d80:	4629      	mov	r1, r5
 8010d82:	f7ef feb9 	bl	8000af8 <__aeabi_dcmpeq>
 8010d86:	b108      	cbz	r0, 8010d8c <__cvt+0xa4>
 8010d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d8c:	2230      	movs	r2, #48	; 0x30
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	454b      	cmp	r3, r9
 8010d92:	d307      	bcc.n	8010da4 <__cvt+0xbc>
 8010d94:	9b03      	ldr	r3, [sp, #12]
 8010d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d98:	1bdb      	subs	r3, r3, r7
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	6013      	str	r3, [r2, #0]
 8010d9e:	b004      	add	sp, #16
 8010da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da4:	1c59      	adds	r1, r3, #1
 8010da6:	9103      	str	r1, [sp, #12]
 8010da8:	701a      	strb	r2, [r3, #0]
 8010daa:	e7f0      	b.n	8010d8e <__cvt+0xa6>

08010dac <__exponent>:
 8010dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dae:	4603      	mov	r3, r0
 8010db0:	2900      	cmp	r1, #0
 8010db2:	bfb8      	it	lt
 8010db4:	4249      	neglt	r1, r1
 8010db6:	f803 2b02 	strb.w	r2, [r3], #2
 8010dba:	bfb4      	ite	lt
 8010dbc:	222d      	movlt	r2, #45	; 0x2d
 8010dbe:	222b      	movge	r2, #43	; 0x2b
 8010dc0:	2909      	cmp	r1, #9
 8010dc2:	7042      	strb	r2, [r0, #1]
 8010dc4:	dd2a      	ble.n	8010e1c <__exponent+0x70>
 8010dc6:	f10d 0407 	add.w	r4, sp, #7
 8010dca:	46a4      	mov	ip, r4
 8010dcc:	270a      	movs	r7, #10
 8010dce:	46a6      	mov	lr, r4
 8010dd0:	460a      	mov	r2, r1
 8010dd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8010dd6:	fb07 1516 	mls	r5, r7, r6, r1
 8010dda:	3530      	adds	r5, #48	; 0x30
 8010ddc:	2a63      	cmp	r2, #99	; 0x63
 8010dde:	f104 34ff 	add.w	r4, r4, #4294967295
 8010de2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010de6:	4631      	mov	r1, r6
 8010de8:	dcf1      	bgt.n	8010dce <__exponent+0x22>
 8010dea:	3130      	adds	r1, #48	; 0x30
 8010dec:	f1ae 0502 	sub.w	r5, lr, #2
 8010df0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010df4:	1c44      	adds	r4, r0, #1
 8010df6:	4629      	mov	r1, r5
 8010df8:	4561      	cmp	r1, ip
 8010dfa:	d30a      	bcc.n	8010e12 <__exponent+0x66>
 8010dfc:	f10d 0209 	add.w	r2, sp, #9
 8010e00:	eba2 020e 	sub.w	r2, r2, lr
 8010e04:	4565      	cmp	r5, ip
 8010e06:	bf88      	it	hi
 8010e08:	2200      	movhi	r2, #0
 8010e0a:	4413      	add	r3, r2
 8010e0c:	1a18      	subs	r0, r3, r0
 8010e0e:	b003      	add	sp, #12
 8010e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e1a:	e7ed      	b.n	8010df8 <__exponent+0x4c>
 8010e1c:	2330      	movs	r3, #48	; 0x30
 8010e1e:	3130      	adds	r1, #48	; 0x30
 8010e20:	7083      	strb	r3, [r0, #2]
 8010e22:	70c1      	strb	r1, [r0, #3]
 8010e24:	1d03      	adds	r3, r0, #4
 8010e26:	e7f1      	b.n	8010e0c <__exponent+0x60>

08010e28 <_printf_float>:
 8010e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2c:	ed2d 8b02 	vpush	{d8}
 8010e30:	b08d      	sub	sp, #52	; 0x34
 8010e32:	460c      	mov	r4, r1
 8010e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010e38:	4616      	mov	r6, r2
 8010e3a:	461f      	mov	r7, r3
 8010e3c:	4605      	mov	r5, r0
 8010e3e:	f002 ff31 	bl	8013ca4 <_localeconv_r>
 8010e42:	f8d0 a000 	ldr.w	sl, [r0]
 8010e46:	4650      	mov	r0, sl
 8010e48:	f7ef f9d4 	bl	80001f4 <strlen>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	9305      	str	r3, [sp, #20]
 8010e54:	f8d8 3000 	ldr.w	r3, [r8]
 8010e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e5c:	3307      	adds	r3, #7
 8010e5e:	f023 0307 	bic.w	r3, r3, #7
 8010e62:	f103 0208 	add.w	r2, r3, #8
 8010e66:	f8c8 2000 	str.w	r2, [r8]
 8010e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010e72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e7a:	9307      	str	r3, [sp, #28]
 8010e7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e80:	ee08 0a10 	vmov	s16, r0
 8010e84:	4b9f      	ldr	r3, [pc, #636]	; (8011104 <_printf_float+0x2dc>)
 8010e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e8e:	f7ef fe65 	bl	8000b5c <__aeabi_dcmpun>
 8010e92:	bb88      	cbnz	r0, 8010ef8 <_printf_float+0xd0>
 8010e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e98:	4b9a      	ldr	r3, [pc, #616]	; (8011104 <_printf_float+0x2dc>)
 8010e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e9e:	f7ef fe3f 	bl	8000b20 <__aeabi_dcmple>
 8010ea2:	bb48      	cbnz	r0, 8010ef8 <_printf_float+0xd0>
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	4640      	mov	r0, r8
 8010eaa:	4649      	mov	r1, r9
 8010eac:	f7ef fe2e 	bl	8000b0c <__aeabi_dcmplt>
 8010eb0:	b110      	cbz	r0, 8010eb8 <_printf_float+0x90>
 8010eb2:	232d      	movs	r3, #45	; 0x2d
 8010eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010eb8:	4b93      	ldr	r3, [pc, #588]	; (8011108 <_printf_float+0x2e0>)
 8010eba:	4894      	ldr	r0, [pc, #592]	; (801110c <_printf_float+0x2e4>)
 8010ebc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010ec0:	bf94      	ite	ls
 8010ec2:	4698      	movls	r8, r3
 8010ec4:	4680      	movhi	r8, r0
 8010ec6:	2303      	movs	r3, #3
 8010ec8:	6123      	str	r3, [r4, #16]
 8010eca:	9b05      	ldr	r3, [sp, #20]
 8010ecc:	f023 0204 	bic.w	r2, r3, #4
 8010ed0:	6022      	str	r2, [r4, #0]
 8010ed2:	f04f 0900 	mov.w	r9, #0
 8010ed6:	9700      	str	r7, [sp, #0]
 8010ed8:	4633      	mov	r3, r6
 8010eda:	aa0b      	add	r2, sp, #44	; 0x2c
 8010edc:	4621      	mov	r1, r4
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f000 f9d8 	bl	8011294 <_printf_common>
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	f040 8090 	bne.w	801100a <_printf_float+0x1e2>
 8010eea:	f04f 30ff 	mov.w	r0, #4294967295
 8010eee:	b00d      	add	sp, #52	; 0x34
 8010ef0:	ecbd 8b02 	vpop	{d8}
 8010ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef8:	4642      	mov	r2, r8
 8010efa:	464b      	mov	r3, r9
 8010efc:	4640      	mov	r0, r8
 8010efe:	4649      	mov	r1, r9
 8010f00:	f7ef fe2c 	bl	8000b5c <__aeabi_dcmpun>
 8010f04:	b140      	cbz	r0, 8010f18 <_printf_float+0xf0>
 8010f06:	464b      	mov	r3, r9
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	bfbc      	itt	lt
 8010f0c:	232d      	movlt	r3, #45	; 0x2d
 8010f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f12:	487f      	ldr	r0, [pc, #508]	; (8011110 <_printf_float+0x2e8>)
 8010f14:	4b7f      	ldr	r3, [pc, #508]	; (8011114 <_printf_float+0x2ec>)
 8010f16:	e7d1      	b.n	8010ebc <_printf_float+0x94>
 8010f18:	6863      	ldr	r3, [r4, #4]
 8010f1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010f1e:	9206      	str	r2, [sp, #24]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	d13f      	bne.n	8010fa4 <_printf_float+0x17c>
 8010f24:	2306      	movs	r3, #6
 8010f26:	6063      	str	r3, [r4, #4]
 8010f28:	9b05      	ldr	r3, [sp, #20]
 8010f2a:	6861      	ldr	r1, [r4, #4]
 8010f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010f30:	2300      	movs	r3, #0
 8010f32:	9303      	str	r3, [sp, #12]
 8010f34:	ab0a      	add	r3, sp, #40	; 0x28
 8010f36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010f3a:	ab09      	add	r3, sp, #36	; 0x24
 8010f3c:	ec49 8b10 	vmov	d0, r8, r9
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	6022      	str	r2, [r4, #0]
 8010f44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f48:	4628      	mov	r0, r5
 8010f4a:	f7ff fecd 	bl	8010ce8 <__cvt>
 8010f4e:	9b06      	ldr	r3, [sp, #24]
 8010f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f52:	2b47      	cmp	r3, #71	; 0x47
 8010f54:	4680      	mov	r8, r0
 8010f56:	d108      	bne.n	8010f6a <_printf_float+0x142>
 8010f58:	1cc8      	adds	r0, r1, #3
 8010f5a:	db02      	blt.n	8010f62 <_printf_float+0x13a>
 8010f5c:	6863      	ldr	r3, [r4, #4]
 8010f5e:	4299      	cmp	r1, r3
 8010f60:	dd41      	ble.n	8010fe6 <_printf_float+0x1be>
 8010f62:	f1ab 0b02 	sub.w	fp, fp, #2
 8010f66:	fa5f fb8b 	uxtb.w	fp, fp
 8010f6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f6e:	d820      	bhi.n	8010fb2 <_printf_float+0x18a>
 8010f70:	3901      	subs	r1, #1
 8010f72:	465a      	mov	r2, fp
 8010f74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f78:	9109      	str	r1, [sp, #36]	; 0x24
 8010f7a:	f7ff ff17 	bl	8010dac <__exponent>
 8010f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f80:	1813      	adds	r3, r2, r0
 8010f82:	2a01      	cmp	r2, #1
 8010f84:	4681      	mov	r9, r0
 8010f86:	6123      	str	r3, [r4, #16]
 8010f88:	dc02      	bgt.n	8010f90 <_printf_float+0x168>
 8010f8a:	6822      	ldr	r2, [r4, #0]
 8010f8c:	07d2      	lsls	r2, r2, #31
 8010f8e:	d501      	bpl.n	8010f94 <_printf_float+0x16c>
 8010f90:	3301      	adds	r3, #1
 8010f92:	6123      	str	r3, [r4, #16]
 8010f94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d09c      	beq.n	8010ed6 <_printf_float+0xae>
 8010f9c:	232d      	movs	r3, #45	; 0x2d
 8010f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fa2:	e798      	b.n	8010ed6 <_printf_float+0xae>
 8010fa4:	9a06      	ldr	r2, [sp, #24]
 8010fa6:	2a47      	cmp	r2, #71	; 0x47
 8010fa8:	d1be      	bne.n	8010f28 <_printf_float+0x100>
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1bc      	bne.n	8010f28 <_printf_float+0x100>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e7b9      	b.n	8010f26 <_printf_float+0xfe>
 8010fb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010fb6:	d118      	bne.n	8010fea <_printf_float+0x1c2>
 8010fb8:	2900      	cmp	r1, #0
 8010fba:	6863      	ldr	r3, [r4, #4]
 8010fbc:	dd0b      	ble.n	8010fd6 <_printf_float+0x1ae>
 8010fbe:	6121      	str	r1, [r4, #16]
 8010fc0:	b913      	cbnz	r3, 8010fc8 <_printf_float+0x1a0>
 8010fc2:	6822      	ldr	r2, [r4, #0]
 8010fc4:	07d0      	lsls	r0, r2, #31
 8010fc6:	d502      	bpl.n	8010fce <_printf_float+0x1a6>
 8010fc8:	3301      	adds	r3, #1
 8010fca:	440b      	add	r3, r1
 8010fcc:	6123      	str	r3, [r4, #16]
 8010fce:	65a1      	str	r1, [r4, #88]	; 0x58
 8010fd0:	f04f 0900 	mov.w	r9, #0
 8010fd4:	e7de      	b.n	8010f94 <_printf_float+0x16c>
 8010fd6:	b913      	cbnz	r3, 8010fde <_printf_float+0x1b6>
 8010fd8:	6822      	ldr	r2, [r4, #0]
 8010fda:	07d2      	lsls	r2, r2, #31
 8010fdc:	d501      	bpl.n	8010fe2 <_printf_float+0x1ba>
 8010fde:	3302      	adds	r3, #2
 8010fe0:	e7f4      	b.n	8010fcc <_printf_float+0x1a4>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e7f2      	b.n	8010fcc <_printf_float+0x1a4>
 8010fe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fec:	4299      	cmp	r1, r3
 8010fee:	db05      	blt.n	8010ffc <_printf_float+0x1d4>
 8010ff0:	6823      	ldr	r3, [r4, #0]
 8010ff2:	6121      	str	r1, [r4, #16]
 8010ff4:	07d8      	lsls	r0, r3, #31
 8010ff6:	d5ea      	bpl.n	8010fce <_printf_float+0x1a6>
 8010ff8:	1c4b      	adds	r3, r1, #1
 8010ffa:	e7e7      	b.n	8010fcc <_printf_float+0x1a4>
 8010ffc:	2900      	cmp	r1, #0
 8010ffe:	bfd4      	ite	le
 8011000:	f1c1 0202 	rsble	r2, r1, #2
 8011004:	2201      	movgt	r2, #1
 8011006:	4413      	add	r3, r2
 8011008:	e7e0      	b.n	8010fcc <_printf_float+0x1a4>
 801100a:	6823      	ldr	r3, [r4, #0]
 801100c:	055a      	lsls	r2, r3, #21
 801100e:	d407      	bmi.n	8011020 <_printf_float+0x1f8>
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	4642      	mov	r2, r8
 8011014:	4631      	mov	r1, r6
 8011016:	4628      	mov	r0, r5
 8011018:	47b8      	blx	r7
 801101a:	3001      	adds	r0, #1
 801101c:	d12c      	bne.n	8011078 <_printf_float+0x250>
 801101e:	e764      	b.n	8010eea <_printf_float+0xc2>
 8011020:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011024:	f240 80e0 	bls.w	80111e8 <_printf_float+0x3c0>
 8011028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801102c:	2200      	movs	r2, #0
 801102e:	2300      	movs	r3, #0
 8011030:	f7ef fd62 	bl	8000af8 <__aeabi_dcmpeq>
 8011034:	2800      	cmp	r0, #0
 8011036:	d034      	beq.n	80110a2 <_printf_float+0x27a>
 8011038:	4a37      	ldr	r2, [pc, #220]	; (8011118 <_printf_float+0x2f0>)
 801103a:	2301      	movs	r3, #1
 801103c:	4631      	mov	r1, r6
 801103e:	4628      	mov	r0, r5
 8011040:	47b8      	blx	r7
 8011042:	3001      	adds	r0, #1
 8011044:	f43f af51 	beq.w	8010eea <_printf_float+0xc2>
 8011048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801104c:	429a      	cmp	r2, r3
 801104e:	db02      	blt.n	8011056 <_printf_float+0x22e>
 8011050:	6823      	ldr	r3, [r4, #0]
 8011052:	07d8      	lsls	r0, r3, #31
 8011054:	d510      	bpl.n	8011078 <_printf_float+0x250>
 8011056:	ee18 3a10 	vmov	r3, s16
 801105a:	4652      	mov	r2, sl
 801105c:	4631      	mov	r1, r6
 801105e:	4628      	mov	r0, r5
 8011060:	47b8      	blx	r7
 8011062:	3001      	adds	r0, #1
 8011064:	f43f af41 	beq.w	8010eea <_printf_float+0xc2>
 8011068:	f04f 0800 	mov.w	r8, #0
 801106c:	f104 091a 	add.w	r9, r4, #26
 8011070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011072:	3b01      	subs	r3, #1
 8011074:	4543      	cmp	r3, r8
 8011076:	dc09      	bgt.n	801108c <_printf_float+0x264>
 8011078:	6823      	ldr	r3, [r4, #0]
 801107a:	079b      	lsls	r3, r3, #30
 801107c:	f100 8105 	bmi.w	801128a <_printf_float+0x462>
 8011080:	68e0      	ldr	r0, [r4, #12]
 8011082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011084:	4298      	cmp	r0, r3
 8011086:	bfb8      	it	lt
 8011088:	4618      	movlt	r0, r3
 801108a:	e730      	b.n	8010eee <_printf_float+0xc6>
 801108c:	2301      	movs	r3, #1
 801108e:	464a      	mov	r2, r9
 8011090:	4631      	mov	r1, r6
 8011092:	4628      	mov	r0, r5
 8011094:	47b8      	blx	r7
 8011096:	3001      	adds	r0, #1
 8011098:	f43f af27 	beq.w	8010eea <_printf_float+0xc2>
 801109c:	f108 0801 	add.w	r8, r8, #1
 80110a0:	e7e6      	b.n	8011070 <_printf_float+0x248>
 80110a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	dc39      	bgt.n	801111c <_printf_float+0x2f4>
 80110a8:	4a1b      	ldr	r2, [pc, #108]	; (8011118 <_printf_float+0x2f0>)
 80110aa:	2301      	movs	r3, #1
 80110ac:	4631      	mov	r1, r6
 80110ae:	4628      	mov	r0, r5
 80110b0:	47b8      	blx	r7
 80110b2:	3001      	adds	r0, #1
 80110b4:	f43f af19 	beq.w	8010eea <_printf_float+0xc2>
 80110b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110bc:	4313      	orrs	r3, r2
 80110be:	d102      	bne.n	80110c6 <_printf_float+0x29e>
 80110c0:	6823      	ldr	r3, [r4, #0]
 80110c2:	07d9      	lsls	r1, r3, #31
 80110c4:	d5d8      	bpl.n	8011078 <_printf_float+0x250>
 80110c6:	ee18 3a10 	vmov	r3, s16
 80110ca:	4652      	mov	r2, sl
 80110cc:	4631      	mov	r1, r6
 80110ce:	4628      	mov	r0, r5
 80110d0:	47b8      	blx	r7
 80110d2:	3001      	adds	r0, #1
 80110d4:	f43f af09 	beq.w	8010eea <_printf_float+0xc2>
 80110d8:	f04f 0900 	mov.w	r9, #0
 80110dc:	f104 0a1a 	add.w	sl, r4, #26
 80110e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e2:	425b      	negs	r3, r3
 80110e4:	454b      	cmp	r3, r9
 80110e6:	dc01      	bgt.n	80110ec <_printf_float+0x2c4>
 80110e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ea:	e792      	b.n	8011012 <_printf_float+0x1ea>
 80110ec:	2301      	movs	r3, #1
 80110ee:	4652      	mov	r2, sl
 80110f0:	4631      	mov	r1, r6
 80110f2:	4628      	mov	r0, r5
 80110f4:	47b8      	blx	r7
 80110f6:	3001      	adds	r0, #1
 80110f8:	f43f aef7 	beq.w	8010eea <_printf_float+0xc2>
 80110fc:	f109 0901 	add.w	r9, r9, #1
 8011100:	e7ee      	b.n	80110e0 <_printf_float+0x2b8>
 8011102:	bf00      	nop
 8011104:	7fefffff 	.word	0x7fefffff
 8011108:	080290b8 	.word	0x080290b8
 801110c:	080290bc 	.word	0x080290bc
 8011110:	080290c4 	.word	0x080290c4
 8011114:	080290c0 	.word	0x080290c0
 8011118:	080290c8 	.word	0x080290c8
 801111c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801111e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011120:	429a      	cmp	r2, r3
 8011122:	bfa8      	it	ge
 8011124:	461a      	movge	r2, r3
 8011126:	2a00      	cmp	r2, #0
 8011128:	4691      	mov	r9, r2
 801112a:	dc37      	bgt.n	801119c <_printf_float+0x374>
 801112c:	f04f 0b00 	mov.w	fp, #0
 8011130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011134:	f104 021a 	add.w	r2, r4, #26
 8011138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801113a:	9305      	str	r3, [sp, #20]
 801113c:	eba3 0309 	sub.w	r3, r3, r9
 8011140:	455b      	cmp	r3, fp
 8011142:	dc33      	bgt.n	80111ac <_printf_float+0x384>
 8011144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011148:	429a      	cmp	r2, r3
 801114a:	db3b      	blt.n	80111c4 <_printf_float+0x39c>
 801114c:	6823      	ldr	r3, [r4, #0]
 801114e:	07da      	lsls	r2, r3, #31
 8011150:	d438      	bmi.n	80111c4 <_printf_float+0x39c>
 8011152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011154:	9b05      	ldr	r3, [sp, #20]
 8011156:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011158:	1ad3      	subs	r3, r2, r3
 801115a:	eba2 0901 	sub.w	r9, r2, r1
 801115e:	4599      	cmp	r9, r3
 8011160:	bfa8      	it	ge
 8011162:	4699      	movge	r9, r3
 8011164:	f1b9 0f00 	cmp.w	r9, #0
 8011168:	dc35      	bgt.n	80111d6 <_printf_float+0x3ae>
 801116a:	f04f 0800 	mov.w	r8, #0
 801116e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011172:	f104 0a1a 	add.w	sl, r4, #26
 8011176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801117a:	1a9b      	subs	r3, r3, r2
 801117c:	eba3 0309 	sub.w	r3, r3, r9
 8011180:	4543      	cmp	r3, r8
 8011182:	f77f af79 	ble.w	8011078 <_printf_float+0x250>
 8011186:	2301      	movs	r3, #1
 8011188:	4652      	mov	r2, sl
 801118a:	4631      	mov	r1, r6
 801118c:	4628      	mov	r0, r5
 801118e:	47b8      	blx	r7
 8011190:	3001      	adds	r0, #1
 8011192:	f43f aeaa 	beq.w	8010eea <_printf_float+0xc2>
 8011196:	f108 0801 	add.w	r8, r8, #1
 801119a:	e7ec      	b.n	8011176 <_printf_float+0x34e>
 801119c:	4613      	mov	r3, r2
 801119e:	4631      	mov	r1, r6
 80111a0:	4642      	mov	r2, r8
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b8      	blx	r7
 80111a6:	3001      	adds	r0, #1
 80111a8:	d1c0      	bne.n	801112c <_printf_float+0x304>
 80111aa:	e69e      	b.n	8010eea <_printf_float+0xc2>
 80111ac:	2301      	movs	r3, #1
 80111ae:	4631      	mov	r1, r6
 80111b0:	4628      	mov	r0, r5
 80111b2:	9205      	str	r2, [sp, #20]
 80111b4:	47b8      	blx	r7
 80111b6:	3001      	adds	r0, #1
 80111b8:	f43f ae97 	beq.w	8010eea <_printf_float+0xc2>
 80111bc:	9a05      	ldr	r2, [sp, #20]
 80111be:	f10b 0b01 	add.w	fp, fp, #1
 80111c2:	e7b9      	b.n	8011138 <_printf_float+0x310>
 80111c4:	ee18 3a10 	vmov	r3, s16
 80111c8:	4652      	mov	r2, sl
 80111ca:	4631      	mov	r1, r6
 80111cc:	4628      	mov	r0, r5
 80111ce:	47b8      	blx	r7
 80111d0:	3001      	adds	r0, #1
 80111d2:	d1be      	bne.n	8011152 <_printf_float+0x32a>
 80111d4:	e689      	b.n	8010eea <_printf_float+0xc2>
 80111d6:	9a05      	ldr	r2, [sp, #20]
 80111d8:	464b      	mov	r3, r9
 80111da:	4442      	add	r2, r8
 80111dc:	4631      	mov	r1, r6
 80111de:	4628      	mov	r0, r5
 80111e0:	47b8      	blx	r7
 80111e2:	3001      	adds	r0, #1
 80111e4:	d1c1      	bne.n	801116a <_printf_float+0x342>
 80111e6:	e680      	b.n	8010eea <_printf_float+0xc2>
 80111e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111ea:	2a01      	cmp	r2, #1
 80111ec:	dc01      	bgt.n	80111f2 <_printf_float+0x3ca>
 80111ee:	07db      	lsls	r3, r3, #31
 80111f0:	d538      	bpl.n	8011264 <_printf_float+0x43c>
 80111f2:	2301      	movs	r3, #1
 80111f4:	4642      	mov	r2, r8
 80111f6:	4631      	mov	r1, r6
 80111f8:	4628      	mov	r0, r5
 80111fa:	47b8      	blx	r7
 80111fc:	3001      	adds	r0, #1
 80111fe:	f43f ae74 	beq.w	8010eea <_printf_float+0xc2>
 8011202:	ee18 3a10 	vmov	r3, s16
 8011206:	4652      	mov	r2, sl
 8011208:	4631      	mov	r1, r6
 801120a:	4628      	mov	r0, r5
 801120c:	47b8      	blx	r7
 801120e:	3001      	adds	r0, #1
 8011210:	f43f ae6b 	beq.w	8010eea <_printf_float+0xc2>
 8011214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011218:	2200      	movs	r2, #0
 801121a:	2300      	movs	r3, #0
 801121c:	f7ef fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 8011220:	b9d8      	cbnz	r0, 801125a <_printf_float+0x432>
 8011222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011224:	f108 0201 	add.w	r2, r8, #1
 8011228:	3b01      	subs	r3, #1
 801122a:	4631      	mov	r1, r6
 801122c:	4628      	mov	r0, r5
 801122e:	47b8      	blx	r7
 8011230:	3001      	adds	r0, #1
 8011232:	d10e      	bne.n	8011252 <_printf_float+0x42a>
 8011234:	e659      	b.n	8010eea <_printf_float+0xc2>
 8011236:	2301      	movs	r3, #1
 8011238:	4652      	mov	r2, sl
 801123a:	4631      	mov	r1, r6
 801123c:	4628      	mov	r0, r5
 801123e:	47b8      	blx	r7
 8011240:	3001      	adds	r0, #1
 8011242:	f43f ae52 	beq.w	8010eea <_printf_float+0xc2>
 8011246:	f108 0801 	add.w	r8, r8, #1
 801124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801124c:	3b01      	subs	r3, #1
 801124e:	4543      	cmp	r3, r8
 8011250:	dcf1      	bgt.n	8011236 <_printf_float+0x40e>
 8011252:	464b      	mov	r3, r9
 8011254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011258:	e6dc      	b.n	8011014 <_printf_float+0x1ec>
 801125a:	f04f 0800 	mov.w	r8, #0
 801125e:	f104 0a1a 	add.w	sl, r4, #26
 8011262:	e7f2      	b.n	801124a <_printf_float+0x422>
 8011264:	2301      	movs	r3, #1
 8011266:	4642      	mov	r2, r8
 8011268:	e7df      	b.n	801122a <_printf_float+0x402>
 801126a:	2301      	movs	r3, #1
 801126c:	464a      	mov	r2, r9
 801126e:	4631      	mov	r1, r6
 8011270:	4628      	mov	r0, r5
 8011272:	47b8      	blx	r7
 8011274:	3001      	adds	r0, #1
 8011276:	f43f ae38 	beq.w	8010eea <_printf_float+0xc2>
 801127a:	f108 0801 	add.w	r8, r8, #1
 801127e:	68e3      	ldr	r3, [r4, #12]
 8011280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011282:	1a5b      	subs	r3, r3, r1
 8011284:	4543      	cmp	r3, r8
 8011286:	dcf0      	bgt.n	801126a <_printf_float+0x442>
 8011288:	e6fa      	b.n	8011080 <_printf_float+0x258>
 801128a:	f04f 0800 	mov.w	r8, #0
 801128e:	f104 0919 	add.w	r9, r4, #25
 8011292:	e7f4      	b.n	801127e <_printf_float+0x456>

08011294 <_printf_common>:
 8011294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011298:	4616      	mov	r6, r2
 801129a:	4699      	mov	r9, r3
 801129c:	688a      	ldr	r2, [r1, #8]
 801129e:	690b      	ldr	r3, [r1, #16]
 80112a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112a4:	4293      	cmp	r3, r2
 80112a6:	bfb8      	it	lt
 80112a8:	4613      	movlt	r3, r2
 80112aa:	6033      	str	r3, [r6, #0]
 80112ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80112b0:	4607      	mov	r7, r0
 80112b2:	460c      	mov	r4, r1
 80112b4:	b10a      	cbz	r2, 80112ba <_printf_common+0x26>
 80112b6:	3301      	adds	r3, #1
 80112b8:	6033      	str	r3, [r6, #0]
 80112ba:	6823      	ldr	r3, [r4, #0]
 80112bc:	0699      	lsls	r1, r3, #26
 80112be:	bf42      	ittt	mi
 80112c0:	6833      	ldrmi	r3, [r6, #0]
 80112c2:	3302      	addmi	r3, #2
 80112c4:	6033      	strmi	r3, [r6, #0]
 80112c6:	6825      	ldr	r5, [r4, #0]
 80112c8:	f015 0506 	ands.w	r5, r5, #6
 80112cc:	d106      	bne.n	80112dc <_printf_common+0x48>
 80112ce:	f104 0a19 	add.w	sl, r4, #25
 80112d2:	68e3      	ldr	r3, [r4, #12]
 80112d4:	6832      	ldr	r2, [r6, #0]
 80112d6:	1a9b      	subs	r3, r3, r2
 80112d8:	42ab      	cmp	r3, r5
 80112da:	dc26      	bgt.n	801132a <_printf_common+0x96>
 80112dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112e0:	1e13      	subs	r3, r2, #0
 80112e2:	6822      	ldr	r2, [r4, #0]
 80112e4:	bf18      	it	ne
 80112e6:	2301      	movne	r3, #1
 80112e8:	0692      	lsls	r2, r2, #26
 80112ea:	d42b      	bmi.n	8011344 <_printf_common+0xb0>
 80112ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112f0:	4649      	mov	r1, r9
 80112f2:	4638      	mov	r0, r7
 80112f4:	47c0      	blx	r8
 80112f6:	3001      	adds	r0, #1
 80112f8:	d01e      	beq.n	8011338 <_printf_common+0xa4>
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	68e5      	ldr	r5, [r4, #12]
 80112fe:	6832      	ldr	r2, [r6, #0]
 8011300:	f003 0306 	and.w	r3, r3, #6
 8011304:	2b04      	cmp	r3, #4
 8011306:	bf08      	it	eq
 8011308:	1aad      	subeq	r5, r5, r2
 801130a:	68a3      	ldr	r3, [r4, #8]
 801130c:	6922      	ldr	r2, [r4, #16]
 801130e:	bf0c      	ite	eq
 8011310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011314:	2500      	movne	r5, #0
 8011316:	4293      	cmp	r3, r2
 8011318:	bfc4      	itt	gt
 801131a:	1a9b      	subgt	r3, r3, r2
 801131c:	18ed      	addgt	r5, r5, r3
 801131e:	2600      	movs	r6, #0
 8011320:	341a      	adds	r4, #26
 8011322:	42b5      	cmp	r5, r6
 8011324:	d11a      	bne.n	801135c <_printf_common+0xc8>
 8011326:	2000      	movs	r0, #0
 8011328:	e008      	b.n	801133c <_printf_common+0xa8>
 801132a:	2301      	movs	r3, #1
 801132c:	4652      	mov	r2, sl
 801132e:	4649      	mov	r1, r9
 8011330:	4638      	mov	r0, r7
 8011332:	47c0      	blx	r8
 8011334:	3001      	adds	r0, #1
 8011336:	d103      	bne.n	8011340 <_printf_common+0xac>
 8011338:	f04f 30ff 	mov.w	r0, #4294967295
 801133c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011340:	3501      	adds	r5, #1
 8011342:	e7c6      	b.n	80112d2 <_printf_common+0x3e>
 8011344:	18e1      	adds	r1, r4, r3
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	2030      	movs	r0, #48	; 0x30
 801134a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801134e:	4422      	add	r2, r4
 8011350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011358:	3302      	adds	r3, #2
 801135a:	e7c7      	b.n	80112ec <_printf_common+0x58>
 801135c:	2301      	movs	r3, #1
 801135e:	4622      	mov	r2, r4
 8011360:	4649      	mov	r1, r9
 8011362:	4638      	mov	r0, r7
 8011364:	47c0      	blx	r8
 8011366:	3001      	adds	r0, #1
 8011368:	d0e6      	beq.n	8011338 <_printf_common+0xa4>
 801136a:	3601      	adds	r6, #1
 801136c:	e7d9      	b.n	8011322 <_printf_common+0x8e>
	...

08011370 <_printf_i>:
 8011370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011374:	460c      	mov	r4, r1
 8011376:	4691      	mov	r9, r2
 8011378:	7e27      	ldrb	r7, [r4, #24]
 801137a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801137c:	2f78      	cmp	r7, #120	; 0x78
 801137e:	4680      	mov	r8, r0
 8011380:	469a      	mov	sl, r3
 8011382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011386:	d807      	bhi.n	8011398 <_printf_i+0x28>
 8011388:	2f62      	cmp	r7, #98	; 0x62
 801138a:	d80a      	bhi.n	80113a2 <_printf_i+0x32>
 801138c:	2f00      	cmp	r7, #0
 801138e:	f000 80d8 	beq.w	8011542 <_printf_i+0x1d2>
 8011392:	2f58      	cmp	r7, #88	; 0x58
 8011394:	f000 80a3 	beq.w	80114de <_printf_i+0x16e>
 8011398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801139c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80113a0:	e03a      	b.n	8011418 <_printf_i+0xa8>
 80113a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80113a6:	2b15      	cmp	r3, #21
 80113a8:	d8f6      	bhi.n	8011398 <_printf_i+0x28>
 80113aa:	a001      	add	r0, pc, #4	; (adr r0, 80113b0 <_printf_i+0x40>)
 80113ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80113b0:	08011409 	.word	0x08011409
 80113b4:	0801141d 	.word	0x0801141d
 80113b8:	08011399 	.word	0x08011399
 80113bc:	08011399 	.word	0x08011399
 80113c0:	08011399 	.word	0x08011399
 80113c4:	08011399 	.word	0x08011399
 80113c8:	0801141d 	.word	0x0801141d
 80113cc:	08011399 	.word	0x08011399
 80113d0:	08011399 	.word	0x08011399
 80113d4:	08011399 	.word	0x08011399
 80113d8:	08011399 	.word	0x08011399
 80113dc:	08011529 	.word	0x08011529
 80113e0:	0801144d 	.word	0x0801144d
 80113e4:	0801150b 	.word	0x0801150b
 80113e8:	08011399 	.word	0x08011399
 80113ec:	08011399 	.word	0x08011399
 80113f0:	0801154b 	.word	0x0801154b
 80113f4:	08011399 	.word	0x08011399
 80113f8:	0801144d 	.word	0x0801144d
 80113fc:	08011399 	.word	0x08011399
 8011400:	08011399 	.word	0x08011399
 8011404:	08011513 	.word	0x08011513
 8011408:	680b      	ldr	r3, [r1, #0]
 801140a:	1d1a      	adds	r2, r3, #4
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	600a      	str	r2, [r1, #0]
 8011410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011418:	2301      	movs	r3, #1
 801141a:	e0a3      	b.n	8011564 <_printf_i+0x1f4>
 801141c:	6825      	ldr	r5, [r4, #0]
 801141e:	6808      	ldr	r0, [r1, #0]
 8011420:	062e      	lsls	r6, r5, #24
 8011422:	f100 0304 	add.w	r3, r0, #4
 8011426:	d50a      	bpl.n	801143e <_printf_i+0xce>
 8011428:	6805      	ldr	r5, [r0, #0]
 801142a:	600b      	str	r3, [r1, #0]
 801142c:	2d00      	cmp	r5, #0
 801142e:	da03      	bge.n	8011438 <_printf_i+0xc8>
 8011430:	232d      	movs	r3, #45	; 0x2d
 8011432:	426d      	negs	r5, r5
 8011434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011438:	485e      	ldr	r0, [pc, #376]	; (80115b4 <_printf_i+0x244>)
 801143a:	230a      	movs	r3, #10
 801143c:	e019      	b.n	8011472 <_printf_i+0x102>
 801143e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011442:	6805      	ldr	r5, [r0, #0]
 8011444:	600b      	str	r3, [r1, #0]
 8011446:	bf18      	it	ne
 8011448:	b22d      	sxthne	r5, r5
 801144a:	e7ef      	b.n	801142c <_printf_i+0xbc>
 801144c:	680b      	ldr	r3, [r1, #0]
 801144e:	6825      	ldr	r5, [r4, #0]
 8011450:	1d18      	adds	r0, r3, #4
 8011452:	6008      	str	r0, [r1, #0]
 8011454:	0628      	lsls	r0, r5, #24
 8011456:	d501      	bpl.n	801145c <_printf_i+0xec>
 8011458:	681d      	ldr	r5, [r3, #0]
 801145a:	e002      	b.n	8011462 <_printf_i+0xf2>
 801145c:	0669      	lsls	r1, r5, #25
 801145e:	d5fb      	bpl.n	8011458 <_printf_i+0xe8>
 8011460:	881d      	ldrh	r5, [r3, #0]
 8011462:	4854      	ldr	r0, [pc, #336]	; (80115b4 <_printf_i+0x244>)
 8011464:	2f6f      	cmp	r7, #111	; 0x6f
 8011466:	bf0c      	ite	eq
 8011468:	2308      	moveq	r3, #8
 801146a:	230a      	movne	r3, #10
 801146c:	2100      	movs	r1, #0
 801146e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011472:	6866      	ldr	r6, [r4, #4]
 8011474:	60a6      	str	r6, [r4, #8]
 8011476:	2e00      	cmp	r6, #0
 8011478:	bfa2      	ittt	ge
 801147a:	6821      	ldrge	r1, [r4, #0]
 801147c:	f021 0104 	bicge.w	r1, r1, #4
 8011480:	6021      	strge	r1, [r4, #0]
 8011482:	b90d      	cbnz	r5, 8011488 <_printf_i+0x118>
 8011484:	2e00      	cmp	r6, #0
 8011486:	d04d      	beq.n	8011524 <_printf_i+0x1b4>
 8011488:	4616      	mov	r6, r2
 801148a:	fbb5 f1f3 	udiv	r1, r5, r3
 801148e:	fb03 5711 	mls	r7, r3, r1, r5
 8011492:	5dc7      	ldrb	r7, [r0, r7]
 8011494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011498:	462f      	mov	r7, r5
 801149a:	42bb      	cmp	r3, r7
 801149c:	460d      	mov	r5, r1
 801149e:	d9f4      	bls.n	801148a <_printf_i+0x11a>
 80114a0:	2b08      	cmp	r3, #8
 80114a2:	d10b      	bne.n	80114bc <_printf_i+0x14c>
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	07df      	lsls	r7, r3, #31
 80114a8:	d508      	bpl.n	80114bc <_printf_i+0x14c>
 80114aa:	6923      	ldr	r3, [r4, #16]
 80114ac:	6861      	ldr	r1, [r4, #4]
 80114ae:	4299      	cmp	r1, r3
 80114b0:	bfde      	ittt	le
 80114b2:	2330      	movle	r3, #48	; 0x30
 80114b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80114b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80114bc:	1b92      	subs	r2, r2, r6
 80114be:	6122      	str	r2, [r4, #16]
 80114c0:	f8cd a000 	str.w	sl, [sp]
 80114c4:	464b      	mov	r3, r9
 80114c6:	aa03      	add	r2, sp, #12
 80114c8:	4621      	mov	r1, r4
 80114ca:	4640      	mov	r0, r8
 80114cc:	f7ff fee2 	bl	8011294 <_printf_common>
 80114d0:	3001      	adds	r0, #1
 80114d2:	d14c      	bne.n	801156e <_printf_i+0x1fe>
 80114d4:	f04f 30ff 	mov.w	r0, #4294967295
 80114d8:	b004      	add	sp, #16
 80114da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114de:	4835      	ldr	r0, [pc, #212]	; (80115b4 <_printf_i+0x244>)
 80114e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	680e      	ldr	r6, [r1, #0]
 80114e8:	061f      	lsls	r7, r3, #24
 80114ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80114ee:	600e      	str	r6, [r1, #0]
 80114f0:	d514      	bpl.n	801151c <_printf_i+0x1ac>
 80114f2:	07d9      	lsls	r1, r3, #31
 80114f4:	bf44      	itt	mi
 80114f6:	f043 0320 	orrmi.w	r3, r3, #32
 80114fa:	6023      	strmi	r3, [r4, #0]
 80114fc:	b91d      	cbnz	r5, 8011506 <_printf_i+0x196>
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	f023 0320 	bic.w	r3, r3, #32
 8011504:	6023      	str	r3, [r4, #0]
 8011506:	2310      	movs	r3, #16
 8011508:	e7b0      	b.n	801146c <_printf_i+0xfc>
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	f043 0320 	orr.w	r3, r3, #32
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	2378      	movs	r3, #120	; 0x78
 8011514:	4828      	ldr	r0, [pc, #160]	; (80115b8 <_printf_i+0x248>)
 8011516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801151a:	e7e3      	b.n	80114e4 <_printf_i+0x174>
 801151c:	065e      	lsls	r6, r3, #25
 801151e:	bf48      	it	mi
 8011520:	b2ad      	uxthmi	r5, r5
 8011522:	e7e6      	b.n	80114f2 <_printf_i+0x182>
 8011524:	4616      	mov	r6, r2
 8011526:	e7bb      	b.n	80114a0 <_printf_i+0x130>
 8011528:	680b      	ldr	r3, [r1, #0]
 801152a:	6826      	ldr	r6, [r4, #0]
 801152c:	6960      	ldr	r0, [r4, #20]
 801152e:	1d1d      	adds	r5, r3, #4
 8011530:	600d      	str	r5, [r1, #0]
 8011532:	0635      	lsls	r5, r6, #24
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	d501      	bpl.n	801153c <_printf_i+0x1cc>
 8011538:	6018      	str	r0, [r3, #0]
 801153a:	e002      	b.n	8011542 <_printf_i+0x1d2>
 801153c:	0671      	lsls	r1, r6, #25
 801153e:	d5fb      	bpl.n	8011538 <_printf_i+0x1c8>
 8011540:	8018      	strh	r0, [r3, #0]
 8011542:	2300      	movs	r3, #0
 8011544:	6123      	str	r3, [r4, #16]
 8011546:	4616      	mov	r6, r2
 8011548:	e7ba      	b.n	80114c0 <_printf_i+0x150>
 801154a:	680b      	ldr	r3, [r1, #0]
 801154c:	1d1a      	adds	r2, r3, #4
 801154e:	600a      	str	r2, [r1, #0]
 8011550:	681e      	ldr	r6, [r3, #0]
 8011552:	6862      	ldr	r2, [r4, #4]
 8011554:	2100      	movs	r1, #0
 8011556:	4630      	mov	r0, r6
 8011558:	f7ee fe5a 	bl	8000210 <memchr>
 801155c:	b108      	cbz	r0, 8011562 <_printf_i+0x1f2>
 801155e:	1b80      	subs	r0, r0, r6
 8011560:	6060      	str	r0, [r4, #4]
 8011562:	6863      	ldr	r3, [r4, #4]
 8011564:	6123      	str	r3, [r4, #16]
 8011566:	2300      	movs	r3, #0
 8011568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801156c:	e7a8      	b.n	80114c0 <_printf_i+0x150>
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	4632      	mov	r2, r6
 8011572:	4649      	mov	r1, r9
 8011574:	4640      	mov	r0, r8
 8011576:	47d0      	blx	sl
 8011578:	3001      	adds	r0, #1
 801157a:	d0ab      	beq.n	80114d4 <_printf_i+0x164>
 801157c:	6823      	ldr	r3, [r4, #0]
 801157e:	079b      	lsls	r3, r3, #30
 8011580:	d413      	bmi.n	80115aa <_printf_i+0x23a>
 8011582:	68e0      	ldr	r0, [r4, #12]
 8011584:	9b03      	ldr	r3, [sp, #12]
 8011586:	4298      	cmp	r0, r3
 8011588:	bfb8      	it	lt
 801158a:	4618      	movlt	r0, r3
 801158c:	e7a4      	b.n	80114d8 <_printf_i+0x168>
 801158e:	2301      	movs	r3, #1
 8011590:	4632      	mov	r2, r6
 8011592:	4649      	mov	r1, r9
 8011594:	4640      	mov	r0, r8
 8011596:	47d0      	blx	sl
 8011598:	3001      	adds	r0, #1
 801159a:	d09b      	beq.n	80114d4 <_printf_i+0x164>
 801159c:	3501      	adds	r5, #1
 801159e:	68e3      	ldr	r3, [r4, #12]
 80115a0:	9903      	ldr	r1, [sp, #12]
 80115a2:	1a5b      	subs	r3, r3, r1
 80115a4:	42ab      	cmp	r3, r5
 80115a6:	dcf2      	bgt.n	801158e <_printf_i+0x21e>
 80115a8:	e7eb      	b.n	8011582 <_printf_i+0x212>
 80115aa:	2500      	movs	r5, #0
 80115ac:	f104 0619 	add.w	r6, r4, #25
 80115b0:	e7f5      	b.n	801159e <_printf_i+0x22e>
 80115b2:	bf00      	nop
 80115b4:	080290ca 	.word	0x080290ca
 80115b8:	080290db 	.word	0x080290db

080115bc <_scanf_float>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	b087      	sub	sp, #28
 80115c2:	4617      	mov	r7, r2
 80115c4:	9303      	str	r3, [sp, #12]
 80115c6:	688b      	ldr	r3, [r1, #8]
 80115c8:	1e5a      	subs	r2, r3, #1
 80115ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80115ce:	bf83      	ittte	hi
 80115d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80115d4:	195b      	addhi	r3, r3, r5
 80115d6:	9302      	strhi	r3, [sp, #8]
 80115d8:	2300      	movls	r3, #0
 80115da:	bf86      	itte	hi
 80115dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80115e0:	608b      	strhi	r3, [r1, #8]
 80115e2:	9302      	strls	r3, [sp, #8]
 80115e4:	680b      	ldr	r3, [r1, #0]
 80115e6:	468b      	mov	fp, r1
 80115e8:	2500      	movs	r5, #0
 80115ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80115ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80115f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80115f6:	4680      	mov	r8, r0
 80115f8:	460c      	mov	r4, r1
 80115fa:	465e      	mov	r6, fp
 80115fc:	46aa      	mov	sl, r5
 80115fe:	46a9      	mov	r9, r5
 8011600:	9501      	str	r5, [sp, #4]
 8011602:	68a2      	ldr	r2, [r4, #8]
 8011604:	b152      	cbz	r2, 801161c <_scanf_float+0x60>
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	2b4e      	cmp	r3, #78	; 0x4e
 801160c:	d864      	bhi.n	80116d8 <_scanf_float+0x11c>
 801160e:	2b40      	cmp	r3, #64	; 0x40
 8011610:	d83c      	bhi.n	801168c <_scanf_float+0xd0>
 8011612:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011616:	b2c8      	uxtb	r0, r1
 8011618:	280e      	cmp	r0, #14
 801161a:	d93a      	bls.n	8011692 <_scanf_float+0xd6>
 801161c:	f1b9 0f00 	cmp.w	r9, #0
 8011620:	d003      	beq.n	801162a <_scanf_float+0x6e>
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801162e:	f1ba 0f01 	cmp.w	sl, #1
 8011632:	f200 8113 	bhi.w	801185c <_scanf_float+0x2a0>
 8011636:	455e      	cmp	r6, fp
 8011638:	f200 8105 	bhi.w	8011846 <_scanf_float+0x28a>
 801163c:	2501      	movs	r5, #1
 801163e:	4628      	mov	r0, r5
 8011640:	b007      	add	sp, #28
 8011642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801164a:	2a0d      	cmp	r2, #13
 801164c:	d8e6      	bhi.n	801161c <_scanf_float+0x60>
 801164e:	a101      	add	r1, pc, #4	; (adr r1, 8011654 <_scanf_float+0x98>)
 8011650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011654:	08011793 	.word	0x08011793
 8011658:	0801161d 	.word	0x0801161d
 801165c:	0801161d 	.word	0x0801161d
 8011660:	0801161d 	.word	0x0801161d
 8011664:	080117f3 	.word	0x080117f3
 8011668:	080117cb 	.word	0x080117cb
 801166c:	0801161d 	.word	0x0801161d
 8011670:	0801161d 	.word	0x0801161d
 8011674:	080117a1 	.word	0x080117a1
 8011678:	0801161d 	.word	0x0801161d
 801167c:	0801161d 	.word	0x0801161d
 8011680:	0801161d 	.word	0x0801161d
 8011684:	0801161d 	.word	0x0801161d
 8011688:	08011759 	.word	0x08011759
 801168c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011690:	e7db      	b.n	801164a <_scanf_float+0x8e>
 8011692:	290e      	cmp	r1, #14
 8011694:	d8c2      	bhi.n	801161c <_scanf_float+0x60>
 8011696:	a001      	add	r0, pc, #4	; (adr r0, 801169c <_scanf_float+0xe0>)
 8011698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801169c:	0801174b 	.word	0x0801174b
 80116a0:	0801161d 	.word	0x0801161d
 80116a4:	0801174b 	.word	0x0801174b
 80116a8:	080117df 	.word	0x080117df
 80116ac:	0801161d 	.word	0x0801161d
 80116b0:	080116f9 	.word	0x080116f9
 80116b4:	08011735 	.word	0x08011735
 80116b8:	08011735 	.word	0x08011735
 80116bc:	08011735 	.word	0x08011735
 80116c0:	08011735 	.word	0x08011735
 80116c4:	08011735 	.word	0x08011735
 80116c8:	08011735 	.word	0x08011735
 80116cc:	08011735 	.word	0x08011735
 80116d0:	08011735 	.word	0x08011735
 80116d4:	08011735 	.word	0x08011735
 80116d8:	2b6e      	cmp	r3, #110	; 0x6e
 80116da:	d809      	bhi.n	80116f0 <_scanf_float+0x134>
 80116dc:	2b60      	cmp	r3, #96	; 0x60
 80116de:	d8b2      	bhi.n	8011646 <_scanf_float+0x8a>
 80116e0:	2b54      	cmp	r3, #84	; 0x54
 80116e2:	d077      	beq.n	80117d4 <_scanf_float+0x218>
 80116e4:	2b59      	cmp	r3, #89	; 0x59
 80116e6:	d199      	bne.n	801161c <_scanf_float+0x60>
 80116e8:	2d07      	cmp	r5, #7
 80116ea:	d197      	bne.n	801161c <_scanf_float+0x60>
 80116ec:	2508      	movs	r5, #8
 80116ee:	e029      	b.n	8011744 <_scanf_float+0x188>
 80116f0:	2b74      	cmp	r3, #116	; 0x74
 80116f2:	d06f      	beq.n	80117d4 <_scanf_float+0x218>
 80116f4:	2b79      	cmp	r3, #121	; 0x79
 80116f6:	e7f6      	b.n	80116e6 <_scanf_float+0x12a>
 80116f8:	6821      	ldr	r1, [r4, #0]
 80116fa:	05c8      	lsls	r0, r1, #23
 80116fc:	d51a      	bpl.n	8011734 <_scanf_float+0x178>
 80116fe:	9b02      	ldr	r3, [sp, #8]
 8011700:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011704:	6021      	str	r1, [r4, #0]
 8011706:	f109 0901 	add.w	r9, r9, #1
 801170a:	b11b      	cbz	r3, 8011714 <_scanf_float+0x158>
 801170c:	3b01      	subs	r3, #1
 801170e:	3201      	adds	r2, #1
 8011710:	9302      	str	r3, [sp, #8]
 8011712:	60a2      	str	r2, [r4, #8]
 8011714:	68a3      	ldr	r3, [r4, #8]
 8011716:	3b01      	subs	r3, #1
 8011718:	60a3      	str	r3, [r4, #8]
 801171a:	6923      	ldr	r3, [r4, #16]
 801171c:	3301      	adds	r3, #1
 801171e:	6123      	str	r3, [r4, #16]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3b01      	subs	r3, #1
 8011724:	2b00      	cmp	r3, #0
 8011726:	607b      	str	r3, [r7, #4]
 8011728:	f340 8084 	ble.w	8011834 <_scanf_float+0x278>
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	3301      	adds	r3, #1
 8011730:	603b      	str	r3, [r7, #0]
 8011732:	e766      	b.n	8011602 <_scanf_float+0x46>
 8011734:	eb1a 0f05 	cmn.w	sl, r5
 8011738:	f47f af70 	bne.w	801161c <_scanf_float+0x60>
 801173c:	6822      	ldr	r2, [r4, #0]
 801173e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011742:	6022      	str	r2, [r4, #0]
 8011744:	f806 3b01 	strb.w	r3, [r6], #1
 8011748:	e7e4      	b.n	8011714 <_scanf_float+0x158>
 801174a:	6822      	ldr	r2, [r4, #0]
 801174c:	0610      	lsls	r0, r2, #24
 801174e:	f57f af65 	bpl.w	801161c <_scanf_float+0x60>
 8011752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011756:	e7f4      	b.n	8011742 <_scanf_float+0x186>
 8011758:	f1ba 0f00 	cmp.w	sl, #0
 801175c:	d10e      	bne.n	801177c <_scanf_float+0x1c0>
 801175e:	f1b9 0f00 	cmp.w	r9, #0
 8011762:	d10e      	bne.n	8011782 <_scanf_float+0x1c6>
 8011764:	6822      	ldr	r2, [r4, #0]
 8011766:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801176a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801176e:	d108      	bne.n	8011782 <_scanf_float+0x1c6>
 8011770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011774:	6022      	str	r2, [r4, #0]
 8011776:	f04f 0a01 	mov.w	sl, #1
 801177a:	e7e3      	b.n	8011744 <_scanf_float+0x188>
 801177c:	f1ba 0f02 	cmp.w	sl, #2
 8011780:	d055      	beq.n	801182e <_scanf_float+0x272>
 8011782:	2d01      	cmp	r5, #1
 8011784:	d002      	beq.n	801178c <_scanf_float+0x1d0>
 8011786:	2d04      	cmp	r5, #4
 8011788:	f47f af48 	bne.w	801161c <_scanf_float+0x60>
 801178c:	3501      	adds	r5, #1
 801178e:	b2ed      	uxtb	r5, r5
 8011790:	e7d8      	b.n	8011744 <_scanf_float+0x188>
 8011792:	f1ba 0f01 	cmp.w	sl, #1
 8011796:	f47f af41 	bne.w	801161c <_scanf_float+0x60>
 801179a:	f04f 0a02 	mov.w	sl, #2
 801179e:	e7d1      	b.n	8011744 <_scanf_float+0x188>
 80117a0:	b97d      	cbnz	r5, 80117c2 <_scanf_float+0x206>
 80117a2:	f1b9 0f00 	cmp.w	r9, #0
 80117a6:	f47f af3c 	bne.w	8011622 <_scanf_float+0x66>
 80117aa:	6822      	ldr	r2, [r4, #0]
 80117ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80117b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80117b4:	f47f af39 	bne.w	801162a <_scanf_float+0x6e>
 80117b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80117bc:	6022      	str	r2, [r4, #0]
 80117be:	2501      	movs	r5, #1
 80117c0:	e7c0      	b.n	8011744 <_scanf_float+0x188>
 80117c2:	2d03      	cmp	r5, #3
 80117c4:	d0e2      	beq.n	801178c <_scanf_float+0x1d0>
 80117c6:	2d05      	cmp	r5, #5
 80117c8:	e7de      	b.n	8011788 <_scanf_float+0x1cc>
 80117ca:	2d02      	cmp	r5, #2
 80117cc:	f47f af26 	bne.w	801161c <_scanf_float+0x60>
 80117d0:	2503      	movs	r5, #3
 80117d2:	e7b7      	b.n	8011744 <_scanf_float+0x188>
 80117d4:	2d06      	cmp	r5, #6
 80117d6:	f47f af21 	bne.w	801161c <_scanf_float+0x60>
 80117da:	2507      	movs	r5, #7
 80117dc:	e7b2      	b.n	8011744 <_scanf_float+0x188>
 80117de:	6822      	ldr	r2, [r4, #0]
 80117e0:	0591      	lsls	r1, r2, #22
 80117e2:	f57f af1b 	bpl.w	801161c <_scanf_float+0x60>
 80117e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80117ea:	6022      	str	r2, [r4, #0]
 80117ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80117f0:	e7a8      	b.n	8011744 <_scanf_float+0x188>
 80117f2:	6822      	ldr	r2, [r4, #0]
 80117f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80117f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80117fc:	d006      	beq.n	801180c <_scanf_float+0x250>
 80117fe:	0550      	lsls	r0, r2, #21
 8011800:	f57f af0c 	bpl.w	801161c <_scanf_float+0x60>
 8011804:	f1b9 0f00 	cmp.w	r9, #0
 8011808:	f43f af0f 	beq.w	801162a <_scanf_float+0x6e>
 801180c:	0591      	lsls	r1, r2, #22
 801180e:	bf58      	it	pl
 8011810:	9901      	ldrpl	r1, [sp, #4]
 8011812:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011816:	bf58      	it	pl
 8011818:	eba9 0101 	subpl.w	r1, r9, r1
 801181c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011820:	bf58      	it	pl
 8011822:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011826:	6022      	str	r2, [r4, #0]
 8011828:	f04f 0900 	mov.w	r9, #0
 801182c:	e78a      	b.n	8011744 <_scanf_float+0x188>
 801182e:	f04f 0a03 	mov.w	sl, #3
 8011832:	e787      	b.n	8011744 <_scanf_float+0x188>
 8011834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011838:	4639      	mov	r1, r7
 801183a:	4640      	mov	r0, r8
 801183c:	4798      	blx	r3
 801183e:	2800      	cmp	r0, #0
 8011840:	f43f aedf 	beq.w	8011602 <_scanf_float+0x46>
 8011844:	e6ea      	b.n	801161c <_scanf_float+0x60>
 8011846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801184a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801184e:	463a      	mov	r2, r7
 8011850:	4640      	mov	r0, r8
 8011852:	4798      	blx	r3
 8011854:	6923      	ldr	r3, [r4, #16]
 8011856:	3b01      	subs	r3, #1
 8011858:	6123      	str	r3, [r4, #16]
 801185a:	e6ec      	b.n	8011636 <_scanf_float+0x7a>
 801185c:	1e6b      	subs	r3, r5, #1
 801185e:	2b06      	cmp	r3, #6
 8011860:	d825      	bhi.n	80118ae <_scanf_float+0x2f2>
 8011862:	2d02      	cmp	r5, #2
 8011864:	d836      	bhi.n	80118d4 <_scanf_float+0x318>
 8011866:	455e      	cmp	r6, fp
 8011868:	f67f aee8 	bls.w	801163c <_scanf_float+0x80>
 801186c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011870:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011874:	463a      	mov	r2, r7
 8011876:	4640      	mov	r0, r8
 8011878:	4798      	blx	r3
 801187a:	6923      	ldr	r3, [r4, #16]
 801187c:	3b01      	subs	r3, #1
 801187e:	6123      	str	r3, [r4, #16]
 8011880:	e7f1      	b.n	8011866 <_scanf_float+0x2aa>
 8011882:	9802      	ldr	r0, [sp, #8]
 8011884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011888:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801188c:	9002      	str	r0, [sp, #8]
 801188e:	463a      	mov	r2, r7
 8011890:	4640      	mov	r0, r8
 8011892:	4798      	blx	r3
 8011894:	6923      	ldr	r3, [r4, #16]
 8011896:	3b01      	subs	r3, #1
 8011898:	6123      	str	r3, [r4, #16]
 801189a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801189e:	fa5f fa8a 	uxtb.w	sl, sl
 80118a2:	f1ba 0f02 	cmp.w	sl, #2
 80118a6:	d1ec      	bne.n	8011882 <_scanf_float+0x2c6>
 80118a8:	3d03      	subs	r5, #3
 80118aa:	b2ed      	uxtb	r5, r5
 80118ac:	1b76      	subs	r6, r6, r5
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	05da      	lsls	r2, r3, #23
 80118b2:	d52f      	bpl.n	8011914 <_scanf_float+0x358>
 80118b4:	055b      	lsls	r3, r3, #21
 80118b6:	d510      	bpl.n	80118da <_scanf_float+0x31e>
 80118b8:	455e      	cmp	r6, fp
 80118ba:	f67f aebf 	bls.w	801163c <_scanf_float+0x80>
 80118be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118c6:	463a      	mov	r2, r7
 80118c8:	4640      	mov	r0, r8
 80118ca:	4798      	blx	r3
 80118cc:	6923      	ldr	r3, [r4, #16]
 80118ce:	3b01      	subs	r3, #1
 80118d0:	6123      	str	r3, [r4, #16]
 80118d2:	e7f1      	b.n	80118b8 <_scanf_float+0x2fc>
 80118d4:	46aa      	mov	sl, r5
 80118d6:	9602      	str	r6, [sp, #8]
 80118d8:	e7df      	b.n	801189a <_scanf_float+0x2de>
 80118da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80118de:	6923      	ldr	r3, [r4, #16]
 80118e0:	2965      	cmp	r1, #101	; 0x65
 80118e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80118ea:	6123      	str	r3, [r4, #16]
 80118ec:	d00c      	beq.n	8011908 <_scanf_float+0x34c>
 80118ee:	2945      	cmp	r1, #69	; 0x45
 80118f0:	d00a      	beq.n	8011908 <_scanf_float+0x34c>
 80118f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118f6:	463a      	mov	r2, r7
 80118f8:	4640      	mov	r0, r8
 80118fa:	4798      	blx	r3
 80118fc:	6923      	ldr	r3, [r4, #16]
 80118fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011902:	3b01      	subs	r3, #1
 8011904:	1eb5      	subs	r5, r6, #2
 8011906:	6123      	str	r3, [r4, #16]
 8011908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801190c:	463a      	mov	r2, r7
 801190e:	4640      	mov	r0, r8
 8011910:	4798      	blx	r3
 8011912:	462e      	mov	r6, r5
 8011914:	6825      	ldr	r5, [r4, #0]
 8011916:	f015 0510 	ands.w	r5, r5, #16
 801191a:	d158      	bne.n	80119ce <_scanf_float+0x412>
 801191c:	7035      	strb	r5, [r6, #0]
 801191e:	6823      	ldr	r3, [r4, #0]
 8011920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011928:	d11c      	bne.n	8011964 <_scanf_float+0x3a8>
 801192a:	9b01      	ldr	r3, [sp, #4]
 801192c:	454b      	cmp	r3, r9
 801192e:	eba3 0209 	sub.w	r2, r3, r9
 8011932:	d124      	bne.n	801197e <_scanf_float+0x3c2>
 8011934:	2200      	movs	r2, #0
 8011936:	4659      	mov	r1, fp
 8011938:	4640      	mov	r0, r8
 801193a:	f000 fe9b 	bl	8012674 <_strtod_r>
 801193e:	9b03      	ldr	r3, [sp, #12]
 8011940:	6821      	ldr	r1, [r4, #0]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f011 0f02 	tst.w	r1, #2
 8011948:	ec57 6b10 	vmov	r6, r7, d0
 801194c:	f103 0204 	add.w	r2, r3, #4
 8011950:	d020      	beq.n	8011994 <_scanf_float+0x3d8>
 8011952:	9903      	ldr	r1, [sp, #12]
 8011954:	600a      	str	r2, [r1, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	e9c3 6700 	strd	r6, r7, [r3]
 801195c:	68e3      	ldr	r3, [r4, #12]
 801195e:	3301      	adds	r3, #1
 8011960:	60e3      	str	r3, [r4, #12]
 8011962:	e66c      	b.n	801163e <_scanf_float+0x82>
 8011964:	9b04      	ldr	r3, [sp, #16]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d0e4      	beq.n	8011934 <_scanf_float+0x378>
 801196a:	9905      	ldr	r1, [sp, #20]
 801196c:	230a      	movs	r3, #10
 801196e:	462a      	mov	r2, r5
 8011970:	3101      	adds	r1, #1
 8011972:	4640      	mov	r0, r8
 8011974:	f000 ff70 	bl	8012858 <_strtol_r>
 8011978:	9b04      	ldr	r3, [sp, #16]
 801197a:	9e05      	ldr	r6, [sp, #20]
 801197c:	1ac2      	subs	r2, r0, r3
 801197e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011982:	429e      	cmp	r6, r3
 8011984:	bf28      	it	cs
 8011986:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801198a:	4912      	ldr	r1, [pc, #72]	; (80119d4 <_scanf_float+0x418>)
 801198c:	4630      	mov	r0, r6
 801198e:	f000 f82b 	bl	80119e8 <siprintf>
 8011992:	e7cf      	b.n	8011934 <_scanf_float+0x378>
 8011994:	f011 0f04 	tst.w	r1, #4
 8011998:	9903      	ldr	r1, [sp, #12]
 801199a:	600a      	str	r2, [r1, #0]
 801199c:	d1db      	bne.n	8011956 <_scanf_float+0x39a>
 801199e:	f8d3 8000 	ldr.w	r8, [r3]
 80119a2:	ee10 2a10 	vmov	r2, s0
 80119a6:	ee10 0a10 	vmov	r0, s0
 80119aa:	463b      	mov	r3, r7
 80119ac:	4639      	mov	r1, r7
 80119ae:	f7ef f8d5 	bl	8000b5c <__aeabi_dcmpun>
 80119b2:	b128      	cbz	r0, 80119c0 <_scanf_float+0x404>
 80119b4:	4808      	ldr	r0, [pc, #32]	; (80119d8 <_scanf_float+0x41c>)
 80119b6:	f000 f811 	bl	80119dc <nanf>
 80119ba:	ed88 0a00 	vstr	s0, [r8]
 80119be:	e7cd      	b.n	801195c <_scanf_float+0x3a0>
 80119c0:	4630      	mov	r0, r6
 80119c2:	4639      	mov	r1, r7
 80119c4:	f7ef f928 	bl	8000c18 <__aeabi_d2f>
 80119c8:	f8c8 0000 	str.w	r0, [r8]
 80119cc:	e7c6      	b.n	801195c <_scanf_float+0x3a0>
 80119ce:	2500      	movs	r5, #0
 80119d0:	e635      	b.n	801163e <_scanf_float+0x82>
 80119d2:	bf00      	nop
 80119d4:	080290ec 	.word	0x080290ec
 80119d8:	080291fb 	.word	0x080291fb

080119dc <nanf>:
 80119dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80119e4 <nanf+0x8>
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	7fc00000 	.word	0x7fc00000

080119e8 <siprintf>:
 80119e8:	b40e      	push	{r1, r2, r3}
 80119ea:	b500      	push	{lr}
 80119ec:	b09c      	sub	sp, #112	; 0x70
 80119ee:	ab1d      	add	r3, sp, #116	; 0x74
 80119f0:	9002      	str	r0, [sp, #8]
 80119f2:	9006      	str	r0, [sp, #24]
 80119f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119f8:	4809      	ldr	r0, [pc, #36]	; (8011a20 <siprintf+0x38>)
 80119fa:	9107      	str	r1, [sp, #28]
 80119fc:	9104      	str	r1, [sp, #16]
 80119fe:	4909      	ldr	r1, [pc, #36]	; (8011a24 <siprintf+0x3c>)
 8011a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a04:	9105      	str	r1, [sp, #20]
 8011a06:	6800      	ldr	r0, [r0, #0]
 8011a08:	9301      	str	r3, [sp, #4]
 8011a0a:	a902      	add	r1, sp, #8
 8011a0c:	f002 ff46 	bl	801489c <_svfiprintf_r>
 8011a10:	9b02      	ldr	r3, [sp, #8]
 8011a12:	2200      	movs	r2, #0
 8011a14:	701a      	strb	r2, [r3, #0]
 8011a16:	b01c      	add	sp, #112	; 0x70
 8011a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a1c:	b003      	add	sp, #12
 8011a1e:	4770      	bx	lr
 8011a20:	20000040 	.word	0x20000040
 8011a24:	ffff0208 	.word	0xffff0208

08011a28 <sulp>:
 8011a28:	b570      	push	{r4, r5, r6, lr}
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	460d      	mov	r5, r1
 8011a2e:	ec45 4b10 	vmov	d0, r4, r5
 8011a32:	4616      	mov	r6, r2
 8011a34:	f002 fcce 	bl	80143d4 <__ulp>
 8011a38:	ec51 0b10 	vmov	r0, r1, d0
 8011a3c:	b17e      	cbz	r6, 8011a5e <sulp+0x36>
 8011a3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011a42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	dd09      	ble.n	8011a5e <sulp+0x36>
 8011a4a:	051b      	lsls	r3, r3, #20
 8011a4c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011a50:	2400      	movs	r4, #0
 8011a52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011a56:	4622      	mov	r2, r4
 8011a58:	462b      	mov	r3, r5
 8011a5a:	f7ee fde5 	bl	8000628 <__aeabi_dmul>
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}

08011a60 <_strtod_l>:
 8011a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	b0a3      	sub	sp, #140	; 0x8c
 8011a66:	461f      	mov	r7, r3
 8011a68:	2300      	movs	r3, #0
 8011a6a:	931e      	str	r3, [sp, #120]	; 0x78
 8011a6c:	4ba4      	ldr	r3, [pc, #656]	; (8011d00 <_strtod_l+0x2a0>)
 8011a6e:	9219      	str	r2, [sp, #100]	; 0x64
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	9307      	str	r3, [sp, #28]
 8011a74:	4604      	mov	r4, r0
 8011a76:	4618      	mov	r0, r3
 8011a78:	4688      	mov	r8, r1
 8011a7a:	f7ee fbbb 	bl	80001f4 <strlen>
 8011a7e:	f04f 0a00 	mov.w	sl, #0
 8011a82:	4605      	mov	r5, r0
 8011a84:	f04f 0b00 	mov.w	fp, #0
 8011a88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011a8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a8e:	781a      	ldrb	r2, [r3, #0]
 8011a90:	2a2b      	cmp	r2, #43	; 0x2b
 8011a92:	d04c      	beq.n	8011b2e <_strtod_l+0xce>
 8011a94:	d839      	bhi.n	8011b0a <_strtod_l+0xaa>
 8011a96:	2a0d      	cmp	r2, #13
 8011a98:	d832      	bhi.n	8011b00 <_strtod_l+0xa0>
 8011a9a:	2a08      	cmp	r2, #8
 8011a9c:	d832      	bhi.n	8011b04 <_strtod_l+0xa4>
 8011a9e:	2a00      	cmp	r2, #0
 8011aa0:	d03c      	beq.n	8011b1c <_strtod_l+0xbc>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8011aa6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011aa8:	7833      	ldrb	r3, [r6, #0]
 8011aaa:	2b30      	cmp	r3, #48	; 0x30
 8011aac:	f040 80b4 	bne.w	8011c18 <_strtod_l+0x1b8>
 8011ab0:	7873      	ldrb	r3, [r6, #1]
 8011ab2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ab6:	2b58      	cmp	r3, #88	; 0x58
 8011ab8:	d16c      	bne.n	8011b94 <_strtod_l+0x134>
 8011aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	ab1e      	add	r3, sp, #120	; 0x78
 8011ac0:	9702      	str	r7, [sp, #8]
 8011ac2:	9300      	str	r3, [sp, #0]
 8011ac4:	4a8f      	ldr	r2, [pc, #572]	; (8011d04 <_strtod_l+0x2a4>)
 8011ac6:	ab1f      	add	r3, sp, #124	; 0x7c
 8011ac8:	a91d      	add	r1, sp, #116	; 0x74
 8011aca:	4620      	mov	r0, r4
 8011acc:	f001 fde2 	bl	8013694 <__gethex>
 8011ad0:	f010 0707 	ands.w	r7, r0, #7
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	d005      	beq.n	8011ae4 <_strtod_l+0x84>
 8011ad8:	2f06      	cmp	r7, #6
 8011ada:	d12a      	bne.n	8011b32 <_strtod_l+0xd2>
 8011adc:	3601      	adds	r6, #1
 8011ade:	2300      	movs	r3, #0
 8011ae0:	961d      	str	r6, [sp, #116]	; 0x74
 8011ae2:	930e      	str	r3, [sp, #56]	; 0x38
 8011ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f040 8596 	bne.w	8012618 <_strtod_l+0xbb8>
 8011aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aee:	b1db      	cbz	r3, 8011b28 <_strtod_l+0xc8>
 8011af0:	4652      	mov	r2, sl
 8011af2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011af6:	ec43 2b10 	vmov	d0, r2, r3
 8011afa:	b023      	add	sp, #140	; 0x8c
 8011afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b00:	2a20      	cmp	r2, #32
 8011b02:	d1ce      	bne.n	8011aa2 <_strtod_l+0x42>
 8011b04:	3301      	adds	r3, #1
 8011b06:	931d      	str	r3, [sp, #116]	; 0x74
 8011b08:	e7c0      	b.n	8011a8c <_strtod_l+0x2c>
 8011b0a:	2a2d      	cmp	r2, #45	; 0x2d
 8011b0c:	d1c9      	bne.n	8011aa2 <_strtod_l+0x42>
 8011b0e:	2201      	movs	r2, #1
 8011b10:	920e      	str	r2, [sp, #56]	; 0x38
 8011b12:	1c5a      	adds	r2, r3, #1
 8011b14:	921d      	str	r2, [sp, #116]	; 0x74
 8011b16:	785b      	ldrb	r3, [r3, #1]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1c4      	bne.n	8011aa6 <_strtod_l+0x46>
 8011b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011b1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f040 8576 	bne.w	8012614 <_strtod_l+0xbb4>
 8011b28:	4652      	mov	r2, sl
 8011b2a:	465b      	mov	r3, fp
 8011b2c:	e7e3      	b.n	8011af6 <_strtod_l+0x96>
 8011b2e:	2200      	movs	r2, #0
 8011b30:	e7ee      	b.n	8011b10 <_strtod_l+0xb0>
 8011b32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011b34:	b13a      	cbz	r2, 8011b46 <_strtod_l+0xe6>
 8011b36:	2135      	movs	r1, #53	; 0x35
 8011b38:	a820      	add	r0, sp, #128	; 0x80
 8011b3a:	f002 fd56 	bl	80145ea <__copybits>
 8011b3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b40:	4620      	mov	r0, r4
 8011b42:	f002 f91b 	bl	8013d7c <_Bfree>
 8011b46:	3f01      	subs	r7, #1
 8011b48:	2f05      	cmp	r7, #5
 8011b4a:	d807      	bhi.n	8011b5c <_strtod_l+0xfc>
 8011b4c:	e8df f007 	tbb	[pc, r7]
 8011b50:	1d180b0e 	.word	0x1d180b0e
 8011b54:	030e      	.short	0x030e
 8011b56:	f04f 0b00 	mov.w	fp, #0
 8011b5a:	46da      	mov	sl, fp
 8011b5c:	0728      	lsls	r0, r5, #28
 8011b5e:	d5c1      	bpl.n	8011ae4 <_strtod_l+0x84>
 8011b60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011b64:	e7be      	b.n	8011ae4 <_strtod_l+0x84>
 8011b66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011b6a:	e7f7      	b.n	8011b5c <_strtod_l+0xfc>
 8011b6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011b70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011b76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011b7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011b7e:	e7ed      	b.n	8011b5c <_strtod_l+0xfc>
 8011b80:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011d08 <_strtod_l+0x2a8>
 8011b84:	f04f 0a00 	mov.w	sl, #0
 8011b88:	e7e8      	b.n	8011b5c <_strtod_l+0xfc>
 8011b8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8011b92:	e7e3      	b.n	8011b5c <_strtod_l+0xfc>
 8011b94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b96:	1c5a      	adds	r2, r3, #1
 8011b98:	921d      	str	r2, [sp, #116]	; 0x74
 8011b9a:	785b      	ldrb	r3, [r3, #1]
 8011b9c:	2b30      	cmp	r3, #48	; 0x30
 8011b9e:	d0f9      	beq.n	8011b94 <_strtod_l+0x134>
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d09f      	beq.n	8011ae4 <_strtod_l+0x84>
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	f04f 0900 	mov.w	r9, #0
 8011baa:	9304      	str	r3, [sp, #16]
 8011bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bae:	930a      	str	r3, [sp, #40]	; 0x28
 8011bb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011bb4:	464f      	mov	r7, r9
 8011bb6:	220a      	movs	r2, #10
 8011bb8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011bba:	7806      	ldrb	r6, [r0, #0]
 8011bbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011bc0:	b2d9      	uxtb	r1, r3
 8011bc2:	2909      	cmp	r1, #9
 8011bc4:	d92a      	bls.n	8011c1c <_strtod_l+0x1bc>
 8011bc6:	9907      	ldr	r1, [sp, #28]
 8011bc8:	462a      	mov	r2, r5
 8011bca:	f003 f8d9 	bl	8014d80 <strncmp>
 8011bce:	b398      	cbz	r0, 8011c38 <_strtod_l+0x1d8>
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	4633      	mov	r3, r6
 8011bd4:	463d      	mov	r5, r7
 8011bd6:	9007      	str	r0, [sp, #28]
 8011bd8:	4602      	mov	r2, r0
 8011bda:	2b65      	cmp	r3, #101	; 0x65
 8011bdc:	d001      	beq.n	8011be2 <_strtod_l+0x182>
 8011bde:	2b45      	cmp	r3, #69	; 0x45
 8011be0:	d118      	bne.n	8011c14 <_strtod_l+0x1b4>
 8011be2:	b91d      	cbnz	r5, 8011bec <_strtod_l+0x18c>
 8011be4:	9b04      	ldr	r3, [sp, #16]
 8011be6:	4303      	orrs	r3, r0
 8011be8:	d098      	beq.n	8011b1c <_strtod_l+0xbc>
 8011bea:	2500      	movs	r5, #0
 8011bec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011bf0:	f108 0301 	add.w	r3, r8, #1
 8011bf4:	931d      	str	r3, [sp, #116]	; 0x74
 8011bf6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011bfa:	2b2b      	cmp	r3, #43	; 0x2b
 8011bfc:	d075      	beq.n	8011cea <_strtod_l+0x28a>
 8011bfe:	2b2d      	cmp	r3, #45	; 0x2d
 8011c00:	d07b      	beq.n	8011cfa <_strtod_l+0x29a>
 8011c02:	f04f 0c00 	mov.w	ip, #0
 8011c06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011c0a:	2909      	cmp	r1, #9
 8011c0c:	f240 8082 	bls.w	8011d14 <_strtod_l+0x2b4>
 8011c10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011c14:	2600      	movs	r6, #0
 8011c16:	e09d      	b.n	8011d54 <_strtod_l+0x2f4>
 8011c18:	2300      	movs	r3, #0
 8011c1a:	e7c4      	b.n	8011ba6 <_strtod_l+0x146>
 8011c1c:	2f08      	cmp	r7, #8
 8011c1e:	bfd8      	it	le
 8011c20:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011c22:	f100 0001 	add.w	r0, r0, #1
 8011c26:	bfda      	itte	le
 8011c28:	fb02 3301 	mlale	r3, r2, r1, r3
 8011c2c:	9309      	strle	r3, [sp, #36]	; 0x24
 8011c2e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011c32:	3701      	adds	r7, #1
 8011c34:	901d      	str	r0, [sp, #116]	; 0x74
 8011c36:	e7bf      	b.n	8011bb8 <_strtod_l+0x158>
 8011c38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c3a:	195a      	adds	r2, r3, r5
 8011c3c:	921d      	str	r2, [sp, #116]	; 0x74
 8011c3e:	5d5b      	ldrb	r3, [r3, r5]
 8011c40:	2f00      	cmp	r7, #0
 8011c42:	d037      	beq.n	8011cb4 <_strtod_l+0x254>
 8011c44:	9007      	str	r0, [sp, #28]
 8011c46:	463d      	mov	r5, r7
 8011c48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011c4c:	2a09      	cmp	r2, #9
 8011c4e:	d912      	bls.n	8011c76 <_strtod_l+0x216>
 8011c50:	2201      	movs	r2, #1
 8011c52:	e7c2      	b.n	8011bda <_strtod_l+0x17a>
 8011c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c56:	1c5a      	adds	r2, r3, #1
 8011c58:	921d      	str	r2, [sp, #116]	; 0x74
 8011c5a:	785b      	ldrb	r3, [r3, #1]
 8011c5c:	3001      	adds	r0, #1
 8011c5e:	2b30      	cmp	r3, #48	; 0x30
 8011c60:	d0f8      	beq.n	8011c54 <_strtod_l+0x1f4>
 8011c62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011c66:	2a08      	cmp	r2, #8
 8011c68:	f200 84db 	bhi.w	8012622 <_strtod_l+0xbc2>
 8011c6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011c6e:	9007      	str	r0, [sp, #28]
 8011c70:	2000      	movs	r0, #0
 8011c72:	920a      	str	r2, [sp, #40]	; 0x28
 8011c74:	4605      	mov	r5, r0
 8011c76:	3b30      	subs	r3, #48	; 0x30
 8011c78:	f100 0201 	add.w	r2, r0, #1
 8011c7c:	d014      	beq.n	8011ca8 <_strtod_l+0x248>
 8011c7e:	9907      	ldr	r1, [sp, #28]
 8011c80:	4411      	add	r1, r2
 8011c82:	9107      	str	r1, [sp, #28]
 8011c84:	462a      	mov	r2, r5
 8011c86:	eb00 0e05 	add.w	lr, r0, r5
 8011c8a:	210a      	movs	r1, #10
 8011c8c:	4572      	cmp	r2, lr
 8011c8e:	d113      	bne.n	8011cb8 <_strtod_l+0x258>
 8011c90:	182a      	adds	r2, r5, r0
 8011c92:	2a08      	cmp	r2, #8
 8011c94:	f105 0501 	add.w	r5, r5, #1
 8011c98:	4405      	add	r5, r0
 8011c9a:	dc1c      	bgt.n	8011cd6 <_strtod_l+0x276>
 8011c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c9e:	220a      	movs	r2, #10
 8011ca0:	fb02 3301 	mla	r3, r2, r1, r3
 8011ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011caa:	1c59      	adds	r1, r3, #1
 8011cac:	911d      	str	r1, [sp, #116]	; 0x74
 8011cae:	785b      	ldrb	r3, [r3, #1]
 8011cb0:	4610      	mov	r0, r2
 8011cb2:	e7c9      	b.n	8011c48 <_strtod_l+0x1e8>
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	e7d2      	b.n	8011c5e <_strtod_l+0x1fe>
 8011cb8:	2a08      	cmp	r2, #8
 8011cba:	dc04      	bgt.n	8011cc6 <_strtod_l+0x266>
 8011cbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011cbe:	434e      	muls	r6, r1
 8011cc0:	9609      	str	r6, [sp, #36]	; 0x24
 8011cc2:	3201      	adds	r2, #1
 8011cc4:	e7e2      	b.n	8011c8c <_strtod_l+0x22c>
 8011cc6:	f102 0c01 	add.w	ip, r2, #1
 8011cca:	f1bc 0f10 	cmp.w	ip, #16
 8011cce:	bfd8      	it	le
 8011cd0:	fb01 f909 	mulle.w	r9, r1, r9
 8011cd4:	e7f5      	b.n	8011cc2 <_strtod_l+0x262>
 8011cd6:	2d10      	cmp	r5, #16
 8011cd8:	bfdc      	itt	le
 8011cda:	220a      	movle	r2, #10
 8011cdc:	fb02 3909 	mlale	r9, r2, r9, r3
 8011ce0:	e7e1      	b.n	8011ca6 <_strtod_l+0x246>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	9307      	str	r3, [sp, #28]
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	e77c      	b.n	8011be4 <_strtod_l+0x184>
 8011cea:	f04f 0c00 	mov.w	ip, #0
 8011cee:	f108 0302 	add.w	r3, r8, #2
 8011cf2:	931d      	str	r3, [sp, #116]	; 0x74
 8011cf4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011cf8:	e785      	b.n	8011c06 <_strtod_l+0x1a6>
 8011cfa:	f04f 0c01 	mov.w	ip, #1
 8011cfe:	e7f6      	b.n	8011cee <_strtod_l+0x28e>
 8011d00:	080293e4 	.word	0x080293e4
 8011d04:	080290f4 	.word	0x080290f4
 8011d08:	7ff00000 	.word	0x7ff00000
 8011d0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d0e:	1c59      	adds	r1, r3, #1
 8011d10:	911d      	str	r1, [sp, #116]	; 0x74
 8011d12:	785b      	ldrb	r3, [r3, #1]
 8011d14:	2b30      	cmp	r3, #48	; 0x30
 8011d16:	d0f9      	beq.n	8011d0c <_strtod_l+0x2ac>
 8011d18:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011d1c:	2908      	cmp	r1, #8
 8011d1e:	f63f af79 	bhi.w	8011c14 <_strtod_l+0x1b4>
 8011d22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011d26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d28:	9308      	str	r3, [sp, #32]
 8011d2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d2c:	1c59      	adds	r1, r3, #1
 8011d2e:	911d      	str	r1, [sp, #116]	; 0x74
 8011d30:	785b      	ldrb	r3, [r3, #1]
 8011d32:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011d36:	2e09      	cmp	r6, #9
 8011d38:	d937      	bls.n	8011daa <_strtod_l+0x34a>
 8011d3a:	9e08      	ldr	r6, [sp, #32]
 8011d3c:	1b89      	subs	r1, r1, r6
 8011d3e:	2908      	cmp	r1, #8
 8011d40:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011d44:	dc02      	bgt.n	8011d4c <_strtod_l+0x2ec>
 8011d46:	4576      	cmp	r6, lr
 8011d48:	bfa8      	it	ge
 8011d4a:	4676      	movge	r6, lr
 8011d4c:	f1bc 0f00 	cmp.w	ip, #0
 8011d50:	d000      	beq.n	8011d54 <_strtod_l+0x2f4>
 8011d52:	4276      	negs	r6, r6
 8011d54:	2d00      	cmp	r5, #0
 8011d56:	d14f      	bne.n	8011df8 <_strtod_l+0x398>
 8011d58:	9904      	ldr	r1, [sp, #16]
 8011d5a:	4301      	orrs	r1, r0
 8011d5c:	f47f aec2 	bne.w	8011ae4 <_strtod_l+0x84>
 8011d60:	2a00      	cmp	r2, #0
 8011d62:	f47f aedb 	bne.w	8011b1c <_strtod_l+0xbc>
 8011d66:	2b69      	cmp	r3, #105	; 0x69
 8011d68:	d027      	beq.n	8011dba <_strtod_l+0x35a>
 8011d6a:	dc24      	bgt.n	8011db6 <_strtod_l+0x356>
 8011d6c:	2b49      	cmp	r3, #73	; 0x49
 8011d6e:	d024      	beq.n	8011dba <_strtod_l+0x35a>
 8011d70:	2b4e      	cmp	r3, #78	; 0x4e
 8011d72:	f47f aed3 	bne.w	8011b1c <_strtod_l+0xbc>
 8011d76:	499e      	ldr	r1, [pc, #632]	; (8011ff0 <_strtod_l+0x590>)
 8011d78:	a81d      	add	r0, sp, #116	; 0x74
 8011d7a:	f001 fee3 	bl	8013b44 <__match>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	f43f aecc 	beq.w	8011b1c <_strtod_l+0xbc>
 8011d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b28      	cmp	r3, #40	; 0x28
 8011d8a:	d12d      	bne.n	8011de8 <_strtod_l+0x388>
 8011d8c:	4999      	ldr	r1, [pc, #612]	; (8011ff4 <_strtod_l+0x594>)
 8011d8e:	aa20      	add	r2, sp, #128	; 0x80
 8011d90:	a81d      	add	r0, sp, #116	; 0x74
 8011d92:	f001 feeb 	bl	8013b6c <__hexnan>
 8011d96:	2805      	cmp	r0, #5
 8011d98:	d126      	bne.n	8011de8 <_strtod_l+0x388>
 8011d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d9c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011da0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011da4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011da8:	e69c      	b.n	8011ae4 <_strtod_l+0x84>
 8011daa:	210a      	movs	r1, #10
 8011dac:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011db0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011db4:	e7b9      	b.n	8011d2a <_strtod_l+0x2ca>
 8011db6:	2b6e      	cmp	r3, #110	; 0x6e
 8011db8:	e7db      	b.n	8011d72 <_strtod_l+0x312>
 8011dba:	498f      	ldr	r1, [pc, #572]	; (8011ff8 <_strtod_l+0x598>)
 8011dbc:	a81d      	add	r0, sp, #116	; 0x74
 8011dbe:	f001 fec1 	bl	8013b44 <__match>
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	f43f aeaa 	beq.w	8011b1c <_strtod_l+0xbc>
 8011dc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dca:	498c      	ldr	r1, [pc, #560]	; (8011ffc <_strtod_l+0x59c>)
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	a81d      	add	r0, sp, #116	; 0x74
 8011dd0:	931d      	str	r3, [sp, #116]	; 0x74
 8011dd2:	f001 feb7 	bl	8013b44 <__match>
 8011dd6:	b910      	cbnz	r0, 8011dde <_strtod_l+0x37e>
 8011dd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dda:	3301      	adds	r3, #1
 8011ddc:	931d      	str	r3, [sp, #116]	; 0x74
 8011dde:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801200c <_strtod_l+0x5ac>
 8011de2:	f04f 0a00 	mov.w	sl, #0
 8011de6:	e67d      	b.n	8011ae4 <_strtod_l+0x84>
 8011de8:	4885      	ldr	r0, [pc, #532]	; (8012000 <_strtod_l+0x5a0>)
 8011dea:	f002 ffb1 	bl	8014d50 <nan>
 8011dee:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011df2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011df6:	e675      	b.n	8011ae4 <_strtod_l+0x84>
 8011df8:	9b07      	ldr	r3, [sp, #28]
 8011dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dfc:	1af3      	subs	r3, r6, r3
 8011dfe:	2f00      	cmp	r7, #0
 8011e00:	bf08      	it	eq
 8011e02:	462f      	moveq	r7, r5
 8011e04:	2d10      	cmp	r5, #16
 8011e06:	9308      	str	r3, [sp, #32]
 8011e08:	46a8      	mov	r8, r5
 8011e0a:	bfa8      	it	ge
 8011e0c:	f04f 0810 	movge.w	r8, #16
 8011e10:	f7ee fb90 	bl	8000534 <__aeabi_ui2d>
 8011e14:	2d09      	cmp	r5, #9
 8011e16:	4682      	mov	sl, r0
 8011e18:	468b      	mov	fp, r1
 8011e1a:	dd13      	ble.n	8011e44 <_strtod_l+0x3e4>
 8011e1c:	4b79      	ldr	r3, [pc, #484]	; (8012004 <_strtod_l+0x5a4>)
 8011e1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011e22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011e26:	f7ee fbff 	bl	8000628 <__aeabi_dmul>
 8011e2a:	4682      	mov	sl, r0
 8011e2c:	4648      	mov	r0, r9
 8011e2e:	468b      	mov	fp, r1
 8011e30:	f7ee fb80 	bl	8000534 <__aeabi_ui2d>
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	4650      	mov	r0, sl
 8011e3a:	4659      	mov	r1, fp
 8011e3c:	f7ee fa3e 	bl	80002bc <__adddf3>
 8011e40:	4682      	mov	sl, r0
 8011e42:	468b      	mov	fp, r1
 8011e44:	2d0f      	cmp	r5, #15
 8011e46:	dc38      	bgt.n	8011eba <_strtod_l+0x45a>
 8011e48:	9b08      	ldr	r3, [sp, #32]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f43f ae4a 	beq.w	8011ae4 <_strtod_l+0x84>
 8011e50:	dd24      	ble.n	8011e9c <_strtod_l+0x43c>
 8011e52:	2b16      	cmp	r3, #22
 8011e54:	dc0b      	bgt.n	8011e6e <_strtod_l+0x40e>
 8011e56:	4d6b      	ldr	r5, [pc, #428]	; (8012004 <_strtod_l+0x5a4>)
 8011e58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011e5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e60:	4652      	mov	r2, sl
 8011e62:	465b      	mov	r3, fp
 8011e64:	f7ee fbe0 	bl	8000628 <__aeabi_dmul>
 8011e68:	4682      	mov	sl, r0
 8011e6a:	468b      	mov	fp, r1
 8011e6c:	e63a      	b.n	8011ae4 <_strtod_l+0x84>
 8011e6e:	9a08      	ldr	r2, [sp, #32]
 8011e70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011e74:	4293      	cmp	r3, r2
 8011e76:	db20      	blt.n	8011eba <_strtod_l+0x45a>
 8011e78:	4c62      	ldr	r4, [pc, #392]	; (8012004 <_strtod_l+0x5a4>)
 8011e7a:	f1c5 050f 	rsb	r5, r5, #15
 8011e7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011e82:	4652      	mov	r2, sl
 8011e84:	465b      	mov	r3, fp
 8011e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e8a:	f7ee fbcd 	bl	8000628 <__aeabi_dmul>
 8011e8e:	9b08      	ldr	r3, [sp, #32]
 8011e90:	1b5d      	subs	r5, r3, r5
 8011e92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011e96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e9a:	e7e3      	b.n	8011e64 <_strtod_l+0x404>
 8011e9c:	9b08      	ldr	r3, [sp, #32]
 8011e9e:	3316      	adds	r3, #22
 8011ea0:	db0b      	blt.n	8011eba <_strtod_l+0x45a>
 8011ea2:	9b07      	ldr	r3, [sp, #28]
 8011ea4:	4a57      	ldr	r2, [pc, #348]	; (8012004 <_strtod_l+0x5a4>)
 8011ea6:	1b9e      	subs	r6, r3, r6
 8011ea8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011eac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011eb0:	4650      	mov	r0, sl
 8011eb2:	4659      	mov	r1, fp
 8011eb4:	f7ee fce2 	bl	800087c <__aeabi_ddiv>
 8011eb8:	e7d6      	b.n	8011e68 <_strtod_l+0x408>
 8011eba:	9b08      	ldr	r3, [sp, #32]
 8011ebc:	eba5 0808 	sub.w	r8, r5, r8
 8011ec0:	4498      	add	r8, r3
 8011ec2:	f1b8 0f00 	cmp.w	r8, #0
 8011ec6:	dd71      	ble.n	8011fac <_strtod_l+0x54c>
 8011ec8:	f018 030f 	ands.w	r3, r8, #15
 8011ecc:	d00a      	beq.n	8011ee4 <_strtod_l+0x484>
 8011ece:	494d      	ldr	r1, [pc, #308]	; (8012004 <_strtod_l+0x5a4>)
 8011ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ed4:	4652      	mov	r2, sl
 8011ed6:	465b      	mov	r3, fp
 8011ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011edc:	f7ee fba4 	bl	8000628 <__aeabi_dmul>
 8011ee0:	4682      	mov	sl, r0
 8011ee2:	468b      	mov	fp, r1
 8011ee4:	f038 080f 	bics.w	r8, r8, #15
 8011ee8:	d04d      	beq.n	8011f86 <_strtod_l+0x526>
 8011eea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011eee:	dd22      	ble.n	8011f36 <_strtod_l+0x4d6>
 8011ef0:	2500      	movs	r5, #0
 8011ef2:	462e      	mov	r6, r5
 8011ef4:	9509      	str	r5, [sp, #36]	; 0x24
 8011ef6:	9507      	str	r5, [sp, #28]
 8011ef8:	2322      	movs	r3, #34	; 0x22
 8011efa:	f8df b110 	ldr.w	fp, [pc, #272]	; 801200c <_strtod_l+0x5ac>
 8011efe:	6023      	str	r3, [r4, #0]
 8011f00:	f04f 0a00 	mov.w	sl, #0
 8011f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f43f adec 	beq.w	8011ae4 <_strtod_l+0x84>
 8011f0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f001 ff34 	bl	8013d7c <_Bfree>
 8011f14:	9907      	ldr	r1, [sp, #28]
 8011f16:	4620      	mov	r0, r4
 8011f18:	f001 ff30 	bl	8013d7c <_Bfree>
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f001 ff2c 	bl	8013d7c <_Bfree>
 8011f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f26:	4620      	mov	r0, r4
 8011f28:	f001 ff28 	bl	8013d7c <_Bfree>
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f001 ff24 	bl	8013d7c <_Bfree>
 8011f34:	e5d6      	b.n	8011ae4 <_strtod_l+0x84>
 8011f36:	2300      	movs	r3, #0
 8011f38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011f3c:	4650      	mov	r0, sl
 8011f3e:	4659      	mov	r1, fp
 8011f40:	4699      	mov	r9, r3
 8011f42:	f1b8 0f01 	cmp.w	r8, #1
 8011f46:	dc21      	bgt.n	8011f8c <_strtod_l+0x52c>
 8011f48:	b10b      	cbz	r3, 8011f4e <_strtod_l+0x4ee>
 8011f4a:	4682      	mov	sl, r0
 8011f4c:	468b      	mov	fp, r1
 8011f4e:	4b2e      	ldr	r3, [pc, #184]	; (8012008 <_strtod_l+0x5a8>)
 8011f50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011f54:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011f58:	4652      	mov	r2, sl
 8011f5a:	465b      	mov	r3, fp
 8011f5c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011f60:	f7ee fb62 	bl	8000628 <__aeabi_dmul>
 8011f64:	4b29      	ldr	r3, [pc, #164]	; (801200c <_strtod_l+0x5ac>)
 8011f66:	460a      	mov	r2, r1
 8011f68:	400b      	ands	r3, r1
 8011f6a:	4929      	ldr	r1, [pc, #164]	; (8012010 <_strtod_l+0x5b0>)
 8011f6c:	428b      	cmp	r3, r1
 8011f6e:	4682      	mov	sl, r0
 8011f70:	d8be      	bhi.n	8011ef0 <_strtod_l+0x490>
 8011f72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011f76:	428b      	cmp	r3, r1
 8011f78:	bf86      	itte	hi
 8011f7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012014 <_strtod_l+0x5b4>
 8011f7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011f82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011f86:	2300      	movs	r3, #0
 8011f88:	9304      	str	r3, [sp, #16]
 8011f8a:	e081      	b.n	8012090 <_strtod_l+0x630>
 8011f8c:	f018 0f01 	tst.w	r8, #1
 8011f90:	d007      	beq.n	8011fa2 <_strtod_l+0x542>
 8011f92:	4b1d      	ldr	r3, [pc, #116]	; (8012008 <_strtod_l+0x5a8>)
 8011f94:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	f7ee fb44 	bl	8000628 <__aeabi_dmul>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	f109 0901 	add.w	r9, r9, #1
 8011fa6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011faa:	e7ca      	b.n	8011f42 <_strtod_l+0x4e2>
 8011fac:	d0eb      	beq.n	8011f86 <_strtod_l+0x526>
 8011fae:	f1c8 0800 	rsb	r8, r8, #0
 8011fb2:	f018 020f 	ands.w	r2, r8, #15
 8011fb6:	d00a      	beq.n	8011fce <_strtod_l+0x56e>
 8011fb8:	4b12      	ldr	r3, [pc, #72]	; (8012004 <_strtod_l+0x5a4>)
 8011fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fbe:	4650      	mov	r0, sl
 8011fc0:	4659      	mov	r1, fp
 8011fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc6:	f7ee fc59 	bl	800087c <__aeabi_ddiv>
 8011fca:	4682      	mov	sl, r0
 8011fcc:	468b      	mov	fp, r1
 8011fce:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011fd2:	d0d8      	beq.n	8011f86 <_strtod_l+0x526>
 8011fd4:	f1b8 0f1f 	cmp.w	r8, #31
 8011fd8:	dd1e      	ble.n	8012018 <_strtod_l+0x5b8>
 8011fda:	2500      	movs	r5, #0
 8011fdc:	462e      	mov	r6, r5
 8011fde:	9509      	str	r5, [sp, #36]	; 0x24
 8011fe0:	9507      	str	r5, [sp, #28]
 8011fe2:	2322      	movs	r3, #34	; 0x22
 8011fe4:	f04f 0a00 	mov.w	sl, #0
 8011fe8:	f04f 0b00 	mov.w	fp, #0
 8011fec:	6023      	str	r3, [r4, #0]
 8011fee:	e789      	b.n	8011f04 <_strtod_l+0x4a4>
 8011ff0:	080290c5 	.word	0x080290c5
 8011ff4:	08029108 	.word	0x08029108
 8011ff8:	080290bd 	.word	0x080290bd
 8011ffc:	08029300 	.word	0x08029300
 8012000:	080291fb 	.word	0x080291fb
 8012004:	08029480 	.word	0x08029480
 8012008:	08029458 	.word	0x08029458
 801200c:	7ff00000 	.word	0x7ff00000
 8012010:	7ca00000 	.word	0x7ca00000
 8012014:	7fefffff 	.word	0x7fefffff
 8012018:	f018 0310 	ands.w	r3, r8, #16
 801201c:	bf18      	it	ne
 801201e:	236a      	movne	r3, #106	; 0x6a
 8012020:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80123d8 <_strtod_l+0x978>
 8012024:	9304      	str	r3, [sp, #16]
 8012026:	4650      	mov	r0, sl
 8012028:	4659      	mov	r1, fp
 801202a:	2300      	movs	r3, #0
 801202c:	f018 0f01 	tst.w	r8, #1
 8012030:	d004      	beq.n	801203c <_strtod_l+0x5dc>
 8012032:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012036:	f7ee faf7 	bl	8000628 <__aeabi_dmul>
 801203a:	2301      	movs	r3, #1
 801203c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012040:	f109 0908 	add.w	r9, r9, #8
 8012044:	d1f2      	bne.n	801202c <_strtod_l+0x5cc>
 8012046:	b10b      	cbz	r3, 801204c <_strtod_l+0x5ec>
 8012048:	4682      	mov	sl, r0
 801204a:	468b      	mov	fp, r1
 801204c:	9b04      	ldr	r3, [sp, #16]
 801204e:	b1bb      	cbz	r3, 8012080 <_strtod_l+0x620>
 8012050:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012054:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012058:	2b00      	cmp	r3, #0
 801205a:	4659      	mov	r1, fp
 801205c:	dd10      	ble.n	8012080 <_strtod_l+0x620>
 801205e:	2b1f      	cmp	r3, #31
 8012060:	f340 8128 	ble.w	80122b4 <_strtod_l+0x854>
 8012064:	2b34      	cmp	r3, #52	; 0x34
 8012066:	bfde      	ittt	le
 8012068:	3b20      	suble	r3, #32
 801206a:	f04f 32ff 	movle.w	r2, #4294967295
 801206e:	fa02 f303 	lslle.w	r3, r2, r3
 8012072:	f04f 0a00 	mov.w	sl, #0
 8012076:	bfcc      	ite	gt
 8012078:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801207c:	ea03 0b01 	andle.w	fp, r3, r1
 8012080:	2200      	movs	r2, #0
 8012082:	2300      	movs	r3, #0
 8012084:	4650      	mov	r0, sl
 8012086:	4659      	mov	r1, fp
 8012088:	f7ee fd36 	bl	8000af8 <__aeabi_dcmpeq>
 801208c:	2800      	cmp	r0, #0
 801208e:	d1a4      	bne.n	8011fda <_strtod_l+0x57a>
 8012090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012096:	462b      	mov	r3, r5
 8012098:	463a      	mov	r2, r7
 801209a:	4620      	mov	r0, r4
 801209c:	f001 feda 	bl	8013e54 <__s2b>
 80120a0:	9009      	str	r0, [sp, #36]	; 0x24
 80120a2:	2800      	cmp	r0, #0
 80120a4:	f43f af24 	beq.w	8011ef0 <_strtod_l+0x490>
 80120a8:	9b07      	ldr	r3, [sp, #28]
 80120aa:	1b9e      	subs	r6, r3, r6
 80120ac:	9b08      	ldr	r3, [sp, #32]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	bfb4      	ite	lt
 80120b2:	4633      	movlt	r3, r6
 80120b4:	2300      	movge	r3, #0
 80120b6:	9310      	str	r3, [sp, #64]	; 0x40
 80120b8:	9b08      	ldr	r3, [sp, #32]
 80120ba:	2500      	movs	r5, #0
 80120bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120c0:	9318      	str	r3, [sp, #96]	; 0x60
 80120c2:	462e      	mov	r6, r5
 80120c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c6:	4620      	mov	r0, r4
 80120c8:	6859      	ldr	r1, [r3, #4]
 80120ca:	f001 fe17 	bl	8013cfc <_Balloc>
 80120ce:	9007      	str	r0, [sp, #28]
 80120d0:	2800      	cmp	r0, #0
 80120d2:	f43f af11 	beq.w	8011ef8 <_strtod_l+0x498>
 80120d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d8:	691a      	ldr	r2, [r3, #16]
 80120da:	3202      	adds	r2, #2
 80120dc:	f103 010c 	add.w	r1, r3, #12
 80120e0:	0092      	lsls	r2, r2, #2
 80120e2:	300c      	adds	r0, #12
 80120e4:	f001 fdfc 	bl	8013ce0 <memcpy>
 80120e8:	ec4b ab10 	vmov	d0, sl, fp
 80120ec:	aa20      	add	r2, sp, #128	; 0x80
 80120ee:	a91f      	add	r1, sp, #124	; 0x7c
 80120f0:	4620      	mov	r0, r4
 80120f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80120f6:	f002 f9e9 	bl	80144cc <__d2b>
 80120fa:	901e      	str	r0, [sp, #120]	; 0x78
 80120fc:	2800      	cmp	r0, #0
 80120fe:	f43f aefb 	beq.w	8011ef8 <_strtod_l+0x498>
 8012102:	2101      	movs	r1, #1
 8012104:	4620      	mov	r0, r4
 8012106:	f001 ff3f 	bl	8013f88 <__i2b>
 801210a:	4606      	mov	r6, r0
 801210c:	2800      	cmp	r0, #0
 801210e:	f43f aef3 	beq.w	8011ef8 <_strtod_l+0x498>
 8012112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012114:	9904      	ldr	r1, [sp, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	bfab      	itete	ge
 801211a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801211c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801211e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012120:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012124:	bfac      	ite	ge
 8012126:	eb03 0902 	addge.w	r9, r3, r2
 801212a:	1ad7      	sublt	r7, r2, r3
 801212c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801212e:	eba3 0801 	sub.w	r8, r3, r1
 8012132:	4490      	add	r8, r2
 8012134:	4ba3      	ldr	r3, [pc, #652]	; (80123c4 <_strtod_l+0x964>)
 8012136:	f108 38ff 	add.w	r8, r8, #4294967295
 801213a:	4598      	cmp	r8, r3
 801213c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012140:	f280 80cc 	bge.w	80122dc <_strtod_l+0x87c>
 8012144:	eba3 0308 	sub.w	r3, r3, r8
 8012148:	2b1f      	cmp	r3, #31
 801214a:	eba2 0203 	sub.w	r2, r2, r3
 801214e:	f04f 0101 	mov.w	r1, #1
 8012152:	f300 80b6 	bgt.w	80122c2 <_strtod_l+0x862>
 8012156:	fa01 f303 	lsl.w	r3, r1, r3
 801215a:	9311      	str	r3, [sp, #68]	; 0x44
 801215c:	2300      	movs	r3, #0
 801215e:	930c      	str	r3, [sp, #48]	; 0x30
 8012160:	eb09 0802 	add.w	r8, r9, r2
 8012164:	9b04      	ldr	r3, [sp, #16]
 8012166:	45c1      	cmp	r9, r8
 8012168:	4417      	add	r7, r2
 801216a:	441f      	add	r7, r3
 801216c:	464b      	mov	r3, r9
 801216e:	bfa8      	it	ge
 8012170:	4643      	movge	r3, r8
 8012172:	42bb      	cmp	r3, r7
 8012174:	bfa8      	it	ge
 8012176:	463b      	movge	r3, r7
 8012178:	2b00      	cmp	r3, #0
 801217a:	bfc2      	ittt	gt
 801217c:	eba8 0803 	subgt.w	r8, r8, r3
 8012180:	1aff      	subgt	r7, r7, r3
 8012182:	eba9 0903 	subgt.w	r9, r9, r3
 8012186:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012188:	2b00      	cmp	r3, #0
 801218a:	dd17      	ble.n	80121bc <_strtod_l+0x75c>
 801218c:	4631      	mov	r1, r6
 801218e:	461a      	mov	r2, r3
 8012190:	4620      	mov	r0, r4
 8012192:	f001 ffb5 	bl	8014100 <__pow5mult>
 8012196:	4606      	mov	r6, r0
 8012198:	2800      	cmp	r0, #0
 801219a:	f43f aead 	beq.w	8011ef8 <_strtod_l+0x498>
 801219e:	4601      	mov	r1, r0
 80121a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80121a2:	4620      	mov	r0, r4
 80121a4:	f001 ff06 	bl	8013fb4 <__multiply>
 80121a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80121aa:	2800      	cmp	r0, #0
 80121ac:	f43f aea4 	beq.w	8011ef8 <_strtod_l+0x498>
 80121b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80121b2:	4620      	mov	r0, r4
 80121b4:	f001 fde2 	bl	8013d7c <_Bfree>
 80121b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121ba:	931e      	str	r3, [sp, #120]	; 0x78
 80121bc:	f1b8 0f00 	cmp.w	r8, #0
 80121c0:	f300 8091 	bgt.w	80122e6 <_strtod_l+0x886>
 80121c4:	9b08      	ldr	r3, [sp, #32]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	dd08      	ble.n	80121dc <_strtod_l+0x77c>
 80121ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80121cc:	9907      	ldr	r1, [sp, #28]
 80121ce:	4620      	mov	r0, r4
 80121d0:	f001 ff96 	bl	8014100 <__pow5mult>
 80121d4:	9007      	str	r0, [sp, #28]
 80121d6:	2800      	cmp	r0, #0
 80121d8:	f43f ae8e 	beq.w	8011ef8 <_strtod_l+0x498>
 80121dc:	2f00      	cmp	r7, #0
 80121de:	dd08      	ble.n	80121f2 <_strtod_l+0x792>
 80121e0:	9907      	ldr	r1, [sp, #28]
 80121e2:	463a      	mov	r2, r7
 80121e4:	4620      	mov	r0, r4
 80121e6:	f001 ffe5 	bl	80141b4 <__lshift>
 80121ea:	9007      	str	r0, [sp, #28]
 80121ec:	2800      	cmp	r0, #0
 80121ee:	f43f ae83 	beq.w	8011ef8 <_strtod_l+0x498>
 80121f2:	f1b9 0f00 	cmp.w	r9, #0
 80121f6:	dd08      	ble.n	801220a <_strtod_l+0x7aa>
 80121f8:	4631      	mov	r1, r6
 80121fa:	464a      	mov	r2, r9
 80121fc:	4620      	mov	r0, r4
 80121fe:	f001 ffd9 	bl	80141b4 <__lshift>
 8012202:	4606      	mov	r6, r0
 8012204:	2800      	cmp	r0, #0
 8012206:	f43f ae77 	beq.w	8011ef8 <_strtod_l+0x498>
 801220a:	9a07      	ldr	r2, [sp, #28]
 801220c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801220e:	4620      	mov	r0, r4
 8012210:	f002 f858 	bl	80142c4 <__mdiff>
 8012214:	4605      	mov	r5, r0
 8012216:	2800      	cmp	r0, #0
 8012218:	f43f ae6e 	beq.w	8011ef8 <_strtod_l+0x498>
 801221c:	68c3      	ldr	r3, [r0, #12]
 801221e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012220:	2300      	movs	r3, #0
 8012222:	60c3      	str	r3, [r0, #12]
 8012224:	4631      	mov	r1, r6
 8012226:	f002 f831 	bl	801428c <__mcmp>
 801222a:	2800      	cmp	r0, #0
 801222c:	da65      	bge.n	80122fa <_strtod_l+0x89a>
 801222e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012230:	ea53 030a 	orrs.w	r3, r3, sl
 8012234:	f040 8087 	bne.w	8012346 <_strtod_l+0x8e6>
 8012238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801223c:	2b00      	cmp	r3, #0
 801223e:	f040 8082 	bne.w	8012346 <_strtod_l+0x8e6>
 8012242:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012246:	0d1b      	lsrs	r3, r3, #20
 8012248:	051b      	lsls	r3, r3, #20
 801224a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801224e:	d97a      	bls.n	8012346 <_strtod_l+0x8e6>
 8012250:	696b      	ldr	r3, [r5, #20]
 8012252:	b913      	cbnz	r3, 801225a <_strtod_l+0x7fa>
 8012254:	692b      	ldr	r3, [r5, #16]
 8012256:	2b01      	cmp	r3, #1
 8012258:	dd75      	ble.n	8012346 <_strtod_l+0x8e6>
 801225a:	4629      	mov	r1, r5
 801225c:	2201      	movs	r2, #1
 801225e:	4620      	mov	r0, r4
 8012260:	f001 ffa8 	bl	80141b4 <__lshift>
 8012264:	4631      	mov	r1, r6
 8012266:	4605      	mov	r5, r0
 8012268:	f002 f810 	bl	801428c <__mcmp>
 801226c:	2800      	cmp	r0, #0
 801226e:	dd6a      	ble.n	8012346 <_strtod_l+0x8e6>
 8012270:	9904      	ldr	r1, [sp, #16]
 8012272:	4a55      	ldr	r2, [pc, #340]	; (80123c8 <_strtod_l+0x968>)
 8012274:	465b      	mov	r3, fp
 8012276:	2900      	cmp	r1, #0
 8012278:	f000 8085 	beq.w	8012386 <_strtod_l+0x926>
 801227c:	ea02 010b 	and.w	r1, r2, fp
 8012280:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012284:	dc7f      	bgt.n	8012386 <_strtod_l+0x926>
 8012286:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801228a:	f77f aeaa 	ble.w	8011fe2 <_strtod_l+0x582>
 801228e:	4a4f      	ldr	r2, [pc, #316]	; (80123cc <_strtod_l+0x96c>)
 8012290:	2300      	movs	r3, #0
 8012292:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8012296:	4650      	mov	r0, sl
 8012298:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801229c:	4659      	mov	r1, fp
 801229e:	f7ee f9c3 	bl	8000628 <__aeabi_dmul>
 80122a2:	460b      	mov	r3, r1
 80122a4:	4303      	orrs	r3, r0
 80122a6:	bf08      	it	eq
 80122a8:	2322      	moveq	r3, #34	; 0x22
 80122aa:	4682      	mov	sl, r0
 80122ac:	468b      	mov	fp, r1
 80122ae:	bf08      	it	eq
 80122b0:	6023      	streq	r3, [r4, #0]
 80122b2:	e62b      	b.n	8011f0c <_strtod_l+0x4ac>
 80122b4:	f04f 32ff 	mov.w	r2, #4294967295
 80122b8:	fa02 f303 	lsl.w	r3, r2, r3
 80122bc:	ea03 0a0a 	and.w	sl, r3, sl
 80122c0:	e6de      	b.n	8012080 <_strtod_l+0x620>
 80122c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80122c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80122ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80122ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80122d2:	fa01 f308 	lsl.w	r3, r1, r8
 80122d6:	930c      	str	r3, [sp, #48]	; 0x30
 80122d8:	9111      	str	r1, [sp, #68]	; 0x44
 80122da:	e741      	b.n	8012160 <_strtod_l+0x700>
 80122dc:	2300      	movs	r3, #0
 80122de:	930c      	str	r3, [sp, #48]	; 0x30
 80122e0:	2301      	movs	r3, #1
 80122e2:	9311      	str	r3, [sp, #68]	; 0x44
 80122e4:	e73c      	b.n	8012160 <_strtod_l+0x700>
 80122e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80122e8:	4642      	mov	r2, r8
 80122ea:	4620      	mov	r0, r4
 80122ec:	f001 ff62 	bl	80141b4 <__lshift>
 80122f0:	901e      	str	r0, [sp, #120]	; 0x78
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f47f af66 	bne.w	80121c4 <_strtod_l+0x764>
 80122f8:	e5fe      	b.n	8011ef8 <_strtod_l+0x498>
 80122fa:	465f      	mov	r7, fp
 80122fc:	d16e      	bne.n	80123dc <_strtod_l+0x97c>
 80122fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012304:	b342      	cbz	r2, 8012358 <_strtod_l+0x8f8>
 8012306:	4a32      	ldr	r2, [pc, #200]	; (80123d0 <_strtod_l+0x970>)
 8012308:	4293      	cmp	r3, r2
 801230a:	d128      	bne.n	801235e <_strtod_l+0x8fe>
 801230c:	9b04      	ldr	r3, [sp, #16]
 801230e:	4650      	mov	r0, sl
 8012310:	b1eb      	cbz	r3, 801234e <_strtod_l+0x8ee>
 8012312:	4a2d      	ldr	r2, [pc, #180]	; (80123c8 <_strtod_l+0x968>)
 8012314:	403a      	ands	r2, r7
 8012316:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801231a:	f04f 31ff 	mov.w	r1, #4294967295
 801231e:	d819      	bhi.n	8012354 <_strtod_l+0x8f4>
 8012320:	0d12      	lsrs	r2, r2, #20
 8012322:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012326:	fa01 f303 	lsl.w	r3, r1, r3
 801232a:	4298      	cmp	r0, r3
 801232c:	d117      	bne.n	801235e <_strtod_l+0x8fe>
 801232e:	4b29      	ldr	r3, [pc, #164]	; (80123d4 <_strtod_l+0x974>)
 8012330:	429f      	cmp	r7, r3
 8012332:	d102      	bne.n	801233a <_strtod_l+0x8da>
 8012334:	3001      	adds	r0, #1
 8012336:	f43f addf 	beq.w	8011ef8 <_strtod_l+0x498>
 801233a:	4b23      	ldr	r3, [pc, #140]	; (80123c8 <_strtod_l+0x968>)
 801233c:	403b      	ands	r3, r7
 801233e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012342:	f04f 0a00 	mov.w	sl, #0
 8012346:	9b04      	ldr	r3, [sp, #16]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d1a0      	bne.n	801228e <_strtod_l+0x82e>
 801234c:	e5de      	b.n	8011f0c <_strtod_l+0x4ac>
 801234e:	f04f 33ff 	mov.w	r3, #4294967295
 8012352:	e7ea      	b.n	801232a <_strtod_l+0x8ca>
 8012354:	460b      	mov	r3, r1
 8012356:	e7e8      	b.n	801232a <_strtod_l+0x8ca>
 8012358:	ea53 030a 	orrs.w	r3, r3, sl
 801235c:	d088      	beq.n	8012270 <_strtod_l+0x810>
 801235e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012360:	b1db      	cbz	r3, 801239a <_strtod_l+0x93a>
 8012362:	423b      	tst	r3, r7
 8012364:	d0ef      	beq.n	8012346 <_strtod_l+0x8e6>
 8012366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012368:	9a04      	ldr	r2, [sp, #16]
 801236a:	4650      	mov	r0, sl
 801236c:	4659      	mov	r1, fp
 801236e:	b1c3      	cbz	r3, 80123a2 <_strtod_l+0x942>
 8012370:	f7ff fb5a 	bl	8011a28 <sulp>
 8012374:	4602      	mov	r2, r0
 8012376:	460b      	mov	r3, r1
 8012378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801237c:	f7ed ff9e 	bl	80002bc <__adddf3>
 8012380:	4682      	mov	sl, r0
 8012382:	468b      	mov	fp, r1
 8012384:	e7df      	b.n	8012346 <_strtod_l+0x8e6>
 8012386:	4013      	ands	r3, r2
 8012388:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801238c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012390:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012394:	f04f 3aff 	mov.w	sl, #4294967295
 8012398:	e7d5      	b.n	8012346 <_strtod_l+0x8e6>
 801239a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801239c:	ea13 0f0a 	tst.w	r3, sl
 80123a0:	e7e0      	b.n	8012364 <_strtod_l+0x904>
 80123a2:	f7ff fb41 	bl	8011a28 <sulp>
 80123a6:	4602      	mov	r2, r0
 80123a8:	460b      	mov	r3, r1
 80123aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80123ae:	f7ed ff83 	bl	80002b8 <__aeabi_dsub>
 80123b2:	2200      	movs	r2, #0
 80123b4:	2300      	movs	r3, #0
 80123b6:	4682      	mov	sl, r0
 80123b8:	468b      	mov	fp, r1
 80123ba:	f7ee fb9d 	bl	8000af8 <__aeabi_dcmpeq>
 80123be:	2800      	cmp	r0, #0
 80123c0:	d0c1      	beq.n	8012346 <_strtod_l+0x8e6>
 80123c2:	e60e      	b.n	8011fe2 <_strtod_l+0x582>
 80123c4:	fffffc02 	.word	0xfffffc02
 80123c8:	7ff00000 	.word	0x7ff00000
 80123cc:	39500000 	.word	0x39500000
 80123d0:	000fffff 	.word	0x000fffff
 80123d4:	7fefffff 	.word	0x7fefffff
 80123d8:	08029120 	.word	0x08029120
 80123dc:	4631      	mov	r1, r6
 80123de:	4628      	mov	r0, r5
 80123e0:	f002 f8d0 	bl	8014584 <__ratio>
 80123e4:	ec59 8b10 	vmov	r8, r9, d0
 80123e8:	ee10 0a10 	vmov	r0, s0
 80123ec:	2200      	movs	r2, #0
 80123ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123f2:	4649      	mov	r1, r9
 80123f4:	f7ee fb94 	bl	8000b20 <__aeabi_dcmple>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d07c      	beq.n	80124f6 <_strtod_l+0xa96>
 80123fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d04c      	beq.n	801249c <_strtod_l+0xa3c>
 8012402:	4b95      	ldr	r3, [pc, #596]	; (8012658 <_strtod_l+0xbf8>)
 8012404:	2200      	movs	r2, #0
 8012406:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801240a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012658 <_strtod_l+0xbf8>
 801240e:	f04f 0800 	mov.w	r8, #0
 8012412:	4b92      	ldr	r3, [pc, #584]	; (801265c <_strtod_l+0xbfc>)
 8012414:	403b      	ands	r3, r7
 8012416:	9311      	str	r3, [sp, #68]	; 0x44
 8012418:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801241a:	4b91      	ldr	r3, [pc, #580]	; (8012660 <_strtod_l+0xc00>)
 801241c:	429a      	cmp	r2, r3
 801241e:	f040 80b2 	bne.w	8012586 <_strtod_l+0xb26>
 8012422:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801242a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801242e:	ec4b ab10 	vmov	d0, sl, fp
 8012432:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012436:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801243a:	f001 ffcb 	bl	80143d4 <__ulp>
 801243e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012442:	ec53 2b10 	vmov	r2, r3, d0
 8012446:	f7ee f8ef 	bl	8000628 <__aeabi_dmul>
 801244a:	4652      	mov	r2, sl
 801244c:	465b      	mov	r3, fp
 801244e:	f7ed ff35 	bl	80002bc <__adddf3>
 8012452:	460b      	mov	r3, r1
 8012454:	4981      	ldr	r1, [pc, #516]	; (801265c <_strtod_l+0xbfc>)
 8012456:	4a83      	ldr	r2, [pc, #524]	; (8012664 <_strtod_l+0xc04>)
 8012458:	4019      	ands	r1, r3
 801245a:	4291      	cmp	r1, r2
 801245c:	4682      	mov	sl, r0
 801245e:	d95e      	bls.n	801251e <_strtod_l+0xabe>
 8012460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012462:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012466:	4293      	cmp	r3, r2
 8012468:	d103      	bne.n	8012472 <_strtod_l+0xa12>
 801246a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801246c:	3301      	adds	r3, #1
 801246e:	f43f ad43 	beq.w	8011ef8 <_strtod_l+0x498>
 8012472:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012670 <_strtod_l+0xc10>
 8012476:	f04f 3aff 	mov.w	sl, #4294967295
 801247a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801247c:	4620      	mov	r0, r4
 801247e:	f001 fc7d 	bl	8013d7c <_Bfree>
 8012482:	9907      	ldr	r1, [sp, #28]
 8012484:	4620      	mov	r0, r4
 8012486:	f001 fc79 	bl	8013d7c <_Bfree>
 801248a:	4631      	mov	r1, r6
 801248c:	4620      	mov	r0, r4
 801248e:	f001 fc75 	bl	8013d7c <_Bfree>
 8012492:	4629      	mov	r1, r5
 8012494:	4620      	mov	r0, r4
 8012496:	f001 fc71 	bl	8013d7c <_Bfree>
 801249a:	e613      	b.n	80120c4 <_strtod_l+0x664>
 801249c:	f1ba 0f00 	cmp.w	sl, #0
 80124a0:	d11b      	bne.n	80124da <_strtod_l+0xa7a>
 80124a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124a6:	b9f3      	cbnz	r3, 80124e6 <_strtod_l+0xa86>
 80124a8:	4b6b      	ldr	r3, [pc, #428]	; (8012658 <_strtod_l+0xbf8>)
 80124aa:	2200      	movs	r2, #0
 80124ac:	4640      	mov	r0, r8
 80124ae:	4649      	mov	r1, r9
 80124b0:	f7ee fb2c 	bl	8000b0c <__aeabi_dcmplt>
 80124b4:	b9d0      	cbnz	r0, 80124ec <_strtod_l+0xa8c>
 80124b6:	4640      	mov	r0, r8
 80124b8:	4649      	mov	r1, r9
 80124ba:	4b6b      	ldr	r3, [pc, #428]	; (8012668 <_strtod_l+0xc08>)
 80124bc:	2200      	movs	r2, #0
 80124be:	f7ee f8b3 	bl	8000628 <__aeabi_dmul>
 80124c2:	4680      	mov	r8, r0
 80124c4:	4689      	mov	r9, r1
 80124c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80124ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80124ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80124d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80124d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80124d8:	e79b      	b.n	8012412 <_strtod_l+0x9b2>
 80124da:	f1ba 0f01 	cmp.w	sl, #1
 80124de:	d102      	bne.n	80124e6 <_strtod_l+0xa86>
 80124e0:	2f00      	cmp	r7, #0
 80124e2:	f43f ad7e 	beq.w	8011fe2 <_strtod_l+0x582>
 80124e6:	4b61      	ldr	r3, [pc, #388]	; (801266c <_strtod_l+0xc0c>)
 80124e8:	2200      	movs	r2, #0
 80124ea:	e78c      	b.n	8012406 <_strtod_l+0x9a6>
 80124ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012668 <_strtod_l+0xc08>
 80124f0:	f04f 0800 	mov.w	r8, #0
 80124f4:	e7e7      	b.n	80124c6 <_strtod_l+0xa66>
 80124f6:	4b5c      	ldr	r3, [pc, #368]	; (8012668 <_strtod_l+0xc08>)
 80124f8:	4640      	mov	r0, r8
 80124fa:	4649      	mov	r1, r9
 80124fc:	2200      	movs	r2, #0
 80124fe:	f7ee f893 	bl	8000628 <__aeabi_dmul>
 8012502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012504:	4680      	mov	r8, r0
 8012506:	4689      	mov	r9, r1
 8012508:	b933      	cbnz	r3, 8012518 <_strtod_l+0xab8>
 801250a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801250e:	9012      	str	r0, [sp, #72]	; 0x48
 8012510:	9313      	str	r3, [sp, #76]	; 0x4c
 8012512:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012516:	e7dd      	b.n	80124d4 <_strtod_l+0xa74>
 8012518:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801251c:	e7f9      	b.n	8012512 <_strtod_l+0xab2>
 801251e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012522:	9b04      	ldr	r3, [sp, #16]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d1a8      	bne.n	801247a <_strtod_l+0xa1a>
 8012528:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801252c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801252e:	0d1b      	lsrs	r3, r3, #20
 8012530:	051b      	lsls	r3, r3, #20
 8012532:	429a      	cmp	r2, r3
 8012534:	d1a1      	bne.n	801247a <_strtod_l+0xa1a>
 8012536:	4640      	mov	r0, r8
 8012538:	4649      	mov	r1, r9
 801253a:	f7ee fbd5 	bl	8000ce8 <__aeabi_d2lz>
 801253e:	f7ee f845 	bl	80005cc <__aeabi_l2d>
 8012542:	4602      	mov	r2, r0
 8012544:	460b      	mov	r3, r1
 8012546:	4640      	mov	r0, r8
 8012548:	4649      	mov	r1, r9
 801254a:	f7ed feb5 	bl	80002b8 <__aeabi_dsub>
 801254e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012554:	ea43 030a 	orr.w	r3, r3, sl
 8012558:	4313      	orrs	r3, r2
 801255a:	4680      	mov	r8, r0
 801255c:	4689      	mov	r9, r1
 801255e:	d053      	beq.n	8012608 <_strtod_l+0xba8>
 8012560:	a335      	add	r3, pc, #212	; (adr r3, 8012638 <_strtod_l+0xbd8>)
 8012562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012566:	f7ee fad1 	bl	8000b0c <__aeabi_dcmplt>
 801256a:	2800      	cmp	r0, #0
 801256c:	f47f acce 	bne.w	8011f0c <_strtod_l+0x4ac>
 8012570:	a333      	add	r3, pc, #204	; (adr r3, 8012640 <_strtod_l+0xbe0>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	4640      	mov	r0, r8
 8012578:	4649      	mov	r1, r9
 801257a:	f7ee fae5 	bl	8000b48 <__aeabi_dcmpgt>
 801257e:	2800      	cmp	r0, #0
 8012580:	f43f af7b 	beq.w	801247a <_strtod_l+0xa1a>
 8012584:	e4c2      	b.n	8011f0c <_strtod_l+0x4ac>
 8012586:	9b04      	ldr	r3, [sp, #16]
 8012588:	b333      	cbz	r3, 80125d8 <_strtod_l+0xb78>
 801258a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801258c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012590:	d822      	bhi.n	80125d8 <_strtod_l+0xb78>
 8012592:	a32d      	add	r3, pc, #180	; (adr r3, 8012648 <_strtod_l+0xbe8>)
 8012594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012598:	4640      	mov	r0, r8
 801259a:	4649      	mov	r1, r9
 801259c:	f7ee fac0 	bl	8000b20 <__aeabi_dcmple>
 80125a0:	b1a0      	cbz	r0, 80125cc <_strtod_l+0xb6c>
 80125a2:	4649      	mov	r1, r9
 80125a4:	4640      	mov	r0, r8
 80125a6:	f7ee fb17 	bl	8000bd8 <__aeabi_d2uiz>
 80125aa:	2801      	cmp	r0, #1
 80125ac:	bf38      	it	cc
 80125ae:	2001      	movcc	r0, #1
 80125b0:	f7ed ffc0 	bl	8000534 <__aeabi_ui2d>
 80125b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125b6:	4680      	mov	r8, r0
 80125b8:	4689      	mov	r9, r1
 80125ba:	bb13      	cbnz	r3, 8012602 <_strtod_l+0xba2>
 80125bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125c0:	9014      	str	r0, [sp, #80]	; 0x50
 80125c2:	9315      	str	r3, [sp, #84]	; 0x54
 80125c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80125c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80125cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80125d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80125d4:	1a9b      	subs	r3, r3, r2
 80125d6:	930d      	str	r3, [sp, #52]	; 0x34
 80125d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80125dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80125e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80125e4:	f001 fef6 	bl	80143d4 <__ulp>
 80125e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80125ec:	ec53 2b10 	vmov	r2, r3, d0
 80125f0:	f7ee f81a 	bl	8000628 <__aeabi_dmul>
 80125f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80125f8:	f7ed fe60 	bl	80002bc <__adddf3>
 80125fc:	4682      	mov	sl, r0
 80125fe:	468b      	mov	fp, r1
 8012600:	e78f      	b.n	8012522 <_strtod_l+0xac2>
 8012602:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8012606:	e7dd      	b.n	80125c4 <_strtod_l+0xb64>
 8012608:	a311      	add	r3, pc, #68	; (adr r3, 8012650 <_strtod_l+0xbf0>)
 801260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260e:	f7ee fa7d 	bl	8000b0c <__aeabi_dcmplt>
 8012612:	e7b4      	b.n	801257e <_strtod_l+0xb1e>
 8012614:	2300      	movs	r3, #0
 8012616:	930e      	str	r3, [sp, #56]	; 0x38
 8012618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801261a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801261c:	6013      	str	r3, [r2, #0]
 801261e:	f7ff ba65 	b.w	8011aec <_strtod_l+0x8c>
 8012622:	2b65      	cmp	r3, #101	; 0x65
 8012624:	f43f ab5d 	beq.w	8011ce2 <_strtod_l+0x282>
 8012628:	2b45      	cmp	r3, #69	; 0x45
 801262a:	f43f ab5a 	beq.w	8011ce2 <_strtod_l+0x282>
 801262e:	2201      	movs	r2, #1
 8012630:	f7ff bb92 	b.w	8011d58 <_strtod_l+0x2f8>
 8012634:	f3af 8000 	nop.w
 8012638:	94a03595 	.word	0x94a03595
 801263c:	3fdfffff 	.word	0x3fdfffff
 8012640:	35afe535 	.word	0x35afe535
 8012644:	3fe00000 	.word	0x3fe00000
 8012648:	ffc00000 	.word	0xffc00000
 801264c:	41dfffff 	.word	0x41dfffff
 8012650:	94a03595 	.word	0x94a03595
 8012654:	3fcfffff 	.word	0x3fcfffff
 8012658:	3ff00000 	.word	0x3ff00000
 801265c:	7ff00000 	.word	0x7ff00000
 8012660:	7fe00000 	.word	0x7fe00000
 8012664:	7c9fffff 	.word	0x7c9fffff
 8012668:	3fe00000 	.word	0x3fe00000
 801266c:	bff00000 	.word	0xbff00000
 8012670:	7fefffff 	.word	0x7fefffff

08012674 <_strtod_r>:
 8012674:	4b01      	ldr	r3, [pc, #4]	; (801267c <_strtod_r+0x8>)
 8012676:	f7ff b9f3 	b.w	8011a60 <_strtod_l>
 801267a:	bf00      	nop
 801267c:	200000a8 	.word	0x200000a8

08012680 <strtod>:
 8012680:	460a      	mov	r2, r1
 8012682:	4601      	mov	r1, r0
 8012684:	4802      	ldr	r0, [pc, #8]	; (8012690 <strtod+0x10>)
 8012686:	4b03      	ldr	r3, [pc, #12]	; (8012694 <strtod+0x14>)
 8012688:	6800      	ldr	r0, [r0, #0]
 801268a:	f7ff b9e9 	b.w	8011a60 <_strtod_l>
 801268e:	bf00      	nop
 8012690:	20000040 	.word	0x20000040
 8012694:	200000a8 	.word	0x200000a8

08012698 <strtok>:
 8012698:	4b16      	ldr	r3, [pc, #88]	; (80126f4 <strtok+0x5c>)
 801269a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801269c:	681e      	ldr	r6, [r3, #0]
 801269e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80126a0:	4605      	mov	r5, r0
 80126a2:	b9fc      	cbnz	r4, 80126e4 <strtok+0x4c>
 80126a4:	2050      	movs	r0, #80	; 0x50
 80126a6:	9101      	str	r1, [sp, #4]
 80126a8:	f001 fb00 	bl	8013cac <malloc>
 80126ac:	9901      	ldr	r1, [sp, #4]
 80126ae:	65b0      	str	r0, [r6, #88]	; 0x58
 80126b0:	4602      	mov	r2, r0
 80126b2:	b920      	cbnz	r0, 80126be <strtok+0x26>
 80126b4:	4b10      	ldr	r3, [pc, #64]	; (80126f8 <strtok+0x60>)
 80126b6:	4811      	ldr	r0, [pc, #68]	; (80126fc <strtok+0x64>)
 80126b8:	2157      	movs	r1, #87	; 0x57
 80126ba:	f000 f8d9 	bl	8012870 <__assert_func>
 80126be:	e9c0 4400 	strd	r4, r4, [r0]
 80126c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80126c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80126ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80126ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80126d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80126d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80126da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80126de:	6184      	str	r4, [r0, #24]
 80126e0:	7704      	strb	r4, [r0, #28]
 80126e2:	6244      	str	r4, [r0, #36]	; 0x24
 80126e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80126e6:	2301      	movs	r3, #1
 80126e8:	4628      	mov	r0, r5
 80126ea:	b002      	add	sp, #8
 80126ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126f0:	f000 b806 	b.w	8012700 <__strtok_r>
 80126f4:	20000040 	.word	0x20000040
 80126f8:	08029148 	.word	0x08029148
 80126fc:	0802915f 	.word	0x0802915f

08012700 <__strtok_r>:
 8012700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012702:	b908      	cbnz	r0, 8012708 <__strtok_r+0x8>
 8012704:	6810      	ldr	r0, [r2, #0]
 8012706:	b188      	cbz	r0, 801272c <__strtok_r+0x2c>
 8012708:	4604      	mov	r4, r0
 801270a:	4620      	mov	r0, r4
 801270c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012710:	460f      	mov	r7, r1
 8012712:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012716:	b91e      	cbnz	r6, 8012720 <__strtok_r+0x20>
 8012718:	b965      	cbnz	r5, 8012734 <__strtok_r+0x34>
 801271a:	6015      	str	r5, [r2, #0]
 801271c:	4628      	mov	r0, r5
 801271e:	e005      	b.n	801272c <__strtok_r+0x2c>
 8012720:	42b5      	cmp	r5, r6
 8012722:	d1f6      	bne.n	8012712 <__strtok_r+0x12>
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1f0      	bne.n	801270a <__strtok_r+0xa>
 8012728:	6014      	str	r4, [r2, #0]
 801272a:	7003      	strb	r3, [r0, #0]
 801272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801272e:	461c      	mov	r4, r3
 8012730:	e00c      	b.n	801274c <__strtok_r+0x4c>
 8012732:	b915      	cbnz	r5, 801273a <__strtok_r+0x3a>
 8012734:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012738:	460e      	mov	r6, r1
 801273a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801273e:	42ab      	cmp	r3, r5
 8012740:	d1f7      	bne.n	8012732 <__strtok_r+0x32>
 8012742:	2b00      	cmp	r3, #0
 8012744:	d0f3      	beq.n	801272e <__strtok_r+0x2e>
 8012746:	2300      	movs	r3, #0
 8012748:	f804 3c01 	strb.w	r3, [r4, #-1]
 801274c:	6014      	str	r4, [r2, #0]
 801274e:	e7ed      	b.n	801272c <__strtok_r+0x2c>

08012750 <_strtol_l.isra.0>:
 8012750:	2b01      	cmp	r3, #1
 8012752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012756:	d001      	beq.n	801275c <_strtol_l.isra.0+0xc>
 8012758:	2b24      	cmp	r3, #36	; 0x24
 801275a:	d906      	bls.n	801276a <_strtol_l.isra.0+0x1a>
 801275c:	f7fe fa92 	bl	8010c84 <__errno>
 8012760:	2316      	movs	r3, #22
 8012762:	6003      	str	r3, [r0, #0]
 8012764:	2000      	movs	r0, #0
 8012766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801276a:	4f3a      	ldr	r7, [pc, #232]	; (8012854 <_strtol_l.isra.0+0x104>)
 801276c:	468e      	mov	lr, r1
 801276e:	4676      	mov	r6, lr
 8012770:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012774:	5de5      	ldrb	r5, [r4, r7]
 8012776:	f015 0508 	ands.w	r5, r5, #8
 801277a:	d1f8      	bne.n	801276e <_strtol_l.isra.0+0x1e>
 801277c:	2c2d      	cmp	r4, #45	; 0x2d
 801277e:	d134      	bne.n	80127ea <_strtol_l.isra.0+0x9a>
 8012780:	f89e 4000 	ldrb.w	r4, [lr]
 8012784:	f04f 0801 	mov.w	r8, #1
 8012788:	f106 0e02 	add.w	lr, r6, #2
 801278c:	2b00      	cmp	r3, #0
 801278e:	d05c      	beq.n	801284a <_strtol_l.isra.0+0xfa>
 8012790:	2b10      	cmp	r3, #16
 8012792:	d10c      	bne.n	80127ae <_strtol_l.isra.0+0x5e>
 8012794:	2c30      	cmp	r4, #48	; 0x30
 8012796:	d10a      	bne.n	80127ae <_strtol_l.isra.0+0x5e>
 8012798:	f89e 4000 	ldrb.w	r4, [lr]
 801279c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80127a0:	2c58      	cmp	r4, #88	; 0x58
 80127a2:	d14d      	bne.n	8012840 <_strtol_l.isra.0+0xf0>
 80127a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80127a8:	2310      	movs	r3, #16
 80127aa:	f10e 0e02 	add.w	lr, lr, #2
 80127ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80127b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80127b6:	2600      	movs	r6, #0
 80127b8:	fbbc f9f3 	udiv	r9, ip, r3
 80127bc:	4635      	mov	r5, r6
 80127be:	fb03 ca19 	mls	sl, r3, r9, ip
 80127c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80127c6:	2f09      	cmp	r7, #9
 80127c8:	d818      	bhi.n	80127fc <_strtol_l.isra.0+0xac>
 80127ca:	463c      	mov	r4, r7
 80127cc:	42a3      	cmp	r3, r4
 80127ce:	dd24      	ble.n	801281a <_strtol_l.isra.0+0xca>
 80127d0:	2e00      	cmp	r6, #0
 80127d2:	db1f      	blt.n	8012814 <_strtol_l.isra.0+0xc4>
 80127d4:	45a9      	cmp	r9, r5
 80127d6:	d31d      	bcc.n	8012814 <_strtol_l.isra.0+0xc4>
 80127d8:	d101      	bne.n	80127de <_strtol_l.isra.0+0x8e>
 80127da:	45a2      	cmp	sl, r4
 80127dc:	db1a      	blt.n	8012814 <_strtol_l.isra.0+0xc4>
 80127de:	fb05 4503 	mla	r5, r5, r3, r4
 80127e2:	2601      	movs	r6, #1
 80127e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80127e8:	e7eb      	b.n	80127c2 <_strtol_l.isra.0+0x72>
 80127ea:	2c2b      	cmp	r4, #43	; 0x2b
 80127ec:	bf08      	it	eq
 80127ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80127f2:	46a8      	mov	r8, r5
 80127f4:	bf08      	it	eq
 80127f6:	f106 0e02 	addeq.w	lr, r6, #2
 80127fa:	e7c7      	b.n	801278c <_strtol_l.isra.0+0x3c>
 80127fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012800:	2f19      	cmp	r7, #25
 8012802:	d801      	bhi.n	8012808 <_strtol_l.isra.0+0xb8>
 8012804:	3c37      	subs	r4, #55	; 0x37
 8012806:	e7e1      	b.n	80127cc <_strtol_l.isra.0+0x7c>
 8012808:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801280c:	2f19      	cmp	r7, #25
 801280e:	d804      	bhi.n	801281a <_strtol_l.isra.0+0xca>
 8012810:	3c57      	subs	r4, #87	; 0x57
 8012812:	e7db      	b.n	80127cc <_strtol_l.isra.0+0x7c>
 8012814:	f04f 36ff 	mov.w	r6, #4294967295
 8012818:	e7e4      	b.n	80127e4 <_strtol_l.isra.0+0x94>
 801281a:	2e00      	cmp	r6, #0
 801281c:	da05      	bge.n	801282a <_strtol_l.isra.0+0xda>
 801281e:	2322      	movs	r3, #34	; 0x22
 8012820:	6003      	str	r3, [r0, #0]
 8012822:	4665      	mov	r5, ip
 8012824:	b942      	cbnz	r2, 8012838 <_strtol_l.isra.0+0xe8>
 8012826:	4628      	mov	r0, r5
 8012828:	e79d      	b.n	8012766 <_strtol_l.isra.0+0x16>
 801282a:	f1b8 0f00 	cmp.w	r8, #0
 801282e:	d000      	beq.n	8012832 <_strtol_l.isra.0+0xe2>
 8012830:	426d      	negs	r5, r5
 8012832:	2a00      	cmp	r2, #0
 8012834:	d0f7      	beq.n	8012826 <_strtol_l.isra.0+0xd6>
 8012836:	b10e      	cbz	r6, 801283c <_strtol_l.isra.0+0xec>
 8012838:	f10e 31ff 	add.w	r1, lr, #4294967295
 801283c:	6011      	str	r1, [r2, #0]
 801283e:	e7f2      	b.n	8012826 <_strtol_l.isra.0+0xd6>
 8012840:	2430      	movs	r4, #48	; 0x30
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1b3      	bne.n	80127ae <_strtol_l.isra.0+0x5e>
 8012846:	2308      	movs	r3, #8
 8012848:	e7b1      	b.n	80127ae <_strtol_l.isra.0+0x5e>
 801284a:	2c30      	cmp	r4, #48	; 0x30
 801284c:	d0a4      	beq.n	8012798 <_strtol_l.isra.0+0x48>
 801284e:	230a      	movs	r3, #10
 8012850:	e7ad      	b.n	80127ae <_strtol_l.isra.0+0x5e>
 8012852:	bf00      	nop
 8012854:	080291fd 	.word	0x080291fd

08012858 <_strtol_r>:
 8012858:	f7ff bf7a 	b.w	8012750 <_strtol_l.isra.0>

0801285c <strtol>:
 801285c:	4613      	mov	r3, r2
 801285e:	460a      	mov	r2, r1
 8012860:	4601      	mov	r1, r0
 8012862:	4802      	ldr	r0, [pc, #8]	; (801286c <strtol+0x10>)
 8012864:	6800      	ldr	r0, [r0, #0]
 8012866:	f7ff bf73 	b.w	8012750 <_strtol_l.isra.0>
 801286a:	bf00      	nop
 801286c:	20000040 	.word	0x20000040

08012870 <__assert_func>:
 8012870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012872:	4614      	mov	r4, r2
 8012874:	461a      	mov	r2, r3
 8012876:	4b09      	ldr	r3, [pc, #36]	; (801289c <__assert_func+0x2c>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4605      	mov	r5, r0
 801287c:	68d8      	ldr	r0, [r3, #12]
 801287e:	b14c      	cbz	r4, 8012894 <__assert_func+0x24>
 8012880:	4b07      	ldr	r3, [pc, #28]	; (80128a0 <__assert_func+0x30>)
 8012882:	9100      	str	r1, [sp, #0]
 8012884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012888:	4906      	ldr	r1, [pc, #24]	; (80128a4 <__assert_func+0x34>)
 801288a:	462b      	mov	r3, r5
 801288c:	f000 fe88 	bl	80135a0 <fiprintf>
 8012890:	f002 fb56 	bl	8014f40 <abort>
 8012894:	4b04      	ldr	r3, [pc, #16]	; (80128a8 <__assert_func+0x38>)
 8012896:	461c      	mov	r4, r3
 8012898:	e7f3      	b.n	8012882 <__assert_func+0x12>
 801289a:	bf00      	nop
 801289c:	20000040 	.word	0x20000040
 80128a0:	080291c0 	.word	0x080291c0
 80128a4:	080291cd 	.word	0x080291cd
 80128a8:	080291fb 	.word	0x080291fb

080128ac <quorem>:
 80128ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128b0:	6903      	ldr	r3, [r0, #16]
 80128b2:	690c      	ldr	r4, [r1, #16]
 80128b4:	42a3      	cmp	r3, r4
 80128b6:	4607      	mov	r7, r0
 80128b8:	f2c0 8081 	blt.w	80129be <quorem+0x112>
 80128bc:	3c01      	subs	r4, #1
 80128be:	f101 0814 	add.w	r8, r1, #20
 80128c2:	f100 0514 	add.w	r5, r0, #20
 80128c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80128d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128d4:	3301      	adds	r3, #1
 80128d6:	429a      	cmp	r2, r3
 80128d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80128e4:	d331      	bcc.n	801294a <quorem+0x9e>
 80128e6:	f04f 0e00 	mov.w	lr, #0
 80128ea:	4640      	mov	r0, r8
 80128ec:	46ac      	mov	ip, r5
 80128ee:	46f2      	mov	sl, lr
 80128f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80128f4:	b293      	uxth	r3, r2
 80128f6:	fb06 e303 	mla	r3, r6, r3, lr
 80128fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128fe:	b29b      	uxth	r3, r3
 8012900:	ebaa 0303 	sub.w	r3, sl, r3
 8012904:	0c12      	lsrs	r2, r2, #16
 8012906:	f8dc a000 	ldr.w	sl, [ip]
 801290a:	fb06 e202 	mla	r2, r6, r2, lr
 801290e:	fa13 f38a 	uxtah	r3, r3, sl
 8012912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012916:	fa1f fa82 	uxth.w	sl, r2
 801291a:	f8dc 2000 	ldr.w	r2, [ip]
 801291e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012922:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012926:	b29b      	uxth	r3, r3
 8012928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801292c:	4581      	cmp	r9, r0
 801292e:	f84c 3b04 	str.w	r3, [ip], #4
 8012932:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012936:	d2db      	bcs.n	80128f0 <quorem+0x44>
 8012938:	f855 300b 	ldr.w	r3, [r5, fp]
 801293c:	b92b      	cbnz	r3, 801294a <quorem+0x9e>
 801293e:	9b01      	ldr	r3, [sp, #4]
 8012940:	3b04      	subs	r3, #4
 8012942:	429d      	cmp	r5, r3
 8012944:	461a      	mov	r2, r3
 8012946:	d32e      	bcc.n	80129a6 <quorem+0xfa>
 8012948:	613c      	str	r4, [r7, #16]
 801294a:	4638      	mov	r0, r7
 801294c:	f001 fc9e 	bl	801428c <__mcmp>
 8012950:	2800      	cmp	r0, #0
 8012952:	db24      	blt.n	801299e <quorem+0xf2>
 8012954:	3601      	adds	r6, #1
 8012956:	4628      	mov	r0, r5
 8012958:	f04f 0c00 	mov.w	ip, #0
 801295c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012960:	f8d0 e000 	ldr.w	lr, [r0]
 8012964:	b293      	uxth	r3, r2
 8012966:	ebac 0303 	sub.w	r3, ip, r3
 801296a:	0c12      	lsrs	r2, r2, #16
 801296c:	fa13 f38e 	uxtah	r3, r3, lr
 8012970:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012978:	b29b      	uxth	r3, r3
 801297a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801297e:	45c1      	cmp	r9, r8
 8012980:	f840 3b04 	str.w	r3, [r0], #4
 8012984:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012988:	d2e8      	bcs.n	801295c <quorem+0xb0>
 801298a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801298e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012992:	b922      	cbnz	r2, 801299e <quorem+0xf2>
 8012994:	3b04      	subs	r3, #4
 8012996:	429d      	cmp	r5, r3
 8012998:	461a      	mov	r2, r3
 801299a:	d30a      	bcc.n	80129b2 <quorem+0x106>
 801299c:	613c      	str	r4, [r7, #16]
 801299e:	4630      	mov	r0, r6
 80129a0:	b003      	add	sp, #12
 80129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a6:	6812      	ldr	r2, [r2, #0]
 80129a8:	3b04      	subs	r3, #4
 80129aa:	2a00      	cmp	r2, #0
 80129ac:	d1cc      	bne.n	8012948 <quorem+0x9c>
 80129ae:	3c01      	subs	r4, #1
 80129b0:	e7c7      	b.n	8012942 <quorem+0x96>
 80129b2:	6812      	ldr	r2, [r2, #0]
 80129b4:	3b04      	subs	r3, #4
 80129b6:	2a00      	cmp	r2, #0
 80129b8:	d1f0      	bne.n	801299c <quorem+0xf0>
 80129ba:	3c01      	subs	r4, #1
 80129bc:	e7eb      	b.n	8012996 <quorem+0xea>
 80129be:	2000      	movs	r0, #0
 80129c0:	e7ee      	b.n	80129a0 <quorem+0xf4>
 80129c2:	0000      	movs	r0, r0
 80129c4:	0000      	movs	r0, r0
	...

080129c8 <_dtoa_r>:
 80129c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129cc:	ed2d 8b02 	vpush	{d8}
 80129d0:	ec57 6b10 	vmov	r6, r7, d0
 80129d4:	b095      	sub	sp, #84	; 0x54
 80129d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80129dc:	9105      	str	r1, [sp, #20]
 80129de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80129e2:	4604      	mov	r4, r0
 80129e4:	9209      	str	r2, [sp, #36]	; 0x24
 80129e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80129e8:	b975      	cbnz	r5, 8012a08 <_dtoa_r+0x40>
 80129ea:	2010      	movs	r0, #16
 80129ec:	f001 f95e 	bl	8013cac <malloc>
 80129f0:	4602      	mov	r2, r0
 80129f2:	6260      	str	r0, [r4, #36]	; 0x24
 80129f4:	b920      	cbnz	r0, 8012a00 <_dtoa_r+0x38>
 80129f6:	4bb2      	ldr	r3, [pc, #712]	; (8012cc0 <_dtoa_r+0x2f8>)
 80129f8:	21ea      	movs	r1, #234	; 0xea
 80129fa:	48b2      	ldr	r0, [pc, #712]	; (8012cc4 <_dtoa_r+0x2fc>)
 80129fc:	f7ff ff38 	bl	8012870 <__assert_func>
 8012a00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012a04:	6005      	str	r5, [r0, #0]
 8012a06:	60c5      	str	r5, [r0, #12]
 8012a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a0a:	6819      	ldr	r1, [r3, #0]
 8012a0c:	b151      	cbz	r1, 8012a24 <_dtoa_r+0x5c>
 8012a0e:	685a      	ldr	r2, [r3, #4]
 8012a10:	604a      	str	r2, [r1, #4]
 8012a12:	2301      	movs	r3, #1
 8012a14:	4093      	lsls	r3, r2
 8012a16:	608b      	str	r3, [r1, #8]
 8012a18:	4620      	mov	r0, r4
 8012a1a:	f001 f9af 	bl	8013d7c <_Bfree>
 8012a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a20:	2200      	movs	r2, #0
 8012a22:	601a      	str	r2, [r3, #0]
 8012a24:	1e3b      	subs	r3, r7, #0
 8012a26:	bfb9      	ittee	lt
 8012a28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012a2c:	9303      	strlt	r3, [sp, #12]
 8012a2e:	2300      	movge	r3, #0
 8012a30:	f8c8 3000 	strge.w	r3, [r8]
 8012a34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012a38:	4ba3      	ldr	r3, [pc, #652]	; (8012cc8 <_dtoa_r+0x300>)
 8012a3a:	bfbc      	itt	lt
 8012a3c:	2201      	movlt	r2, #1
 8012a3e:	f8c8 2000 	strlt.w	r2, [r8]
 8012a42:	ea33 0309 	bics.w	r3, r3, r9
 8012a46:	d11b      	bne.n	8012a80 <_dtoa_r+0xb8>
 8012a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a4e:	6013      	str	r3, [r2, #0]
 8012a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a54:	4333      	orrs	r3, r6
 8012a56:	f000 857a 	beq.w	801354e <_dtoa_r+0xb86>
 8012a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a5c:	b963      	cbnz	r3, 8012a78 <_dtoa_r+0xb0>
 8012a5e:	4b9b      	ldr	r3, [pc, #620]	; (8012ccc <_dtoa_r+0x304>)
 8012a60:	e024      	b.n	8012aac <_dtoa_r+0xe4>
 8012a62:	4b9b      	ldr	r3, [pc, #620]	; (8012cd0 <_dtoa_r+0x308>)
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	3308      	adds	r3, #8
 8012a68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a6a:	6013      	str	r3, [r2, #0]
 8012a6c:	9800      	ldr	r0, [sp, #0]
 8012a6e:	b015      	add	sp, #84	; 0x54
 8012a70:	ecbd 8b02 	vpop	{d8}
 8012a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a78:	4b94      	ldr	r3, [pc, #592]	; (8012ccc <_dtoa_r+0x304>)
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	3303      	adds	r3, #3
 8012a7e:	e7f3      	b.n	8012a68 <_dtoa_r+0xa0>
 8012a80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a84:	2200      	movs	r2, #0
 8012a86:	ec51 0b17 	vmov	r0, r1, d7
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012a90:	f7ee f832 	bl	8000af8 <__aeabi_dcmpeq>
 8012a94:	4680      	mov	r8, r0
 8012a96:	b158      	cbz	r0, 8012ab0 <_dtoa_r+0xe8>
 8012a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	6013      	str	r3, [r2, #0]
 8012a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	f000 8551 	beq.w	8013548 <_dtoa_r+0xb80>
 8012aa6:	488b      	ldr	r0, [pc, #556]	; (8012cd4 <_dtoa_r+0x30c>)
 8012aa8:	6018      	str	r0, [r3, #0]
 8012aaa:	1e43      	subs	r3, r0, #1
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	e7dd      	b.n	8012a6c <_dtoa_r+0xa4>
 8012ab0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012ab4:	aa12      	add	r2, sp, #72	; 0x48
 8012ab6:	a913      	add	r1, sp, #76	; 0x4c
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f001 fd07 	bl	80144cc <__d2b>
 8012abe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ac2:	4683      	mov	fp, r0
 8012ac4:	2d00      	cmp	r5, #0
 8012ac6:	d07c      	beq.n	8012bc2 <_dtoa_r+0x1fa>
 8012ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ad2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012ad6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012ada:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012ade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012ae2:	4b7d      	ldr	r3, [pc, #500]	; (8012cd8 <_dtoa_r+0x310>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	4639      	mov	r1, r7
 8012aea:	f7ed fbe5 	bl	80002b8 <__aeabi_dsub>
 8012aee:	a36e      	add	r3, pc, #440	; (adr r3, 8012ca8 <_dtoa_r+0x2e0>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	f7ed fd98 	bl	8000628 <__aeabi_dmul>
 8012af8:	a36d      	add	r3, pc, #436	; (adr r3, 8012cb0 <_dtoa_r+0x2e8>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	f7ed fbdd 	bl	80002bc <__adddf3>
 8012b02:	4606      	mov	r6, r0
 8012b04:	4628      	mov	r0, r5
 8012b06:	460f      	mov	r7, r1
 8012b08:	f7ed fd24 	bl	8000554 <__aeabi_i2d>
 8012b0c:	a36a      	add	r3, pc, #424	; (adr r3, 8012cb8 <_dtoa_r+0x2f0>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	f7ed fd89 	bl	8000628 <__aeabi_dmul>
 8012b16:	4602      	mov	r2, r0
 8012b18:	460b      	mov	r3, r1
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	4639      	mov	r1, r7
 8012b1e:	f7ed fbcd 	bl	80002bc <__adddf3>
 8012b22:	4606      	mov	r6, r0
 8012b24:	460f      	mov	r7, r1
 8012b26:	f7ee f82f 	bl	8000b88 <__aeabi_d2iz>
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	4682      	mov	sl, r0
 8012b2e:	2300      	movs	r3, #0
 8012b30:	4630      	mov	r0, r6
 8012b32:	4639      	mov	r1, r7
 8012b34:	f7ed ffea 	bl	8000b0c <__aeabi_dcmplt>
 8012b38:	b148      	cbz	r0, 8012b4e <_dtoa_r+0x186>
 8012b3a:	4650      	mov	r0, sl
 8012b3c:	f7ed fd0a 	bl	8000554 <__aeabi_i2d>
 8012b40:	4632      	mov	r2, r6
 8012b42:	463b      	mov	r3, r7
 8012b44:	f7ed ffd8 	bl	8000af8 <__aeabi_dcmpeq>
 8012b48:	b908      	cbnz	r0, 8012b4e <_dtoa_r+0x186>
 8012b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b4e:	f1ba 0f16 	cmp.w	sl, #22
 8012b52:	d854      	bhi.n	8012bfe <_dtoa_r+0x236>
 8012b54:	4b61      	ldr	r3, [pc, #388]	; (8012cdc <_dtoa_r+0x314>)
 8012b56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012b62:	f7ed ffd3 	bl	8000b0c <__aeabi_dcmplt>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	d04b      	beq.n	8012c02 <_dtoa_r+0x23a>
 8012b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b6e:	2300      	movs	r3, #0
 8012b70:	930e      	str	r3, [sp, #56]	; 0x38
 8012b72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b74:	1b5d      	subs	r5, r3, r5
 8012b76:	1e6b      	subs	r3, r5, #1
 8012b78:	9304      	str	r3, [sp, #16]
 8012b7a:	bf43      	ittte	mi
 8012b7c:	2300      	movmi	r3, #0
 8012b7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012b82:	9304      	strmi	r3, [sp, #16]
 8012b84:	f04f 0800 	movpl.w	r8, #0
 8012b88:	f1ba 0f00 	cmp.w	sl, #0
 8012b8c:	db3b      	blt.n	8012c06 <_dtoa_r+0x23e>
 8012b8e:	9b04      	ldr	r3, [sp, #16]
 8012b90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012b94:	4453      	add	r3, sl
 8012b96:	9304      	str	r3, [sp, #16]
 8012b98:	2300      	movs	r3, #0
 8012b9a:	9306      	str	r3, [sp, #24]
 8012b9c:	9b05      	ldr	r3, [sp, #20]
 8012b9e:	2b09      	cmp	r3, #9
 8012ba0:	d869      	bhi.n	8012c76 <_dtoa_r+0x2ae>
 8012ba2:	2b05      	cmp	r3, #5
 8012ba4:	bfc4      	itt	gt
 8012ba6:	3b04      	subgt	r3, #4
 8012ba8:	9305      	strgt	r3, [sp, #20]
 8012baa:	9b05      	ldr	r3, [sp, #20]
 8012bac:	f1a3 0302 	sub.w	r3, r3, #2
 8012bb0:	bfcc      	ite	gt
 8012bb2:	2500      	movgt	r5, #0
 8012bb4:	2501      	movle	r5, #1
 8012bb6:	2b03      	cmp	r3, #3
 8012bb8:	d869      	bhi.n	8012c8e <_dtoa_r+0x2c6>
 8012bba:	e8df f003 	tbb	[pc, r3]
 8012bbe:	4e2c      	.short	0x4e2c
 8012bc0:	5a4c      	.short	0x5a4c
 8012bc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012bc6:	441d      	add	r5, r3
 8012bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012bcc:	2b20      	cmp	r3, #32
 8012bce:	bfc1      	itttt	gt
 8012bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012bd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012bd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8012bdc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012be0:	bfda      	itte	le
 8012be2:	f1c3 0320 	rsble	r3, r3, #32
 8012be6:	fa06 f003 	lslle.w	r0, r6, r3
 8012bea:	4318      	orrgt	r0, r3
 8012bec:	f7ed fca2 	bl	8000534 <__aeabi_ui2d>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012bf8:	3d01      	subs	r5, #1
 8012bfa:	9310      	str	r3, [sp, #64]	; 0x40
 8012bfc:	e771      	b.n	8012ae2 <_dtoa_r+0x11a>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e7b6      	b.n	8012b70 <_dtoa_r+0x1a8>
 8012c02:	900e      	str	r0, [sp, #56]	; 0x38
 8012c04:	e7b5      	b.n	8012b72 <_dtoa_r+0x1aa>
 8012c06:	f1ca 0300 	rsb	r3, sl, #0
 8012c0a:	9306      	str	r3, [sp, #24]
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	eba8 080a 	sub.w	r8, r8, sl
 8012c12:	930d      	str	r3, [sp, #52]	; 0x34
 8012c14:	e7c2      	b.n	8012b9c <_dtoa_r+0x1d4>
 8012c16:	2300      	movs	r3, #0
 8012c18:	9308      	str	r3, [sp, #32]
 8012c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	dc39      	bgt.n	8012c94 <_dtoa_r+0x2cc>
 8012c20:	f04f 0901 	mov.w	r9, #1
 8012c24:	f8cd 9004 	str.w	r9, [sp, #4]
 8012c28:	464b      	mov	r3, r9
 8012c2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012c2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c30:	2200      	movs	r2, #0
 8012c32:	6042      	str	r2, [r0, #4]
 8012c34:	2204      	movs	r2, #4
 8012c36:	f102 0614 	add.w	r6, r2, #20
 8012c3a:	429e      	cmp	r6, r3
 8012c3c:	6841      	ldr	r1, [r0, #4]
 8012c3e:	d92f      	bls.n	8012ca0 <_dtoa_r+0x2d8>
 8012c40:	4620      	mov	r0, r4
 8012c42:	f001 f85b 	bl	8013cfc <_Balloc>
 8012c46:	9000      	str	r0, [sp, #0]
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d14b      	bne.n	8012ce4 <_dtoa_r+0x31c>
 8012c4c:	4b24      	ldr	r3, [pc, #144]	; (8012ce0 <_dtoa_r+0x318>)
 8012c4e:	4602      	mov	r2, r0
 8012c50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012c54:	e6d1      	b.n	80129fa <_dtoa_r+0x32>
 8012c56:	2301      	movs	r3, #1
 8012c58:	e7de      	b.n	8012c18 <_dtoa_r+0x250>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	9308      	str	r3, [sp, #32]
 8012c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c60:	eb0a 0903 	add.w	r9, sl, r3
 8012c64:	f109 0301 	add.w	r3, r9, #1
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	9301      	str	r3, [sp, #4]
 8012c6c:	bfb8      	it	lt
 8012c6e:	2301      	movlt	r3, #1
 8012c70:	e7dd      	b.n	8012c2e <_dtoa_r+0x266>
 8012c72:	2301      	movs	r3, #1
 8012c74:	e7f2      	b.n	8012c5c <_dtoa_r+0x294>
 8012c76:	2501      	movs	r5, #1
 8012c78:	2300      	movs	r3, #0
 8012c7a:	9305      	str	r3, [sp, #20]
 8012c7c:	9508      	str	r5, [sp, #32]
 8012c7e:	f04f 39ff 	mov.w	r9, #4294967295
 8012c82:	2200      	movs	r2, #0
 8012c84:	f8cd 9004 	str.w	r9, [sp, #4]
 8012c88:	2312      	movs	r3, #18
 8012c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8012c8c:	e7cf      	b.n	8012c2e <_dtoa_r+0x266>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	9308      	str	r3, [sp, #32]
 8012c92:	e7f4      	b.n	8012c7e <_dtoa_r+0x2b6>
 8012c94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012c98:	f8cd 9004 	str.w	r9, [sp, #4]
 8012c9c:	464b      	mov	r3, r9
 8012c9e:	e7c6      	b.n	8012c2e <_dtoa_r+0x266>
 8012ca0:	3101      	adds	r1, #1
 8012ca2:	6041      	str	r1, [r0, #4]
 8012ca4:	0052      	lsls	r2, r2, #1
 8012ca6:	e7c6      	b.n	8012c36 <_dtoa_r+0x26e>
 8012ca8:	636f4361 	.word	0x636f4361
 8012cac:	3fd287a7 	.word	0x3fd287a7
 8012cb0:	8b60c8b3 	.word	0x8b60c8b3
 8012cb4:	3fc68a28 	.word	0x3fc68a28
 8012cb8:	509f79fb 	.word	0x509f79fb
 8012cbc:	3fd34413 	.word	0x3fd34413
 8012cc0:	08029148 	.word	0x08029148
 8012cc4:	0802930a 	.word	0x0802930a
 8012cc8:	7ff00000 	.word	0x7ff00000
 8012ccc:	08029306 	.word	0x08029306
 8012cd0:	080292fd 	.word	0x080292fd
 8012cd4:	080290c9 	.word	0x080290c9
 8012cd8:	3ff80000 	.word	0x3ff80000
 8012cdc:	08029480 	.word	0x08029480
 8012ce0:	08029369 	.word	0x08029369
 8012ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ce6:	9a00      	ldr	r2, [sp, #0]
 8012ce8:	601a      	str	r2, [r3, #0]
 8012cea:	9b01      	ldr	r3, [sp, #4]
 8012cec:	2b0e      	cmp	r3, #14
 8012cee:	f200 80ad 	bhi.w	8012e4c <_dtoa_r+0x484>
 8012cf2:	2d00      	cmp	r5, #0
 8012cf4:	f000 80aa 	beq.w	8012e4c <_dtoa_r+0x484>
 8012cf8:	f1ba 0f00 	cmp.w	sl, #0
 8012cfc:	dd36      	ble.n	8012d6c <_dtoa_r+0x3a4>
 8012cfe:	4ac3      	ldr	r2, [pc, #780]	; (801300c <_dtoa_r+0x644>)
 8012d00:	f00a 030f 	and.w	r3, sl, #15
 8012d04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d08:	ed93 7b00 	vldr	d7, [r3]
 8012d0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012d10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012d14:	eeb0 8a47 	vmov.f32	s16, s14
 8012d18:	eef0 8a67 	vmov.f32	s17, s15
 8012d1c:	d016      	beq.n	8012d4c <_dtoa_r+0x384>
 8012d1e:	4bbc      	ldr	r3, [pc, #752]	; (8013010 <_dtoa_r+0x648>)
 8012d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d28:	f7ed fda8 	bl	800087c <__aeabi_ddiv>
 8012d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d30:	f007 070f 	and.w	r7, r7, #15
 8012d34:	2503      	movs	r5, #3
 8012d36:	4eb6      	ldr	r6, [pc, #728]	; (8013010 <_dtoa_r+0x648>)
 8012d38:	b957      	cbnz	r7, 8012d50 <_dtoa_r+0x388>
 8012d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d3e:	ec53 2b18 	vmov	r2, r3, d8
 8012d42:	f7ed fd9b 	bl	800087c <__aeabi_ddiv>
 8012d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d4a:	e029      	b.n	8012da0 <_dtoa_r+0x3d8>
 8012d4c:	2502      	movs	r5, #2
 8012d4e:	e7f2      	b.n	8012d36 <_dtoa_r+0x36e>
 8012d50:	07f9      	lsls	r1, r7, #31
 8012d52:	d508      	bpl.n	8012d66 <_dtoa_r+0x39e>
 8012d54:	ec51 0b18 	vmov	r0, r1, d8
 8012d58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012d5c:	f7ed fc64 	bl	8000628 <__aeabi_dmul>
 8012d60:	ec41 0b18 	vmov	d8, r0, r1
 8012d64:	3501      	adds	r5, #1
 8012d66:	107f      	asrs	r7, r7, #1
 8012d68:	3608      	adds	r6, #8
 8012d6a:	e7e5      	b.n	8012d38 <_dtoa_r+0x370>
 8012d6c:	f000 80a6 	beq.w	8012ebc <_dtoa_r+0x4f4>
 8012d70:	f1ca 0600 	rsb	r6, sl, #0
 8012d74:	4ba5      	ldr	r3, [pc, #660]	; (801300c <_dtoa_r+0x644>)
 8012d76:	4fa6      	ldr	r7, [pc, #664]	; (8013010 <_dtoa_r+0x648>)
 8012d78:	f006 020f 	and.w	r2, r6, #15
 8012d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d88:	f7ed fc4e 	bl	8000628 <__aeabi_dmul>
 8012d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d90:	1136      	asrs	r6, r6, #4
 8012d92:	2300      	movs	r3, #0
 8012d94:	2502      	movs	r5, #2
 8012d96:	2e00      	cmp	r6, #0
 8012d98:	f040 8085 	bne.w	8012ea6 <_dtoa_r+0x4de>
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d1d2      	bne.n	8012d46 <_dtoa_r+0x37e>
 8012da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	f000 808c 	beq.w	8012ec0 <_dtoa_r+0x4f8>
 8012da8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012dac:	4b99      	ldr	r3, [pc, #612]	; (8013014 <_dtoa_r+0x64c>)
 8012dae:	2200      	movs	r2, #0
 8012db0:	4630      	mov	r0, r6
 8012db2:	4639      	mov	r1, r7
 8012db4:	f7ed feaa 	bl	8000b0c <__aeabi_dcmplt>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	f000 8081 	beq.w	8012ec0 <_dtoa_r+0x4f8>
 8012dbe:	9b01      	ldr	r3, [sp, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d07d      	beq.n	8012ec0 <_dtoa_r+0x4f8>
 8012dc4:	f1b9 0f00 	cmp.w	r9, #0
 8012dc8:	dd3c      	ble.n	8012e44 <_dtoa_r+0x47c>
 8012dca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012dce:	9307      	str	r3, [sp, #28]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	4b91      	ldr	r3, [pc, #580]	; (8013018 <_dtoa_r+0x650>)
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	4639      	mov	r1, r7
 8012dd8:	f7ed fc26 	bl	8000628 <__aeabi_dmul>
 8012ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012de0:	3501      	adds	r5, #1
 8012de2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012de6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012dea:	4628      	mov	r0, r5
 8012dec:	f7ed fbb2 	bl	8000554 <__aeabi_i2d>
 8012df0:	4632      	mov	r2, r6
 8012df2:	463b      	mov	r3, r7
 8012df4:	f7ed fc18 	bl	8000628 <__aeabi_dmul>
 8012df8:	4b88      	ldr	r3, [pc, #544]	; (801301c <_dtoa_r+0x654>)
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	f7ed fa5e 	bl	80002bc <__adddf3>
 8012e00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e08:	9303      	str	r3, [sp, #12]
 8012e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d15c      	bne.n	8012eca <_dtoa_r+0x502>
 8012e10:	4b83      	ldr	r3, [pc, #524]	; (8013020 <_dtoa_r+0x658>)
 8012e12:	2200      	movs	r2, #0
 8012e14:	4630      	mov	r0, r6
 8012e16:	4639      	mov	r1, r7
 8012e18:	f7ed fa4e 	bl	80002b8 <__aeabi_dsub>
 8012e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e20:	4606      	mov	r6, r0
 8012e22:	460f      	mov	r7, r1
 8012e24:	f7ed fe90 	bl	8000b48 <__aeabi_dcmpgt>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	f040 8296 	bne.w	801335a <_dtoa_r+0x992>
 8012e2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012e32:	4630      	mov	r0, r6
 8012e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e38:	4639      	mov	r1, r7
 8012e3a:	f7ed fe67 	bl	8000b0c <__aeabi_dcmplt>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	f040 8288 	bne.w	8013354 <_dtoa_r+0x98c>
 8012e44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f2c0 8158 	blt.w	8013104 <_dtoa_r+0x73c>
 8012e54:	f1ba 0f0e 	cmp.w	sl, #14
 8012e58:	f300 8154 	bgt.w	8013104 <_dtoa_r+0x73c>
 8012e5c:	4b6b      	ldr	r3, [pc, #428]	; (801300c <_dtoa_r+0x644>)
 8012e5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	f280 80e3 	bge.w	8013034 <_dtoa_r+0x66c>
 8012e6e:	9b01      	ldr	r3, [sp, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f300 80df 	bgt.w	8013034 <_dtoa_r+0x66c>
 8012e76:	f040 826d 	bne.w	8013354 <_dtoa_r+0x98c>
 8012e7a:	4b69      	ldr	r3, [pc, #420]	; (8013020 <_dtoa_r+0x658>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	4640      	mov	r0, r8
 8012e80:	4649      	mov	r1, r9
 8012e82:	f7ed fbd1 	bl	8000628 <__aeabi_dmul>
 8012e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e8a:	f7ed fe53 	bl	8000b34 <__aeabi_dcmpge>
 8012e8e:	9e01      	ldr	r6, [sp, #4]
 8012e90:	4637      	mov	r7, r6
 8012e92:	2800      	cmp	r0, #0
 8012e94:	f040 8243 	bne.w	801331e <_dtoa_r+0x956>
 8012e98:	9d00      	ldr	r5, [sp, #0]
 8012e9a:	2331      	movs	r3, #49	; 0x31
 8012e9c:	f805 3b01 	strb.w	r3, [r5], #1
 8012ea0:	f10a 0a01 	add.w	sl, sl, #1
 8012ea4:	e23f      	b.n	8013326 <_dtoa_r+0x95e>
 8012ea6:	07f2      	lsls	r2, r6, #31
 8012ea8:	d505      	bpl.n	8012eb6 <_dtoa_r+0x4ee>
 8012eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012eae:	f7ed fbbb 	bl	8000628 <__aeabi_dmul>
 8012eb2:	3501      	adds	r5, #1
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	1076      	asrs	r6, r6, #1
 8012eb8:	3708      	adds	r7, #8
 8012eba:	e76c      	b.n	8012d96 <_dtoa_r+0x3ce>
 8012ebc:	2502      	movs	r5, #2
 8012ebe:	e76f      	b.n	8012da0 <_dtoa_r+0x3d8>
 8012ec0:	9b01      	ldr	r3, [sp, #4]
 8012ec2:	f8cd a01c 	str.w	sl, [sp, #28]
 8012ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8012ec8:	e78d      	b.n	8012de6 <_dtoa_r+0x41e>
 8012eca:	9900      	ldr	r1, [sp, #0]
 8012ecc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ed0:	4b4e      	ldr	r3, [pc, #312]	; (801300c <_dtoa_r+0x644>)
 8012ed2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ed6:	4401      	add	r1, r0
 8012ed8:	9102      	str	r1, [sp, #8]
 8012eda:	9908      	ldr	r1, [sp, #32]
 8012edc:	eeb0 8a47 	vmov.f32	s16, s14
 8012ee0:	eef0 8a67 	vmov.f32	s17, s15
 8012ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ee8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012eec:	2900      	cmp	r1, #0
 8012eee:	d045      	beq.n	8012f7c <_dtoa_r+0x5b4>
 8012ef0:	494c      	ldr	r1, [pc, #304]	; (8013024 <_dtoa_r+0x65c>)
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	f7ed fcc2 	bl	800087c <__aeabi_ddiv>
 8012ef8:	ec53 2b18 	vmov	r2, r3, d8
 8012efc:	f7ed f9dc 	bl	80002b8 <__aeabi_dsub>
 8012f00:	9d00      	ldr	r5, [sp, #0]
 8012f02:	ec41 0b18 	vmov	d8, r0, r1
 8012f06:	4639      	mov	r1, r7
 8012f08:	4630      	mov	r0, r6
 8012f0a:	f7ed fe3d 	bl	8000b88 <__aeabi_d2iz>
 8012f0e:	900c      	str	r0, [sp, #48]	; 0x30
 8012f10:	f7ed fb20 	bl	8000554 <__aeabi_i2d>
 8012f14:	4602      	mov	r2, r0
 8012f16:	460b      	mov	r3, r1
 8012f18:	4630      	mov	r0, r6
 8012f1a:	4639      	mov	r1, r7
 8012f1c:	f7ed f9cc 	bl	80002b8 <__aeabi_dsub>
 8012f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f22:	3330      	adds	r3, #48	; 0x30
 8012f24:	f805 3b01 	strb.w	r3, [r5], #1
 8012f28:	ec53 2b18 	vmov	r2, r3, d8
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	460f      	mov	r7, r1
 8012f30:	f7ed fdec 	bl	8000b0c <__aeabi_dcmplt>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d165      	bne.n	8013004 <_dtoa_r+0x63c>
 8012f38:	4632      	mov	r2, r6
 8012f3a:	463b      	mov	r3, r7
 8012f3c:	4935      	ldr	r1, [pc, #212]	; (8013014 <_dtoa_r+0x64c>)
 8012f3e:	2000      	movs	r0, #0
 8012f40:	f7ed f9ba 	bl	80002b8 <__aeabi_dsub>
 8012f44:	ec53 2b18 	vmov	r2, r3, d8
 8012f48:	f7ed fde0 	bl	8000b0c <__aeabi_dcmplt>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	f040 80b9 	bne.w	80130c4 <_dtoa_r+0x6fc>
 8012f52:	9b02      	ldr	r3, [sp, #8]
 8012f54:	429d      	cmp	r5, r3
 8012f56:	f43f af75 	beq.w	8012e44 <_dtoa_r+0x47c>
 8012f5a:	4b2f      	ldr	r3, [pc, #188]	; (8013018 <_dtoa_r+0x650>)
 8012f5c:	ec51 0b18 	vmov	r0, r1, d8
 8012f60:	2200      	movs	r2, #0
 8012f62:	f7ed fb61 	bl	8000628 <__aeabi_dmul>
 8012f66:	4b2c      	ldr	r3, [pc, #176]	; (8013018 <_dtoa_r+0x650>)
 8012f68:	ec41 0b18 	vmov	d8, r0, r1
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	4630      	mov	r0, r6
 8012f70:	4639      	mov	r1, r7
 8012f72:	f7ed fb59 	bl	8000628 <__aeabi_dmul>
 8012f76:	4606      	mov	r6, r0
 8012f78:	460f      	mov	r7, r1
 8012f7a:	e7c4      	b.n	8012f06 <_dtoa_r+0x53e>
 8012f7c:	ec51 0b17 	vmov	r0, r1, d7
 8012f80:	f7ed fb52 	bl	8000628 <__aeabi_dmul>
 8012f84:	9b02      	ldr	r3, [sp, #8]
 8012f86:	9d00      	ldr	r5, [sp, #0]
 8012f88:	930c      	str	r3, [sp, #48]	; 0x30
 8012f8a:	ec41 0b18 	vmov	d8, r0, r1
 8012f8e:	4639      	mov	r1, r7
 8012f90:	4630      	mov	r0, r6
 8012f92:	f7ed fdf9 	bl	8000b88 <__aeabi_d2iz>
 8012f96:	9011      	str	r0, [sp, #68]	; 0x44
 8012f98:	f7ed fadc 	bl	8000554 <__aeabi_i2d>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	f7ed f988 	bl	80002b8 <__aeabi_dsub>
 8012fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012faa:	3330      	adds	r3, #48	; 0x30
 8012fac:	f805 3b01 	strb.w	r3, [r5], #1
 8012fb0:	9b02      	ldr	r3, [sp, #8]
 8012fb2:	429d      	cmp	r5, r3
 8012fb4:	4606      	mov	r6, r0
 8012fb6:	460f      	mov	r7, r1
 8012fb8:	f04f 0200 	mov.w	r2, #0
 8012fbc:	d134      	bne.n	8013028 <_dtoa_r+0x660>
 8012fbe:	4b19      	ldr	r3, [pc, #100]	; (8013024 <_dtoa_r+0x65c>)
 8012fc0:	ec51 0b18 	vmov	r0, r1, d8
 8012fc4:	f7ed f97a 	bl	80002bc <__adddf3>
 8012fc8:	4602      	mov	r2, r0
 8012fca:	460b      	mov	r3, r1
 8012fcc:	4630      	mov	r0, r6
 8012fce:	4639      	mov	r1, r7
 8012fd0:	f7ed fdba 	bl	8000b48 <__aeabi_dcmpgt>
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d175      	bne.n	80130c4 <_dtoa_r+0x6fc>
 8012fd8:	ec53 2b18 	vmov	r2, r3, d8
 8012fdc:	4911      	ldr	r1, [pc, #68]	; (8013024 <_dtoa_r+0x65c>)
 8012fde:	2000      	movs	r0, #0
 8012fe0:	f7ed f96a 	bl	80002b8 <__aeabi_dsub>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	4630      	mov	r0, r6
 8012fea:	4639      	mov	r1, r7
 8012fec:	f7ed fd8e 	bl	8000b0c <__aeabi_dcmplt>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	f43f af27 	beq.w	8012e44 <_dtoa_r+0x47c>
 8012ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ff8:	1e6b      	subs	r3, r5, #1
 8012ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8012ffc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013000:	2b30      	cmp	r3, #48	; 0x30
 8013002:	d0f8      	beq.n	8012ff6 <_dtoa_r+0x62e>
 8013004:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013008:	e04a      	b.n	80130a0 <_dtoa_r+0x6d8>
 801300a:	bf00      	nop
 801300c:	08029480 	.word	0x08029480
 8013010:	08029458 	.word	0x08029458
 8013014:	3ff00000 	.word	0x3ff00000
 8013018:	40240000 	.word	0x40240000
 801301c:	401c0000 	.word	0x401c0000
 8013020:	40140000 	.word	0x40140000
 8013024:	3fe00000 	.word	0x3fe00000
 8013028:	4baf      	ldr	r3, [pc, #700]	; (80132e8 <_dtoa_r+0x920>)
 801302a:	f7ed fafd 	bl	8000628 <__aeabi_dmul>
 801302e:	4606      	mov	r6, r0
 8013030:	460f      	mov	r7, r1
 8013032:	e7ac      	b.n	8012f8e <_dtoa_r+0x5c6>
 8013034:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013038:	9d00      	ldr	r5, [sp, #0]
 801303a:	4642      	mov	r2, r8
 801303c:	464b      	mov	r3, r9
 801303e:	4630      	mov	r0, r6
 8013040:	4639      	mov	r1, r7
 8013042:	f7ed fc1b 	bl	800087c <__aeabi_ddiv>
 8013046:	f7ed fd9f 	bl	8000b88 <__aeabi_d2iz>
 801304a:	9002      	str	r0, [sp, #8]
 801304c:	f7ed fa82 	bl	8000554 <__aeabi_i2d>
 8013050:	4642      	mov	r2, r8
 8013052:	464b      	mov	r3, r9
 8013054:	f7ed fae8 	bl	8000628 <__aeabi_dmul>
 8013058:	4602      	mov	r2, r0
 801305a:	460b      	mov	r3, r1
 801305c:	4630      	mov	r0, r6
 801305e:	4639      	mov	r1, r7
 8013060:	f7ed f92a 	bl	80002b8 <__aeabi_dsub>
 8013064:	9e02      	ldr	r6, [sp, #8]
 8013066:	9f01      	ldr	r7, [sp, #4]
 8013068:	3630      	adds	r6, #48	; 0x30
 801306a:	f805 6b01 	strb.w	r6, [r5], #1
 801306e:	9e00      	ldr	r6, [sp, #0]
 8013070:	1bae      	subs	r6, r5, r6
 8013072:	42b7      	cmp	r7, r6
 8013074:	4602      	mov	r2, r0
 8013076:	460b      	mov	r3, r1
 8013078:	d137      	bne.n	80130ea <_dtoa_r+0x722>
 801307a:	f7ed f91f 	bl	80002bc <__adddf3>
 801307e:	4642      	mov	r2, r8
 8013080:	464b      	mov	r3, r9
 8013082:	4606      	mov	r6, r0
 8013084:	460f      	mov	r7, r1
 8013086:	f7ed fd5f 	bl	8000b48 <__aeabi_dcmpgt>
 801308a:	b9c8      	cbnz	r0, 80130c0 <_dtoa_r+0x6f8>
 801308c:	4642      	mov	r2, r8
 801308e:	464b      	mov	r3, r9
 8013090:	4630      	mov	r0, r6
 8013092:	4639      	mov	r1, r7
 8013094:	f7ed fd30 	bl	8000af8 <__aeabi_dcmpeq>
 8013098:	b110      	cbz	r0, 80130a0 <_dtoa_r+0x6d8>
 801309a:	9b02      	ldr	r3, [sp, #8]
 801309c:	07d9      	lsls	r1, r3, #31
 801309e:	d40f      	bmi.n	80130c0 <_dtoa_r+0x6f8>
 80130a0:	4620      	mov	r0, r4
 80130a2:	4659      	mov	r1, fp
 80130a4:	f000 fe6a 	bl	8013d7c <_Bfree>
 80130a8:	2300      	movs	r3, #0
 80130aa:	702b      	strb	r3, [r5, #0]
 80130ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130ae:	f10a 0001 	add.w	r0, sl, #1
 80130b2:	6018      	str	r0, [r3, #0]
 80130b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f43f acd8 	beq.w	8012a6c <_dtoa_r+0xa4>
 80130bc:	601d      	str	r5, [r3, #0]
 80130be:	e4d5      	b.n	8012a6c <_dtoa_r+0xa4>
 80130c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80130c4:	462b      	mov	r3, r5
 80130c6:	461d      	mov	r5, r3
 80130c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130cc:	2a39      	cmp	r2, #57	; 0x39
 80130ce:	d108      	bne.n	80130e2 <_dtoa_r+0x71a>
 80130d0:	9a00      	ldr	r2, [sp, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d1f7      	bne.n	80130c6 <_dtoa_r+0x6fe>
 80130d6:	9a07      	ldr	r2, [sp, #28]
 80130d8:	9900      	ldr	r1, [sp, #0]
 80130da:	3201      	adds	r2, #1
 80130dc:	9207      	str	r2, [sp, #28]
 80130de:	2230      	movs	r2, #48	; 0x30
 80130e0:	700a      	strb	r2, [r1, #0]
 80130e2:	781a      	ldrb	r2, [r3, #0]
 80130e4:	3201      	adds	r2, #1
 80130e6:	701a      	strb	r2, [r3, #0]
 80130e8:	e78c      	b.n	8013004 <_dtoa_r+0x63c>
 80130ea:	4b7f      	ldr	r3, [pc, #508]	; (80132e8 <_dtoa_r+0x920>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	f7ed fa9b 	bl	8000628 <__aeabi_dmul>
 80130f2:	2200      	movs	r2, #0
 80130f4:	2300      	movs	r3, #0
 80130f6:	4606      	mov	r6, r0
 80130f8:	460f      	mov	r7, r1
 80130fa:	f7ed fcfd 	bl	8000af8 <__aeabi_dcmpeq>
 80130fe:	2800      	cmp	r0, #0
 8013100:	d09b      	beq.n	801303a <_dtoa_r+0x672>
 8013102:	e7cd      	b.n	80130a0 <_dtoa_r+0x6d8>
 8013104:	9a08      	ldr	r2, [sp, #32]
 8013106:	2a00      	cmp	r2, #0
 8013108:	f000 80c4 	beq.w	8013294 <_dtoa_r+0x8cc>
 801310c:	9a05      	ldr	r2, [sp, #20]
 801310e:	2a01      	cmp	r2, #1
 8013110:	f300 80a8 	bgt.w	8013264 <_dtoa_r+0x89c>
 8013114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013116:	2a00      	cmp	r2, #0
 8013118:	f000 80a0 	beq.w	801325c <_dtoa_r+0x894>
 801311c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013120:	9e06      	ldr	r6, [sp, #24]
 8013122:	4645      	mov	r5, r8
 8013124:	9a04      	ldr	r2, [sp, #16]
 8013126:	2101      	movs	r1, #1
 8013128:	441a      	add	r2, r3
 801312a:	4620      	mov	r0, r4
 801312c:	4498      	add	r8, r3
 801312e:	9204      	str	r2, [sp, #16]
 8013130:	f000 ff2a 	bl	8013f88 <__i2b>
 8013134:	4607      	mov	r7, r0
 8013136:	2d00      	cmp	r5, #0
 8013138:	dd0b      	ble.n	8013152 <_dtoa_r+0x78a>
 801313a:	9b04      	ldr	r3, [sp, #16]
 801313c:	2b00      	cmp	r3, #0
 801313e:	dd08      	ble.n	8013152 <_dtoa_r+0x78a>
 8013140:	42ab      	cmp	r3, r5
 8013142:	9a04      	ldr	r2, [sp, #16]
 8013144:	bfa8      	it	ge
 8013146:	462b      	movge	r3, r5
 8013148:	eba8 0803 	sub.w	r8, r8, r3
 801314c:	1aed      	subs	r5, r5, r3
 801314e:	1ad3      	subs	r3, r2, r3
 8013150:	9304      	str	r3, [sp, #16]
 8013152:	9b06      	ldr	r3, [sp, #24]
 8013154:	b1fb      	cbz	r3, 8013196 <_dtoa_r+0x7ce>
 8013156:	9b08      	ldr	r3, [sp, #32]
 8013158:	2b00      	cmp	r3, #0
 801315a:	f000 809f 	beq.w	801329c <_dtoa_r+0x8d4>
 801315e:	2e00      	cmp	r6, #0
 8013160:	dd11      	ble.n	8013186 <_dtoa_r+0x7be>
 8013162:	4639      	mov	r1, r7
 8013164:	4632      	mov	r2, r6
 8013166:	4620      	mov	r0, r4
 8013168:	f000 ffca 	bl	8014100 <__pow5mult>
 801316c:	465a      	mov	r2, fp
 801316e:	4601      	mov	r1, r0
 8013170:	4607      	mov	r7, r0
 8013172:	4620      	mov	r0, r4
 8013174:	f000 ff1e 	bl	8013fb4 <__multiply>
 8013178:	4659      	mov	r1, fp
 801317a:	9007      	str	r0, [sp, #28]
 801317c:	4620      	mov	r0, r4
 801317e:	f000 fdfd 	bl	8013d7c <_Bfree>
 8013182:	9b07      	ldr	r3, [sp, #28]
 8013184:	469b      	mov	fp, r3
 8013186:	9b06      	ldr	r3, [sp, #24]
 8013188:	1b9a      	subs	r2, r3, r6
 801318a:	d004      	beq.n	8013196 <_dtoa_r+0x7ce>
 801318c:	4659      	mov	r1, fp
 801318e:	4620      	mov	r0, r4
 8013190:	f000 ffb6 	bl	8014100 <__pow5mult>
 8013194:	4683      	mov	fp, r0
 8013196:	2101      	movs	r1, #1
 8013198:	4620      	mov	r0, r4
 801319a:	f000 fef5 	bl	8013f88 <__i2b>
 801319e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	4606      	mov	r6, r0
 80131a4:	dd7c      	ble.n	80132a0 <_dtoa_r+0x8d8>
 80131a6:	461a      	mov	r2, r3
 80131a8:	4601      	mov	r1, r0
 80131aa:	4620      	mov	r0, r4
 80131ac:	f000 ffa8 	bl	8014100 <__pow5mult>
 80131b0:	9b05      	ldr	r3, [sp, #20]
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	4606      	mov	r6, r0
 80131b6:	dd76      	ble.n	80132a6 <_dtoa_r+0x8de>
 80131b8:	2300      	movs	r3, #0
 80131ba:	9306      	str	r3, [sp, #24]
 80131bc:	6933      	ldr	r3, [r6, #16]
 80131be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80131c2:	6918      	ldr	r0, [r3, #16]
 80131c4:	f000 fe90 	bl	8013ee8 <__hi0bits>
 80131c8:	f1c0 0020 	rsb	r0, r0, #32
 80131cc:	9b04      	ldr	r3, [sp, #16]
 80131ce:	4418      	add	r0, r3
 80131d0:	f010 001f 	ands.w	r0, r0, #31
 80131d4:	f000 8086 	beq.w	80132e4 <_dtoa_r+0x91c>
 80131d8:	f1c0 0320 	rsb	r3, r0, #32
 80131dc:	2b04      	cmp	r3, #4
 80131de:	dd7f      	ble.n	80132e0 <_dtoa_r+0x918>
 80131e0:	f1c0 001c 	rsb	r0, r0, #28
 80131e4:	9b04      	ldr	r3, [sp, #16]
 80131e6:	4403      	add	r3, r0
 80131e8:	4480      	add	r8, r0
 80131ea:	4405      	add	r5, r0
 80131ec:	9304      	str	r3, [sp, #16]
 80131ee:	f1b8 0f00 	cmp.w	r8, #0
 80131f2:	dd05      	ble.n	8013200 <_dtoa_r+0x838>
 80131f4:	4659      	mov	r1, fp
 80131f6:	4642      	mov	r2, r8
 80131f8:	4620      	mov	r0, r4
 80131fa:	f000 ffdb 	bl	80141b4 <__lshift>
 80131fe:	4683      	mov	fp, r0
 8013200:	9b04      	ldr	r3, [sp, #16]
 8013202:	2b00      	cmp	r3, #0
 8013204:	dd05      	ble.n	8013212 <_dtoa_r+0x84a>
 8013206:	4631      	mov	r1, r6
 8013208:	461a      	mov	r2, r3
 801320a:	4620      	mov	r0, r4
 801320c:	f000 ffd2 	bl	80141b4 <__lshift>
 8013210:	4606      	mov	r6, r0
 8013212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013214:	2b00      	cmp	r3, #0
 8013216:	d069      	beq.n	80132ec <_dtoa_r+0x924>
 8013218:	4631      	mov	r1, r6
 801321a:	4658      	mov	r0, fp
 801321c:	f001 f836 	bl	801428c <__mcmp>
 8013220:	2800      	cmp	r0, #0
 8013222:	da63      	bge.n	80132ec <_dtoa_r+0x924>
 8013224:	2300      	movs	r3, #0
 8013226:	4659      	mov	r1, fp
 8013228:	220a      	movs	r2, #10
 801322a:	4620      	mov	r0, r4
 801322c:	f000 fdc8 	bl	8013dc0 <__multadd>
 8013230:	9b08      	ldr	r3, [sp, #32]
 8013232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013236:	4683      	mov	fp, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	f000 818f 	beq.w	801355c <_dtoa_r+0xb94>
 801323e:	4639      	mov	r1, r7
 8013240:	2300      	movs	r3, #0
 8013242:	220a      	movs	r2, #10
 8013244:	4620      	mov	r0, r4
 8013246:	f000 fdbb 	bl	8013dc0 <__multadd>
 801324a:	f1b9 0f00 	cmp.w	r9, #0
 801324e:	4607      	mov	r7, r0
 8013250:	f300 808e 	bgt.w	8013370 <_dtoa_r+0x9a8>
 8013254:	9b05      	ldr	r3, [sp, #20]
 8013256:	2b02      	cmp	r3, #2
 8013258:	dc50      	bgt.n	80132fc <_dtoa_r+0x934>
 801325a:	e089      	b.n	8013370 <_dtoa_r+0x9a8>
 801325c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801325e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013262:	e75d      	b.n	8013120 <_dtoa_r+0x758>
 8013264:	9b01      	ldr	r3, [sp, #4]
 8013266:	1e5e      	subs	r6, r3, #1
 8013268:	9b06      	ldr	r3, [sp, #24]
 801326a:	42b3      	cmp	r3, r6
 801326c:	bfbf      	itttt	lt
 801326e:	9b06      	ldrlt	r3, [sp, #24]
 8013270:	9606      	strlt	r6, [sp, #24]
 8013272:	1af2      	sublt	r2, r6, r3
 8013274:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013276:	bfb6      	itet	lt
 8013278:	189b      	addlt	r3, r3, r2
 801327a:	1b9e      	subge	r6, r3, r6
 801327c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801327e:	9b01      	ldr	r3, [sp, #4]
 8013280:	bfb8      	it	lt
 8013282:	2600      	movlt	r6, #0
 8013284:	2b00      	cmp	r3, #0
 8013286:	bfb5      	itete	lt
 8013288:	eba8 0503 	sublt.w	r5, r8, r3
 801328c:	9b01      	ldrge	r3, [sp, #4]
 801328e:	2300      	movlt	r3, #0
 8013290:	4645      	movge	r5, r8
 8013292:	e747      	b.n	8013124 <_dtoa_r+0x75c>
 8013294:	9e06      	ldr	r6, [sp, #24]
 8013296:	9f08      	ldr	r7, [sp, #32]
 8013298:	4645      	mov	r5, r8
 801329a:	e74c      	b.n	8013136 <_dtoa_r+0x76e>
 801329c:	9a06      	ldr	r2, [sp, #24]
 801329e:	e775      	b.n	801318c <_dtoa_r+0x7c4>
 80132a0:	9b05      	ldr	r3, [sp, #20]
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	dc18      	bgt.n	80132d8 <_dtoa_r+0x910>
 80132a6:	9b02      	ldr	r3, [sp, #8]
 80132a8:	b9b3      	cbnz	r3, 80132d8 <_dtoa_r+0x910>
 80132aa:	9b03      	ldr	r3, [sp, #12]
 80132ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132b0:	b9a3      	cbnz	r3, 80132dc <_dtoa_r+0x914>
 80132b2:	9b03      	ldr	r3, [sp, #12]
 80132b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80132b8:	0d1b      	lsrs	r3, r3, #20
 80132ba:	051b      	lsls	r3, r3, #20
 80132bc:	b12b      	cbz	r3, 80132ca <_dtoa_r+0x902>
 80132be:	9b04      	ldr	r3, [sp, #16]
 80132c0:	3301      	adds	r3, #1
 80132c2:	9304      	str	r3, [sp, #16]
 80132c4:	f108 0801 	add.w	r8, r8, #1
 80132c8:	2301      	movs	r3, #1
 80132ca:	9306      	str	r3, [sp, #24]
 80132cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	f47f af74 	bne.w	80131bc <_dtoa_r+0x7f4>
 80132d4:	2001      	movs	r0, #1
 80132d6:	e779      	b.n	80131cc <_dtoa_r+0x804>
 80132d8:	2300      	movs	r3, #0
 80132da:	e7f6      	b.n	80132ca <_dtoa_r+0x902>
 80132dc:	9b02      	ldr	r3, [sp, #8]
 80132de:	e7f4      	b.n	80132ca <_dtoa_r+0x902>
 80132e0:	d085      	beq.n	80131ee <_dtoa_r+0x826>
 80132e2:	4618      	mov	r0, r3
 80132e4:	301c      	adds	r0, #28
 80132e6:	e77d      	b.n	80131e4 <_dtoa_r+0x81c>
 80132e8:	40240000 	.word	0x40240000
 80132ec:	9b01      	ldr	r3, [sp, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	dc38      	bgt.n	8013364 <_dtoa_r+0x99c>
 80132f2:	9b05      	ldr	r3, [sp, #20]
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	dd35      	ble.n	8013364 <_dtoa_r+0x99c>
 80132f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80132fc:	f1b9 0f00 	cmp.w	r9, #0
 8013300:	d10d      	bne.n	801331e <_dtoa_r+0x956>
 8013302:	4631      	mov	r1, r6
 8013304:	464b      	mov	r3, r9
 8013306:	2205      	movs	r2, #5
 8013308:	4620      	mov	r0, r4
 801330a:	f000 fd59 	bl	8013dc0 <__multadd>
 801330e:	4601      	mov	r1, r0
 8013310:	4606      	mov	r6, r0
 8013312:	4658      	mov	r0, fp
 8013314:	f000 ffba 	bl	801428c <__mcmp>
 8013318:	2800      	cmp	r0, #0
 801331a:	f73f adbd 	bgt.w	8012e98 <_dtoa_r+0x4d0>
 801331e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013320:	9d00      	ldr	r5, [sp, #0]
 8013322:	ea6f 0a03 	mvn.w	sl, r3
 8013326:	f04f 0800 	mov.w	r8, #0
 801332a:	4631      	mov	r1, r6
 801332c:	4620      	mov	r0, r4
 801332e:	f000 fd25 	bl	8013d7c <_Bfree>
 8013332:	2f00      	cmp	r7, #0
 8013334:	f43f aeb4 	beq.w	80130a0 <_dtoa_r+0x6d8>
 8013338:	f1b8 0f00 	cmp.w	r8, #0
 801333c:	d005      	beq.n	801334a <_dtoa_r+0x982>
 801333e:	45b8      	cmp	r8, r7
 8013340:	d003      	beq.n	801334a <_dtoa_r+0x982>
 8013342:	4641      	mov	r1, r8
 8013344:	4620      	mov	r0, r4
 8013346:	f000 fd19 	bl	8013d7c <_Bfree>
 801334a:	4639      	mov	r1, r7
 801334c:	4620      	mov	r0, r4
 801334e:	f000 fd15 	bl	8013d7c <_Bfree>
 8013352:	e6a5      	b.n	80130a0 <_dtoa_r+0x6d8>
 8013354:	2600      	movs	r6, #0
 8013356:	4637      	mov	r7, r6
 8013358:	e7e1      	b.n	801331e <_dtoa_r+0x956>
 801335a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801335c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013360:	4637      	mov	r7, r6
 8013362:	e599      	b.n	8012e98 <_dtoa_r+0x4d0>
 8013364:	9b08      	ldr	r3, [sp, #32]
 8013366:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	f000 80fd 	beq.w	801356a <_dtoa_r+0xba2>
 8013370:	2d00      	cmp	r5, #0
 8013372:	dd05      	ble.n	8013380 <_dtoa_r+0x9b8>
 8013374:	4639      	mov	r1, r7
 8013376:	462a      	mov	r2, r5
 8013378:	4620      	mov	r0, r4
 801337a:	f000 ff1b 	bl	80141b4 <__lshift>
 801337e:	4607      	mov	r7, r0
 8013380:	9b06      	ldr	r3, [sp, #24]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d05c      	beq.n	8013440 <_dtoa_r+0xa78>
 8013386:	6879      	ldr	r1, [r7, #4]
 8013388:	4620      	mov	r0, r4
 801338a:	f000 fcb7 	bl	8013cfc <_Balloc>
 801338e:	4605      	mov	r5, r0
 8013390:	b928      	cbnz	r0, 801339e <_dtoa_r+0x9d6>
 8013392:	4b80      	ldr	r3, [pc, #512]	; (8013594 <_dtoa_r+0xbcc>)
 8013394:	4602      	mov	r2, r0
 8013396:	f240 21ea 	movw	r1, #746	; 0x2ea
 801339a:	f7ff bb2e 	b.w	80129fa <_dtoa_r+0x32>
 801339e:	693a      	ldr	r2, [r7, #16]
 80133a0:	3202      	adds	r2, #2
 80133a2:	0092      	lsls	r2, r2, #2
 80133a4:	f107 010c 	add.w	r1, r7, #12
 80133a8:	300c      	adds	r0, #12
 80133aa:	f000 fc99 	bl	8013ce0 <memcpy>
 80133ae:	2201      	movs	r2, #1
 80133b0:	4629      	mov	r1, r5
 80133b2:	4620      	mov	r0, r4
 80133b4:	f000 fefe 	bl	80141b4 <__lshift>
 80133b8:	9b00      	ldr	r3, [sp, #0]
 80133ba:	3301      	adds	r3, #1
 80133bc:	9301      	str	r3, [sp, #4]
 80133be:	9b00      	ldr	r3, [sp, #0]
 80133c0:	444b      	add	r3, r9
 80133c2:	9307      	str	r3, [sp, #28]
 80133c4:	9b02      	ldr	r3, [sp, #8]
 80133c6:	f003 0301 	and.w	r3, r3, #1
 80133ca:	46b8      	mov	r8, r7
 80133cc:	9306      	str	r3, [sp, #24]
 80133ce:	4607      	mov	r7, r0
 80133d0:	9b01      	ldr	r3, [sp, #4]
 80133d2:	4631      	mov	r1, r6
 80133d4:	3b01      	subs	r3, #1
 80133d6:	4658      	mov	r0, fp
 80133d8:	9302      	str	r3, [sp, #8]
 80133da:	f7ff fa67 	bl	80128ac <quorem>
 80133de:	4603      	mov	r3, r0
 80133e0:	3330      	adds	r3, #48	; 0x30
 80133e2:	9004      	str	r0, [sp, #16]
 80133e4:	4641      	mov	r1, r8
 80133e6:	4658      	mov	r0, fp
 80133e8:	9308      	str	r3, [sp, #32]
 80133ea:	f000 ff4f 	bl	801428c <__mcmp>
 80133ee:	463a      	mov	r2, r7
 80133f0:	4681      	mov	r9, r0
 80133f2:	4631      	mov	r1, r6
 80133f4:	4620      	mov	r0, r4
 80133f6:	f000 ff65 	bl	80142c4 <__mdiff>
 80133fa:	68c2      	ldr	r2, [r0, #12]
 80133fc:	9b08      	ldr	r3, [sp, #32]
 80133fe:	4605      	mov	r5, r0
 8013400:	bb02      	cbnz	r2, 8013444 <_dtoa_r+0xa7c>
 8013402:	4601      	mov	r1, r0
 8013404:	4658      	mov	r0, fp
 8013406:	f000 ff41 	bl	801428c <__mcmp>
 801340a:	9b08      	ldr	r3, [sp, #32]
 801340c:	4602      	mov	r2, r0
 801340e:	4629      	mov	r1, r5
 8013410:	4620      	mov	r0, r4
 8013412:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013416:	f000 fcb1 	bl	8013d7c <_Bfree>
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801341e:	9d01      	ldr	r5, [sp, #4]
 8013420:	ea43 0102 	orr.w	r1, r3, r2
 8013424:	9b06      	ldr	r3, [sp, #24]
 8013426:	430b      	orrs	r3, r1
 8013428:	9b08      	ldr	r3, [sp, #32]
 801342a:	d10d      	bne.n	8013448 <_dtoa_r+0xa80>
 801342c:	2b39      	cmp	r3, #57	; 0x39
 801342e:	d029      	beq.n	8013484 <_dtoa_r+0xabc>
 8013430:	f1b9 0f00 	cmp.w	r9, #0
 8013434:	dd01      	ble.n	801343a <_dtoa_r+0xa72>
 8013436:	9b04      	ldr	r3, [sp, #16]
 8013438:	3331      	adds	r3, #49	; 0x31
 801343a:	9a02      	ldr	r2, [sp, #8]
 801343c:	7013      	strb	r3, [r2, #0]
 801343e:	e774      	b.n	801332a <_dtoa_r+0x962>
 8013440:	4638      	mov	r0, r7
 8013442:	e7b9      	b.n	80133b8 <_dtoa_r+0x9f0>
 8013444:	2201      	movs	r2, #1
 8013446:	e7e2      	b.n	801340e <_dtoa_r+0xa46>
 8013448:	f1b9 0f00 	cmp.w	r9, #0
 801344c:	db06      	blt.n	801345c <_dtoa_r+0xa94>
 801344e:	9905      	ldr	r1, [sp, #20]
 8013450:	ea41 0909 	orr.w	r9, r1, r9
 8013454:	9906      	ldr	r1, [sp, #24]
 8013456:	ea59 0101 	orrs.w	r1, r9, r1
 801345a:	d120      	bne.n	801349e <_dtoa_r+0xad6>
 801345c:	2a00      	cmp	r2, #0
 801345e:	ddec      	ble.n	801343a <_dtoa_r+0xa72>
 8013460:	4659      	mov	r1, fp
 8013462:	2201      	movs	r2, #1
 8013464:	4620      	mov	r0, r4
 8013466:	9301      	str	r3, [sp, #4]
 8013468:	f000 fea4 	bl	80141b4 <__lshift>
 801346c:	4631      	mov	r1, r6
 801346e:	4683      	mov	fp, r0
 8013470:	f000 ff0c 	bl	801428c <__mcmp>
 8013474:	2800      	cmp	r0, #0
 8013476:	9b01      	ldr	r3, [sp, #4]
 8013478:	dc02      	bgt.n	8013480 <_dtoa_r+0xab8>
 801347a:	d1de      	bne.n	801343a <_dtoa_r+0xa72>
 801347c:	07da      	lsls	r2, r3, #31
 801347e:	d5dc      	bpl.n	801343a <_dtoa_r+0xa72>
 8013480:	2b39      	cmp	r3, #57	; 0x39
 8013482:	d1d8      	bne.n	8013436 <_dtoa_r+0xa6e>
 8013484:	9a02      	ldr	r2, [sp, #8]
 8013486:	2339      	movs	r3, #57	; 0x39
 8013488:	7013      	strb	r3, [r2, #0]
 801348a:	462b      	mov	r3, r5
 801348c:	461d      	mov	r5, r3
 801348e:	3b01      	subs	r3, #1
 8013490:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013494:	2a39      	cmp	r2, #57	; 0x39
 8013496:	d050      	beq.n	801353a <_dtoa_r+0xb72>
 8013498:	3201      	adds	r2, #1
 801349a:	701a      	strb	r2, [r3, #0]
 801349c:	e745      	b.n	801332a <_dtoa_r+0x962>
 801349e:	2a00      	cmp	r2, #0
 80134a0:	dd03      	ble.n	80134aa <_dtoa_r+0xae2>
 80134a2:	2b39      	cmp	r3, #57	; 0x39
 80134a4:	d0ee      	beq.n	8013484 <_dtoa_r+0xabc>
 80134a6:	3301      	adds	r3, #1
 80134a8:	e7c7      	b.n	801343a <_dtoa_r+0xa72>
 80134aa:	9a01      	ldr	r2, [sp, #4]
 80134ac:	9907      	ldr	r1, [sp, #28]
 80134ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80134b2:	428a      	cmp	r2, r1
 80134b4:	d02a      	beq.n	801350c <_dtoa_r+0xb44>
 80134b6:	4659      	mov	r1, fp
 80134b8:	2300      	movs	r3, #0
 80134ba:	220a      	movs	r2, #10
 80134bc:	4620      	mov	r0, r4
 80134be:	f000 fc7f 	bl	8013dc0 <__multadd>
 80134c2:	45b8      	cmp	r8, r7
 80134c4:	4683      	mov	fp, r0
 80134c6:	f04f 0300 	mov.w	r3, #0
 80134ca:	f04f 020a 	mov.w	r2, #10
 80134ce:	4641      	mov	r1, r8
 80134d0:	4620      	mov	r0, r4
 80134d2:	d107      	bne.n	80134e4 <_dtoa_r+0xb1c>
 80134d4:	f000 fc74 	bl	8013dc0 <__multadd>
 80134d8:	4680      	mov	r8, r0
 80134da:	4607      	mov	r7, r0
 80134dc:	9b01      	ldr	r3, [sp, #4]
 80134de:	3301      	adds	r3, #1
 80134e0:	9301      	str	r3, [sp, #4]
 80134e2:	e775      	b.n	80133d0 <_dtoa_r+0xa08>
 80134e4:	f000 fc6c 	bl	8013dc0 <__multadd>
 80134e8:	4639      	mov	r1, r7
 80134ea:	4680      	mov	r8, r0
 80134ec:	2300      	movs	r3, #0
 80134ee:	220a      	movs	r2, #10
 80134f0:	4620      	mov	r0, r4
 80134f2:	f000 fc65 	bl	8013dc0 <__multadd>
 80134f6:	4607      	mov	r7, r0
 80134f8:	e7f0      	b.n	80134dc <_dtoa_r+0xb14>
 80134fa:	f1b9 0f00 	cmp.w	r9, #0
 80134fe:	9a00      	ldr	r2, [sp, #0]
 8013500:	bfcc      	ite	gt
 8013502:	464d      	movgt	r5, r9
 8013504:	2501      	movle	r5, #1
 8013506:	4415      	add	r5, r2
 8013508:	f04f 0800 	mov.w	r8, #0
 801350c:	4659      	mov	r1, fp
 801350e:	2201      	movs	r2, #1
 8013510:	4620      	mov	r0, r4
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	f000 fe4e 	bl	80141b4 <__lshift>
 8013518:	4631      	mov	r1, r6
 801351a:	4683      	mov	fp, r0
 801351c:	f000 feb6 	bl	801428c <__mcmp>
 8013520:	2800      	cmp	r0, #0
 8013522:	dcb2      	bgt.n	801348a <_dtoa_r+0xac2>
 8013524:	d102      	bne.n	801352c <_dtoa_r+0xb64>
 8013526:	9b01      	ldr	r3, [sp, #4]
 8013528:	07db      	lsls	r3, r3, #31
 801352a:	d4ae      	bmi.n	801348a <_dtoa_r+0xac2>
 801352c:	462b      	mov	r3, r5
 801352e:	461d      	mov	r5, r3
 8013530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013534:	2a30      	cmp	r2, #48	; 0x30
 8013536:	d0fa      	beq.n	801352e <_dtoa_r+0xb66>
 8013538:	e6f7      	b.n	801332a <_dtoa_r+0x962>
 801353a:	9a00      	ldr	r2, [sp, #0]
 801353c:	429a      	cmp	r2, r3
 801353e:	d1a5      	bne.n	801348c <_dtoa_r+0xac4>
 8013540:	f10a 0a01 	add.w	sl, sl, #1
 8013544:	2331      	movs	r3, #49	; 0x31
 8013546:	e779      	b.n	801343c <_dtoa_r+0xa74>
 8013548:	4b13      	ldr	r3, [pc, #76]	; (8013598 <_dtoa_r+0xbd0>)
 801354a:	f7ff baaf 	b.w	8012aac <_dtoa_r+0xe4>
 801354e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013550:	2b00      	cmp	r3, #0
 8013552:	f47f aa86 	bne.w	8012a62 <_dtoa_r+0x9a>
 8013556:	4b11      	ldr	r3, [pc, #68]	; (801359c <_dtoa_r+0xbd4>)
 8013558:	f7ff baa8 	b.w	8012aac <_dtoa_r+0xe4>
 801355c:	f1b9 0f00 	cmp.w	r9, #0
 8013560:	dc03      	bgt.n	801356a <_dtoa_r+0xba2>
 8013562:	9b05      	ldr	r3, [sp, #20]
 8013564:	2b02      	cmp	r3, #2
 8013566:	f73f aec9 	bgt.w	80132fc <_dtoa_r+0x934>
 801356a:	9d00      	ldr	r5, [sp, #0]
 801356c:	4631      	mov	r1, r6
 801356e:	4658      	mov	r0, fp
 8013570:	f7ff f99c 	bl	80128ac <quorem>
 8013574:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013578:	f805 3b01 	strb.w	r3, [r5], #1
 801357c:	9a00      	ldr	r2, [sp, #0]
 801357e:	1aaa      	subs	r2, r5, r2
 8013580:	4591      	cmp	r9, r2
 8013582:	ddba      	ble.n	80134fa <_dtoa_r+0xb32>
 8013584:	4659      	mov	r1, fp
 8013586:	2300      	movs	r3, #0
 8013588:	220a      	movs	r2, #10
 801358a:	4620      	mov	r0, r4
 801358c:	f000 fc18 	bl	8013dc0 <__multadd>
 8013590:	4683      	mov	fp, r0
 8013592:	e7eb      	b.n	801356c <_dtoa_r+0xba4>
 8013594:	08029369 	.word	0x08029369
 8013598:	080290c8 	.word	0x080290c8
 801359c:	080292fd 	.word	0x080292fd

080135a0 <fiprintf>:
 80135a0:	b40e      	push	{r1, r2, r3}
 80135a2:	b503      	push	{r0, r1, lr}
 80135a4:	4601      	mov	r1, r0
 80135a6:	ab03      	add	r3, sp, #12
 80135a8:	4805      	ldr	r0, [pc, #20]	; (80135c0 <fiprintf+0x20>)
 80135aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ae:	6800      	ldr	r0, [r0, #0]
 80135b0:	9301      	str	r3, [sp, #4]
 80135b2:	f001 fa9d 	bl	8014af0 <_vfiprintf_r>
 80135b6:	b002      	add	sp, #8
 80135b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135bc:	b003      	add	sp, #12
 80135be:	4770      	bx	lr
 80135c0:	20000040 	.word	0x20000040

080135c4 <rshift>:
 80135c4:	6903      	ldr	r3, [r0, #16]
 80135c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80135ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80135d2:	f100 0414 	add.w	r4, r0, #20
 80135d6:	dd45      	ble.n	8013664 <rshift+0xa0>
 80135d8:	f011 011f 	ands.w	r1, r1, #31
 80135dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80135e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80135e4:	d10c      	bne.n	8013600 <rshift+0x3c>
 80135e6:	f100 0710 	add.w	r7, r0, #16
 80135ea:	4629      	mov	r1, r5
 80135ec:	42b1      	cmp	r1, r6
 80135ee:	d334      	bcc.n	801365a <rshift+0x96>
 80135f0:	1a9b      	subs	r3, r3, r2
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	1eea      	subs	r2, r5, #3
 80135f6:	4296      	cmp	r6, r2
 80135f8:	bf38      	it	cc
 80135fa:	2300      	movcc	r3, #0
 80135fc:	4423      	add	r3, r4
 80135fe:	e015      	b.n	801362c <rshift+0x68>
 8013600:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013604:	f1c1 0820 	rsb	r8, r1, #32
 8013608:	40cf      	lsrs	r7, r1
 801360a:	f105 0e04 	add.w	lr, r5, #4
 801360e:	46a1      	mov	r9, r4
 8013610:	4576      	cmp	r6, lr
 8013612:	46f4      	mov	ip, lr
 8013614:	d815      	bhi.n	8013642 <rshift+0x7e>
 8013616:	1a9b      	subs	r3, r3, r2
 8013618:	009a      	lsls	r2, r3, #2
 801361a:	3a04      	subs	r2, #4
 801361c:	3501      	adds	r5, #1
 801361e:	42ae      	cmp	r6, r5
 8013620:	bf38      	it	cc
 8013622:	2200      	movcc	r2, #0
 8013624:	18a3      	adds	r3, r4, r2
 8013626:	50a7      	str	r7, [r4, r2]
 8013628:	b107      	cbz	r7, 801362c <rshift+0x68>
 801362a:	3304      	adds	r3, #4
 801362c:	1b1a      	subs	r2, r3, r4
 801362e:	42a3      	cmp	r3, r4
 8013630:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013634:	bf08      	it	eq
 8013636:	2300      	moveq	r3, #0
 8013638:	6102      	str	r2, [r0, #16]
 801363a:	bf08      	it	eq
 801363c:	6143      	streq	r3, [r0, #20]
 801363e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013642:	f8dc c000 	ldr.w	ip, [ip]
 8013646:	fa0c fc08 	lsl.w	ip, ip, r8
 801364a:	ea4c 0707 	orr.w	r7, ip, r7
 801364e:	f849 7b04 	str.w	r7, [r9], #4
 8013652:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013656:	40cf      	lsrs	r7, r1
 8013658:	e7da      	b.n	8013610 <rshift+0x4c>
 801365a:	f851 cb04 	ldr.w	ip, [r1], #4
 801365e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013662:	e7c3      	b.n	80135ec <rshift+0x28>
 8013664:	4623      	mov	r3, r4
 8013666:	e7e1      	b.n	801362c <rshift+0x68>

08013668 <__hexdig_fun>:
 8013668:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801366c:	2b09      	cmp	r3, #9
 801366e:	d802      	bhi.n	8013676 <__hexdig_fun+0xe>
 8013670:	3820      	subs	r0, #32
 8013672:	b2c0      	uxtb	r0, r0
 8013674:	4770      	bx	lr
 8013676:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801367a:	2b05      	cmp	r3, #5
 801367c:	d801      	bhi.n	8013682 <__hexdig_fun+0x1a>
 801367e:	3847      	subs	r0, #71	; 0x47
 8013680:	e7f7      	b.n	8013672 <__hexdig_fun+0xa>
 8013682:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013686:	2b05      	cmp	r3, #5
 8013688:	d801      	bhi.n	801368e <__hexdig_fun+0x26>
 801368a:	3827      	subs	r0, #39	; 0x27
 801368c:	e7f1      	b.n	8013672 <__hexdig_fun+0xa>
 801368e:	2000      	movs	r0, #0
 8013690:	4770      	bx	lr
	...

08013694 <__gethex>:
 8013694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013698:	ed2d 8b02 	vpush	{d8}
 801369c:	b089      	sub	sp, #36	; 0x24
 801369e:	ee08 0a10 	vmov	s16, r0
 80136a2:	9304      	str	r3, [sp, #16]
 80136a4:	4bbc      	ldr	r3, [pc, #752]	; (8013998 <__gethex+0x304>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	4618      	mov	r0, r3
 80136ac:	468b      	mov	fp, r1
 80136ae:	4690      	mov	r8, r2
 80136b0:	f7ec fda0 	bl	80001f4 <strlen>
 80136b4:	9b01      	ldr	r3, [sp, #4]
 80136b6:	f8db 2000 	ldr.w	r2, [fp]
 80136ba:	4403      	add	r3, r0
 80136bc:	4682      	mov	sl, r0
 80136be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80136c2:	9305      	str	r3, [sp, #20]
 80136c4:	1c93      	adds	r3, r2, #2
 80136c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80136ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80136ce:	32fe      	adds	r2, #254	; 0xfe
 80136d0:	18d1      	adds	r1, r2, r3
 80136d2:	461f      	mov	r7, r3
 80136d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80136d8:	9100      	str	r1, [sp, #0]
 80136da:	2830      	cmp	r0, #48	; 0x30
 80136dc:	d0f8      	beq.n	80136d0 <__gethex+0x3c>
 80136de:	f7ff ffc3 	bl	8013668 <__hexdig_fun>
 80136e2:	4604      	mov	r4, r0
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d13a      	bne.n	801375e <__gethex+0xca>
 80136e8:	9901      	ldr	r1, [sp, #4]
 80136ea:	4652      	mov	r2, sl
 80136ec:	4638      	mov	r0, r7
 80136ee:	f001 fb47 	bl	8014d80 <strncmp>
 80136f2:	4605      	mov	r5, r0
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d168      	bne.n	80137ca <__gethex+0x136>
 80136f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80136fc:	eb07 060a 	add.w	r6, r7, sl
 8013700:	f7ff ffb2 	bl	8013668 <__hexdig_fun>
 8013704:	2800      	cmp	r0, #0
 8013706:	d062      	beq.n	80137ce <__gethex+0x13a>
 8013708:	4633      	mov	r3, r6
 801370a:	7818      	ldrb	r0, [r3, #0]
 801370c:	2830      	cmp	r0, #48	; 0x30
 801370e:	461f      	mov	r7, r3
 8013710:	f103 0301 	add.w	r3, r3, #1
 8013714:	d0f9      	beq.n	801370a <__gethex+0x76>
 8013716:	f7ff ffa7 	bl	8013668 <__hexdig_fun>
 801371a:	2301      	movs	r3, #1
 801371c:	fab0 f480 	clz	r4, r0
 8013720:	0964      	lsrs	r4, r4, #5
 8013722:	4635      	mov	r5, r6
 8013724:	9300      	str	r3, [sp, #0]
 8013726:	463a      	mov	r2, r7
 8013728:	4616      	mov	r6, r2
 801372a:	3201      	adds	r2, #1
 801372c:	7830      	ldrb	r0, [r6, #0]
 801372e:	f7ff ff9b 	bl	8013668 <__hexdig_fun>
 8013732:	2800      	cmp	r0, #0
 8013734:	d1f8      	bne.n	8013728 <__gethex+0x94>
 8013736:	9901      	ldr	r1, [sp, #4]
 8013738:	4652      	mov	r2, sl
 801373a:	4630      	mov	r0, r6
 801373c:	f001 fb20 	bl	8014d80 <strncmp>
 8013740:	b980      	cbnz	r0, 8013764 <__gethex+0xd0>
 8013742:	b94d      	cbnz	r5, 8013758 <__gethex+0xc4>
 8013744:	eb06 050a 	add.w	r5, r6, sl
 8013748:	462a      	mov	r2, r5
 801374a:	4616      	mov	r6, r2
 801374c:	3201      	adds	r2, #1
 801374e:	7830      	ldrb	r0, [r6, #0]
 8013750:	f7ff ff8a 	bl	8013668 <__hexdig_fun>
 8013754:	2800      	cmp	r0, #0
 8013756:	d1f8      	bne.n	801374a <__gethex+0xb6>
 8013758:	1bad      	subs	r5, r5, r6
 801375a:	00ad      	lsls	r5, r5, #2
 801375c:	e004      	b.n	8013768 <__gethex+0xd4>
 801375e:	2400      	movs	r4, #0
 8013760:	4625      	mov	r5, r4
 8013762:	e7e0      	b.n	8013726 <__gethex+0x92>
 8013764:	2d00      	cmp	r5, #0
 8013766:	d1f7      	bne.n	8013758 <__gethex+0xc4>
 8013768:	7833      	ldrb	r3, [r6, #0]
 801376a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801376e:	2b50      	cmp	r3, #80	; 0x50
 8013770:	d13b      	bne.n	80137ea <__gethex+0x156>
 8013772:	7873      	ldrb	r3, [r6, #1]
 8013774:	2b2b      	cmp	r3, #43	; 0x2b
 8013776:	d02c      	beq.n	80137d2 <__gethex+0x13e>
 8013778:	2b2d      	cmp	r3, #45	; 0x2d
 801377a:	d02e      	beq.n	80137da <__gethex+0x146>
 801377c:	1c71      	adds	r1, r6, #1
 801377e:	f04f 0900 	mov.w	r9, #0
 8013782:	7808      	ldrb	r0, [r1, #0]
 8013784:	f7ff ff70 	bl	8013668 <__hexdig_fun>
 8013788:	1e43      	subs	r3, r0, #1
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b18      	cmp	r3, #24
 801378e:	d82c      	bhi.n	80137ea <__gethex+0x156>
 8013790:	f1a0 0210 	sub.w	r2, r0, #16
 8013794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013798:	f7ff ff66 	bl	8013668 <__hexdig_fun>
 801379c:	1e43      	subs	r3, r0, #1
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b18      	cmp	r3, #24
 80137a2:	d91d      	bls.n	80137e0 <__gethex+0x14c>
 80137a4:	f1b9 0f00 	cmp.w	r9, #0
 80137a8:	d000      	beq.n	80137ac <__gethex+0x118>
 80137aa:	4252      	negs	r2, r2
 80137ac:	4415      	add	r5, r2
 80137ae:	f8cb 1000 	str.w	r1, [fp]
 80137b2:	b1e4      	cbz	r4, 80137ee <__gethex+0x15a>
 80137b4:	9b00      	ldr	r3, [sp, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	bf14      	ite	ne
 80137ba:	2700      	movne	r7, #0
 80137bc:	2706      	moveq	r7, #6
 80137be:	4638      	mov	r0, r7
 80137c0:	b009      	add	sp, #36	; 0x24
 80137c2:	ecbd 8b02 	vpop	{d8}
 80137c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ca:	463e      	mov	r6, r7
 80137cc:	4625      	mov	r5, r4
 80137ce:	2401      	movs	r4, #1
 80137d0:	e7ca      	b.n	8013768 <__gethex+0xd4>
 80137d2:	f04f 0900 	mov.w	r9, #0
 80137d6:	1cb1      	adds	r1, r6, #2
 80137d8:	e7d3      	b.n	8013782 <__gethex+0xee>
 80137da:	f04f 0901 	mov.w	r9, #1
 80137de:	e7fa      	b.n	80137d6 <__gethex+0x142>
 80137e0:	230a      	movs	r3, #10
 80137e2:	fb03 0202 	mla	r2, r3, r2, r0
 80137e6:	3a10      	subs	r2, #16
 80137e8:	e7d4      	b.n	8013794 <__gethex+0x100>
 80137ea:	4631      	mov	r1, r6
 80137ec:	e7df      	b.n	80137ae <__gethex+0x11a>
 80137ee:	1bf3      	subs	r3, r6, r7
 80137f0:	3b01      	subs	r3, #1
 80137f2:	4621      	mov	r1, r4
 80137f4:	2b07      	cmp	r3, #7
 80137f6:	dc0b      	bgt.n	8013810 <__gethex+0x17c>
 80137f8:	ee18 0a10 	vmov	r0, s16
 80137fc:	f000 fa7e 	bl	8013cfc <_Balloc>
 8013800:	4604      	mov	r4, r0
 8013802:	b940      	cbnz	r0, 8013816 <__gethex+0x182>
 8013804:	4b65      	ldr	r3, [pc, #404]	; (801399c <__gethex+0x308>)
 8013806:	4602      	mov	r2, r0
 8013808:	21de      	movs	r1, #222	; 0xde
 801380a:	4865      	ldr	r0, [pc, #404]	; (80139a0 <__gethex+0x30c>)
 801380c:	f7ff f830 	bl	8012870 <__assert_func>
 8013810:	3101      	adds	r1, #1
 8013812:	105b      	asrs	r3, r3, #1
 8013814:	e7ee      	b.n	80137f4 <__gethex+0x160>
 8013816:	f100 0914 	add.w	r9, r0, #20
 801381a:	f04f 0b00 	mov.w	fp, #0
 801381e:	f1ca 0301 	rsb	r3, sl, #1
 8013822:	f8cd 9008 	str.w	r9, [sp, #8]
 8013826:	f8cd b000 	str.w	fp, [sp]
 801382a:	9306      	str	r3, [sp, #24]
 801382c:	42b7      	cmp	r7, r6
 801382e:	d340      	bcc.n	80138b2 <__gethex+0x21e>
 8013830:	9802      	ldr	r0, [sp, #8]
 8013832:	9b00      	ldr	r3, [sp, #0]
 8013834:	f840 3b04 	str.w	r3, [r0], #4
 8013838:	eba0 0009 	sub.w	r0, r0, r9
 801383c:	1080      	asrs	r0, r0, #2
 801383e:	0146      	lsls	r6, r0, #5
 8013840:	6120      	str	r0, [r4, #16]
 8013842:	4618      	mov	r0, r3
 8013844:	f000 fb50 	bl	8013ee8 <__hi0bits>
 8013848:	1a30      	subs	r0, r6, r0
 801384a:	f8d8 6000 	ldr.w	r6, [r8]
 801384e:	42b0      	cmp	r0, r6
 8013850:	dd63      	ble.n	801391a <__gethex+0x286>
 8013852:	1b87      	subs	r7, r0, r6
 8013854:	4639      	mov	r1, r7
 8013856:	4620      	mov	r0, r4
 8013858:	f000 feea 	bl	8014630 <__any_on>
 801385c:	4682      	mov	sl, r0
 801385e:	b1a8      	cbz	r0, 801388c <__gethex+0x1f8>
 8013860:	1e7b      	subs	r3, r7, #1
 8013862:	1159      	asrs	r1, r3, #5
 8013864:	f003 021f 	and.w	r2, r3, #31
 8013868:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801386c:	f04f 0a01 	mov.w	sl, #1
 8013870:	fa0a f202 	lsl.w	r2, sl, r2
 8013874:	420a      	tst	r2, r1
 8013876:	d009      	beq.n	801388c <__gethex+0x1f8>
 8013878:	4553      	cmp	r3, sl
 801387a:	dd05      	ble.n	8013888 <__gethex+0x1f4>
 801387c:	1eb9      	subs	r1, r7, #2
 801387e:	4620      	mov	r0, r4
 8013880:	f000 fed6 	bl	8014630 <__any_on>
 8013884:	2800      	cmp	r0, #0
 8013886:	d145      	bne.n	8013914 <__gethex+0x280>
 8013888:	f04f 0a02 	mov.w	sl, #2
 801388c:	4639      	mov	r1, r7
 801388e:	4620      	mov	r0, r4
 8013890:	f7ff fe98 	bl	80135c4 <rshift>
 8013894:	443d      	add	r5, r7
 8013896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801389a:	42ab      	cmp	r3, r5
 801389c:	da4c      	bge.n	8013938 <__gethex+0x2a4>
 801389e:	ee18 0a10 	vmov	r0, s16
 80138a2:	4621      	mov	r1, r4
 80138a4:	f000 fa6a 	bl	8013d7c <_Bfree>
 80138a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80138aa:	2300      	movs	r3, #0
 80138ac:	6013      	str	r3, [r2, #0]
 80138ae:	27a3      	movs	r7, #163	; 0xa3
 80138b0:	e785      	b.n	80137be <__gethex+0x12a>
 80138b2:	1e73      	subs	r3, r6, #1
 80138b4:	9a05      	ldr	r2, [sp, #20]
 80138b6:	9303      	str	r3, [sp, #12]
 80138b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80138bc:	4293      	cmp	r3, r2
 80138be:	d019      	beq.n	80138f4 <__gethex+0x260>
 80138c0:	f1bb 0f20 	cmp.w	fp, #32
 80138c4:	d107      	bne.n	80138d6 <__gethex+0x242>
 80138c6:	9b02      	ldr	r3, [sp, #8]
 80138c8:	9a00      	ldr	r2, [sp, #0]
 80138ca:	f843 2b04 	str.w	r2, [r3], #4
 80138ce:	9302      	str	r3, [sp, #8]
 80138d0:	2300      	movs	r3, #0
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	469b      	mov	fp, r3
 80138d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80138da:	f7ff fec5 	bl	8013668 <__hexdig_fun>
 80138de:	9b00      	ldr	r3, [sp, #0]
 80138e0:	f000 000f 	and.w	r0, r0, #15
 80138e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80138e8:	4303      	orrs	r3, r0
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	f10b 0b04 	add.w	fp, fp, #4
 80138f0:	9b03      	ldr	r3, [sp, #12]
 80138f2:	e00d      	b.n	8013910 <__gethex+0x27c>
 80138f4:	9b03      	ldr	r3, [sp, #12]
 80138f6:	9a06      	ldr	r2, [sp, #24]
 80138f8:	4413      	add	r3, r2
 80138fa:	42bb      	cmp	r3, r7
 80138fc:	d3e0      	bcc.n	80138c0 <__gethex+0x22c>
 80138fe:	4618      	mov	r0, r3
 8013900:	9901      	ldr	r1, [sp, #4]
 8013902:	9307      	str	r3, [sp, #28]
 8013904:	4652      	mov	r2, sl
 8013906:	f001 fa3b 	bl	8014d80 <strncmp>
 801390a:	9b07      	ldr	r3, [sp, #28]
 801390c:	2800      	cmp	r0, #0
 801390e:	d1d7      	bne.n	80138c0 <__gethex+0x22c>
 8013910:	461e      	mov	r6, r3
 8013912:	e78b      	b.n	801382c <__gethex+0x198>
 8013914:	f04f 0a03 	mov.w	sl, #3
 8013918:	e7b8      	b.n	801388c <__gethex+0x1f8>
 801391a:	da0a      	bge.n	8013932 <__gethex+0x29e>
 801391c:	1a37      	subs	r7, r6, r0
 801391e:	4621      	mov	r1, r4
 8013920:	ee18 0a10 	vmov	r0, s16
 8013924:	463a      	mov	r2, r7
 8013926:	f000 fc45 	bl	80141b4 <__lshift>
 801392a:	1bed      	subs	r5, r5, r7
 801392c:	4604      	mov	r4, r0
 801392e:	f100 0914 	add.w	r9, r0, #20
 8013932:	f04f 0a00 	mov.w	sl, #0
 8013936:	e7ae      	b.n	8013896 <__gethex+0x202>
 8013938:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801393c:	42a8      	cmp	r0, r5
 801393e:	dd72      	ble.n	8013a26 <__gethex+0x392>
 8013940:	1b45      	subs	r5, r0, r5
 8013942:	42ae      	cmp	r6, r5
 8013944:	dc36      	bgt.n	80139b4 <__gethex+0x320>
 8013946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801394a:	2b02      	cmp	r3, #2
 801394c:	d02a      	beq.n	80139a4 <__gethex+0x310>
 801394e:	2b03      	cmp	r3, #3
 8013950:	d02c      	beq.n	80139ac <__gethex+0x318>
 8013952:	2b01      	cmp	r3, #1
 8013954:	d115      	bne.n	8013982 <__gethex+0x2ee>
 8013956:	42ae      	cmp	r6, r5
 8013958:	d113      	bne.n	8013982 <__gethex+0x2ee>
 801395a:	2e01      	cmp	r6, #1
 801395c:	d10b      	bne.n	8013976 <__gethex+0x2e2>
 801395e:	9a04      	ldr	r2, [sp, #16]
 8013960:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013964:	6013      	str	r3, [r2, #0]
 8013966:	2301      	movs	r3, #1
 8013968:	6123      	str	r3, [r4, #16]
 801396a:	f8c9 3000 	str.w	r3, [r9]
 801396e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013970:	2762      	movs	r7, #98	; 0x62
 8013972:	601c      	str	r4, [r3, #0]
 8013974:	e723      	b.n	80137be <__gethex+0x12a>
 8013976:	1e71      	subs	r1, r6, #1
 8013978:	4620      	mov	r0, r4
 801397a:	f000 fe59 	bl	8014630 <__any_on>
 801397e:	2800      	cmp	r0, #0
 8013980:	d1ed      	bne.n	801395e <__gethex+0x2ca>
 8013982:	ee18 0a10 	vmov	r0, s16
 8013986:	4621      	mov	r1, r4
 8013988:	f000 f9f8 	bl	8013d7c <_Bfree>
 801398c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801398e:	2300      	movs	r3, #0
 8013990:	6013      	str	r3, [r2, #0]
 8013992:	2750      	movs	r7, #80	; 0x50
 8013994:	e713      	b.n	80137be <__gethex+0x12a>
 8013996:	bf00      	nop
 8013998:	080293e4 	.word	0x080293e4
 801399c:	08029369 	.word	0x08029369
 80139a0:	0802937a 	.word	0x0802937a
 80139a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d1eb      	bne.n	8013982 <__gethex+0x2ee>
 80139aa:	e7d8      	b.n	801395e <__gethex+0x2ca>
 80139ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1d5      	bne.n	801395e <__gethex+0x2ca>
 80139b2:	e7e6      	b.n	8013982 <__gethex+0x2ee>
 80139b4:	1e6f      	subs	r7, r5, #1
 80139b6:	f1ba 0f00 	cmp.w	sl, #0
 80139ba:	d131      	bne.n	8013a20 <__gethex+0x38c>
 80139bc:	b127      	cbz	r7, 80139c8 <__gethex+0x334>
 80139be:	4639      	mov	r1, r7
 80139c0:	4620      	mov	r0, r4
 80139c2:	f000 fe35 	bl	8014630 <__any_on>
 80139c6:	4682      	mov	sl, r0
 80139c8:	117b      	asrs	r3, r7, #5
 80139ca:	2101      	movs	r1, #1
 80139cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80139d0:	f007 071f 	and.w	r7, r7, #31
 80139d4:	fa01 f707 	lsl.w	r7, r1, r7
 80139d8:	421f      	tst	r7, r3
 80139da:	4629      	mov	r1, r5
 80139dc:	4620      	mov	r0, r4
 80139de:	bf18      	it	ne
 80139e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80139e4:	1b76      	subs	r6, r6, r5
 80139e6:	f7ff fded 	bl	80135c4 <rshift>
 80139ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80139ee:	2702      	movs	r7, #2
 80139f0:	f1ba 0f00 	cmp.w	sl, #0
 80139f4:	d048      	beq.n	8013a88 <__gethex+0x3f4>
 80139f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80139fa:	2b02      	cmp	r3, #2
 80139fc:	d015      	beq.n	8013a2a <__gethex+0x396>
 80139fe:	2b03      	cmp	r3, #3
 8013a00:	d017      	beq.n	8013a32 <__gethex+0x39e>
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	d109      	bne.n	8013a1a <__gethex+0x386>
 8013a06:	f01a 0f02 	tst.w	sl, #2
 8013a0a:	d006      	beq.n	8013a1a <__gethex+0x386>
 8013a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8013a10:	ea4a 0a00 	orr.w	sl, sl, r0
 8013a14:	f01a 0f01 	tst.w	sl, #1
 8013a18:	d10e      	bne.n	8013a38 <__gethex+0x3a4>
 8013a1a:	f047 0710 	orr.w	r7, r7, #16
 8013a1e:	e033      	b.n	8013a88 <__gethex+0x3f4>
 8013a20:	f04f 0a01 	mov.w	sl, #1
 8013a24:	e7d0      	b.n	80139c8 <__gethex+0x334>
 8013a26:	2701      	movs	r7, #1
 8013a28:	e7e2      	b.n	80139f0 <__gethex+0x35c>
 8013a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a2c:	f1c3 0301 	rsb	r3, r3, #1
 8013a30:	9315      	str	r3, [sp, #84]	; 0x54
 8013a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d0f0      	beq.n	8013a1a <__gethex+0x386>
 8013a38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a3c:	f104 0314 	add.w	r3, r4, #20
 8013a40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a48:	f04f 0c00 	mov.w	ip, #0
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a52:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013a56:	d01c      	beq.n	8013a92 <__gethex+0x3fe>
 8013a58:	3201      	adds	r2, #1
 8013a5a:	6002      	str	r2, [r0, #0]
 8013a5c:	2f02      	cmp	r7, #2
 8013a5e:	f104 0314 	add.w	r3, r4, #20
 8013a62:	d13f      	bne.n	8013ae4 <__gethex+0x450>
 8013a64:	f8d8 2000 	ldr.w	r2, [r8]
 8013a68:	3a01      	subs	r2, #1
 8013a6a:	42b2      	cmp	r2, r6
 8013a6c:	d10a      	bne.n	8013a84 <__gethex+0x3f0>
 8013a6e:	1171      	asrs	r1, r6, #5
 8013a70:	2201      	movs	r2, #1
 8013a72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a76:	f006 061f 	and.w	r6, r6, #31
 8013a7a:	fa02 f606 	lsl.w	r6, r2, r6
 8013a7e:	421e      	tst	r6, r3
 8013a80:	bf18      	it	ne
 8013a82:	4617      	movne	r7, r2
 8013a84:	f047 0720 	orr.w	r7, r7, #32
 8013a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013a8a:	601c      	str	r4, [r3, #0]
 8013a8c:	9b04      	ldr	r3, [sp, #16]
 8013a8e:	601d      	str	r5, [r3, #0]
 8013a90:	e695      	b.n	80137be <__gethex+0x12a>
 8013a92:	4299      	cmp	r1, r3
 8013a94:	f843 cc04 	str.w	ip, [r3, #-4]
 8013a98:	d8d8      	bhi.n	8013a4c <__gethex+0x3b8>
 8013a9a:	68a3      	ldr	r3, [r4, #8]
 8013a9c:	459b      	cmp	fp, r3
 8013a9e:	db19      	blt.n	8013ad4 <__gethex+0x440>
 8013aa0:	6861      	ldr	r1, [r4, #4]
 8013aa2:	ee18 0a10 	vmov	r0, s16
 8013aa6:	3101      	adds	r1, #1
 8013aa8:	f000 f928 	bl	8013cfc <_Balloc>
 8013aac:	4681      	mov	r9, r0
 8013aae:	b918      	cbnz	r0, 8013ab8 <__gethex+0x424>
 8013ab0:	4b1a      	ldr	r3, [pc, #104]	; (8013b1c <__gethex+0x488>)
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	2184      	movs	r1, #132	; 0x84
 8013ab6:	e6a8      	b.n	801380a <__gethex+0x176>
 8013ab8:	6922      	ldr	r2, [r4, #16]
 8013aba:	3202      	adds	r2, #2
 8013abc:	f104 010c 	add.w	r1, r4, #12
 8013ac0:	0092      	lsls	r2, r2, #2
 8013ac2:	300c      	adds	r0, #12
 8013ac4:	f000 f90c 	bl	8013ce0 <memcpy>
 8013ac8:	4621      	mov	r1, r4
 8013aca:	ee18 0a10 	vmov	r0, s16
 8013ace:	f000 f955 	bl	8013d7c <_Bfree>
 8013ad2:	464c      	mov	r4, r9
 8013ad4:	6923      	ldr	r3, [r4, #16]
 8013ad6:	1c5a      	adds	r2, r3, #1
 8013ad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013adc:	6122      	str	r2, [r4, #16]
 8013ade:	2201      	movs	r2, #1
 8013ae0:	615a      	str	r2, [r3, #20]
 8013ae2:	e7bb      	b.n	8013a5c <__gethex+0x3c8>
 8013ae4:	6922      	ldr	r2, [r4, #16]
 8013ae6:	455a      	cmp	r2, fp
 8013ae8:	dd0b      	ble.n	8013b02 <__gethex+0x46e>
 8013aea:	2101      	movs	r1, #1
 8013aec:	4620      	mov	r0, r4
 8013aee:	f7ff fd69 	bl	80135c4 <rshift>
 8013af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013af6:	3501      	adds	r5, #1
 8013af8:	42ab      	cmp	r3, r5
 8013afa:	f6ff aed0 	blt.w	801389e <__gethex+0x20a>
 8013afe:	2701      	movs	r7, #1
 8013b00:	e7c0      	b.n	8013a84 <__gethex+0x3f0>
 8013b02:	f016 061f 	ands.w	r6, r6, #31
 8013b06:	d0fa      	beq.n	8013afe <__gethex+0x46a>
 8013b08:	449a      	add	sl, r3
 8013b0a:	f1c6 0620 	rsb	r6, r6, #32
 8013b0e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013b12:	f000 f9e9 	bl	8013ee8 <__hi0bits>
 8013b16:	42b0      	cmp	r0, r6
 8013b18:	dbe7      	blt.n	8013aea <__gethex+0x456>
 8013b1a:	e7f0      	b.n	8013afe <__gethex+0x46a>
 8013b1c:	08029369 	.word	0x08029369

08013b20 <L_shift>:
 8013b20:	f1c2 0208 	rsb	r2, r2, #8
 8013b24:	0092      	lsls	r2, r2, #2
 8013b26:	b570      	push	{r4, r5, r6, lr}
 8013b28:	f1c2 0620 	rsb	r6, r2, #32
 8013b2c:	6843      	ldr	r3, [r0, #4]
 8013b2e:	6804      	ldr	r4, [r0, #0]
 8013b30:	fa03 f506 	lsl.w	r5, r3, r6
 8013b34:	432c      	orrs	r4, r5
 8013b36:	40d3      	lsrs	r3, r2
 8013b38:	6004      	str	r4, [r0, #0]
 8013b3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b3e:	4288      	cmp	r0, r1
 8013b40:	d3f4      	bcc.n	8013b2c <L_shift+0xc>
 8013b42:	bd70      	pop	{r4, r5, r6, pc}

08013b44 <__match>:
 8013b44:	b530      	push	{r4, r5, lr}
 8013b46:	6803      	ldr	r3, [r0, #0]
 8013b48:	3301      	adds	r3, #1
 8013b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b4e:	b914      	cbnz	r4, 8013b56 <__match+0x12>
 8013b50:	6003      	str	r3, [r0, #0]
 8013b52:	2001      	movs	r0, #1
 8013b54:	bd30      	pop	{r4, r5, pc}
 8013b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013b5e:	2d19      	cmp	r5, #25
 8013b60:	bf98      	it	ls
 8013b62:	3220      	addls	r2, #32
 8013b64:	42a2      	cmp	r2, r4
 8013b66:	d0f0      	beq.n	8013b4a <__match+0x6>
 8013b68:	2000      	movs	r0, #0
 8013b6a:	e7f3      	b.n	8013b54 <__match+0x10>

08013b6c <__hexnan>:
 8013b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b70:	680b      	ldr	r3, [r1, #0]
 8013b72:	6801      	ldr	r1, [r0, #0]
 8013b74:	115e      	asrs	r6, r3, #5
 8013b76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b7a:	f013 031f 	ands.w	r3, r3, #31
 8013b7e:	b087      	sub	sp, #28
 8013b80:	bf18      	it	ne
 8013b82:	3604      	addne	r6, #4
 8013b84:	2500      	movs	r5, #0
 8013b86:	1f37      	subs	r7, r6, #4
 8013b88:	4682      	mov	sl, r0
 8013b8a:	4690      	mov	r8, r2
 8013b8c:	9301      	str	r3, [sp, #4]
 8013b8e:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b92:	46b9      	mov	r9, r7
 8013b94:	463c      	mov	r4, r7
 8013b96:	9502      	str	r5, [sp, #8]
 8013b98:	46ab      	mov	fp, r5
 8013b9a:	784a      	ldrb	r2, [r1, #1]
 8013b9c:	1c4b      	adds	r3, r1, #1
 8013b9e:	9303      	str	r3, [sp, #12]
 8013ba0:	b342      	cbz	r2, 8013bf4 <__hexnan+0x88>
 8013ba2:	4610      	mov	r0, r2
 8013ba4:	9105      	str	r1, [sp, #20]
 8013ba6:	9204      	str	r2, [sp, #16]
 8013ba8:	f7ff fd5e 	bl	8013668 <__hexdig_fun>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d14f      	bne.n	8013c50 <__hexnan+0xe4>
 8013bb0:	9a04      	ldr	r2, [sp, #16]
 8013bb2:	9905      	ldr	r1, [sp, #20]
 8013bb4:	2a20      	cmp	r2, #32
 8013bb6:	d818      	bhi.n	8013bea <__hexnan+0x7e>
 8013bb8:	9b02      	ldr	r3, [sp, #8]
 8013bba:	459b      	cmp	fp, r3
 8013bbc:	dd13      	ble.n	8013be6 <__hexnan+0x7a>
 8013bbe:	454c      	cmp	r4, r9
 8013bc0:	d206      	bcs.n	8013bd0 <__hexnan+0x64>
 8013bc2:	2d07      	cmp	r5, #7
 8013bc4:	dc04      	bgt.n	8013bd0 <__hexnan+0x64>
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4649      	mov	r1, r9
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f7ff ffa8 	bl	8013b20 <L_shift>
 8013bd0:	4544      	cmp	r4, r8
 8013bd2:	d950      	bls.n	8013c76 <__hexnan+0x10a>
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f1a4 0904 	sub.w	r9, r4, #4
 8013bda:	f844 3c04 	str.w	r3, [r4, #-4]
 8013bde:	f8cd b008 	str.w	fp, [sp, #8]
 8013be2:	464c      	mov	r4, r9
 8013be4:	461d      	mov	r5, r3
 8013be6:	9903      	ldr	r1, [sp, #12]
 8013be8:	e7d7      	b.n	8013b9a <__hexnan+0x2e>
 8013bea:	2a29      	cmp	r2, #41	; 0x29
 8013bec:	d156      	bne.n	8013c9c <__hexnan+0x130>
 8013bee:	3102      	adds	r1, #2
 8013bf0:	f8ca 1000 	str.w	r1, [sl]
 8013bf4:	f1bb 0f00 	cmp.w	fp, #0
 8013bf8:	d050      	beq.n	8013c9c <__hexnan+0x130>
 8013bfa:	454c      	cmp	r4, r9
 8013bfc:	d206      	bcs.n	8013c0c <__hexnan+0xa0>
 8013bfe:	2d07      	cmp	r5, #7
 8013c00:	dc04      	bgt.n	8013c0c <__hexnan+0xa0>
 8013c02:	462a      	mov	r2, r5
 8013c04:	4649      	mov	r1, r9
 8013c06:	4620      	mov	r0, r4
 8013c08:	f7ff ff8a 	bl	8013b20 <L_shift>
 8013c0c:	4544      	cmp	r4, r8
 8013c0e:	d934      	bls.n	8013c7a <__hexnan+0x10e>
 8013c10:	f1a8 0204 	sub.w	r2, r8, #4
 8013c14:	4623      	mov	r3, r4
 8013c16:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c1a:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c1e:	429f      	cmp	r7, r3
 8013c20:	d2f9      	bcs.n	8013c16 <__hexnan+0xaa>
 8013c22:	1b3b      	subs	r3, r7, r4
 8013c24:	f023 0303 	bic.w	r3, r3, #3
 8013c28:	3304      	adds	r3, #4
 8013c2a:	3401      	adds	r4, #1
 8013c2c:	3e03      	subs	r6, #3
 8013c2e:	42b4      	cmp	r4, r6
 8013c30:	bf88      	it	hi
 8013c32:	2304      	movhi	r3, #4
 8013c34:	4443      	add	r3, r8
 8013c36:	2200      	movs	r2, #0
 8013c38:	f843 2b04 	str.w	r2, [r3], #4
 8013c3c:	429f      	cmp	r7, r3
 8013c3e:	d2fb      	bcs.n	8013c38 <__hexnan+0xcc>
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	b91b      	cbnz	r3, 8013c4c <__hexnan+0xe0>
 8013c44:	4547      	cmp	r7, r8
 8013c46:	d127      	bne.n	8013c98 <__hexnan+0x12c>
 8013c48:	2301      	movs	r3, #1
 8013c4a:	603b      	str	r3, [r7, #0]
 8013c4c:	2005      	movs	r0, #5
 8013c4e:	e026      	b.n	8013c9e <__hexnan+0x132>
 8013c50:	3501      	adds	r5, #1
 8013c52:	2d08      	cmp	r5, #8
 8013c54:	f10b 0b01 	add.w	fp, fp, #1
 8013c58:	dd06      	ble.n	8013c68 <__hexnan+0xfc>
 8013c5a:	4544      	cmp	r4, r8
 8013c5c:	d9c3      	bls.n	8013be6 <__hexnan+0x7a>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c64:	2501      	movs	r5, #1
 8013c66:	3c04      	subs	r4, #4
 8013c68:	6822      	ldr	r2, [r4, #0]
 8013c6a:	f000 000f 	and.w	r0, r0, #15
 8013c6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013c72:	6022      	str	r2, [r4, #0]
 8013c74:	e7b7      	b.n	8013be6 <__hexnan+0x7a>
 8013c76:	2508      	movs	r5, #8
 8013c78:	e7b5      	b.n	8013be6 <__hexnan+0x7a>
 8013c7a:	9b01      	ldr	r3, [sp, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0df      	beq.n	8013c40 <__hexnan+0xd4>
 8013c80:	f04f 32ff 	mov.w	r2, #4294967295
 8013c84:	f1c3 0320 	rsb	r3, r3, #32
 8013c88:	fa22 f303 	lsr.w	r3, r2, r3
 8013c8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013c90:	401a      	ands	r2, r3
 8013c92:	f846 2c04 	str.w	r2, [r6, #-4]
 8013c96:	e7d3      	b.n	8013c40 <__hexnan+0xd4>
 8013c98:	3f04      	subs	r7, #4
 8013c9a:	e7d1      	b.n	8013c40 <__hexnan+0xd4>
 8013c9c:	2004      	movs	r0, #4
 8013c9e:	b007      	add	sp, #28
 8013ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ca4 <_localeconv_r>:
 8013ca4:	4800      	ldr	r0, [pc, #0]	; (8013ca8 <_localeconv_r+0x4>)
 8013ca6:	4770      	bx	lr
 8013ca8:	20000198 	.word	0x20000198

08013cac <malloc>:
 8013cac:	4b02      	ldr	r3, [pc, #8]	; (8013cb8 <malloc+0xc>)
 8013cae:	4601      	mov	r1, r0
 8013cb0:	6818      	ldr	r0, [r3, #0]
 8013cb2:	f000 bd3d 	b.w	8014730 <_malloc_r>
 8013cb6:	bf00      	nop
 8013cb8:	20000040 	.word	0x20000040

08013cbc <__ascii_mbtowc>:
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	b901      	cbnz	r1, 8013cc2 <__ascii_mbtowc+0x6>
 8013cc0:	a901      	add	r1, sp, #4
 8013cc2:	b142      	cbz	r2, 8013cd6 <__ascii_mbtowc+0x1a>
 8013cc4:	b14b      	cbz	r3, 8013cda <__ascii_mbtowc+0x1e>
 8013cc6:	7813      	ldrb	r3, [r2, #0]
 8013cc8:	600b      	str	r3, [r1, #0]
 8013cca:	7812      	ldrb	r2, [r2, #0]
 8013ccc:	1e10      	subs	r0, r2, #0
 8013cce:	bf18      	it	ne
 8013cd0:	2001      	movne	r0, #1
 8013cd2:	b002      	add	sp, #8
 8013cd4:	4770      	bx	lr
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	e7fb      	b.n	8013cd2 <__ascii_mbtowc+0x16>
 8013cda:	f06f 0001 	mvn.w	r0, #1
 8013cde:	e7f8      	b.n	8013cd2 <__ascii_mbtowc+0x16>

08013ce0 <memcpy>:
 8013ce0:	440a      	add	r2, r1
 8013ce2:	4291      	cmp	r1, r2
 8013ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ce8:	d100      	bne.n	8013cec <memcpy+0xc>
 8013cea:	4770      	bx	lr
 8013cec:	b510      	push	{r4, lr}
 8013cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cf6:	4291      	cmp	r1, r2
 8013cf8:	d1f9      	bne.n	8013cee <memcpy+0xe>
 8013cfa:	bd10      	pop	{r4, pc}

08013cfc <_Balloc>:
 8013cfc:	b570      	push	{r4, r5, r6, lr}
 8013cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d00:	4604      	mov	r4, r0
 8013d02:	460d      	mov	r5, r1
 8013d04:	b976      	cbnz	r6, 8013d24 <_Balloc+0x28>
 8013d06:	2010      	movs	r0, #16
 8013d08:	f7ff ffd0 	bl	8013cac <malloc>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	6260      	str	r0, [r4, #36]	; 0x24
 8013d10:	b920      	cbnz	r0, 8013d1c <_Balloc+0x20>
 8013d12:	4b18      	ldr	r3, [pc, #96]	; (8013d74 <_Balloc+0x78>)
 8013d14:	4818      	ldr	r0, [pc, #96]	; (8013d78 <_Balloc+0x7c>)
 8013d16:	2166      	movs	r1, #102	; 0x66
 8013d18:	f7fe fdaa 	bl	8012870 <__assert_func>
 8013d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d20:	6006      	str	r6, [r0, #0]
 8013d22:	60c6      	str	r6, [r0, #12]
 8013d24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d26:	68f3      	ldr	r3, [r6, #12]
 8013d28:	b183      	cbz	r3, 8013d4c <_Balloc+0x50>
 8013d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d32:	b9b8      	cbnz	r0, 8013d64 <_Balloc+0x68>
 8013d34:	2101      	movs	r1, #1
 8013d36:	fa01 f605 	lsl.w	r6, r1, r5
 8013d3a:	1d72      	adds	r2, r6, #5
 8013d3c:	0092      	lsls	r2, r2, #2
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f000 fc97 	bl	8014672 <_calloc_r>
 8013d44:	b160      	cbz	r0, 8013d60 <_Balloc+0x64>
 8013d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d4a:	e00e      	b.n	8013d6a <_Balloc+0x6e>
 8013d4c:	2221      	movs	r2, #33	; 0x21
 8013d4e:	2104      	movs	r1, #4
 8013d50:	4620      	mov	r0, r4
 8013d52:	f000 fc8e 	bl	8014672 <_calloc_r>
 8013d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d58:	60f0      	str	r0, [r6, #12]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d1e4      	bne.n	8013d2a <_Balloc+0x2e>
 8013d60:	2000      	movs	r0, #0
 8013d62:	bd70      	pop	{r4, r5, r6, pc}
 8013d64:	6802      	ldr	r2, [r0, #0]
 8013d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d70:	e7f7      	b.n	8013d62 <_Balloc+0x66>
 8013d72:	bf00      	nop
 8013d74:	08029148 	.word	0x08029148
 8013d78:	080293f8 	.word	0x080293f8

08013d7c <_Bfree>:
 8013d7c:	b570      	push	{r4, r5, r6, lr}
 8013d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d80:	4605      	mov	r5, r0
 8013d82:	460c      	mov	r4, r1
 8013d84:	b976      	cbnz	r6, 8013da4 <_Bfree+0x28>
 8013d86:	2010      	movs	r0, #16
 8013d88:	f7ff ff90 	bl	8013cac <malloc>
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	6268      	str	r0, [r5, #36]	; 0x24
 8013d90:	b920      	cbnz	r0, 8013d9c <_Bfree+0x20>
 8013d92:	4b09      	ldr	r3, [pc, #36]	; (8013db8 <_Bfree+0x3c>)
 8013d94:	4809      	ldr	r0, [pc, #36]	; (8013dbc <_Bfree+0x40>)
 8013d96:	218a      	movs	r1, #138	; 0x8a
 8013d98:	f7fe fd6a 	bl	8012870 <__assert_func>
 8013d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013da0:	6006      	str	r6, [r0, #0]
 8013da2:	60c6      	str	r6, [r0, #12]
 8013da4:	b13c      	cbz	r4, 8013db6 <_Bfree+0x3a>
 8013da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013da8:	6862      	ldr	r2, [r4, #4]
 8013daa:	68db      	ldr	r3, [r3, #12]
 8013dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013db0:	6021      	str	r1, [r4, #0]
 8013db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013db6:	bd70      	pop	{r4, r5, r6, pc}
 8013db8:	08029148 	.word	0x08029148
 8013dbc:	080293f8 	.word	0x080293f8

08013dc0 <__multadd>:
 8013dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc4:	690e      	ldr	r6, [r1, #16]
 8013dc6:	4607      	mov	r7, r0
 8013dc8:	4698      	mov	r8, r3
 8013dca:	460c      	mov	r4, r1
 8013dcc:	f101 0014 	add.w	r0, r1, #20
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	6805      	ldr	r5, [r0, #0]
 8013dd4:	b2a9      	uxth	r1, r5
 8013dd6:	fb02 8101 	mla	r1, r2, r1, r8
 8013dda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013dde:	0c2d      	lsrs	r5, r5, #16
 8013de0:	fb02 c505 	mla	r5, r2, r5, ip
 8013de4:	b289      	uxth	r1, r1
 8013de6:	3301      	adds	r3, #1
 8013de8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013dec:	429e      	cmp	r6, r3
 8013dee:	f840 1b04 	str.w	r1, [r0], #4
 8013df2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013df6:	dcec      	bgt.n	8013dd2 <__multadd+0x12>
 8013df8:	f1b8 0f00 	cmp.w	r8, #0
 8013dfc:	d022      	beq.n	8013e44 <__multadd+0x84>
 8013dfe:	68a3      	ldr	r3, [r4, #8]
 8013e00:	42b3      	cmp	r3, r6
 8013e02:	dc19      	bgt.n	8013e38 <__multadd+0x78>
 8013e04:	6861      	ldr	r1, [r4, #4]
 8013e06:	4638      	mov	r0, r7
 8013e08:	3101      	adds	r1, #1
 8013e0a:	f7ff ff77 	bl	8013cfc <_Balloc>
 8013e0e:	4605      	mov	r5, r0
 8013e10:	b928      	cbnz	r0, 8013e1e <__multadd+0x5e>
 8013e12:	4602      	mov	r2, r0
 8013e14:	4b0d      	ldr	r3, [pc, #52]	; (8013e4c <__multadd+0x8c>)
 8013e16:	480e      	ldr	r0, [pc, #56]	; (8013e50 <__multadd+0x90>)
 8013e18:	21b5      	movs	r1, #181	; 0xb5
 8013e1a:	f7fe fd29 	bl	8012870 <__assert_func>
 8013e1e:	6922      	ldr	r2, [r4, #16]
 8013e20:	3202      	adds	r2, #2
 8013e22:	f104 010c 	add.w	r1, r4, #12
 8013e26:	0092      	lsls	r2, r2, #2
 8013e28:	300c      	adds	r0, #12
 8013e2a:	f7ff ff59 	bl	8013ce0 <memcpy>
 8013e2e:	4621      	mov	r1, r4
 8013e30:	4638      	mov	r0, r7
 8013e32:	f7ff ffa3 	bl	8013d7c <_Bfree>
 8013e36:	462c      	mov	r4, r5
 8013e38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013e3c:	3601      	adds	r6, #1
 8013e3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8013e42:	6126      	str	r6, [r4, #16]
 8013e44:	4620      	mov	r0, r4
 8013e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4a:	bf00      	nop
 8013e4c:	08029369 	.word	0x08029369
 8013e50:	080293f8 	.word	0x080293f8

08013e54 <__s2b>:
 8013e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e58:	460c      	mov	r4, r1
 8013e5a:	4615      	mov	r5, r2
 8013e5c:	461f      	mov	r7, r3
 8013e5e:	2209      	movs	r2, #9
 8013e60:	3308      	adds	r3, #8
 8013e62:	4606      	mov	r6, r0
 8013e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e68:	2100      	movs	r1, #0
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	db09      	blt.n	8013e84 <__s2b+0x30>
 8013e70:	4630      	mov	r0, r6
 8013e72:	f7ff ff43 	bl	8013cfc <_Balloc>
 8013e76:	b940      	cbnz	r0, 8013e8a <__s2b+0x36>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	4b19      	ldr	r3, [pc, #100]	; (8013ee0 <__s2b+0x8c>)
 8013e7c:	4819      	ldr	r0, [pc, #100]	; (8013ee4 <__s2b+0x90>)
 8013e7e:	21ce      	movs	r1, #206	; 0xce
 8013e80:	f7fe fcf6 	bl	8012870 <__assert_func>
 8013e84:	0052      	lsls	r2, r2, #1
 8013e86:	3101      	adds	r1, #1
 8013e88:	e7f0      	b.n	8013e6c <__s2b+0x18>
 8013e8a:	9b08      	ldr	r3, [sp, #32]
 8013e8c:	6143      	str	r3, [r0, #20]
 8013e8e:	2d09      	cmp	r5, #9
 8013e90:	f04f 0301 	mov.w	r3, #1
 8013e94:	6103      	str	r3, [r0, #16]
 8013e96:	dd16      	ble.n	8013ec6 <__s2b+0x72>
 8013e98:	f104 0909 	add.w	r9, r4, #9
 8013e9c:	46c8      	mov	r8, r9
 8013e9e:	442c      	add	r4, r5
 8013ea0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013ea4:	4601      	mov	r1, r0
 8013ea6:	3b30      	subs	r3, #48	; 0x30
 8013ea8:	220a      	movs	r2, #10
 8013eaa:	4630      	mov	r0, r6
 8013eac:	f7ff ff88 	bl	8013dc0 <__multadd>
 8013eb0:	45a0      	cmp	r8, r4
 8013eb2:	d1f5      	bne.n	8013ea0 <__s2b+0x4c>
 8013eb4:	f1a5 0408 	sub.w	r4, r5, #8
 8013eb8:	444c      	add	r4, r9
 8013eba:	1b2d      	subs	r5, r5, r4
 8013ebc:	1963      	adds	r3, r4, r5
 8013ebe:	42bb      	cmp	r3, r7
 8013ec0:	db04      	blt.n	8013ecc <__s2b+0x78>
 8013ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ec6:	340a      	adds	r4, #10
 8013ec8:	2509      	movs	r5, #9
 8013eca:	e7f6      	b.n	8013eba <__s2b+0x66>
 8013ecc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ed0:	4601      	mov	r1, r0
 8013ed2:	3b30      	subs	r3, #48	; 0x30
 8013ed4:	220a      	movs	r2, #10
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f7ff ff72 	bl	8013dc0 <__multadd>
 8013edc:	e7ee      	b.n	8013ebc <__s2b+0x68>
 8013ede:	bf00      	nop
 8013ee0:	08029369 	.word	0x08029369
 8013ee4:	080293f8 	.word	0x080293f8

08013ee8 <__hi0bits>:
 8013ee8:	0c03      	lsrs	r3, r0, #16
 8013eea:	041b      	lsls	r3, r3, #16
 8013eec:	b9d3      	cbnz	r3, 8013f24 <__hi0bits+0x3c>
 8013eee:	0400      	lsls	r0, r0, #16
 8013ef0:	2310      	movs	r3, #16
 8013ef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ef6:	bf04      	itt	eq
 8013ef8:	0200      	lsleq	r0, r0, #8
 8013efa:	3308      	addeq	r3, #8
 8013efc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f00:	bf04      	itt	eq
 8013f02:	0100      	lsleq	r0, r0, #4
 8013f04:	3304      	addeq	r3, #4
 8013f06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f0a:	bf04      	itt	eq
 8013f0c:	0080      	lsleq	r0, r0, #2
 8013f0e:	3302      	addeq	r3, #2
 8013f10:	2800      	cmp	r0, #0
 8013f12:	db05      	blt.n	8013f20 <__hi0bits+0x38>
 8013f14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f18:	f103 0301 	add.w	r3, r3, #1
 8013f1c:	bf08      	it	eq
 8013f1e:	2320      	moveq	r3, #32
 8013f20:	4618      	mov	r0, r3
 8013f22:	4770      	bx	lr
 8013f24:	2300      	movs	r3, #0
 8013f26:	e7e4      	b.n	8013ef2 <__hi0bits+0xa>

08013f28 <__lo0bits>:
 8013f28:	6803      	ldr	r3, [r0, #0]
 8013f2a:	f013 0207 	ands.w	r2, r3, #7
 8013f2e:	4601      	mov	r1, r0
 8013f30:	d00b      	beq.n	8013f4a <__lo0bits+0x22>
 8013f32:	07da      	lsls	r2, r3, #31
 8013f34:	d424      	bmi.n	8013f80 <__lo0bits+0x58>
 8013f36:	0798      	lsls	r0, r3, #30
 8013f38:	bf49      	itett	mi
 8013f3a:	085b      	lsrmi	r3, r3, #1
 8013f3c:	089b      	lsrpl	r3, r3, #2
 8013f3e:	2001      	movmi	r0, #1
 8013f40:	600b      	strmi	r3, [r1, #0]
 8013f42:	bf5c      	itt	pl
 8013f44:	600b      	strpl	r3, [r1, #0]
 8013f46:	2002      	movpl	r0, #2
 8013f48:	4770      	bx	lr
 8013f4a:	b298      	uxth	r0, r3
 8013f4c:	b9b0      	cbnz	r0, 8013f7c <__lo0bits+0x54>
 8013f4e:	0c1b      	lsrs	r3, r3, #16
 8013f50:	2010      	movs	r0, #16
 8013f52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f56:	bf04      	itt	eq
 8013f58:	0a1b      	lsreq	r3, r3, #8
 8013f5a:	3008      	addeq	r0, #8
 8013f5c:	071a      	lsls	r2, r3, #28
 8013f5e:	bf04      	itt	eq
 8013f60:	091b      	lsreq	r3, r3, #4
 8013f62:	3004      	addeq	r0, #4
 8013f64:	079a      	lsls	r2, r3, #30
 8013f66:	bf04      	itt	eq
 8013f68:	089b      	lsreq	r3, r3, #2
 8013f6a:	3002      	addeq	r0, #2
 8013f6c:	07da      	lsls	r2, r3, #31
 8013f6e:	d403      	bmi.n	8013f78 <__lo0bits+0x50>
 8013f70:	085b      	lsrs	r3, r3, #1
 8013f72:	f100 0001 	add.w	r0, r0, #1
 8013f76:	d005      	beq.n	8013f84 <__lo0bits+0x5c>
 8013f78:	600b      	str	r3, [r1, #0]
 8013f7a:	4770      	bx	lr
 8013f7c:	4610      	mov	r0, r2
 8013f7e:	e7e8      	b.n	8013f52 <__lo0bits+0x2a>
 8013f80:	2000      	movs	r0, #0
 8013f82:	4770      	bx	lr
 8013f84:	2020      	movs	r0, #32
 8013f86:	4770      	bx	lr

08013f88 <__i2b>:
 8013f88:	b510      	push	{r4, lr}
 8013f8a:	460c      	mov	r4, r1
 8013f8c:	2101      	movs	r1, #1
 8013f8e:	f7ff feb5 	bl	8013cfc <_Balloc>
 8013f92:	4602      	mov	r2, r0
 8013f94:	b928      	cbnz	r0, 8013fa2 <__i2b+0x1a>
 8013f96:	4b05      	ldr	r3, [pc, #20]	; (8013fac <__i2b+0x24>)
 8013f98:	4805      	ldr	r0, [pc, #20]	; (8013fb0 <__i2b+0x28>)
 8013f9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f9e:	f7fe fc67 	bl	8012870 <__assert_func>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	6144      	str	r4, [r0, #20]
 8013fa6:	6103      	str	r3, [r0, #16]
 8013fa8:	bd10      	pop	{r4, pc}
 8013faa:	bf00      	nop
 8013fac:	08029369 	.word	0x08029369
 8013fb0:	080293f8 	.word	0x080293f8

08013fb4 <__multiply>:
 8013fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb8:	4614      	mov	r4, r2
 8013fba:	690a      	ldr	r2, [r1, #16]
 8013fbc:	6923      	ldr	r3, [r4, #16]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	bfb8      	it	lt
 8013fc2:	460b      	movlt	r3, r1
 8013fc4:	460d      	mov	r5, r1
 8013fc6:	bfbc      	itt	lt
 8013fc8:	4625      	movlt	r5, r4
 8013fca:	461c      	movlt	r4, r3
 8013fcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013fd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013fd4:	68ab      	ldr	r3, [r5, #8]
 8013fd6:	6869      	ldr	r1, [r5, #4]
 8013fd8:	eb0a 0709 	add.w	r7, sl, r9
 8013fdc:	42bb      	cmp	r3, r7
 8013fde:	b085      	sub	sp, #20
 8013fe0:	bfb8      	it	lt
 8013fe2:	3101      	addlt	r1, #1
 8013fe4:	f7ff fe8a 	bl	8013cfc <_Balloc>
 8013fe8:	b930      	cbnz	r0, 8013ff8 <__multiply+0x44>
 8013fea:	4602      	mov	r2, r0
 8013fec:	4b42      	ldr	r3, [pc, #264]	; (80140f8 <__multiply+0x144>)
 8013fee:	4843      	ldr	r0, [pc, #268]	; (80140fc <__multiply+0x148>)
 8013ff0:	f240 115d 	movw	r1, #349	; 0x15d
 8013ff4:	f7fe fc3c 	bl	8012870 <__assert_func>
 8013ff8:	f100 0614 	add.w	r6, r0, #20
 8013ffc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014000:	4633      	mov	r3, r6
 8014002:	2200      	movs	r2, #0
 8014004:	4543      	cmp	r3, r8
 8014006:	d31e      	bcc.n	8014046 <__multiply+0x92>
 8014008:	f105 0c14 	add.w	ip, r5, #20
 801400c:	f104 0314 	add.w	r3, r4, #20
 8014010:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014014:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014018:	9202      	str	r2, [sp, #8]
 801401a:	ebac 0205 	sub.w	r2, ip, r5
 801401e:	3a15      	subs	r2, #21
 8014020:	f022 0203 	bic.w	r2, r2, #3
 8014024:	3204      	adds	r2, #4
 8014026:	f105 0115 	add.w	r1, r5, #21
 801402a:	458c      	cmp	ip, r1
 801402c:	bf38      	it	cc
 801402e:	2204      	movcc	r2, #4
 8014030:	9201      	str	r2, [sp, #4]
 8014032:	9a02      	ldr	r2, [sp, #8]
 8014034:	9303      	str	r3, [sp, #12]
 8014036:	429a      	cmp	r2, r3
 8014038:	d808      	bhi.n	801404c <__multiply+0x98>
 801403a:	2f00      	cmp	r7, #0
 801403c:	dc55      	bgt.n	80140ea <__multiply+0x136>
 801403e:	6107      	str	r7, [r0, #16]
 8014040:	b005      	add	sp, #20
 8014042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014046:	f843 2b04 	str.w	r2, [r3], #4
 801404a:	e7db      	b.n	8014004 <__multiply+0x50>
 801404c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014050:	f1ba 0f00 	cmp.w	sl, #0
 8014054:	d020      	beq.n	8014098 <__multiply+0xe4>
 8014056:	f105 0e14 	add.w	lr, r5, #20
 801405a:	46b1      	mov	r9, r6
 801405c:	2200      	movs	r2, #0
 801405e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014062:	f8d9 b000 	ldr.w	fp, [r9]
 8014066:	b2a1      	uxth	r1, r4
 8014068:	fa1f fb8b 	uxth.w	fp, fp
 801406c:	fb0a b101 	mla	r1, sl, r1, fp
 8014070:	4411      	add	r1, r2
 8014072:	f8d9 2000 	ldr.w	r2, [r9]
 8014076:	0c24      	lsrs	r4, r4, #16
 8014078:	0c12      	lsrs	r2, r2, #16
 801407a:	fb0a 2404 	mla	r4, sl, r4, r2
 801407e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014082:	b289      	uxth	r1, r1
 8014084:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014088:	45f4      	cmp	ip, lr
 801408a:	f849 1b04 	str.w	r1, [r9], #4
 801408e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014092:	d8e4      	bhi.n	801405e <__multiply+0xaa>
 8014094:	9901      	ldr	r1, [sp, #4]
 8014096:	5072      	str	r2, [r6, r1]
 8014098:	9a03      	ldr	r2, [sp, #12]
 801409a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801409e:	3304      	adds	r3, #4
 80140a0:	f1b9 0f00 	cmp.w	r9, #0
 80140a4:	d01f      	beq.n	80140e6 <__multiply+0x132>
 80140a6:	6834      	ldr	r4, [r6, #0]
 80140a8:	f105 0114 	add.w	r1, r5, #20
 80140ac:	46b6      	mov	lr, r6
 80140ae:	f04f 0a00 	mov.w	sl, #0
 80140b2:	880a      	ldrh	r2, [r1, #0]
 80140b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80140b8:	fb09 b202 	mla	r2, r9, r2, fp
 80140bc:	4492      	add	sl, r2
 80140be:	b2a4      	uxth	r4, r4
 80140c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80140c4:	f84e 4b04 	str.w	r4, [lr], #4
 80140c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80140cc:	f8be 2000 	ldrh.w	r2, [lr]
 80140d0:	0c24      	lsrs	r4, r4, #16
 80140d2:	fb09 2404 	mla	r4, r9, r4, r2
 80140d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80140da:	458c      	cmp	ip, r1
 80140dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80140e0:	d8e7      	bhi.n	80140b2 <__multiply+0xfe>
 80140e2:	9a01      	ldr	r2, [sp, #4]
 80140e4:	50b4      	str	r4, [r6, r2]
 80140e6:	3604      	adds	r6, #4
 80140e8:	e7a3      	b.n	8014032 <__multiply+0x7e>
 80140ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1a5      	bne.n	801403e <__multiply+0x8a>
 80140f2:	3f01      	subs	r7, #1
 80140f4:	e7a1      	b.n	801403a <__multiply+0x86>
 80140f6:	bf00      	nop
 80140f8:	08029369 	.word	0x08029369
 80140fc:	080293f8 	.word	0x080293f8

08014100 <__pow5mult>:
 8014100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014104:	4615      	mov	r5, r2
 8014106:	f012 0203 	ands.w	r2, r2, #3
 801410a:	4606      	mov	r6, r0
 801410c:	460f      	mov	r7, r1
 801410e:	d007      	beq.n	8014120 <__pow5mult+0x20>
 8014110:	4c25      	ldr	r4, [pc, #148]	; (80141a8 <__pow5mult+0xa8>)
 8014112:	3a01      	subs	r2, #1
 8014114:	2300      	movs	r3, #0
 8014116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801411a:	f7ff fe51 	bl	8013dc0 <__multadd>
 801411e:	4607      	mov	r7, r0
 8014120:	10ad      	asrs	r5, r5, #2
 8014122:	d03d      	beq.n	80141a0 <__pow5mult+0xa0>
 8014124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014126:	b97c      	cbnz	r4, 8014148 <__pow5mult+0x48>
 8014128:	2010      	movs	r0, #16
 801412a:	f7ff fdbf 	bl	8013cac <malloc>
 801412e:	4602      	mov	r2, r0
 8014130:	6270      	str	r0, [r6, #36]	; 0x24
 8014132:	b928      	cbnz	r0, 8014140 <__pow5mult+0x40>
 8014134:	4b1d      	ldr	r3, [pc, #116]	; (80141ac <__pow5mult+0xac>)
 8014136:	481e      	ldr	r0, [pc, #120]	; (80141b0 <__pow5mult+0xb0>)
 8014138:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801413c:	f7fe fb98 	bl	8012870 <__assert_func>
 8014140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014144:	6004      	str	r4, [r0, #0]
 8014146:	60c4      	str	r4, [r0, #12]
 8014148:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801414c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014150:	b94c      	cbnz	r4, 8014166 <__pow5mult+0x66>
 8014152:	f240 2171 	movw	r1, #625	; 0x271
 8014156:	4630      	mov	r0, r6
 8014158:	f7ff ff16 	bl	8013f88 <__i2b>
 801415c:	2300      	movs	r3, #0
 801415e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014162:	4604      	mov	r4, r0
 8014164:	6003      	str	r3, [r0, #0]
 8014166:	f04f 0900 	mov.w	r9, #0
 801416a:	07eb      	lsls	r3, r5, #31
 801416c:	d50a      	bpl.n	8014184 <__pow5mult+0x84>
 801416e:	4639      	mov	r1, r7
 8014170:	4622      	mov	r2, r4
 8014172:	4630      	mov	r0, r6
 8014174:	f7ff ff1e 	bl	8013fb4 <__multiply>
 8014178:	4639      	mov	r1, r7
 801417a:	4680      	mov	r8, r0
 801417c:	4630      	mov	r0, r6
 801417e:	f7ff fdfd 	bl	8013d7c <_Bfree>
 8014182:	4647      	mov	r7, r8
 8014184:	106d      	asrs	r5, r5, #1
 8014186:	d00b      	beq.n	80141a0 <__pow5mult+0xa0>
 8014188:	6820      	ldr	r0, [r4, #0]
 801418a:	b938      	cbnz	r0, 801419c <__pow5mult+0x9c>
 801418c:	4622      	mov	r2, r4
 801418e:	4621      	mov	r1, r4
 8014190:	4630      	mov	r0, r6
 8014192:	f7ff ff0f 	bl	8013fb4 <__multiply>
 8014196:	6020      	str	r0, [r4, #0]
 8014198:	f8c0 9000 	str.w	r9, [r0]
 801419c:	4604      	mov	r4, r0
 801419e:	e7e4      	b.n	801416a <__pow5mult+0x6a>
 80141a0:	4638      	mov	r0, r7
 80141a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141a6:	bf00      	nop
 80141a8:	08029548 	.word	0x08029548
 80141ac:	08029148 	.word	0x08029148
 80141b0:	080293f8 	.word	0x080293f8

080141b4 <__lshift>:
 80141b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141b8:	460c      	mov	r4, r1
 80141ba:	6849      	ldr	r1, [r1, #4]
 80141bc:	6923      	ldr	r3, [r4, #16]
 80141be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141c2:	68a3      	ldr	r3, [r4, #8]
 80141c4:	4607      	mov	r7, r0
 80141c6:	4691      	mov	r9, r2
 80141c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141cc:	f108 0601 	add.w	r6, r8, #1
 80141d0:	42b3      	cmp	r3, r6
 80141d2:	db0b      	blt.n	80141ec <__lshift+0x38>
 80141d4:	4638      	mov	r0, r7
 80141d6:	f7ff fd91 	bl	8013cfc <_Balloc>
 80141da:	4605      	mov	r5, r0
 80141dc:	b948      	cbnz	r0, 80141f2 <__lshift+0x3e>
 80141de:	4602      	mov	r2, r0
 80141e0:	4b28      	ldr	r3, [pc, #160]	; (8014284 <__lshift+0xd0>)
 80141e2:	4829      	ldr	r0, [pc, #164]	; (8014288 <__lshift+0xd4>)
 80141e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80141e8:	f7fe fb42 	bl	8012870 <__assert_func>
 80141ec:	3101      	adds	r1, #1
 80141ee:	005b      	lsls	r3, r3, #1
 80141f0:	e7ee      	b.n	80141d0 <__lshift+0x1c>
 80141f2:	2300      	movs	r3, #0
 80141f4:	f100 0114 	add.w	r1, r0, #20
 80141f8:	f100 0210 	add.w	r2, r0, #16
 80141fc:	4618      	mov	r0, r3
 80141fe:	4553      	cmp	r3, sl
 8014200:	db33      	blt.n	801426a <__lshift+0xb6>
 8014202:	6920      	ldr	r0, [r4, #16]
 8014204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014208:	f104 0314 	add.w	r3, r4, #20
 801420c:	f019 091f 	ands.w	r9, r9, #31
 8014210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014218:	d02b      	beq.n	8014272 <__lshift+0xbe>
 801421a:	f1c9 0e20 	rsb	lr, r9, #32
 801421e:	468a      	mov	sl, r1
 8014220:	2200      	movs	r2, #0
 8014222:	6818      	ldr	r0, [r3, #0]
 8014224:	fa00 f009 	lsl.w	r0, r0, r9
 8014228:	4302      	orrs	r2, r0
 801422a:	f84a 2b04 	str.w	r2, [sl], #4
 801422e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014232:	459c      	cmp	ip, r3
 8014234:	fa22 f20e 	lsr.w	r2, r2, lr
 8014238:	d8f3      	bhi.n	8014222 <__lshift+0x6e>
 801423a:	ebac 0304 	sub.w	r3, ip, r4
 801423e:	3b15      	subs	r3, #21
 8014240:	f023 0303 	bic.w	r3, r3, #3
 8014244:	3304      	adds	r3, #4
 8014246:	f104 0015 	add.w	r0, r4, #21
 801424a:	4584      	cmp	ip, r0
 801424c:	bf38      	it	cc
 801424e:	2304      	movcc	r3, #4
 8014250:	50ca      	str	r2, [r1, r3]
 8014252:	b10a      	cbz	r2, 8014258 <__lshift+0xa4>
 8014254:	f108 0602 	add.w	r6, r8, #2
 8014258:	3e01      	subs	r6, #1
 801425a:	4638      	mov	r0, r7
 801425c:	612e      	str	r6, [r5, #16]
 801425e:	4621      	mov	r1, r4
 8014260:	f7ff fd8c 	bl	8013d7c <_Bfree>
 8014264:	4628      	mov	r0, r5
 8014266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801426a:	f842 0f04 	str.w	r0, [r2, #4]!
 801426e:	3301      	adds	r3, #1
 8014270:	e7c5      	b.n	80141fe <__lshift+0x4a>
 8014272:	3904      	subs	r1, #4
 8014274:	f853 2b04 	ldr.w	r2, [r3], #4
 8014278:	f841 2f04 	str.w	r2, [r1, #4]!
 801427c:	459c      	cmp	ip, r3
 801427e:	d8f9      	bhi.n	8014274 <__lshift+0xc0>
 8014280:	e7ea      	b.n	8014258 <__lshift+0xa4>
 8014282:	bf00      	nop
 8014284:	08029369 	.word	0x08029369
 8014288:	080293f8 	.word	0x080293f8

0801428c <__mcmp>:
 801428c:	b530      	push	{r4, r5, lr}
 801428e:	6902      	ldr	r2, [r0, #16]
 8014290:	690c      	ldr	r4, [r1, #16]
 8014292:	1b12      	subs	r2, r2, r4
 8014294:	d10e      	bne.n	80142b4 <__mcmp+0x28>
 8014296:	f100 0314 	add.w	r3, r0, #20
 801429a:	3114      	adds	r1, #20
 801429c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80142a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80142a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80142a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80142ac:	42a5      	cmp	r5, r4
 80142ae:	d003      	beq.n	80142b8 <__mcmp+0x2c>
 80142b0:	d305      	bcc.n	80142be <__mcmp+0x32>
 80142b2:	2201      	movs	r2, #1
 80142b4:	4610      	mov	r0, r2
 80142b6:	bd30      	pop	{r4, r5, pc}
 80142b8:	4283      	cmp	r3, r0
 80142ba:	d3f3      	bcc.n	80142a4 <__mcmp+0x18>
 80142bc:	e7fa      	b.n	80142b4 <__mcmp+0x28>
 80142be:	f04f 32ff 	mov.w	r2, #4294967295
 80142c2:	e7f7      	b.n	80142b4 <__mcmp+0x28>

080142c4 <__mdiff>:
 80142c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c8:	460c      	mov	r4, r1
 80142ca:	4606      	mov	r6, r0
 80142cc:	4611      	mov	r1, r2
 80142ce:	4620      	mov	r0, r4
 80142d0:	4617      	mov	r7, r2
 80142d2:	f7ff ffdb 	bl	801428c <__mcmp>
 80142d6:	1e05      	subs	r5, r0, #0
 80142d8:	d110      	bne.n	80142fc <__mdiff+0x38>
 80142da:	4629      	mov	r1, r5
 80142dc:	4630      	mov	r0, r6
 80142de:	f7ff fd0d 	bl	8013cfc <_Balloc>
 80142e2:	b930      	cbnz	r0, 80142f2 <__mdiff+0x2e>
 80142e4:	4b39      	ldr	r3, [pc, #228]	; (80143cc <__mdiff+0x108>)
 80142e6:	4602      	mov	r2, r0
 80142e8:	f240 2132 	movw	r1, #562	; 0x232
 80142ec:	4838      	ldr	r0, [pc, #224]	; (80143d0 <__mdiff+0x10c>)
 80142ee:	f7fe fabf 	bl	8012870 <__assert_func>
 80142f2:	2301      	movs	r3, #1
 80142f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fc:	bfa4      	itt	ge
 80142fe:	463b      	movge	r3, r7
 8014300:	4627      	movge	r7, r4
 8014302:	4630      	mov	r0, r6
 8014304:	6879      	ldr	r1, [r7, #4]
 8014306:	bfa6      	itte	ge
 8014308:	461c      	movge	r4, r3
 801430a:	2500      	movge	r5, #0
 801430c:	2501      	movlt	r5, #1
 801430e:	f7ff fcf5 	bl	8013cfc <_Balloc>
 8014312:	b920      	cbnz	r0, 801431e <__mdiff+0x5a>
 8014314:	4b2d      	ldr	r3, [pc, #180]	; (80143cc <__mdiff+0x108>)
 8014316:	4602      	mov	r2, r0
 8014318:	f44f 7110 	mov.w	r1, #576	; 0x240
 801431c:	e7e6      	b.n	80142ec <__mdiff+0x28>
 801431e:	693e      	ldr	r6, [r7, #16]
 8014320:	60c5      	str	r5, [r0, #12]
 8014322:	6925      	ldr	r5, [r4, #16]
 8014324:	f107 0114 	add.w	r1, r7, #20
 8014328:	f104 0914 	add.w	r9, r4, #20
 801432c:	f100 0e14 	add.w	lr, r0, #20
 8014330:	f107 0210 	add.w	r2, r7, #16
 8014334:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014338:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801433c:	46f2      	mov	sl, lr
 801433e:	2700      	movs	r7, #0
 8014340:	f859 3b04 	ldr.w	r3, [r9], #4
 8014344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014348:	fa1f f883 	uxth.w	r8, r3
 801434c:	fa17 f78b 	uxtah	r7, r7, fp
 8014350:	0c1b      	lsrs	r3, r3, #16
 8014352:	eba7 0808 	sub.w	r8, r7, r8
 8014356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801435a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801435e:	fa1f f888 	uxth.w	r8, r8
 8014362:	141f      	asrs	r7, r3, #16
 8014364:	454d      	cmp	r5, r9
 8014366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801436a:	f84a 3b04 	str.w	r3, [sl], #4
 801436e:	d8e7      	bhi.n	8014340 <__mdiff+0x7c>
 8014370:	1b2b      	subs	r3, r5, r4
 8014372:	3b15      	subs	r3, #21
 8014374:	f023 0303 	bic.w	r3, r3, #3
 8014378:	3304      	adds	r3, #4
 801437a:	3415      	adds	r4, #21
 801437c:	42a5      	cmp	r5, r4
 801437e:	bf38      	it	cc
 8014380:	2304      	movcc	r3, #4
 8014382:	4419      	add	r1, r3
 8014384:	4473      	add	r3, lr
 8014386:	469e      	mov	lr, r3
 8014388:	460d      	mov	r5, r1
 801438a:	4565      	cmp	r5, ip
 801438c:	d30e      	bcc.n	80143ac <__mdiff+0xe8>
 801438e:	f10c 0203 	add.w	r2, ip, #3
 8014392:	1a52      	subs	r2, r2, r1
 8014394:	f022 0203 	bic.w	r2, r2, #3
 8014398:	3903      	subs	r1, #3
 801439a:	458c      	cmp	ip, r1
 801439c:	bf38      	it	cc
 801439e:	2200      	movcc	r2, #0
 80143a0:	441a      	add	r2, r3
 80143a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80143a6:	b17b      	cbz	r3, 80143c8 <__mdiff+0x104>
 80143a8:	6106      	str	r6, [r0, #16]
 80143aa:	e7a5      	b.n	80142f8 <__mdiff+0x34>
 80143ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80143b0:	fa17 f488 	uxtah	r4, r7, r8
 80143b4:	1422      	asrs	r2, r4, #16
 80143b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80143ba:	b2a4      	uxth	r4, r4
 80143bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80143c0:	f84e 4b04 	str.w	r4, [lr], #4
 80143c4:	1417      	asrs	r7, r2, #16
 80143c6:	e7e0      	b.n	801438a <__mdiff+0xc6>
 80143c8:	3e01      	subs	r6, #1
 80143ca:	e7ea      	b.n	80143a2 <__mdiff+0xde>
 80143cc:	08029369 	.word	0x08029369
 80143d0:	080293f8 	.word	0x080293f8

080143d4 <__ulp>:
 80143d4:	b082      	sub	sp, #8
 80143d6:	ed8d 0b00 	vstr	d0, [sp]
 80143da:	9b01      	ldr	r3, [sp, #4]
 80143dc:	4912      	ldr	r1, [pc, #72]	; (8014428 <__ulp+0x54>)
 80143de:	4019      	ands	r1, r3
 80143e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80143e4:	2900      	cmp	r1, #0
 80143e6:	dd05      	ble.n	80143f4 <__ulp+0x20>
 80143e8:	2200      	movs	r2, #0
 80143ea:	460b      	mov	r3, r1
 80143ec:	ec43 2b10 	vmov	d0, r2, r3
 80143f0:	b002      	add	sp, #8
 80143f2:	4770      	bx	lr
 80143f4:	4249      	negs	r1, r1
 80143f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80143fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80143fe:	f04f 0200 	mov.w	r2, #0
 8014402:	f04f 0300 	mov.w	r3, #0
 8014406:	da04      	bge.n	8014412 <__ulp+0x3e>
 8014408:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801440c:	fa41 f300 	asr.w	r3, r1, r0
 8014410:	e7ec      	b.n	80143ec <__ulp+0x18>
 8014412:	f1a0 0114 	sub.w	r1, r0, #20
 8014416:	291e      	cmp	r1, #30
 8014418:	bfda      	itte	le
 801441a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801441e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014422:	2101      	movgt	r1, #1
 8014424:	460a      	mov	r2, r1
 8014426:	e7e1      	b.n	80143ec <__ulp+0x18>
 8014428:	7ff00000 	.word	0x7ff00000

0801442c <__b2d>:
 801442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801442e:	6905      	ldr	r5, [r0, #16]
 8014430:	f100 0714 	add.w	r7, r0, #20
 8014434:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014438:	1f2e      	subs	r6, r5, #4
 801443a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801443e:	4620      	mov	r0, r4
 8014440:	f7ff fd52 	bl	8013ee8 <__hi0bits>
 8014444:	f1c0 0320 	rsb	r3, r0, #32
 8014448:	280a      	cmp	r0, #10
 801444a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80144c8 <__b2d+0x9c>
 801444e:	600b      	str	r3, [r1, #0]
 8014450:	dc14      	bgt.n	801447c <__b2d+0x50>
 8014452:	f1c0 0e0b 	rsb	lr, r0, #11
 8014456:	fa24 f10e 	lsr.w	r1, r4, lr
 801445a:	42b7      	cmp	r7, r6
 801445c:	ea41 030c 	orr.w	r3, r1, ip
 8014460:	bf34      	ite	cc
 8014462:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014466:	2100      	movcs	r1, #0
 8014468:	3015      	adds	r0, #21
 801446a:	fa04 f000 	lsl.w	r0, r4, r0
 801446e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014472:	ea40 0201 	orr.w	r2, r0, r1
 8014476:	ec43 2b10 	vmov	d0, r2, r3
 801447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801447c:	42b7      	cmp	r7, r6
 801447e:	bf3a      	itte	cc
 8014480:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014484:	f1a5 0608 	subcc.w	r6, r5, #8
 8014488:	2100      	movcs	r1, #0
 801448a:	380b      	subs	r0, #11
 801448c:	d017      	beq.n	80144be <__b2d+0x92>
 801448e:	f1c0 0c20 	rsb	ip, r0, #32
 8014492:	fa04 f500 	lsl.w	r5, r4, r0
 8014496:	42be      	cmp	r6, r7
 8014498:	fa21 f40c 	lsr.w	r4, r1, ip
 801449c:	ea45 0504 	orr.w	r5, r5, r4
 80144a0:	bf8c      	ite	hi
 80144a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80144a6:	2400      	movls	r4, #0
 80144a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80144ac:	fa01 f000 	lsl.w	r0, r1, r0
 80144b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80144b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80144b8:	ea40 0204 	orr.w	r2, r0, r4
 80144bc:	e7db      	b.n	8014476 <__b2d+0x4a>
 80144be:	ea44 030c 	orr.w	r3, r4, ip
 80144c2:	460a      	mov	r2, r1
 80144c4:	e7d7      	b.n	8014476 <__b2d+0x4a>
 80144c6:	bf00      	nop
 80144c8:	3ff00000 	.word	0x3ff00000

080144cc <__d2b>:
 80144cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144d0:	4689      	mov	r9, r1
 80144d2:	2101      	movs	r1, #1
 80144d4:	ec57 6b10 	vmov	r6, r7, d0
 80144d8:	4690      	mov	r8, r2
 80144da:	f7ff fc0f 	bl	8013cfc <_Balloc>
 80144de:	4604      	mov	r4, r0
 80144e0:	b930      	cbnz	r0, 80144f0 <__d2b+0x24>
 80144e2:	4602      	mov	r2, r0
 80144e4:	4b25      	ldr	r3, [pc, #148]	; (801457c <__d2b+0xb0>)
 80144e6:	4826      	ldr	r0, [pc, #152]	; (8014580 <__d2b+0xb4>)
 80144e8:	f240 310a 	movw	r1, #778	; 0x30a
 80144ec:	f7fe f9c0 	bl	8012870 <__assert_func>
 80144f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80144f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80144f8:	bb35      	cbnz	r5, 8014548 <__d2b+0x7c>
 80144fa:	2e00      	cmp	r6, #0
 80144fc:	9301      	str	r3, [sp, #4]
 80144fe:	d028      	beq.n	8014552 <__d2b+0x86>
 8014500:	4668      	mov	r0, sp
 8014502:	9600      	str	r6, [sp, #0]
 8014504:	f7ff fd10 	bl	8013f28 <__lo0bits>
 8014508:	9900      	ldr	r1, [sp, #0]
 801450a:	b300      	cbz	r0, 801454e <__d2b+0x82>
 801450c:	9a01      	ldr	r2, [sp, #4]
 801450e:	f1c0 0320 	rsb	r3, r0, #32
 8014512:	fa02 f303 	lsl.w	r3, r2, r3
 8014516:	430b      	orrs	r3, r1
 8014518:	40c2      	lsrs	r2, r0
 801451a:	6163      	str	r3, [r4, #20]
 801451c:	9201      	str	r2, [sp, #4]
 801451e:	9b01      	ldr	r3, [sp, #4]
 8014520:	61a3      	str	r3, [r4, #24]
 8014522:	2b00      	cmp	r3, #0
 8014524:	bf14      	ite	ne
 8014526:	2202      	movne	r2, #2
 8014528:	2201      	moveq	r2, #1
 801452a:	6122      	str	r2, [r4, #16]
 801452c:	b1d5      	cbz	r5, 8014564 <__d2b+0x98>
 801452e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014532:	4405      	add	r5, r0
 8014534:	f8c9 5000 	str.w	r5, [r9]
 8014538:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801453c:	f8c8 0000 	str.w	r0, [r8]
 8014540:	4620      	mov	r0, r4
 8014542:	b003      	add	sp, #12
 8014544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801454c:	e7d5      	b.n	80144fa <__d2b+0x2e>
 801454e:	6161      	str	r1, [r4, #20]
 8014550:	e7e5      	b.n	801451e <__d2b+0x52>
 8014552:	a801      	add	r0, sp, #4
 8014554:	f7ff fce8 	bl	8013f28 <__lo0bits>
 8014558:	9b01      	ldr	r3, [sp, #4]
 801455a:	6163      	str	r3, [r4, #20]
 801455c:	2201      	movs	r2, #1
 801455e:	6122      	str	r2, [r4, #16]
 8014560:	3020      	adds	r0, #32
 8014562:	e7e3      	b.n	801452c <__d2b+0x60>
 8014564:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014568:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801456c:	f8c9 0000 	str.w	r0, [r9]
 8014570:	6918      	ldr	r0, [r3, #16]
 8014572:	f7ff fcb9 	bl	8013ee8 <__hi0bits>
 8014576:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801457a:	e7df      	b.n	801453c <__d2b+0x70>
 801457c:	08029369 	.word	0x08029369
 8014580:	080293f8 	.word	0x080293f8

08014584 <__ratio>:
 8014584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014588:	4688      	mov	r8, r1
 801458a:	4669      	mov	r1, sp
 801458c:	4681      	mov	r9, r0
 801458e:	f7ff ff4d 	bl	801442c <__b2d>
 8014592:	a901      	add	r1, sp, #4
 8014594:	4640      	mov	r0, r8
 8014596:	ec55 4b10 	vmov	r4, r5, d0
 801459a:	f7ff ff47 	bl	801442c <__b2d>
 801459e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80145a6:	eba3 0c02 	sub.w	ip, r3, r2
 80145aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80145ae:	1a9b      	subs	r3, r3, r2
 80145b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80145b4:	ec51 0b10 	vmov	r0, r1, d0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	bfd6      	itet	le
 80145bc:	460a      	movle	r2, r1
 80145be:	462a      	movgt	r2, r5
 80145c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80145c4:	468b      	mov	fp, r1
 80145c6:	462f      	mov	r7, r5
 80145c8:	bfd4      	ite	le
 80145ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80145ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80145d2:	4620      	mov	r0, r4
 80145d4:	ee10 2a10 	vmov	r2, s0
 80145d8:	465b      	mov	r3, fp
 80145da:	4639      	mov	r1, r7
 80145dc:	f7ec f94e 	bl	800087c <__aeabi_ddiv>
 80145e0:	ec41 0b10 	vmov	d0, r0, r1
 80145e4:	b003      	add	sp, #12
 80145e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145ea <__copybits>:
 80145ea:	3901      	subs	r1, #1
 80145ec:	b570      	push	{r4, r5, r6, lr}
 80145ee:	1149      	asrs	r1, r1, #5
 80145f0:	6914      	ldr	r4, [r2, #16]
 80145f2:	3101      	adds	r1, #1
 80145f4:	f102 0314 	add.w	r3, r2, #20
 80145f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80145fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014600:	1f05      	subs	r5, r0, #4
 8014602:	42a3      	cmp	r3, r4
 8014604:	d30c      	bcc.n	8014620 <__copybits+0x36>
 8014606:	1aa3      	subs	r3, r4, r2
 8014608:	3b11      	subs	r3, #17
 801460a:	f023 0303 	bic.w	r3, r3, #3
 801460e:	3211      	adds	r2, #17
 8014610:	42a2      	cmp	r2, r4
 8014612:	bf88      	it	hi
 8014614:	2300      	movhi	r3, #0
 8014616:	4418      	add	r0, r3
 8014618:	2300      	movs	r3, #0
 801461a:	4288      	cmp	r0, r1
 801461c:	d305      	bcc.n	801462a <__copybits+0x40>
 801461e:	bd70      	pop	{r4, r5, r6, pc}
 8014620:	f853 6b04 	ldr.w	r6, [r3], #4
 8014624:	f845 6f04 	str.w	r6, [r5, #4]!
 8014628:	e7eb      	b.n	8014602 <__copybits+0x18>
 801462a:	f840 3b04 	str.w	r3, [r0], #4
 801462e:	e7f4      	b.n	801461a <__copybits+0x30>

08014630 <__any_on>:
 8014630:	f100 0214 	add.w	r2, r0, #20
 8014634:	6900      	ldr	r0, [r0, #16]
 8014636:	114b      	asrs	r3, r1, #5
 8014638:	4298      	cmp	r0, r3
 801463a:	b510      	push	{r4, lr}
 801463c:	db11      	blt.n	8014662 <__any_on+0x32>
 801463e:	dd0a      	ble.n	8014656 <__any_on+0x26>
 8014640:	f011 011f 	ands.w	r1, r1, #31
 8014644:	d007      	beq.n	8014656 <__any_on+0x26>
 8014646:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801464a:	fa24 f001 	lsr.w	r0, r4, r1
 801464e:	fa00 f101 	lsl.w	r1, r0, r1
 8014652:	428c      	cmp	r4, r1
 8014654:	d10b      	bne.n	801466e <__any_on+0x3e>
 8014656:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801465a:	4293      	cmp	r3, r2
 801465c:	d803      	bhi.n	8014666 <__any_on+0x36>
 801465e:	2000      	movs	r0, #0
 8014660:	bd10      	pop	{r4, pc}
 8014662:	4603      	mov	r3, r0
 8014664:	e7f7      	b.n	8014656 <__any_on+0x26>
 8014666:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801466a:	2900      	cmp	r1, #0
 801466c:	d0f5      	beq.n	801465a <__any_on+0x2a>
 801466e:	2001      	movs	r0, #1
 8014670:	e7f6      	b.n	8014660 <__any_on+0x30>

08014672 <_calloc_r>:
 8014672:	b513      	push	{r0, r1, r4, lr}
 8014674:	434a      	muls	r2, r1
 8014676:	4611      	mov	r1, r2
 8014678:	9201      	str	r2, [sp, #4]
 801467a:	f000 f859 	bl	8014730 <_malloc_r>
 801467e:	4604      	mov	r4, r0
 8014680:	b118      	cbz	r0, 801468a <_calloc_r+0x18>
 8014682:	9a01      	ldr	r2, [sp, #4]
 8014684:	2100      	movs	r1, #0
 8014686:	f7fc fb27 	bl	8010cd8 <memset>
 801468a:	4620      	mov	r0, r4
 801468c:	b002      	add	sp, #8
 801468e:	bd10      	pop	{r4, pc}

08014690 <_free_r>:
 8014690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014692:	2900      	cmp	r1, #0
 8014694:	d048      	beq.n	8014728 <_free_r+0x98>
 8014696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801469a:	9001      	str	r0, [sp, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	f1a1 0404 	sub.w	r4, r1, #4
 80146a2:	bfb8      	it	lt
 80146a4:	18e4      	addlt	r4, r4, r3
 80146a6:	f000 fe8b 	bl	80153c0 <__malloc_lock>
 80146aa:	4a20      	ldr	r2, [pc, #128]	; (801472c <_free_r+0x9c>)
 80146ac:	9801      	ldr	r0, [sp, #4]
 80146ae:	6813      	ldr	r3, [r2, #0]
 80146b0:	4615      	mov	r5, r2
 80146b2:	b933      	cbnz	r3, 80146c2 <_free_r+0x32>
 80146b4:	6063      	str	r3, [r4, #4]
 80146b6:	6014      	str	r4, [r2, #0]
 80146b8:	b003      	add	sp, #12
 80146ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80146be:	f000 be85 	b.w	80153cc <__malloc_unlock>
 80146c2:	42a3      	cmp	r3, r4
 80146c4:	d90b      	bls.n	80146de <_free_r+0x4e>
 80146c6:	6821      	ldr	r1, [r4, #0]
 80146c8:	1862      	adds	r2, r4, r1
 80146ca:	4293      	cmp	r3, r2
 80146cc:	bf04      	itt	eq
 80146ce:	681a      	ldreq	r2, [r3, #0]
 80146d0:	685b      	ldreq	r3, [r3, #4]
 80146d2:	6063      	str	r3, [r4, #4]
 80146d4:	bf04      	itt	eq
 80146d6:	1852      	addeq	r2, r2, r1
 80146d8:	6022      	streq	r2, [r4, #0]
 80146da:	602c      	str	r4, [r5, #0]
 80146dc:	e7ec      	b.n	80146b8 <_free_r+0x28>
 80146de:	461a      	mov	r2, r3
 80146e0:	685b      	ldr	r3, [r3, #4]
 80146e2:	b10b      	cbz	r3, 80146e8 <_free_r+0x58>
 80146e4:	42a3      	cmp	r3, r4
 80146e6:	d9fa      	bls.n	80146de <_free_r+0x4e>
 80146e8:	6811      	ldr	r1, [r2, #0]
 80146ea:	1855      	adds	r5, r2, r1
 80146ec:	42a5      	cmp	r5, r4
 80146ee:	d10b      	bne.n	8014708 <_free_r+0x78>
 80146f0:	6824      	ldr	r4, [r4, #0]
 80146f2:	4421      	add	r1, r4
 80146f4:	1854      	adds	r4, r2, r1
 80146f6:	42a3      	cmp	r3, r4
 80146f8:	6011      	str	r1, [r2, #0]
 80146fa:	d1dd      	bne.n	80146b8 <_free_r+0x28>
 80146fc:	681c      	ldr	r4, [r3, #0]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	6053      	str	r3, [r2, #4]
 8014702:	4421      	add	r1, r4
 8014704:	6011      	str	r1, [r2, #0]
 8014706:	e7d7      	b.n	80146b8 <_free_r+0x28>
 8014708:	d902      	bls.n	8014710 <_free_r+0x80>
 801470a:	230c      	movs	r3, #12
 801470c:	6003      	str	r3, [r0, #0]
 801470e:	e7d3      	b.n	80146b8 <_free_r+0x28>
 8014710:	6825      	ldr	r5, [r4, #0]
 8014712:	1961      	adds	r1, r4, r5
 8014714:	428b      	cmp	r3, r1
 8014716:	bf04      	itt	eq
 8014718:	6819      	ldreq	r1, [r3, #0]
 801471a:	685b      	ldreq	r3, [r3, #4]
 801471c:	6063      	str	r3, [r4, #4]
 801471e:	bf04      	itt	eq
 8014720:	1949      	addeq	r1, r1, r5
 8014722:	6021      	streq	r1, [r4, #0]
 8014724:	6054      	str	r4, [r2, #4]
 8014726:	e7c7      	b.n	80146b8 <_free_r+0x28>
 8014728:	b003      	add	sp, #12
 801472a:	bd30      	pop	{r4, r5, pc}
 801472c:	200002b8 	.word	0x200002b8

08014730 <_malloc_r>:
 8014730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014732:	1ccd      	adds	r5, r1, #3
 8014734:	f025 0503 	bic.w	r5, r5, #3
 8014738:	3508      	adds	r5, #8
 801473a:	2d0c      	cmp	r5, #12
 801473c:	bf38      	it	cc
 801473e:	250c      	movcc	r5, #12
 8014740:	2d00      	cmp	r5, #0
 8014742:	4606      	mov	r6, r0
 8014744:	db01      	blt.n	801474a <_malloc_r+0x1a>
 8014746:	42a9      	cmp	r1, r5
 8014748:	d903      	bls.n	8014752 <_malloc_r+0x22>
 801474a:	230c      	movs	r3, #12
 801474c:	6033      	str	r3, [r6, #0]
 801474e:	2000      	movs	r0, #0
 8014750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014752:	f000 fe35 	bl	80153c0 <__malloc_lock>
 8014756:	4921      	ldr	r1, [pc, #132]	; (80147dc <_malloc_r+0xac>)
 8014758:	680a      	ldr	r2, [r1, #0]
 801475a:	4614      	mov	r4, r2
 801475c:	b99c      	cbnz	r4, 8014786 <_malloc_r+0x56>
 801475e:	4f20      	ldr	r7, [pc, #128]	; (80147e0 <_malloc_r+0xb0>)
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	b923      	cbnz	r3, 801476e <_malloc_r+0x3e>
 8014764:	4621      	mov	r1, r4
 8014766:	4630      	mov	r0, r6
 8014768:	f000 fafa 	bl	8014d60 <_sbrk_r>
 801476c:	6038      	str	r0, [r7, #0]
 801476e:	4629      	mov	r1, r5
 8014770:	4630      	mov	r0, r6
 8014772:	f000 faf5 	bl	8014d60 <_sbrk_r>
 8014776:	1c43      	adds	r3, r0, #1
 8014778:	d123      	bne.n	80147c2 <_malloc_r+0x92>
 801477a:	230c      	movs	r3, #12
 801477c:	6033      	str	r3, [r6, #0]
 801477e:	4630      	mov	r0, r6
 8014780:	f000 fe24 	bl	80153cc <__malloc_unlock>
 8014784:	e7e3      	b.n	801474e <_malloc_r+0x1e>
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	1b5b      	subs	r3, r3, r5
 801478a:	d417      	bmi.n	80147bc <_malloc_r+0x8c>
 801478c:	2b0b      	cmp	r3, #11
 801478e:	d903      	bls.n	8014798 <_malloc_r+0x68>
 8014790:	6023      	str	r3, [r4, #0]
 8014792:	441c      	add	r4, r3
 8014794:	6025      	str	r5, [r4, #0]
 8014796:	e004      	b.n	80147a2 <_malloc_r+0x72>
 8014798:	6863      	ldr	r3, [r4, #4]
 801479a:	42a2      	cmp	r2, r4
 801479c:	bf0c      	ite	eq
 801479e:	600b      	streq	r3, [r1, #0]
 80147a0:	6053      	strne	r3, [r2, #4]
 80147a2:	4630      	mov	r0, r6
 80147a4:	f000 fe12 	bl	80153cc <__malloc_unlock>
 80147a8:	f104 000b 	add.w	r0, r4, #11
 80147ac:	1d23      	adds	r3, r4, #4
 80147ae:	f020 0007 	bic.w	r0, r0, #7
 80147b2:	1ac2      	subs	r2, r0, r3
 80147b4:	d0cc      	beq.n	8014750 <_malloc_r+0x20>
 80147b6:	1a1b      	subs	r3, r3, r0
 80147b8:	50a3      	str	r3, [r4, r2]
 80147ba:	e7c9      	b.n	8014750 <_malloc_r+0x20>
 80147bc:	4622      	mov	r2, r4
 80147be:	6864      	ldr	r4, [r4, #4]
 80147c0:	e7cc      	b.n	801475c <_malloc_r+0x2c>
 80147c2:	1cc4      	adds	r4, r0, #3
 80147c4:	f024 0403 	bic.w	r4, r4, #3
 80147c8:	42a0      	cmp	r0, r4
 80147ca:	d0e3      	beq.n	8014794 <_malloc_r+0x64>
 80147cc:	1a21      	subs	r1, r4, r0
 80147ce:	4630      	mov	r0, r6
 80147d0:	f000 fac6 	bl	8014d60 <_sbrk_r>
 80147d4:	3001      	adds	r0, #1
 80147d6:	d1dd      	bne.n	8014794 <_malloc_r+0x64>
 80147d8:	e7cf      	b.n	801477a <_malloc_r+0x4a>
 80147da:	bf00      	nop
 80147dc:	200002b8 	.word	0x200002b8
 80147e0:	200002bc 	.word	0x200002bc

080147e4 <__ssputs_r>:
 80147e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147e8:	688e      	ldr	r6, [r1, #8]
 80147ea:	429e      	cmp	r6, r3
 80147ec:	4682      	mov	sl, r0
 80147ee:	460c      	mov	r4, r1
 80147f0:	4690      	mov	r8, r2
 80147f2:	461f      	mov	r7, r3
 80147f4:	d838      	bhi.n	8014868 <__ssputs_r+0x84>
 80147f6:	898a      	ldrh	r2, [r1, #12]
 80147f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80147fc:	d032      	beq.n	8014864 <__ssputs_r+0x80>
 80147fe:	6825      	ldr	r5, [r4, #0]
 8014800:	6909      	ldr	r1, [r1, #16]
 8014802:	eba5 0901 	sub.w	r9, r5, r1
 8014806:	6965      	ldr	r5, [r4, #20]
 8014808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801480c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014810:	3301      	adds	r3, #1
 8014812:	444b      	add	r3, r9
 8014814:	106d      	asrs	r5, r5, #1
 8014816:	429d      	cmp	r5, r3
 8014818:	bf38      	it	cc
 801481a:	461d      	movcc	r5, r3
 801481c:	0553      	lsls	r3, r2, #21
 801481e:	d531      	bpl.n	8014884 <__ssputs_r+0xa0>
 8014820:	4629      	mov	r1, r5
 8014822:	f7ff ff85 	bl	8014730 <_malloc_r>
 8014826:	4606      	mov	r6, r0
 8014828:	b950      	cbnz	r0, 8014840 <__ssputs_r+0x5c>
 801482a:	230c      	movs	r3, #12
 801482c:	f8ca 3000 	str.w	r3, [sl]
 8014830:	89a3      	ldrh	r3, [r4, #12]
 8014832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014836:	81a3      	strh	r3, [r4, #12]
 8014838:	f04f 30ff 	mov.w	r0, #4294967295
 801483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014840:	6921      	ldr	r1, [r4, #16]
 8014842:	464a      	mov	r2, r9
 8014844:	f7ff fa4c 	bl	8013ce0 <memcpy>
 8014848:	89a3      	ldrh	r3, [r4, #12]
 801484a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014852:	81a3      	strh	r3, [r4, #12]
 8014854:	6126      	str	r6, [r4, #16]
 8014856:	6165      	str	r5, [r4, #20]
 8014858:	444e      	add	r6, r9
 801485a:	eba5 0509 	sub.w	r5, r5, r9
 801485e:	6026      	str	r6, [r4, #0]
 8014860:	60a5      	str	r5, [r4, #8]
 8014862:	463e      	mov	r6, r7
 8014864:	42be      	cmp	r6, r7
 8014866:	d900      	bls.n	801486a <__ssputs_r+0x86>
 8014868:	463e      	mov	r6, r7
 801486a:	4632      	mov	r2, r6
 801486c:	6820      	ldr	r0, [r4, #0]
 801486e:	4641      	mov	r1, r8
 8014870:	f000 fd8c 	bl	801538c <memmove>
 8014874:	68a3      	ldr	r3, [r4, #8]
 8014876:	6822      	ldr	r2, [r4, #0]
 8014878:	1b9b      	subs	r3, r3, r6
 801487a:	4432      	add	r2, r6
 801487c:	60a3      	str	r3, [r4, #8]
 801487e:	6022      	str	r2, [r4, #0]
 8014880:	2000      	movs	r0, #0
 8014882:	e7db      	b.n	801483c <__ssputs_r+0x58>
 8014884:	462a      	mov	r2, r5
 8014886:	f000 fda7 	bl	80153d8 <_realloc_r>
 801488a:	4606      	mov	r6, r0
 801488c:	2800      	cmp	r0, #0
 801488e:	d1e1      	bne.n	8014854 <__ssputs_r+0x70>
 8014890:	6921      	ldr	r1, [r4, #16]
 8014892:	4650      	mov	r0, sl
 8014894:	f7ff fefc 	bl	8014690 <_free_r>
 8014898:	e7c7      	b.n	801482a <__ssputs_r+0x46>
	...

0801489c <_svfiprintf_r>:
 801489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a0:	4698      	mov	r8, r3
 80148a2:	898b      	ldrh	r3, [r1, #12]
 80148a4:	061b      	lsls	r3, r3, #24
 80148a6:	b09d      	sub	sp, #116	; 0x74
 80148a8:	4607      	mov	r7, r0
 80148aa:	460d      	mov	r5, r1
 80148ac:	4614      	mov	r4, r2
 80148ae:	d50e      	bpl.n	80148ce <_svfiprintf_r+0x32>
 80148b0:	690b      	ldr	r3, [r1, #16]
 80148b2:	b963      	cbnz	r3, 80148ce <_svfiprintf_r+0x32>
 80148b4:	2140      	movs	r1, #64	; 0x40
 80148b6:	f7ff ff3b 	bl	8014730 <_malloc_r>
 80148ba:	6028      	str	r0, [r5, #0]
 80148bc:	6128      	str	r0, [r5, #16]
 80148be:	b920      	cbnz	r0, 80148ca <_svfiprintf_r+0x2e>
 80148c0:	230c      	movs	r3, #12
 80148c2:	603b      	str	r3, [r7, #0]
 80148c4:	f04f 30ff 	mov.w	r0, #4294967295
 80148c8:	e0d1      	b.n	8014a6e <_svfiprintf_r+0x1d2>
 80148ca:	2340      	movs	r3, #64	; 0x40
 80148cc:	616b      	str	r3, [r5, #20]
 80148ce:	2300      	movs	r3, #0
 80148d0:	9309      	str	r3, [sp, #36]	; 0x24
 80148d2:	2320      	movs	r3, #32
 80148d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80148dc:	2330      	movs	r3, #48	; 0x30
 80148de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014a88 <_svfiprintf_r+0x1ec>
 80148e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148e6:	f04f 0901 	mov.w	r9, #1
 80148ea:	4623      	mov	r3, r4
 80148ec:	469a      	mov	sl, r3
 80148ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148f2:	b10a      	cbz	r2, 80148f8 <_svfiprintf_r+0x5c>
 80148f4:	2a25      	cmp	r2, #37	; 0x25
 80148f6:	d1f9      	bne.n	80148ec <_svfiprintf_r+0x50>
 80148f8:	ebba 0b04 	subs.w	fp, sl, r4
 80148fc:	d00b      	beq.n	8014916 <_svfiprintf_r+0x7a>
 80148fe:	465b      	mov	r3, fp
 8014900:	4622      	mov	r2, r4
 8014902:	4629      	mov	r1, r5
 8014904:	4638      	mov	r0, r7
 8014906:	f7ff ff6d 	bl	80147e4 <__ssputs_r>
 801490a:	3001      	adds	r0, #1
 801490c:	f000 80aa 	beq.w	8014a64 <_svfiprintf_r+0x1c8>
 8014910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014912:	445a      	add	r2, fp
 8014914:	9209      	str	r2, [sp, #36]	; 0x24
 8014916:	f89a 3000 	ldrb.w	r3, [sl]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 80a2 	beq.w	8014a64 <_svfiprintf_r+0x1c8>
 8014920:	2300      	movs	r3, #0
 8014922:	f04f 32ff 	mov.w	r2, #4294967295
 8014926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801492a:	f10a 0a01 	add.w	sl, sl, #1
 801492e:	9304      	str	r3, [sp, #16]
 8014930:	9307      	str	r3, [sp, #28]
 8014932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014936:	931a      	str	r3, [sp, #104]	; 0x68
 8014938:	4654      	mov	r4, sl
 801493a:	2205      	movs	r2, #5
 801493c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014940:	4851      	ldr	r0, [pc, #324]	; (8014a88 <_svfiprintf_r+0x1ec>)
 8014942:	f7eb fc65 	bl	8000210 <memchr>
 8014946:	9a04      	ldr	r2, [sp, #16]
 8014948:	b9d8      	cbnz	r0, 8014982 <_svfiprintf_r+0xe6>
 801494a:	06d0      	lsls	r0, r2, #27
 801494c:	bf44      	itt	mi
 801494e:	2320      	movmi	r3, #32
 8014950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014954:	0711      	lsls	r1, r2, #28
 8014956:	bf44      	itt	mi
 8014958:	232b      	movmi	r3, #43	; 0x2b
 801495a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801495e:	f89a 3000 	ldrb.w	r3, [sl]
 8014962:	2b2a      	cmp	r3, #42	; 0x2a
 8014964:	d015      	beq.n	8014992 <_svfiprintf_r+0xf6>
 8014966:	9a07      	ldr	r2, [sp, #28]
 8014968:	4654      	mov	r4, sl
 801496a:	2000      	movs	r0, #0
 801496c:	f04f 0c0a 	mov.w	ip, #10
 8014970:	4621      	mov	r1, r4
 8014972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014976:	3b30      	subs	r3, #48	; 0x30
 8014978:	2b09      	cmp	r3, #9
 801497a:	d94e      	bls.n	8014a1a <_svfiprintf_r+0x17e>
 801497c:	b1b0      	cbz	r0, 80149ac <_svfiprintf_r+0x110>
 801497e:	9207      	str	r2, [sp, #28]
 8014980:	e014      	b.n	80149ac <_svfiprintf_r+0x110>
 8014982:	eba0 0308 	sub.w	r3, r0, r8
 8014986:	fa09 f303 	lsl.w	r3, r9, r3
 801498a:	4313      	orrs	r3, r2
 801498c:	9304      	str	r3, [sp, #16]
 801498e:	46a2      	mov	sl, r4
 8014990:	e7d2      	b.n	8014938 <_svfiprintf_r+0x9c>
 8014992:	9b03      	ldr	r3, [sp, #12]
 8014994:	1d19      	adds	r1, r3, #4
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	9103      	str	r1, [sp, #12]
 801499a:	2b00      	cmp	r3, #0
 801499c:	bfbb      	ittet	lt
 801499e:	425b      	neglt	r3, r3
 80149a0:	f042 0202 	orrlt.w	r2, r2, #2
 80149a4:	9307      	strge	r3, [sp, #28]
 80149a6:	9307      	strlt	r3, [sp, #28]
 80149a8:	bfb8      	it	lt
 80149aa:	9204      	strlt	r2, [sp, #16]
 80149ac:	7823      	ldrb	r3, [r4, #0]
 80149ae:	2b2e      	cmp	r3, #46	; 0x2e
 80149b0:	d10c      	bne.n	80149cc <_svfiprintf_r+0x130>
 80149b2:	7863      	ldrb	r3, [r4, #1]
 80149b4:	2b2a      	cmp	r3, #42	; 0x2a
 80149b6:	d135      	bne.n	8014a24 <_svfiprintf_r+0x188>
 80149b8:	9b03      	ldr	r3, [sp, #12]
 80149ba:	1d1a      	adds	r2, r3, #4
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	9203      	str	r2, [sp, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	bfb8      	it	lt
 80149c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80149c8:	3402      	adds	r4, #2
 80149ca:	9305      	str	r3, [sp, #20]
 80149cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014a98 <_svfiprintf_r+0x1fc>
 80149d0:	7821      	ldrb	r1, [r4, #0]
 80149d2:	2203      	movs	r2, #3
 80149d4:	4650      	mov	r0, sl
 80149d6:	f7eb fc1b 	bl	8000210 <memchr>
 80149da:	b140      	cbz	r0, 80149ee <_svfiprintf_r+0x152>
 80149dc:	2340      	movs	r3, #64	; 0x40
 80149de:	eba0 000a 	sub.w	r0, r0, sl
 80149e2:	fa03 f000 	lsl.w	r0, r3, r0
 80149e6:	9b04      	ldr	r3, [sp, #16]
 80149e8:	4303      	orrs	r3, r0
 80149ea:	3401      	adds	r4, #1
 80149ec:	9304      	str	r3, [sp, #16]
 80149ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149f2:	4826      	ldr	r0, [pc, #152]	; (8014a8c <_svfiprintf_r+0x1f0>)
 80149f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149f8:	2206      	movs	r2, #6
 80149fa:	f7eb fc09 	bl	8000210 <memchr>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d038      	beq.n	8014a74 <_svfiprintf_r+0x1d8>
 8014a02:	4b23      	ldr	r3, [pc, #140]	; (8014a90 <_svfiprintf_r+0x1f4>)
 8014a04:	bb1b      	cbnz	r3, 8014a4e <_svfiprintf_r+0x1b2>
 8014a06:	9b03      	ldr	r3, [sp, #12]
 8014a08:	3307      	adds	r3, #7
 8014a0a:	f023 0307 	bic.w	r3, r3, #7
 8014a0e:	3308      	adds	r3, #8
 8014a10:	9303      	str	r3, [sp, #12]
 8014a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a14:	4433      	add	r3, r6
 8014a16:	9309      	str	r3, [sp, #36]	; 0x24
 8014a18:	e767      	b.n	80148ea <_svfiprintf_r+0x4e>
 8014a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a1e:	460c      	mov	r4, r1
 8014a20:	2001      	movs	r0, #1
 8014a22:	e7a5      	b.n	8014970 <_svfiprintf_r+0xd4>
 8014a24:	2300      	movs	r3, #0
 8014a26:	3401      	adds	r4, #1
 8014a28:	9305      	str	r3, [sp, #20]
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	f04f 0c0a 	mov.w	ip, #10
 8014a30:	4620      	mov	r0, r4
 8014a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a36:	3a30      	subs	r2, #48	; 0x30
 8014a38:	2a09      	cmp	r2, #9
 8014a3a:	d903      	bls.n	8014a44 <_svfiprintf_r+0x1a8>
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d0c5      	beq.n	80149cc <_svfiprintf_r+0x130>
 8014a40:	9105      	str	r1, [sp, #20]
 8014a42:	e7c3      	b.n	80149cc <_svfiprintf_r+0x130>
 8014a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a48:	4604      	mov	r4, r0
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	e7f0      	b.n	8014a30 <_svfiprintf_r+0x194>
 8014a4e:	ab03      	add	r3, sp, #12
 8014a50:	9300      	str	r3, [sp, #0]
 8014a52:	462a      	mov	r2, r5
 8014a54:	4b0f      	ldr	r3, [pc, #60]	; (8014a94 <_svfiprintf_r+0x1f8>)
 8014a56:	a904      	add	r1, sp, #16
 8014a58:	4638      	mov	r0, r7
 8014a5a:	f7fc f9e5 	bl	8010e28 <_printf_float>
 8014a5e:	1c42      	adds	r2, r0, #1
 8014a60:	4606      	mov	r6, r0
 8014a62:	d1d6      	bne.n	8014a12 <_svfiprintf_r+0x176>
 8014a64:	89ab      	ldrh	r3, [r5, #12]
 8014a66:	065b      	lsls	r3, r3, #25
 8014a68:	f53f af2c 	bmi.w	80148c4 <_svfiprintf_r+0x28>
 8014a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a6e:	b01d      	add	sp, #116	; 0x74
 8014a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a74:	ab03      	add	r3, sp, #12
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	462a      	mov	r2, r5
 8014a7a:	4b06      	ldr	r3, [pc, #24]	; (8014a94 <_svfiprintf_r+0x1f8>)
 8014a7c:	a904      	add	r1, sp, #16
 8014a7e:	4638      	mov	r0, r7
 8014a80:	f7fc fc76 	bl	8011370 <_printf_i>
 8014a84:	e7eb      	b.n	8014a5e <_svfiprintf_r+0x1c2>
 8014a86:	bf00      	nop
 8014a88:	08029554 	.word	0x08029554
 8014a8c:	0802955e 	.word	0x0802955e
 8014a90:	08010e29 	.word	0x08010e29
 8014a94:	080147e5 	.word	0x080147e5
 8014a98:	0802955a 	.word	0x0802955a

08014a9c <__sfputc_r>:
 8014a9c:	6893      	ldr	r3, [r2, #8]
 8014a9e:	3b01      	subs	r3, #1
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	b410      	push	{r4}
 8014aa4:	6093      	str	r3, [r2, #8]
 8014aa6:	da08      	bge.n	8014aba <__sfputc_r+0x1e>
 8014aa8:	6994      	ldr	r4, [r2, #24]
 8014aaa:	42a3      	cmp	r3, r4
 8014aac:	db01      	blt.n	8014ab2 <__sfputc_r+0x16>
 8014aae:	290a      	cmp	r1, #10
 8014ab0:	d103      	bne.n	8014aba <__sfputc_r+0x1e>
 8014ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ab6:	f000 b975 	b.w	8014da4 <__swbuf_r>
 8014aba:	6813      	ldr	r3, [r2, #0]
 8014abc:	1c58      	adds	r0, r3, #1
 8014abe:	6010      	str	r0, [r2, #0]
 8014ac0:	7019      	strb	r1, [r3, #0]
 8014ac2:	4608      	mov	r0, r1
 8014ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ac8:	4770      	bx	lr

08014aca <__sfputs_r>:
 8014aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014acc:	4606      	mov	r6, r0
 8014ace:	460f      	mov	r7, r1
 8014ad0:	4614      	mov	r4, r2
 8014ad2:	18d5      	adds	r5, r2, r3
 8014ad4:	42ac      	cmp	r4, r5
 8014ad6:	d101      	bne.n	8014adc <__sfputs_r+0x12>
 8014ad8:	2000      	movs	r0, #0
 8014ada:	e007      	b.n	8014aec <__sfputs_r+0x22>
 8014adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ae0:	463a      	mov	r2, r7
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f7ff ffda 	bl	8014a9c <__sfputc_r>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	d1f3      	bne.n	8014ad4 <__sfputs_r+0xa>
 8014aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014af0 <_vfiprintf_r>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	460d      	mov	r5, r1
 8014af6:	b09d      	sub	sp, #116	; 0x74
 8014af8:	4614      	mov	r4, r2
 8014afa:	4698      	mov	r8, r3
 8014afc:	4606      	mov	r6, r0
 8014afe:	b118      	cbz	r0, 8014b08 <_vfiprintf_r+0x18>
 8014b00:	6983      	ldr	r3, [r0, #24]
 8014b02:	b90b      	cbnz	r3, 8014b08 <_vfiprintf_r+0x18>
 8014b04:	f000 fb3e 	bl	8015184 <__sinit>
 8014b08:	4b89      	ldr	r3, [pc, #548]	; (8014d30 <_vfiprintf_r+0x240>)
 8014b0a:	429d      	cmp	r5, r3
 8014b0c:	d11b      	bne.n	8014b46 <_vfiprintf_r+0x56>
 8014b0e:	6875      	ldr	r5, [r6, #4]
 8014b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b12:	07d9      	lsls	r1, r3, #31
 8014b14:	d405      	bmi.n	8014b22 <_vfiprintf_r+0x32>
 8014b16:	89ab      	ldrh	r3, [r5, #12]
 8014b18:	059a      	lsls	r2, r3, #22
 8014b1a:	d402      	bmi.n	8014b22 <_vfiprintf_r+0x32>
 8014b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b1e:	f000 fbcf 	bl	80152c0 <__retarget_lock_acquire_recursive>
 8014b22:	89ab      	ldrh	r3, [r5, #12]
 8014b24:	071b      	lsls	r3, r3, #28
 8014b26:	d501      	bpl.n	8014b2c <_vfiprintf_r+0x3c>
 8014b28:	692b      	ldr	r3, [r5, #16]
 8014b2a:	b9eb      	cbnz	r3, 8014b68 <_vfiprintf_r+0x78>
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	4630      	mov	r0, r6
 8014b30:	f000 f998 	bl	8014e64 <__swsetup_r>
 8014b34:	b1c0      	cbz	r0, 8014b68 <_vfiprintf_r+0x78>
 8014b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b38:	07dc      	lsls	r4, r3, #31
 8014b3a:	d50e      	bpl.n	8014b5a <_vfiprintf_r+0x6a>
 8014b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b40:	b01d      	add	sp, #116	; 0x74
 8014b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b46:	4b7b      	ldr	r3, [pc, #492]	; (8014d34 <_vfiprintf_r+0x244>)
 8014b48:	429d      	cmp	r5, r3
 8014b4a:	d101      	bne.n	8014b50 <_vfiprintf_r+0x60>
 8014b4c:	68b5      	ldr	r5, [r6, #8]
 8014b4e:	e7df      	b.n	8014b10 <_vfiprintf_r+0x20>
 8014b50:	4b79      	ldr	r3, [pc, #484]	; (8014d38 <_vfiprintf_r+0x248>)
 8014b52:	429d      	cmp	r5, r3
 8014b54:	bf08      	it	eq
 8014b56:	68f5      	ldreq	r5, [r6, #12]
 8014b58:	e7da      	b.n	8014b10 <_vfiprintf_r+0x20>
 8014b5a:	89ab      	ldrh	r3, [r5, #12]
 8014b5c:	0598      	lsls	r0, r3, #22
 8014b5e:	d4ed      	bmi.n	8014b3c <_vfiprintf_r+0x4c>
 8014b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b62:	f000 fbae 	bl	80152c2 <__retarget_lock_release_recursive>
 8014b66:	e7e9      	b.n	8014b3c <_vfiprintf_r+0x4c>
 8014b68:	2300      	movs	r3, #0
 8014b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8014b6c:	2320      	movs	r3, #32
 8014b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b76:	2330      	movs	r3, #48	; 0x30
 8014b78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014d3c <_vfiprintf_r+0x24c>
 8014b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b80:	f04f 0901 	mov.w	r9, #1
 8014b84:	4623      	mov	r3, r4
 8014b86:	469a      	mov	sl, r3
 8014b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b8c:	b10a      	cbz	r2, 8014b92 <_vfiprintf_r+0xa2>
 8014b8e:	2a25      	cmp	r2, #37	; 0x25
 8014b90:	d1f9      	bne.n	8014b86 <_vfiprintf_r+0x96>
 8014b92:	ebba 0b04 	subs.w	fp, sl, r4
 8014b96:	d00b      	beq.n	8014bb0 <_vfiprintf_r+0xc0>
 8014b98:	465b      	mov	r3, fp
 8014b9a:	4622      	mov	r2, r4
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	f7ff ff93 	bl	8014aca <__sfputs_r>
 8014ba4:	3001      	adds	r0, #1
 8014ba6:	f000 80aa 	beq.w	8014cfe <_vfiprintf_r+0x20e>
 8014baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bac:	445a      	add	r2, fp
 8014bae:	9209      	str	r2, [sp, #36]	; 0x24
 8014bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f000 80a2 	beq.w	8014cfe <_vfiprintf_r+0x20e>
 8014bba:	2300      	movs	r3, #0
 8014bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8014bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bc4:	f10a 0a01 	add.w	sl, sl, #1
 8014bc8:	9304      	str	r3, [sp, #16]
 8014bca:	9307      	str	r3, [sp, #28]
 8014bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8014bd2:	4654      	mov	r4, sl
 8014bd4:	2205      	movs	r2, #5
 8014bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bda:	4858      	ldr	r0, [pc, #352]	; (8014d3c <_vfiprintf_r+0x24c>)
 8014bdc:	f7eb fb18 	bl	8000210 <memchr>
 8014be0:	9a04      	ldr	r2, [sp, #16]
 8014be2:	b9d8      	cbnz	r0, 8014c1c <_vfiprintf_r+0x12c>
 8014be4:	06d1      	lsls	r1, r2, #27
 8014be6:	bf44      	itt	mi
 8014be8:	2320      	movmi	r3, #32
 8014bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bee:	0713      	lsls	r3, r2, #28
 8014bf0:	bf44      	itt	mi
 8014bf2:	232b      	movmi	r3, #43	; 0x2b
 8014bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8014bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8014bfe:	d015      	beq.n	8014c2c <_vfiprintf_r+0x13c>
 8014c00:	9a07      	ldr	r2, [sp, #28]
 8014c02:	4654      	mov	r4, sl
 8014c04:	2000      	movs	r0, #0
 8014c06:	f04f 0c0a 	mov.w	ip, #10
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c10:	3b30      	subs	r3, #48	; 0x30
 8014c12:	2b09      	cmp	r3, #9
 8014c14:	d94e      	bls.n	8014cb4 <_vfiprintf_r+0x1c4>
 8014c16:	b1b0      	cbz	r0, 8014c46 <_vfiprintf_r+0x156>
 8014c18:	9207      	str	r2, [sp, #28]
 8014c1a:	e014      	b.n	8014c46 <_vfiprintf_r+0x156>
 8014c1c:	eba0 0308 	sub.w	r3, r0, r8
 8014c20:	fa09 f303 	lsl.w	r3, r9, r3
 8014c24:	4313      	orrs	r3, r2
 8014c26:	9304      	str	r3, [sp, #16]
 8014c28:	46a2      	mov	sl, r4
 8014c2a:	e7d2      	b.n	8014bd2 <_vfiprintf_r+0xe2>
 8014c2c:	9b03      	ldr	r3, [sp, #12]
 8014c2e:	1d19      	adds	r1, r3, #4
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	9103      	str	r1, [sp, #12]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	bfbb      	ittet	lt
 8014c38:	425b      	neglt	r3, r3
 8014c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8014c3e:	9307      	strge	r3, [sp, #28]
 8014c40:	9307      	strlt	r3, [sp, #28]
 8014c42:	bfb8      	it	lt
 8014c44:	9204      	strlt	r2, [sp, #16]
 8014c46:	7823      	ldrb	r3, [r4, #0]
 8014c48:	2b2e      	cmp	r3, #46	; 0x2e
 8014c4a:	d10c      	bne.n	8014c66 <_vfiprintf_r+0x176>
 8014c4c:	7863      	ldrb	r3, [r4, #1]
 8014c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8014c50:	d135      	bne.n	8014cbe <_vfiprintf_r+0x1ce>
 8014c52:	9b03      	ldr	r3, [sp, #12]
 8014c54:	1d1a      	adds	r2, r3, #4
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	9203      	str	r2, [sp, #12]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	bfb8      	it	lt
 8014c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c62:	3402      	adds	r4, #2
 8014c64:	9305      	str	r3, [sp, #20]
 8014c66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014d4c <_vfiprintf_r+0x25c>
 8014c6a:	7821      	ldrb	r1, [r4, #0]
 8014c6c:	2203      	movs	r2, #3
 8014c6e:	4650      	mov	r0, sl
 8014c70:	f7eb face 	bl	8000210 <memchr>
 8014c74:	b140      	cbz	r0, 8014c88 <_vfiprintf_r+0x198>
 8014c76:	2340      	movs	r3, #64	; 0x40
 8014c78:	eba0 000a 	sub.w	r0, r0, sl
 8014c7c:	fa03 f000 	lsl.w	r0, r3, r0
 8014c80:	9b04      	ldr	r3, [sp, #16]
 8014c82:	4303      	orrs	r3, r0
 8014c84:	3401      	adds	r4, #1
 8014c86:	9304      	str	r3, [sp, #16]
 8014c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c8c:	482c      	ldr	r0, [pc, #176]	; (8014d40 <_vfiprintf_r+0x250>)
 8014c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c92:	2206      	movs	r2, #6
 8014c94:	f7eb fabc 	bl	8000210 <memchr>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d03f      	beq.n	8014d1c <_vfiprintf_r+0x22c>
 8014c9c:	4b29      	ldr	r3, [pc, #164]	; (8014d44 <_vfiprintf_r+0x254>)
 8014c9e:	bb1b      	cbnz	r3, 8014ce8 <_vfiprintf_r+0x1f8>
 8014ca0:	9b03      	ldr	r3, [sp, #12]
 8014ca2:	3307      	adds	r3, #7
 8014ca4:	f023 0307 	bic.w	r3, r3, #7
 8014ca8:	3308      	adds	r3, #8
 8014caa:	9303      	str	r3, [sp, #12]
 8014cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cae:	443b      	add	r3, r7
 8014cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8014cb2:	e767      	b.n	8014b84 <_vfiprintf_r+0x94>
 8014cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cb8:	460c      	mov	r4, r1
 8014cba:	2001      	movs	r0, #1
 8014cbc:	e7a5      	b.n	8014c0a <_vfiprintf_r+0x11a>
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	3401      	adds	r4, #1
 8014cc2:	9305      	str	r3, [sp, #20]
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	f04f 0c0a 	mov.w	ip, #10
 8014cca:	4620      	mov	r0, r4
 8014ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cd0:	3a30      	subs	r2, #48	; 0x30
 8014cd2:	2a09      	cmp	r2, #9
 8014cd4:	d903      	bls.n	8014cde <_vfiprintf_r+0x1ee>
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d0c5      	beq.n	8014c66 <_vfiprintf_r+0x176>
 8014cda:	9105      	str	r1, [sp, #20]
 8014cdc:	e7c3      	b.n	8014c66 <_vfiprintf_r+0x176>
 8014cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	e7f0      	b.n	8014cca <_vfiprintf_r+0x1da>
 8014ce8:	ab03      	add	r3, sp, #12
 8014cea:	9300      	str	r3, [sp, #0]
 8014cec:	462a      	mov	r2, r5
 8014cee:	4b16      	ldr	r3, [pc, #88]	; (8014d48 <_vfiprintf_r+0x258>)
 8014cf0:	a904      	add	r1, sp, #16
 8014cf2:	4630      	mov	r0, r6
 8014cf4:	f7fc f898 	bl	8010e28 <_printf_float>
 8014cf8:	4607      	mov	r7, r0
 8014cfa:	1c78      	adds	r0, r7, #1
 8014cfc:	d1d6      	bne.n	8014cac <_vfiprintf_r+0x1bc>
 8014cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d00:	07d9      	lsls	r1, r3, #31
 8014d02:	d405      	bmi.n	8014d10 <_vfiprintf_r+0x220>
 8014d04:	89ab      	ldrh	r3, [r5, #12]
 8014d06:	059a      	lsls	r2, r3, #22
 8014d08:	d402      	bmi.n	8014d10 <_vfiprintf_r+0x220>
 8014d0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d0c:	f000 fad9 	bl	80152c2 <__retarget_lock_release_recursive>
 8014d10:	89ab      	ldrh	r3, [r5, #12]
 8014d12:	065b      	lsls	r3, r3, #25
 8014d14:	f53f af12 	bmi.w	8014b3c <_vfiprintf_r+0x4c>
 8014d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d1a:	e711      	b.n	8014b40 <_vfiprintf_r+0x50>
 8014d1c:	ab03      	add	r3, sp, #12
 8014d1e:	9300      	str	r3, [sp, #0]
 8014d20:	462a      	mov	r2, r5
 8014d22:	4b09      	ldr	r3, [pc, #36]	; (8014d48 <_vfiprintf_r+0x258>)
 8014d24:	a904      	add	r1, sp, #16
 8014d26:	4630      	mov	r0, r6
 8014d28:	f7fc fb22 	bl	8011370 <_printf_i>
 8014d2c:	e7e4      	b.n	8014cf8 <_vfiprintf_r+0x208>
 8014d2e:	bf00      	nop
 8014d30:	08029588 	.word	0x08029588
 8014d34:	080295a8 	.word	0x080295a8
 8014d38:	08029568 	.word	0x08029568
 8014d3c:	08029554 	.word	0x08029554
 8014d40:	0802955e 	.word	0x0802955e
 8014d44:	08010e29 	.word	0x08010e29
 8014d48:	08014acb 	.word	0x08014acb
 8014d4c:	0802955a 	.word	0x0802955a

08014d50 <nan>:
 8014d50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d58 <nan+0x8>
 8014d54:	4770      	bx	lr
 8014d56:	bf00      	nop
 8014d58:	00000000 	.word	0x00000000
 8014d5c:	7ff80000 	.word	0x7ff80000

08014d60 <_sbrk_r>:
 8014d60:	b538      	push	{r3, r4, r5, lr}
 8014d62:	4d06      	ldr	r5, [pc, #24]	; (8014d7c <_sbrk_r+0x1c>)
 8014d64:	2300      	movs	r3, #0
 8014d66:	4604      	mov	r4, r0
 8014d68:	4608      	mov	r0, r1
 8014d6a:	602b      	str	r3, [r5, #0]
 8014d6c:	f7f4 fbf6 	bl	800955c <_sbrk>
 8014d70:	1c43      	adds	r3, r0, #1
 8014d72:	d102      	bne.n	8014d7a <_sbrk_r+0x1a>
 8014d74:	682b      	ldr	r3, [r5, #0]
 8014d76:	b103      	cbz	r3, 8014d7a <_sbrk_r+0x1a>
 8014d78:	6023      	str	r3, [r4, #0]
 8014d7a:	bd38      	pop	{r3, r4, r5, pc}
 8014d7c:	20000c80 	.word	0x20000c80

08014d80 <strncmp>:
 8014d80:	b510      	push	{r4, lr}
 8014d82:	b16a      	cbz	r2, 8014da0 <strncmp+0x20>
 8014d84:	3901      	subs	r1, #1
 8014d86:	1884      	adds	r4, r0, r2
 8014d88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014d8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014d90:	4293      	cmp	r3, r2
 8014d92:	d103      	bne.n	8014d9c <strncmp+0x1c>
 8014d94:	42a0      	cmp	r0, r4
 8014d96:	d001      	beq.n	8014d9c <strncmp+0x1c>
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d1f5      	bne.n	8014d88 <strncmp+0x8>
 8014d9c:	1a98      	subs	r0, r3, r2
 8014d9e:	bd10      	pop	{r4, pc}
 8014da0:	4610      	mov	r0, r2
 8014da2:	e7fc      	b.n	8014d9e <strncmp+0x1e>

08014da4 <__swbuf_r>:
 8014da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014da6:	460e      	mov	r6, r1
 8014da8:	4614      	mov	r4, r2
 8014daa:	4605      	mov	r5, r0
 8014dac:	b118      	cbz	r0, 8014db6 <__swbuf_r+0x12>
 8014dae:	6983      	ldr	r3, [r0, #24]
 8014db0:	b90b      	cbnz	r3, 8014db6 <__swbuf_r+0x12>
 8014db2:	f000 f9e7 	bl	8015184 <__sinit>
 8014db6:	4b21      	ldr	r3, [pc, #132]	; (8014e3c <__swbuf_r+0x98>)
 8014db8:	429c      	cmp	r4, r3
 8014dba:	d12b      	bne.n	8014e14 <__swbuf_r+0x70>
 8014dbc:	686c      	ldr	r4, [r5, #4]
 8014dbe:	69a3      	ldr	r3, [r4, #24]
 8014dc0:	60a3      	str	r3, [r4, #8]
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	071a      	lsls	r2, r3, #28
 8014dc6:	d52f      	bpl.n	8014e28 <__swbuf_r+0x84>
 8014dc8:	6923      	ldr	r3, [r4, #16]
 8014dca:	b36b      	cbz	r3, 8014e28 <__swbuf_r+0x84>
 8014dcc:	6923      	ldr	r3, [r4, #16]
 8014dce:	6820      	ldr	r0, [r4, #0]
 8014dd0:	1ac0      	subs	r0, r0, r3
 8014dd2:	6963      	ldr	r3, [r4, #20]
 8014dd4:	b2f6      	uxtb	r6, r6
 8014dd6:	4283      	cmp	r3, r0
 8014dd8:	4637      	mov	r7, r6
 8014dda:	dc04      	bgt.n	8014de6 <__swbuf_r+0x42>
 8014ddc:	4621      	mov	r1, r4
 8014dde:	4628      	mov	r0, r5
 8014de0:	f000 f93c 	bl	801505c <_fflush_r>
 8014de4:	bb30      	cbnz	r0, 8014e34 <__swbuf_r+0x90>
 8014de6:	68a3      	ldr	r3, [r4, #8]
 8014de8:	3b01      	subs	r3, #1
 8014dea:	60a3      	str	r3, [r4, #8]
 8014dec:	6823      	ldr	r3, [r4, #0]
 8014dee:	1c5a      	adds	r2, r3, #1
 8014df0:	6022      	str	r2, [r4, #0]
 8014df2:	701e      	strb	r6, [r3, #0]
 8014df4:	6963      	ldr	r3, [r4, #20]
 8014df6:	3001      	adds	r0, #1
 8014df8:	4283      	cmp	r3, r0
 8014dfa:	d004      	beq.n	8014e06 <__swbuf_r+0x62>
 8014dfc:	89a3      	ldrh	r3, [r4, #12]
 8014dfe:	07db      	lsls	r3, r3, #31
 8014e00:	d506      	bpl.n	8014e10 <__swbuf_r+0x6c>
 8014e02:	2e0a      	cmp	r6, #10
 8014e04:	d104      	bne.n	8014e10 <__swbuf_r+0x6c>
 8014e06:	4621      	mov	r1, r4
 8014e08:	4628      	mov	r0, r5
 8014e0a:	f000 f927 	bl	801505c <_fflush_r>
 8014e0e:	b988      	cbnz	r0, 8014e34 <__swbuf_r+0x90>
 8014e10:	4638      	mov	r0, r7
 8014e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e14:	4b0a      	ldr	r3, [pc, #40]	; (8014e40 <__swbuf_r+0x9c>)
 8014e16:	429c      	cmp	r4, r3
 8014e18:	d101      	bne.n	8014e1e <__swbuf_r+0x7a>
 8014e1a:	68ac      	ldr	r4, [r5, #8]
 8014e1c:	e7cf      	b.n	8014dbe <__swbuf_r+0x1a>
 8014e1e:	4b09      	ldr	r3, [pc, #36]	; (8014e44 <__swbuf_r+0xa0>)
 8014e20:	429c      	cmp	r4, r3
 8014e22:	bf08      	it	eq
 8014e24:	68ec      	ldreq	r4, [r5, #12]
 8014e26:	e7ca      	b.n	8014dbe <__swbuf_r+0x1a>
 8014e28:	4621      	mov	r1, r4
 8014e2a:	4628      	mov	r0, r5
 8014e2c:	f000 f81a 	bl	8014e64 <__swsetup_r>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d0cb      	beq.n	8014dcc <__swbuf_r+0x28>
 8014e34:	f04f 37ff 	mov.w	r7, #4294967295
 8014e38:	e7ea      	b.n	8014e10 <__swbuf_r+0x6c>
 8014e3a:	bf00      	nop
 8014e3c:	08029588 	.word	0x08029588
 8014e40:	080295a8 	.word	0x080295a8
 8014e44:	08029568 	.word	0x08029568

08014e48 <__ascii_wctomb>:
 8014e48:	b149      	cbz	r1, 8014e5e <__ascii_wctomb+0x16>
 8014e4a:	2aff      	cmp	r2, #255	; 0xff
 8014e4c:	bf85      	ittet	hi
 8014e4e:	238a      	movhi	r3, #138	; 0x8a
 8014e50:	6003      	strhi	r3, [r0, #0]
 8014e52:	700a      	strbls	r2, [r1, #0]
 8014e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e58:	bf98      	it	ls
 8014e5a:	2001      	movls	r0, #1
 8014e5c:	4770      	bx	lr
 8014e5e:	4608      	mov	r0, r1
 8014e60:	4770      	bx	lr
	...

08014e64 <__swsetup_r>:
 8014e64:	4b32      	ldr	r3, [pc, #200]	; (8014f30 <__swsetup_r+0xcc>)
 8014e66:	b570      	push	{r4, r5, r6, lr}
 8014e68:	681d      	ldr	r5, [r3, #0]
 8014e6a:	4606      	mov	r6, r0
 8014e6c:	460c      	mov	r4, r1
 8014e6e:	b125      	cbz	r5, 8014e7a <__swsetup_r+0x16>
 8014e70:	69ab      	ldr	r3, [r5, #24]
 8014e72:	b913      	cbnz	r3, 8014e7a <__swsetup_r+0x16>
 8014e74:	4628      	mov	r0, r5
 8014e76:	f000 f985 	bl	8015184 <__sinit>
 8014e7a:	4b2e      	ldr	r3, [pc, #184]	; (8014f34 <__swsetup_r+0xd0>)
 8014e7c:	429c      	cmp	r4, r3
 8014e7e:	d10f      	bne.n	8014ea0 <__swsetup_r+0x3c>
 8014e80:	686c      	ldr	r4, [r5, #4]
 8014e82:	89a3      	ldrh	r3, [r4, #12]
 8014e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e88:	0719      	lsls	r1, r3, #28
 8014e8a:	d42c      	bmi.n	8014ee6 <__swsetup_r+0x82>
 8014e8c:	06dd      	lsls	r5, r3, #27
 8014e8e:	d411      	bmi.n	8014eb4 <__swsetup_r+0x50>
 8014e90:	2309      	movs	r3, #9
 8014e92:	6033      	str	r3, [r6, #0]
 8014e94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e98:	81a3      	strh	r3, [r4, #12]
 8014e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e9e:	e03e      	b.n	8014f1e <__swsetup_r+0xba>
 8014ea0:	4b25      	ldr	r3, [pc, #148]	; (8014f38 <__swsetup_r+0xd4>)
 8014ea2:	429c      	cmp	r4, r3
 8014ea4:	d101      	bne.n	8014eaa <__swsetup_r+0x46>
 8014ea6:	68ac      	ldr	r4, [r5, #8]
 8014ea8:	e7eb      	b.n	8014e82 <__swsetup_r+0x1e>
 8014eaa:	4b24      	ldr	r3, [pc, #144]	; (8014f3c <__swsetup_r+0xd8>)
 8014eac:	429c      	cmp	r4, r3
 8014eae:	bf08      	it	eq
 8014eb0:	68ec      	ldreq	r4, [r5, #12]
 8014eb2:	e7e6      	b.n	8014e82 <__swsetup_r+0x1e>
 8014eb4:	0758      	lsls	r0, r3, #29
 8014eb6:	d512      	bpl.n	8014ede <__swsetup_r+0x7a>
 8014eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014eba:	b141      	cbz	r1, 8014ece <__swsetup_r+0x6a>
 8014ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ec0:	4299      	cmp	r1, r3
 8014ec2:	d002      	beq.n	8014eca <__swsetup_r+0x66>
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	f7ff fbe3 	bl	8014690 <_free_r>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8014ece:	89a3      	ldrh	r3, [r4, #12]
 8014ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ed4:	81a3      	strh	r3, [r4, #12]
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	6063      	str	r3, [r4, #4]
 8014eda:	6923      	ldr	r3, [r4, #16]
 8014edc:	6023      	str	r3, [r4, #0]
 8014ede:	89a3      	ldrh	r3, [r4, #12]
 8014ee0:	f043 0308 	orr.w	r3, r3, #8
 8014ee4:	81a3      	strh	r3, [r4, #12]
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	b94b      	cbnz	r3, 8014efe <__swsetup_r+0x9a>
 8014eea:	89a3      	ldrh	r3, [r4, #12]
 8014eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ef4:	d003      	beq.n	8014efe <__swsetup_r+0x9a>
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	4630      	mov	r0, r6
 8014efa:	f000 fa07 	bl	801530c <__smakebuf_r>
 8014efe:	89a0      	ldrh	r0, [r4, #12]
 8014f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f04:	f010 0301 	ands.w	r3, r0, #1
 8014f08:	d00a      	beq.n	8014f20 <__swsetup_r+0xbc>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	60a3      	str	r3, [r4, #8]
 8014f0e:	6963      	ldr	r3, [r4, #20]
 8014f10:	425b      	negs	r3, r3
 8014f12:	61a3      	str	r3, [r4, #24]
 8014f14:	6923      	ldr	r3, [r4, #16]
 8014f16:	b943      	cbnz	r3, 8014f2a <__swsetup_r+0xc6>
 8014f18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f1c:	d1ba      	bne.n	8014e94 <__swsetup_r+0x30>
 8014f1e:	bd70      	pop	{r4, r5, r6, pc}
 8014f20:	0781      	lsls	r1, r0, #30
 8014f22:	bf58      	it	pl
 8014f24:	6963      	ldrpl	r3, [r4, #20]
 8014f26:	60a3      	str	r3, [r4, #8]
 8014f28:	e7f4      	b.n	8014f14 <__swsetup_r+0xb0>
 8014f2a:	2000      	movs	r0, #0
 8014f2c:	e7f7      	b.n	8014f1e <__swsetup_r+0xba>
 8014f2e:	bf00      	nop
 8014f30:	20000040 	.word	0x20000040
 8014f34:	08029588 	.word	0x08029588
 8014f38:	080295a8 	.word	0x080295a8
 8014f3c:	08029568 	.word	0x08029568

08014f40 <abort>:
 8014f40:	b508      	push	{r3, lr}
 8014f42:	2006      	movs	r0, #6
 8014f44:	f000 fa96 	bl	8015474 <raise>
 8014f48:	2001      	movs	r0, #1
 8014f4a:	f7f4 fa8f 	bl	800946c <_exit>
	...

08014f50 <__sflush_r>:
 8014f50:	898a      	ldrh	r2, [r1, #12]
 8014f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f56:	4605      	mov	r5, r0
 8014f58:	0710      	lsls	r0, r2, #28
 8014f5a:	460c      	mov	r4, r1
 8014f5c:	d458      	bmi.n	8015010 <__sflush_r+0xc0>
 8014f5e:	684b      	ldr	r3, [r1, #4]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	dc05      	bgt.n	8014f70 <__sflush_r+0x20>
 8014f64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	dc02      	bgt.n	8014f70 <__sflush_r+0x20>
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f72:	2e00      	cmp	r6, #0
 8014f74:	d0f9      	beq.n	8014f6a <__sflush_r+0x1a>
 8014f76:	2300      	movs	r3, #0
 8014f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f7c:	682f      	ldr	r7, [r5, #0]
 8014f7e:	602b      	str	r3, [r5, #0]
 8014f80:	d032      	beq.n	8014fe8 <__sflush_r+0x98>
 8014f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f84:	89a3      	ldrh	r3, [r4, #12]
 8014f86:	075a      	lsls	r2, r3, #29
 8014f88:	d505      	bpl.n	8014f96 <__sflush_r+0x46>
 8014f8a:	6863      	ldr	r3, [r4, #4]
 8014f8c:	1ac0      	subs	r0, r0, r3
 8014f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f90:	b10b      	cbz	r3, 8014f96 <__sflush_r+0x46>
 8014f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f94:	1ac0      	subs	r0, r0, r3
 8014f96:	2300      	movs	r3, #0
 8014f98:	4602      	mov	r2, r0
 8014f9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f9c:	6a21      	ldr	r1, [r4, #32]
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	47b0      	blx	r6
 8014fa2:	1c43      	adds	r3, r0, #1
 8014fa4:	89a3      	ldrh	r3, [r4, #12]
 8014fa6:	d106      	bne.n	8014fb6 <__sflush_r+0x66>
 8014fa8:	6829      	ldr	r1, [r5, #0]
 8014faa:	291d      	cmp	r1, #29
 8014fac:	d82c      	bhi.n	8015008 <__sflush_r+0xb8>
 8014fae:	4a2a      	ldr	r2, [pc, #168]	; (8015058 <__sflush_r+0x108>)
 8014fb0:	40ca      	lsrs	r2, r1
 8014fb2:	07d6      	lsls	r6, r2, #31
 8014fb4:	d528      	bpl.n	8015008 <__sflush_r+0xb8>
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	6062      	str	r2, [r4, #4]
 8014fba:	04d9      	lsls	r1, r3, #19
 8014fbc:	6922      	ldr	r2, [r4, #16]
 8014fbe:	6022      	str	r2, [r4, #0]
 8014fc0:	d504      	bpl.n	8014fcc <__sflush_r+0x7c>
 8014fc2:	1c42      	adds	r2, r0, #1
 8014fc4:	d101      	bne.n	8014fca <__sflush_r+0x7a>
 8014fc6:	682b      	ldr	r3, [r5, #0]
 8014fc8:	b903      	cbnz	r3, 8014fcc <__sflush_r+0x7c>
 8014fca:	6560      	str	r0, [r4, #84]	; 0x54
 8014fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fce:	602f      	str	r7, [r5, #0]
 8014fd0:	2900      	cmp	r1, #0
 8014fd2:	d0ca      	beq.n	8014f6a <__sflush_r+0x1a>
 8014fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fd8:	4299      	cmp	r1, r3
 8014fda:	d002      	beq.n	8014fe2 <__sflush_r+0x92>
 8014fdc:	4628      	mov	r0, r5
 8014fde:	f7ff fb57 	bl	8014690 <_free_r>
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	6360      	str	r0, [r4, #52]	; 0x34
 8014fe6:	e7c1      	b.n	8014f6c <__sflush_r+0x1c>
 8014fe8:	6a21      	ldr	r1, [r4, #32]
 8014fea:	2301      	movs	r3, #1
 8014fec:	4628      	mov	r0, r5
 8014fee:	47b0      	blx	r6
 8014ff0:	1c41      	adds	r1, r0, #1
 8014ff2:	d1c7      	bne.n	8014f84 <__sflush_r+0x34>
 8014ff4:	682b      	ldr	r3, [r5, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d0c4      	beq.n	8014f84 <__sflush_r+0x34>
 8014ffa:	2b1d      	cmp	r3, #29
 8014ffc:	d001      	beq.n	8015002 <__sflush_r+0xb2>
 8014ffe:	2b16      	cmp	r3, #22
 8015000:	d101      	bne.n	8015006 <__sflush_r+0xb6>
 8015002:	602f      	str	r7, [r5, #0]
 8015004:	e7b1      	b.n	8014f6a <__sflush_r+0x1a>
 8015006:	89a3      	ldrh	r3, [r4, #12]
 8015008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801500c:	81a3      	strh	r3, [r4, #12]
 801500e:	e7ad      	b.n	8014f6c <__sflush_r+0x1c>
 8015010:	690f      	ldr	r7, [r1, #16]
 8015012:	2f00      	cmp	r7, #0
 8015014:	d0a9      	beq.n	8014f6a <__sflush_r+0x1a>
 8015016:	0793      	lsls	r3, r2, #30
 8015018:	680e      	ldr	r6, [r1, #0]
 801501a:	bf08      	it	eq
 801501c:	694b      	ldreq	r3, [r1, #20]
 801501e:	600f      	str	r7, [r1, #0]
 8015020:	bf18      	it	ne
 8015022:	2300      	movne	r3, #0
 8015024:	eba6 0807 	sub.w	r8, r6, r7
 8015028:	608b      	str	r3, [r1, #8]
 801502a:	f1b8 0f00 	cmp.w	r8, #0
 801502e:	dd9c      	ble.n	8014f6a <__sflush_r+0x1a>
 8015030:	6a21      	ldr	r1, [r4, #32]
 8015032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015034:	4643      	mov	r3, r8
 8015036:	463a      	mov	r2, r7
 8015038:	4628      	mov	r0, r5
 801503a:	47b0      	blx	r6
 801503c:	2800      	cmp	r0, #0
 801503e:	dc06      	bgt.n	801504e <__sflush_r+0xfe>
 8015040:	89a3      	ldrh	r3, [r4, #12]
 8015042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015046:	81a3      	strh	r3, [r4, #12]
 8015048:	f04f 30ff 	mov.w	r0, #4294967295
 801504c:	e78e      	b.n	8014f6c <__sflush_r+0x1c>
 801504e:	4407      	add	r7, r0
 8015050:	eba8 0800 	sub.w	r8, r8, r0
 8015054:	e7e9      	b.n	801502a <__sflush_r+0xda>
 8015056:	bf00      	nop
 8015058:	20400001 	.word	0x20400001

0801505c <_fflush_r>:
 801505c:	b538      	push	{r3, r4, r5, lr}
 801505e:	690b      	ldr	r3, [r1, #16]
 8015060:	4605      	mov	r5, r0
 8015062:	460c      	mov	r4, r1
 8015064:	b913      	cbnz	r3, 801506c <_fflush_r+0x10>
 8015066:	2500      	movs	r5, #0
 8015068:	4628      	mov	r0, r5
 801506a:	bd38      	pop	{r3, r4, r5, pc}
 801506c:	b118      	cbz	r0, 8015076 <_fflush_r+0x1a>
 801506e:	6983      	ldr	r3, [r0, #24]
 8015070:	b90b      	cbnz	r3, 8015076 <_fflush_r+0x1a>
 8015072:	f000 f887 	bl	8015184 <__sinit>
 8015076:	4b14      	ldr	r3, [pc, #80]	; (80150c8 <_fflush_r+0x6c>)
 8015078:	429c      	cmp	r4, r3
 801507a:	d11b      	bne.n	80150b4 <_fflush_r+0x58>
 801507c:	686c      	ldr	r4, [r5, #4]
 801507e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d0ef      	beq.n	8015066 <_fflush_r+0xa>
 8015086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015088:	07d0      	lsls	r0, r2, #31
 801508a:	d404      	bmi.n	8015096 <_fflush_r+0x3a>
 801508c:	0599      	lsls	r1, r3, #22
 801508e:	d402      	bmi.n	8015096 <_fflush_r+0x3a>
 8015090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015092:	f000 f915 	bl	80152c0 <__retarget_lock_acquire_recursive>
 8015096:	4628      	mov	r0, r5
 8015098:	4621      	mov	r1, r4
 801509a:	f7ff ff59 	bl	8014f50 <__sflush_r>
 801509e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150a0:	07da      	lsls	r2, r3, #31
 80150a2:	4605      	mov	r5, r0
 80150a4:	d4e0      	bmi.n	8015068 <_fflush_r+0xc>
 80150a6:	89a3      	ldrh	r3, [r4, #12]
 80150a8:	059b      	lsls	r3, r3, #22
 80150aa:	d4dd      	bmi.n	8015068 <_fflush_r+0xc>
 80150ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ae:	f000 f908 	bl	80152c2 <__retarget_lock_release_recursive>
 80150b2:	e7d9      	b.n	8015068 <_fflush_r+0xc>
 80150b4:	4b05      	ldr	r3, [pc, #20]	; (80150cc <_fflush_r+0x70>)
 80150b6:	429c      	cmp	r4, r3
 80150b8:	d101      	bne.n	80150be <_fflush_r+0x62>
 80150ba:	68ac      	ldr	r4, [r5, #8]
 80150bc:	e7df      	b.n	801507e <_fflush_r+0x22>
 80150be:	4b04      	ldr	r3, [pc, #16]	; (80150d0 <_fflush_r+0x74>)
 80150c0:	429c      	cmp	r4, r3
 80150c2:	bf08      	it	eq
 80150c4:	68ec      	ldreq	r4, [r5, #12]
 80150c6:	e7da      	b.n	801507e <_fflush_r+0x22>
 80150c8:	08029588 	.word	0x08029588
 80150cc:	080295a8 	.word	0x080295a8
 80150d0:	08029568 	.word	0x08029568

080150d4 <std>:
 80150d4:	2300      	movs	r3, #0
 80150d6:	b510      	push	{r4, lr}
 80150d8:	4604      	mov	r4, r0
 80150da:	e9c0 3300 	strd	r3, r3, [r0]
 80150de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150e2:	6083      	str	r3, [r0, #8]
 80150e4:	8181      	strh	r1, [r0, #12]
 80150e6:	6643      	str	r3, [r0, #100]	; 0x64
 80150e8:	81c2      	strh	r2, [r0, #14]
 80150ea:	6183      	str	r3, [r0, #24]
 80150ec:	4619      	mov	r1, r3
 80150ee:	2208      	movs	r2, #8
 80150f0:	305c      	adds	r0, #92	; 0x5c
 80150f2:	f7fb fdf1 	bl	8010cd8 <memset>
 80150f6:	4b05      	ldr	r3, [pc, #20]	; (801510c <std+0x38>)
 80150f8:	6263      	str	r3, [r4, #36]	; 0x24
 80150fa:	4b05      	ldr	r3, [pc, #20]	; (8015110 <std+0x3c>)
 80150fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80150fe:	4b05      	ldr	r3, [pc, #20]	; (8015114 <std+0x40>)
 8015100:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015102:	4b05      	ldr	r3, [pc, #20]	; (8015118 <std+0x44>)
 8015104:	6224      	str	r4, [r4, #32]
 8015106:	6323      	str	r3, [r4, #48]	; 0x30
 8015108:	bd10      	pop	{r4, pc}
 801510a:	bf00      	nop
 801510c:	080154ad 	.word	0x080154ad
 8015110:	080154cf 	.word	0x080154cf
 8015114:	08015507 	.word	0x08015507
 8015118:	0801552b 	.word	0x0801552b

0801511c <_cleanup_r>:
 801511c:	4901      	ldr	r1, [pc, #4]	; (8015124 <_cleanup_r+0x8>)
 801511e:	f000 b8af 	b.w	8015280 <_fwalk_reent>
 8015122:	bf00      	nop
 8015124:	0801505d 	.word	0x0801505d

08015128 <__sfmoreglue>:
 8015128:	b570      	push	{r4, r5, r6, lr}
 801512a:	1e4a      	subs	r2, r1, #1
 801512c:	2568      	movs	r5, #104	; 0x68
 801512e:	4355      	muls	r5, r2
 8015130:	460e      	mov	r6, r1
 8015132:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015136:	f7ff fafb 	bl	8014730 <_malloc_r>
 801513a:	4604      	mov	r4, r0
 801513c:	b140      	cbz	r0, 8015150 <__sfmoreglue+0x28>
 801513e:	2100      	movs	r1, #0
 8015140:	e9c0 1600 	strd	r1, r6, [r0]
 8015144:	300c      	adds	r0, #12
 8015146:	60a0      	str	r0, [r4, #8]
 8015148:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801514c:	f7fb fdc4 	bl	8010cd8 <memset>
 8015150:	4620      	mov	r0, r4
 8015152:	bd70      	pop	{r4, r5, r6, pc}

08015154 <__sfp_lock_acquire>:
 8015154:	4801      	ldr	r0, [pc, #4]	; (801515c <__sfp_lock_acquire+0x8>)
 8015156:	f000 b8b3 	b.w	80152c0 <__retarget_lock_acquire_recursive>
 801515a:	bf00      	nop
 801515c:	20000c7c 	.word	0x20000c7c

08015160 <__sfp_lock_release>:
 8015160:	4801      	ldr	r0, [pc, #4]	; (8015168 <__sfp_lock_release+0x8>)
 8015162:	f000 b8ae 	b.w	80152c2 <__retarget_lock_release_recursive>
 8015166:	bf00      	nop
 8015168:	20000c7c 	.word	0x20000c7c

0801516c <__sinit_lock_acquire>:
 801516c:	4801      	ldr	r0, [pc, #4]	; (8015174 <__sinit_lock_acquire+0x8>)
 801516e:	f000 b8a7 	b.w	80152c0 <__retarget_lock_acquire_recursive>
 8015172:	bf00      	nop
 8015174:	20000c77 	.word	0x20000c77

08015178 <__sinit_lock_release>:
 8015178:	4801      	ldr	r0, [pc, #4]	; (8015180 <__sinit_lock_release+0x8>)
 801517a:	f000 b8a2 	b.w	80152c2 <__retarget_lock_release_recursive>
 801517e:	bf00      	nop
 8015180:	20000c77 	.word	0x20000c77

08015184 <__sinit>:
 8015184:	b510      	push	{r4, lr}
 8015186:	4604      	mov	r4, r0
 8015188:	f7ff fff0 	bl	801516c <__sinit_lock_acquire>
 801518c:	69a3      	ldr	r3, [r4, #24]
 801518e:	b11b      	cbz	r3, 8015198 <__sinit+0x14>
 8015190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015194:	f7ff bff0 	b.w	8015178 <__sinit_lock_release>
 8015198:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801519c:	6523      	str	r3, [r4, #80]	; 0x50
 801519e:	4b13      	ldr	r3, [pc, #76]	; (80151ec <__sinit+0x68>)
 80151a0:	4a13      	ldr	r2, [pc, #76]	; (80151f0 <__sinit+0x6c>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80151a6:	42a3      	cmp	r3, r4
 80151a8:	bf04      	itt	eq
 80151aa:	2301      	moveq	r3, #1
 80151ac:	61a3      	streq	r3, [r4, #24]
 80151ae:	4620      	mov	r0, r4
 80151b0:	f000 f820 	bl	80151f4 <__sfp>
 80151b4:	6060      	str	r0, [r4, #4]
 80151b6:	4620      	mov	r0, r4
 80151b8:	f000 f81c 	bl	80151f4 <__sfp>
 80151bc:	60a0      	str	r0, [r4, #8]
 80151be:	4620      	mov	r0, r4
 80151c0:	f000 f818 	bl	80151f4 <__sfp>
 80151c4:	2200      	movs	r2, #0
 80151c6:	60e0      	str	r0, [r4, #12]
 80151c8:	2104      	movs	r1, #4
 80151ca:	6860      	ldr	r0, [r4, #4]
 80151cc:	f7ff ff82 	bl	80150d4 <std>
 80151d0:	68a0      	ldr	r0, [r4, #8]
 80151d2:	2201      	movs	r2, #1
 80151d4:	2109      	movs	r1, #9
 80151d6:	f7ff ff7d 	bl	80150d4 <std>
 80151da:	68e0      	ldr	r0, [r4, #12]
 80151dc:	2202      	movs	r2, #2
 80151de:	2112      	movs	r1, #18
 80151e0:	f7ff ff78 	bl	80150d4 <std>
 80151e4:	2301      	movs	r3, #1
 80151e6:	61a3      	str	r3, [r4, #24]
 80151e8:	e7d2      	b.n	8015190 <__sinit+0xc>
 80151ea:	bf00      	nop
 80151ec:	080290b4 	.word	0x080290b4
 80151f0:	0801511d 	.word	0x0801511d

080151f4 <__sfp>:
 80151f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151f6:	4607      	mov	r7, r0
 80151f8:	f7ff ffac 	bl	8015154 <__sfp_lock_acquire>
 80151fc:	4b1e      	ldr	r3, [pc, #120]	; (8015278 <__sfp+0x84>)
 80151fe:	681e      	ldr	r6, [r3, #0]
 8015200:	69b3      	ldr	r3, [r6, #24]
 8015202:	b913      	cbnz	r3, 801520a <__sfp+0x16>
 8015204:	4630      	mov	r0, r6
 8015206:	f7ff ffbd 	bl	8015184 <__sinit>
 801520a:	3648      	adds	r6, #72	; 0x48
 801520c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015210:	3b01      	subs	r3, #1
 8015212:	d503      	bpl.n	801521c <__sfp+0x28>
 8015214:	6833      	ldr	r3, [r6, #0]
 8015216:	b30b      	cbz	r3, 801525c <__sfp+0x68>
 8015218:	6836      	ldr	r6, [r6, #0]
 801521a:	e7f7      	b.n	801520c <__sfp+0x18>
 801521c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015220:	b9d5      	cbnz	r5, 8015258 <__sfp+0x64>
 8015222:	4b16      	ldr	r3, [pc, #88]	; (801527c <__sfp+0x88>)
 8015224:	60e3      	str	r3, [r4, #12]
 8015226:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801522a:	6665      	str	r5, [r4, #100]	; 0x64
 801522c:	f000 f847 	bl	80152be <__retarget_lock_init_recursive>
 8015230:	f7ff ff96 	bl	8015160 <__sfp_lock_release>
 8015234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801523c:	6025      	str	r5, [r4, #0]
 801523e:	61a5      	str	r5, [r4, #24]
 8015240:	2208      	movs	r2, #8
 8015242:	4629      	mov	r1, r5
 8015244:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015248:	f7fb fd46 	bl	8010cd8 <memset>
 801524c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015250:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015254:	4620      	mov	r0, r4
 8015256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015258:	3468      	adds	r4, #104	; 0x68
 801525a:	e7d9      	b.n	8015210 <__sfp+0x1c>
 801525c:	2104      	movs	r1, #4
 801525e:	4638      	mov	r0, r7
 8015260:	f7ff ff62 	bl	8015128 <__sfmoreglue>
 8015264:	4604      	mov	r4, r0
 8015266:	6030      	str	r0, [r6, #0]
 8015268:	2800      	cmp	r0, #0
 801526a:	d1d5      	bne.n	8015218 <__sfp+0x24>
 801526c:	f7ff ff78 	bl	8015160 <__sfp_lock_release>
 8015270:	230c      	movs	r3, #12
 8015272:	603b      	str	r3, [r7, #0]
 8015274:	e7ee      	b.n	8015254 <__sfp+0x60>
 8015276:	bf00      	nop
 8015278:	080290b4 	.word	0x080290b4
 801527c:	ffff0001 	.word	0xffff0001

08015280 <_fwalk_reent>:
 8015280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015284:	4606      	mov	r6, r0
 8015286:	4688      	mov	r8, r1
 8015288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801528c:	2700      	movs	r7, #0
 801528e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015292:	f1b9 0901 	subs.w	r9, r9, #1
 8015296:	d505      	bpl.n	80152a4 <_fwalk_reent+0x24>
 8015298:	6824      	ldr	r4, [r4, #0]
 801529a:	2c00      	cmp	r4, #0
 801529c:	d1f7      	bne.n	801528e <_fwalk_reent+0xe>
 801529e:	4638      	mov	r0, r7
 80152a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152a4:	89ab      	ldrh	r3, [r5, #12]
 80152a6:	2b01      	cmp	r3, #1
 80152a8:	d907      	bls.n	80152ba <_fwalk_reent+0x3a>
 80152aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152ae:	3301      	adds	r3, #1
 80152b0:	d003      	beq.n	80152ba <_fwalk_reent+0x3a>
 80152b2:	4629      	mov	r1, r5
 80152b4:	4630      	mov	r0, r6
 80152b6:	47c0      	blx	r8
 80152b8:	4307      	orrs	r7, r0
 80152ba:	3568      	adds	r5, #104	; 0x68
 80152bc:	e7e9      	b.n	8015292 <_fwalk_reent+0x12>

080152be <__retarget_lock_init_recursive>:
 80152be:	4770      	bx	lr

080152c0 <__retarget_lock_acquire_recursive>:
 80152c0:	4770      	bx	lr

080152c2 <__retarget_lock_release_recursive>:
 80152c2:	4770      	bx	lr

080152c4 <__swhatbuf_r>:
 80152c4:	b570      	push	{r4, r5, r6, lr}
 80152c6:	460e      	mov	r6, r1
 80152c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152cc:	2900      	cmp	r1, #0
 80152ce:	b096      	sub	sp, #88	; 0x58
 80152d0:	4614      	mov	r4, r2
 80152d2:	461d      	mov	r5, r3
 80152d4:	da07      	bge.n	80152e6 <__swhatbuf_r+0x22>
 80152d6:	2300      	movs	r3, #0
 80152d8:	602b      	str	r3, [r5, #0]
 80152da:	89b3      	ldrh	r3, [r6, #12]
 80152dc:	061a      	lsls	r2, r3, #24
 80152de:	d410      	bmi.n	8015302 <__swhatbuf_r+0x3e>
 80152e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152e4:	e00e      	b.n	8015304 <__swhatbuf_r+0x40>
 80152e6:	466a      	mov	r2, sp
 80152e8:	f000 f946 	bl	8015578 <_fstat_r>
 80152ec:	2800      	cmp	r0, #0
 80152ee:	dbf2      	blt.n	80152d6 <__swhatbuf_r+0x12>
 80152f0:	9a01      	ldr	r2, [sp, #4]
 80152f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80152f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80152fa:	425a      	negs	r2, r3
 80152fc:	415a      	adcs	r2, r3
 80152fe:	602a      	str	r2, [r5, #0]
 8015300:	e7ee      	b.n	80152e0 <__swhatbuf_r+0x1c>
 8015302:	2340      	movs	r3, #64	; 0x40
 8015304:	2000      	movs	r0, #0
 8015306:	6023      	str	r3, [r4, #0]
 8015308:	b016      	add	sp, #88	; 0x58
 801530a:	bd70      	pop	{r4, r5, r6, pc}

0801530c <__smakebuf_r>:
 801530c:	898b      	ldrh	r3, [r1, #12]
 801530e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015310:	079d      	lsls	r5, r3, #30
 8015312:	4606      	mov	r6, r0
 8015314:	460c      	mov	r4, r1
 8015316:	d507      	bpl.n	8015328 <__smakebuf_r+0x1c>
 8015318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801531c:	6023      	str	r3, [r4, #0]
 801531e:	6123      	str	r3, [r4, #16]
 8015320:	2301      	movs	r3, #1
 8015322:	6163      	str	r3, [r4, #20]
 8015324:	b002      	add	sp, #8
 8015326:	bd70      	pop	{r4, r5, r6, pc}
 8015328:	ab01      	add	r3, sp, #4
 801532a:	466a      	mov	r2, sp
 801532c:	f7ff ffca 	bl	80152c4 <__swhatbuf_r>
 8015330:	9900      	ldr	r1, [sp, #0]
 8015332:	4605      	mov	r5, r0
 8015334:	4630      	mov	r0, r6
 8015336:	f7ff f9fb 	bl	8014730 <_malloc_r>
 801533a:	b948      	cbnz	r0, 8015350 <__smakebuf_r+0x44>
 801533c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015340:	059a      	lsls	r2, r3, #22
 8015342:	d4ef      	bmi.n	8015324 <__smakebuf_r+0x18>
 8015344:	f023 0303 	bic.w	r3, r3, #3
 8015348:	f043 0302 	orr.w	r3, r3, #2
 801534c:	81a3      	strh	r3, [r4, #12]
 801534e:	e7e3      	b.n	8015318 <__smakebuf_r+0xc>
 8015350:	4b0d      	ldr	r3, [pc, #52]	; (8015388 <__smakebuf_r+0x7c>)
 8015352:	62b3      	str	r3, [r6, #40]	; 0x28
 8015354:	89a3      	ldrh	r3, [r4, #12]
 8015356:	6020      	str	r0, [r4, #0]
 8015358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801535c:	81a3      	strh	r3, [r4, #12]
 801535e:	9b00      	ldr	r3, [sp, #0]
 8015360:	6163      	str	r3, [r4, #20]
 8015362:	9b01      	ldr	r3, [sp, #4]
 8015364:	6120      	str	r0, [r4, #16]
 8015366:	b15b      	cbz	r3, 8015380 <__smakebuf_r+0x74>
 8015368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801536c:	4630      	mov	r0, r6
 801536e:	f000 f915 	bl	801559c <_isatty_r>
 8015372:	b128      	cbz	r0, 8015380 <__smakebuf_r+0x74>
 8015374:	89a3      	ldrh	r3, [r4, #12]
 8015376:	f023 0303 	bic.w	r3, r3, #3
 801537a:	f043 0301 	orr.w	r3, r3, #1
 801537e:	81a3      	strh	r3, [r4, #12]
 8015380:	89a0      	ldrh	r0, [r4, #12]
 8015382:	4305      	orrs	r5, r0
 8015384:	81a5      	strh	r5, [r4, #12]
 8015386:	e7cd      	b.n	8015324 <__smakebuf_r+0x18>
 8015388:	0801511d 	.word	0x0801511d

0801538c <memmove>:
 801538c:	4288      	cmp	r0, r1
 801538e:	b510      	push	{r4, lr}
 8015390:	eb01 0402 	add.w	r4, r1, r2
 8015394:	d902      	bls.n	801539c <memmove+0x10>
 8015396:	4284      	cmp	r4, r0
 8015398:	4623      	mov	r3, r4
 801539a:	d807      	bhi.n	80153ac <memmove+0x20>
 801539c:	1e43      	subs	r3, r0, #1
 801539e:	42a1      	cmp	r1, r4
 80153a0:	d008      	beq.n	80153b4 <memmove+0x28>
 80153a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80153aa:	e7f8      	b.n	801539e <memmove+0x12>
 80153ac:	4402      	add	r2, r0
 80153ae:	4601      	mov	r1, r0
 80153b0:	428a      	cmp	r2, r1
 80153b2:	d100      	bne.n	80153b6 <memmove+0x2a>
 80153b4:	bd10      	pop	{r4, pc}
 80153b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80153ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80153be:	e7f7      	b.n	80153b0 <memmove+0x24>

080153c0 <__malloc_lock>:
 80153c0:	4801      	ldr	r0, [pc, #4]	; (80153c8 <__malloc_lock+0x8>)
 80153c2:	f7ff bf7d 	b.w	80152c0 <__retarget_lock_acquire_recursive>
 80153c6:	bf00      	nop
 80153c8:	20000c78 	.word	0x20000c78

080153cc <__malloc_unlock>:
 80153cc:	4801      	ldr	r0, [pc, #4]	; (80153d4 <__malloc_unlock+0x8>)
 80153ce:	f7ff bf78 	b.w	80152c2 <__retarget_lock_release_recursive>
 80153d2:	bf00      	nop
 80153d4:	20000c78 	.word	0x20000c78

080153d8 <_realloc_r>:
 80153d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153da:	4607      	mov	r7, r0
 80153dc:	4614      	mov	r4, r2
 80153de:	460e      	mov	r6, r1
 80153e0:	b921      	cbnz	r1, 80153ec <_realloc_r+0x14>
 80153e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80153e6:	4611      	mov	r1, r2
 80153e8:	f7ff b9a2 	b.w	8014730 <_malloc_r>
 80153ec:	b922      	cbnz	r2, 80153f8 <_realloc_r+0x20>
 80153ee:	f7ff f94f 	bl	8014690 <_free_r>
 80153f2:	4625      	mov	r5, r4
 80153f4:	4628      	mov	r0, r5
 80153f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153f8:	f000 f8f2 	bl	80155e0 <_malloc_usable_size_r>
 80153fc:	42a0      	cmp	r0, r4
 80153fe:	d20f      	bcs.n	8015420 <_realloc_r+0x48>
 8015400:	4621      	mov	r1, r4
 8015402:	4638      	mov	r0, r7
 8015404:	f7ff f994 	bl	8014730 <_malloc_r>
 8015408:	4605      	mov	r5, r0
 801540a:	2800      	cmp	r0, #0
 801540c:	d0f2      	beq.n	80153f4 <_realloc_r+0x1c>
 801540e:	4631      	mov	r1, r6
 8015410:	4622      	mov	r2, r4
 8015412:	f7fe fc65 	bl	8013ce0 <memcpy>
 8015416:	4631      	mov	r1, r6
 8015418:	4638      	mov	r0, r7
 801541a:	f7ff f939 	bl	8014690 <_free_r>
 801541e:	e7e9      	b.n	80153f4 <_realloc_r+0x1c>
 8015420:	4635      	mov	r5, r6
 8015422:	e7e7      	b.n	80153f4 <_realloc_r+0x1c>

08015424 <_raise_r>:
 8015424:	291f      	cmp	r1, #31
 8015426:	b538      	push	{r3, r4, r5, lr}
 8015428:	4604      	mov	r4, r0
 801542a:	460d      	mov	r5, r1
 801542c:	d904      	bls.n	8015438 <_raise_r+0x14>
 801542e:	2316      	movs	r3, #22
 8015430:	6003      	str	r3, [r0, #0]
 8015432:	f04f 30ff 	mov.w	r0, #4294967295
 8015436:	bd38      	pop	{r3, r4, r5, pc}
 8015438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801543a:	b112      	cbz	r2, 8015442 <_raise_r+0x1e>
 801543c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015440:	b94b      	cbnz	r3, 8015456 <_raise_r+0x32>
 8015442:	4620      	mov	r0, r4
 8015444:	f000 f830 	bl	80154a8 <_getpid_r>
 8015448:	462a      	mov	r2, r5
 801544a:	4601      	mov	r1, r0
 801544c:	4620      	mov	r0, r4
 801544e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015452:	f000 b817 	b.w	8015484 <_kill_r>
 8015456:	2b01      	cmp	r3, #1
 8015458:	d00a      	beq.n	8015470 <_raise_r+0x4c>
 801545a:	1c59      	adds	r1, r3, #1
 801545c:	d103      	bne.n	8015466 <_raise_r+0x42>
 801545e:	2316      	movs	r3, #22
 8015460:	6003      	str	r3, [r0, #0]
 8015462:	2001      	movs	r0, #1
 8015464:	e7e7      	b.n	8015436 <_raise_r+0x12>
 8015466:	2400      	movs	r4, #0
 8015468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801546c:	4628      	mov	r0, r5
 801546e:	4798      	blx	r3
 8015470:	2000      	movs	r0, #0
 8015472:	e7e0      	b.n	8015436 <_raise_r+0x12>

08015474 <raise>:
 8015474:	4b02      	ldr	r3, [pc, #8]	; (8015480 <raise+0xc>)
 8015476:	4601      	mov	r1, r0
 8015478:	6818      	ldr	r0, [r3, #0]
 801547a:	f7ff bfd3 	b.w	8015424 <_raise_r>
 801547e:	bf00      	nop
 8015480:	20000040 	.word	0x20000040

08015484 <_kill_r>:
 8015484:	b538      	push	{r3, r4, r5, lr}
 8015486:	4d07      	ldr	r5, [pc, #28]	; (80154a4 <_kill_r+0x20>)
 8015488:	2300      	movs	r3, #0
 801548a:	4604      	mov	r4, r0
 801548c:	4608      	mov	r0, r1
 801548e:	4611      	mov	r1, r2
 8015490:	602b      	str	r3, [r5, #0]
 8015492:	f7f3 ffdb 	bl	800944c <_kill>
 8015496:	1c43      	adds	r3, r0, #1
 8015498:	d102      	bne.n	80154a0 <_kill_r+0x1c>
 801549a:	682b      	ldr	r3, [r5, #0]
 801549c:	b103      	cbz	r3, 80154a0 <_kill_r+0x1c>
 801549e:	6023      	str	r3, [r4, #0]
 80154a0:	bd38      	pop	{r3, r4, r5, pc}
 80154a2:	bf00      	nop
 80154a4:	20000c80 	.word	0x20000c80

080154a8 <_getpid_r>:
 80154a8:	f7f3 bfc8 	b.w	800943c <_getpid>

080154ac <__sread>:
 80154ac:	b510      	push	{r4, lr}
 80154ae:	460c      	mov	r4, r1
 80154b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b4:	f000 f89c 	bl	80155f0 <_read_r>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	bfab      	itete	ge
 80154bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80154be:	89a3      	ldrhlt	r3, [r4, #12]
 80154c0:	181b      	addge	r3, r3, r0
 80154c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80154c6:	bfac      	ite	ge
 80154c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80154ca:	81a3      	strhlt	r3, [r4, #12]
 80154cc:	bd10      	pop	{r4, pc}

080154ce <__swrite>:
 80154ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154d2:	461f      	mov	r7, r3
 80154d4:	898b      	ldrh	r3, [r1, #12]
 80154d6:	05db      	lsls	r3, r3, #23
 80154d8:	4605      	mov	r5, r0
 80154da:	460c      	mov	r4, r1
 80154dc:	4616      	mov	r6, r2
 80154de:	d505      	bpl.n	80154ec <__swrite+0x1e>
 80154e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154e4:	2302      	movs	r3, #2
 80154e6:	2200      	movs	r2, #0
 80154e8:	f000 f868 	bl	80155bc <_lseek_r>
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80154f6:	81a3      	strh	r3, [r4, #12]
 80154f8:	4632      	mov	r2, r6
 80154fa:	463b      	mov	r3, r7
 80154fc:	4628      	mov	r0, r5
 80154fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015502:	f000 b817 	b.w	8015534 <_write_r>

08015506 <__sseek>:
 8015506:	b510      	push	{r4, lr}
 8015508:	460c      	mov	r4, r1
 801550a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801550e:	f000 f855 	bl	80155bc <_lseek_r>
 8015512:	1c43      	adds	r3, r0, #1
 8015514:	89a3      	ldrh	r3, [r4, #12]
 8015516:	bf15      	itete	ne
 8015518:	6560      	strne	r0, [r4, #84]	; 0x54
 801551a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801551e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015522:	81a3      	strheq	r3, [r4, #12]
 8015524:	bf18      	it	ne
 8015526:	81a3      	strhne	r3, [r4, #12]
 8015528:	bd10      	pop	{r4, pc}

0801552a <__sclose>:
 801552a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801552e:	f000 b813 	b.w	8015558 <_close_r>
	...

08015534 <_write_r>:
 8015534:	b538      	push	{r3, r4, r5, lr}
 8015536:	4d07      	ldr	r5, [pc, #28]	; (8015554 <_write_r+0x20>)
 8015538:	4604      	mov	r4, r0
 801553a:	4608      	mov	r0, r1
 801553c:	4611      	mov	r1, r2
 801553e:	2200      	movs	r2, #0
 8015540:	602a      	str	r2, [r5, #0]
 8015542:	461a      	mov	r2, r3
 8015544:	f7f3 ffb9 	bl	80094ba <_write>
 8015548:	1c43      	adds	r3, r0, #1
 801554a:	d102      	bne.n	8015552 <_write_r+0x1e>
 801554c:	682b      	ldr	r3, [r5, #0]
 801554e:	b103      	cbz	r3, 8015552 <_write_r+0x1e>
 8015550:	6023      	str	r3, [r4, #0]
 8015552:	bd38      	pop	{r3, r4, r5, pc}
 8015554:	20000c80 	.word	0x20000c80

08015558 <_close_r>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	4d06      	ldr	r5, [pc, #24]	; (8015574 <_close_r+0x1c>)
 801555c:	2300      	movs	r3, #0
 801555e:	4604      	mov	r4, r0
 8015560:	4608      	mov	r0, r1
 8015562:	602b      	str	r3, [r5, #0]
 8015564:	f7f3 ffc5 	bl	80094f2 <_close>
 8015568:	1c43      	adds	r3, r0, #1
 801556a:	d102      	bne.n	8015572 <_close_r+0x1a>
 801556c:	682b      	ldr	r3, [r5, #0]
 801556e:	b103      	cbz	r3, 8015572 <_close_r+0x1a>
 8015570:	6023      	str	r3, [r4, #0]
 8015572:	bd38      	pop	{r3, r4, r5, pc}
 8015574:	20000c80 	.word	0x20000c80

08015578 <_fstat_r>:
 8015578:	b538      	push	{r3, r4, r5, lr}
 801557a:	4d07      	ldr	r5, [pc, #28]	; (8015598 <_fstat_r+0x20>)
 801557c:	2300      	movs	r3, #0
 801557e:	4604      	mov	r4, r0
 8015580:	4608      	mov	r0, r1
 8015582:	4611      	mov	r1, r2
 8015584:	602b      	str	r3, [r5, #0]
 8015586:	f7f3 ffc0 	bl	800950a <_fstat>
 801558a:	1c43      	adds	r3, r0, #1
 801558c:	d102      	bne.n	8015594 <_fstat_r+0x1c>
 801558e:	682b      	ldr	r3, [r5, #0]
 8015590:	b103      	cbz	r3, 8015594 <_fstat_r+0x1c>
 8015592:	6023      	str	r3, [r4, #0]
 8015594:	bd38      	pop	{r3, r4, r5, pc}
 8015596:	bf00      	nop
 8015598:	20000c80 	.word	0x20000c80

0801559c <_isatty_r>:
 801559c:	b538      	push	{r3, r4, r5, lr}
 801559e:	4d06      	ldr	r5, [pc, #24]	; (80155b8 <_isatty_r+0x1c>)
 80155a0:	2300      	movs	r3, #0
 80155a2:	4604      	mov	r4, r0
 80155a4:	4608      	mov	r0, r1
 80155a6:	602b      	str	r3, [r5, #0]
 80155a8:	f7f3 ffbf 	bl	800952a <_isatty>
 80155ac:	1c43      	adds	r3, r0, #1
 80155ae:	d102      	bne.n	80155b6 <_isatty_r+0x1a>
 80155b0:	682b      	ldr	r3, [r5, #0]
 80155b2:	b103      	cbz	r3, 80155b6 <_isatty_r+0x1a>
 80155b4:	6023      	str	r3, [r4, #0]
 80155b6:	bd38      	pop	{r3, r4, r5, pc}
 80155b8:	20000c80 	.word	0x20000c80

080155bc <_lseek_r>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	4d07      	ldr	r5, [pc, #28]	; (80155dc <_lseek_r+0x20>)
 80155c0:	4604      	mov	r4, r0
 80155c2:	4608      	mov	r0, r1
 80155c4:	4611      	mov	r1, r2
 80155c6:	2200      	movs	r2, #0
 80155c8:	602a      	str	r2, [r5, #0]
 80155ca:	461a      	mov	r2, r3
 80155cc:	f7f3 ffb8 	bl	8009540 <_lseek>
 80155d0:	1c43      	adds	r3, r0, #1
 80155d2:	d102      	bne.n	80155da <_lseek_r+0x1e>
 80155d4:	682b      	ldr	r3, [r5, #0]
 80155d6:	b103      	cbz	r3, 80155da <_lseek_r+0x1e>
 80155d8:	6023      	str	r3, [r4, #0]
 80155da:	bd38      	pop	{r3, r4, r5, pc}
 80155dc:	20000c80 	.word	0x20000c80

080155e0 <_malloc_usable_size_r>:
 80155e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155e4:	1f18      	subs	r0, r3, #4
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	bfbc      	itt	lt
 80155ea:	580b      	ldrlt	r3, [r1, r0]
 80155ec:	18c0      	addlt	r0, r0, r3
 80155ee:	4770      	bx	lr

080155f0 <_read_r>:
 80155f0:	b538      	push	{r3, r4, r5, lr}
 80155f2:	4d07      	ldr	r5, [pc, #28]	; (8015610 <_read_r+0x20>)
 80155f4:	4604      	mov	r4, r0
 80155f6:	4608      	mov	r0, r1
 80155f8:	4611      	mov	r1, r2
 80155fa:	2200      	movs	r2, #0
 80155fc:	602a      	str	r2, [r5, #0]
 80155fe:	461a      	mov	r2, r3
 8015600:	f7f3 ff3e 	bl	8009480 <_read>
 8015604:	1c43      	adds	r3, r0, #1
 8015606:	d102      	bne.n	801560e <_read_r+0x1e>
 8015608:	682b      	ldr	r3, [r5, #0]
 801560a:	b103      	cbz	r3, 801560e <_read_r+0x1e>
 801560c:	6023      	str	r3, [r4, #0]
 801560e:	bd38      	pop	{r3, r4, r5, pc}
 8015610:	20000c80 	.word	0x20000c80

08015614 <_init>:
 8015614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015616:	bf00      	nop
 8015618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801561a:	bc08      	pop	{r3}
 801561c:	469e      	mov	lr, r3
 801561e:	4770      	bx	lr

08015620 <_fini>:
 8015620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015622:	bf00      	nop
 8015624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015626:	bc08      	pop	{r3}
 8015628:	469e      	mov	lr, r3
 801562a:	4770      	bx	lr
