
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f58  08015518  08015518  00025518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029470  08029470  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08029470  08029470  00039470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029478  08029478  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029478  08029478  00039478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802947c  0802947c  0003947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08029480  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000214  08029694  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  08029694  00040c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023dfc  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b45  00000000  00000000  00064040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00068b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  0006a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b684  00000000  00000000  0006bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d12  00000000  00000000  000873fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994f8  00000000  00000000  000ad10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f8c  00000000  00000000  0014665c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080154fc 	.word	0x080154fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	080154fc 	.word	0x080154fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002c0 	.word	0x200002c0

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002c0 	.word	0x200002c0

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200002c0 	.word	0x200002c0

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002c0 	.word	0x200002c0

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002c0 	.word	0x200002c0

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002c0 	.word	0x200002c0

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f008 f97e 	bl	8009f30 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002c4 	.word	0x200002c4

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f009 f8af 	bl	800ae10 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f009 f8a9 	bl	800ae10 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f009 f89e 	bl	800ae10 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f009 f88b 	bl	800ae10 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f009 f885 	bl	800ae10 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f009 f879 	bl	800ae10 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f009 f86f 	bl	800ae10 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f008 ff74 	bl	800ae10 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f008 ff6e 	bl	800ae10 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f008 ff37 	bl	800ae10 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	200002c4 	.word	0x200002c4

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f008 ff17 	bl	800ae10 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f008 ff0e 	bl	800ae10 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002c4 	.word	0x200002c4
 8002054:	08015e14 	.word	0x08015e14
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f008 fed1 	bl	800ae10 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00c fce8 	bl	800ea52 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f008 fec1 	bl	800ae10 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002c8 	.word	0x200002c8
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002f1 	.word	0x200002f1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f007 fe1e 	bl	8009f18 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f008 fd55 	bl	800ade0 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f007 fde9 	bl	8009f18 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f007 fde3 	bl	8009f18 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f008 fd17 	bl	800ade0 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f007 fdab 	bl	8009f18 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 ff58 	bl	800a29c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f007 ff43 	bl	800a27e <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f007 ff12 	bl	800a22e <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002f1 	.word	0x200002f1
 8002420:	200002f4 	.word	0x200002f4
 8002424:	200002f0 	.word	0x200002f0
 8002428:	200002c8 	.word	0x200002c8
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f007 ff02 	bl	800a24a <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002f1 	.word	0x200002f1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f008 fcc9 	bl	800ae10 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f007 fd4b 	bl	8009f30 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002f1 	.word	0x200002f1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <MX_DMA_Init+0xa8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a26      	ldr	r2, [pc, #152]	; (800259c <MX_DMA_Init+0xa8>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <MX_DMA_Init+0xa8>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <MX_DMA_Init+0xa8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <MX_DMA_Init+0xa8>)
 8002520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_DMA_Init+0xa8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	200b      	movs	r0, #11
 8002538:	f007 fe5d 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800253c:	200b      	movs	r0, #11
 800253e:	f007 fe76 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	200c      	movs	r0, #12
 8002548:	f007 fe55 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800254c:	200c      	movs	r0, #12
 800254e:	f007 fe6e 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2010      	movs	r0, #16
 8002558:	f007 fe4d 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800255c:	2010      	movs	r0, #16
 800255e:	f007 fe66 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	2100      	movs	r1, #0
 8002566:	2011      	movs	r0, #17
 8002568:	f007 fe45 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800256c:	2011      	movs	r0, #17
 800256e:	f007 fe5e 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	203a      	movs	r0, #58	; 0x3a
 8002578:	f007 fe3d 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800257c:	203a      	movs	r0, #58	; 0x3a
 800257e:	f007 fe56 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2046      	movs	r0, #70	; 0x46
 8002588:	f007 fe35 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800258c:	2046      	movs	r0, #70	; 0x46
 800258e:	f007 fe4e 	bl	800a22e <HAL_NVIC_EnableIRQ>

}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <DS3231_Init+0x30>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f000 f8ca 	bl	8002748 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f000 f88e 	bl	80026d6 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 80025ba:	f000 f8e7 	bl	800278c <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 80025be:	f000 f8ad 	bl	800271c <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f000 f846 	bl	8002654 <DS3231_SetInterruptMode>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200002f8 	.word	0x200002f8

080025d4 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	460a      	mov	r2, r1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	733b      	strb	r3, [r7, #12]
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <DS3231_SetRegByte+0x38>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	f107 020c 	add.w	r2, r7, #12
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2302      	movs	r3, #2
 80025fc:	21d0      	movs	r1, #208	; 0xd0
 80025fe:	f008 fd97 	bl	800b130 <HAL_I2C_Master_Transmit>
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200002f8 	.word	0x200002f8

08002610 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af02      	add	r7, sp, #8
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <DS3231_GetRegByte+0x40>)
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	1dfa      	adds	r2, r7, #7
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2301      	movs	r3, #1
 8002628:	21d0      	movs	r1, #208	; 0xd0
 800262a:	f008 fd81 	bl	800b130 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <DS3231_GetRegByte+0x40>)
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f107 020f 	add.w	r2, r7, #15
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2301      	movs	r3, #1
 800263e:	21d0      	movs	r1, #208	; 0xd0
 8002640:	f008 fe74 	bl	800b32c <HAL_I2C_Master_Receive>
	return val;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200002f8 	.word	0x200002f8

08002654 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800265e:	200e      	movs	r0, #14
 8002660:	f7ff ffd6 	bl	8002610 <DS3231_GetRegByte>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	b25a      	sxtb	r2, r3
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	b25b      	sxtb	r3, r3
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	b25b      	sxtb	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b25b      	sxtb	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	200e      	movs	r0, #14
 8002688:	f7ff ffa4 	bl	80025d4 <DS3231_SetRegByte>
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800269e:	200e      	movs	r0, #14
 80026a0:	f7ff ffb6 	bl	8002610 <DS3231_GetRegByte>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b0:	b25b      	sxtb	r3, r3
 80026b2:	79fa      	ldrb	r2, [r7, #7]
 80026b4:	2a00      	cmp	r2, #0
 80026b6:	d102      	bne.n	80026be <DS3231_EnableOscillator+0x2a>
 80026b8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80026bc:	e000      	b.n	80026c0 <DS3231_EnableOscillator+0x2c>
 80026be:	2200      	movs	r2, #0
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	200e      	movs	r0, #14
 80026ca:	f7ff ff83 	bl	80025d4 <DS3231_SetRegByte>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026e0:	200e      	movs	r0, #14
 80026e2:	f7ff ff95 	bl	8002610 <DS3231_GetRegByte>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	b25a      	sxtb	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	b25b      	sxtb	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	200e      	movs	r0, #14
 800270a:	f7ff ff63 	bl	80025d4 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff ffa0 	bl	8002654 <DS3231_SetInterruptMode>
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002722:	200f      	movs	r0, #15
 8002724:	f7ff ff74 	bl	8002610 <DS3231_GetRegByte>
 8002728:	4603      	mov	r3, r0
 800272a:	f023 0302 	bic.w	r3, r3, #2
 800272e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f023 0302 	bic.w	r3, r3, #2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4619      	mov	r1, r3
 800273a:	200f      	movs	r0, #15
 800273c:	f7ff ff4a 	bl	80025d4 <DS3231_SetRegByte>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002752:	200e      	movs	r0, #14
 8002754:	f7ff ff5c 	bl	8002610 <DS3231_GetRegByte>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 800275c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	b25a      	sxtb	r2, r3
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	b25b      	sxtb	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b25b      	sxtb	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	200e      	movs	r0, #14
 800277a:	f7ff ff2b 	bl	80025d4 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff ff68 	bl	8002654 <DS3231_SetInterruptMode>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002792:	200f      	movs	r0, #15
 8002794:	f7ff ff3c 	bl	8002610 <DS3231_GetRegByte>
 8002798:	4603      	mov	r3, r0
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	200f      	movs	r0, #15
 80027ac:	f7ff ff12 	bl	80025d4 <DS3231_SetRegByte>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 80027bc:	2003      	movs	r0, #3
 80027be:	f7ff ff27 	bl	8002610 <DS3231_GetRegByte>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f866 	bl	8002896 <DS3231_DecodeBCD>
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7ff ff1b 	bl	8002610 <DS3231_GetRegByte>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f85a 	bl	8002896 <DS3231_DecodeBCD>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff ff0f 	bl	8002610 <DS3231_GetRegByte>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f84e 	bl	8002896 <DS3231_DecodeBCD>
 80027fa:	4603      	mov	r3, r0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}

08002800 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f85b 	bl	80028c8 <DS3231_EncodeBCD>
 8002812:	4603      	mov	r3, r0
 8002814:	4619      	mov	r1, r3
 8002816:	2003      	movs	r0, #3
 8002818:	f7ff fedc 	bl	80025d4 <DS3231_SetRegByte>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f846 	bl	80028c8 <DS3231_EncodeBCD>
 800283c:	4603      	mov	r3, r0
 800283e:	4619      	mov	r1, r3
 8002840:	2002      	movs	r0, #2
 8002842:	f7ff fec7 	bl	80025d4 <DS3231_SetRegByte>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f834 	bl	80028c8 <DS3231_EncodeBCD>
 8002860:	4603      	mov	r3, r0
 8002862:	4619      	mov	r1, r3
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff feb5 	bl	80025d4 <DS3231_SetRegByte>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f822 	bl	80028c8 <DS3231_EncodeBCD>
 8002884:	4603      	mov	r3, r0
 8002886:	4619      	mov	r1, r3
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff fea3 	bl	80025d4 <DS3231_SetRegByte>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	b2db      	uxtb	r3, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <DS3231_EncodeBCD+0x40>)
 80028d6:	fba3 1302 	umull	r1, r3, r3, r2
 80028da:	08d9      	lsrs	r1, r3, #3
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4907      	ldr	r1, [pc, #28]	; (8002908 <DS3231_EncodeBCD+0x40>)
 80028ec:	fba1 1303 	umull	r1, r3, r1, r3
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	cccccccd 	.word	0xcccccccd

0800290c <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002910:	bf00      	nop
 8002912:	f007 fb01 	bl	8009f18 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <eeprom_wait+0x1c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b06      	cmp	r3, #6
 8002920:	d9f7      	bls.n	8002912 <eeprom_wait+0x6>
    {
    }
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000248 	.word	0x20000248

0800292c <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002938:	f7ff ffe8 	bl	800290c <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4803      	ldr	r0, [pc, #12]	; (8002964 <eeprom_read+0x38>)
 8002956:	f009 f809 	bl	800b96c <HAL_I2C_Mem_Read>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000033c 	.word	0x2000033c

08002968 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af04      	add	r7, sp, #16
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002974:	f7ff ffca 	bl	800290c <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	9102      	str	r1, [sp, #8]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	21a0      	movs	r1, #160	; 0xa0
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <eeprom_write+0x48>)
 8002992:	f008 fef1 	bl	800b778 <HAL_I2C_Mem_Write>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800299a:	f007 fabd 	bl	8009f18 <HAL_GetTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <eeprom_write+0x4c>)
 80029a2:	6013      	str	r3, [r2, #0]

    return rc;
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000033c 	.word	0x2000033c
 80029b4:	20000248 	.word	0x20000248

080029b8 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	460a      	mov	r2, r1
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029c8:	79bb      	ldrb	r3, [r7, #6]
 80029ca:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <EEPROM_RelayStateUpdate+0x2a>
 80029d2:	f107 030f 	add.w	r3, r7, #15
 80029d6:	2201      	movs	r2, #1
 80029d8:	4619      	mov	r1, r3
 80029da:	202e      	movs	r0, #46	; 0x2e
 80029dc:	f7ff ffc4 	bl	8002968 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029e0:	e01f      	b.n	8002a22 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d107      	bne.n	80029f8 <EEPROM_RelayStateUpdate+0x40>
 80029e8:	f107 030f 	add.w	r3, r7, #15
 80029ec:	2201      	movs	r2, #1
 80029ee:	4619      	mov	r1, r3
 80029f0:	202f      	movs	r0, #47	; 0x2f
 80029f2:	f7ff ffb9 	bl	8002968 <eeprom_write>
}
 80029f6:	e014      	b.n	8002a22 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <EEPROM_RelayStateUpdate+0x56>
 80029fe:	f107 030f 	add.w	r3, r7, #15
 8002a02:	2201      	movs	r2, #1
 8002a04:	4619      	mov	r1, r3
 8002a06:	2030      	movs	r0, #48	; 0x30
 8002a08:	f7ff ffae 	bl	8002968 <eeprom_write>
}
 8002a0c:	e009      	b.n	8002a22 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d106      	bne.n	8002a22 <EEPROM_RelayStateUpdate+0x6a>
 8002a14:	f107 030f 	add.w	r3, r7, #15
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	2031      	movs	r0, #49	; 0x31
 8002a1e:	f7ff ffa3 	bl	8002968 <eeprom_write>
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	460a      	mov	r2, r1
 8002a34:	71fb      	strb	r3, [r7, #7]
 8002a36:	4613      	mov	r3, r2
 8002a38:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <EEPROM_LightStateUpdate+0x2a>
 8002a44:	f107 030f 	add.w	r3, r7, #15
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	2033      	movs	r0, #51	; 0x33
 8002a4e:	f7ff ff8b 	bl	8002968 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a52:	e01f      	b.n	8002a94 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <EEPROM_LightStateUpdate+0x40>
 8002a5a:	f107 030f 	add.w	r3, r7, #15
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4619      	mov	r1, r3
 8002a62:	2034      	movs	r0, #52	; 0x34
 8002a64:	f7ff ff80 	bl	8002968 <eeprom_write>
}
 8002a68:	e014      	b.n	8002a94 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d107      	bne.n	8002a80 <EEPROM_LightStateUpdate+0x56>
 8002a70:	f107 030f 	add.w	r3, r7, #15
 8002a74:	2201      	movs	r2, #1
 8002a76:	4619      	mov	r1, r3
 8002a78:	2035      	movs	r0, #53	; 0x35
 8002a7a:	f7ff ff75 	bl	8002968 <eeprom_write>
}
 8002a7e:	e009      	b.n	8002a94 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d106      	bne.n	8002a94 <EEPROM_LightStateUpdate+0x6a>
 8002a86:	f107 030f 	add.w	r3, r7, #15
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	2036      	movs	r0, #54	; 0x36
 8002a90:	f7ff ff6a 	bl	8002968 <eeprom_write>
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <EEPROM_RelayStateRead+0x24>
 8002ab0:	f107 030f 	add.w	r3, r7, #15
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	202e      	movs	r0, #46	; 0x2e
 8002aba:	f7ff ff37 	bl	800292c <eeprom_read>
 8002abe:	e01f      	b.n	8002b00 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d107      	bne.n	8002ad6 <EEPROM_RelayStateRead+0x3a>
 8002ac6:	f107 030f 	add.w	r3, r7, #15
 8002aca:	2201      	movs	r2, #1
 8002acc:	4619      	mov	r1, r3
 8002ace:	202f      	movs	r0, #47	; 0x2f
 8002ad0:	f7ff ff2c 	bl	800292c <eeprom_read>
 8002ad4:	e014      	b.n	8002b00 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d107      	bne.n	8002aec <EEPROM_RelayStateRead+0x50>
 8002adc:	f107 030f 	add.w	r3, r7, #15
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	2030      	movs	r0, #48	; 0x30
 8002ae6:	f7ff ff21 	bl	800292c <eeprom_read>
 8002aea:	e009      	b.n	8002b00 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d106      	bne.n	8002b00 <EEPROM_RelayStateRead+0x64>
 8002af2:	f107 030f 	add.w	r3, r7, #15
 8002af6:	2201      	movs	r2, #1
 8002af8:	4619      	mov	r1, r3
 8002afa:	2031      	movs	r0, #49	; 0x31
 8002afc:	f7ff ff16 	bl	800292c <eeprom_read>

	return RelayStan;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <EEPROM_LightStateRead+0x24>
 8002b1e:	f107 030f 	add.w	r3, r7, #15
 8002b22:	2201      	movs	r2, #1
 8002b24:	4619      	mov	r1, r3
 8002b26:	2033      	movs	r0, #51	; 0x33
 8002b28:	f7ff ff00 	bl	800292c <eeprom_read>
 8002b2c:	e01f      	b.n	8002b6e <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d107      	bne.n	8002b44 <EEPROM_LightStateRead+0x3a>
 8002b34:	f107 030f 	add.w	r3, r7, #15
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	2034      	movs	r0, #52	; 0x34
 8002b3e:	f7ff fef5 	bl	800292c <eeprom_read>
 8002b42:	e014      	b.n	8002b6e <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <EEPROM_LightStateRead+0x50>
 8002b4a:	f107 030f 	add.w	r3, r7, #15
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4619      	mov	r1, r3
 8002b52:	2035      	movs	r0, #53	; 0x35
 8002b54:	f7ff feea 	bl	800292c <eeprom_read>
 8002b58:	e009      	b.n	8002b6e <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d106      	bne.n	8002b6e <EEPROM_LightStateRead+0x64>
 8002b60:	f107 030f 	add.w	r3, r7, #15
 8002b64:	2201      	movs	r2, #1
 8002b66:	4619      	mov	r1, r3
 8002b68:	2036      	movs	r0, #54	; 0x36
 8002b6a:	f7ff fedf 	bl	800292c <eeprom_read>

	return AktualnyStan;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff ff8d 	bl	8002a9c <EEPROM_RelayStateRead>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <EEPROM_RelayStateRestore+0x18>
 8002b88:	2005      	movs	r0, #5
 8002b8a:	f005 ff85 	bl	8008a98 <SendComand>
 8002b8e:	e002      	b.n	8002b96 <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b90:	2006      	movs	r0, #6
 8002b92:	f005 ff81 	bl	8008a98 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b96:	2002      	movs	r0, #2
 8002b98:	f7ff ff80 	bl	8002a9c <EEPROM_RelayStateRead>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <EEPROM_RelayStateRestore+0x32>
 8002ba2:	2007      	movs	r0, #7
 8002ba4:	f005 ff78 	bl	8008a98 <SendComand>
 8002ba8:	e002      	b.n	8002bb0 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002baa:	2008      	movs	r0, #8
 8002bac:	f005 ff74 	bl	8008a98 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f7ff ff73 	bl	8002a9c <EEPROM_RelayStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_RelayStateRestore+0x4c>
 8002bbc:	2009      	movs	r0, #9
 8002bbe:	f005 ff6b 	bl	8008a98 <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002bc4:	200a      	movs	r0, #10
 8002bc6:	f005 ff67 	bl	8008a98 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002bca:	2004      	movs	r0, #4
 8002bcc:	f7ff ff66 	bl	8002a9c <EEPROM_RelayStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_RelayStateRestore+0x66>
 8002bd6:	200b      	movs	r0, #11
 8002bd8:	f005 ff5e 	bl	8008a98 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002bdc:	e002      	b.n	8002be4 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002bde:	200c      	movs	r0, #12
 8002be0:	f005 ff5a 	bl	8008a98 <SendComand>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff ff8c 	bl	8002b0a <EEPROM_LightStateRead>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <EEPROM_LightStateRestore+0x18>
 8002bf8:	200d      	movs	r0, #13
 8002bfa:	f005 ff4d 	bl	8008a98 <SendComand>
 8002bfe:	e002      	b.n	8002c06 <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002c00:	200e      	movs	r0, #14
 8002c02:	f005 ff49 	bl	8008a98 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002c06:	2002      	movs	r0, #2
 8002c08:	f7ff ff7f 	bl	8002b0a <EEPROM_LightStateRead>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <EEPROM_LightStateRestore+0x32>
 8002c12:	200f      	movs	r0, #15
 8002c14:	f005 ff40 	bl	8008a98 <SendComand>
 8002c18:	e002      	b.n	8002c20 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002c1a:	2010      	movs	r0, #16
 8002c1c:	f005 ff3c 	bl	8008a98 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002c20:	2003      	movs	r0, #3
 8002c22:	f7ff ff72 	bl	8002b0a <EEPROM_LightStateRead>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <EEPROM_LightStateRestore+0x4c>
 8002c2c:	2011      	movs	r0, #17
 8002c2e:	f005 ff33 	bl	8008a98 <SendComand>
 8002c32:	e002      	b.n	8002c3a <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002c34:	2012      	movs	r0, #18
 8002c36:	f005 ff2f 	bl	8008a98 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f7ff ff65 	bl	8002b0a <EEPROM_LightStateRead>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <EEPROM_LightStateRestore+0x66>
 8002c46:	2013      	movs	r0, #19
 8002c48:	f005 ff26 	bl	8008a98 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c4c:	e002      	b.n	8002c54 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c4e:	2014      	movs	r0, #20
 8002c50:	f005 ff22 	bl	8008a98 <SendComand>
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c6e:	f107 030a 	add.w	r3, r7, #10
 8002c72:	2201      	movs	r2, #1
 8002c74:	4619      	mov	r1, r3
 8002c76:	2005      	movs	r0, #5
 8002c78:	f7ff fe58 	bl	800292c <eeprom_read>
 8002c7c:	e009      	b.n	8002c92 <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d106      	bne.n	8002c92 <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c84:	f107 030a 	add.w	r3, r7, #10
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	200c      	movs	r0, #12
 8002c8e:	f7ff fe4d 	bl	800292c <eeprom_read>
	}

	uint32_t a = 0x01;
 8002c92:	2301      	movs	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	72fb      	strb	r3, [r7, #11]
 8002c9a:	e016      	b.n	8002cca <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002c9c:	7abb      	ldrb	r3, [r7, #10]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	4413      	add	r3, r2
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e004      	b.n	8002cbe <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	72fb      	strb	r3, [r7, #11]
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d9e5      	bls.n	8002c9c <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	6039      	str	r1, [r7, #0]
 8002ce4:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	72fb      	strb	r3, [r7, #11]
 8002cf2:	e011      	b.n	8002d18 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	7abb      	ldrb	r3, [r7, #10]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	3301      	adds	r3, #1
 8002d16:	72fb      	strb	r3, [r7, #11]
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d9ea      	bls.n	8002cf4 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d24:	f107 030a 	add.w	r3, r7, #10
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	2005      	movs	r0, #5
 8002d2e:	f7ff fe1b 	bl	8002968 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002d32:	e009      	b.n	8002d48 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d106      	bne.n	8002d48 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d3a:	f107 030a 	add.w	r3, r7, #10
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4619      	mov	r1, r3
 8002d42:	200c      	movs	r0, #12
 8002d44:	f7ff fe10 	bl	8002968 <eeprom_write>
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d10e      	bne.n	8002d88 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d6a:	f107 0309 	add.w	r3, r7, #9
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4619      	mov	r1, r3
 8002d72:	2006      	movs	r0, #6
 8002d74:	f7ff fdda 	bl	800292c <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4619      	mov	r1, r3
 8002d80:	2007      	movs	r0, #7
 8002d82:	f7ff fdd3 	bl	800292c <eeprom_read>
 8002d86:	e010      	b.n	8002daa <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d10d      	bne.n	8002daa <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d8e:	f107 0309 	add.w	r3, r7, #9
 8002d92:	2201      	movs	r2, #1
 8002d94:	4619      	mov	r1, r3
 8002d96:	200d      	movs	r0, #13
 8002d98:	f7ff fdc8 	bl	800292c <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002d9c:	f107 0308 	add.w	r3, r7, #8
 8002da0:	2201      	movs	r2, #1
 8002da2:	4619      	mov	r1, r3
 8002da4:	200e      	movs	r0, #14
 8002da6:	f7ff fdc1 	bl	800292c <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002daa:	2301      	movs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	72fb      	strb	r3, [r7, #11]
 8002db2:	e016      	b.n	8002de2 <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002db4:	7a7b      	ldrb	r3, [r7, #9]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e004      	b.n	8002dd6 <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	3301      	adds	r3, #1
 8002de0:	72fb      	strb	r3, [r7, #11]
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d9e5      	bls.n	8002db4 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002de8:	2301      	movs	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002dec:	2304      	movs	r3, #4
 8002dee:	72bb      	strb	r3, [r7, #10]
 8002df0:	e016      	b.n	8002e20 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002df2:	7a3b      	ldrb	r3, [r7, #8]
 8002df4:	461a      	mov	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002dfe:	7abb      	ldrb	r3, [r7, #10]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e004      	b.n	8002e14 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002e0a:	7abb      	ldrb	r3, [r7, #10]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002e1a:	7abb      	ldrb	r3, [r7, #10]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	72bb      	strb	r3, [r7, #10]
 8002e20:	7abb      	ldrb	r3, [r7, #10]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d9e5      	bls.n	8002df2 <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002e44:	2301      	movs	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	72fb      	strb	r3, [r7, #11]
 8002e4c:	e011      	b.n	8002e72 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	7a7b      	ldrb	r3, [r7, #9]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	72fb      	strb	r3, [r7, #11]
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d9ea      	bls.n	8002e4e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002e78:	2301      	movs	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	72bb      	strb	r3, [r7, #10]
 8002e80:	e011      	b.n	8002ea6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002e82:	7abb      	ldrb	r3, [r7, #10]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	7a3b      	ldrb	r3, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002ea0:	7abb      	ldrb	r3, [r7, #10]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	72bb      	strb	r3, [r7, #10]
 8002ea6:	7abb      	ldrb	r3, [r7, #10]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d9ea      	bls.n	8002e82 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10e      	bne.n	8002ed0 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002eb2:	f107 0309 	add.w	r3, r7, #9
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2006      	movs	r0, #6
 8002ebc:	f7ff fd54 	bl	8002968 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	2007      	movs	r0, #7
 8002eca:	f7ff fd4d 	bl	8002968 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002ece:	e010      	b.n	8002ef2 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d10d      	bne.n	8002ef2 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002ed6:	f107 0309 	add.w	r3, r7, #9
 8002eda:	2201      	movs	r2, #1
 8002edc:	4619      	mov	r1, r3
 8002ede:	200d      	movs	r0, #13
 8002ee0:	f7ff fd42 	bl	8002968 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4619      	mov	r1, r3
 8002eec:	200e      	movs	r0, #14
 8002eee:	f7ff fd3b 	bl	8002968 <eeprom_write>
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	6039      	str	r1, [r7, #0]
 8002f04:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002f10:	f107 030f 	add.w	r3, r7, #15
 8002f14:	2201      	movs	r2, #1
 8002f16:	4619      	mov	r1, r3
 8002f18:	2008      	movs	r0, #8
 8002f1a:	f7ff fd07 	bl	800292c <eeprom_read>
 8002f1e:	e009      	b.n	8002f34 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d106      	bne.n	8002f34 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002f26:	f107 030f 	add.w	r3, r7, #15
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	200f      	movs	r0, #15
 8002f30:	f7ff fcfc 	bl	800292c <eeprom_read>
	}

	*hourOn = TempHour;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	701a      	strb	r2, [r3, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	6039      	str	r1, [r7, #0]
 8002f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f58:	f107 030f 	add.w	r3, r7, #15
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4619      	mov	r1, r3
 8002f60:	2009      	movs	r0, #9
 8002f62:	f7ff fce3 	bl	800292c <eeprom_read>
 8002f66:	e009      	b.n	8002f7c <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d106      	bne.n	8002f7c <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f6e:	f107 030f 	add.w	r3, r7, #15
 8002f72:	2201      	movs	r2, #1
 8002f74:	4619      	mov	r1, r3
 8002f76:	2010      	movs	r0, #16
 8002f78:	f7ff fcd8 	bl	800292c <eeprom_read>
	}
	*minuteOn = TempMinute;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	701a      	strb	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	6039      	str	r1, [r7, #0]
 8002f94:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002fa0:	f107 030f 	add.w	r3, r7, #15
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	200a      	movs	r0, #10
 8002faa:	f7ff fcbf 	bl	800292c <eeprom_read>
 8002fae:	e009      	b.n	8002fc4 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d106      	bne.n	8002fc4 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002fb6:	f107 030f 	add.w	r3, r7, #15
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	2011      	movs	r0, #17
 8002fc0:	f7ff fcb4 	bl	800292c <eeprom_read>
	}

	*hourOff = TempHour;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	701a      	strb	r2, [r3, #0]

}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6039      	str	r1, [r7, #0]
 8002fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fe8:	f107 030f 	add.w	r3, r7, #15
 8002fec:	2201      	movs	r2, #1
 8002fee:	4619      	mov	r1, r3
 8002ff0:	200b      	movs	r0, #11
 8002ff2:	f7ff fc9b 	bl	800292c <eeprom_read>
 8002ff6:	e009      	b.n	800300c <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d106      	bne.n	800300c <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002ffe:	f107 030f 	add.w	r3, r7, #15
 8003002:	2201      	movs	r2, #1
 8003004:	4619      	mov	r1, r3
 8003006:	2012      	movs	r0, #18
 8003008:	f7ff fc90 	bl	800292c <eeprom_read>
	}
	*minuteOff = TempMinute;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	701a      	strb	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	460a      	mov	r2, r1
 8003024:	71fb      	strb	r3, [r7, #7]
 8003026:	4613      	mov	r3, r2
 8003028:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 800302a:	79bb      	ldrb	r3, [r7, #6]
 800302c:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <EEPROM_ScheduleHourOnUpdate+0x2a>
 8003034:	f107 030f 	add.w	r3, r7, #15
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	2008      	movs	r0, #8
 800303e:	f7ff fc93 	bl	8002968 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 8003042:	e009      	b.n	8003058 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d106      	bne.n	8003058 <EEPROM_ScheduleHourOnUpdate+0x3e>
 800304a:	f107 030f 	add.w	r3, r7, #15
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	200f      	movs	r0, #15
 8003054:	f7ff fc88 	bl	8002968 <eeprom_write>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	460a      	mov	r2, r1
 800306a:	71fb      	strb	r3, [r7, #7]
 800306c:	4613      	mov	r3, r2
 800306e:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d107      	bne.n	800308a <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 800307a:	f107 030f 	add.w	r3, r7, #15
 800307e:	2201      	movs	r2, #1
 8003080:	4619      	mov	r1, r3
 8003082:	2009      	movs	r0, #9
 8003084:	f7ff fc70 	bl	8002968 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003088:	e009      	b.n	800309e <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d106      	bne.n	800309e <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003090:	f107 030f 	add.w	r3, r7, #15
 8003094:	2201      	movs	r2, #1
 8003096:	4619      	mov	r1, r3
 8003098:	2010      	movs	r0, #16
 800309a:	f7ff fc65 	bl	8002968 <eeprom_write>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	460a      	mov	r2, r1
 80030b0:	71fb      	strb	r3, [r7, #7]
 80030b2:	4613      	mov	r3, r2
 80030b4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 80030b6:	79bb      	ldrb	r3, [r7, #6]
 80030b8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <EEPROM_ScheduleHourOffUpdate+0x2a>
 80030c0:	f107 030f 	add.w	r3, r7, #15
 80030c4:	2201      	movs	r2, #1
 80030c6:	4619      	mov	r1, r3
 80030c8:	200a      	movs	r0, #10
 80030ca:	f7ff fc4d 	bl	8002968 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 80030ce:	e009      	b.n	80030e4 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d106      	bne.n	80030e4 <EEPROM_ScheduleHourOffUpdate+0x3e>
 80030d6:	f107 030f 	add.w	r3, r7, #15
 80030da:	2201      	movs	r2, #1
 80030dc:	4619      	mov	r1, r3
 80030de:	2011      	movs	r0, #17
 80030e0:	f7ff fc42 	bl	8002968 <eeprom_write>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	460a      	mov	r2, r1
 80030f6:	71fb      	strb	r3, [r7, #7]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80030fc:	79bb      	ldrb	r3, [r7, #6]
 80030fe:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 8003106:	f107 030f 	add.w	r3, r7, #15
 800310a:	2201      	movs	r2, #1
 800310c:	4619      	mov	r1, r3
 800310e:	200b      	movs	r0, #11
 8003110:	f7ff fc2a 	bl	8002968 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 8003114:	e009      	b.n	800312a <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d106      	bne.n	800312a <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 800311c:	f107 030f 	add.w	r3, r7, #15
 8003120:	2201      	movs	r2, #1
 8003122:	4619      	mov	r1, r3
 8003124:	2012      	movs	r0, #18
 8003126:	f7ff fc1f 	bl	8002968 <eeprom_write>
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800313a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800313e:	f7fe fedb 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003142:	238c      	movs	r3, #140	; 0x8c
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	23f0      	movs	r3, #240	; 0xf0
 8003148:	4aae      	ldr	r2, [pc, #696]	; (8003404 <system_init+0x2d0>)
 800314a:	2132      	movs	r1, #50	; 0x32
 800314c:	201e      	movs	r0, #30
 800314e:	f7fe fea8 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003152:	48ad      	ldr	r0, [pc, #692]	; (8003408 <system_init+0x2d4>)
 8003154:	f7fe facc 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003158:	49ac      	ldr	r1, [pc, #688]	; (800340c <system_init+0x2d8>)
 800315a:	48ad      	ldr	r0, [pc, #692]	; (8003410 <system_init+0x2dc>)
 800315c:	f00e fbb8 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003160:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	2300      	movs	r3, #0
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	220a      	movs	r2, #10
 800316e:	213c      	movs	r1, #60	; 0x3c
 8003170:	48a7      	ldr	r0, [pc, #668]	; (8003410 <system_init+0x2dc>)
 8003172:	f7fe fcd7 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8003176:	f006 fecf 	bl	8009f18 <HAL_GetTick>
 800317a:	4603      	mov	r3, r0
 800317c:	4aa5      	ldr	r2, [pc, #660]	; (8003414 <system_init+0x2e0>)
 800317e:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003180:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	2305      	movs	r3, #5
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2314      	movs	r3, #20
 800318c:	2214      	movs	r2, #20
 800318e:	21be      	movs	r1, #190	; 0xbe
 8003190:	203c      	movs	r0, #60	; 0x3c
 8003192:	f7fe f9df 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8003196:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	2305      	movs	r3, #5
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2314      	movs	r3, #20
 80031a2:	2214      	movs	r2, #20
 80031a4:	21be      	movs	r1, #190	; 0xbe
 80031a6:	205a      	movs	r0, #90	; 0x5a
 80031a8:	f7fe f9d4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 80031ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2305      	movs	r3, #5
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2314      	movs	r3, #20
 80031b8:	2214      	movs	r2, #20
 80031ba:	21be      	movs	r1, #190	; 0xbe
 80031bc:	2078      	movs	r0, #120	; 0x78
 80031be:	f7fe f9c9 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 80031c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2305      	movs	r3, #5
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2314      	movs	r3, #20
 80031ce:	2214      	movs	r2, #20
 80031d0:	21be      	movs	r1, #190	; 0xbe
 80031d2:	2096      	movs	r0, #150	; 0x96
 80031d4:	f7fe f9be 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 80031d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	2305      	movs	r3, #5
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2314      	movs	r3, #20
 80031e4:	2214      	movs	r2, #20
 80031e6:	21be      	movs	r1, #190	; 0xbe
 80031e8:	20b4      	movs	r0, #180	; 0xb4
 80031ea:	f7fe f9b3 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80031ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	2305      	movs	r3, #5
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2314      	movs	r3, #20
 80031fa:	2214      	movs	r2, #20
 80031fc:	21be      	movs	r1, #190	; 0xbe
 80031fe:	20d2      	movs	r0, #210	; 0xd2
 8003200:	f7fe f9a8 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003204:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2305      	movs	r3, #5
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2314      	movs	r3, #20
 8003210:	2214      	movs	r2, #20
 8003212:	21be      	movs	r1, #190	; 0xbe
 8003214:	20f0      	movs	r0, #240	; 0xf0
 8003216:	f7fe f99d 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 800321a:	f006 fe7d 	bl	8009f18 <HAL_GetTick>
 800321e:	4603      	mov	r3, r0
 8003220:	4a7c      	ldr	r2, [pc, #496]	; (8003414 <system_init+0x2e0>)
 8003222:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8003224:	487c      	ldr	r0, [pc, #496]	; (8003418 <system_init+0x2e4>)
 8003226:	f7fe fa63 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800322a:	20c8      	movs	r0, #200	; 0xc8
 800322c:	f002 f8e6 	bl	80053fc <initWait>
	  	  LastTime = HAL_GetTick();
 8003230:	f006 fe72 	bl	8009f18 <HAL_GetTick>
 8003234:	4603      	mov	r3, r0
 8003236:	4a77      	ldr	r2, [pc, #476]	; (8003414 <system_init+0x2e0>)
 8003238:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 800323a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2305      	movs	r3, #5
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2314      	movs	r3, #20
 8003246:	2214      	movs	r2, #20
 8003248:	21be      	movs	r1, #190	; 0xbe
 800324a:	203c      	movs	r0, #60	; 0x3c
 800324c:	f7fe f9ff 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003250:	2201      	movs	r2, #1
 8003252:	4972      	ldr	r1, [pc, #456]	; (800341c <system_init+0x2e8>)
 8003254:	2001      	movs	r0, #1
 8003256:	f7ff fb69 	bl	800292c <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800325a:	2025      	movs	r0, #37	; 0x25
 800325c:	f005 fc1c 	bl	8008a98 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003260:	486f      	ldr	r0, [pc, #444]	; (8003420 <system_init+0x2ec>)
 8003262:	f006 fb79 	bl	8009958 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8003266:	496f      	ldr	r1, [pc, #444]	; (8003424 <system_init+0x2f0>)
 8003268:	4869      	ldr	r0, [pc, #420]	; (8003410 <system_init+0x2dc>)
 800326a:	f00e fb31 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800326e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	2301      	movs	r3, #1
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	22dc      	movs	r2, #220	; 0xdc
 800327c:	2114      	movs	r1, #20
 800327e:	4864      	ldr	r0, [pc, #400]	; (8003410 <system_init+0x2dc>)
 8003280:	f7fe fc50 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003284:	20c8      	movs	r0, #200	; 0xc8
 8003286:	f002 f8b9 	bl	80053fc <initWait>
	  	  	  LastTime = HAL_GetTick();
 800328a:	f006 fe45 	bl	8009f18 <HAL_GetTick>
 800328e:	4603      	mov	r3, r0
 8003290:	4a60      	ldr	r2, [pc, #384]	; (8003414 <system_init+0x2e0>)
 8003292:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003294:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2305      	movs	r3, #5
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2314      	movs	r3, #20
 80032a0:	2214      	movs	r2, #20
 80032a2:	21be      	movs	r1, #190	; 0xbe
 80032a4:	205a      	movs	r0, #90	; 0x5a
 80032a6:	f7fe f9d2 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 80032aa:	201b      	movs	r0, #27
 80032ac:	f005 fbf4 	bl	8008a98 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 80032b0:	f7ff fc62 	bl	8002b78 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80032b4:	485a      	ldr	r0, [pc, #360]	; (8003420 <system_init+0x2ec>)
 80032b6:	f006 fb4f 	bl	8009958 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 80032ba:	495b      	ldr	r1, [pc, #364]	; (8003428 <system_init+0x2f4>)
 80032bc:	4854      	ldr	r0, [pc, #336]	; (8003410 <system_init+0x2dc>)
 80032be:	f00e fb07 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80032c2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	2301      	movs	r3, #1
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	22dc      	movs	r2, #220	; 0xdc
 80032d0:	2114      	movs	r1, #20
 80032d2:	484f      	ldr	r0, [pc, #316]	; (8003410 <system_init+0x2dc>)
 80032d4:	f7fe fc26 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80032d8:	20c8      	movs	r0, #200	; 0xc8
 80032da:	f002 f88f 	bl	80053fc <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80032de:	f006 fe1b 	bl	8009f18 <HAL_GetTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4a4b      	ldr	r2, [pc, #300]	; (8003414 <system_init+0x2e0>)
 80032e6:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80032e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2305      	movs	r3, #5
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2314      	movs	r3, #20
 80032f4:	2214      	movs	r2, #20
 80032f6:	21be      	movs	r1, #190	; 0xbe
 80032f8:	2078      	movs	r0, #120	; 0x78
 80032fa:	f7fe f9a8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80032fe:	2004      	movs	r0, #4
 8003300:	f005 fbca 	bl	8008a98 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 8003304:	2001      	movs	r0, #1
 8003306:	f004 faaf 	bl	8007868 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800330a:	20c8      	movs	r0, #200	; 0xc8
 800330c:	f002 f876 	bl	80053fc <initWait>
			  LastTime = HAL_GetTick();
 8003310:	f006 fe02 	bl	8009f18 <HAL_GetTick>
 8003314:	4603      	mov	r3, r0
 8003316:	4a3f      	ldr	r2, [pc, #252]	; (8003414 <system_init+0x2e0>)
 8003318:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 800331a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	2305      	movs	r3, #5
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2314      	movs	r3, #20
 8003326:	2214      	movs	r2, #20
 8003328:	21be      	movs	r1, #190	; 0xbe
 800332a:	2096      	movs	r0, #150	; 0x96
 800332c:	f7fe f98f 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8003330:	f7ff fc5a 	bl	8002be8 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003334:	483a      	ldr	r0, [pc, #232]	; (8003420 <system_init+0x2ec>)
 8003336:	f006 fb0f 	bl	8009958 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 800333a:	493c      	ldr	r1, [pc, #240]	; (800342c <system_init+0x2f8>)
 800333c:	4834      	ldr	r0, [pc, #208]	; (8003410 <system_init+0x2dc>)
 800333e:	f00e fac7 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003342:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	2301      	movs	r3, #1
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	22dc      	movs	r2, #220	; 0xdc
 8003350:	2114      	movs	r1, #20
 8003352:	482f      	ldr	r0, [pc, #188]	; (8003410 <system_init+0x2dc>)
 8003354:	f7fe fbe6 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003358:	20c8      	movs	r0, #200	; 0xc8
 800335a:	f002 f84f 	bl	80053fc <initWait>
			  LastTime = HAL_GetTick();
 800335e:	f006 fddb 	bl	8009f18 <HAL_GetTick>
 8003362:	4603      	mov	r3, r0
 8003364:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <system_init+0x2e0>)
 8003366:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003368:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	2305      	movs	r3, #5
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2314      	movs	r3, #20
 8003374:	2214      	movs	r2, #20
 8003376:	21be      	movs	r1, #190	; 0xbe
 8003378:	20b4      	movs	r0, #180	; 0xb4
 800337a:	f7fe f968 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 800337e:	2003      	movs	r0, #3
 8003380:	f005 fb8a 	bl	8008a98 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003384:	2002      	movs	r0, #2
 8003386:	f004 fa6f 	bl	8007868 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800338a:	20c8      	movs	r0, #200	; 0xc8
 800338c:	f002 f836 	bl	80053fc <initWait>
			  LastTime = HAL_GetTick();
 8003390:	f006 fdc2 	bl	8009f18 <HAL_GetTick>
 8003394:	4603      	mov	r3, r0
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <system_init+0x2e0>)
 8003398:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 800339a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2305      	movs	r3, #5
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2314      	movs	r3, #20
 80033a6:	2214      	movs	r2, #20
 80033a8:	21be      	movs	r1, #190	; 0xbe
 80033aa:	20d2      	movs	r0, #210	; 0xd2
 80033ac:	f7fe f94f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80033b0:	2015      	movs	r0, #21
 80033b2:	f005 fb71 	bl	8008a98 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80033b6:	20c8      	movs	r0, #200	; 0xc8
 80033b8:	f002 f820 	bl	80053fc <initWait>
			  LastTime = HAL_GetTick();
 80033bc:	f006 fdac 	bl	8009f18 <HAL_GetTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <system_init+0x2e0>)
 80033c4:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 80033c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	2305      	movs	r3, #5
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2314      	movs	r3, #20
 80033d2:	2214      	movs	r2, #20
 80033d4:	21be      	movs	r1, #190	; 0xbe
 80033d6:	20f0      	movs	r0, #240	; 0xf0
 80033d8:	f7fe f939 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80033dc:	2016      	movs	r0, #22
 80033de:	f005 fb5b 	bl	8008a98 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80033e2:	480f      	ldr	r0, [pc, #60]	; (8003420 <system_init+0x2ec>)
 80033e4:	f006 fab8 	bl	8009958 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80033e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033ec:	f002 f806 	bl	80053fc <initWait>
			  LastTime = HAL_GetTick();
 80033f0:	f006 fd92 	bl	8009f18 <HAL_GetTick>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <system_init+0x2e0>)
 80033f8:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	08015e84 	.word	0x08015e84
 8003408:	08028f4c 	.word	0x08028f4c
 800340c:	08015518 	.word	0x08015518
 8003410:	200002fc 	.word	0x200002fc
 8003414:	20000250 	.word	0x20000250
 8003418:	08026fd4 	.word	0x08026fd4
 800341c:	20000033 	.word	0x20000033
 8003420:	200004a4 	.word	0x200004a4
 8003424:	0801552c 	.word	0x0801552c
 8003428:	08015548 	.word	0x08015548
 800342c:	08015568 	.word	0x08015568

08003430 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	ed87 0a05 	vstr	s0, [r7, #20]
 800343a:	edc7 0a04 	vstr	s1, [r7, #16]
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	460b      	mov	r3, r1
 8003442:	ed87 1a01 	vstr	s2, [r7, #4]
 8003446:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003448:	f24c 6018 	movw	r0, #50712	; 0xc618
 800344c:	f7fe fd54 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003450:	2003      	movs	r0, #3
 8003452:	f005 fb21 	bl	8008a98 <SendComand>
	  SendComand(UCMD_PRES_1);
 8003456:	2004      	movs	r0, #4
 8003458:	f005 fb1e 	bl	8008a98 <SendComand>
	  SendComand(UCMD_TEMP_2);
 800345c:	201b      	movs	r0, #27
 800345e:	f005 fb1b 	bl	8008a98 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8003462:	f7ff f9b5 	bl	80027d0 <DS3231_GetHour>
 8003466:	4603      	mov	r3, r0
 8003468:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 800346a:	f7ff f9bd 	bl	80027e8 <DS3231_GetMinute>
 800346e:	4603      	mov	r3, r0
 8003470:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003472:	4881      	ldr	r0, [pc, #516]	; (8003678 <showCurrentParameters+0x248>)
 8003474:	f7fe f93c 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003478:	4980      	ldr	r1, [pc, #512]	; (800367c <showCurrentParameters+0x24c>)
 800347a:	4881      	ldr	r0, [pc, #516]	; (8003680 <showCurrentParameters+0x250>)
 800347c:	f00e fa28 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003480:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800348e:	220a      	movs	r2, #10
 8003490:	212f      	movs	r1, #47	; 0x2f
 8003492:	487b      	ldr	r0, [pc, #492]	; (8003680 <showCurrentParameters+0x250>)
 8003494:	f7fe fb46 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003498:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2329      	movs	r3, #41	; 0x29
 80034a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034a4:	2129      	movs	r1, #41	; 0x29
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd fe72 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80034ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	232b      	movs	r3, #43	; 0x2b
 80034b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034b8:	212b      	movs	r1, #43	; 0x2b
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fd fe68 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
 80034c2:	2b09      	cmp	r3, #9
 80034c4:	d809      	bhi.n	80034da <showCurrentParameters+0xaa>
 80034c6:	7fbb      	ldrb	r3, [r7, #30]
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	d806      	bhi.n	80034da <showCurrentParameters+0xaa>
 80034cc:	7ffa      	ldrb	r2, [r7, #31]
 80034ce:	7fbb      	ldrb	r3, [r7, #30]
 80034d0:	496c      	ldr	r1, [pc, #432]	; (8003684 <showCurrentParameters+0x254>)
 80034d2:	486b      	ldr	r0, [pc, #428]	; (8003680 <showCurrentParameters+0x250>)
 80034d4:	f00e f9fc 	bl	80118d0 <siprintf>
 80034d8:	e019      	b.n	800350e <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d806      	bhi.n	80034ee <showCurrentParameters+0xbe>
 80034e0:	7ffa      	ldrb	r2, [r7, #31]
 80034e2:	7fbb      	ldrb	r3, [r7, #30]
 80034e4:	4968      	ldr	r1, [pc, #416]	; (8003688 <showCurrentParameters+0x258>)
 80034e6:	4866      	ldr	r0, [pc, #408]	; (8003680 <showCurrentParameters+0x250>)
 80034e8:	f00e f9f2 	bl	80118d0 <siprintf>
 80034ec:	e00f      	b.n	800350e <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80034ee:	7fbb      	ldrb	r3, [r7, #30]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d806      	bhi.n	8003502 <showCurrentParameters+0xd2>
 80034f4:	7ffa      	ldrb	r2, [r7, #31]
 80034f6:	7fbb      	ldrb	r3, [r7, #30]
 80034f8:	4964      	ldr	r1, [pc, #400]	; (800368c <showCurrentParameters+0x25c>)
 80034fa:	4861      	ldr	r0, [pc, #388]	; (8003680 <showCurrentParameters+0x250>)
 80034fc:	f00e f9e8 	bl	80118d0 <siprintf>
 8003500:	e005      	b.n	800350e <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8003502:	7ffa      	ldrb	r2, [r7, #31]
 8003504:	7fbb      	ldrb	r3, [r7, #30]
 8003506:	4962      	ldr	r1, [pc, #392]	; (8003690 <showCurrentParameters+0x260>)
 8003508:	485d      	ldr	r0, [pc, #372]	; (8003680 <showCurrentParameters+0x250>)
 800350a:	f00e f9e1 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800350e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2300      	movs	r3, #0
 800351a:	2232      	movs	r2, #50	; 0x32
 800351c:	2114      	movs	r1, #20
 800351e:	4858      	ldr	r0, [pc, #352]	; (8003680 <showCurrentParameters+0x250>)
 8003520:	f7fe fb00 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8003524:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <showCurrentParameters+0x264>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd f825 	bl	8000578 <__aeabi_f2d>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4959      	ldr	r1, [pc, #356]	; (8003698 <showCurrentParameters+0x268>)
 8003534:	4852      	ldr	r0, [pc, #328]	; (8003680 <showCurrentParameters+0x250>)
 8003536:	f00e f9cb 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800353a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	2301      	movs	r3, #1
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2300      	movs	r3, #0
 8003546:	2250      	movs	r2, #80	; 0x50
 8003548:	2114      	movs	r1, #20
 800354a:	484d      	ldr	r0, [pc, #308]	; (8003680 <showCurrentParameters+0x250>)
 800354c:	f7fe faea 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003550:	4b52      	ldr	r3, [pc, #328]	; (800369c <showCurrentParameters+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd f80f 	bl	8000578 <__aeabi_f2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4950      	ldr	r1, [pc, #320]	; (80036a0 <showCurrentParameters+0x270>)
 8003560:	4847      	ldr	r0, [pc, #284]	; (8003680 <showCurrentParameters+0x250>)
 8003562:	f00e f9b5 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003566:	f24c 6318 	movw	r3, #50712	; 0xc618
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	2300      	movs	r3, #0
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2300      	movs	r3, #0
 8003572:	226e      	movs	r2, #110	; 0x6e
 8003574:	2114      	movs	r1, #20
 8003576:	4842      	ldr	r0, [pc, #264]	; (8003680 <showCurrentParameters+0x250>)
 8003578:	f7fe fad4 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 800357c:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <showCurrentParameters+0x274>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4949      	ldr	r1, [pc, #292]	; (80036a8 <showCurrentParameters+0x278>)
 8003584:	483e      	ldr	r0, [pc, #248]	; (8003680 <showCurrentParameters+0x250>)
 8003586:	f00e f9a3 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800358a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	2300      	movs	r3, #0
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	228c      	movs	r2, #140	; 0x8c
 8003598:	2114      	movs	r1, #20
 800359a:	4839      	ldr	r0, [pc, #228]	; (8003680 <showCurrentParameters+0x250>)
 800359c:	f7fe fac2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80035a0:	4b42      	ldr	r3, [pc, #264]	; (80036ac <showCurrentParameters+0x27c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffe7 	bl	8000578 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4940      	ldr	r1, [pc, #256]	; (80036b0 <showCurrentParameters+0x280>)
 80035b0:	4833      	ldr	r0, [pc, #204]	; (8003680 <showCurrentParameters+0x250>)
 80035b2:	f00e f98d 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80035b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	2300      	movs	r3, #0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	22aa      	movs	r2, #170	; 0xaa
 80035c4:	2114      	movs	r1, #20
 80035c6:	482e      	ldr	r0, [pc, #184]	; (8003680 <showCurrentParameters+0x250>)
 80035c8:	f7fe faac 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80035cc:	4839      	ldr	r0, [pc, #228]	; (80036b4 <showCurrentParameters+0x284>)
 80035ce:	f7fe f88f 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80035d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	2305      	movs	r3, #5
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2314      	movs	r3, #20
 80035de:	225f      	movs	r2, #95	; 0x5f
 80035e0:	21d8      	movs	r1, #216	; 0xd8
 80035e2:	20dc      	movs	r0, #220	; 0xdc
 80035e4:	f7fe f833 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80035e8:	4933      	ldr	r1, [pc, #204]	; (80036b8 <showCurrentParameters+0x288>)
 80035ea:	4825      	ldr	r0, [pc, #148]	; (8003680 <showCurrentParameters+0x250>)
 80035ec:	f00e f970 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	22da      	movs	r2, #218	; 0xda
 80035fe:	21df      	movs	r1, #223	; 0xdf
 8003600:	481f      	ldr	r0, [pc, #124]	; (8003680 <showCurrentParameters+0x250>)
 8003602:	f7fe fa8f 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003606:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	2305      	movs	r3, #5
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2314      	movs	r3, #20
 8003612:	2264      	movs	r2, #100	; 0x64
 8003614:	21d8      	movs	r1, #216	; 0xd8
 8003616:	200a      	movs	r0, #10
 8003618:	f7fe f819 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 800361c:	4927      	ldr	r1, [pc, #156]	; (80036bc <showCurrentParameters+0x28c>)
 800361e:	4818      	ldr	r0, [pc, #96]	; (8003680 <showCurrentParameters+0x250>)
 8003620:	f00e f956 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	22da      	movs	r2, #218	; 0xda
 8003632:	2114      	movs	r1, #20
 8003634:	4812      	ldr	r0, [pc, #72]	; (8003680 <showCurrentParameters+0x250>)
 8003636:	f7fe fa75 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800363a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	2305      	movs	r3, #5
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2314      	movs	r3, #20
 8003646:	225a      	movs	r2, #90	; 0x5a
 8003648:	21d8      	movs	r1, #216	; 0xd8
 800364a:	2078      	movs	r0, #120	; 0x78
 800364c:	f7fd ffff 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003650:	491b      	ldr	r1, [pc, #108]	; (80036c0 <showCurrentParameters+0x290>)
 8003652:	480b      	ldr	r0, [pc, #44]	; (8003680 <showCurrentParameters+0x250>)
 8003654:	f00e f93c 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003658:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	2300      	movs	r3, #0
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2300      	movs	r3, #0
 8003664:	22da      	movs	r2, #218	; 0xda
 8003666:	2184      	movs	r1, #132	; 0x84
 8003668:	4805      	ldr	r0, [pc, #20]	; (8003680 <showCurrentParameters+0x250>)
 800366a:	f7fe fa5b 	bl	8001b24 <EF_PutString>
}
 800366e:	bf00      	nop
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08028f4c 	.word	0x08028f4c
 800367c:	08015588 	.word	0x08015588
 8003680:	200002fc 	.word	0x200002fc
 8003684:	08015598 	.word	0x08015598
 8003688:	080155a8 	.word	0x080155a8
 800368c:	080155b8 	.word	0x080155b8
 8003690:	080155c8 	.word	0x080155c8
 8003694:	20000294 	.word	0x20000294
 8003698:	080155d8 	.word	0x080155d8
 800369c:	200002a0 	.word	0x200002a0
 80036a0:	080155ec 	.word	0x080155ec
 80036a4:	200002a4 	.word	0x200002a4
 80036a8:	08015600 	.word	0x08015600
 80036ac:	2000029c 	.word	0x2000029c
 80036b0:	08015614 	.word	0x08015614
 80036b4:	08026fd4 	.word	0x08026fd4
 80036b8:	0801562c 	.word	0x0801562c
 80036bc:	08015638 	.word	0x08015638
 80036c0:	08015644 	.word	0x08015644

080036c4 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80036ca:	2015      	movs	r0, #21
 80036cc:	f005 f9e4 	bl	8008a98 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80036d0:	f24c 6018 	movw	r0, #50712	; 0xc618
 80036d4:	f7fe fc10 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80036d8:	485c      	ldr	r0, [pc, #368]	; (800384c <showControlPanel+0x188>)
 80036da:	f7fe f809 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80036de:	495c      	ldr	r1, [pc, #368]	; (8003850 <showControlPanel+0x18c>)
 80036e0:	485c      	ldr	r0, [pc, #368]	; (8003854 <showControlPanel+0x190>)
 80036e2:	f00e f8f5 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2300      	movs	r3, #0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	231f      	movs	r3, #31
 80036f2:	220a      	movs	r2, #10
 80036f4:	2123      	movs	r1, #35	; 0x23
 80036f6:	4857      	ldr	r0, [pc, #348]	; (8003854 <showControlPanel+0x190>)
 80036f8:	f7fe fa14 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80036fc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2329      	movs	r3, #41	; 0x29
 8003704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003708:	2129      	movs	r1, #41	; 0x29
 800370a:	2000      	movs	r0, #0
 800370c:	f7fd fd40 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003710:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	232b      	movs	r3, #43	; 0x2b
 8003718:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800371c:	212b      	movs	r1, #43	; 0x2b
 800371e:	2000      	movs	r0, #0
 8003720:	f7fd fd36 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8003724:	494c      	ldr	r1, [pc, #304]	; (8003858 <showControlPanel+0x194>)
 8003726:	484b      	ldr	r0, [pc, #300]	; (8003854 <showControlPanel+0x190>)
 8003728:	f00e f8d2 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800372c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	223c      	movs	r2, #60	; 0x3c
 800373a:	2114      	movs	r1, #20
 800373c:	4845      	ldr	r0, [pc, #276]	; (8003854 <showControlPanel+0x190>)
 800373e:	f7fe f9f1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8003742:	4946      	ldr	r1, [pc, #280]	; (800385c <showControlPanel+0x198>)
 8003744:	4843      	ldr	r0, [pc, #268]	; (8003854 <showControlPanel+0x190>)
 8003746:	f00e f8c3 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800374a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2301      	movs	r3, #1
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	225a      	movs	r2, #90	; 0x5a
 8003758:	2114      	movs	r1, #20
 800375a:	483e      	ldr	r0, [pc, #248]	; (8003854 <showControlPanel+0x190>)
 800375c:	f7fe f9e2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003760:	493f      	ldr	r1, [pc, #252]	; (8003860 <showControlPanel+0x19c>)
 8003762:	483c      	ldr	r0, [pc, #240]	; (8003854 <showControlPanel+0x190>)
 8003764:	f00e f8b4 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003768:	f24c 6318 	movw	r3, #50712	; 0xc618
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2300      	movs	r3, #0
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	2278      	movs	r2, #120	; 0x78
 8003776:	2114      	movs	r1, #20
 8003778:	4836      	ldr	r0, [pc, #216]	; (8003854 <showControlPanel+0x190>)
 800377a:	f7fe f9d3 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 800377e:	4939      	ldr	r1, [pc, #228]	; (8003864 <showControlPanel+0x1a0>)
 8003780:	4834      	ldr	r0, [pc, #208]	; (8003854 <showControlPanel+0x190>)
 8003782:	f00e f8a5 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003786:	f24c 6318 	movw	r3, #50712	; 0xc618
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2300      	movs	r3, #0
 8003792:	2296      	movs	r2, #150	; 0x96
 8003794:	2114      	movs	r1, #20
 8003796:	482f      	ldr	r0, [pc, #188]	; (8003854 <showControlPanel+0x190>)
 8003798:	f7fe f9c4 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800379c:	4832      	ldr	r0, [pc, #200]	; (8003868 <showControlPanel+0x1a4>)
 800379e:	f7fd ffa7 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80037a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	2305      	movs	r3, #5
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2314      	movs	r3, #20
 80037ae:	225f      	movs	r2, #95	; 0x5f
 80037b0:	21d8      	movs	r1, #216	; 0xd8
 80037b2:	20dc      	movs	r0, #220	; 0xdc
 80037b4:	f7fd ff4b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 80037b8:	492c      	ldr	r1, [pc, #176]	; (800386c <showControlPanel+0x1a8>)
 80037ba:	4826      	ldr	r0, [pc, #152]	; (8003854 <showControlPanel+0x190>)
 80037bc:	f00e f888 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	22da      	movs	r2, #218	; 0xda
 80037ce:	21df      	movs	r1, #223	; 0xdf
 80037d0:	4820      	ldr	r0, [pc, #128]	; (8003854 <showControlPanel+0x190>)
 80037d2:	f7fe f9a7 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80037d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	2305      	movs	r3, #5
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2314      	movs	r3, #20
 80037e2:	2264      	movs	r2, #100	; 0x64
 80037e4:	21d8      	movs	r1, #216	; 0xd8
 80037e6:	200a      	movs	r0, #10
 80037e8:	f7fd ff31 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80037ec:	4920      	ldr	r1, [pc, #128]	; (8003870 <showControlPanel+0x1ac>)
 80037ee:	4819      	ldr	r0, [pc, #100]	; (8003854 <showControlPanel+0x190>)
 80037f0:	f00e f86e 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	22da      	movs	r2, #218	; 0xda
 8003802:	2114      	movs	r1, #20
 8003804:	4813      	ldr	r0, [pc, #76]	; (8003854 <showControlPanel+0x190>)
 8003806:	f7fe f98d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800380a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	2305      	movs	r3, #5
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2314      	movs	r3, #20
 8003816:	225a      	movs	r2, #90	; 0x5a
 8003818:	21d8      	movs	r1, #216	; 0xd8
 800381a:	2078      	movs	r0, #120	; 0x78
 800381c:	f7fd ff17 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003820:	4914      	ldr	r1, [pc, #80]	; (8003874 <showControlPanel+0x1b0>)
 8003822:	480c      	ldr	r0, [pc, #48]	; (8003854 <showControlPanel+0x190>)
 8003824:	f00e f854 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003828:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	2300      	movs	r3, #0
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2300      	movs	r3, #0
 8003834:	22da      	movs	r2, #218	; 0xda
 8003836:	217e      	movs	r1, #126	; 0x7e
 8003838:	4806      	ldr	r0, [pc, #24]	; (8003854 <showControlPanel+0x190>)
 800383a:	f7fe f973 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800383e:	4803      	ldr	r0, [pc, #12]	; (800384c <showControlPanel+0x188>)
 8003840:	f7fd ff56 	bl	80016f0 <EF_SetFont>


}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	08028f4c 	.word	0x08028f4c
 8003850:	0801564c 	.word	0x0801564c
 8003854:	200002fc 	.word	0x200002fc
 8003858:	08015660 	.word	0x08015660
 800385c:	08015674 	.word	0x08015674
 8003860:	08015688 	.word	0x08015688
 8003864:	0801569c 	.word	0x0801569c
 8003868:	08026fd4 	.word	0x08026fd4
 800386c:	080156b0 	.word	0x080156b0
 8003870:	080156bc 	.word	0x080156bc
 8003874:	080156c4 	.word	0x080156c4

08003878 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800387e:	2016      	movs	r0, #22
 8003880:	f005 f90a 	bl	8008a98 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003884:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003888:	f7fe fb36 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800388c:	485b      	ldr	r0, [pc, #364]	; (80039fc <showLightsControlPanel+0x184>)
 800388e:	f7fd ff2f 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003892:	495b      	ldr	r1, [pc, #364]	; (8003a00 <showLightsControlPanel+0x188>)
 8003894:	485b      	ldr	r0, [pc, #364]	; (8003a04 <showLightsControlPanel+0x18c>)
 8003896:	f00e f81b 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800389a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	2300      	movs	r3, #0
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038a8:	220a      	movs	r2, #10
 80038aa:	2146      	movs	r1, #70	; 0x46
 80038ac:	4855      	ldr	r0, [pc, #340]	; (8003a04 <showLightsControlPanel+0x18c>)
 80038ae:	f7fe f939 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80038b2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2329      	movs	r3, #41	; 0x29
 80038ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038be:	2129      	movs	r1, #41	; 0x29
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7fd fc65 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80038c6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	232b      	movs	r3, #43	; 0x2b
 80038ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038d2:	212b      	movs	r1, #43	; 0x2b
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7fd fc5b 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80038da:	494b      	ldr	r1, [pc, #300]	; (8003a08 <showLightsControlPanel+0x190>)
 80038dc:	4849      	ldr	r0, [pc, #292]	; (8003a04 <showLightsControlPanel+0x18c>)
 80038de:	f00d fff7 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	223c      	movs	r2, #60	; 0x3c
 80038f0:	2114      	movs	r1, #20
 80038f2:	4844      	ldr	r0, [pc, #272]	; (8003a04 <showLightsControlPanel+0x18c>)
 80038f4:	f7fe f916 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80038f8:	4944      	ldr	r1, [pc, #272]	; (8003a0c <showLightsControlPanel+0x194>)
 80038fa:	4842      	ldr	r0, [pc, #264]	; (8003a04 <showLightsControlPanel+0x18c>)
 80038fc:	f00d ffe8 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003900:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2301      	movs	r3, #1
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	225a      	movs	r2, #90	; 0x5a
 800390e:	2114      	movs	r1, #20
 8003910:	483c      	ldr	r0, [pc, #240]	; (8003a04 <showLightsControlPanel+0x18c>)
 8003912:	f7fe f907 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003916:	493e      	ldr	r1, [pc, #248]	; (8003a10 <showLightsControlPanel+0x198>)
 8003918:	483a      	ldr	r0, [pc, #232]	; (8003a04 <showLightsControlPanel+0x18c>)
 800391a:	f00d ffd9 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800391e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2300      	movs	r3, #0
 800392a:	2278      	movs	r2, #120	; 0x78
 800392c:	2114      	movs	r1, #20
 800392e:	4835      	ldr	r0, [pc, #212]	; (8003a04 <showLightsControlPanel+0x18c>)
 8003930:	f7fe f8f8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003934:	4937      	ldr	r1, [pc, #220]	; (8003a14 <showLightsControlPanel+0x19c>)
 8003936:	4833      	ldr	r0, [pc, #204]	; (8003a04 <showLightsControlPanel+0x18c>)
 8003938:	f00d ffca 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800393c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	2296      	movs	r2, #150	; 0x96
 800394a:	2114      	movs	r1, #20
 800394c:	482d      	ldr	r0, [pc, #180]	; (8003a04 <showLightsControlPanel+0x18c>)
 800394e:	f7fe f8e9 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003952:	4831      	ldr	r0, [pc, #196]	; (8003a18 <showLightsControlPanel+0x1a0>)
 8003954:	f7fd fecc 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003958:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2305      	movs	r3, #5
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2314      	movs	r3, #20
 8003964:	225f      	movs	r2, #95	; 0x5f
 8003966:	21d8      	movs	r1, #216	; 0xd8
 8003968:	20dc      	movs	r0, #220	; 0xdc
 800396a:	f7fd fe70 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 800396e:	492b      	ldr	r1, [pc, #172]	; (8003a1c <showLightsControlPanel+0x1a4>)
 8003970:	4824      	ldr	r0, [pc, #144]	; (8003a04 <showLightsControlPanel+0x18c>)
 8003972:	f00d ffad 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003976:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2300      	movs	r3, #0
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	22da      	movs	r2, #218	; 0xda
 8003984:	21e6      	movs	r1, #230	; 0xe6
 8003986:	481f      	ldr	r0, [pc, #124]	; (8003a04 <showLightsControlPanel+0x18c>)
 8003988:	f7fe f8cc 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800398c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2305      	movs	r3, #5
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2314      	movs	r3, #20
 8003998:	225a      	movs	r2, #90	; 0x5a
 800399a:	21d8      	movs	r1, #216	; 0xd8
 800399c:	2078      	movs	r0, #120	; 0x78
 800399e:	f7fd fe56 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 80039a2:	491f      	ldr	r1, [pc, #124]	; (8003a20 <showLightsControlPanel+0x1a8>)
 80039a4:	4817      	ldr	r0, [pc, #92]	; (8003a04 <showLightsControlPanel+0x18c>)
 80039a6:	f00d ff93 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2300      	movs	r3, #0
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	22da      	movs	r2, #218	; 0xda
 80039b8:	217e      	movs	r1, #126	; 0x7e
 80039ba:	4812      	ldr	r0, [pc, #72]	; (8003a04 <showLightsControlPanel+0x18c>)
 80039bc:	f7fe f8b2 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80039c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2305      	movs	r3, #5
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2314      	movs	r3, #20
 80039cc:	2264      	movs	r2, #100	; 0x64
 80039ce:	21d8      	movs	r1, #216	; 0xd8
 80039d0:	200a      	movs	r0, #10
 80039d2:	f7fd fe3c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 80039d6:	4913      	ldr	r1, [pc, #76]	; (8003a24 <showLightsControlPanel+0x1ac>)
 80039d8:	480a      	ldr	r0, [pc, #40]	; (8003a04 <showLightsControlPanel+0x18c>)
 80039da:	f00d ff79 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	2300      	movs	r3, #0
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2300      	movs	r3, #0
 80039ea:	22da      	movs	r2, #218	; 0xda
 80039ec:	210d      	movs	r1, #13
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <showLightsControlPanel+0x18c>)
 80039f0:	f7fe f898 	bl	8001b24 <EF_PutString>


}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	08028f4c 	.word	0x08028f4c
 8003a00:	080156d0 	.word	0x080156d0
 8003a04:	200002fc 	.word	0x200002fc
 8003a08:	080156e0 	.word	0x080156e0
 8003a0c:	080156f0 	.word	0x080156f0
 8003a10:	08015700 	.word	0x08015700
 8003a14:	08015710 	.word	0x08015710
 8003a18:	08026fd4 	.word	0x08026fd4
 8003a1c:	08015720 	.word	0x08015720
 8003a20:	08015728 	.word	0x08015728
 8003a24:	08015734 	.word	0x08015734

08003a28 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003a2e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003a32:	f7fe fa61 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003a36:	48a2      	ldr	r0, [pc, #648]	; (8003cc0 <showClockSetPanel+0x298>)
 8003a38:	f7fd fe5a 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003a3c:	f7fe fec8 	bl	80027d0 <DS3231_GetHour>
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003a44:	f7fe fed0 	bl	80027e8 <DS3231_GetMinute>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003a4c:	f7fe feb4 	bl	80027b8 <DS3231_GetDayOfWeek>
 8003a50:	4603      	mov	r3, r0
 8003a52:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003a54:	499b      	ldr	r1, [pc, #620]	; (8003cc4 <showClockSetPanel+0x29c>)
 8003a56:	489c      	ldr	r0, [pc, #624]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003a58:	f00d ff3a 	bl	80118d0 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a6a:	220a      	movs	r2, #10
 8003a6c:	212f      	movs	r1, #47	; 0x2f
 8003a6e:	4896      	ldr	r0, [pc, #600]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003a70:	f7fe f858 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a74:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2329      	movs	r3, #41	; 0x29
 8003a7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a80:	2129      	movs	r1, #41	; 0x29
 8003a82:	2000      	movs	r0, #0
 8003a84:	f7fd fb84 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a88:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	232b      	movs	r3, #43	; 0x2b
 8003a90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a94:	212b      	movs	r1, #43	; 0x2b
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fd fb7a 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	498a      	ldr	r1, [pc, #552]	; (8003ccc <showClockSetPanel+0x2a4>)
 8003aa2:	4889      	ldr	r0, [pc, #548]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003aa4:	f00d ff14 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003aa8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2246      	movs	r2, #70	; 0x46
 8003ab6:	2114      	movs	r1, #20
 8003ab8:	4883      	ldr	r0, [pc, #524]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003aba:	f7fe f833 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003abe:	79bb      	ldrb	r3, [r7, #6]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4983      	ldr	r1, [pc, #524]	; (8003cd0 <showClockSetPanel+0x2a8>)
 8003ac4:	4880      	ldr	r0, [pc, #512]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003ac6:	f00d ff03 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003aca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	226e      	movs	r2, #110	; 0x6e
 8003ad8:	2114      	movs	r1, #20
 8003ada:	487b      	ldr	r0, [pc, #492]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003adc:	f7fe f822 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003ae0:	797b      	ldrb	r3, [r7, #5]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	497b      	ldr	r1, [pc, #492]	; (8003cd4 <showClockSetPanel+0x2ac>)
 8003ae6:	4878      	ldr	r0, [pc, #480]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003ae8:	f00d fef2 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003aec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	2301      	movs	r3, #1
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	2296      	movs	r2, #150	; 0x96
 8003afa:	2114      	movs	r1, #20
 8003afc:	4872      	ldr	r0, [pc, #456]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003afe:	f7fe f811 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003b02:	4875      	ldr	r0, [pc, #468]	; (8003cd8 <showClockSetPanel+0x2b0>)
 8003b04:	f7fd fdf4 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b08:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2305      	movs	r3, #5
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2315      	movs	r3, #21
 8003b14:	221e      	movs	r2, #30
 8003b16:	214b      	movs	r1, #75	; 0x4b
 8003b18:	20f0      	movs	r0, #240	; 0xf0
 8003b1a:	f7fd fd98 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003b1e:	496f      	ldr	r1, [pc, #444]	; (8003cdc <showClockSetPanel+0x2b4>)
 8003b20:	4869      	ldr	r0, [pc, #420]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003b22:	f00d fed5 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b26:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2300      	movs	r3, #0
 8003b32:	224d      	movs	r2, #77	; 0x4d
 8003b34:	21f3      	movs	r1, #243	; 0xf3
 8003b36:	4864      	ldr	r0, [pc, #400]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003b38:	f7fd fff4 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	2305      	movs	r3, #5
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2315      	movs	r3, #21
 8003b48:	221e      	movs	r2, #30
 8003b4a:	214b      	movs	r1, #75	; 0x4b
 8003b4c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b50:	f7fd fd7d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003b54:	4962      	ldr	r1, [pc, #392]	; (8003ce0 <showClockSetPanel+0x2b8>)
 8003b56:	485c      	ldr	r0, [pc, #368]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003b58:	f00d feba 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	224d      	movs	r2, #77	; 0x4d
 8003b6a:	f240 111d 	movw	r1, #285	; 0x11d
 8003b6e:	4856      	ldr	r0, [pc, #344]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003b70:	f7fd ffd8 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b74:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2315      	movs	r3, #21
 8003b80:	221e      	movs	r2, #30
 8003b82:	2173      	movs	r1, #115	; 0x73
 8003b84:	20f0      	movs	r0, #240	; 0xf0
 8003b86:	f7fd fd62 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003b8a:	4954      	ldr	r1, [pc, #336]	; (8003cdc <showClockSetPanel+0x2b4>)
 8003b8c:	484e      	ldr	r0, [pc, #312]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003b8e:	f00d fe9f 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b92:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2275      	movs	r2, #117	; 0x75
 8003ba0:	21f5      	movs	r1, #245	; 0xf5
 8003ba2:	4849      	ldr	r0, [pc, #292]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003ba4:	f7fd ffbe 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ba8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2305      	movs	r3, #5
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2315      	movs	r3, #21
 8003bb4:	221e      	movs	r2, #30
 8003bb6:	2173      	movs	r1, #115	; 0x73
 8003bb8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003bbc:	f7fd fd47 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003bc0:	4948      	ldr	r1, [pc, #288]	; (8003ce4 <showClockSetPanel+0x2bc>)
 8003bc2:	4841      	ldr	r0, [pc, #260]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003bc4:	f00d fe84 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bc8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2275      	movs	r2, #117	; 0x75
 8003bd6:	f240 111b 	movw	r1, #283	; 0x11b
 8003bda:	483b      	ldr	r0, [pc, #236]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003bdc:	f7fd ffa2 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2305      	movs	r3, #5
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2315      	movs	r3, #21
 8003bec:	221e      	movs	r2, #30
 8003bee:	219b      	movs	r1, #155	; 0x9b
 8003bf0:	20f0      	movs	r0, #240	; 0xf0
 8003bf2:	f7fd fd2c 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003bf6:	493c      	ldr	r1, [pc, #240]	; (8003ce8 <showClockSetPanel+0x2c0>)
 8003bf8:	4833      	ldr	r0, [pc, #204]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003bfa:	f00d fe69 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bfe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	229d      	movs	r2, #157	; 0x9d
 8003c0c:	21f3      	movs	r1, #243	; 0xf3
 8003c0e:	482e      	ldr	r0, [pc, #184]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003c10:	f7fd ff88 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003c14:	4830      	ldr	r0, [pc, #192]	; (8003cd8 <showClockSetPanel+0x2b0>)
 8003c16:	f7fd fd6b 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	2305      	movs	r3, #5
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2314      	movs	r3, #20
 8003c26:	225f      	movs	r2, #95	; 0x5f
 8003c28:	21d8      	movs	r1, #216	; 0xd8
 8003c2a:	20dc      	movs	r0, #220	; 0xdc
 8003c2c:	f7fd fd0f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003c30:	492e      	ldr	r1, [pc, #184]	; (8003cec <showClockSetPanel+0x2c4>)
 8003c32:	4825      	ldr	r0, [pc, #148]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003c34:	f00d fe4c 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	22da      	movs	r2, #218	; 0xda
 8003c46:	21e6      	movs	r1, #230	; 0xe6
 8003c48:	481f      	ldr	r0, [pc, #124]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003c4a:	f7fd ff6b 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c4e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	2305      	movs	r3, #5
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2316      	movs	r3, #22
 8003c5a:	22aa      	movs	r2, #170	; 0xaa
 8003c5c:	21be      	movs	r1, #190	; 0xbe
 8003c5e:	2050      	movs	r0, #80	; 0x50
 8003c60:	f7fd fcf5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003c64:	4922      	ldr	r1, [pc, #136]	; (8003cf0 <showClockSetPanel+0x2c8>)
 8003c66:	4818      	ldr	r0, [pc, #96]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003c68:	f00d fe32 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	22c1      	movs	r2, #193	; 0xc1
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003c7e:	f7fd ff51 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	2305      	movs	r3, #5
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2314      	movs	r3, #20
 8003c8e:	2264      	movs	r2, #100	; 0x64
 8003c90:	21d8      	movs	r1, #216	; 0xd8
 8003c92:	200a      	movs	r0, #10
 8003c94:	f7fd fcdb 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003c98:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <showClockSetPanel+0x2cc>)
 8003c9a:	480b      	ldr	r0, [pc, #44]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003c9c:	f00d fe18 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ca0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	22da      	movs	r2, #218	; 0xda
 8003cae:	210d      	movs	r1, #13
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <showClockSetPanel+0x2a0>)
 8003cb2:	f7fd ff37 	bl	8001b24 <EF_PutString>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08028f4c 	.word	0x08028f4c
 8003cc4:	08015740 	.word	0x08015740
 8003cc8:	200002fc 	.word	0x200002fc
 8003ccc:	08015750 	.word	0x08015750
 8003cd0:	0801575c 	.word	0x0801575c
 8003cd4:	0801576c 	.word	0x0801576c
 8003cd8:	08026fd4 	.word	0x08026fd4
 8003cdc:	0801577c 	.word	0x0801577c
 8003ce0:	08015780 	.word	0x08015780
 8003ce4:	08015784 	.word	0x08015784
 8003ce8:	08015788 	.word	0x08015788
 8003cec:	0801578c 	.word	0x0801578c
 8003cf0:	08015794 	.word	0x08015794
 8003cf4:	080157a4 	.word	0x080157a4

08003cf8 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cfe:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003d02:	f7fe f8f9 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003d06:	487a      	ldr	r0, [pc, #488]	; (8003ef0 <showPreparedActivitiesPanel+0x1f8>)
 8003d08:	f7fd fcf2 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003d0c:	4979      	ldr	r1, [pc, #484]	; (8003ef4 <showPreparedActivitiesPanel+0x1fc>)
 8003d0e:	487a      	ldr	r0, [pc, #488]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003d10:	f00d fdde 	bl	80118d0 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	231f      	movs	r3, #31
 8003d20:	220a      	movs	r2, #10
 8003d22:	212f      	movs	r1, #47	; 0x2f
 8003d24:	4874      	ldr	r0, [pc, #464]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003d26:	f7fd fefd 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003d2a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2329      	movs	r3, #41	; 0x29
 8003d32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d36:	2129      	movs	r1, #41	; 0x29
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fd fa29 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d3e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	232b      	movs	r3, #43	; 0x2b
 8003d46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d4a:	212b      	movs	r1, #43	; 0x2b
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fd fa1f 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003d52:	486a      	ldr	r0, [pc, #424]	; (8003efc <showPreparedActivitiesPanel+0x204>)
 8003d54:	f7fd fccc 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2305      	movs	r3, #5
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2314      	movs	r3, #20
 8003d64:	2264      	movs	r2, #100	; 0x64
 8003d66:	21d8      	movs	r1, #216	; 0xd8
 8003d68:	200a      	movs	r0, #10
 8003d6a:	f7fd fc70 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d6e:	4964      	ldr	r1, [pc, #400]	; (8003f00 <showPreparedActivitiesPanel+0x208>)
 8003d70:	4861      	ldr	r0, [pc, #388]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003d72:	f00d fdad 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	22da      	movs	r2, #218	; 0xda
 8003d84:	210d      	movs	r1, #13
 8003d86:	485c      	ldr	r0, [pc, #368]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003d88:	f7fd fecc 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003d8c:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <showPreparedActivitiesPanel+0x20c>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d029      	beq.n	8003de8 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	230a      	movs	r3, #10
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2328      	movs	r3, #40	; 0x28
 8003da0:	2278      	movs	r2, #120	; 0x78
 8003da2:	213c      	movs	r1, #60	; 0x3c
 8003da4:	2064      	movs	r0, #100	; 0x64
 8003da6:	f7fd fc52 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003daa:	4957      	ldr	r1, [pc, #348]	; (8003f08 <showPreparedActivitiesPanel+0x210>)
 8003dac:	4852      	ldr	r0, [pc, #328]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003dae:	f00d fd8f 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003db2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	2300      	movs	r3, #0
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	223e      	movs	r2, #62	; 0x3e
 8003dc0:	2177      	movs	r1, #119	; 0x77
 8003dc2:	484d      	ldr	r0, [pc, #308]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003dc4:	f7fd feae 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003dc8:	4950      	ldr	r1, [pc, #320]	; (8003f0c <showPreparedActivitiesPanel+0x214>)
 8003dca:	484b      	ldr	r0, [pc, #300]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003dcc:	f00d fd80 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2250      	movs	r2, #80	; 0x50
 8003dde:	2193      	movs	r1, #147	; 0x93
 8003de0:	4845      	ldr	r0, [pc, #276]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003de2:	f7fd fe9f 	bl	8001b24 <EF_PutString>
 8003de6:	e028      	b.n	8003e3a <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003de8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	230a      	movs	r3, #10
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2328      	movs	r3, #40	; 0x28
 8003df4:	2278      	movs	r2, #120	; 0x78
 8003df6:	213c      	movs	r1, #60	; 0x3c
 8003df8:	2064      	movs	r0, #100	; 0x64
 8003dfa:	f7fd fc28 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003dfe:	4942      	ldr	r1, [pc, #264]	; (8003f08 <showPreparedActivitiesPanel+0x210>)
 8003e00:	483d      	ldr	r0, [pc, #244]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e02:	f00d fd65 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	223e      	movs	r2, #62	; 0x3e
 8003e14:	2177      	movs	r1, #119	; 0x77
 8003e16:	4838      	ldr	r0, [pc, #224]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e18:	f7fd fe84 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003e1c:	493c      	ldr	r1, [pc, #240]	; (8003f10 <showPreparedActivitiesPanel+0x218>)
 8003e1e:	4836      	ldr	r0, [pc, #216]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e20:	f00d fd56 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2250      	movs	r2, #80	; 0x50
 8003e32:	2193      	movs	r1, #147	; 0x93
 8003e34:	4830      	ldr	r0, [pc, #192]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e36:	f7fd fe75 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003e3a:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <showPreparedActivitiesPanel+0x20c>)
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d029      	beq.n	8003e96 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	230a      	movs	r3, #10
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2328      	movs	r3, #40	; 0x28
 8003e4e:	2278      	movs	r2, #120	; 0x78
 8003e50:	2178      	movs	r1, #120	; 0x78
 8003e52:	2064      	movs	r0, #100	; 0x64
 8003e54:	f7fd fbfb 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e58:	492e      	ldr	r1, [pc, #184]	; (8003f14 <showPreparedActivitiesPanel+0x21c>)
 8003e5a:	4827      	ldr	r0, [pc, #156]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e5c:	f00d fd38 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	2300      	movs	r3, #0
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	227a      	movs	r2, #122	; 0x7a
 8003e6e:	2169      	movs	r1, #105	; 0x69
 8003e70:	4821      	ldr	r0, [pc, #132]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e72:	f7fd fe57 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003e76:	4925      	ldr	r1, [pc, #148]	; (8003f0c <showPreparedActivitiesPanel+0x214>)
 8003e78:	481f      	ldr	r0, [pc, #124]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e7a:	f00d fd29 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e7e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	2300      	movs	r3, #0
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	228c      	movs	r2, #140	; 0x8c
 8003e8c:	2193      	movs	r1, #147	; 0x93
 8003e8e:	481a      	ldr	r0, [pc, #104]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003e90:	f7fd fe48 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003e94:	e028      	b.n	8003ee8 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	230a      	movs	r3, #10
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2328      	movs	r3, #40	; 0x28
 8003ea2:	2278      	movs	r2, #120	; 0x78
 8003ea4:	2178      	movs	r1, #120	; 0x78
 8003ea6:	2064      	movs	r0, #100	; 0x64
 8003ea8:	f7fd fbd1 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003eac:	4919      	ldr	r1, [pc, #100]	; (8003f14 <showPreparedActivitiesPanel+0x21c>)
 8003eae:	4812      	ldr	r0, [pc, #72]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003eb0:	f00d fd0e 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003eb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	227a      	movs	r2, #122	; 0x7a
 8003ec2:	2169      	movs	r1, #105	; 0x69
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003ec6:	f7fd fe2d 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003eca:	4911      	ldr	r1, [pc, #68]	; (8003f10 <showPreparedActivitiesPanel+0x218>)
 8003ecc:	480a      	ldr	r0, [pc, #40]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003ece:	f00d fcff 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ed2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	228c      	movs	r2, #140	; 0x8c
 8003ee0:	2193      	movs	r1, #147	; 0x93
 8003ee2:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <showPreparedActivitiesPanel+0x200>)
 8003ee4:	f7fd fe1e 	bl	8001b24 <EF_PutString>
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	08028f4c 	.word	0x08028f4c
 8003ef4:	080157ac 	.word	0x080157ac
 8003ef8:	200002fc 	.word	0x200002fc
 8003efc:	08026fd4 	.word	0x08026fd4
 8003f00:	080157a4 	.word	0x080157a4
 8003f04:	200002b0 	.word	0x200002b0
 8003f08:	080157bc 	.word	0x080157bc
 8003f0c:	080157c8 	.word	0x080157c8
 8003f10:	080157cc 	.word	0x080157cc
 8003f14:	080157d0 	.word	0x080157d0

08003f18 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003f1e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003f22:	f7fd ffe9 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003f26:	48c7      	ldr	r0, [pc, #796]	; (8004244 <showWSLedPanel+0x32c>)
 8003f28:	f7fd fbe2 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003f2c:	49c6      	ldr	r1, [pc, #792]	; (8004248 <showWSLedPanel+0x330>)
 8003f2e:	48c7      	ldr	r0, [pc, #796]	; (800424c <showWSLedPanel+0x334>)
 8003f30:	f00d fcce 	bl	80118d0 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f34:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	231f      	movs	r3, #31
 8003f40:	220a      	movs	r2, #10
 8003f42:	2146      	movs	r1, #70	; 0x46
 8003f44:	48c1      	ldr	r0, [pc, #772]	; (800424c <showWSLedPanel+0x334>)
 8003f46:	f7fd fded 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003f4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2329      	movs	r3, #41	; 0x29
 8003f52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f56:	2129      	movs	r1, #41	; 0x29
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fd f919 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003f5e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	232b      	movs	r3, #43	; 0x2b
 8003f66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f6a:	212b      	movs	r1, #43	; 0x2b
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fd f90f 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003f72:	4bb7      	ldr	r3, [pc, #732]	; (8004250 <showWSLedPanel+0x338>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	49b6      	ldr	r1, [pc, #728]	; (8004254 <showWSLedPanel+0x33c>)
 8003f7a:	48b4      	ldr	r0, [pc, #720]	; (800424c <showWSLedPanel+0x334>)
 8003f7c:	f00d fca8 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	223c      	movs	r2, #60	; 0x3c
 8003f8e:	2114      	movs	r1, #20
 8003f90:	48ae      	ldr	r0, [pc, #696]	; (800424c <showWSLedPanel+0x334>)
 8003f92:	f7fd fdc7 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003f96:	49b0      	ldr	r1, [pc, #704]	; (8004258 <showWSLedPanel+0x340>)
 8003f98:	48ac      	ldr	r0, [pc, #688]	; (800424c <showWSLedPanel+0x334>)
 8003f9a:	f00d fc99 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f9e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	225a      	movs	r2, #90	; 0x5a
 8003fac:	2114      	movs	r1, #20
 8003fae:	48a7      	ldr	r0, [pc, #668]	; (800424c <showWSLedPanel+0x334>)
 8003fb0:	f7fd fdb8 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003fb4:	49a9      	ldr	r1, [pc, #676]	; (800425c <showWSLedPanel+0x344>)
 8003fb6:	48a5      	ldr	r0, [pc, #660]	; (800424c <showWSLedPanel+0x334>)
 8003fb8:	f00d fc8a 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003fbc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2278      	movs	r2, #120	; 0x78
 8003fca:	2114      	movs	r1, #20
 8003fcc:	489f      	ldr	r0, [pc, #636]	; (800424c <showWSLedPanel+0x334>)
 8003fce:	f7fd fda9 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003fd2:	48a3      	ldr	r0, [pc, #652]	; (8004260 <showWSLedPanel+0x348>)
 8003fd4:	f7fd fb8c 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003fd8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	2305      	movs	r3, #5
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2315      	movs	r3, #21
 8003fe4:	221e      	movs	r2, #30
 8003fe6:	2141      	movs	r1, #65	; 0x41
 8003fe8:	20d9      	movs	r0, #217	; 0xd9
 8003fea:	f7fd fb30 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003fee:	499d      	ldr	r1, [pc, #628]	; (8004264 <showWSLedPanel+0x34c>)
 8003ff0:	4896      	ldr	r0, [pc, #600]	; (800424c <showWSLedPanel+0x334>)
 8003ff2:	f00d fc6d 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ff6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	2243      	movs	r2, #67	; 0x43
 8004004:	21df      	movs	r1, #223	; 0xdf
 8004006:	4891      	ldr	r0, [pc, #580]	; (800424c <showWSLedPanel+0x334>)
 8004008:	f7fd fd8c 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800400c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2305      	movs	r3, #5
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2315      	movs	r3, #21
 8004018:	221e      	movs	r2, #30
 800401a:	2141      	movs	r1, #65	; 0x41
 800401c:	20fc      	movs	r0, #252	; 0xfc
 800401e:	f7fd fb16 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8004022:	4991      	ldr	r1, [pc, #580]	; (8004268 <showWSLedPanel+0x350>)
 8004024:	4889      	ldr	r0, [pc, #548]	; (800424c <showWSLedPanel+0x334>)
 8004026:	f00d fc53 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800402a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	2243      	movs	r2, #67	; 0x43
 8004038:	f240 1101 	movw	r1, #257	; 0x101
 800403c:	4883      	ldr	r0, [pc, #524]	; (800424c <showWSLedPanel+0x334>)
 800403e:	f7fd fd71 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004042:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	2305      	movs	r3, #5
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2315      	movs	r3, #21
 800404e:	221e      	movs	r2, #30
 8004050:	2141      	movs	r1, #65	; 0x41
 8004052:	f240 101f 	movw	r0, #287	; 0x11f
 8004056:	f7fd fafa 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 800405a:	4984      	ldr	r1, [pc, #528]	; (800426c <showWSLedPanel+0x354>)
 800405c:	487b      	ldr	r0, [pc, #492]	; (800424c <showWSLedPanel+0x334>)
 800405e:	f00d fc37 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004062:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	2243      	movs	r2, #67	; 0x43
 8004070:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004074:	4875      	ldr	r0, [pc, #468]	; (800424c <showWSLedPanel+0x334>)
 8004076:	f7fd fd55 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800407a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	2305      	movs	r3, #5
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2315      	movs	r3, #21
 8004086:	2228      	movs	r2, #40	; 0x28
 8004088:	215f      	movs	r1, #95	; 0x5f
 800408a:	2096      	movs	r0, #150	; 0x96
 800408c:	f7fd fadf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004090:	4977      	ldr	r1, [pc, #476]	; (8004270 <showWSLedPanel+0x358>)
 8004092:	486e      	ldr	r0, [pc, #440]	; (800424c <showWSLedPanel+0x334>)
 8004094:	f00d fc1c 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	2300      	movs	r3, #0
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	2261      	movs	r2, #97	; 0x61
 80040a6:	219b      	movs	r1, #155	; 0x9b
 80040a8:	4868      	ldr	r0, [pc, #416]	; (800424c <showWSLedPanel+0x334>)
 80040aa:	f7fd fd3b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80040ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2305      	movs	r3, #5
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2315      	movs	r3, #21
 80040ba:	2228      	movs	r2, #40	; 0x28
 80040bc:	215f      	movs	r1, #95	; 0x5f
 80040be:	20ca      	movs	r0, #202	; 0xca
 80040c0:	f7fd fac5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 80040c4:	496b      	ldr	r1, [pc, #428]	; (8004274 <showWSLedPanel+0x35c>)
 80040c6:	4861      	ldr	r0, [pc, #388]	; (800424c <showWSLedPanel+0x334>)
 80040c8:	f00d fc02 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80040cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	2300      	movs	r3, #0
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2300      	movs	r3, #0
 80040d8:	2261      	movs	r2, #97	; 0x61
 80040da:	21d2      	movs	r1, #210	; 0xd2
 80040dc:	485b      	ldr	r0, [pc, #364]	; (800424c <showWSLedPanel+0x334>)
 80040de:	f7fd fd21 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80040e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	2305      	movs	r3, #5
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2315      	movs	r3, #21
 80040ee:	2228      	movs	r2, #40	; 0x28
 80040f0:	215f      	movs	r1, #95	; 0x5f
 80040f2:	20fe      	movs	r0, #254	; 0xfe
 80040f4:	f7fd faab 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80040f8:	495f      	ldr	r1, [pc, #380]	; (8004278 <showWSLedPanel+0x360>)
 80040fa:	4854      	ldr	r0, [pc, #336]	; (800424c <showWSLedPanel+0x334>)
 80040fc:	f00d fbe8 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	2261      	movs	r2, #97	; 0x61
 800410e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004112:	484e      	ldr	r0, [pc, #312]	; (800424c <showWSLedPanel+0x334>)
 8004114:	f7fd fd06 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004118:	231f      	movs	r3, #31
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	2305      	movs	r3, #5
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2315      	movs	r3, #21
 8004122:	2228      	movs	r2, #40	; 0x28
 8004124:	217d      	movs	r1, #125	; 0x7d
 8004126:	2096      	movs	r0, #150	; 0x96
 8004128:	f7fd fa91 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800412c:	4950      	ldr	r1, [pc, #320]	; (8004270 <showWSLedPanel+0x358>)
 800412e:	4847      	ldr	r0, [pc, #284]	; (800424c <showWSLedPanel+0x334>)
 8004130:	f00d fbce 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004134:	231f      	movs	r3, #31
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	2300      	movs	r3, #0
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2300      	movs	r3, #0
 800413e:	227f      	movs	r2, #127	; 0x7f
 8004140:	219b      	movs	r1, #155	; 0x9b
 8004142:	4842      	ldr	r0, [pc, #264]	; (800424c <showWSLedPanel+0x334>)
 8004144:	f7fd fcee 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004148:	231f      	movs	r3, #31
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	2305      	movs	r3, #5
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2315      	movs	r3, #21
 8004152:	2228      	movs	r2, #40	; 0x28
 8004154:	217d      	movs	r1, #125	; 0x7d
 8004156:	20ca      	movs	r0, #202	; 0xca
 8004158:	f7fd fa79 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800415c:	4945      	ldr	r1, [pc, #276]	; (8004274 <showWSLedPanel+0x35c>)
 800415e:	483b      	ldr	r0, [pc, #236]	; (800424c <showWSLedPanel+0x334>)
 8004160:	f00d fbb6 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004164:	231f      	movs	r3, #31
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2300      	movs	r3, #0
 800416e:	227f      	movs	r2, #127	; 0x7f
 8004170:	21d2      	movs	r1, #210	; 0xd2
 8004172:	4836      	ldr	r0, [pc, #216]	; (800424c <showWSLedPanel+0x334>)
 8004174:	f7fd fcd6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004178:	231f      	movs	r3, #31
 800417a:	9301      	str	r3, [sp, #4]
 800417c:	2305      	movs	r3, #5
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2315      	movs	r3, #21
 8004182:	2228      	movs	r2, #40	; 0x28
 8004184:	217d      	movs	r1, #125	; 0x7d
 8004186:	20fe      	movs	r0, #254	; 0xfe
 8004188:	f7fd fa61 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 800418c:	493a      	ldr	r1, [pc, #232]	; (8004278 <showWSLedPanel+0x360>)
 800418e:	482f      	ldr	r0, [pc, #188]	; (800424c <showWSLedPanel+0x334>)
 8004190:	f00d fb9e 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004194:	231f      	movs	r3, #31
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	2300      	movs	r3, #0
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2300      	movs	r3, #0
 800419e:	227f      	movs	r2, #127	; 0x7f
 80041a0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80041a4:	4829      	ldr	r0, [pc, #164]	; (800424c <showWSLedPanel+0x334>)
 80041a6:	f7fd fcbd 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 80041aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	2305      	movs	r3, #5
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2315      	movs	r3, #21
 80041b6:	2250      	movs	r2, #80	; 0x50
 80041b8:	219c      	movs	r1, #156	; 0x9c
 80041ba:	2014      	movs	r0, #20
 80041bc:	f7fd fa47 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 80041c0:	492e      	ldr	r1, [pc, #184]	; (800427c <showWSLedPanel+0x364>)
 80041c2:	4822      	ldr	r0, [pc, #136]	; (800424c <showWSLedPanel+0x334>)
 80041c4:	f00d fb84 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 80041c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	229e      	movs	r2, #158	; 0x9e
 80041d6:	211c      	movs	r1, #28
 80041d8:	481c      	ldr	r0, [pc, #112]	; (800424c <showWSLedPanel+0x334>)
 80041da:	f7fd fca3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80041de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	2305      	movs	r3, #5
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2315      	movs	r3, #21
 80041ea:	2250      	movs	r2, #80	; 0x50
 80041ec:	219c      	movs	r1, #156	; 0x9c
 80041ee:	2078      	movs	r0, #120	; 0x78
 80041f0:	f7fd fa2d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80041f4:	4922      	ldr	r1, [pc, #136]	; (8004280 <showWSLedPanel+0x368>)
 80041f6:	4815      	ldr	r0, [pc, #84]	; (800424c <showWSLedPanel+0x334>)
 80041f8:	f00d fb6a 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	229e      	movs	r2, #158	; 0x9e
 800420a:	2187      	movs	r1, #135	; 0x87
 800420c:	480f      	ldr	r0, [pc, #60]	; (800424c <showWSLedPanel+0x334>)
 800420e:	f7fd fc89 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 8004212:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	2305      	movs	r3, #5
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2315      	movs	r3, #21
 800421e:	2250      	movs	r2, #80	; 0x50
 8004220:	219c      	movs	r1, #156	; 0x9c
 8004222:	20dc      	movs	r0, #220	; 0xdc
 8004224:	f7fd fa13 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <showWSLedPanel+0x36c>)
 800422a:	4808      	ldr	r0, [pc, #32]	; (800424c <showWSLedPanel+0x334>)
 800422c:	f00d fb50 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8004230:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	2300      	movs	r3, #0
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	229e      	movs	r2, #158	; 0x9e
 800423e:	21e9      	movs	r1, #233	; 0xe9
 8004240:	e022      	b.n	8004288 <showWSLedPanel+0x370>
 8004242:	bf00      	nop
 8004244:	08028f4c 	.word	0x08028f4c
 8004248:	080157dc 	.word	0x080157dc
 800424c:	200002fc 	.word	0x200002fc
 8004250:	20000033 	.word	0x20000033
 8004254:	080157e8 	.word	0x080157e8
 8004258:	080157f8 	.word	0x080157f8
 800425c:	08015800 	.word	0x08015800
 8004260:	08026fd4 	.word	0x08026fd4
 8004264:	0801577c 	.word	0x0801577c
 8004268:	08015784 	.word	0x08015784
 800426c:	08015808 	.word	0x08015808
 8004270:	0801580c 	.word	0x0801580c
 8004274:	08015810 	.word	0x08015810
 8004278:	08015814 	.word	0x08015814
 800427c:	08015818 	.word	0x08015818
 8004280:	080157cc 	.word	0x080157cc
 8004284:	08015820 	.word	0x08015820
 8004288:	482b      	ldr	r0, [pc, #172]	; (8004338 <showWSLedPanel+0x420>)
 800428a:	f7fd fc4b 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800428e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	2305      	movs	r3, #5
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2315      	movs	r3, #21
 800429a:	2250      	movs	r2, #80	; 0x50
 800429c:	21bb      	movs	r1, #187	; 0xbb
 800429e:	2046      	movs	r0, #70	; 0x46
 80042a0:	f7fd f9d5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 80042a4:	4925      	ldr	r1, [pc, #148]	; (800433c <showWSLedPanel+0x424>)
 80042a6:	4824      	ldr	r0, [pc, #144]	; (8004338 <showWSLedPanel+0x420>)
 80042a8:	f00d fb12 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80042ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	2300      	movs	r3, #0
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	22bd      	movs	r2, #189	; 0xbd
 80042ba:	214e      	movs	r1, #78	; 0x4e
 80042bc:	481e      	ldr	r0, [pc, #120]	; (8004338 <showWSLedPanel+0x420>)
 80042be:	f7fd fc31 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 80042c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	2305      	movs	r3, #5
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2315      	movs	r3, #21
 80042ce:	2250      	movs	r2, #80	; 0x50
 80042d0:	21bb      	movs	r1, #187	; 0xbb
 80042d2:	20aa      	movs	r0, #170	; 0xaa
 80042d4:	f7fd f9bb 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 80042d8:	4919      	ldr	r1, [pc, #100]	; (8004340 <showWSLedPanel+0x428>)
 80042da:	4817      	ldr	r0, [pc, #92]	; (8004338 <showWSLedPanel+0x420>)
 80042dc:	f00d faf8 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80042e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2300      	movs	r3, #0
 80042ec:	22bd      	movs	r2, #189	; 0xbd
 80042ee:	21b5      	movs	r1, #181	; 0xb5
 80042f0:	4811      	ldr	r0, [pc, #68]	; (8004338 <showWSLedPanel+0x420>)
 80042f2:	f7fd fc17 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80042f6:	4813      	ldr	r0, [pc, #76]	; (8004344 <showWSLedPanel+0x42c>)
 80042f8:	f7fd f9fa 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80042fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	2305      	movs	r3, #5
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2314      	movs	r3, #20
 8004308:	2264      	movs	r2, #100	; 0x64
 800430a:	21d8      	movs	r1, #216	; 0xd8
 800430c:	200a      	movs	r0, #10
 800430e:	f7fd f99e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8004312:	490d      	ldr	r1, [pc, #52]	; (8004348 <showWSLedPanel+0x430>)
 8004314:	4808      	ldr	r0, [pc, #32]	; (8004338 <showWSLedPanel+0x420>)
 8004316:	f00d fadb 	bl	80118d0 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800431a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	2300      	movs	r3, #0
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2300      	movs	r3, #0
 8004326:	22da      	movs	r2, #218	; 0xda
 8004328:	210d      	movs	r1, #13
 800432a:	4803      	ldr	r0, [pc, #12]	; (8004338 <showWSLedPanel+0x420>)
 800432c:	f7fd fbfa 	bl	8001b24 <EF_PutString>


}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200002fc 	.word	0x200002fc
 800433c:	08015828 	.word	0x08015828
 8004340:	08015830 	.word	0x08015830
 8004344:	08026fd4 	.word	0x08026fd4
 8004348:	080157a4 	.word	0x080157a4

0800434c <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b090      	sub	sp, #64	; 0x40
 8004350:	af02      	add	r7, sp, #8
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 8004386:	2300      	movs	r3, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800438e:	2100      	movs	r1, #0
 8004390:	460a      	mov	r2, r1
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	460a      	mov	r2, r1
 8004396:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	f107 0320 	add.w	r3, r7, #32
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	f107 0318 	add.w	r3, r7, #24
 80043ae:	2100      	movs	r1, #0
 80043b0:	460a      	mov	r2, r1
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	460a      	mov	r2, r1
 80043b6:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	2305      	movs	r3, #5
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2314      	movs	r3, #20
 80043d2:	2214      	movs	r2, #20
 80043d4:	2132      	movs	r1, #50	; 0x32
 80043d6:	203c      	movs	r0, #60	; 0x3c
 80043d8:	f7fd f8bc 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	2305      	movs	r3, #5
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2314      	movs	r3, #20
 80043e8:	2214      	movs	r2, #20
 80043ea:	2132      	movs	r1, #50	; 0x32
 80043ec:	205a      	movs	r0, #90	; 0x5a
 80043ee:	f7fd f8b1 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	2305      	movs	r3, #5
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2314      	movs	r3, #20
 80043fe:	2214      	movs	r2, #20
 8004400:	2132      	movs	r1, #50	; 0x32
 8004402:	2078      	movs	r0, #120	; 0x78
 8004404:	f7fd f8a6 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004408:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	2305      	movs	r3, #5
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	2314      	movs	r3, #20
 8004414:	2214      	movs	r2, #20
 8004416:	2132      	movs	r1, #50	; 0x32
 8004418:	2096      	movs	r0, #150	; 0x96
 800441a:	f7fd f89b 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800441e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	2305      	movs	r3, #5
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2314      	movs	r3, #20
 800442a:	2214      	movs	r2, #20
 800442c:	2132      	movs	r1, #50	; 0x32
 800442e:	20b4      	movs	r0, #180	; 0xb4
 8004430:	f7fd f890 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004434:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	2305      	movs	r3, #5
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2314      	movs	r3, #20
 8004440:	2214      	movs	r2, #20
 8004442:	2132      	movs	r1, #50	; 0x32
 8004444:	20d2      	movs	r0, #210	; 0xd2
 8004446:	f7fd f885 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800444a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	2305      	movs	r3, #5
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2314      	movs	r3, #20
 8004456:	2214      	movs	r2, #20
 8004458:	2132      	movs	r1, #50	; 0x32
 800445a:	20f0      	movs	r0, #240	; 0xf0
 800445c:	f7fd f87a 	bl	8001554 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 feda 	bl	800521c <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 ff43 	bl	80052f6 <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004470:	48cc      	ldr	r0, [pc, #816]	; (80047a4 <drawschedulePanel+0x458>)
 8004472:	f7fd f93d 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 8004476:	49cc      	ldr	r1, [pc, #816]	; (80047a8 <drawschedulePanel+0x45c>)
 8004478:	48cc      	ldr	r0, [pc, #816]	; (80047ac <drawschedulePanel+0x460>)
 800447a:	f00d fa29 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800447e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	2301      	movs	r3, #1
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	224b      	movs	r2, #75	; 0x4b
 800448c:	213c      	movs	r1, #60	; 0x3c
 800448e:	48c7      	ldr	r0, [pc, #796]	; (80047ac <drawschedulePanel+0x460>)
 8004490:	f7fd fb48 	bl	8001b24 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	2305      	movs	r3, #5
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2314      	movs	r3, #20
 80044a0:	2214      	movs	r2, #20
 80044a2:	21aa      	movs	r1, #170	; 0xaa
 80044a4:	2015      	movs	r0, #21
 80044a6:	f7fd f855 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	2305      	movs	r3, #5
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2314      	movs	r3, #20
 80044b6:	2214      	movs	r2, #20
 80044b8:	21aa      	movs	r1, #170	; 0xaa
 80044ba:	2035      	movs	r0, #53	; 0x35
 80044bc:	f7fd f84a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	2305      	movs	r3, #5
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2314      	movs	r3, #20
 80044cc:	2214      	movs	r2, #20
 80044ce:	21aa      	movs	r1, #170	; 0xaa
 80044d0:	2055      	movs	r0, #85	; 0x55
 80044d2:	f7fd f83f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	2305      	movs	r3, #5
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2314      	movs	r3, #20
 80044e2:	2214      	movs	r2, #20
 80044e4:	21aa      	movs	r1, #170	; 0xaa
 80044e6:	2075      	movs	r0, #117	; 0x75
 80044e8:	f7fd f834 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2305      	movs	r3, #5
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2314      	movs	r3, #20
 80044f8:	2214      	movs	r2, #20
 80044fa:	21aa      	movs	r1, #170	; 0xaa
 80044fc:	2095      	movs	r0, #149	; 0x95
 80044fe:	f7fd f829 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004502:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	2305      	movs	r3, #5
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2314      	movs	r3, #20
 800450e:	2214      	movs	r2, #20
 8004510:	21aa      	movs	r1, #170	; 0xaa
 8004512:	20b5      	movs	r0, #181	; 0xb5
 8004514:	f7fd f81e 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004518:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	2305      	movs	r3, #5
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2314      	movs	r3, #20
 8004524:	2214      	movs	r2, #20
 8004526:	21aa      	movs	r1, #170	; 0xaa
 8004528:	20d5      	movs	r0, #213	; 0xd5
 800452a:	f7fd f813 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800452e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	2305      	movs	r3, #5
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2314      	movs	r3, #20
 800453a:	2214      	movs	r2, #20
 800453c:	21aa      	movs	r1, #170	; 0xaa
 800453e:	20f5      	movs	r0, #245	; 0xf5
 8004540:	f7fd f808 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004544:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	2305      	movs	r3, #5
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2314      	movs	r3, #20
 8004550:	2214      	movs	r2, #20
 8004552:	21aa      	movs	r1, #170	; 0xaa
 8004554:	f240 1015 	movw	r0, #277	; 0x115
 8004558:	f7fc fffc 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 800455c:	4994      	ldr	r1, [pc, #592]	; (80047b0 <drawschedulePanel+0x464>)
 800455e:	4893      	ldr	r0, [pc, #588]	; (80047ac <drawschedulePanel+0x460>)
 8004560:	f00d f9b6 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004564:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	2301      	movs	r3, #1
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	22c3      	movs	r2, #195	; 0xc3
 8004572:	2115      	movs	r1, #21
 8004574:	488d      	ldr	r0, [pc, #564]	; (80047ac <drawschedulePanel+0x460>)
 8004576:	f7fd fad5 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800457a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2305      	movs	r3, #5
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2314      	movs	r3, #20
 8004586:	2222      	movs	r2, #34	; 0x22
 8004588:	2165      	movs	r1, #101	; 0x65
 800458a:	20bb      	movs	r0, #187	; 0xbb
 800458c:	f7fd f85f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004590:	4988      	ldr	r1, [pc, #544]	; (80047b4 <drawschedulePanel+0x468>)
 8004592:	4886      	ldr	r0, [pc, #536]	; (80047ac <drawschedulePanel+0x460>)
 8004594:	f00d f99c 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004598:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2300      	movs	r3, #0
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2300      	movs	r3, #0
 80045a4:	2268      	movs	r2, #104	; 0x68
 80045a6:	21c1      	movs	r1, #193	; 0xc1
 80045a8:	4880      	ldr	r0, [pc, #512]	; (80047ac <drawschedulePanel+0x460>)
 80045aa:	f7fd fabb 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2305      	movs	r3, #5
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2314      	movs	r3, #20
 80045ba:	2222      	movs	r2, #34	; 0x22
 80045bc:	2165      	movs	r1, #101	; 0x65
 80045be:	20e9      	movs	r0, #233	; 0xe9
 80045c0:	f7fd f845 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 80045c4:	497c      	ldr	r1, [pc, #496]	; (80047b8 <drawschedulePanel+0x46c>)
 80045c6:	4879      	ldr	r0, [pc, #484]	; (80047ac <drawschedulePanel+0x460>)
 80045c8:	f00d f982 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	2268      	movs	r2, #104	; 0x68
 80045da:	21ec      	movs	r1, #236	; 0xec
 80045dc:	4873      	ldr	r0, [pc, #460]	; (80047ac <drawschedulePanel+0x460>)
 80045de:	f7fd faa1 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	2305      	movs	r3, #5
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2314      	movs	r3, #20
 80045ee:	2222      	movs	r2, #34	; 0x22
 80045f0:	2165      	movs	r1, #101	; 0x65
 80045f2:	f240 1017 	movw	r0, #279	; 0x117
 80045f6:	f7fd f82a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80045fa:	4970      	ldr	r1, [pc, #448]	; (80047bc <drawschedulePanel+0x470>)
 80045fc:	486b      	ldr	r0, [pc, #428]	; (80047ac <drawschedulePanel+0x460>)
 80045fe:	f00d f967 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004602:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	2268      	movs	r2, #104	; 0x68
 8004610:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004614:	4865      	ldr	r0, [pc, #404]	; (80047ac <drawschedulePanel+0x460>)
 8004616:	f7fd fa85 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800461a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	2305      	movs	r3, #5
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2314      	movs	r3, #20
 8004626:	2222      	movs	r2, #34	; 0x22
 8004628:	2188      	movs	r1, #136	; 0x88
 800462a:	20bb      	movs	r0, #187	; 0xbb
 800462c:	f7fd f80f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004630:	4960      	ldr	r1, [pc, #384]	; (80047b4 <drawschedulePanel+0x468>)
 8004632:	485e      	ldr	r0, [pc, #376]	; (80047ac <drawschedulePanel+0x460>)
 8004634:	f00d f94c 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004638:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	228b      	movs	r2, #139	; 0x8b
 8004646:	21c1      	movs	r1, #193	; 0xc1
 8004648:	4858      	ldr	r0, [pc, #352]	; (80047ac <drawschedulePanel+0x460>)
 800464a:	f7fd fa6b 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800464e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2305      	movs	r3, #5
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2314      	movs	r3, #20
 800465a:	2222      	movs	r2, #34	; 0x22
 800465c:	2188      	movs	r1, #136	; 0x88
 800465e:	20e9      	movs	r0, #233	; 0xe9
 8004660:	f7fc fff5 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004664:	4954      	ldr	r1, [pc, #336]	; (80047b8 <drawschedulePanel+0x46c>)
 8004666:	4851      	ldr	r0, [pc, #324]	; (80047ac <drawschedulePanel+0x460>)
 8004668:	f00d f932 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800466c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	2300      	movs	r3, #0
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2300      	movs	r3, #0
 8004678:	228b      	movs	r2, #139	; 0x8b
 800467a:	21ec      	movs	r1, #236	; 0xec
 800467c:	484b      	ldr	r0, [pc, #300]	; (80047ac <drawschedulePanel+0x460>)
 800467e:	f7fd fa51 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004682:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2305      	movs	r3, #5
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2314      	movs	r3, #20
 800468e:	2222      	movs	r2, #34	; 0x22
 8004690:	2188      	movs	r1, #136	; 0x88
 8004692:	f240 1017 	movw	r0, #279	; 0x117
 8004696:	f7fc ffda 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 800469a:	4948      	ldr	r1, [pc, #288]	; (80047bc <drawschedulePanel+0x470>)
 800469c:	4843      	ldr	r0, [pc, #268]	; (80047ac <drawschedulePanel+0x460>)
 800469e:	f00d f917 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	2300      	movs	r3, #0
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	228b      	movs	r2, #139	; 0x8b
 80046b0:	f44f 718c 	mov.w	r1, #280	; 0x118
 80046b4:	483d      	ldr	r0, [pc, #244]	; (80047ac <drawschedulePanel+0x460>)
 80046b6:	f7fd fa35 	bl	8001b24 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 80046ba:	4841      	ldr	r0, [pc, #260]	; (80047c0 <drawschedulePanel+0x474>)
 80046bc:	f7fd f818 	bl	80016f0 <EF_SetFont>
	  if(NrOfschedule == 1)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f040 80db 	bne.w	800487e <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 80046c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80046cc:	4619      	mov	r1, r3
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7fe fc13 	bl	8002efa <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 80046d4:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80046d8:	4619      	mov	r1, r3
 80046da:	2001      	movs	r0, #1
 80046dc:	f7fe fc31 	bl	8002f42 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 80046e0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80046e4:	4619      	mov	r1, r3
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7fe fc4f 	bl	8002f8a <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80046ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046f0:	4619      	mov	r1, r3
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7fe fc6d 	bl	8002fd2 <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80046f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046fc:	4619      	mov	r1, r3
 80046fe:	2001      	movs	r0, #1
 8004700:	f7fe faaa 	bl	8002c58 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8004704:	f107 031c 	add.w	r3, r7, #28
 8004708:	4619      	mov	r1, r3
 800470a:	2001      	movs	r0, #1
 800470c:	f7fe fb20 	bl	8002d50 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 8004710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004714:	2b17      	cmp	r3, #23
 8004716:	d902      	bls.n	800471e <drawschedulePanel+0x3d2>
 8004718:	2317      	movs	r3, #23
 800471a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 800471e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004722:	2b3b      	cmp	r3, #59	; 0x3b
 8004724:	d902      	bls.n	800472c <drawschedulePanel+0x3e0>
 8004726:	233b      	movs	r3, #59	; 0x3b
 8004728:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 800472c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004730:	2b17      	cmp	r3, #23
 8004732:	d902      	bls.n	800473a <drawschedulePanel+0x3ee>
 8004734:	2317      	movs	r3, #23
 8004736:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 800473a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800473e:	2b3b      	cmp	r3, #59	; 0x3b
 8004740:	d902      	bls.n	8004748 <drawschedulePanel+0x3fc>
 8004742:	233b      	movs	r3, #59	; 0x3b
 8004744:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800474c:	2b09      	cmp	r3, #9
 800474e:	d80d      	bhi.n	800476c <drawschedulePanel+0x420>
 8004750:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004754:	2b09      	cmp	r3, #9
 8004756:	d809      	bhi.n	800476c <drawschedulePanel+0x420>
 8004758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800475c:	461a      	mov	r2, r3
 800475e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004762:	4918      	ldr	r1, [pc, #96]	; (80047c4 <drawschedulePanel+0x478>)
 8004764:	4811      	ldr	r0, [pc, #68]	; (80047ac <drawschedulePanel+0x460>)
 8004766:	f00d f8b3 	bl	80118d0 <siprintf>
 800476a:	e03a      	b.n	80047e2 <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 800476c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004770:	2b09      	cmp	r3, #9
 8004772:	d809      	bhi.n	8004788 <drawschedulePanel+0x43c>
 8004774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004778:	461a      	mov	r2, r3
 800477a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800477e:	4912      	ldr	r1, [pc, #72]	; (80047c8 <drawschedulePanel+0x47c>)
 8004780:	480a      	ldr	r0, [pc, #40]	; (80047ac <drawschedulePanel+0x460>)
 8004782:	f00d f8a5 	bl	80118d0 <siprintf>
 8004786:	e02c      	b.n	80047e2 <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004788:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800478c:	2b09      	cmp	r3, #9
 800478e:	d81f      	bhi.n	80047d0 <drawschedulePanel+0x484>
 8004790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004794:	461a      	mov	r2, r3
 8004796:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800479a:	490c      	ldr	r1, [pc, #48]	; (80047cc <drawschedulePanel+0x480>)
 800479c:	4803      	ldr	r0, [pc, #12]	; (80047ac <drawschedulePanel+0x460>)
 800479e:	f00d f897 	bl	80118d0 <siprintf>
 80047a2:	e01e      	b.n	80047e2 <drawschedulePanel+0x496>
 80047a4:	08026fd4 	.word	0x08026fd4
 80047a8:	08015838 	.word	0x08015838
 80047ac:	200002fc 	.word	0x200002fc
 80047b0:	08015850 	.word	0x08015850
 80047b4:	08015874 	.word	0x08015874
 80047b8:	08015878 	.word	0x08015878
 80047bc:	0801587c 	.word	0x0801587c
 80047c0:	08028f4c 	.word	0x08028f4c
 80047c4:	08015884 	.word	0x08015884
 80047c8:	08015894 	.word	0x08015894
 80047cc:	080158a4 	.word	0x080158a4
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 80047d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047d4:	461a      	mov	r2, r3
 80047d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047da:	498f      	ldr	r1, [pc, #572]	; (8004a18 <drawschedulePanel+0x6cc>)
 80047dc:	488f      	ldr	r0, [pc, #572]	; (8004a1c <drawschedulePanel+0x6d0>)
 80047de:	f00d f877 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2301      	movs	r3, #1
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	2264      	movs	r2, #100	; 0x64
 80047f0:	210a      	movs	r1, #10
 80047f2:	488a      	ldr	r0, [pc, #552]	; (8004a1c <drawschedulePanel+0x6d0>)
 80047f4:	f7fd f996 	bl	8001b24 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047fc:	2b09      	cmp	r3, #9
 80047fe:	d80d      	bhi.n	800481c <drawschedulePanel+0x4d0>
 8004800:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004804:	2b09      	cmp	r3, #9
 8004806:	d809      	bhi.n	800481c <drawschedulePanel+0x4d0>
 8004808:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800480c:	461a      	mov	r2, r3
 800480e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004812:	4983      	ldr	r1, [pc, #524]	; (8004a20 <drawschedulePanel+0x6d4>)
 8004814:	4881      	ldr	r0, [pc, #516]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004816:	f00d f85b 	bl	80118d0 <siprintf>
 800481a:	e024      	b.n	8004866 <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 800481c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004820:	2b09      	cmp	r3, #9
 8004822:	d809      	bhi.n	8004838 <drawschedulePanel+0x4ec>
 8004824:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004828:	461a      	mov	r2, r3
 800482a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800482e:	497d      	ldr	r1, [pc, #500]	; (8004a24 <drawschedulePanel+0x6d8>)
 8004830:	487a      	ldr	r0, [pc, #488]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004832:	f00d f84d 	bl	80118d0 <siprintf>
 8004836:	e016      	b.n	8004866 <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004838:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800483c:	2b09      	cmp	r3, #9
 800483e:	d809      	bhi.n	8004854 <drawschedulePanel+0x508>
 8004840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004844:	461a      	mov	r2, r3
 8004846:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800484a:	4977      	ldr	r1, [pc, #476]	; (8004a28 <drawschedulePanel+0x6dc>)
 800484c:	4873      	ldr	r0, [pc, #460]	; (8004a1c <drawschedulePanel+0x6d0>)
 800484e:	f00d f83f 	bl	80118d0 <siprintf>
 8004852:	e008      	b.n	8004866 <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004854:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004858:	461a      	mov	r2, r3
 800485a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800485e:	4973      	ldr	r1, [pc, #460]	; (8004a2c <drawschedulePanel+0x6e0>)
 8004860:	486e      	ldr	r0, [pc, #440]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004862:	f00d f835 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004866:	f24c 6318 	movw	r3, #50712	; 0xc618
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	2301      	movs	r3, #1
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2300      	movs	r3, #0
 8004872:	2287      	movs	r2, #135	; 0x87
 8004874:	210a      	movs	r1, #10
 8004876:	4869      	ldr	r0, [pc, #420]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004878:	f7fd f954 	bl	8001b24 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 800487c:	e0c7      	b.n	8004a0e <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b02      	cmp	r3, #2
 8004882:	f040 80c4 	bne.w	8004a0e <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004886:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800488a:	4619      	mov	r1, r3
 800488c:	2002      	movs	r0, #2
 800488e:	f7fe fb34 	bl	8002efa <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004892:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004896:	4619      	mov	r1, r3
 8004898:	2002      	movs	r0, #2
 800489a:	f7fe fb52 	bl	8002f42 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 800489e:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80048a2:	4619      	mov	r1, r3
 80048a4:	2002      	movs	r0, #2
 80048a6:	f7fe fb70 	bl	8002f8a <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 80048aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048ae:	4619      	mov	r1, r3
 80048b0:	2002      	movs	r0, #2
 80048b2:	f7fe fb8e 	bl	8002fd2 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	4619      	mov	r1, r3
 80048bc:	2002      	movs	r0, #2
 80048be:	f7fe f9cb 	bl	8002c58 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	4619      	mov	r1, r3
 80048c8:	2002      	movs	r0, #2
 80048ca:	f7fe fa41 	bl	8002d50 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 80048ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048d2:	2b17      	cmp	r3, #23
 80048d4:	d902      	bls.n	80048dc <drawschedulePanel+0x590>
 80048d6:	2317      	movs	r3, #23
 80048d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 80048dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048e0:	2b3b      	cmp	r3, #59	; 0x3b
 80048e2:	d902      	bls.n	80048ea <drawschedulePanel+0x59e>
 80048e4:	233b      	movs	r3, #59	; 0x3b
 80048e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80048ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048ee:	2b17      	cmp	r3, #23
 80048f0:	d902      	bls.n	80048f8 <drawschedulePanel+0x5ac>
 80048f2:	2317      	movs	r3, #23
 80048f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80048f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048fc:	2b3b      	cmp	r3, #59	; 0x3b
 80048fe:	d902      	bls.n	8004906 <drawschedulePanel+0x5ba>
 8004900:	233b      	movs	r3, #59	; 0x3b
 8004902:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800490a:	2b09      	cmp	r3, #9
 800490c:	d80d      	bhi.n	800492a <drawschedulePanel+0x5de>
 800490e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004912:	2b09      	cmp	r3, #9
 8004914:	d809      	bhi.n	800492a <drawschedulePanel+0x5de>
 8004916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491a:	461a      	mov	r2, r3
 800491c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004920:	4943      	ldr	r1, [pc, #268]	; (8004a30 <drawschedulePanel+0x6e4>)
 8004922:	483e      	ldr	r0, [pc, #248]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004924:	f00c ffd4 	bl	80118d0 <siprintf>
 8004928:	e024      	b.n	8004974 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 800492a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492e:	2b09      	cmp	r3, #9
 8004930:	d809      	bhi.n	8004946 <drawschedulePanel+0x5fa>
 8004932:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004936:	461a      	mov	r2, r3
 8004938:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800493c:	493d      	ldr	r1, [pc, #244]	; (8004a34 <drawschedulePanel+0x6e8>)
 800493e:	4837      	ldr	r0, [pc, #220]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004940:	f00c ffc6 	bl	80118d0 <siprintf>
 8004944:	e016      	b.n	8004974 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004946:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800494a:	2b09      	cmp	r3, #9
 800494c:	d809      	bhi.n	8004962 <drawschedulePanel+0x616>
 800494e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004952:	461a      	mov	r2, r3
 8004954:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004958:	4937      	ldr	r1, [pc, #220]	; (8004a38 <drawschedulePanel+0x6ec>)
 800495a:	4830      	ldr	r0, [pc, #192]	; (8004a1c <drawschedulePanel+0x6d0>)
 800495c:	f00c ffb8 	bl	80118d0 <siprintf>
 8004960:	e008      	b.n	8004974 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004966:	461a      	mov	r2, r3
 8004968:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800496c:	4933      	ldr	r1, [pc, #204]	; (8004a3c <drawschedulePanel+0x6f0>)
 800496e:	482b      	ldr	r0, [pc, #172]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004970:	f00c ffae 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004974:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2301      	movs	r3, #1
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	2264      	movs	r2, #100	; 0x64
 8004982:	210a      	movs	r1, #10
 8004984:	4825      	ldr	r0, [pc, #148]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004986:	f7fd f8cd 	bl	8001b24 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 800498a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800498e:	2b09      	cmp	r3, #9
 8004990:	d80d      	bhi.n	80049ae <drawschedulePanel+0x662>
 8004992:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004996:	2b09      	cmp	r3, #9
 8004998:	d809      	bhi.n	80049ae <drawschedulePanel+0x662>
 800499a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800499e:	461a      	mov	r2, r3
 80049a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049a4:	4926      	ldr	r1, [pc, #152]	; (8004a40 <drawschedulePanel+0x6f4>)
 80049a6:	481d      	ldr	r0, [pc, #116]	; (8004a1c <drawschedulePanel+0x6d0>)
 80049a8:	f00c ff92 	bl	80118d0 <siprintf>
 80049ac:	e024      	b.n	80049f8 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 80049ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d809      	bhi.n	80049ca <drawschedulePanel+0x67e>
 80049b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049ba:	461a      	mov	r2, r3
 80049bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049c0:	4920      	ldr	r1, [pc, #128]	; (8004a44 <drawschedulePanel+0x6f8>)
 80049c2:	4816      	ldr	r0, [pc, #88]	; (8004a1c <drawschedulePanel+0x6d0>)
 80049c4:	f00c ff84 	bl	80118d0 <siprintf>
 80049c8:	e016      	b.n	80049f8 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 80049ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	d809      	bhi.n	80049e6 <drawschedulePanel+0x69a>
 80049d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049d6:	461a      	mov	r2, r3
 80049d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049dc:	491a      	ldr	r1, [pc, #104]	; (8004a48 <drawschedulePanel+0x6fc>)
 80049de:	480f      	ldr	r0, [pc, #60]	; (8004a1c <drawschedulePanel+0x6d0>)
 80049e0:	f00c ff76 	bl	80118d0 <siprintf>
 80049e4:	e008      	b.n	80049f8 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 80049e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049ea:	461a      	mov	r2, r3
 80049ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049f0:	4916      	ldr	r1, [pc, #88]	; (8004a4c <drawschedulePanel+0x700>)
 80049f2:	480a      	ldr	r0, [pc, #40]	; (8004a1c <drawschedulePanel+0x6d0>)
 80049f4:	f00c ff6c 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	2301      	movs	r3, #1
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	2287      	movs	r2, #135	; 0x87
 8004a06:	210c      	movs	r1, #12
 8004a08:	4804      	ldr	r0, [pc, #16]	; (8004a1c <drawschedulePanel+0x6d0>)
 8004a0a:	f7fd f88b 	bl	8001b24 <EF_PutString>
}
 8004a0e:	bf00      	nop
 8004a10:	3738      	adds	r7, #56	; 0x38
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	080158b4 	.word	0x080158b4
 8004a1c:	200002fc 	.word	0x200002fc
 8004a20:	080158c4 	.word	0x080158c4
 8004a24:	080158d4 	.word	0x080158d4
 8004a28:	080158e4 	.word	0x080158e4
 8004a2c:	080158f4 	.word	0x080158f4
 8004a30:	08015904 	.word	0x08015904
 8004a34:	08015914 	.word	0x08015914
 8004a38:	08015924 	.word	0x08015924
 8004a3c:	08015934 	.word	0x08015934
 8004a40:	08015944 	.word	0x08015944
 8004a44:	08015954 	.word	0x08015954
 8004a48:	08015964 	.word	0x08015964
 8004a4c:	08015974 	.word	0x08015974

08004a50 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004a56:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004a5a:	f7fd fa4d 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a5e:	483f      	ldr	r0, [pc, #252]	; (8004b5c <showSchedule1Panel+0x10c>)
 8004a60:	f7fc fe46 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004a64:	493e      	ldr	r1, [pc, #248]	; (8004b60 <showSchedule1Panel+0x110>)
 8004a66:	483f      	ldr	r0, [pc, #252]	; (8004b64 <showSchedule1Panel+0x114>)
 8004a68:	f00c ff32 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004a6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a7a:	220a      	movs	r2, #10
 8004a7c:	212a      	movs	r1, #42	; 0x2a
 8004a7e:	4839      	ldr	r0, [pc, #228]	; (8004b64 <showSchedule1Panel+0x114>)
 8004a80:	f7fd f850 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004a84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2329      	movs	r3, #41	; 0x29
 8004a8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a90:	2129      	movs	r1, #41	; 0x29
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7fc fb7c 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004a98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	232b      	movs	r3, #43	; 0x2b
 8004aa0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004aa4:	212b      	movs	r1, #43	; 0x2b
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fc fb72 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004aac:	2001      	movs	r0, #1
 8004aae:	f7ff fc4d 	bl	800434c <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004ab2:	482d      	ldr	r0, [pc, #180]	; (8004b68 <showSchedule1Panel+0x118>)
 8004ab4:	f7fc fe1c 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ab8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	2305      	movs	r3, #5
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	2314      	movs	r3, #20
 8004ac4:	225f      	movs	r2, #95	; 0x5f
 8004ac6:	21d8      	movs	r1, #216	; 0xd8
 8004ac8:	20dc      	movs	r0, #220	; 0xdc
 8004aca:	f7fc fdc0 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004ace:	4927      	ldr	r1, [pc, #156]	; (8004b6c <showSchedule1Panel+0x11c>)
 8004ad0:	4824      	ldr	r0, [pc, #144]	; (8004b64 <showSchedule1Panel+0x114>)
 8004ad2:	f00c fefd 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ad6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	2300      	movs	r3, #0
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	22da      	movs	r2, #218	; 0xda
 8004ae4:	21e6      	movs	r1, #230	; 0xe6
 8004ae6:	481f      	ldr	r0, [pc, #124]	; (8004b64 <showSchedule1Panel+0x114>)
 8004ae8:	f7fd f81c 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004aec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	2305      	movs	r3, #5
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2314      	movs	r3, #20
 8004af8:	225a      	movs	r2, #90	; 0x5a
 8004afa:	21d8      	movs	r1, #216	; 0xd8
 8004afc:	2078      	movs	r0, #120	; 0x78
 8004afe:	f7fc fda6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004b02:	491b      	ldr	r1, [pc, #108]	; (8004b70 <showSchedule1Panel+0x120>)
 8004b04:	4817      	ldr	r0, [pc, #92]	; (8004b64 <showSchedule1Panel+0x114>)
 8004b06:	f00c fee3 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004b0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	22da      	movs	r2, #218	; 0xda
 8004b18:	217e      	movs	r1, #126	; 0x7e
 8004b1a:	4812      	ldr	r0, [pc, #72]	; (8004b64 <showSchedule1Panel+0x114>)
 8004b1c:	f7fd f802 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004b20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	2305      	movs	r3, #5
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	2314      	movs	r3, #20
 8004b2c:	2264      	movs	r2, #100	; 0x64
 8004b2e:	21d8      	movs	r1, #216	; 0xd8
 8004b30:	200a      	movs	r0, #10
 8004b32:	f7fc fd8c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004b36:	490f      	ldr	r1, [pc, #60]	; (8004b74 <showSchedule1Panel+0x124>)
 8004b38:	480a      	ldr	r0, [pc, #40]	; (8004b64 <showSchedule1Panel+0x114>)
 8004b3a:	f00c fec9 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004b3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	2300      	movs	r3, #0
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	22da      	movs	r2, #218	; 0xda
 8004b4c:	210d      	movs	r1, #13
 8004b4e:	4805      	ldr	r0, [pc, #20]	; (8004b64 <showSchedule1Panel+0x114>)
 8004b50:	f7fc ffe8 	bl	8001b24 <EF_PutString>
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	08028f4c 	.word	0x08028f4c
 8004b60:	08015984 	.word	0x08015984
 8004b64:	200002fc 	.word	0x200002fc
 8004b68:	08026fd4 	.word	0x08026fd4
 8004b6c:	08015994 	.word	0x08015994
 8004b70:	080159a0 	.word	0x080159a0
 8004b74:	080159a8 	.word	0x080159a8

08004b78 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b7e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b82:	f7fd f9b9 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b86:	4832      	ldr	r0, [pc, #200]	; (8004c50 <showSchedule2Panel+0xd8>)
 8004b88:	f7fc fdb2 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004b8c:	4931      	ldr	r1, [pc, #196]	; (8004c54 <showSchedule2Panel+0xdc>)
 8004b8e:	4832      	ldr	r0, [pc, #200]	; (8004c58 <showSchedule2Panel+0xe0>)
 8004b90:	f00c fe9e 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	212a      	movs	r1, #42	; 0x2a
 8004ba6:	482c      	ldr	r0, [pc, #176]	; (8004c58 <showSchedule2Panel+0xe0>)
 8004ba8:	f7fc ffbc 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004bac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2329      	movs	r3, #41	; 0x29
 8004bb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bb8:	2129      	movs	r1, #41	; 0x29
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f7fc fae8 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004bc0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	232b      	movs	r3, #43	; 0x2b
 8004bc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bcc:	212b      	movs	r1, #43	; 0x2b
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fc fade 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004bd4:	2002      	movs	r0, #2
 8004bd6:	f7ff fbb9 	bl	800434c <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004bda:	4820      	ldr	r0, [pc, #128]	; (8004c5c <showSchedule2Panel+0xe4>)
 8004bdc:	f7fc fd88 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	2305      	movs	r3, #5
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2314      	movs	r3, #20
 8004bec:	225a      	movs	r2, #90	; 0x5a
 8004bee:	21d8      	movs	r1, #216	; 0xd8
 8004bf0:	2078      	movs	r0, #120	; 0x78
 8004bf2:	f7fc fd2c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bf6:	491a      	ldr	r1, [pc, #104]	; (8004c60 <showSchedule2Panel+0xe8>)
 8004bf8:	4817      	ldr	r0, [pc, #92]	; (8004c58 <showSchedule2Panel+0xe0>)
 8004bfa:	f00c fe69 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bfe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	22da      	movs	r2, #218	; 0xda
 8004c0c:	217e      	movs	r1, #126	; 0x7e
 8004c0e:	4812      	ldr	r0, [pc, #72]	; (8004c58 <showSchedule2Panel+0xe0>)
 8004c10:	f7fc ff88 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004c14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	2305      	movs	r3, #5
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	2314      	movs	r3, #20
 8004c20:	2264      	movs	r2, #100	; 0x64
 8004c22:	21d8      	movs	r1, #216	; 0xd8
 8004c24:	200a      	movs	r0, #10
 8004c26:	f7fc fd12 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004c2a:	490e      	ldr	r1, [pc, #56]	; (8004c64 <showSchedule2Panel+0xec>)
 8004c2c:	480a      	ldr	r0, [pc, #40]	; (8004c58 <showSchedule2Panel+0xe0>)
 8004c2e:	f00c fe4f 	bl	80118d0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004c32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	22da      	movs	r2, #218	; 0xda
 8004c40:	210d      	movs	r1, #13
 8004c42:	4805      	ldr	r0, [pc, #20]	; (8004c58 <showSchedule2Panel+0xe0>)
 8004c44:	f7fc ff6e 	bl	8001b24 <EF_PutString>
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08028f4c 	.word	0x08028f4c
 8004c54:	080159b4 	.word	0x080159b4
 8004c58:	200002fc 	.word	0x200002fc
 8004c5c:	08026fd4 	.word	0x08026fd4
 8004c60:	080159a0 	.word	0x080159a0
 8004c64:	080159a8 	.word	0x080159a8

08004c68 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004c6e:	f7fd fdaf 	bl	80027d0 <DS3231_GetHour>
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004c76:	f7fd fdb7 	bl	80027e8 <DS3231_GetMinute>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c7e:	482a      	ldr	r0, [pc, #168]	; (8004d28 <ChangeHourOnScreen+0xc0>)
 8004c80:	f7fc fd36 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <ChangeHourOnScreen+0xc4>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	79fa      	ldrb	r2, [r7, #7]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d021      	beq.n	8004cd2 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004c8e:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <ChangeHourOnScreen+0xc8>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d11d      	bne.n	8004cd2 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d806      	bhi.n	8004caa <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4924      	ldr	r1, [pc, #144]	; (8004d34 <ChangeHourOnScreen+0xcc>)
 8004ca2:	4825      	ldr	r0, [pc, #148]	; (8004d38 <ChangeHourOnScreen+0xd0>)
 8004ca4:	f00c fe14 	bl	80118d0 <siprintf>
 8004ca8:	e005      	b.n	8004cb6 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4923      	ldr	r1, [pc, #140]	; (8004d3c <ChangeHourOnScreen+0xd4>)
 8004cb0:	4821      	ldr	r0, [pc, #132]	; (8004d38 <ChangeHourOnScreen+0xd0>)
 8004cb2:	f00c fe0d 	bl	80118d0 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cb6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2232      	movs	r2, #50	; 0x32
 8004cc4:	2161      	movs	r1, #97	; 0x61
 8004cc6:	481c      	ldr	r0, [pc, #112]	; (8004d38 <ChangeHourOnScreen+0xd0>)
 8004cc8:	f7fc ff2c 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <ChangeHourOnScreen+0xc4>)
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <ChangeHourOnScreen+0xd8>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	79ba      	ldrb	r2, [r7, #6]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d021      	beq.n	8004d20 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <ChangeHourOnScreen+0xc8>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d11d      	bne.n	8004d20 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004ce4:	79bb      	ldrb	r3, [r7, #6]
 8004ce6:	2b09      	cmp	r3, #9
 8004ce8:	d806      	bhi.n	8004cf8 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004cea:	79bb      	ldrb	r3, [r7, #6]
 8004cec:	461a      	mov	r2, r3
 8004cee:	4915      	ldr	r1, [pc, #84]	; (8004d44 <ChangeHourOnScreen+0xdc>)
 8004cf0:	4811      	ldr	r0, [pc, #68]	; (8004d38 <ChangeHourOnScreen+0xd0>)
 8004cf2:	f00c fded 	bl	80118d0 <siprintf>
 8004cf6:	e005      	b.n	8004d04 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004cf8:	79bb      	ldrb	r3, [r7, #6]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4912      	ldr	r1, [pc, #72]	; (8004d48 <ChangeHourOnScreen+0xe0>)
 8004cfe:	480e      	ldr	r0, [pc, #56]	; (8004d38 <ChangeHourOnScreen+0xd0>)
 8004d00:	f00c fde6 	bl	80118d0 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d04:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2232      	movs	r2, #50	; 0x32
 8004d12:	2196      	movs	r1, #150	; 0x96
 8004d14:	4808      	ldr	r0, [pc, #32]	; (8004d38 <ChangeHourOnScreen+0xd0>)
 8004d16:	f7fc ff05 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <ChangeHourOnScreen+0xd8>)
 8004d1c:	79bb      	ldrb	r3, [r7, #6]
 8004d1e:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	08028f4c 	.word	0x08028f4c
 8004d2c:	2000024c 	.word	0x2000024c
 8004d30:	20000290 	.word	0x20000290
 8004d34:	080159c4 	.word	0x080159c4
 8004d38:	200002fc 	.word	0x200002fc
 8004d3c:	080159cc 	.word	0x080159cc
 8004d40:	2000024d 	.word	0x2000024d
 8004d44:	080159d0 	.word	0x080159d0
 8004d48:	080159d8 	.word	0x080159d8

08004d4c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004d60:	f7fd ff0a 	bl	8002b78 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004d64:	f7fd ff40 	bl	8002be8 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004d68:	e005      	b.n	8004d76 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004d6a:	2018      	movs	r0, #24
 8004d6c:	f003 fe94 	bl	8008a98 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004d70:	2019      	movs	r0, #25
 8004d72:	f003 fe91 	bl	8008a98 <SendComand>
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d12e      	bne.n	8004df2 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004d94:	f7fd fef0 	bl	8002b78 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004d98:	481b      	ldr	r0, [pc, #108]	; (8004e08 <predefinedActivityKarmienie+0x88>)
 8004d9a:	f7fc fca9 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	230a      	movs	r3, #10
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2328      	movs	r3, #40	; 0x28
 8004daa:	2278      	movs	r2, #120	; 0x78
 8004dac:	213c      	movs	r1, #60	; 0x3c
 8004dae:	2064      	movs	r0, #100	; 0x64
 8004db0:	f7fc fc4d 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004db4:	4915      	ldr	r1, [pc, #84]	; (8004e0c <predefinedActivityKarmienie+0x8c>)
 8004db6:	4816      	ldr	r0, [pc, #88]	; (8004e10 <predefinedActivityKarmienie+0x90>)
 8004db8:	f00c fd8a 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004dbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	223e      	movs	r2, #62	; 0x3e
 8004dca:	2177      	movs	r1, #119	; 0x77
 8004dcc:	4810      	ldr	r0, [pc, #64]	; (8004e10 <predefinedActivityKarmienie+0x90>)
 8004dce:	f7fc fea9 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004dd2:	4910      	ldr	r1, [pc, #64]	; (8004e14 <predefinedActivityKarmienie+0x94>)
 8004dd4:	480e      	ldr	r0, [pc, #56]	; (8004e10 <predefinedActivityKarmienie+0x90>)
 8004dd6:	f00c fd7b 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004dda:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	2250      	movs	r2, #80	; 0x50
 8004de8:	2193      	movs	r1, #147	; 0x93
 8004dea:	4809      	ldr	r0, [pc, #36]	; (8004e10 <predefinedActivityKarmienie+0x90>)
 8004dec:	f7fc fe9a 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004df0:	e005      	b.n	8004dfe <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004df2:	2018      	movs	r0, #24
 8004df4:	f003 fe50 	bl	8008a98 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004df8:	4807      	ldr	r0, [pc, #28]	; (8004e18 <predefinedActivityKarmienie+0x98>)
 8004dfa:	f00a fa05 	bl	800f208 <HAL_TIM_Base_Start_IT>
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	08026fd4 	.word	0x08026fd4
 8004e0c:	080157bc 	.word	0x080157bc
 8004e10:	200002fc 	.word	0x200002fc
 8004e14:	080157cc 	.word	0x080157cc
 8004e18:	2000098c 	.word	0x2000098c

08004e1c <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004e22:	487d      	ldr	r0, [pc, #500]	; (8005018 <drawCurrentStateOfSwitches+0x1fc>)
 8004e24:	f7fc fc64 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004e28:	4b7c      	ldr	r3, [pc, #496]	; (800501c <drawCurrentStateOfSwitches+0x200>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01c      	beq.n	8004e6a <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e30:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	2305      	movs	r3, #5
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	2315      	movs	r3, #21
 8004e3c:	2221      	movs	r2, #33	; 0x21
 8004e3e:	2141      	movs	r1, #65	; 0x41
 8004e40:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e44:	f7fc fc03 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e48:	4975      	ldr	r1, [pc, #468]	; (8005020 <drawCurrentStateOfSwitches+0x204>)
 8004e4a:	4876      	ldr	r0, [pc, #472]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004e4c:	f00c fd40 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e50:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2243      	movs	r2, #67	; 0x43
 8004e5e:	f240 1111 	movw	r1, #273	; 0x111
 8004e62:	4870      	ldr	r0, [pc, #448]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004e64:	f7fc fe5e 	bl	8001b24 <EF_PutString>
 8004e68:	e01b      	b.n	8004ea2 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	2305      	movs	r3, #5
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2315      	movs	r3, #21
 8004e76:	2221      	movs	r2, #33	; 0x21
 8004e78:	2141      	movs	r1, #65	; 0x41
 8004e7a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e7e:	f7fc fbe6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e82:	4969      	ldr	r1, [pc, #420]	; (8005028 <drawCurrentStateOfSwitches+0x20c>)
 8004e84:	4867      	ldr	r0, [pc, #412]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004e86:	f00c fd23 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	2300      	movs	r3, #0
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2300      	movs	r3, #0
 8004e96:	2243      	movs	r2, #67	; 0x43
 8004e98:	f240 1111 	movw	r1, #273	; 0x111
 8004e9c:	4861      	ldr	r0, [pc, #388]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004e9e:	f7fc fe41 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004ea2:	4b5e      	ldr	r3, [pc, #376]	; (800501c <drawCurrentStateOfSwitches+0x200>)
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01c      	beq.n	8004ee4 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004eaa:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	2305      	movs	r3, #5
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2315      	movs	r3, #21
 8004eb6:	2221      	movs	r2, #33	; 0x21
 8004eb8:	215f      	movs	r1, #95	; 0x5f
 8004eba:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ebe:	f7fc fbc6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004ec2:	4957      	ldr	r1, [pc, #348]	; (8005020 <drawCurrentStateOfSwitches+0x204>)
 8004ec4:	4857      	ldr	r0, [pc, #348]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004ec6:	f00c fd03 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004eca:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2261      	movs	r2, #97	; 0x61
 8004ed8:	f240 1111 	movw	r1, #273	; 0x111
 8004edc:	4851      	ldr	r0, [pc, #324]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004ede:	f7fc fe21 	bl	8001b24 <EF_PutString>
 8004ee2:	e01b      	b.n	8004f1c <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ee4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	2305      	movs	r3, #5
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2315      	movs	r3, #21
 8004ef0:	2221      	movs	r2, #33	; 0x21
 8004ef2:	215f      	movs	r1, #95	; 0x5f
 8004ef4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ef8:	f7fc fba9 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004efc:	494a      	ldr	r1, [pc, #296]	; (8005028 <drawCurrentStateOfSwitches+0x20c>)
 8004efe:	4849      	ldr	r0, [pc, #292]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004f00:	f00c fce6 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2261      	movs	r2, #97	; 0x61
 8004f12:	f240 1111 	movw	r1, #273	; 0x111
 8004f16:	4843      	ldr	r0, [pc, #268]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004f18:	f7fc fe04 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	; (800501c <drawCurrentStateOfSwitches+0x200>)
 8004f1e:	789b      	ldrb	r3, [r3, #2]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f24:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2305      	movs	r3, #5
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2315      	movs	r3, #21
 8004f30:	2221      	movs	r2, #33	; 0x21
 8004f32:	217d      	movs	r1, #125	; 0x7d
 8004f34:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f38:	f7fc fb89 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f3c:	4938      	ldr	r1, [pc, #224]	; (8005020 <drawCurrentStateOfSwitches+0x204>)
 8004f3e:	4839      	ldr	r0, [pc, #228]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004f40:	f00c fcc6 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f44:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	227f      	movs	r2, #127	; 0x7f
 8004f52:	f240 1111 	movw	r1, #273	; 0x111
 8004f56:	4833      	ldr	r0, [pc, #204]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004f58:	f7fc fde4 	bl	8001b24 <EF_PutString>
 8004f5c:	e01b      	b.n	8004f96 <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	2305      	movs	r3, #5
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2315      	movs	r3, #21
 8004f6a:	2221      	movs	r2, #33	; 0x21
 8004f6c:	217d      	movs	r1, #125	; 0x7d
 8004f6e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f72:	f7fc fb6c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f76:	492c      	ldr	r1, [pc, #176]	; (8005028 <drawCurrentStateOfSwitches+0x20c>)
 8004f78:	482a      	ldr	r0, [pc, #168]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004f7a:	f00c fca9 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	227f      	movs	r2, #127	; 0x7f
 8004f8c:	f240 1111 	movw	r1, #273	; 0x111
 8004f90:	4824      	ldr	r0, [pc, #144]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004f92:	f7fc fdc7 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <drawCurrentStateOfSwitches+0x200>)
 8004f98:	78db      	ldrb	r3, [r3, #3]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01c      	beq.n	8004fd8 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f9e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	2305      	movs	r3, #5
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	2315      	movs	r3, #21
 8004faa:	2221      	movs	r2, #33	; 0x21
 8004fac:	219b      	movs	r1, #155	; 0x9b
 8004fae:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fb2:	f7fc fb4c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004fb6:	491a      	ldr	r1, [pc, #104]	; (8005020 <drawCurrentStateOfSwitches+0x204>)
 8004fb8:	481a      	ldr	r0, [pc, #104]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004fba:	f00c fc89 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004fbe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	229d      	movs	r2, #157	; 0x9d
 8004fcc:	f240 1111 	movw	r1, #273	; 0x111
 8004fd0:	4814      	ldr	r0, [pc, #80]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004fd2:	f7fc fda7 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004fd6:	e01b      	b.n	8005010 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004fd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2305      	movs	r3, #5
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2315      	movs	r3, #21
 8004fe4:	2221      	movs	r2, #33	; 0x21
 8004fe6:	219b      	movs	r1, #155	; 0x9b
 8004fe8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fec:	f7fc fb2f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004ff0:	490d      	ldr	r1, [pc, #52]	; (8005028 <drawCurrentStateOfSwitches+0x20c>)
 8004ff2:	480c      	ldr	r0, [pc, #48]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 8004ff4:	f00c fc6c 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ff8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	2300      	movs	r3, #0
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	229d      	movs	r2, #157	; 0x9d
 8005006:	f240 1111 	movw	r1, #273	; 0x111
 800500a:	4806      	ldr	r0, [pc, #24]	; (8005024 <drawCurrentStateOfSwitches+0x208>)
 800500c:	f7fc fd8a 	bl	8001b24 <EF_PutString>
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	08026fd4 	.word	0x08026fd4
 800501c:	200002a8 	.word	0x200002a8
 8005020:	080157c8 	.word	0x080157c8
 8005024:	200002fc 	.word	0x200002fc
 8005028:	080157cc 	.word	0x080157cc

0800502c <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005032:	4875      	ldr	r0, [pc, #468]	; (8005208 <drawCurrentStateOfLights+0x1dc>)
 8005034:	f7fc fb5c 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005038:	4b74      	ldr	r3, [pc, #464]	; (800520c <drawCurrentStateOfLights+0x1e0>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01a      	beq.n	8005076 <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005040:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	2305      	movs	r3, #5
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	2315      	movs	r3, #21
 800504c:	2221      	movs	r2, #33	; 0x21
 800504e:	2141      	movs	r1, #65	; 0x41
 8005050:	20c8      	movs	r0, #200	; 0xc8
 8005052:	f7fc fafc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005056:	496e      	ldr	r1, [pc, #440]	; (8005210 <drawCurrentStateOfLights+0x1e4>)
 8005058:	486e      	ldr	r0, [pc, #440]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 800505a:	f00c fc39 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800505e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	2243      	movs	r2, #67	; 0x43
 800506c:	21cb      	movs	r1, #203	; 0xcb
 800506e:	4869      	ldr	r0, [pc, #420]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 8005070:	f7fc fd58 	bl	8001b24 <EF_PutString>
 8005074:	e019      	b.n	80050aa <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005076:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2305      	movs	r3, #5
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2315      	movs	r3, #21
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	2141      	movs	r1, #65	; 0x41
 8005086:	20c8      	movs	r0, #200	; 0xc8
 8005088:	f7fc fae1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800508c:	4962      	ldr	r1, [pc, #392]	; (8005218 <drawCurrentStateOfLights+0x1ec>)
 800508e:	4861      	ldr	r0, [pc, #388]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 8005090:	f00c fc1e 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005094:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2243      	movs	r2, #67	; 0x43
 80050a2:	21cb      	movs	r1, #203	; 0xcb
 80050a4:	485b      	ldr	r0, [pc, #364]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80050a6:	f7fc fd3d 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 80050aa:	4b58      	ldr	r3, [pc, #352]	; (800520c <drawCurrentStateOfLights+0x1e0>)
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01a      	beq.n	80050e8 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050b2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	2305      	movs	r3, #5
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2315      	movs	r3, #21
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	215f      	movs	r1, #95	; 0x5f
 80050c2:	20c8      	movs	r0, #200	; 0xc8
 80050c4:	f7fc fac3 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050c8:	4951      	ldr	r1, [pc, #324]	; (8005210 <drawCurrentStateOfLights+0x1e4>)
 80050ca:	4852      	ldr	r0, [pc, #328]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80050cc:	f00c fc00 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	2261      	movs	r2, #97	; 0x61
 80050de:	21cb      	movs	r1, #203	; 0xcb
 80050e0:	484c      	ldr	r0, [pc, #304]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80050e2:	f7fc fd1f 	bl	8001b24 <EF_PutString>
 80050e6:	e019      	b.n	800511c <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2305      	movs	r3, #5
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2315      	movs	r3, #21
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	215f      	movs	r1, #95	; 0x5f
 80050f8:	20c8      	movs	r0, #200	; 0xc8
 80050fa:	f7fc faa8 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050fe:	4946      	ldr	r1, [pc, #280]	; (8005218 <drawCurrentStateOfLights+0x1ec>)
 8005100:	4844      	ldr	r0, [pc, #272]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 8005102:	f00c fbe5 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005106:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	2261      	movs	r2, #97	; 0x61
 8005114:	21cb      	movs	r1, #203	; 0xcb
 8005116:	483f      	ldr	r0, [pc, #252]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 8005118:	f7fc fd04 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 800511c:	4b3b      	ldr	r3, [pc, #236]	; (800520c <drawCurrentStateOfLights+0x1e0>)
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01a      	beq.n	800515a <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005124:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	2305      	movs	r3, #5
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2315      	movs	r3, #21
 8005130:	2221      	movs	r2, #33	; 0x21
 8005132:	217d      	movs	r1, #125	; 0x7d
 8005134:	20c8      	movs	r0, #200	; 0xc8
 8005136:	f7fc fa8a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800513a:	4935      	ldr	r1, [pc, #212]	; (8005210 <drawCurrentStateOfLights+0x1e4>)
 800513c:	4835      	ldr	r0, [pc, #212]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 800513e:	f00c fbc7 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005142:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	2300      	movs	r3, #0
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2300      	movs	r3, #0
 800514e:	227f      	movs	r2, #127	; 0x7f
 8005150:	21cb      	movs	r1, #203	; 0xcb
 8005152:	4830      	ldr	r0, [pc, #192]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 8005154:	f7fc fce6 	bl	8001b24 <EF_PutString>
 8005158:	e019      	b.n	800518e <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800515a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2305      	movs	r3, #5
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2315      	movs	r3, #21
 8005166:	2221      	movs	r2, #33	; 0x21
 8005168:	217d      	movs	r1, #125	; 0x7d
 800516a:	20c8      	movs	r0, #200	; 0xc8
 800516c:	f7fc fa6f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005170:	4929      	ldr	r1, [pc, #164]	; (8005218 <drawCurrentStateOfLights+0x1ec>)
 8005172:	4828      	ldr	r0, [pc, #160]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 8005174:	f00c fbac 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	227f      	movs	r2, #127	; 0x7f
 8005186:	21cb      	movs	r1, #203	; 0xcb
 8005188:	4822      	ldr	r0, [pc, #136]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 800518a:	f7fc fccb 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 800518e:	4b1f      	ldr	r3, [pc, #124]	; (800520c <drawCurrentStateOfLights+0x1e0>)
 8005190:	78db      	ldrb	r3, [r3, #3]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01a      	beq.n	80051cc <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005196:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	2305      	movs	r3, #5
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2315      	movs	r3, #21
 80051a2:	2221      	movs	r2, #33	; 0x21
 80051a4:	219b      	movs	r1, #155	; 0x9b
 80051a6:	20c8      	movs	r0, #200	; 0xc8
 80051a8:	f7fc fa51 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80051ac:	4918      	ldr	r1, [pc, #96]	; (8005210 <drawCurrentStateOfLights+0x1e4>)
 80051ae:	4819      	ldr	r0, [pc, #100]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80051b0:	f00c fb8e 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	229d      	movs	r2, #157	; 0x9d
 80051c2:	21cb      	movs	r1, #203	; 0xcb
 80051c4:	4813      	ldr	r0, [pc, #76]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80051c6:	f7fc fcad 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80051ca:	e019      	b.n	8005200 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	2305      	movs	r3, #5
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2315      	movs	r3, #21
 80051d8:	2221      	movs	r2, #33	; 0x21
 80051da:	219b      	movs	r1, #155	; 0x9b
 80051dc:	20c8      	movs	r0, #200	; 0xc8
 80051de:	f7fc fa36 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051e2:	490d      	ldr	r1, [pc, #52]	; (8005218 <drawCurrentStateOfLights+0x1ec>)
 80051e4:	480b      	ldr	r0, [pc, #44]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80051e6:	f00c fb73 	bl	80118d0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2300      	movs	r3, #0
 80051f6:	229d      	movs	r2, #157	; 0x9d
 80051f8:	21cb      	movs	r1, #203	; 0xcb
 80051fa:	4806      	ldr	r0, [pc, #24]	; (8005214 <drawCurrentStateOfLights+0x1e8>)
 80051fc:	f7fc fc92 	bl	8001b24 <EF_PutString>
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	08026fd4 	.word	0x08026fd4
 800520c:	200002ac 	.word	0x200002ac
 8005210:	080157c8 	.word	0x080157c8
 8005214:	200002fc 	.word	0x200002fc
 8005218:	080157cc 	.word	0x080157cc

0800521c <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 8005226:	2300      	movs	r3, #0
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	f107 030c 	add.w	r3, r7, #12
 800522e:	2100      	movs	r1, #0
 8005230:	460a      	mov	r2, r1
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	460a      	mov	r2, r1
 8005236:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005238:	f107 0208 	add.w	r2, r7, #8
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd fd09 	bl	8002c58 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 8005246:	7a3b      	ldrb	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <restoreTFTScheduleDayOfWeek+0x3a>
 800524c:	2101      	movs	r1, #1
 800524e:	2001      	movs	r0, #1
 8005250:	f001 fadc 	bl	800680c <changeTFTScheduleDayOfWeek>
 8005254:	e003      	b.n	800525e <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 8005256:	2100      	movs	r1, #0
 8005258:	2001      	movs	r0, #1
 800525a:	f001 fad7 	bl	800680c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 800525e:	7a7b      	ldrb	r3, [r7, #9]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <restoreTFTScheduleDayOfWeek+0x52>
 8005264:	2101      	movs	r1, #1
 8005266:	2002      	movs	r0, #2
 8005268:	f001 fad0 	bl	800680c <changeTFTScheduleDayOfWeek>
 800526c:	e003      	b.n	8005276 <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 800526e:	2100      	movs	r1, #0
 8005270:	2002      	movs	r0, #2
 8005272:	f001 facb 	bl	800680c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 8005276:	7abb      	ldrb	r3, [r7, #10]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <restoreTFTScheduleDayOfWeek+0x6a>
 800527c:	2101      	movs	r1, #1
 800527e:	2003      	movs	r0, #3
 8005280:	f001 fac4 	bl	800680c <changeTFTScheduleDayOfWeek>
 8005284:	e003      	b.n	800528e <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 8005286:	2100      	movs	r1, #0
 8005288:	2003      	movs	r0, #3
 800528a:	f001 fabf 	bl	800680c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 800528e:	7afb      	ldrb	r3, [r7, #11]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <restoreTFTScheduleDayOfWeek+0x82>
 8005294:	2101      	movs	r1, #1
 8005296:	2004      	movs	r0, #4
 8005298:	f001 fab8 	bl	800680c <changeTFTScheduleDayOfWeek>
 800529c:	e003      	b.n	80052a6 <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 800529e:	2100      	movs	r1, #0
 80052a0:	2004      	movs	r0, #4
 80052a2:	f001 fab3 	bl	800680c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 80052a6:	7b3b      	ldrb	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <restoreTFTScheduleDayOfWeek+0x9a>
 80052ac:	2101      	movs	r1, #1
 80052ae:	2005      	movs	r0, #5
 80052b0:	f001 faac 	bl	800680c <changeTFTScheduleDayOfWeek>
 80052b4:	e003      	b.n	80052be <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 80052b6:	2100      	movs	r1, #0
 80052b8:	2005      	movs	r0, #5
 80052ba:	f001 faa7 	bl	800680c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 80052be:	7b7b      	ldrb	r3, [r7, #13]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <restoreTFTScheduleDayOfWeek+0xb2>
 80052c4:	2101      	movs	r1, #1
 80052c6:	2006      	movs	r0, #6
 80052c8:	f001 faa0 	bl	800680c <changeTFTScheduleDayOfWeek>
 80052cc:	e003      	b.n	80052d6 <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80052ce:	2100      	movs	r1, #0
 80052d0:	2006      	movs	r0, #6
 80052d2:	f001 fa9b 	bl	800680c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80052d6:	7bbb      	ldrb	r3, [r7, #14]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <restoreTFTScheduleDayOfWeek+0xca>
 80052dc:	2101      	movs	r1, #1
 80052de:	2007      	movs	r0, #7
 80052e0:	f001 fa94 	bl	800680c <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80052e4:	e003      	b.n	80052ee <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80052e6:	2100      	movs	r1, #0
 80052e8:	2007      	movs	r0, #7
 80052ea:	f001 fa8f 	bl	800680c <changeTFTScheduleDayOfWeek>
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4603      	mov	r3, r0
 80052fe:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	f107 0310 	add.w	r3, r7, #16
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 800530e:	f107 020c 	add.w	r2, r7, #12
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fd1a 	bl	8002d50 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 800531c:	7b3b      	ldrb	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <restoreTFTScheduleRelayLights+0x36>
 8005322:	2101      	movs	r1, #1
 8005324:	2001      	movs	r0, #1
 8005326:	f001 fb4e 	bl	80069c6 <changeTFTScheduleRelayLights>
 800532a:	e003      	b.n	8005334 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 800532c:	2100      	movs	r1, #0
 800532e:	2001      	movs	r0, #1
 8005330:	f001 fb49 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 8005334:	7b7b      	ldrb	r3, [r7, #13]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <restoreTFTScheduleRelayLights+0x4e>
 800533a:	2101      	movs	r1, #1
 800533c:	2002      	movs	r0, #2
 800533e:	f001 fb42 	bl	80069c6 <changeTFTScheduleRelayLights>
 8005342:	e003      	b.n	800534c <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005344:	2100      	movs	r1, #0
 8005346:	2002      	movs	r0, #2
 8005348:	f001 fb3d 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <restoreTFTScheduleRelayLights+0x66>
 8005352:	2101      	movs	r1, #1
 8005354:	2003      	movs	r0, #3
 8005356:	f001 fb36 	bl	80069c6 <changeTFTScheduleRelayLights>
 800535a:	e003      	b.n	8005364 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 800535c:	2100      	movs	r1, #0
 800535e:	2003      	movs	r0, #3
 8005360:	f001 fb31 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <restoreTFTScheduleRelayLights+0x7e>
 800536a:	2101      	movs	r1, #1
 800536c:	2004      	movs	r0, #4
 800536e:	f001 fb2a 	bl	80069c6 <changeTFTScheduleRelayLights>
 8005372:	e003      	b.n	800537c <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005374:	2100      	movs	r1, #0
 8005376:	2004      	movs	r0, #4
 8005378:	f001 fb25 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 800537c:	7c3b      	ldrb	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <restoreTFTScheduleRelayLights+0x96>
 8005382:	2101      	movs	r1, #1
 8005384:	2005      	movs	r0, #5
 8005386:	f001 fb1e 	bl	80069c6 <changeTFTScheduleRelayLights>
 800538a:	e003      	b.n	8005394 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 800538c:	2100      	movs	r1, #0
 800538e:	2005      	movs	r0, #5
 8005390:	f001 fb19 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <restoreTFTScheduleRelayLights+0xae>
 800539a:	2101      	movs	r1, #1
 800539c:	2006      	movs	r0, #6
 800539e:	f001 fb12 	bl	80069c6 <changeTFTScheduleRelayLights>
 80053a2:	e003      	b.n	80053ac <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 80053a4:	2100      	movs	r1, #0
 80053a6:	2006      	movs	r0, #6
 80053a8:	f001 fb0d 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 80053ac:	7cbb      	ldrb	r3, [r7, #18]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <restoreTFTScheduleRelayLights+0xc6>
 80053b2:	2101      	movs	r1, #1
 80053b4:	2007      	movs	r0, #7
 80053b6:	f001 fb06 	bl	80069c6 <changeTFTScheduleRelayLights>
 80053ba:	e003      	b.n	80053c4 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 80053bc:	2100      	movs	r1, #0
 80053be:	2007      	movs	r0, #7
 80053c0:	f001 fb01 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <restoreTFTScheduleRelayLights+0xde>
 80053ca:	2101      	movs	r1, #1
 80053cc:	2008      	movs	r0, #8
 80053ce:	f001 fafa 	bl	80069c6 <changeTFTScheduleRelayLights>
 80053d2:	e003      	b.n	80053dc <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80053d4:	2100      	movs	r1, #0
 80053d6:	2008      	movs	r0, #8
 80053d8:	f001 faf5 	bl	80069c6 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80053dc:	7d3b      	ldrb	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <restoreTFTScheduleRelayLights+0xf6>
 80053e2:	2101      	movs	r1, #1
 80053e4:	2009      	movs	r0, #9
 80053e6:	f001 faee 	bl	80069c6 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80053ea:	e003      	b.n	80053f4 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80053ec:	2100      	movs	r1, #0
 80053ee:	2009      	movs	r0, #9
 80053f0:	f001 fae9 	bl	80069c6 <changeTFTScheduleRelayLights>
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005404:	bf00      	nop
 8005406:	f004 fd87 	bl	8009f18 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <initWait+0x28>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d2f6      	bcs.n	8005406 <initWait+0xa>
    {
    }
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000250 	.word	0x20000250

08005428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542e:	f107 0314 	add.w	r3, r7, #20
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	4b5f      	ldr	r3, [pc, #380]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	4a5e      	ldr	r2, [pc, #376]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005448:	f043 0304 	orr.w	r3, r3, #4
 800544c:	6313      	str	r3, [r2, #48]	; 0x30
 800544e:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	4b58      	ldr	r3, [pc, #352]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	4a57      	ldr	r2, [pc, #348]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	6313      	str	r3, [r2, #48]	; 0x30
 800546a:	4b55      	ldr	r3, [pc, #340]	; (80055c0 <MX_GPIO_Init+0x198>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	4b51      	ldr	r3, [pc, #324]	; (80055c0 <MX_GPIO_Init+0x198>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	4a50      	ldr	r2, [pc, #320]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6313      	str	r3, [r2, #48]	; 0x30
 8005486:	4b4e      	ldr	r3, [pc, #312]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <MX_GPIO_Init+0x198>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	4a49      	ldr	r2, [pc, #292]	; (80055c0 <MX_GPIO_Init+0x198>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6313      	str	r3, [r2, #48]	; 0x30
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <MX_GPIO_Init+0x198>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80054ae:	2200      	movs	r2, #0
 80054b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054b4:	4843      	ldr	r0, [pc, #268]	; (80055c4 <MX_GPIO_Init+0x19c>)
 80054b6:	f005 fcab 	bl	800ae10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 80054ba:	2200      	movs	r2, #0
 80054bc:	f247 4102 	movw	r1, #29698	; 0x7402
 80054c0:	4841      	ldr	r0, [pc, #260]	; (80055c8 <MX_GPIO_Init+0x1a0>)
 80054c2:	f005 fca5 	bl	800ae10 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 80054c6:	2200      	movs	r2, #0
 80054c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054cc:	483f      	ldr	r0, [pc, #252]	; (80055cc <MX_GPIO_Init+0x1a4>)
 80054ce:	f005 fc9f 	bl	800ae10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80054d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054d8:	2301      	movs	r3, #1
 80054da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e0:	2300      	movs	r3, #0
 80054e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	4619      	mov	r1, r3
 80054ea:	4836      	ldr	r0, [pc, #216]	; (80055c4 <MX_GPIO_Init+0x19c>)
 80054ec:	f005 faf4 	bl	800aad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 80054f0:	2310      	movs	r3, #16
 80054f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80054fe:	f107 0314 	add.w	r3, r7, #20
 8005502:	4619      	mov	r1, r3
 8005504:	4831      	ldr	r0, [pc, #196]	; (80055cc <MX_GPIO_Init+0x1a4>)
 8005506:	f005 fae7 	bl	800aad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 800550a:	f247 4302 	movw	r3, #29698	; 0x7402
 800550e:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005510:	2301      	movs	r3, #1
 8005512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005518:	2300      	movs	r3, #0
 800551a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	4619      	mov	r1, r3
 8005522:	4829      	ldr	r0, [pc, #164]	; (80055c8 <MX_GPIO_Init+0x1a0>)
 8005524:	f005 fad8 	bl	800aad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005528:	2304      	movs	r3, #4
 800552a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800552c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	4619      	mov	r1, r3
 800553c:	4822      	ldr	r0, [pc, #136]	; (80055c8 <MX_GPIO_Init+0x1a0>)
 800553e:	f005 facb 	bl	800aad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005550:	f107 0314 	add.w	r3, r7, #20
 8005554:	4619      	mov	r1, r3
 8005556:	481c      	ldr	r0, [pc, #112]	; (80055c8 <MX_GPIO_Init+0x1a0>)
 8005558:	f005 fabe 	bl	800aad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800555c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005562:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	4619      	mov	r1, r3
 8005572:	4816      	ldr	r0, [pc, #88]	; (80055cc <MX_GPIO_Init+0x1a4>)
 8005574:	f005 fab0 	bl	800aad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800557c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800557e:	2301      	movs	r3, #1
 8005580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 800558a:	f107 0314 	add.w	r3, r7, #20
 800558e:	4619      	mov	r1, r3
 8005590:	480e      	ldr	r0, [pc, #56]	; (80055cc <MX_GPIO_Init+0x1a4>)
 8005592:	f005 faa1 	bl	800aad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005596:	2200      	movs	r2, #0
 8005598:	2100      	movs	r1, #0
 800559a:	2008      	movs	r0, #8
 800559c:	f004 fe2b 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80055a0:	2008      	movs	r0, #8
 80055a2:	f004 fe44 	bl	800a22e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	2017      	movs	r0, #23
 80055ac:	f004 fe23 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80055b0:	2017      	movs	r0, #23
 80055b2:	f004 fe3c 	bl	800a22e <HAL_NVIC_EnableIRQ>

}
 80055b6:	bf00      	nop
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40020800 	.word	0x40020800
 80055c8:	40020400 	.word	0x40020400
 80055cc:	40020000 	.word	0x40020000

080055d0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <MX_I2C1_Init+0x50>)
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <MX_I2C1_Init+0x54>)
 80055d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <MX_I2C1_Init+0x50>)
 80055dc:	4a12      	ldr	r2, [pc, #72]	; (8005628 <MX_I2C1_Init+0x58>)
 80055de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <MX_I2C1_Init+0x50>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <MX_I2C1_Init+0x50>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <MX_I2C1_Init+0x50>)
 80055ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <MX_I2C1_Init+0x50>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <MX_I2C1_Init+0x50>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <MX_I2C1_Init+0x50>)
 8005602:	2200      	movs	r2, #0
 8005604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <MX_I2C1_Init+0x50>)
 8005608:	2200      	movs	r2, #0
 800560a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800560c:	4804      	ldr	r0, [pc, #16]	; (8005620 <MX_I2C1_Init+0x50>)
 800560e:	f005 fc4b 	bl	800aea8 <HAL_I2C_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005618:	f000 fa7c 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200003f0 	.word	0x200003f0
 8005624:	40005400 	.word	0x40005400
 8005628:	00061a80 	.word	0x00061a80

0800562c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <MX_I2C3_Init+0x50>)
 8005632:	4a13      	ldr	r2, [pc, #76]	; (8005680 <MX_I2C3_Init+0x54>)
 8005634:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <MX_I2C3_Init+0x50>)
 8005638:	4a12      	ldr	r2, [pc, #72]	; (8005684 <MX_I2C3_Init+0x58>)
 800563a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <MX_I2C3_Init+0x50>)
 800563e:	2200      	movs	r2, #0
 8005640:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005642:	4b0e      	ldr	r3, [pc, #56]	; (800567c <MX_I2C3_Init+0x50>)
 8005644:	2200      	movs	r2, #0
 8005646:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <MX_I2C3_Init+0x50>)
 800564a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800564e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <MX_I2C3_Init+0x50>)
 8005652:	2200      	movs	r2, #0
 8005654:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <MX_I2C3_Init+0x50>)
 8005658:	2200      	movs	r2, #0
 800565a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <MX_I2C3_Init+0x50>)
 800565e:	2200      	movs	r2, #0
 8005660:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005662:	4b06      	ldr	r3, [pc, #24]	; (800567c <MX_I2C3_Init+0x50>)
 8005664:	2200      	movs	r2, #0
 8005666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005668:	4804      	ldr	r0, [pc, #16]	; (800567c <MX_I2C3_Init+0x50>)
 800566a:	f005 fc1d 	bl	800aea8 <HAL_I2C_Init>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005674:	f000 fa4e 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2000033c 	.word	0x2000033c
 8005680:	40005c00 	.word	0x40005c00
 8005684:	000186a0 	.word	0x000186a0

08005688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005690:	f107 031c 	add.w	r3, r7, #28
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a74      	ldr	r2, [pc, #464]	; (8005878 <HAL_I2C_MspInit+0x1f0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	f040 8091 	bne.w	80057ce <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	4b72      	ldr	r3, [pc, #456]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	4a71      	ldr	r2, [pc, #452]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	6313      	str	r3, [r2, #48]	; 0x30
 80056bc:	4b6f      	ldr	r3, [pc, #444]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 80056c8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80056cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056ce:	2312      	movs	r3, #18
 80056d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d6:	2303      	movs	r3, #3
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80056da:	2304      	movs	r3, #4
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056de:	f107 031c 	add.w	r3, r7, #28
 80056e2:	4619      	mov	r1, r3
 80056e4:	4866      	ldr	r0, [pc, #408]	; (8005880 <HAL_I2C_MspInit+0x1f8>)
 80056e6:	f005 f9f7 	bl	800aad8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	4b63      	ldr	r3, [pc, #396]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a62      	ldr	r2, [pc, #392]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80056f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b60      	ldr	r3, [pc, #384]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005708:	4a5f      	ldr	r2, [pc, #380]	; (8005888 <HAL_I2C_MspInit+0x200>)
 800570a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800570c:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 800570e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005712:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005714:	4b5b      	ldr	r3, [pc, #364]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800571a:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 800571c:	2200      	movs	r2, #0
 800571e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005720:	4b58      	ldr	r3, [pc, #352]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005726:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005728:	4b56      	ldr	r3, [pc, #344]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 800572a:	2200      	movs	r2, #0
 800572c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800572e:	4b55      	ldr	r3, [pc, #340]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005730:	2200      	movs	r2, #0
 8005732:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005734:	4b53      	ldr	r3, [pc, #332]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800573a:	4b52      	ldr	r3, [pc, #328]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005740:	4b50      	ldr	r3, [pc, #320]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005742:	2200      	movs	r2, #0
 8005744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005746:	484f      	ldr	r0, [pc, #316]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 8005748:	f004 fdb6 	bl	800a2b8 <HAL_DMA_Init>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005752:	f000 f9df 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a4a      	ldr	r2, [pc, #296]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
 800575c:	4a49      	ldr	r2, [pc, #292]	; (8005884 <HAL_I2C_MspInit+0x1fc>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005762:	4b4a      	ldr	r3, [pc, #296]	; (800588c <HAL_I2C_MspInit+0x204>)
 8005764:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <HAL_I2C_MspInit+0x208>)
 8005766:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_I2C_MspInit+0x204>)
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800576e:	4b47      	ldr	r3, [pc, #284]	; (800588c <HAL_I2C_MspInit+0x204>)
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005774:	4b45      	ldr	r3, [pc, #276]	; (800588c <HAL_I2C_MspInit+0x204>)
 8005776:	2200      	movs	r2, #0
 8005778:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800577a:	4b44      	ldr	r3, [pc, #272]	; (800588c <HAL_I2C_MspInit+0x204>)
 800577c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005780:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005782:	4b42      	ldr	r3, [pc, #264]	; (800588c <HAL_I2C_MspInit+0x204>)
 8005784:	2200      	movs	r2, #0
 8005786:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005788:	4b40      	ldr	r3, [pc, #256]	; (800588c <HAL_I2C_MspInit+0x204>)
 800578a:	2200      	movs	r2, #0
 800578c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800578e:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_I2C_MspInit+0x204>)
 8005790:	2200      	movs	r2, #0
 8005792:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005794:	4b3d      	ldr	r3, [pc, #244]	; (800588c <HAL_I2C_MspInit+0x204>)
 8005796:	2200      	movs	r2, #0
 8005798:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800579a:	4b3c      	ldr	r3, [pc, #240]	; (800588c <HAL_I2C_MspInit+0x204>)
 800579c:	2200      	movs	r2, #0
 800579e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80057a0:	483a      	ldr	r0, [pc, #232]	; (800588c <HAL_I2C_MspInit+0x204>)
 80057a2:	f004 fd89 	bl	800a2b8 <HAL_DMA_Init>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80057ac:	f000 f9b2 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a36      	ldr	r2, [pc, #216]	; (800588c <HAL_I2C_MspInit+0x204>)
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34
 80057b6:	4a35      	ldr	r2, [pc, #212]	; (800588c <HAL_I2C_MspInit+0x204>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80057bc:	2200      	movs	r2, #0
 80057be:	2100      	movs	r1, #0
 80057c0:	2020      	movs	r0, #32
 80057c2:	f004 fd18 	bl	800a1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80057c6:	2020      	movs	r0, #32
 80057c8:	f004 fd31 	bl	800a22e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80057cc:	e050      	b.n	8005870 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a30      	ldr	r2, [pc, #192]	; (8005894 <HAL_I2C_MspInit+0x20c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d14b      	bne.n	8005870 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	4a26      	ldr	r2, [pc, #152]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6313      	str	r3, [r2, #48]	; 0x30
 80057e8:	4b24      	ldr	r3, [pc, #144]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 80057fe:	f043 0302 	orr.w	r3, r3, #2
 8005802:	6313      	str	r3, [r2, #48]	; 0x30
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005816:	2312      	movs	r3, #18
 8005818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581a:	2300      	movs	r3, #0
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581e:	2303      	movs	r3, #3
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005822:	2304      	movs	r3, #4
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005826:	f107 031c 	add.w	r3, r7, #28
 800582a:	4619      	mov	r1, r3
 800582c:	481a      	ldr	r0, [pc, #104]	; (8005898 <HAL_I2C_MspInit+0x210>)
 800582e:	f005 f953 	bl	800aad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005838:	2312      	movs	r3, #18
 800583a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583c:	2300      	movs	r3, #0
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005840:	2303      	movs	r3, #3
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005844:	2309      	movs	r3, #9
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005848:	f107 031c 	add.w	r3, r7, #28
 800584c:	4619      	mov	r1, r3
 800584e:	480c      	ldr	r0, [pc, #48]	; (8005880 <HAL_I2C_MspInit+0x1f8>)
 8005850:	f005 f942 	bl	800aad8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005854:	2300      	movs	r3, #0
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	4a07      	ldr	r2, [pc, #28]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 800585e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005862:	6413      	str	r3, [r2, #64]	; 0x40
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <HAL_I2C_MspInit+0x1f4>)
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	68bb      	ldr	r3, [r7, #8]
}
 8005870:	bf00      	nop
 8005872:	3730      	adds	r7, #48	; 0x30
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40005400 	.word	0x40005400
 800587c:	40023800 	.word	0x40023800
 8005880:	40020400 	.word	0x40020400
 8005884:	20000444 	.word	0x20000444
 8005888:	40026010 	.word	0x40026010
 800588c:	20000390 	.word	0x20000390
 8005890:	40026028 	.word	0x40026028
 8005894:	40005c00 	.word	0x40005c00
 8005898:	40020000 	.word	0x40020000

0800589c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058a2:	f004 fad3 	bl	8009e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058a6:	f000 f85f 	bl	8005968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058aa:	f7ff fdbd 	bl	8005428 <MX_GPIO_Init>
  MX_SPI1_Init();
 80058ae:	f003 fad5 	bl	8008e5c <MX_SPI1_Init>
  MX_DMA_Init();
 80058b2:	f7fc fe1f 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80058b6:	f004 f903 	bl	8009ac0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80058ba:	f003 fb05 	bl	8008ec8 <MX_SPI3_Init>
  MX_I2C1_Init();
 80058be:	f7ff fe87 	bl	80055d0 <MX_I2C1_Init>
  MX_TIM11_Init();
 80058c2:	f003 fe7f 	bl	80095c4 <MX_TIM11_Init>
  MX_TIM10_Init();
 80058c6:	f003 fe59 	bl	800957c <MX_TIM10_Init>
  MX_I2C3_Init();
 80058ca:	f7ff feaf 	bl	800562c <MX_I2C3_Init>
  MX_SPI5_Init();
 80058ce:	f003 fb31 	bl	8008f34 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80058d2:	f004 f8cb 	bl	8009a6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80058d6:	f003 fdfd 	bl	80094d4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80058da:	f000 f8ad 	bl	8005a38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80058de:	481a      	ldr	r0, [pc, #104]	; (8005948 <main+0xac>)
 80058e0:	f009 fc92 	bl	800f208 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80058e4:	4819      	ldr	r0, [pc, #100]	; (800594c <main+0xb0>)
 80058e6:	f7fc fb65 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 80058ea:	4919      	ldr	r1, [pc, #100]	; (8005950 <main+0xb4>)
 80058ec:	4819      	ldr	r0, [pc, #100]	; (8005954 <main+0xb8>)
 80058ee:	f004 f86e 	bl	80099ce <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 80058f2:	4919      	ldr	r1, [pc, #100]	; (8005958 <main+0xbc>)
 80058f4:	4819      	ldr	r0, [pc, #100]	; (800595c <main+0xc0>)
 80058f6:	f004 f86a 	bl	80099ce <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80058fa:	2117      	movs	r1, #23
 80058fc:	4818      	ldr	r0, [pc, #96]	; (8005960 <main+0xc4>)
 80058fe:	f7fc fda9 	bl	8002454 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 8005902:	4818      	ldr	r0, [pc, #96]	; (8005964 <main+0xc8>)
 8005904:	f7fc fe4c 	bl	80025a0 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8005908:	2001      	movs	r0, #1
 800590a:	f7fc fea3 	bl	8002654 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 800590e:	2001      	movs	r0, #1
 8005910:	f7fc fec0 	bl	8002694 <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	2201      	movs	r2, #1
 800591c:	4619      	mov	r1, r3
 800591e:	2001      	movs	r0, #1
 8005920:	f7fd f804 	bl	800292c <eeprom_read>
  {

	  //
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005924:	480b      	ldr	r0, [pc, #44]	; (8005954 <main+0xb8>)
 8005926:	f004 f805 	bl	8009934 <UARTDMA_IsDataReceivedReady>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <main+0x9a>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005930:	4808      	ldr	r0, [pc, #32]	; (8005954 <main+0xb8>)
 8005932:	f002 fdd5 	bl	80084e0 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005936:	4807      	ldr	r0, [pc, #28]	; (8005954 <main+0xb8>)
 8005938:	f004 f80e 	bl	8009958 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 800593c:	f7fc fcb8 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005940:	f000 f924 	bl	8005b8c <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005944:	e7ee      	b.n	8005924 <main+0x88>
 8005946:	bf00      	nop
 8005948:	200009d4 	.word	0x200009d4
 800594c:	20000934 	.word	0x20000934
 8005950:	20000c28 	.word	0x20000c28
 8005954:	200004a4 	.word	0x200004a4
 8005958:	20000be4 	.word	0x20000be4
 800595c:	20000670 	.word	0x20000670
 8005960:	200008dc 	.word	0x200008dc
 8005964:	200003f0 	.word	0x200003f0

08005968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b094      	sub	sp, #80	; 0x50
 800596c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800596e:	f107 0320 	add.w	r3, r7, #32
 8005972:	2230      	movs	r2, #48	; 0x30
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f00b f922 	bl	8010bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800597c:	f107 030c 	add.w	r3, r7, #12
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800598c:	2300      	movs	r3, #0
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <SystemClock_Config+0xc8>)
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <SystemClock_Config+0xc8>)
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599a:	6413      	str	r3, [r2, #64]	; 0x40
 800599c:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <SystemClock_Config+0xc8>)
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059a8:	2300      	movs	r3, #0
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <SystemClock_Config+0xcc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <SystemClock_Config+0xcc>)
 80059b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <SystemClock_Config+0xcc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059ce:	2302      	movs	r3, #2
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80059d8:	230c      	movs	r3, #12
 80059da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80059dc:	2360      	movs	r3, #96	; 0x60
 80059de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059e0:	2302      	movs	r3, #2
 80059e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80059e4:	2304      	movs	r3, #4
 80059e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059e8:	f107 0320 	add.w	r3, r7, #32
 80059ec:	4618      	mov	r0, r3
 80059ee:	f008 fb5f 	bl	800e0b0 <HAL_RCC_OscConfig>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80059f8:	f000 f88c 	bl	8005b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059fc:	230f      	movs	r3, #15
 80059fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a00:	2302      	movs	r3, #2
 8005a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005a12:	f107 030c 	add.w	r3, r7, #12
 8005a16:	2103      	movs	r1, #3
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f008 fdc1 	bl	800e5a0 <HAL_RCC_ClockConfig>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005a24:	f000 f876 	bl	8005b14 <Error_Handler>
  }
}
 8005a28:	bf00      	nop
 8005a2a:	3750      	adds	r7, #80	; 0x50
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40007000 	.word	0x40007000

08005a38 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2100      	movs	r1, #0
 8005a40:	200a      	movs	r0, #10
 8005a42:	f004 fbd8 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005a46:	200a      	movs	r0, #10
 8005a48:	f004 fbf1 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2100      	movs	r1, #0
 8005a50:	201f      	movs	r0, #31
 8005a52:	f004 fbd0 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005a56:	201f      	movs	r0, #31
 8005a58:	f004 fbe9 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	2026      	movs	r0, #38	; 0x26
 8005a62:	f004 fbc8 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a66:	2026      	movs	r0, #38	; 0x26
 8005a68:	f004 fbe1 	bl	800a22e <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2100      	movs	r1, #0
 8005a70:	2033      	movs	r0, #51	; 0x33
 8005a72:	f004 fbc0 	bl	800a1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005a76:	2033      	movs	r0, #51	; 0x33
 8005a78:	f004 fbd9 	bl	800a22e <HAL_NVIC_EnableIRQ>
}
 8005a7c:	bf00      	nop
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005a92:	f7ff f8e9 	bl	8004c68 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d117      	bne.n	8005ad0 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d90d      	bls.n	8005ac4 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aac:	480d      	ldr	r0, [pc, #52]	; (8005ae4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005aae:	f005 f9c8 	bl	800ae42 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f7ff f964 	bl	8004d80 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005abe:	480a      	ldr	r0, [pc, #40]	; (8005ae8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005ac0:	f009 fc04 	bl	800f2cc <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005ace:	701a      	strb	r2, [r3, #0]
	}
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40014800 	.word	0x40014800
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	20000254 	.word	0x20000254
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	2000098c 	.word	0x2000098c

08005aec <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d101      	bne.n	8005b02 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005afe:	f7fc fc9d 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d101      	bne.n	8005b0c <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005b08:	f7fc fe08 	bl	800271c <DS3231_ClearAlarm2Flag>

	}
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005b1a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005b1e:	f7fc f9eb 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005b22:	4814      	ldr	r0, [pc, #80]	; (8005b74 <Error_Handler+0x60>)
 8005b24:	f7fb fde4 	bl	80016f0 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005b28:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <Error_Handler+0x64>)
 8005b2a:	4914      	ldr	r1, [pc, #80]	; (8005b7c <Error_Handler+0x68>)
 8005b2c:	4814      	ldr	r0, [pc, #80]	; (8005b80 <Error_Handler+0x6c>)
 8005b2e:	f00b fecf 	bl	80118d0 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2214      	movs	r2, #20
 8005b40:	210a      	movs	r1, #10
 8005b42:	480f      	ldr	r0, [pc, #60]	; (8005b80 <Error_Handler+0x6c>)
 8005b44:	f7fb ffee 	bl	8001b24 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005b48:	f240 1337 	movw	r3, #311	; 0x137
 8005b4c:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <Error_Handler+0x70>)
 8005b4e:	490e      	ldr	r1, [pc, #56]	; (8005b88 <Error_Handler+0x74>)
 8005b50:	480b      	ldr	r0, [pc, #44]	; (8005b80 <Error_Handler+0x6c>)
 8005b52:	f00b febd 	bl	80118d0 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005b56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2300      	movs	r3, #0
 8005b62:	2232      	movs	r2, #50	; 0x32
 8005b64:	210a      	movs	r1, #10
 8005b66:	4806      	ldr	r0, [pc, #24]	; (8005b80 <Error_Handler+0x6c>)
 8005b68:	f7fb ffdc 	bl	8001b24 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b6c:	b672      	cpsid	i
}
 8005b6e:	bf00      	nop

  __disable_irq();

  while (1)
 8005b70:	e7fe      	b.n	8005b70 <Error_Handler+0x5c>
 8005b72:	bf00      	nop
 8005b74:	08026fd4 	.word	0x08026fd4
 8005b78:	080159e0 	.word	0x080159e0
 8005b7c:	080159f4 	.word	0x080159f4
 8005b80:	200002fc 	.word	0x200002fc
 8005b84:	08026504 	.word	0x08026504
 8005b88:	08015a0c 	.word	0x08015a0c

08005b8c <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
	switch(State)
 8005b90:	4b4f      	ldr	r3, [pc, #316]	; (8005cd0 <MenuTFT+0x144>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	f200 8098 	bhi.w	8005cca <MenuTFT+0x13e>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <MenuTFT+0x14>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bd7 	.word	0x08005bd7
 8005ba8:	08005c0b 	.word	0x08005c0b
 8005bac:	08005c3b 	.word	0x08005c3b
 8005bb0:	08005c59 	.word	0x08005c59
 8005bb4:	08005c23 	.word	0x08005c23
 8005bb8:	08005c71 	.word	0x08005c71
 8005bbc:	08005c8f 	.word	0x08005c8f
 8005bc0:	08005cad 	.word	0x08005cad
	{
	case MENUTFT_INIT:
		system_init();
 8005bc4:	f7fd fab6 	bl	8003134 <system_init>
		State = MENUTFT_PARAMETERS;
 8005bc8:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <MenuTFT+0x144>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <MenuTFT+0x148>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
		break;
 8005bd4:	e079      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005bd6:	4b3f      	ldr	r3, [pc, #252]	; (8005cd4 <MenuTFT+0x148>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d112      	bne.n	8005c04 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005bde:	4b3e      	ldr	r3, [pc, #248]	; (8005cd8 <MenuTFT+0x14c>)
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	4b3d      	ldr	r3, [pc, #244]	; (8005cdc <MenuTFT+0x150>)
 8005be6:	ed93 7a00 	vldr	s14, [r3]
 8005bea:	eeb0 1a47 	vmov.f32	s2, s14
 8005bee:	2100      	movs	r1, #0
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005ce0 <MenuTFT+0x154>
 8005bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bfa:	f7fd fc19 	bl	8003430 <showCurrentParameters>
			StateChangeFlag = 0;
 8005bfe:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <MenuTFT+0x148>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005c04:	f000 f874 	bl	8005cf0 <TouchParametersActivity>
		break;
 8005c08:	e05f      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005c0a:	4b32      	ldr	r3, [pc, #200]	; (8005cd4 <MenuTFT+0x148>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d104      	bne.n	8005c1c <MenuTFT+0x90>
		{
			showControlPanel();
 8005c12:	f7fd fd57 	bl	80036c4 <showControlPanel>
			StateChangeFlag = 0;
 8005c16:	4b2f      	ldr	r3, [pc, #188]	; (8005cd4 <MenuTFT+0x148>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005c1c:	f000 f8c8 	bl	8005db0 <TouchSwitchActivity>
		break;
 8005c20:	e053      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005c22:	4b2c      	ldr	r3, [pc, #176]	; (8005cd4 <MenuTFT+0x148>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d104      	bne.n	8005c34 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005c2a:	f7fd fe25 	bl	8003878 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <MenuTFT+0x148>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005c34:	f000 f92e 	bl	8005e94 <TouchLightsActivity>
		break;
 8005c38:	e047      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <MenuTFT+0x148>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d107      	bne.n	8005c52 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005c42:	f7fd fef1 	bl	8003a28 <showClockSetPanel>
			ClockChangeFlag = 1;
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <MenuTFT+0x158>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c4c:	4b21      	ldr	r3, [pc, #132]	; (8005cd4 <MenuTFT+0x148>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005c52:	f000 f98f 	bl	8005f74 <TouchClockActivity>
		break;
 8005c56:	e038      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005c58:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <MenuTFT+0x148>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d104      	bne.n	8005c6a <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005c60:	f7fe f84a 	bl	8003cf8 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <MenuTFT+0x148>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005c6a:	f000 fa47 	bl	80060fc <TouchPredefinedActivityActivity>
		break;
 8005c6e:	e02c      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005c70:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <MenuTFT+0x148>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d107      	bne.n	8005c88 <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005c78:	f7fe f94e 	bl	8003f18 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <MenuTFT+0x15c>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <MenuTFT+0x148>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005c88:	f000 fa82 	bl	8006190 <TouchWSLedActivity>
		break;
 8005c8c:	e01d      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <MenuTFT+0x148>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d107      	bne.n	8005ca6 <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005c96:	f7fe fedb 	bl	8004a50 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <MenuTFT+0x160>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <MenuTFT+0x148>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005ca6:	f000 fadf 	bl	8006268 <Schedule1Activity>
		break;
 8005caa:	e00e      	b.n	8005cca <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <MenuTFT+0x148>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d107      	bne.n	8005cc4 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005cb4:	f7fe ff60 	bl	8004b78 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <MenuTFT+0x160>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <MenuTFT+0x148>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005cc4:	f000 fbd2 	bl	800646c <Schedule2Activity>
		break;
 8005cc8:	bf00      	nop
	}
}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000290 	.word	0x20000290
 8005cd4:	20000255 	.word	0x20000255
 8005cd8:	20000294 	.word	0x20000294
 8005cdc:	2000029c 	.word	0x2000029c
 8005ce0:	00000000 	.word	0x00000000
 8005ce4:	20000256 	.word	0x20000256
 8005ce8:	20000257 	.word	0x20000257
 8005cec:	20000258 	.word	0x20000258

08005cf0 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005cf6:	f7fc fac9 	bl	800228c <XPT2046_IsTouched>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d04c      	beq.n	8005d9a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005d00:	f004 f90a 	bl	8009f18 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <TouchParametersActivity+0xb4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d10:	d343      	bcc.n	8005d9a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005d12:	1d3a      	adds	r2, r7, #4
 8005d14:	1dbb      	adds	r3, r7, #6
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fc fa79 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d90f      	bls.n	8005d44 <TouchParametersActivity+0x54>
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	2b6e      	cmp	r3, #110	; 0x6e
 8005d28:	d80c      	bhi.n	8005d44 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d2a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d2c:	2bd7      	cmp	r3, #215	; 0xd7
 8005d2e:	d909      	bls.n	8005d44 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d30:	88bb      	ldrh	r3, [r7, #4]
 8005d32:	2bec      	cmp	r3, #236	; 0xec
 8005d34:	d806      	bhi.n	8005d44 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005d36:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <TouchParametersActivity+0xb8>)
 8005d38:	2205      	movs	r2, #5
 8005d3a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <TouchParametersActivity+0xbc>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e025      	b.n	8005d90 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2bdb      	cmp	r3, #219	; 0xdb
 8005d48:	d910      	bls.n	8005d6c <TouchParametersActivity+0x7c>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005d50:	d20c      	bcs.n	8005d6c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d52:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d54:	2bd7      	cmp	r3, #215	; 0xd7
 8005d56:	d909      	bls.n	8005d6c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d58:	88bb      	ldrh	r3, [r7, #4]
 8005d5a:	2bec      	cmp	r3, #236	; 0xec
 8005d5c:	d806      	bhi.n	8005d6c <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <TouchParametersActivity+0xb8>)
 8005d60:	2202      	movs	r2, #2
 8005d62:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <TouchParametersActivity+0xbc>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e011      	b.n	8005d90 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	2b77      	cmp	r3, #119	; 0x77
 8005d70:	d90e      	bls.n	8005d90 <TouchParametersActivity+0xa0>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2bd2      	cmp	r3, #210	; 0xd2
 8005d76:	d80b      	bhi.n	8005d90 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d78:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d7a:	2bd7      	cmp	r3, #215	; 0xd7
 8005d7c:	d908      	bls.n	8005d90 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d7e:	88bb      	ldrh	r3, [r7, #4]
 8005d80:	2bec      	cmp	r3, #236	; 0xec
 8005d82:	d805      	bhi.n	8005d90 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <TouchParametersActivity+0xb8>)
 8005d86:	2203      	movs	r2, #3
 8005d88:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <TouchParametersActivity+0xbc>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005d90:	f004 f8c2 	bl	8009f18 <HAL_GetTick>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4a03      	ldr	r2, [pc, #12]	; (8005da4 <TouchParametersActivity+0xb4>)
 8005d98:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	2000028c 	.word	0x2000028c
 8005da8:	20000290 	.word	0x20000290
 8005dac:	20000255 	.word	0x20000255

08005db0 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005db6:	f7fc fa69 	bl	800228c <XPT2046_IsTouched>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d05d      	beq.n	8005e7c <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005dc0:	f004 f8aa 	bl	8009f18 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <TouchSwitchActivity+0xd4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd0:	d354      	bcc.n	8005e7c <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005dd2:	1d3a      	adds	r2, r7, #4
 8005dd4:	1dbb      	adds	r3, r7, #6
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fc fa19 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d90f      	bls.n	8005e04 <TouchSwitchActivity+0x54>
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	2b6e      	cmp	r3, #110	; 0x6e
 8005de8:	d80c      	bhi.n	8005e04 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005dea:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005dec:	2bd7      	cmp	r3, #215	; 0xd7
 8005dee:	d909      	bls.n	8005e04 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005df0:	88bb      	ldrh	r3, [r7, #4]
 8005df2:	2bec      	cmp	r3, #236	; 0xec
 8005df4:	d806      	bhi.n	8005e04 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <TouchSwitchActivity+0xd8>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005dfc:	4b23      	ldr	r3, [pc, #140]	; (8005e8c <TouchSwitchActivity+0xdc>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e036      	b.n	8005e72 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e04:	88fb      	ldrh	r3, [r7, #6]
 8005e06:	2bdb      	cmp	r3, #219	; 0xdb
 8005e08:	d910      	bls.n	8005e2c <TouchSwitchActivity+0x7c>
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005e10:	d20c      	bcs.n	8005e2c <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e12:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e14:	2bd7      	cmp	r3, #215	; 0xd7
 8005e16:	d909      	bls.n	8005e2c <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e18:	88bb      	ldrh	r3, [r7, #4]
 8005e1a:	2bec      	cmp	r3, #236	; 0xec
 8005e1c:	d806      	bhi.n	8005e2c <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <TouchSwitchActivity+0xd8>)
 8005e20:	2205      	movs	r2, #5
 8005e22:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <TouchSwitchActivity+0xdc>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e022      	b.n	8005e72 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	2b77      	cmp	r3, #119	; 0x77
 8005e30:	d90f      	bls.n	8005e52 <TouchSwitchActivity+0xa2>
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	2bd2      	cmp	r3, #210	; 0xd2
 8005e36:	d80c      	bhi.n	8005e52 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e38:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e3a:	2bd7      	cmp	r3, #215	; 0xd7
 8005e3c:	d909      	bls.n	8005e52 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e3e:	88bb      	ldrh	r3, [r7, #4]
 8005e40:	2bec      	cmp	r3, #236	; 0xec
 8005e42:	d806      	bhi.n	8005e52 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <TouchSwitchActivity+0xd8>)
 8005e46:	2204      	movs	r2, #4
 8005e48:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e4a:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <TouchSwitchActivity+0xdc>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e00f      	b.n	8005e72 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005e58:	d30b      	bcc.n	8005e72 <TouchSwitchActivity+0xc2>
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005e60:	d207      	bcs.n	8005e72 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005e62:	480b      	ldr	r0, [pc, #44]	; (8005e90 <TouchSwitchActivity+0xe0>)
 8005e64:	f7fb fc44 	bl	80016f0 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005e68:	88bb      	ldrh	r3, [r7, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 fe55 	bl	8007b1c <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005e72:	f004 f851 	bl	8009f18 <HAL_GetTick>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4a02      	ldr	r2, [pc, #8]	; (8005e84 <TouchSwitchActivity+0xd4>)
 8005e7a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2000028c 	.word	0x2000028c
 8005e88:	20000290 	.word	0x20000290
 8005e8c:	20000255 	.word	0x20000255
 8005e90:	08026fd4 	.word	0x08026fd4

08005e94 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e9a:	f7fc f9f7 	bl	800228c <XPT2046_IsTouched>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d05b      	beq.n	8005f5c <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005ea4:	f004 f838 	bl	8009f18 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <TouchLightsActivity+0xd0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb4:	d352      	bcc.n	8005f5c <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005eb6:	1d3a      	adds	r2, r7, #4
 8005eb8:	1dbb      	adds	r3, r7, #6
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fc f9a7 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d90f      	bls.n	8005ee8 <TouchLightsActivity+0x54>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b6e      	cmp	r3, #110	; 0x6e
 8005ecc:	d80c      	bhi.n	8005ee8 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ece:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ed0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ed2:	d909      	bls.n	8005ee8 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ed4:	88bb      	ldrh	r3, [r7, #4]
 8005ed6:	2bec      	cmp	r3, #236	; 0xec
 8005ed8:	d806      	bhi.n	8005ee8 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <TouchLightsActivity+0xd4>)
 8005edc:	2202      	movs	r2, #2
 8005ede:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ee0:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <TouchLightsActivity+0xd8>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e034      	b.n	8005f52 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	2bdb      	cmp	r3, #219	; 0xdb
 8005eec:	d910      	bls.n	8005f10 <TouchLightsActivity+0x7c>
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005ef4:	d20c      	bcs.n	8005f10 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ef6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ef8:	2bd7      	cmp	r3, #215	; 0xd7
 8005efa:	d909      	bls.n	8005f10 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005efc:	88bb      	ldrh	r3, [r7, #4]
 8005efe:	2bec      	cmp	r3, #236	; 0xec
 8005f00:	d806      	bhi.n	8005f10 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <TouchLightsActivity+0xd4>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f08:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <TouchLightsActivity+0xd8>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	e020      	b.n	8005f52 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b77      	cmp	r3, #119	; 0x77
 8005f14:	d90f      	bls.n	8005f36 <TouchLightsActivity+0xa2>
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	2bd2      	cmp	r3, #210	; 0xd2
 8005f1a:	d80c      	bhi.n	8005f36 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005f1c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005f1e:	2bd7      	cmp	r3, #215	; 0xd7
 8005f20:	d909      	bls.n	8005f36 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005f22:	88bb      	ldrh	r3, [r7, #4]
 8005f24:	2bec      	cmp	r3, #236	; 0xec
 8005f26:	d806      	bhi.n	8005f36 <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <TouchLightsActivity+0xd4>)
 8005f2a:	2206      	movs	r2, #6
 8005f2c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <TouchLightsActivity+0xd8>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e00d      	b.n	8005f52 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2bc7      	cmp	r3, #199	; 0xc7
 8005f3a:	d90a      	bls.n	8005f52 <TouchLightsActivity+0xbe>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2be9      	cmp	r3, #233	; 0xe9
 8005f40:	d807      	bhi.n	8005f52 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005f42:	480b      	ldr	r0, [pc, #44]	; (8005f70 <TouchLightsActivity+0xdc>)
 8005f44:	f7fb fbd4 	bl	80016f0 <EF_SetFont>
				changeLightsStatusTouch(y);
 8005f48:	88bb      	ldrh	r3, [r7, #4]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 ff5b 	bl	8007e08 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8005f52:	f003 ffe1 	bl	8009f18 <HAL_GetTick>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4a02      	ldr	r2, [pc, #8]	; (8005f64 <TouchLightsActivity+0xd0>)
 8005f5a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	2000028c 	.word	0x2000028c
 8005f68:	20000290 	.word	0x20000290
 8005f6c:	20000255 	.word	0x20000255
 8005f70:	08026fd4 	.word	0x08026fd4

08005f74 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8005f7a:	f7fc f987 	bl	800228c <XPT2046_IsTouched>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80a3 	beq.w	80060cc <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005f86:	4853      	ldr	r0, [pc, #332]	; (80060d4 <TouchClockActivity+0x160>)
 8005f88:	f7fb fbb2 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f8c:	f003 ffc4 	bl	8009f18 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	4b51      	ldr	r3, [pc, #324]	; (80060d8 <TouchClockActivity+0x164>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f9c:	f0c0 8096 	bcc.w	80060cc <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005fa0:	1d3a      	adds	r2, r7, #4
 8005fa2:	1dbb      	adds	r3, r7, #6
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fc f932 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005fac:	4b4b      	ldr	r3, [pc, #300]	; (80060dc <TouchClockActivity+0x168>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d114      	bne.n	8005fde <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8005fb4:	f7fc fc0c 	bl	80027d0 <DS3231_GetHour>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4b48      	ldr	r3, [pc, #288]	; (80060e0 <TouchClockActivity+0x16c>)
 8005fbe:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8005fc0:	f7fc fc12 	bl	80027e8 <DS3231_GetMinute>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b46      	ldr	r3, [pc, #280]	; (80060e4 <TouchClockActivity+0x170>)
 8005fca:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8005fcc:	f7fc fbf4 	bl	80027b8 <DS3231_GetDayOfWeek>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4b44      	ldr	r3, [pc, #272]	; (80060e8 <TouchClockActivity+0x174>)
 8005fd6:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8005fd8:	4b40      	ldr	r3, [pc, #256]	; (80060dc <TouchClockActivity+0x168>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b09      	cmp	r3, #9
 8005fe2:	d90f      	bls.n	8006004 <TouchClockActivity+0x90>
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8005fe8:	d80c      	bhi.n	8006004 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fea:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fec:	2bd7      	cmp	r3, #215	; 0xd7
 8005fee:	d909      	bls.n	8006004 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ff0:	88bb      	ldrh	r3, [r7, #4]
 8005ff2:	2bec      	cmp	r3, #236	; 0xec
 8005ff4:	d806      	bhi.n	8006004 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8005ff6:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <TouchClockActivity+0x178>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005ffc:	4b3c      	ldr	r3, [pc, #240]	; (80060f0 <TouchClockActivity+0x17c>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e05e      	b.n	80060c2 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2bdb      	cmp	r3, #219	; 0xdb
 8006008:	d92c      	bls.n	8006064 <TouchClockActivity+0xf0>
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006010:	d228      	bcs.n	8006064 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006012:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006014:	2bd7      	cmp	r3, #215	; 0xd7
 8006016:	d925      	bls.n	8006064 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006018:	88bb      	ldrh	r3, [r7, #4]
 800601a:	2bec      	cmp	r3, #236	; 0xec
 800601c:	d822      	bhi.n	8006064 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 800601e:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <TouchClockActivity+0x174>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fc fbec 	bl	8002800 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8006028:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <TouchClockActivity+0x16c>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fbf9 	bl	8002824 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8006032:	4b2c      	ldr	r3, [pc, #176]	; (80060e4 <TouchClockActivity+0x170>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fc fc09 	bl	800284e <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800603c:	2032      	movs	r0, #50	; 0x32
 800603e:	f7fc fc18 	bl	8002872 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8006042:	492c      	ldr	r1, [pc, #176]	; (80060f4 <TouchClockActivity+0x180>)
 8006044:	482c      	ldr	r0, [pc, #176]	; (80060f8 <TouchClockActivity+0x184>)
 8006046:	f00b fc43 	bl	80118d0 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800604a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	2301      	movs	r3, #1
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006058:	220a      	movs	r2, #10
 800605a:	212f      	movs	r1, #47	; 0x2f
 800605c:	4826      	ldr	r0, [pc, #152]	; (80060f8 <TouchClockActivity+0x184>)
 800605e:	f7fb fd61 	bl	8001b24 <EF_PutString>
 8006062:	e02e      	b.n	80060c2 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	2b6d      	cmp	r3, #109	; 0x6d
 8006068:	d90f      	bls.n	800608a <TouchClockActivity+0x116>
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2bdc      	cmp	r3, #220	; 0xdc
 800606e:	d80c      	bhi.n	800608a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006070:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006072:	2bbd      	cmp	r3, #189	; 0xbd
 8006074:	d909      	bls.n	800608a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006076:	88bb      	ldrh	r3, [r7, #4]
 8006078:	2bd4      	cmp	r3, #212	; 0xd4
 800607a:	d806      	bhi.n	800608a <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 800607c:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <TouchClockActivity+0x178>)
 800607e:	2207      	movs	r2, #7
 8006080:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <TouchClockActivity+0x17c>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e01b      	b.n	80060c2 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2bef      	cmp	r3, #239	; 0xef
 800608e:	d90a      	bls.n	80060a6 <TouchClockActivity+0x132>
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006096:	d806      	bhi.n	80060a6 <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	88ba      	ldrh	r2, [r7, #4]
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fc36 	bl	8007910 <clockIncreaseOneHourAndMinute>
 80060a4:	e00d      	b.n	80060c2 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80060ac:	d309      	bcc.n	80060c2 <TouchClockActivity+0x14e>
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80060b4:	d805      	bhi.n	80060c2 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	88ba      	ldrh	r2, [r7, #4]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 fcb5 	bl	8007a2c <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 80060c2:	f003 ff29 	bl	8009f18 <HAL_GetTick>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4a03      	ldr	r2, [pc, #12]	; (80060d8 <TouchClockActivity+0x164>)
 80060ca:	6013      	str	r3, [r2, #0]
			}
		}
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	08028f4c 	.word	0x08028f4c
 80060d8:	2000028c 	.word	0x2000028c
 80060dc:	20000256 	.word	0x20000256
 80060e0:	20000031 	.word	0x20000031
 80060e4:	20000032 	.word	0x20000032
 80060e8:	20000030 	.word	0x20000030
 80060ec:	20000290 	.word	0x20000290
 80060f0:	20000255 	.word	0x20000255
 80060f4:	08015a24 	.word	0x08015a24
 80060f8:	200002fc 	.word	0x200002fc

080060fc <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 8006102:	f7fc f8c3 	bl	800228c <XPT2046_IsTouched>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d034      	beq.n	8006176 <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800610c:	f003 ff04 	bl	8009f18 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <TouchPredefinedActivityActivity+0x84>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800611c:	d32b      	bcc.n	8006176 <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800611e:	1d3a      	adds	r2, r7, #4
 8006120:	1dbb      	adds	r3, r7, #6
 8006122:	4611      	mov	r1, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f7fc f873 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 800612a:	4816      	ldr	r0, [pc, #88]	; (8006184 <TouchPredefinedActivityActivity+0x88>)
 800612c:	f7fb fae0 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b09      	cmp	r3, #9
 8006134:	d90f      	bls.n	8006156 <TouchPredefinedActivityActivity+0x5a>
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b6e      	cmp	r3, #110	; 0x6e
 800613a:	d80c      	bhi.n	8006156 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800613c:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800613e:	2bd7      	cmp	r3, #215	; 0xd7
 8006140:	d909      	bls.n	8006156 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006142:	88bb      	ldrh	r3, [r7, #4]
 8006144:	2bec      	cmp	r3, #236	; 0xec
 8006146:	d806      	bhi.n	8006156 <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 8006148:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <TouchPredefinedActivityActivity+0x8c>)
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <TouchPredefinedActivityActivity+0x90>)
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e00a      	b.n	800616c <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b63      	cmp	r3, #99	; 0x63
 800615a:	d907      	bls.n	800616c <TouchPredefinedActivityActivity+0x70>
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	2bdc      	cmp	r3, #220	; 0xdc
 8006160:	d804      	bhi.n	800616c <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 8006162:	88bb      	ldrh	r3, [r7, #4]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	4618      	mov	r0, r3
 8006168:	f001 ffb4 	bl	80080d4 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 800616c:	f003 fed4 	bl	8009f18 <HAL_GetTick>
 8006170:	4603      	mov	r3, r0
 8006172:	4a03      	ldr	r2, [pc, #12]	; (8006180 <TouchPredefinedActivityActivity+0x84>)
 8006174:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	2000028c 	.word	0x2000028c
 8006184:	08026fd4 	.word	0x08026fd4
 8006188:	20000290 	.word	0x20000290
 800618c:	20000255 	.word	0x20000255

08006190 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006196:	f7fc f879 	bl	800228c <XPT2046_IsTouched>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d050      	beq.n	8006242 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80061a0:	482a      	ldr	r0, [pc, #168]	; (800624c <TouchWSLedActivity+0xbc>)
 80061a2:	f7fb faa5 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80061a6:	f003 feb7 	bl	8009f18 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b28      	ldr	r3, [pc, #160]	; (8006250 <TouchWSLedActivity+0xc0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b6:	d344      	bcc.n	8006242 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80061b8:	1d3a      	adds	r2, r7, #4
 80061ba:	1dbb      	adds	r3, r7, #6
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fc f826 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80061c4:	4b23      	ldr	r3, [pc, #140]	; (8006254 <TouchWSLedActivity+0xc4>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d10b      	bne.n	80061e4 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80061cc:	bf00      	nop
 80061ce:	2201      	movs	r2, #1
 80061d0:	4921      	ldr	r1, [pc, #132]	; (8006258 <TouchWSLedActivity+0xc8>)
 80061d2:	2001      	movs	r0, #1
 80061d4:	f7fc fbaa 	bl	800292c <eeprom_read>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f7      	bne.n	80061ce <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 80061de:	4b1f      	ldr	r3, [pc, #124]	; (800625c <TouchWSLedActivity+0xcc>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d90f      	bls.n	800620a <TouchWSLedActivity+0x7a>
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b6e      	cmp	r3, #110	; 0x6e
 80061ee:	d80c      	bhi.n	800620a <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061f0:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80061f2:	2bd7      	cmp	r3, #215	; 0xd7
 80061f4:	d909      	bls.n	800620a <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061f6:	88bb      	ldrh	r3, [r7, #4]
 80061f8:	2bec      	cmp	r3, #236	; 0xec
 80061fa:	d806      	bhi.n	800620a <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <TouchWSLedActivity+0xd0>)
 80061fe:	2205      	movs	r2, #5
 8006200:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006202:	4b18      	ldr	r3, [pc, #96]	; (8006264 <TouchWSLedActivity+0xd4>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e016      	b.n	8006238 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 800620a:	88bb      	ldrh	r3, [r7, #4]
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d90b      	bls.n	8006228 <TouchWSLedActivity+0x98>
 8006210:	88bb      	ldrh	r3, [r7, #4]
 8006212:	2b56      	cmp	r3, #86	; 0x56
 8006214:	d808      	bhi.n	8006228 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	88ba      	ldrh	r2, [r7, #4]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f002 f841 	bl	80082a8 <increaseNumberOfWSLedOnTFT>
 8006226:	e007      	b.n	8006238 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	88ba      	ldrh	r2, [r7, #4]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	4611      	mov	r1, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f002 f8c2 	bl	80083bc <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 8006238:	f003 fe6e 	bl	8009f18 <HAL_GetTick>
 800623c:	4603      	mov	r3, r0
 800623e:	4a04      	ldr	r2, [pc, #16]	; (8006250 <TouchWSLedActivity+0xc0>)
 8006240:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	08028f4c 	.word	0x08028f4c
 8006250:	2000028c 	.word	0x2000028c
 8006254:	20000256 	.word	0x20000256
 8006258:	20000033 	.word	0x20000033
 800625c:	20000257 	.word	0x20000257
 8006260:	20000290 	.word	0x20000290
 8006264:	20000255 	.word	0x20000255

08006268 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 800626e:	4b70      	ldr	r3, [pc, #448]	; (8006430 <Schedule1Activity+0x1c8>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d105      	bne.n	8006282 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006276:	2001      	movs	r0, #1
 8006278:	f001 faf6 	bl	8007868 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 800627c:	4b6c      	ldr	r3, [pc, #432]	; (8006430 <Schedule1Activity+0x1c8>)
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006282:	f7fc f803 	bl	800228c <XPT2046_IsTouched>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80cc 	beq.w	8006426 <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800628e:	f003 fe43 	bl	8009f18 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	4b67      	ldr	r3, [pc, #412]	; (8006434 <Schedule1Activity+0x1cc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629e:	f0c0 80c2 	bcc.w	8006426 <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80062a2:	1d3a      	adds	r2, r7, #4
 80062a4:	1dbb      	adds	r3, r7, #6
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fb ffb1 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d90f      	bls.n	80062d4 <Schedule1Activity+0x6c>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b6e      	cmp	r3, #110	; 0x6e
 80062b8:	d80c      	bhi.n	80062d4 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062ba:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062bc:	2bd7      	cmp	r3, #215	; 0xd7
 80062be:	d909      	bls.n	80062d4 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062c0:	88bb      	ldrh	r3, [r7, #4]
 80062c2:	2bec      	cmp	r3, #236	; 0xec
 80062c4:	d806      	bhi.n	80062d4 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 80062c6:	4b5c      	ldr	r3, [pc, #368]	; (8006438 <Schedule1Activity+0x1d0>)
 80062c8:	2203      	movs	r2, #3
 80062ca:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80062cc:	4b5b      	ldr	r3, [pc, #364]	; (800643c <Schedule1Activity+0x1d4>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e0a3      	b.n	800641c <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2bdb      	cmp	r3, #219	; 0xdb
 80062d8:	d910      	bls.n	80062fc <Schedule1Activity+0x94>
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80062e0:	d20c      	bcs.n	80062fc <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80062e2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 80062e4:	2bd7      	cmp	r3, #215	; 0xd7
 80062e6:	d909      	bls.n	80062fc <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80062e8:	88bb      	ldrh	r3, [r7, #4]
 80062ea:	2bec      	cmp	r3, #236	; 0xec
 80062ec:	d806      	bhi.n	80062fc <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 80062ee:	4b52      	ldr	r3, [pc, #328]	; (8006438 <Schedule1Activity+0x1d0>)
 80062f0:	2208      	movs	r2, #8
 80062f2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80062f4:	4b51      	ldr	r3, [pc, #324]	; (800643c <Schedule1Activity+0x1d4>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e08f      	b.n	800641c <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80062fc:	88bb      	ldrh	r3, [r7, #4]
 80062fe:	2b31      	cmp	r3, #49	; 0x31
 8006300:	d909      	bls.n	8006316 <Schedule1Activity+0xae>
 8006302:	88bb      	ldrh	r3, [r7, #4]
 8006304:	2b46      	cmp	r3, #70	; 0x46
 8006306:	d806      	bhi.n	8006316 <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	88ba      	ldrh	r2, [r7, #4]
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f99a 	bl	8006648 <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006314:	e082      	b.n	800641c <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006316:	88bb      	ldrh	r3, [r7, #4]
 8006318:	2b64      	cmp	r3, #100	; 0x64
 800631a:	d909      	bls.n	8006330 <Schedule1Activity+0xc8>
 800631c:	88bb      	ldrh	r3, [r7, #4]
 800631e:	2b79      	cmp	r3, #121	; 0x79
 8006320:	d806      	bhi.n	8006330 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	88ba      	ldrh	r2, [r7, #4]
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fc67 	bl	8006bfc <MenuTFTSchedule1ActivityHourMinuteONAdd>
 800632e:	e075      	b.n	800641c <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006330:	88bb      	ldrh	r3, [r7, #4]
 8006332:	2b87      	cmp	r3, #135	; 0x87
 8006334:	d909      	bls.n	800634a <Schedule1Activity+0xe2>
 8006336:	88bb      	ldrh	r3, [r7, #4]
 8006338:	2b9c      	cmp	r3, #156	; 0x9c
 800633a:	d806      	bhi.n	800634a <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	88ba      	ldrh	r2, [r7, #4]
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fd24 	bl	8006d90 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006348:	e068      	b.n	800641c <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800634a:	88bb      	ldrh	r3, [r7, #4]
 800634c:	2ba9      	cmp	r3, #169	; 0xa9
 800634e:	d909      	bls.n	8006364 <Schedule1Activity+0xfc>
 8006350:	88bb      	ldrh	r3, [r7, #4]
 8006352:	2bbe      	cmp	r3, #190	; 0xbe
 8006354:	d806      	bhi.n	8006364 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	88ba      	ldrh	r2, [r7, #4]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f857 	bl	8007410 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006362:	e05b      	b.n	800641c <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	2b77      	cmp	r3, #119	; 0x77
 8006368:	d958      	bls.n	800641c <Schedule1Activity+0x1b4>
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	2bd2      	cmp	r3, #210	; 0xd2
 800636e:	d855      	bhi.n	800641c <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006370:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006372:	2bd7      	cmp	r3, #215	; 0xd7
 8006374:	d952      	bls.n	800641c <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006376:	88bb      	ldrh	r3, [r7, #4]
 8006378:	2bec      	cmp	r3, #236	; 0xec
 800637a:	d84f      	bhi.n	800641c <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 800637c:	4b30      	ldr	r3, [pc, #192]	; (8006440 <Schedule1Activity+0x1d8>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	4619      	mov	r1, r3
 8006382:	2001      	movs	r0, #1
 8006384:	f7fc fe49 	bl	800301a <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006388:	4b2e      	ldr	r3, [pc, #184]	; (8006444 <Schedule1Activity+0x1dc>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	4619      	mov	r1, r3
 800638e:	2001      	movs	r0, #1
 8006390:	f7fc fe66 	bl	8003060 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006394:	4b2c      	ldr	r3, [pc, #176]	; (8006448 <Schedule1Activity+0x1e0>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	4619      	mov	r1, r3
 800639a:	2001      	movs	r0, #1
 800639c:	f7fc fe83 	bl	80030a6 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 80063a0:	4b2a      	ldr	r3, [pc, #168]	; (800644c <Schedule1Activity+0x1e4>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	2001      	movs	r0, #1
 80063a8:	f7fc fea0 	bl	80030ec <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 80063ac:	4928      	ldr	r1, [pc, #160]	; (8006450 <Schedule1Activity+0x1e8>)
 80063ae:	2001      	movs	r0, #1
 80063b0:	f7fc fc93 	bl	8002cda <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 80063b4:	4927      	ldr	r1, [pc, #156]	; (8006454 <Schedule1Activity+0x1ec>)
 80063b6:	2001      	movs	r0, #1
 80063b8:	f7fc fd3a 	bl	8002e30 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 80063bc:	4826      	ldr	r0, [pc, #152]	; (8006458 <Schedule1Activity+0x1f0>)
 80063be:	f7fb f997 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 80063c2:	4926      	ldr	r1, [pc, #152]	; (800645c <Schedule1Activity+0x1f4>)
 80063c4:	4826      	ldr	r0, [pc, #152]	; (8006460 <Schedule1Activity+0x1f8>)
 80063c6:	f00b fa83 	bl	80118d0 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 80063ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	2301      	movs	r3, #1
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80063d8:	220a      	movs	r2, #10
 80063da:	2128      	movs	r1, #40	; 0x28
 80063dc:	4820      	ldr	r0, [pc, #128]	; (8006460 <Schedule1Activity+0x1f8>)
 80063de:	f7fb fba1 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80063e2:	4820      	ldr	r0, [pc, #128]	; (8006464 <Schedule1Activity+0x1fc>)
 80063e4:	f7fb f984 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80063e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	2305      	movs	r3, #5
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2314      	movs	r3, #20
 80063f4:	225a      	movs	r2, #90	; 0x5a
 80063f6:	21d8      	movs	r1, #216	; 0xd8
 80063f8:	2078      	movs	r0, #120	; 0x78
 80063fa:	f7fb f928 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80063fe:	491a      	ldr	r1, [pc, #104]	; (8006468 <Schedule1Activity+0x200>)
 8006400:	4817      	ldr	r0, [pc, #92]	; (8006460 <Schedule1Activity+0x1f8>)
 8006402:	f00b fa65 	bl	80118d0 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006406:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	2300      	movs	r3, #0
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	22da      	movs	r2, #218	; 0xda
 8006414:	217e      	movs	r1, #126	; 0x7e
 8006416:	4812      	ldr	r0, [pc, #72]	; (8006460 <Schedule1Activity+0x1f8>)
 8006418:	f7fb fb84 	bl	8001b24 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 800641c:	f003 fd7c 	bl	8009f18 <HAL_GetTick>
 8006420:	4603      	mov	r3, r0
 8006422:	4a04      	ldr	r2, [pc, #16]	; (8006434 <Schedule1Activity+0x1cc>)
 8006424:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000258 	.word	0x20000258
 8006434:	2000028c 	.word	0x2000028c
 8006438:	20000290 	.word	0x20000290
 800643c:	20000255 	.word	0x20000255
 8006440:	20000281 	.word	0x20000281
 8006444:	20000283 	.word	0x20000283
 8006448:	20000282 	.word	0x20000282
 800644c:	20000284 	.word	0x20000284
 8006450:	2000025c 	.word	0x2000025c
 8006454:	20000264 	.word	0x20000264
 8006458:	08028f4c 	.word	0x08028f4c
 800645c:	08015a34 	.word	0x08015a34
 8006460:	200002fc 	.word	0x200002fc
 8006464:	08026fd4 	.word	0x08026fd4
 8006468:	08015a48 	.word	0x08015a48

0800646c <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006472:	4b66      	ldr	r3, [pc, #408]	; (800660c <Schedule2Activity+0x1a0>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d105      	bne.n	8006486 <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 800647a:	2002      	movs	r0, #2
 800647c:	f001 f9f4 	bl	8007868 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006480:	4b62      	ldr	r3, [pc, #392]	; (800660c <Schedule2Activity+0x1a0>)
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006486:	f7fb ff01 	bl	800228c <XPT2046_IsTouched>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80b8 	beq.w	8006602 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006492:	f003 fd41 	bl	8009f18 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	4b5d      	ldr	r3, [pc, #372]	; (8006610 <Schedule2Activity+0x1a4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a2:	f0c0 80ae 	bcc.w	8006602 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80064a6:	1d3a      	adds	r2, r7, #4
 80064a8:	1dbb      	adds	r3, r7, #6
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fb feaf 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	2b09      	cmp	r3, #9
 80064b6:	d90f      	bls.n	80064d8 <Schedule2Activity+0x6c>
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	2b6e      	cmp	r3, #110	; 0x6e
 80064bc:	d80c      	bhi.n	80064d8 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064be:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064c0:	2bd7      	cmp	r3, #215	; 0xd7
 80064c2:	d909      	bls.n	80064d8 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064c4:	88bb      	ldrh	r3, [r7, #4]
 80064c6:	2bec      	cmp	r3, #236	; 0xec
 80064c8:	d806      	bhi.n	80064d8 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 80064ca:	4b52      	ldr	r3, [pc, #328]	; (8006614 <Schedule2Activity+0x1a8>)
 80064cc:	2203      	movs	r2, #3
 80064ce:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80064d0:	4b51      	ldr	r3, [pc, #324]	; (8006618 <Schedule2Activity+0x1ac>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e08f      	b.n	80065f8 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80064d8:	88bb      	ldrh	r3, [r7, #4]
 80064da:	2b31      	cmp	r3, #49	; 0x31
 80064dc:	d909      	bls.n	80064f2 <Schedule2Activity+0x86>
 80064de:	88bb      	ldrh	r3, [r7, #4]
 80064e0:	2b46      	cmp	r3, #70	; 0x46
 80064e2:	d806      	bhi.n	80064f2 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	88ba      	ldrh	r2, [r7, #4]
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fd1a 	bl	8006f24 <MenuTFTSchedule2ActivityDayOfWeekRow>
 80064f0:	e082      	b.n	80065f8 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	2b64      	cmp	r3, #100	; 0x64
 80064f6:	d909      	bls.n	800650c <Schedule2Activity+0xa0>
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	2b79      	cmp	r3, #121	; 0x79
 80064fc:	d806      	bhi.n	800650c <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	88ba      	ldrh	r2, [r7, #4]
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fdef 	bl	80070e8 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 800650a:	e075      	b.n	80065f8 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 800650c:	88bb      	ldrh	r3, [r7, #4]
 800650e:	2b87      	cmp	r3, #135	; 0x87
 8006510:	d909      	bls.n	8006526 <Schedule2Activity+0xba>
 8006512:	88bb      	ldrh	r3, [r7, #4]
 8006514:	2b9c      	cmp	r3, #156	; 0x9c
 8006516:	d806      	bhi.n	8006526 <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	88ba      	ldrh	r2, [r7, #4]
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 feac 	bl	800727c <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006524:	e068      	b.n	80065f8 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006526:	88bb      	ldrh	r3, [r7, #4]
 8006528:	2ba9      	cmp	r3, #169	; 0xa9
 800652a:	d909      	bls.n	8006540 <Schedule2Activity+0xd4>
 800652c:	88bb      	ldrh	r3, [r7, #4]
 800652e:	2bbe      	cmp	r3, #190	; 0xbe
 8006530:	d806      	bhi.n	8006540 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	88ba      	ldrh	r2, [r7, #4]
 8006536:	4611      	mov	r1, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f001 f87f 	bl	800763c <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 800653e:	e05b      	b.n	80065f8 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	2b77      	cmp	r3, #119	; 0x77
 8006544:	d958      	bls.n	80065f8 <Schedule2Activity+0x18c>
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	2bd2      	cmp	r3, #210	; 0xd2
 800654a:	d855      	bhi.n	80065f8 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800654c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800654e:	2bd7      	cmp	r3, #215	; 0xd7
 8006550:	d952      	bls.n	80065f8 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006552:	88bb      	ldrh	r3, [r7, #4]
 8006554:	2bec      	cmp	r3, #236	; 0xec
 8006556:	d84f      	bhi.n	80065f8 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006558:	4b30      	ldr	r3, [pc, #192]	; (800661c <Schedule2Activity+0x1b0>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	2002      	movs	r0, #2
 8006560:	f7fc fd5b 	bl	800301a <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006564:	4b2e      	ldr	r3, [pc, #184]	; (8006620 <Schedule2Activity+0x1b4>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	2002      	movs	r0, #2
 800656c:	f7fc fd78 	bl	8003060 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006570:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <Schedule2Activity+0x1b8>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	4619      	mov	r1, r3
 8006576:	2002      	movs	r0, #2
 8006578:	f7fc fd95 	bl	80030a6 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 800657c:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <Schedule2Activity+0x1bc>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	4619      	mov	r1, r3
 8006582:	2002      	movs	r0, #2
 8006584:	f7fc fdb2 	bl	80030ec <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006588:	4928      	ldr	r1, [pc, #160]	; (800662c <Schedule2Activity+0x1c0>)
 800658a:	2002      	movs	r0, #2
 800658c:	f7fc fba5 	bl	8002cda <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006590:	4927      	ldr	r1, [pc, #156]	; (8006630 <Schedule2Activity+0x1c4>)
 8006592:	2002      	movs	r0, #2
 8006594:	f7fc fc4c 	bl	8002e30 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006598:	4826      	ldr	r0, [pc, #152]	; (8006634 <Schedule2Activity+0x1c8>)
 800659a:	f7fb f8a9 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 800659e:	4926      	ldr	r1, [pc, #152]	; (8006638 <Schedule2Activity+0x1cc>)
 80065a0:	4826      	ldr	r0, [pc, #152]	; (800663c <Schedule2Activity+0x1d0>)
 80065a2:	f00b f995 	bl	80118d0 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 80065a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	2301      	movs	r3, #1
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80065b4:	220a      	movs	r2, #10
 80065b6:	2128      	movs	r1, #40	; 0x28
 80065b8:	4820      	ldr	r0, [pc, #128]	; (800663c <Schedule2Activity+0x1d0>)
 80065ba:	f7fb fab3 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80065be:	4820      	ldr	r0, [pc, #128]	; (8006640 <Schedule2Activity+0x1d4>)
 80065c0:	f7fb f896 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80065c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2305      	movs	r3, #5
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2314      	movs	r3, #20
 80065d0:	225a      	movs	r2, #90	; 0x5a
 80065d2:	21d8      	movs	r1, #216	; 0xd8
 80065d4:	2078      	movs	r0, #120	; 0x78
 80065d6:	f7fb f83a 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80065da:	491a      	ldr	r1, [pc, #104]	; (8006644 <Schedule2Activity+0x1d8>)
 80065dc:	4817      	ldr	r0, [pc, #92]	; (800663c <Schedule2Activity+0x1d0>)
 80065de:	f00b f977 	bl	80118d0 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80065e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	22da      	movs	r2, #218	; 0xda
 80065f0:	217e      	movs	r1, #126	; 0x7e
 80065f2:	4812      	ldr	r0, [pc, #72]	; (800663c <Schedule2Activity+0x1d0>)
 80065f4:	f7fb fa96 	bl	8001b24 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 80065f8:	f003 fc8e 	bl	8009f18 <HAL_GetTick>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4a04      	ldr	r2, [pc, #16]	; (8006610 <Schedule2Activity+0x1a4>)
 8006600:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000258 	.word	0x20000258
 8006610:	2000028c 	.word	0x2000028c
 8006614:	20000290 	.word	0x20000290
 8006618:	20000255 	.word	0x20000255
 800661c:	20000285 	.word	0x20000285
 8006620:	20000287 	.word	0x20000287
 8006624:	20000286 	.word	0x20000286
 8006628:	20000288 	.word	0x20000288
 800662c:	20000270 	.word	0x20000270
 8006630:	20000278 	.word	0x20000278
 8006634:	08028f4c 	.word	0x08028f4c
 8006638:	08015a50 	.word	0x08015a50
 800663c:	200002fc 	.word	0x200002fc
 8006640:	08026fd4 	.word	0x08026fd4
 8006644:	08015a48 	.word	0x08015a48

08006648 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	460a      	mov	r2, r1
 8006652:	80fb      	strh	r3, [r7, #6]
 8006654:	4613      	mov	r3, r2
 8006656:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	2b3b      	cmp	r3, #59	; 0x3b
 800665c:	d91a      	bls.n	8006694 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b50      	cmp	r3, #80	; 0x50
 8006662:	d817      	bhi.n	8006694 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006664:	4b68      	ldr	r3, [pc, #416]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 800666c:	2100      	movs	r1, #0
 800666e:	2001      	movs	r0, #1
 8006670:	f000 f8cc 	bl	800680c <changeTFTScheduleDayOfWeek>
 8006674:	e003      	b.n	800667e <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006676:	2101      	movs	r1, #1
 8006678:	2001      	movs	r0, #1
 800667a:	f000 f8c7 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 800667e:	4b62      	ldr	r3, [pc, #392]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e0b4      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	2b59      	cmp	r3, #89	; 0x59
 8006698:	d91a      	bls.n	80066d0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b6e      	cmp	r3, #110	; 0x6e
 800669e:	d817      	bhi.n	80066d0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 80066a0:	4b59      	ldr	r3, [pc, #356]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 80066a8:	2100      	movs	r1, #0
 80066aa:	2002      	movs	r0, #2
 80066ac:	f000 f8ae 	bl	800680c <changeTFTScheduleDayOfWeek>
 80066b0:	e003      	b.n	80066ba <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 80066b2:	2101      	movs	r1, #1
 80066b4:	2002      	movs	r0, #2
 80066b6:	f000 f8a9 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 80066ba:	4b53      	ldr	r3, [pc, #332]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bf0c      	ite	eq
 80066c2:	2301      	moveq	r3, #1
 80066c4:	2300      	movne	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b4f      	ldr	r3, [pc, #316]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066cc:	705a      	strb	r2, [r3, #1]
 80066ce:	e096      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80066d0:	88fb      	ldrh	r3, [r7, #6]
 80066d2:	2b77      	cmp	r3, #119	; 0x77
 80066d4:	d91a      	bls.n	800670c <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b8c      	cmp	r3, #140	; 0x8c
 80066da:	d817      	bhi.n	800670c <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 80066dc:	4b4a      	ldr	r3, [pc, #296]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066de:	789b      	ldrb	r3, [r3, #2]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 80066e4:	2100      	movs	r1, #0
 80066e6:	2003      	movs	r0, #3
 80066e8:	f000 f890 	bl	800680c <changeTFTScheduleDayOfWeek>
 80066ec:	e003      	b.n	80066f6 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80066ee:	2101      	movs	r1, #1
 80066f0:	2003      	movs	r0, #3
 80066f2:	f000 f88b 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 80066f6:	4b44      	ldr	r3, [pc, #272]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066f8:	789b      	ldrb	r3, [r3, #2]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bf0c      	ite	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	2300      	movne	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	4b40      	ldr	r3, [pc, #256]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006708:	709a      	strb	r2, [r3, #2]
 800670a:	e078      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b95      	cmp	r3, #149	; 0x95
 8006710:	d91a      	bls.n	8006748 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2baa      	cmp	r3, #170	; 0xaa
 8006716:	d817      	bhi.n	8006748 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006718:	4b3b      	ldr	r3, [pc, #236]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800671a:	78db      	ldrb	r3, [r3, #3]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006720:	2100      	movs	r1, #0
 8006722:	2004      	movs	r0, #4
 8006724:	f000 f872 	bl	800680c <changeTFTScheduleDayOfWeek>
 8006728:	e003      	b.n	8006732 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800672a:	2101      	movs	r1, #1
 800672c:	2004      	movs	r0, #4
 800672e:	f000 f86d 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006732:	4b35      	ldr	r3, [pc, #212]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006734:	78db      	ldrb	r3, [r3, #3]
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	4b31      	ldr	r3, [pc, #196]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006744:	70da      	strb	r2, [r3, #3]
 8006746:	e05a      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2bb3      	cmp	r3, #179	; 0xb3
 800674c:	d91a      	bls.n	8006784 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2bc8      	cmp	r3, #200	; 0xc8
 8006752:	d817      	bhi.n	8006784 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006754:	4b2c      	ldr	r3, [pc, #176]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006756:	791b      	ldrb	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 800675c:	2100      	movs	r1, #0
 800675e:	2005      	movs	r0, #5
 8006760:	f000 f854 	bl	800680c <changeTFTScheduleDayOfWeek>
 8006764:	e003      	b.n	800676e <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006766:	2101      	movs	r1, #1
 8006768:	2005      	movs	r0, #5
 800676a:	f000 f84f 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006770:	791b      	ldrb	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	4b22      	ldr	r3, [pc, #136]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006780:	711a      	strb	r2, [r3, #4]
 8006782:	e03c      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2bd1      	cmp	r3, #209	; 0xd1
 8006788:	d91a      	bls.n	80067c0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	2be6      	cmp	r3, #230	; 0xe6
 800678e:	d817      	bhi.n	80067c0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006792:	795b      	ldrb	r3, [r3, #5]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006798:	2100      	movs	r1, #0
 800679a:	2006      	movs	r0, #6
 800679c:	f000 f836 	bl	800680c <changeTFTScheduleDayOfWeek>
 80067a0:	e003      	b.n	80067aa <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 80067a2:	2101      	movs	r1, #1
 80067a4:	2006      	movs	r0, #6
 80067a6:	f000 f831 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 80067aa:	4b17      	ldr	r3, [pc, #92]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ac:	795b      	ldrb	r3, [r3, #5]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b13      	ldr	r3, [pc, #76]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067bc:	715a      	strb	r2, [r3, #5]
 80067be:	e01e      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	2bef      	cmp	r3, #239	; 0xef
 80067c4:	d91b      	bls.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067cc:	d817      	bhi.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067d0:	799b      	ldrb	r3, [r3, #6]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 80067d6:	2100      	movs	r1, #0
 80067d8:	2007      	movs	r0, #7
 80067da:	f000 f817 	bl	800680c <changeTFTScheduleDayOfWeek>
 80067de:	e003      	b.n	80067e8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 80067e0:	2101      	movs	r1, #1
 80067e2:	2007      	movs	r0, #7
 80067e4:	f000 f812 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 80067e8:	4b07      	ldr	r3, [pc, #28]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ea:	799b      	ldrb	r3, [r3, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067fa:	719a      	strb	r2, [r3, #6]
	}
}
 80067fc:	e7ff      	b.n	80067fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000025c 	.word	0x2000025c

0800680c <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af02      	add	r7, sp, #8
 8006812:	4603      	mov	r3, r0
 8006814:	460a      	mov	r2, r1
 8006816:	71fb      	strb	r3, [r7, #7]
 8006818:	4613      	mov	r3, r2
 800681a:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d11a      	bne.n	8006858 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006822:	79bb      	ldrb	r3, [r7, #6]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006828:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	2305      	movs	r3, #5
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	2312      	movs	r3, #18
 8006834:	2212      	movs	r2, #18
 8006836:	2133      	movs	r1, #51	; 0x33
 8006838:	203d      	movs	r0, #61	; 0x3d
 800683a:	f7fa ff08 	bl	800164e <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800683e:	e0be      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006840:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	2305      	movs	r3, #5
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	2312      	movs	r3, #18
 800684c:	2212      	movs	r2, #18
 800684e:	2133      	movs	r1, #51	; 0x33
 8006850:	203d      	movs	r0, #61	; 0x3d
 8006852:	f7fa fefc 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006856:	e0b2      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d11a      	bne.n	8006894 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 800685e:	79bb      	ldrb	r3, [r7, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006864:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	2305      	movs	r3, #5
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	2312      	movs	r3, #18
 8006870:	2212      	movs	r2, #18
 8006872:	2133      	movs	r1, #51	; 0x33
 8006874:	205b      	movs	r0, #91	; 0x5b
 8006876:	f7fa feea 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800687a:	e0a0      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800687c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	2305      	movs	r3, #5
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2312      	movs	r3, #18
 8006888:	2212      	movs	r2, #18
 800688a:	2133      	movs	r1, #51	; 0x33
 800688c:	205b      	movs	r0, #91	; 0x5b
 800688e:	f7fa fede 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006892:	e094      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d11a      	bne.n	80068d0 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 800689a:	79bb      	ldrb	r3, [r7, #6]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	2305      	movs	r3, #5
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2312      	movs	r3, #18
 80068ac:	2212      	movs	r2, #18
 80068ae:	2133      	movs	r1, #51	; 0x33
 80068b0:	2079      	movs	r0, #121	; 0x79
 80068b2:	f7fa fecc 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068b6:	e082      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2305      	movs	r3, #5
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2312      	movs	r3, #18
 80068c4:	2212      	movs	r2, #18
 80068c6:	2133      	movs	r1, #51	; 0x33
 80068c8:	2079      	movs	r0, #121	; 0x79
 80068ca:	f7fa fec0 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068ce:	e076      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d11a      	bne.n	800690c <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 80068d6:	79bb      	ldrb	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2305      	movs	r3, #5
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2312      	movs	r3, #18
 80068e8:	2212      	movs	r2, #18
 80068ea:	2133      	movs	r1, #51	; 0x33
 80068ec:	2097      	movs	r0, #151	; 0x97
 80068ee:	f7fa feae 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068f2:	e064      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	2305      	movs	r3, #5
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	2312      	movs	r3, #18
 8006900:	2212      	movs	r2, #18
 8006902:	2133      	movs	r1, #51	; 0x33
 8006904:	2097      	movs	r0, #151	; 0x97
 8006906:	f7fa fea2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800690a:	e058      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b05      	cmp	r3, #5
 8006910:	d11a      	bne.n	8006948 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8006912:	79bb      	ldrb	r3, [r7, #6]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006918:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	2305      	movs	r3, #5
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	2312      	movs	r3, #18
 8006924:	2212      	movs	r2, #18
 8006926:	2133      	movs	r1, #51	; 0x33
 8006928:	20b5      	movs	r0, #181	; 0xb5
 800692a:	f7fa fe90 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800692e:	e046      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006930:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	2305      	movs	r3, #5
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2312      	movs	r3, #18
 800693c:	2212      	movs	r2, #18
 800693e:	2133      	movs	r1, #51	; 0x33
 8006940:	20b5      	movs	r0, #181	; 0xb5
 8006942:	f7fa fe84 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006946:	e03a      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b06      	cmp	r3, #6
 800694c:	d11a      	bne.n	8006984 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 800694e:	79bb      	ldrb	r3, [r7, #6]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	2305      	movs	r3, #5
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2312      	movs	r3, #18
 8006960:	2212      	movs	r2, #18
 8006962:	2133      	movs	r1, #51	; 0x33
 8006964:	20d3      	movs	r0, #211	; 0xd3
 8006966:	f7fa fe72 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800696a:	e028      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800696c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	2305      	movs	r3, #5
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2312      	movs	r3, #18
 8006978:	2212      	movs	r2, #18
 800697a:	2133      	movs	r1, #51	; 0x33
 800697c:	20d3      	movs	r0, #211	; 0xd3
 800697e:	f7fa fe66 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006982:	e01c      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	2b07      	cmp	r3, #7
 8006988:	d119      	bne.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 800698a:	79bb      	ldrb	r3, [r7, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006990:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2305      	movs	r3, #5
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2312      	movs	r3, #18
 800699c:	2212      	movs	r2, #18
 800699e:	2133      	movs	r1, #51	; 0x33
 80069a0:	20f1      	movs	r0, #241	; 0xf1
 80069a2:	f7fa fe54 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069a6:	e00a      	b.n	80069be <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	2305      	movs	r3, #5
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	2312      	movs	r3, #18
 80069b4:	2212      	movs	r2, #18
 80069b6:	2133      	movs	r1, #51	; 0x33
 80069b8:	20f1      	movs	r0, #241	; 0xf1
 80069ba:	f7fa fe48 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af02      	add	r7, sp, #8
 80069cc:	4603      	mov	r3, r0
 80069ce:	460a      	mov	r2, r1
 80069d0:	71fb      	strb	r3, [r7, #7]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d11a      	bne.n	8006a12 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 80069dc:	79bb      	ldrb	r3, [r7, #6]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	2305      	movs	r3, #5
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2312      	movs	r3, #18
 80069ee:	2212      	movs	r2, #18
 80069f0:	21ab      	movs	r1, #171	; 0xab
 80069f2:	2016      	movs	r0, #22
 80069f4:	f7fa fe2b 	bl	800164e <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 80069f8:	e0fc      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	2305      	movs	r3, #5
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2312      	movs	r3, #18
 8006a06:	2212      	movs	r2, #18
 8006a08:	21ab      	movs	r1, #171	; 0xab
 8006a0a:	2016      	movs	r0, #22
 8006a0c:	f7fa fe1f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a10:	e0f0      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d11a      	bne.n	8006a4e <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8006a18:	79bb      	ldrb	r3, [r7, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	2305      	movs	r3, #5
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2312      	movs	r3, #18
 8006a2a:	2212      	movs	r2, #18
 8006a2c:	21ab      	movs	r1, #171	; 0xab
 8006a2e:	2036      	movs	r0, #54	; 0x36
 8006a30:	f7fa fe0d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a34:	e0de      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	2305      	movs	r3, #5
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2312      	movs	r3, #18
 8006a42:	2212      	movs	r2, #18
 8006a44:	21ab      	movs	r1, #171	; 0xab
 8006a46:	2036      	movs	r0, #54	; 0x36
 8006a48:	f7fa fe01 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a4c:	e0d2      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d11a      	bne.n	8006a8a <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006a54:	79bb      	ldrb	r3, [r7, #6]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	2305      	movs	r3, #5
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	2312      	movs	r3, #18
 8006a66:	2212      	movs	r2, #18
 8006a68:	21ab      	movs	r1, #171	; 0xab
 8006a6a:	2056      	movs	r0, #86	; 0x56
 8006a6c:	f7fa fdef 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a70:	e0c0      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	2305      	movs	r3, #5
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2312      	movs	r3, #18
 8006a7e:	2212      	movs	r2, #18
 8006a80:	21ab      	movs	r1, #171	; 0xab
 8006a82:	2056      	movs	r0, #86	; 0x56
 8006a84:	f7fa fde3 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a88:	e0b4      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d11a      	bne.n	8006ac6 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006a90:	79bb      	ldrb	r3, [r7, #6]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	2305      	movs	r3, #5
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2312      	movs	r3, #18
 8006aa2:	2212      	movs	r2, #18
 8006aa4:	21ab      	movs	r1, #171	; 0xab
 8006aa6:	2076      	movs	r0, #118	; 0x76
 8006aa8:	f7fa fdd1 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006aac:	e0a2      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006aae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	2305      	movs	r3, #5
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	2312      	movs	r3, #18
 8006aba:	2212      	movs	r2, #18
 8006abc:	21ab      	movs	r1, #171	; 0xab
 8006abe:	2076      	movs	r0, #118	; 0x76
 8006ac0:	f7fa fdc5 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ac4:	e096      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	d11a      	bne.n	8006b02 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006acc:	79bb      	ldrb	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ad2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	2305      	movs	r3, #5
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	2312      	movs	r3, #18
 8006ade:	2212      	movs	r2, #18
 8006ae0:	21ab      	movs	r1, #171	; 0xab
 8006ae2:	2096      	movs	r0, #150	; 0x96
 8006ae4:	f7fa fdb3 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ae8:	e084      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006aea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	2305      	movs	r3, #5
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	2312      	movs	r3, #18
 8006af6:	2212      	movs	r2, #18
 8006af8:	21ab      	movs	r1, #171	; 0xab
 8006afa:	2096      	movs	r0, #150	; 0x96
 8006afc:	f7fa fda7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b00:	e078      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d11a      	bne.n	8006b3e <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006b08:	79bb      	ldrb	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	2305      	movs	r3, #5
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	2312      	movs	r3, #18
 8006b1a:	2212      	movs	r2, #18
 8006b1c:	21ab      	movs	r1, #171	; 0xab
 8006b1e:	20b6      	movs	r0, #182	; 0xb6
 8006b20:	f7fa fd95 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b24:	e066      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	2305      	movs	r3, #5
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2312      	movs	r3, #18
 8006b32:	2212      	movs	r2, #18
 8006b34:	21ab      	movs	r1, #171	; 0xab
 8006b36:	20b6      	movs	r0, #182	; 0xb6
 8006b38:	f7fa fd89 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b3c:	e05a      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	2b07      	cmp	r3, #7
 8006b42:	d11a      	bne.n	8006b7a <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006b44:	79bb      	ldrb	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	2305      	movs	r3, #5
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	2312      	movs	r3, #18
 8006b56:	2212      	movs	r2, #18
 8006b58:	21ab      	movs	r1, #171	; 0xab
 8006b5a:	20d6      	movs	r0, #214	; 0xd6
 8006b5c:	f7fa fd77 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b60:	e048      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	2305      	movs	r3, #5
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	2312      	movs	r3, #18
 8006b6e:	2212      	movs	r2, #18
 8006b70:	21ab      	movs	r1, #171	; 0xab
 8006b72:	20d6      	movs	r0, #214	; 0xd6
 8006b74:	f7fa fd6b 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b78:	e03c      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d11a      	bne.n	8006bb6 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006b80:	79bb      	ldrb	r3, [r7, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10b      	bne.n	8006b9e <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	2305      	movs	r3, #5
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2312      	movs	r3, #18
 8006b92:	2212      	movs	r2, #18
 8006b94:	21ab      	movs	r1, #171	; 0xab
 8006b96:	20f6      	movs	r0, #246	; 0xf6
 8006b98:	f7fa fd59 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b9c:	e02a      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	2305      	movs	r3, #5
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2312      	movs	r3, #18
 8006baa:	2212      	movs	r2, #18
 8006bac:	21ab      	movs	r1, #171	; 0xab
 8006bae:	20f6      	movs	r0, #246	; 0xf6
 8006bb0:	f7fa fd4d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006bb4:	e01e      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d11b      	bne.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006bbc:	79bb      	ldrb	r3, [r7, #6]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10c      	bne.n	8006bdc <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	2305      	movs	r3, #5
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2312      	movs	r3, #18
 8006bce:	2212      	movs	r2, #18
 8006bd0:	21ab      	movs	r1, #171	; 0xab
 8006bd2:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006bd6:	f7fa fd3a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006bda:	e00b      	b.n	8006bf4 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006bdc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	2305      	movs	r3, #5
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2312      	movs	r3, #18
 8006be8:	2212      	movs	r2, #18
 8006bea:	21ab      	movs	r1, #171	; 0xab
 8006bec:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006bf0:	f7fa fd2d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	4603      	mov	r3, r0
 8006c04:	460a      	mov	r2, r1
 8006c06:	80fb      	strh	r3, [r7, #6]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006c0c:	4859      	ldr	r0, [pc, #356]	; (8006d74 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006c0e:	f7fa fd6f 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	2bba      	cmp	r3, #186	; 0xba
 8006c16:	d92f      	bls.n	8006c78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	2bdd      	cmp	r3, #221	; 0xdd
 8006c1c:	d82c      	bhi.n	8006c78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006c1e:	4b56      	ldr	r3, [pc, #344]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b17      	cmp	r3, #23
 8006c24:	d806      	bhi.n	8006c34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006c26:	4b54      	ldr	r3, [pc, #336]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	4b52      	ldr	r3, [pc, #328]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006c34:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006c3a:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	d907      	bls.n	8006c52 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006c42:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	494c      	ldr	r1, [pc, #304]	; (8006d7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006c4a:	484d      	ldr	r0, [pc, #308]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c4c:	f00a fe40 	bl	80118d0 <siprintf>
 8006c50:	e006      	b.n	8006c60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006c52:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	494a      	ldr	r1, [pc, #296]	; (8006d84 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006c5a:	4849      	ldr	r0, [pc, #292]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c5c:	f00a fe38 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c60:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	2301      	movs	r3, #1
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2264      	movs	r2, #100	; 0x64
 8006c6e:	2150      	movs	r1, #80	; 0x50
 8006c70:	4843      	ldr	r0, [pc, #268]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c72:	f7fa ff57 	bl	8001b24 <EF_PutString>
 8006c76:	e078      	b.n	8006d6a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	2be8      	cmp	r3, #232	; 0xe8
 8006c7c:	d930      	bls.n	8006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006c84:	d22c      	bcs.n	8006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006c86:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c8c:	d806      	bhi.n	8006c9c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006c8e:	4b3e      	ldr	r3, [pc, #248]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	4b3c      	ldr	r3, [pc, #240]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e002      	b.n	8006ca2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006c9c:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006ca2:	4b39      	ldr	r3, [pc, #228]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b09      	cmp	r3, #9
 8006ca8:	d907      	bls.n	8006cba <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006caa:	4b37      	ldr	r3, [pc, #220]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4932      	ldr	r1, [pc, #200]	; (8006d7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006cb2:	4833      	ldr	r0, [pc, #204]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006cb4:	f00a fe0c 	bl	80118d0 <siprintf>
 8006cb8:	e006      	b.n	8006cc8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006cba:	4b33      	ldr	r3, [pc, #204]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4930      	ldr	r1, [pc, #192]	; (8006d84 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006cc2:	482f      	ldr	r0, [pc, #188]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006cc4:	f00a fe04 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006cc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	2301      	movs	r3, #1
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2264      	movs	r2, #100	; 0x64
 8006cd6:	218a      	movs	r1, #138	; 0x8a
 8006cd8:	4829      	ldr	r0, [pc, #164]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006cda:	f7fa ff23 	bl	8001b24 <EF_PutString>
 8006cde:	e044      	b.n	8006d6a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006ce6:	d940      	bls.n	8006d6a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006cee:	d23c      	bcs.n	8006d6a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b30      	cmp	r3, #48	; 0x30
 8006cf6:	d806      	bhi.n	8006d06 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006cf8:	4b23      	ldr	r3, [pc, #140]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	330a      	adds	r3, #10
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	e012      	b.n	8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006d06:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f103 020a 	add.w	r2, r3, #10
 8006d0e:	4b1f      	ldr	r3, [pc, #124]	; (8006d8c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006d10:	fb83 1302 	smull	r1, r3, r3, r2
 8006d14:	4413      	add	r3, r2
 8006d16:	1159      	asrs	r1, r3, #5
 8006d18:	17d3      	asrs	r3, r2, #31
 8006d1a:	1ac9      	subs	r1, r1, r3
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	1a5b      	subs	r3, r3, r1
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	1ad1      	subs	r1, r2, r3
 8006d26:	b2ca      	uxtb	r2, r1
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d2a:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006d2c:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b09      	cmp	r3, #9
 8006d32:	d907      	bls.n	8006d44 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4910      	ldr	r1, [pc, #64]	; (8006d7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006d3c:	4810      	ldr	r0, [pc, #64]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d3e:	f00a fdc7 	bl	80118d0 <siprintf>
 8006d42:	e006      	b.n	8006d52 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	490e      	ldr	r1, [pc, #56]	; (8006d84 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006d4c:	480c      	ldr	r0, [pc, #48]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d4e:	f00a fdbf 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d52:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	2301      	movs	r3, #1
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2264      	movs	r2, #100	; 0x64
 8006d60:	218a      	movs	r1, #138	; 0x8a
 8006d62:	4807      	ldr	r0, [pc, #28]	; (8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d64:	f7fa fede 	bl	8001b24 <EF_PutString>
	}
}
 8006d68:	e7ff      	b.n	8006d6a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	08028f4c 	.word	0x08028f4c
 8006d78:	20000281 	.word	0x20000281
 8006d7c:	08015a68 	.word	0x08015a68
 8006d80:	200002fc 	.word	0x200002fc
 8006d84:	08015a70 	.word	0x08015a70
 8006d88:	20000283 	.word	0x20000283
 8006d8c:	88888889 	.word	0x88888889

08006d90 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	4603      	mov	r3, r0
 8006d98:	460a      	mov	r2, r1
 8006d9a:	80fb      	strh	r3, [r7, #6]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006da0:	4859      	ldr	r0, [pc, #356]	; (8006f08 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006da2:	f7fa fca5 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2bba      	cmp	r3, #186	; 0xba
 8006daa:	d92f      	bls.n	8006e0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	2bdd      	cmp	r3, #221	; 0xdd
 8006db0:	d82c      	bhi.n	8006e0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006db2:	4b56      	ldr	r3, [pc, #344]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b17      	cmp	r3, #23
 8006db8:	d806      	bhi.n	8006dc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006dba:	4b54      	ldr	r3, [pc, #336]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	4b52      	ldr	r3, [pc, #328]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e002      	b.n	8006dce <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006dc8:	4b50      	ldr	r3, [pc, #320]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006dce:	4b4f      	ldr	r3, [pc, #316]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b09      	cmp	r3, #9
 8006dd4:	d907      	bls.n	8006de6 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006dd6:	4b4d      	ldr	r3, [pc, #308]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	494c      	ldr	r1, [pc, #304]	; (8006f10 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006dde:	484d      	ldr	r0, [pc, #308]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006de0:	f00a fd76 	bl	80118d0 <siprintf>
 8006de4:	e006      	b.n	8006df4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006de6:	4b49      	ldr	r3, [pc, #292]	; (8006f0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	494a      	ldr	r1, [pc, #296]	; (8006f18 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006dee:	4849      	ldr	r0, [pc, #292]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006df0:	f00a fd6e 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006df4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2287      	movs	r2, #135	; 0x87
 8006e02:	214e      	movs	r1, #78	; 0x4e
 8006e04:	4843      	ldr	r0, [pc, #268]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e06:	f7fa fe8d 	bl	8001b24 <EF_PutString>
 8006e0a:	e078      	b.n	8006efe <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2be8      	cmp	r3, #232	; 0xe8
 8006e10:	d930      	bls.n	8006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006e18:	d22c      	bcs.n	8006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006e1a:	4b40      	ldr	r3, [pc, #256]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b3a      	cmp	r3, #58	; 0x3a
 8006e20:	d806      	bhi.n	8006e30 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006e22:	4b3e      	ldr	r3, [pc, #248]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	3301      	adds	r3, #1
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	4b3c      	ldr	r3, [pc, #240]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e002      	b.n	8006e36 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006e30:	4b3a      	ldr	r3, [pc, #232]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006e36:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d907      	bls.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006e3e:	4b37      	ldr	r3, [pc, #220]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	4932      	ldr	r1, [pc, #200]	; (8006f10 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006e46:	4833      	ldr	r0, [pc, #204]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e48:	f00a fd42 	bl	80118d0 <siprintf>
 8006e4c:	e006      	b.n	8006e5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006e4e:	4b33      	ldr	r3, [pc, #204]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	4930      	ldr	r1, [pc, #192]	; (8006f18 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006e56:	482f      	ldr	r0, [pc, #188]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e58:	f00a fd3a 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	2301      	movs	r3, #1
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2300      	movs	r3, #0
 8006e68:	2287      	movs	r2, #135	; 0x87
 8006e6a:	218a      	movs	r1, #138	; 0x8a
 8006e6c:	4829      	ldr	r0, [pc, #164]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e6e:	f7fa fe59 	bl	8001b24 <EF_PutString>
 8006e72:	e044      	b.n	8006efe <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006e7a:	d940      	bls.n	8006efe <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006e82:	d23c      	bcs.n	8006efe <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b30      	cmp	r3, #48	; 0x30
 8006e8a:	d806      	bhi.n	8006e9a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006e8c:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	330a      	adds	r3, #10
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e012      	b.n	8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006e9a:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f103 020a 	add.w	r2, r3, #10
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	; (8006f20 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006ea4:	fb83 1302 	smull	r1, r3, r3, r2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	1159      	asrs	r1, r3, #5
 8006eac:	17d3      	asrs	r3, r2, #31
 8006eae:	1ac9      	subs	r1, r1, r3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	1a5b      	subs	r3, r3, r1
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	1ad1      	subs	r1, r2, r3
 8006eba:	b2ca      	uxtb	r2, r1
 8006ebc:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ebe:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006ec0:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b09      	cmp	r3, #9
 8006ec6:	d907      	bls.n	8006ed8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006ec8:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4910      	ldr	r1, [pc, #64]	; (8006f10 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006ed0:	4810      	ldr	r0, [pc, #64]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ed2:	f00a fcfd 	bl	80118d0 <siprintf>
 8006ed6:	e006      	b.n	8006ee6 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	490e      	ldr	r1, [pc, #56]	; (8006f18 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006ee0:	480c      	ldr	r0, [pc, #48]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ee2:	f00a fcf5 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006ee6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	2301      	movs	r3, #1
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2287      	movs	r2, #135	; 0x87
 8006ef4:	218a      	movs	r1, #138	; 0x8a
 8006ef6:	4807      	ldr	r0, [pc, #28]	; (8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ef8:	f7fa fe14 	bl	8001b24 <EF_PutString>
	}
}
 8006efc:	e7ff      	b.n	8006efe <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	08028f4c 	.word	0x08028f4c
 8006f0c:	20000282 	.word	0x20000282
 8006f10:	08015a68 	.word	0x08015a68
 8006f14:	200002fc 	.word	0x200002fc
 8006f18:	08015a70 	.word	0x08015a70
 8006f1c:	20000284 	.word	0x20000284
 8006f20:	88888889 	.word	0x88888889

08006f24 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	460a      	mov	r2, r1
 8006f2e:	80fb      	strh	r3, [r7, #6]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	2b3b      	cmp	r3, #59	; 0x3b
 8006f38:	d91a      	bls.n	8006f70 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	2b50      	cmp	r3, #80	; 0x50
 8006f3e:	d817      	bhi.n	8006f70 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006f40:	4b68      	ldr	r3, [pc, #416]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 8006f48:	2100      	movs	r1, #0
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	f7ff fc5e 	bl	800680c <changeTFTScheduleDayOfWeek>
 8006f50:	e003      	b.n	8006f5a <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006f52:	2101      	movs	r1, #1
 8006f54:	2001      	movs	r0, #1
 8006f56:	f7ff fc59 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006f5a:	4b62      	ldr	r3, [pc, #392]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4b5e      	ldr	r3, [pc, #376]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e0b4      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	2b59      	cmp	r3, #89	; 0x59
 8006f74:	d91a      	bls.n	8006fac <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	2b6e      	cmp	r3, #110	; 0x6e
 8006f7a:	d817      	bhi.n	8006fac <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006f7c:	4b59      	ldr	r3, [pc, #356]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8006f84:	2100      	movs	r1, #0
 8006f86:	2002      	movs	r0, #2
 8006f88:	f7ff fc40 	bl	800680c <changeTFTScheduleDayOfWeek>
 8006f8c:	e003      	b.n	8006f96 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006f8e:	2101      	movs	r1, #1
 8006f90:	2002      	movs	r0, #2
 8006f92:	f7ff fc3b 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8006f96:	4b53      	ldr	r3, [pc, #332]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4b4f      	ldr	r3, [pc, #316]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fa8:	705a      	strb	r2, [r3, #1]
 8006faa:	e096      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	2b77      	cmp	r3, #119	; 0x77
 8006fb0:	d91a      	bls.n	8006fe8 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	2b8c      	cmp	r3, #140	; 0x8c
 8006fb6:	d817      	bhi.n	8006fe8 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006fb8:	4b4a      	ldr	r3, [pc, #296]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fba:	789b      	ldrb	r3, [r3, #2]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	2003      	movs	r0, #3
 8006fc4:	f7ff fc22 	bl	800680c <changeTFTScheduleDayOfWeek>
 8006fc8:	e003      	b.n	8006fd2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006fca:	2101      	movs	r1, #1
 8006fcc:	2003      	movs	r0, #3
 8006fce:	f7ff fc1d 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8006fd2:	4b44      	ldr	r3, [pc, #272]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fd4:	789b      	ldrb	r3, [r3, #2]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b40      	ldr	r3, [pc, #256]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fe4:	709a      	strb	r2, [r3, #2]
 8006fe6:	e078      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b95      	cmp	r3, #149	; 0x95
 8006fec:	d91a      	bls.n	8007024 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2baa      	cmp	r3, #170	; 0xaa
 8006ff2:	d817      	bhi.n	8007024 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006ff4:	4b3b      	ldr	r3, [pc, #236]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ff6:	78db      	ldrb	r3, [r3, #3]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	2004      	movs	r0, #4
 8007000:	f7ff fc04 	bl	800680c <changeTFTScheduleDayOfWeek>
 8007004:	e003      	b.n	800700e <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8007006:	2101      	movs	r1, #1
 8007008:	2004      	movs	r0, #4
 800700a:	f7ff fbff 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 800700e:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007010:	78db      	ldrb	r3, [r3, #3]
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf0c      	ite	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	2300      	movne	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007020:	70da      	strb	r2, [r3, #3]
 8007022:	e05a      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	2bb3      	cmp	r3, #179	; 0xb3
 8007028:	d91a      	bls.n	8007060 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	2bc8      	cmp	r3, #200	; 0xc8
 800702e:	d817      	bhi.n	8007060 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007030:	4b2c      	ldr	r3, [pc, #176]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007032:	791b      	ldrb	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8007038:	2100      	movs	r1, #0
 800703a:	2005      	movs	r0, #5
 800703c:	f7ff fbe6 	bl	800680c <changeTFTScheduleDayOfWeek>
 8007040:	e003      	b.n	800704a <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007042:	2101      	movs	r1, #1
 8007044:	2005      	movs	r0, #5
 8007046:	f7ff fbe1 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 800704a:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800704c:	791b      	ldrb	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf0c      	ite	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	2300      	movne	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800705c:	711a      	strb	r2, [r3, #4]
 800705e:	e03c      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	2bd1      	cmp	r3, #209	; 0xd1
 8007064:	d91a      	bls.n	800709c <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2be6      	cmp	r3, #230	; 0xe6
 800706a:	d817      	bhi.n	800709c <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 800706c:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800706e:	795b      	ldrb	r3, [r3, #5]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007074:	2100      	movs	r1, #0
 8007076:	2006      	movs	r0, #6
 8007078:	f7ff fbc8 	bl	800680c <changeTFTScheduleDayOfWeek>
 800707c:	e003      	b.n	8007086 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 800707e:	2101      	movs	r1, #1
 8007080:	2006      	movs	r0, #6
 8007082:	f7ff fbc3 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007086:	4b17      	ldr	r3, [pc, #92]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007088:	795b      	ldrb	r3, [r3, #5]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007098:	715a      	strb	r2, [r3, #5]
 800709a:	e01e      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	2bef      	cmp	r3, #239	; 0xef
 80070a0:	d91b      	bls.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a8:	d817      	bhi.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070ac:	799b      	ldrb	r3, [r3, #6]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 80070b2:	2100      	movs	r1, #0
 80070b4:	2007      	movs	r0, #7
 80070b6:	f7ff fba9 	bl	800680c <changeTFTScheduleDayOfWeek>
 80070ba:	e003      	b.n	80070c4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 80070bc:	2101      	movs	r1, #1
 80070be:	2007      	movs	r0, #7
 80070c0:	f7ff fba4 	bl	800680c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070c6:	799b      	ldrb	r3, [r3, #6]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bf0c      	ite	eq
 80070cc:	2301      	moveq	r3, #1
 80070ce:	2300      	movne	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070d6:	719a      	strb	r2, [r3, #6]
	}
}
 80070d8:	e7ff      	b.n	80070da <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000270 	.word	0x20000270

080070e8 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	4603      	mov	r3, r0
 80070f0:	460a      	mov	r2, r1
 80070f2:	80fb      	strh	r3, [r7, #6]
 80070f4:	4613      	mov	r3, r2
 80070f6:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80070f8:	4859      	ldr	r0, [pc, #356]	; (8007260 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 80070fa:	f7fa faf9 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2bba      	cmp	r3, #186	; 0xba
 8007102:	d92f      	bls.n	8007164 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	2bdd      	cmp	r3, #221	; 0xdd
 8007108:	d82c      	bhi.n	8007164 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 800710a:	4b56      	ldr	r3, [pc, #344]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b17      	cmp	r3, #23
 8007110:	d806      	bhi.n	8007120 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 8007112:	4b54      	ldr	r3, [pc, #336]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b52      	ldr	r3, [pc, #328]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e002      	b.n	8007126 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007120:	4b50      	ldr	r3, [pc, #320]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007122:	2201      	movs	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 8007126:	4b4f      	ldr	r3, [pc, #316]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b09      	cmp	r3, #9
 800712c:	d907      	bls.n	800713e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 800712e:	4b4d      	ldr	r3, [pc, #308]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	494c      	ldr	r1, [pc, #304]	; (8007268 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007136:	484d      	ldr	r0, [pc, #308]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007138:	f00a fbca 	bl	80118d0 <siprintf>
 800713c:	e006      	b.n	800714c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 800713e:	4b49      	ldr	r3, [pc, #292]	; (8007264 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	494a      	ldr	r1, [pc, #296]	; (8007270 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007146:	4849      	ldr	r0, [pc, #292]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007148:	f00a fbc2 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800714c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	2301      	movs	r3, #1
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	2300      	movs	r3, #0
 8007158:	2264      	movs	r2, #100	; 0x64
 800715a:	214e      	movs	r1, #78	; 0x4e
 800715c:	4843      	ldr	r0, [pc, #268]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800715e:	f7fa fce1 	bl	8001b24 <EF_PutString>
 8007162:	e078      	b.n	8007256 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	2be8      	cmp	r3, #232	; 0xe8
 8007168:	d930      	bls.n	80071cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007170:	d22c      	bcs.n	80071cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007172:	4b40      	ldr	r3, [pc, #256]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b3a      	cmp	r3, #58	; 0x3a
 8007178:	d806      	bhi.n	8007188 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 800717a:	4b3e      	ldr	r3, [pc, #248]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	3301      	adds	r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	4b3c      	ldr	r3, [pc, #240]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e002      	b.n	800718e <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 800718e:	4b39      	ldr	r3, [pc, #228]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b09      	cmp	r3, #9
 8007194:	d907      	bls.n	80071a6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 8007196:	4b37      	ldr	r3, [pc, #220]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	4932      	ldr	r1, [pc, #200]	; (8007268 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800719e:	4833      	ldr	r0, [pc, #204]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071a0:	f00a fb96 	bl	80118d0 <siprintf>
 80071a4:	e006      	b.n	80071b4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80071a6:	4b33      	ldr	r3, [pc, #204]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4930      	ldr	r1, [pc, #192]	; (8007270 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80071ae:	482f      	ldr	r0, [pc, #188]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071b0:	f00a fb8e 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80071b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	2301      	movs	r3, #1
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	2300      	movs	r3, #0
 80071c0:	2264      	movs	r2, #100	; 0x64
 80071c2:	218a      	movs	r1, #138	; 0x8a
 80071c4:	4829      	ldr	r0, [pc, #164]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071c6:	f7fa fcad 	bl	8001b24 <EF_PutString>
 80071ca:	e044      	b.n	8007256 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80071d2:	d940      	bls.n	8007256 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80071da:	d23c      	bcs.n	8007256 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b30      	cmp	r3, #48	; 0x30
 80071e2:	d806      	bhi.n	80071f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 80071e4:	4b23      	ldr	r3, [pc, #140]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	330a      	adds	r3, #10
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e012      	b.n	8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f103 020a 	add.w	r2, r3, #10
 80071fa:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 80071fc:	fb83 1302 	smull	r1, r3, r3, r2
 8007200:	4413      	add	r3, r2
 8007202:	1159      	asrs	r1, r3, #5
 8007204:	17d3      	asrs	r3, r2, #31
 8007206:	1ac9      	subs	r1, r1, r3
 8007208:	460b      	mov	r3, r1
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	1a5b      	subs	r3, r3, r1
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	1ad1      	subs	r1, r2, r3
 8007212:	b2ca      	uxtb	r2, r1
 8007214:	4b17      	ldr	r3, [pc, #92]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007216:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007218:	4b16      	ldr	r3, [pc, #88]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b09      	cmp	r3, #9
 800721e:	d907      	bls.n	8007230 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007220:	4b14      	ldr	r3, [pc, #80]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	4910      	ldr	r1, [pc, #64]	; (8007268 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007228:	4810      	ldr	r0, [pc, #64]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800722a:	f00a fb51 	bl	80118d0 <siprintf>
 800722e:	e006      	b.n	800723e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007230:	4b10      	ldr	r3, [pc, #64]	; (8007274 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	490e      	ldr	r1, [pc, #56]	; (8007270 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007238:	480c      	ldr	r0, [pc, #48]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800723a:	f00a fb49 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800723e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	2301      	movs	r3, #1
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	2264      	movs	r2, #100	; 0x64
 800724c:	218a      	movs	r1, #138	; 0x8a
 800724e:	4807      	ldr	r0, [pc, #28]	; (800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007250:	f7fa fc68 	bl	8001b24 <EF_PutString>
	}
}
 8007254:	e7ff      	b.n	8007256 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	08028f4c 	.word	0x08028f4c
 8007264:	20000285 	.word	0x20000285
 8007268:	08015a68 	.word	0x08015a68
 800726c:	200002fc 	.word	0x200002fc
 8007270:	08015a70 	.word	0x08015a70
 8007274:	20000287 	.word	0x20000287
 8007278:	88888889 	.word	0x88888889

0800727c <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af02      	add	r7, sp, #8
 8007282:	4603      	mov	r3, r0
 8007284:	460a      	mov	r2, r1
 8007286:	80fb      	strh	r3, [r7, #6]
 8007288:	4613      	mov	r3, r2
 800728a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 800728c:	4859      	ldr	r0, [pc, #356]	; (80073f4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 800728e:	f7fa fa2f 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	2bba      	cmp	r3, #186	; 0xba
 8007296:	d92f      	bls.n	80072f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	2bdd      	cmp	r3, #221	; 0xdd
 800729c:	d82c      	bhi.n	80072f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 800729e:	4b56      	ldr	r3, [pc, #344]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b17      	cmp	r3, #23
 80072a4:	d806      	bhi.n	80072b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 80072a6:	4b54      	ldr	r3, [pc, #336]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	3301      	adds	r3, #1
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	4b52      	ldr	r3, [pc, #328]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e002      	b.n	80072ba <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 80072b4:	4b50      	ldr	r3, [pc, #320]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 80072ba:	4b4f      	ldr	r3, [pc, #316]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d907      	bls.n	80072d2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 80072c2:	4b4d      	ldr	r3, [pc, #308]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	494c      	ldr	r1, [pc, #304]	; (80073fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80072ca:	484d      	ldr	r0, [pc, #308]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072cc:	f00a fb00 	bl	80118d0 <siprintf>
 80072d0:	e006      	b.n	80072e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 80072d2:	4b49      	ldr	r3, [pc, #292]	; (80073f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	494a      	ldr	r1, [pc, #296]	; (8007404 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80072da:	4849      	ldr	r0, [pc, #292]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072dc:	f00a faf8 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	2301      	movs	r3, #1
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	2287      	movs	r2, #135	; 0x87
 80072ee:	2150      	movs	r1, #80	; 0x50
 80072f0:	4843      	ldr	r0, [pc, #268]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072f2:	f7fa fc17 	bl	8001b24 <EF_PutString>
 80072f6:	e078      	b.n	80073ea <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	2be8      	cmp	r3, #232	; 0xe8
 80072fc:	d930      	bls.n	8007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007304:	d22c      	bcs.n	8007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 8007306:	4b40      	ldr	r3, [pc, #256]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b3a      	cmp	r3, #58	; 0x3a
 800730c:	d806      	bhi.n	800731c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 800730e:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	3301      	adds	r3, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	4b3c      	ldr	r3, [pc, #240]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e002      	b.n	8007322 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 800731c:	4b3a      	ldr	r3, [pc, #232]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007322:	4b39      	ldr	r3, [pc, #228]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b09      	cmp	r3, #9
 8007328:	d907      	bls.n	800733a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 800732a:	4b37      	ldr	r3, [pc, #220]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	4932      	ldr	r1, [pc, #200]	; (80073fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007332:	4833      	ldr	r0, [pc, #204]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007334:	f00a facc 	bl	80118d0 <siprintf>
 8007338:	e006      	b.n	8007348 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 800733a:	4b33      	ldr	r3, [pc, #204]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	4930      	ldr	r1, [pc, #192]	; (8007404 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007342:	482f      	ldr	r0, [pc, #188]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007344:	f00a fac4 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007348:	f24c 6318 	movw	r3, #50712	; 0xc618
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	2301      	movs	r3, #1
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	2300      	movs	r3, #0
 8007354:	2287      	movs	r2, #135	; 0x87
 8007356:	218a      	movs	r1, #138	; 0x8a
 8007358:	4829      	ldr	r0, [pc, #164]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800735a:	f7fa fbe3 	bl	8001b24 <EF_PutString>
 800735e:	e044      	b.n	80073ea <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007366:	d940      	bls.n	80073ea <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800736e:	d23c      	bcs.n	80073ea <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d806      	bhi.n	8007386 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8007378:	4b23      	ldr	r3, [pc, #140]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	330a      	adds	r3, #10
 800737e:	b2da      	uxtb	r2, r3
 8007380:	4b21      	ldr	r3, [pc, #132]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	e012      	b.n	80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8007386:	4b20      	ldr	r3, [pc, #128]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	f103 020a 	add.w	r2, r3, #10
 800738e:	4b1f      	ldr	r3, [pc, #124]	; (800740c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007390:	fb83 1302 	smull	r1, r3, r3, r2
 8007394:	4413      	add	r3, r2
 8007396:	1159      	asrs	r1, r3, #5
 8007398:	17d3      	asrs	r3, r2, #31
 800739a:	1ac9      	subs	r1, r1, r3
 800739c:	460b      	mov	r3, r1
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	1a5b      	subs	r3, r3, r1
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	1ad1      	subs	r1, r2, r3
 80073a6:	b2ca      	uxtb	r2, r1
 80073a8:	4b17      	ldr	r3, [pc, #92]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073aa:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80073ac:	4b16      	ldr	r3, [pc, #88]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b09      	cmp	r3, #9
 80073b2:	d907      	bls.n	80073c4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 80073b4:	4b14      	ldr	r3, [pc, #80]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	4910      	ldr	r1, [pc, #64]	; (80073fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80073bc:	4810      	ldr	r0, [pc, #64]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073be:	f00a fa87 	bl	80118d0 <siprintf>
 80073c2:	e006      	b.n	80073d2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80073c4:	4b10      	ldr	r3, [pc, #64]	; (8007408 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	490e      	ldr	r1, [pc, #56]	; (8007404 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80073cc:	480c      	ldr	r0, [pc, #48]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073ce:	f00a fa7f 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	2301      	movs	r3, #1
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	2300      	movs	r3, #0
 80073de:	2287      	movs	r2, #135	; 0x87
 80073e0:	218a      	movs	r1, #138	; 0x8a
 80073e2:	4807      	ldr	r0, [pc, #28]	; (8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073e4:	f7fa fb9e 	bl	8001b24 <EF_PutString>
	}
}
 80073e8:	e7ff      	b.n	80073ea <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	08028f4c 	.word	0x08028f4c
 80073f8:	20000286 	.word	0x20000286
 80073fc:	08015a68 	.word	0x08015a68
 8007400:	200002fc 	.word	0x200002fc
 8007404:	08015a70 	.word	0x08015a70
 8007408:	20000288 	.word	0x20000288
 800740c:	88888889 	.word	0x88888889

08007410 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	460a      	mov	r2, r1
 800741a:	80fb      	strh	r3, [r7, #6]
 800741c:	4613      	mov	r3, r2
 800741e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	2b14      	cmp	r3, #20
 8007424:	d919      	bls.n	800745a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	2b29      	cmp	r3, #41	; 0x29
 800742a:	d816      	bhi.n	800745a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800742c:	4b82      	ldr	r3, [pc, #520]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007434:	2100      	movs	r1, #0
 8007436:	2001      	movs	r0, #1
 8007438:	f7ff fac5 	bl	80069c6 <changeTFTScheduleRelayLights>
 800743c:	e003      	b.n	8007446 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800743e:	2101      	movs	r1, #1
 8007440:	2001      	movs	r0, #1
 8007442:	f7ff fac0 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007446:	4b7c      	ldr	r3, [pc, #496]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	bf0c      	ite	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	2300      	movne	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	4b78      	ldr	r3, [pc, #480]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007458:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	2b34      	cmp	r3, #52	; 0x34
 800745e:	d919      	bls.n	8007494 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	2b49      	cmp	r3, #73	; 0x49
 8007464:	d816      	bhi.n	8007494 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007466:	4b74      	ldr	r3, [pc, #464]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 800746e:	2100      	movs	r1, #0
 8007470:	2002      	movs	r0, #2
 8007472:	f7ff faa8 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007476:	e003      	b.n	8007480 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007478:	2101      	movs	r1, #1
 800747a:	2002      	movs	r0, #2
 800747c:	f7ff faa3 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007480:	4b6d      	ldr	r3, [pc, #436]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b00      	cmp	r3, #0
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	4b69      	ldr	r3, [pc, #420]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007492:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	2b54      	cmp	r3, #84	; 0x54
 8007498:	d919      	bls.n	80074ce <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	2b69      	cmp	r3, #105	; 0x69
 800749e:	d816      	bhi.n	80074ce <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80074a0:	4b65      	ldr	r3, [pc, #404]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074a2:	789b      	ldrb	r3, [r3, #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 80074a8:	2100      	movs	r1, #0
 80074aa:	2003      	movs	r0, #3
 80074ac:	f7ff fa8b 	bl	80069c6 <changeTFTScheduleRelayLights>
 80074b0:	e003      	b.n	80074ba <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80074b2:	2101      	movs	r1, #1
 80074b4:	2003      	movs	r0, #3
 80074b6:	f7ff fa86 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80074ba:	4b5f      	ldr	r3, [pc, #380]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074bc:	789b      	ldrb	r3, [r3, #2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bf0c      	ite	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	2300      	movne	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	4b5b      	ldr	r3, [pc, #364]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074cc:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b74      	cmp	r3, #116	; 0x74
 80074d2:	d919      	bls.n	8007508 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	2b89      	cmp	r3, #137	; 0x89
 80074d8:	d816      	bhi.n	8007508 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80074da:	4b57      	ldr	r3, [pc, #348]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074dc:	78db      	ldrb	r3, [r3, #3]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 80074e2:	2100      	movs	r1, #0
 80074e4:	2004      	movs	r0, #4
 80074e6:	f7ff fa6e 	bl	80069c6 <changeTFTScheduleRelayLights>
 80074ea:	e003      	b.n	80074f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80074ec:	2101      	movs	r1, #1
 80074ee:	2004      	movs	r0, #4
 80074f0:	f7ff fa69 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80074f4:	4b50      	ldr	r3, [pc, #320]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074f6:	78db      	ldrb	r3, [r3, #3]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bf0c      	ite	eq
 80074fc:	2301      	moveq	r3, #1
 80074fe:	2300      	movne	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	4b4c      	ldr	r3, [pc, #304]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007506:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	2b94      	cmp	r3, #148	; 0x94
 800750c:	d919      	bls.n	8007542 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	2ba9      	cmp	r3, #169	; 0xa9
 8007512:	d816      	bhi.n	8007542 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007514:	4b48      	ldr	r3, [pc, #288]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 800751c:	2100      	movs	r1, #0
 800751e:	2005      	movs	r0, #5
 8007520:	f7ff fa51 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007524:	e003      	b.n	800752e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007526:	2101      	movs	r1, #1
 8007528:	2005      	movs	r0, #5
 800752a:	f7ff fa4c 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800752e:	4b42      	ldr	r3, [pc, #264]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007530:	791b      	ldrb	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf0c      	ite	eq
 8007536:	2301      	moveq	r3, #1
 8007538:	2300      	movne	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	461a      	mov	r2, r3
 800753e:	4b3e      	ldr	r3, [pc, #248]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007540:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2bb4      	cmp	r3, #180	; 0xb4
 8007546:	d919      	bls.n	800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	2bc9      	cmp	r3, #201	; 0xc9
 800754c:	d816      	bhi.n	800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800754e:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007550:	795b      	ldrb	r3, [r3, #5]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d004      	beq.n	8007560 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 8007556:	2100      	movs	r1, #0
 8007558:	2006      	movs	r0, #6
 800755a:	f7ff fa34 	bl	80069c6 <changeTFTScheduleRelayLights>
 800755e:	e003      	b.n	8007568 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007560:	2101      	movs	r1, #1
 8007562:	2006      	movs	r0, #6
 8007564:	f7ff fa2f 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007568:	4b33      	ldr	r3, [pc, #204]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800756a:	795b      	ldrb	r3, [r3, #5]
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800757a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800757c:	88fb      	ldrh	r3, [r7, #6]
 800757e:	2bd4      	cmp	r3, #212	; 0xd4
 8007580:	d919      	bls.n	80075b6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	2be9      	cmp	r3, #233	; 0xe9
 8007586:	d816      	bhi.n	80075b6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007588:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800758a:	799b      	ldrb	r3, [r3, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007590:	2100      	movs	r1, #0
 8007592:	2007      	movs	r0, #7
 8007594:	f7ff fa17 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007598:	e003      	b.n	80075a2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800759a:	2101      	movs	r1, #1
 800759c:	2007      	movs	r0, #7
 800759e:	f7ff fa12 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80075a2:	4b25      	ldr	r3, [pc, #148]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075a4:	799b      	ldrb	r3, [r3, #6]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	4b21      	ldr	r3, [pc, #132]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075b4:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	2bf4      	cmp	r3, #244	; 0xf4
 80075ba:	d91a      	bls.n	80075f2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80075c2:	d216      	bcs.n	80075f2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80075c4:	4b1c      	ldr	r3, [pc, #112]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075c6:	79db      	ldrb	r3, [r3, #7]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 80075cc:	2100      	movs	r1, #0
 80075ce:	2008      	movs	r0, #8
 80075d0:	f7ff f9f9 	bl	80069c6 <changeTFTScheduleRelayLights>
 80075d4:	e003      	b.n	80075de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80075d6:	2101      	movs	r1, #1
 80075d8:	2008      	movs	r0, #8
 80075da:	f7ff f9f4 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075e0:	79db      	ldrb	r3, [r3, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf0c      	ite	eq
 80075e6:	2301      	moveq	r3, #1
 80075e8:	2300      	movne	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b12      	ldr	r3, [pc, #72]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075f0:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80075f8:	d91a      	bls.n	8007630 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007600:	d216      	bcs.n	8007630 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007604:	7a1b      	ldrb	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 800760a:	2100      	movs	r1, #0
 800760c:	2009      	movs	r0, #9
 800760e:	f7ff f9da 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007612:	e003      	b.n	800761c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007614:	2101      	movs	r1, #1
 8007616:	2009      	movs	r0, #9
 8007618:	f7ff f9d5 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800761c:	4b06      	ldr	r3, [pc, #24]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800761e:	7a1b      	ldrb	r3, [r3, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800762e:	721a      	strb	r2, [r3, #8]
	}

}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000264 	.word	0x20000264

0800763c <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	460a      	mov	r2, r1
 8007646:	80fb      	strh	r3, [r7, #6]
 8007648:	4613      	mov	r3, r2
 800764a:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b14      	cmp	r3, #20
 8007650:	d919      	bls.n	8007686 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	2b29      	cmp	r3, #41	; 0x29
 8007656:	d816      	bhi.n	8007686 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007658:	4b82      	ldr	r3, [pc, #520]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007660:	2100      	movs	r1, #0
 8007662:	2001      	movs	r0, #1
 8007664:	f7ff f9af 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007668:	e003      	b.n	8007672 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800766a:	2101      	movs	r1, #1
 800766c:	2001      	movs	r0, #1
 800766e:	f7ff f9aa 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007672:	4b7c      	ldr	r3, [pc, #496]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf0c      	ite	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	2300      	movne	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	4b78      	ldr	r3, [pc, #480]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007684:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	2b34      	cmp	r3, #52	; 0x34
 800768a:	d919      	bls.n	80076c0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	2b49      	cmp	r3, #73	; 0x49
 8007690:	d816      	bhi.n	80076c0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007692:	4b74      	ldr	r3, [pc, #464]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800769a:	2100      	movs	r1, #0
 800769c:	2002      	movs	r0, #2
 800769e:	f7ff f992 	bl	80069c6 <changeTFTScheduleRelayLights>
 80076a2:	e003      	b.n	80076ac <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 80076a4:	2101      	movs	r1, #1
 80076a6:	2002      	movs	r0, #2
 80076a8:	f7ff f98d 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80076ac:	4b6d      	ldr	r3, [pc, #436]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bf0c      	ite	eq
 80076b4:	2301      	moveq	r3, #1
 80076b6:	2300      	movne	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	4b69      	ldr	r3, [pc, #420]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076be:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80076c0:	88fb      	ldrh	r3, [r7, #6]
 80076c2:	2b54      	cmp	r3, #84	; 0x54
 80076c4:	d919      	bls.n	80076fa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b69      	cmp	r3, #105	; 0x69
 80076ca:	d816      	bhi.n	80076fa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80076cc:	4b65      	ldr	r3, [pc, #404]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076ce:	789b      	ldrb	r3, [r3, #2]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 80076d4:	2100      	movs	r1, #0
 80076d6:	2003      	movs	r0, #3
 80076d8:	f7ff f975 	bl	80069c6 <changeTFTScheduleRelayLights>
 80076dc:	e003      	b.n	80076e6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80076de:	2101      	movs	r1, #1
 80076e0:	2003      	movs	r0, #3
 80076e2:	f7ff f970 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80076e6:	4b5f      	ldr	r3, [pc, #380]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076e8:	789b      	ldrb	r3, [r3, #2]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b5b      	ldr	r3, [pc, #364]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076f8:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b74      	cmp	r3, #116	; 0x74
 80076fe:	d919      	bls.n	8007734 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	2b89      	cmp	r3, #137	; 0x89
 8007704:	d816      	bhi.n	8007734 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007706:	4b57      	ldr	r3, [pc, #348]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007708:	78db      	ldrb	r3, [r3, #3]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 800770e:	2100      	movs	r1, #0
 8007710:	2004      	movs	r0, #4
 8007712:	f7ff f958 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007716:	e003      	b.n	8007720 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007718:	2101      	movs	r1, #1
 800771a:	2004      	movs	r0, #4
 800771c:	f7ff f953 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007720:	4b50      	ldr	r3, [pc, #320]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	bf0c      	ite	eq
 8007728:	2301      	moveq	r3, #1
 800772a:	2300      	movne	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	4b4c      	ldr	r3, [pc, #304]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007732:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	2b94      	cmp	r3, #148	; 0x94
 8007738:	d919      	bls.n	800776e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	2ba9      	cmp	r3, #169	; 0xa9
 800773e:	d816      	bhi.n	800776e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007740:	4b48      	ldr	r3, [pc, #288]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007742:	791b      	ldrb	r3, [r3, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 8007748:	2100      	movs	r1, #0
 800774a:	2005      	movs	r0, #5
 800774c:	f7ff f93b 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007750:	e003      	b.n	800775a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007752:	2101      	movs	r1, #1
 8007754:	2005      	movs	r0, #5
 8007756:	f7ff f936 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800775a:	4b42      	ldr	r3, [pc, #264]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800775c:	791b      	ldrb	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800776c:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	2bb4      	cmp	r3, #180	; 0xb4
 8007772:	d919      	bls.n	80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	2bc9      	cmp	r3, #201	; 0xc9
 8007778:	d816      	bhi.n	80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800777a:	4b3a      	ldr	r3, [pc, #232]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800777c:	795b      	ldrb	r3, [r3, #5]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007782:	2100      	movs	r1, #0
 8007784:	2006      	movs	r0, #6
 8007786:	f7ff f91e 	bl	80069c6 <changeTFTScheduleRelayLights>
 800778a:	e003      	b.n	8007794 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 800778c:	2101      	movs	r1, #1
 800778e:	2006      	movs	r0, #6
 8007790:	f7ff f919 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007794:	4b33      	ldr	r3, [pc, #204]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007796:	795b      	ldrb	r3, [r3, #5]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf0c      	ite	eq
 800779c:	2301      	moveq	r3, #1
 800779e:	2300      	movne	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077a6:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	2bd4      	cmp	r3, #212	; 0xd4
 80077ac:	d919      	bls.n	80077e2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	2be9      	cmp	r3, #233	; 0xe9
 80077b2:	d816      	bhi.n	80077e2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80077b4:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077b6:	799b      	ldrb	r3, [r3, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80077bc:	2100      	movs	r1, #0
 80077be:	2007      	movs	r0, #7
 80077c0:	f7ff f901 	bl	80069c6 <changeTFTScheduleRelayLights>
 80077c4:	e003      	b.n	80077ce <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80077c6:	2101      	movs	r1, #1
 80077c8:	2007      	movs	r0, #7
 80077ca:	f7ff f8fc 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80077ce:	4b25      	ldr	r3, [pc, #148]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077d0:	799b      	ldrb	r3, [r3, #6]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf0c      	ite	eq
 80077d6:	2301      	moveq	r3, #1
 80077d8:	2300      	movne	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	4b21      	ldr	r3, [pc, #132]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077e0:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2bf4      	cmp	r3, #244	; 0xf4
 80077e6:	d91a      	bls.n	800781e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80077ee:	d216      	bcs.n	800781e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80077f0:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077f2:	79db      	ldrb	r3, [r3, #7]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80077f8:	2100      	movs	r1, #0
 80077fa:	2008      	movs	r0, #8
 80077fc:	f7ff f8e3 	bl	80069c6 <changeTFTScheduleRelayLights>
 8007800:	e003      	b.n	800780a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007802:	2101      	movs	r1, #1
 8007804:	2008      	movs	r0, #8
 8007806:	f7ff f8de 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800780a:	4b16      	ldr	r3, [pc, #88]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800780c:	79db      	ldrb	r3, [r3, #7]
 800780e:	2b00      	cmp	r3, #0
 8007810:	bf0c      	ite	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	2300      	movne	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800781c:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007824:	d91a      	bls.n	800785c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800782c:	d216      	bcs.n	800785c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007830:	7a1b      	ldrb	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8007836:	2100      	movs	r1, #0
 8007838:	2009      	movs	r0, #9
 800783a:	f7ff f8c4 	bl	80069c6 <changeTFTScheduleRelayLights>
 800783e:	e003      	b.n	8007848 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007840:	2101      	movs	r1, #1
 8007842:	2009      	movs	r0, #9
 8007844:	f7ff f8bf 	bl	80069c6 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800784a:	7a1b      	ldrb	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800785a:	721a      	strb	r2, [r3, #8]
	}
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000278 	.word	0x20000278

08007868 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d118      	bne.n	80078aa <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8007878:	491b      	ldr	r1, [pc, #108]	; (80078e8 <updateAllSchedulesInfo+0x80>)
 800787a:	2001      	movs	r0, #1
 800787c:	f7fb fb3d 	bl	8002efa <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007880:	491a      	ldr	r1, [pc, #104]	; (80078ec <updateAllSchedulesInfo+0x84>)
 8007882:	2001      	movs	r0, #1
 8007884:	f7fb fb5d 	bl	8002f42 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8007888:	4919      	ldr	r1, [pc, #100]	; (80078f0 <updateAllSchedulesInfo+0x88>)
 800788a:	2001      	movs	r0, #1
 800788c:	f7fb fb7d 	bl	8002f8a <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007890:	4918      	ldr	r1, [pc, #96]	; (80078f4 <updateAllSchedulesInfo+0x8c>)
 8007892:	2001      	movs	r0, #1
 8007894:	f7fb fb9d 	bl	8002fd2 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8007898:	4917      	ldr	r1, [pc, #92]	; (80078f8 <updateAllSchedulesInfo+0x90>)
 800789a:	2001      	movs	r0, #1
 800789c:	f7fb f9dc 	bl	8002c58 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80078a0:	4916      	ldr	r1, [pc, #88]	; (80078fc <updateAllSchedulesInfo+0x94>)
 80078a2:	2001      	movs	r0, #1
 80078a4:	f7fb fa54 	bl	8002d50 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 80078a8:	e01a      	b.n	80078e0 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d117      	bne.n	80078e0 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 80078b0:	4913      	ldr	r1, [pc, #76]	; (8007900 <updateAllSchedulesInfo+0x98>)
 80078b2:	2002      	movs	r0, #2
 80078b4:	f7fb fb21 	bl	8002efa <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 80078b8:	4912      	ldr	r1, [pc, #72]	; (8007904 <updateAllSchedulesInfo+0x9c>)
 80078ba:	2002      	movs	r0, #2
 80078bc:	f7fb fb41 	bl	8002f42 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 80078c0:	4911      	ldr	r1, [pc, #68]	; (8007908 <updateAllSchedulesInfo+0xa0>)
 80078c2:	2002      	movs	r0, #2
 80078c4:	f7fb fb61 	bl	8002f8a <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 80078c8:	4910      	ldr	r1, [pc, #64]	; (800790c <updateAllSchedulesInfo+0xa4>)
 80078ca:	2002      	movs	r0, #2
 80078cc:	f7fb fb81 	bl	8002fd2 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 80078d0:	4909      	ldr	r1, [pc, #36]	; (80078f8 <updateAllSchedulesInfo+0x90>)
 80078d2:	2002      	movs	r0, #2
 80078d4:	f7fb f9c0 	bl	8002c58 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 80078d8:	4908      	ldr	r1, [pc, #32]	; (80078fc <updateAllSchedulesInfo+0x94>)
 80078da:	2002      	movs	r0, #2
 80078dc:	f7fb fa38 	bl	8002d50 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	20000281 	.word	0x20000281
 80078ec:	20000283 	.word	0x20000283
 80078f0:	20000282 	.word	0x20000282
 80078f4:	20000284 	.word	0x20000284
 80078f8:	2000025c 	.word	0x2000025c
 80078fc:	20000264 	.word	0x20000264
 8007900:	20000285 	.word	0x20000285
 8007904:	20000287 	.word	0x20000287
 8007908:	20000286 	.word	0x20000286
 800790c:	20000288 	.word	0x20000288

08007910 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af02      	add	r7, sp, #8
 8007916:	4603      	mov	r3, r0
 8007918:	460a      	mov	r2, r1
 800791a:	80fb      	strh	r3, [r7, #6]
 800791c:	4613      	mov	r3, r2
 800791e:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007920:	88bb      	ldrh	r3, [r7, #4]
 8007922:	2b4a      	cmp	r3, #74	; 0x4a
 8007924:	d923      	bls.n	800796e <clockIncreaseOneHourAndMinute+0x5e>
 8007926:	88bb      	ldrh	r3, [r7, #4]
 8007928:	2b60      	cmp	r3, #96	; 0x60
 800792a:	d820      	bhi.n	800796e <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 800792c:	4b39      	ldr	r3, [pc, #228]	; (8007a14 <clockIncreaseOneHourAndMinute+0x104>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b17      	cmp	r3, #23
 8007932:	d806      	bhi.n	8007942 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 8007934:	4b37      	ldr	r3, [pc, #220]	; (8007a14 <clockIncreaseOneHourAndMinute+0x104>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	4b35      	ldr	r3, [pc, #212]	; (8007a14 <clockIncreaseOneHourAndMinute+0x104>)
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e002      	b.n	8007948 <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 8007942:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <clockIncreaseOneHourAndMinute+0x104>)
 8007944:	2201      	movs	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007948:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <clockIncreaseOneHourAndMinute+0x104>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	4932      	ldr	r1, [pc, #200]	; (8007a18 <clockIncreaseOneHourAndMinute+0x108>)
 8007950:	4832      	ldr	r0, [pc, #200]	; (8007a1c <clockIncreaseOneHourAndMinute+0x10c>)
 8007952:	f009 ffbd 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007956:	f24c 6318 	movw	r3, #50712	; 0xc618
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	2301      	movs	r3, #1
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	2300      	movs	r3, #0
 8007962:	2246      	movs	r2, #70	; 0x46
 8007964:	21a0      	movs	r1, #160	; 0xa0
 8007966:	482d      	ldr	r0, [pc, #180]	; (8007a1c <clockIncreaseOneHourAndMinute+0x10c>)
 8007968:	f7fa f8dc 	bl	8001b24 <EF_PutString>
 800796c:	e04d      	b.n	8007a0a <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 800796e:	88bb      	ldrh	r3, [r7, #4]
 8007970:	2b72      	cmp	r3, #114	; 0x72
 8007972:	d923      	bls.n	80079bc <clockIncreaseOneHourAndMinute+0xac>
 8007974:	88bb      	ldrh	r3, [r7, #4]
 8007976:	2b88      	cmp	r3, #136	; 0x88
 8007978:	d820      	bhi.n	80079bc <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 800797a:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <clockIncreaseOneHourAndMinute+0x110>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b3a      	cmp	r3, #58	; 0x3a
 8007980:	d806      	bhi.n	8007990 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007982:	4b27      	ldr	r3, [pc, #156]	; (8007a20 <clockIncreaseOneHourAndMinute+0x110>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	3301      	adds	r3, #1
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <clockIncreaseOneHourAndMinute+0x110>)
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e002      	b.n	8007996 <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007990:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <clockIncreaseOneHourAndMinute+0x110>)
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <clockIncreaseOneHourAndMinute+0x110>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	491e      	ldr	r1, [pc, #120]	; (8007a18 <clockIncreaseOneHourAndMinute+0x108>)
 800799e:	481f      	ldr	r0, [pc, #124]	; (8007a1c <clockIncreaseOneHourAndMinute+0x10c>)
 80079a0:	f009 ff96 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	2301      	movs	r3, #1
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	2300      	movs	r3, #0
 80079b0:	226e      	movs	r2, #110	; 0x6e
 80079b2:	21a0      	movs	r1, #160	; 0xa0
 80079b4:	4819      	ldr	r0, [pc, #100]	; (8007a1c <clockIncreaseOneHourAndMinute+0x10c>)
 80079b6:	f7fa f8b5 	bl	8001b24 <EF_PutString>
 80079ba:	e026      	b.n	8007a0a <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 80079bc:	88bb      	ldrh	r3, [r7, #4]
 80079be:	2b9a      	cmp	r3, #154	; 0x9a
 80079c0:	d923      	bls.n	8007a0a <clockIncreaseOneHourAndMinute+0xfa>
 80079c2:	88bb      	ldrh	r3, [r7, #4]
 80079c4:	2bb0      	cmp	r3, #176	; 0xb0
 80079c6:	d820      	bhi.n	8007a0a <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <clockIncreaseOneHourAndMinute+0x114>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b06      	cmp	r3, #6
 80079ce:	d806      	bhi.n	80079de <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 80079d0:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <clockIncreaseOneHourAndMinute+0x114>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <clockIncreaseOneHourAndMinute+0x114>)
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e002      	b.n	80079e4 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 80079de:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <clockIncreaseOneHourAndMinute+0x114>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <clockIncreaseOneHourAndMinute+0x114>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	490f      	ldr	r1, [pc, #60]	; (8007a28 <clockIncreaseOneHourAndMinute+0x118>)
 80079ec:	480b      	ldr	r0, [pc, #44]	; (8007a1c <clockIncreaseOneHourAndMinute+0x10c>)
 80079ee:	f009 ff6f 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	2301      	movs	r3, #1
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	2300      	movs	r3, #0
 80079fe:	2296      	movs	r2, #150	; 0x96
 8007a00:	2114      	movs	r1, #20
 8007a02:	4806      	ldr	r0, [pc, #24]	; (8007a1c <clockIncreaseOneHourAndMinute+0x10c>)
 8007a04:	f7fa f88e 	bl	8001b24 <EF_PutString>
	}
}
 8007a08:	e7ff      	b.n	8007a0a <clockIncreaseOneHourAndMinute+0xfa>
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000031 	.word	0x20000031
 8007a18:	08015a78 	.word	0x08015a78
 8007a1c:	200002fc 	.word	0x200002fc
 8007a20:	20000032 	.word	0x20000032
 8007a24:	20000030 	.word	0x20000030
 8007a28:	08015a80 	.word	0x08015a80

08007a2c <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	4603      	mov	r3, r0
 8007a34:	460a      	mov	r2, r1
 8007a36:	80fb      	strh	r3, [r7, #6]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8007a3c:	88bb      	ldrh	r3, [r7, #4]
 8007a3e:	2b4a      	cmp	r3, #74	; 0x4a
 8007a40:	d923      	bls.n	8007a8a <clockIncreaseSixHoursTenMinutes+0x5e>
 8007a42:	88bb      	ldrh	r3, [r7, #4]
 8007a44:	2b60      	cmp	r3, #96	; 0x60
 8007a46:	d820      	bhi.n	8007a8a <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 8007a48:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b12      	cmp	r3, #18
 8007a4e:	d806      	bhi.n	8007a5e <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007a50:	4b2c      	ldr	r3, [pc, #176]	; (8007b04 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	3306      	adds	r3, #6
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e002      	b.n	8007a64 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007a64:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4927      	ldr	r1, [pc, #156]	; (8007b08 <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007a6c:	4827      	ldr	r0, [pc, #156]	; (8007b0c <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a6e:	f009 ff2f 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a72:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2246      	movs	r2, #70	; 0x46
 8007a80:	219d      	movs	r1, #157	; 0x9d
 8007a82:	4822      	ldr	r0, [pc, #136]	; (8007b0c <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a84:	f7fa f84e 	bl	8001b24 <EF_PutString>
 8007a88:	e035      	b.n	8007af6 <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007a8a:	88bb      	ldrh	r3, [r7, #4]
 8007a8c:	2b72      	cmp	r3, #114	; 0x72
 8007a8e:	d932      	bls.n	8007af6 <clockIncreaseSixHoursTenMinutes+0xca>
 8007a90:	88bb      	ldrh	r3, [r7, #4]
 8007a92:	2b88      	cmp	r3, #136	; 0x88
 8007a94:	d82f      	bhi.n	8007af6 <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007a96:	4b1e      	ldr	r3, [pc, #120]	; (8007b10 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b30      	cmp	r3, #48	; 0x30
 8007a9c:	d806      	bhi.n	8007aac <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007a9e:	4b1c      	ldr	r3, [pc, #112]	; (8007b10 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	330a      	adds	r3, #10
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e012      	b.n	8007ad2 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007aac:	4b18      	ldr	r3, [pc, #96]	; (8007b10 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f103 020a 	add.w	r2, r3, #10
 8007ab4:	4b17      	ldr	r3, [pc, #92]	; (8007b14 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007ab6:	fb83 1302 	smull	r1, r3, r3, r2
 8007aba:	4413      	add	r3, r2
 8007abc:	1159      	asrs	r1, r3, #5
 8007abe:	17d3      	asrs	r3, r2, #31
 8007ac0:	1ac9      	subs	r1, r1, r3
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	1a5b      	subs	r3, r3, r1
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	1ad1      	subs	r1, r2, r3
 8007acc:	b2ca      	uxtb	r2, r1
 8007ace:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007ad0:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	490b      	ldr	r1, [pc, #44]	; (8007b08 <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007ada:	480c      	ldr	r0, [pc, #48]	; (8007b0c <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007adc:	f009 fef8 	bl	80118d0 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ae0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	226e      	movs	r2, #110	; 0x6e
 8007aee:	219c      	movs	r1, #156	; 0x9c
 8007af0:	4806      	ldr	r0, [pc, #24]	; (8007b0c <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007af2:	f7fa f817 	bl	8001b24 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007af6:	4808      	ldr	r0, [pc, #32]	; (8007b18 <clockIncreaseSixHoursTenMinutes+0xec>)
 8007af8:	f7f9 fdfa 	bl	80016f0 <EF_SetFont>
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000031 	.word	0x20000031
 8007b08:	08015a78 	.word	0x08015a78
 8007b0c:	200002fc 	.word	0x200002fc
 8007b10:	20000032 	.word	0x20000032
 8007b14:	88888889 	.word	0x88888889
 8007b18:	08028f4c 	.word	0x08028f4c

08007b1c <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d954      	bls.n	8007bd6 <changeSwitchStatusTouch+0xba>
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	2b56      	cmp	r3, #86	; 0x56
 8007b30:	d851      	bhi.n	8007bd6 <changeSwitchStatusTouch+0xba>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b32:	4bb0      	ldr	r3, [pc, #704]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d026      	beq.n	8007b88 <changeSwitchStatusTouch+0x6c>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8007b3a:	2006      	movs	r0, #6
 8007b3c:	f000 ffac 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007b40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	2305      	movs	r3, #5
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	2315      	movs	r3, #21
 8007b4c:	2221      	movs	r2, #33	; 0x21
 8007b4e:	2141      	movs	r1, #65	; 0x41
 8007b50:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007b54:	f7f9 fd7b 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007b58:	49a7      	ldr	r1, [pc, #668]	; (8007df8 <changeSwitchStatusTouch+0x2dc>)
 8007b5a:	48a8      	ldr	r0, [pc, #672]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007b5c:	f009 feb8 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007b60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2243      	movs	r2, #67	; 0x43
 8007b6e:	f240 1111 	movw	r1, #273	; 0x111
 8007b72:	48a2      	ldr	r0, [pc, #648]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007b74:	f7f9 ffd6 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 0;
 8007b78:	4b9e      	ldr	r3, [pc, #632]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 0);
 8007b7e:	2100      	movs	r1, #0
 8007b80:	2001      	movs	r0, #1
 8007b82:	f7fa ff19 	bl	80029b8 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b86:	e12d      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8007b88:	2005      	movs	r0, #5
 8007b8a:	f000 ff85 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007b8e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	2305      	movs	r3, #5
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2315      	movs	r3, #21
 8007b9a:	2221      	movs	r2, #33	; 0x21
 8007b9c:	2141      	movs	r1, #65	; 0x41
 8007b9e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007ba2:	f7f9 fd54 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007ba6:	4996      	ldr	r1, [pc, #600]	; (8007e00 <changeSwitchStatusTouch+0x2e4>)
 8007ba8:	4894      	ldr	r0, [pc, #592]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007baa:	f009 fe91 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007bae:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2243      	movs	r2, #67	; 0x43
 8007bbc:	f240 1111 	movw	r1, #273	; 0x111
 8007bc0:	488e      	ldr	r0, [pc, #568]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007bc2:	f7f9 ffaf 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 1;
 8007bc6:	4b8b      	ldr	r3, [pc, #556]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 1);
 8007bcc:	2101      	movs	r1, #1
 8007bce:	2001      	movs	r0, #1
 8007bd0:	f7fa fef2 	bl	80029b8 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007bd4:	e106      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}

	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2b5e      	cmp	r3, #94	; 0x5e
 8007bda:	d954      	bls.n	8007c86 <changeSwitchStatusTouch+0x16a>
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b74      	cmp	r3, #116	; 0x74
 8007be0:	d851      	bhi.n	8007c86 <changeSwitchStatusTouch+0x16a>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007be2:	4b84      	ldr	r3, [pc, #528]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d026      	beq.n	8007c38 <changeSwitchStatusTouch+0x11c>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8007bea:	2008      	movs	r0, #8
 8007bec:	f000 ff54 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007bf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	2305      	movs	r3, #5
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	2315      	movs	r3, #21
 8007bfc:	2221      	movs	r2, #33	; 0x21
 8007bfe:	215f      	movs	r1, #95	; 0x5f
 8007c00:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c04:	f7f9 fd23 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007c08:	497b      	ldr	r1, [pc, #492]	; (8007df8 <changeSwitchStatusTouch+0x2dc>)
 8007c0a:	487c      	ldr	r0, [pc, #496]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007c0c:	f009 fe60 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007c10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2261      	movs	r2, #97	; 0x61
 8007c1e:	f240 1111 	movw	r1, #273	; 0x111
 8007c22:	4876      	ldr	r0, [pc, #472]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007c24:	f7f9 ff7e 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 0;
 8007c28:	4b72      	ldr	r3, [pc, #456]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 0);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	2002      	movs	r0, #2
 8007c32:	f7fa fec1 	bl	80029b8 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c36:	e0d5      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8007c38:	2007      	movs	r0, #7
 8007c3a:	f000 ff2d 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007c3e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	2305      	movs	r3, #5
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2315      	movs	r3, #21
 8007c4a:	2221      	movs	r2, #33	; 0x21
 8007c4c:	215f      	movs	r1, #95	; 0x5f
 8007c4e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c52:	f7f9 fcfc 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007c56:	496a      	ldr	r1, [pc, #424]	; (8007e00 <changeSwitchStatusTouch+0x2e4>)
 8007c58:	4868      	ldr	r0, [pc, #416]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007c5a:	f009 fe39 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007c5e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	2300      	movs	r3, #0
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2261      	movs	r2, #97	; 0x61
 8007c6c:	f240 1111 	movw	r1, #273	; 0x111
 8007c70:	4862      	ldr	r0, [pc, #392]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007c72:	f7f9 ff57 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 1;
 8007c76:	4b5f      	ldr	r3, [pc, #380]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 1);
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	2002      	movs	r0, #2
 8007c80:	f7fa fe9a 	bl	80029b8 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c84:	e0ae      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	2b7c      	cmp	r3, #124	; 0x7c
 8007c8a:	d954      	bls.n	8007d36 <changeSwitchStatusTouch+0x21a>
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	2b92      	cmp	r3, #146	; 0x92
 8007c90:	d851      	bhi.n	8007d36 <changeSwitchStatusTouch+0x21a>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c92:	4b58      	ldr	r3, [pc, #352]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d026      	beq.n	8007ce8 <changeSwitchStatusTouch+0x1cc>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8007c9a:	200a      	movs	r0, #10
 8007c9c:	f000 fefc 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ca0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	2305      	movs	r3, #5
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	2315      	movs	r3, #21
 8007cac:	2221      	movs	r2, #33	; 0x21
 8007cae:	217d      	movs	r1, #125	; 0x7d
 8007cb0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007cb4:	f7f9 fccb 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007cb8:	494f      	ldr	r1, [pc, #316]	; (8007df8 <changeSwitchStatusTouch+0x2dc>)
 8007cba:	4850      	ldr	r0, [pc, #320]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007cbc:	f009 fe08 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007cc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	227f      	movs	r2, #127	; 0x7f
 8007cce:	f240 1111 	movw	r1, #273	; 0x111
 8007cd2:	484a      	ldr	r0, [pc, #296]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007cd4:	f7f9 ff26 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 0;
 8007cd8:	4b46      	ldr	r3, [pc, #280]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 0);
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2003      	movs	r0, #3
 8007ce2:	f7fa fe69 	bl	80029b8 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007ce6:	e07d      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8007ce8:	2009      	movs	r0, #9
 8007cea:	f000 fed5 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007cee:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	2305      	movs	r3, #5
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2315      	movs	r3, #21
 8007cfa:	2221      	movs	r2, #33	; 0x21
 8007cfc:	217d      	movs	r1, #125	; 0x7d
 8007cfe:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d02:	f7f9 fca4 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007d06:	493e      	ldr	r1, [pc, #248]	; (8007e00 <changeSwitchStatusTouch+0x2e4>)
 8007d08:	483c      	ldr	r0, [pc, #240]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007d0a:	f009 fde1 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007d0e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	2300      	movs	r3, #0
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	227f      	movs	r2, #127	; 0x7f
 8007d1c:	f240 1111 	movw	r1, #273	; 0x111
 8007d20:	4836      	ldr	r0, [pc, #216]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007d22:	f7f9 feff 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 1;
 8007d26:	4b33      	ldr	r3, [pc, #204]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007d28:	2201      	movs	r2, #1
 8007d2a:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 1);
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	2003      	movs	r0, #3
 8007d30:	f7fa fe42 	bl	80029b8 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007d34:	e056      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b9a      	cmp	r3, #154	; 0x9a
 8007d3a:	d953      	bls.n	8007de4 <changeSwitchStatusTouch+0x2c8>
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2bb0      	cmp	r3, #176	; 0xb0
 8007d40:	d850      	bhi.n	8007de4 <changeSwitchStatusTouch+0x2c8>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007d42:	4b2c      	ldr	r3, [pc, #176]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007d44:	78db      	ldrb	r3, [r3, #3]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d026      	beq.n	8007d98 <changeSwitchStatusTouch+0x27c>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8007d4a:	200c      	movs	r0, #12
 8007d4c:	f000 fea4 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007d50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	2305      	movs	r3, #5
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	2315      	movs	r3, #21
 8007d5c:	2221      	movs	r2, #33	; 0x21
 8007d5e:	219b      	movs	r1, #155	; 0x9b
 8007d60:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d64:	f7f9 fc73 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007d68:	4923      	ldr	r1, [pc, #140]	; (8007df8 <changeSwitchStatusTouch+0x2dc>)
 8007d6a:	4824      	ldr	r0, [pc, #144]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007d6c:	f009 fdb0 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007d70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	229d      	movs	r2, #157	; 0x9d
 8007d7e:	f240 1111 	movw	r1, #273	; 0x111
 8007d82:	481e      	ldr	r0, [pc, #120]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007d84:	f7f9 fece 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 0;
 8007d88:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 0);
 8007d8e:	2100      	movs	r1, #0
 8007d90:	2004      	movs	r0, #4
 8007d92:	f7fa fe11 	bl	80029b8 <EEPROM_RelayStateUpdate>
 8007d96:	e025      	b.n	8007de4 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8007d98:	200b      	movs	r0, #11
 8007d9a:	f000 fe7d 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007d9e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2305      	movs	r3, #5
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2315      	movs	r3, #21
 8007daa:	2221      	movs	r2, #33	; 0x21
 8007dac:	219b      	movs	r1, #155	; 0x9b
 8007dae:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007db2:	f7f9 fc4c 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007db6:	4912      	ldr	r1, [pc, #72]	; (8007e00 <changeSwitchStatusTouch+0x2e4>)
 8007db8:	4810      	ldr	r0, [pc, #64]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007dba:	f009 fd89 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007dbe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	229d      	movs	r2, #157	; 0x9d
 8007dcc:	f240 1111 	movw	r1, #273	; 0x111
 8007dd0:	480a      	ldr	r0, [pc, #40]	; (8007dfc <changeSwitchStatusTouch+0x2e0>)
 8007dd2:	f7f9 fea7 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 1;
 8007dd6:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <changeSwitchStatusTouch+0x2d8>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 1);
 8007ddc:	2101      	movs	r1, #1
 8007dde:	2004      	movs	r0, #4
 8007de0:	f7fa fdea 	bl	80029b8 <EEPROM_RelayStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007de4:	4807      	ldr	r0, [pc, #28]	; (8007e04 <changeSwitchStatusTouch+0x2e8>)
 8007de6:	f7f9 fc83 	bl	80016f0 <EF_SetFont>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200002a8 	.word	0x200002a8
 8007df8:	08015a94 	.word	0x08015a94
 8007dfc:	200002fc 	.word	0x200002fc
 8007e00:	08015a98 	.word	0x08015a98
 8007e04:	08028f4c 	.word	0x08028f4c

08007e08 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d950      	bls.n	8007eba <changeLightsStatusTouch+0xb2>
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	2b56      	cmp	r3, #86	; 0x56
 8007e1c:	d84d      	bhi.n	8007eba <changeLightsStatusTouch+0xb2>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007e1e:	4ba8      	ldr	r3, [pc, #672]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d024      	beq.n	8007e70 <changeLightsStatusTouch+0x68>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8007e26:	200e      	movs	r0, #14
 8007e28:	f000 fe36 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	2305      	movs	r3, #5
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	2315      	movs	r3, #21
 8007e38:	2221      	movs	r2, #33	; 0x21
 8007e3a:	2141      	movs	r1, #65	; 0x41
 8007e3c:	20c8      	movs	r0, #200	; 0xc8
 8007e3e:	f7f9 fc06 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007e42:	49a0      	ldr	r1, [pc, #640]	; (80080c4 <changeLightsStatusTouch+0x2bc>)
 8007e44:	48a0      	ldr	r0, [pc, #640]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007e46:	f009 fd43 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	2243      	movs	r2, #67	; 0x43
 8007e58:	21cb      	movs	r1, #203	; 0xcb
 8007e5a:	489b      	ldr	r0, [pc, #620]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007e5c:	f7f9 fe62 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 0;
 8007e60:	4b97      	ldr	r3, [pc, #604]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 0);
 8007e66:	2100      	movs	r1, #0
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7fa fdde 	bl	8002a2a <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e6e:	e11f      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8007e70:	200d      	movs	r0, #13
 8007e72:	f000 fe11 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007e76:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2305      	movs	r3, #5
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2315      	movs	r3, #21
 8007e82:	2221      	movs	r2, #33	; 0x21
 8007e84:	2141      	movs	r1, #65	; 0x41
 8007e86:	20c8      	movs	r0, #200	; 0xc8
 8007e88:	f7f9 fbe1 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007e8c:	498f      	ldr	r1, [pc, #572]	; (80080cc <changeLightsStatusTouch+0x2c4>)
 8007e8e:	488e      	ldr	r0, [pc, #568]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007e90:	f009 fd1e 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2243      	movs	r2, #67	; 0x43
 8007ea2:	21cb      	movs	r1, #203	; 0xcb
 8007ea4:	4888      	ldr	r0, [pc, #544]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007ea6:	f7f9 fe3d 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 1;
 8007eaa:	4b85      	ldr	r3, [pc, #532]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 1);
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	f7fa fdb9 	bl	8002a2a <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007eb8:	e0fa      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b5e      	cmp	r3, #94	; 0x5e
 8007ebe:	d950      	bls.n	8007f62 <changeLightsStatusTouch+0x15a>
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	2b74      	cmp	r3, #116	; 0x74
 8007ec4:	d84d      	bhi.n	8007f62 <changeLightsStatusTouch+0x15a>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007ec6:	4b7e      	ldr	r3, [pc, #504]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d024      	beq.n	8007f18 <changeLightsStatusTouch+0x110>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8007ece:	2010      	movs	r0, #16
 8007ed0:	f000 fde2 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	2305      	movs	r3, #5
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	2315      	movs	r3, #21
 8007ee0:	2221      	movs	r2, #33	; 0x21
 8007ee2:	215f      	movs	r1, #95	; 0x5f
 8007ee4:	20c8      	movs	r0, #200	; 0xc8
 8007ee6:	f7f9 fbb2 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007eea:	4976      	ldr	r1, [pc, #472]	; (80080c4 <changeLightsStatusTouch+0x2bc>)
 8007eec:	4876      	ldr	r0, [pc, #472]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007eee:	f009 fcef 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007ef2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2300      	movs	r3, #0
 8007efe:	2261      	movs	r2, #97	; 0x61
 8007f00:	21cb      	movs	r1, #203	; 0xcb
 8007f02:	4871      	ldr	r0, [pc, #452]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007f04:	f7f9 fe0e 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 0;
 8007f08:	4b6d      	ldr	r3, [pc, #436]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 0);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	2002      	movs	r0, #2
 8007f12:	f7fa fd8a 	bl	8002a2a <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007f16:	e0cb      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8007f18:	200f      	movs	r0, #15
 8007f1a:	f000 fdbd 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007f1e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2305      	movs	r3, #5
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	2315      	movs	r3, #21
 8007f2a:	2221      	movs	r2, #33	; 0x21
 8007f2c:	215f      	movs	r1, #95	; 0x5f
 8007f2e:	20c8      	movs	r0, #200	; 0xc8
 8007f30:	f7f9 fb8d 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007f34:	4965      	ldr	r1, [pc, #404]	; (80080cc <changeLightsStatusTouch+0x2c4>)
 8007f36:	4864      	ldr	r0, [pc, #400]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007f38:	f009 fcca 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	2261      	movs	r2, #97	; 0x61
 8007f4a:	21cb      	movs	r1, #203	; 0xcb
 8007f4c:	485e      	ldr	r0, [pc, #376]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007f4e:	f7f9 fde9 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 1;
 8007f52:	4b5b      	ldr	r3, [pc, #364]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 1);
 8007f58:	2101      	movs	r1, #1
 8007f5a:	2002      	movs	r0, #2
 8007f5c:	f7fa fd65 	bl	8002a2a <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007f60:	e0a6      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	2b7c      	cmp	r3, #124	; 0x7c
 8007f66:	d950      	bls.n	800800a <changeLightsStatusTouch+0x202>
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	2b92      	cmp	r3, #146	; 0x92
 8007f6c:	d84d      	bhi.n	800800a <changeLightsStatusTouch+0x202>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8007f6e:	4b54      	ldr	r3, [pc, #336]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007f70:	789b      	ldrb	r3, [r3, #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d024      	beq.n	8007fc0 <changeLightsStatusTouch+0x1b8>
		{
			SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8007f76:	2012      	movs	r0, #18
 8007f78:	f000 fd8e 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	2305      	movs	r3, #5
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	2315      	movs	r3, #21
 8007f88:	2221      	movs	r2, #33	; 0x21
 8007f8a:	217d      	movs	r1, #125	; 0x7d
 8007f8c:	20c8      	movs	r0, #200	; 0xc8
 8007f8e:	f7f9 fb5e 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007f92:	494c      	ldr	r1, [pc, #304]	; (80080c4 <changeLightsStatusTouch+0x2bc>)
 8007f94:	484c      	ldr	r0, [pc, #304]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007f96:	f009 fc9b 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	227f      	movs	r2, #127	; 0x7f
 8007fa8:	21cb      	movs	r1, #203	; 0xcb
 8007faa:	4847      	ldr	r0, [pc, #284]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007fac:	f7f9 fdba 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 0;
 8007fb0:	4b43      	ldr	r3, [pc, #268]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 0);
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	2003      	movs	r0, #3
 8007fba:	f7fa fd36 	bl	8002a2a <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007fbe:	e077      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8007fc0:	2011      	movs	r0, #17
 8007fc2:	f000 fd69 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007fc6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	2305      	movs	r3, #5
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	2315      	movs	r3, #21
 8007fd2:	2221      	movs	r2, #33	; 0x21
 8007fd4:	217d      	movs	r1, #125	; 0x7d
 8007fd6:	20c8      	movs	r0, #200	; 0xc8
 8007fd8:	f7f9 fb39 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007fdc:	493b      	ldr	r1, [pc, #236]	; (80080cc <changeLightsStatusTouch+0x2c4>)
 8007fde:	483a      	ldr	r0, [pc, #232]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007fe0:	f009 fc76 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007fe4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	227f      	movs	r2, #127	; 0x7f
 8007ff2:	21cb      	movs	r1, #203	; 0xcb
 8007ff4:	4834      	ldr	r0, [pc, #208]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8007ff6:	f7f9 fd95 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 1;
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 1);
 8008000:	2101      	movs	r1, #1
 8008002:	2003      	movs	r0, #3
 8008004:	f7fa fd11 	bl	8002a2a <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8008008:	e052      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	2b9a      	cmp	r3, #154	; 0x9a
 800800e:	d94f      	bls.n	80080b0 <changeLightsStatusTouch+0x2a8>
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	2bb0      	cmp	r3, #176	; 0xb0
 8008014:	d84c      	bhi.n	80080b0 <changeLightsStatusTouch+0x2a8>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8008016:	4b2a      	ldr	r3, [pc, #168]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 8008018:	78db      	ldrb	r3, [r3, #3]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d024      	beq.n	8008068 <changeLightsStatusTouch+0x260>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 800801e:	2014      	movs	r0, #20
 8008020:	f000 fd3a 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008024:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	2305      	movs	r3, #5
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2315      	movs	r3, #21
 8008030:	2221      	movs	r2, #33	; 0x21
 8008032:	219b      	movs	r1, #155	; 0x9b
 8008034:	20c8      	movs	r0, #200	; 0xc8
 8008036:	f7f9 fb0a 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 800803a:	4922      	ldr	r1, [pc, #136]	; (80080c4 <changeLightsStatusTouch+0x2bc>)
 800803c:	4822      	ldr	r0, [pc, #136]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 800803e:	f009 fc47 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008042:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	2300      	movs	r3, #0
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	2300      	movs	r3, #0
 800804e:	229d      	movs	r2, #157	; 0x9d
 8008050:	21cb      	movs	r1, #203	; 0xcb
 8008052:	481d      	ldr	r0, [pc, #116]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8008054:	f7f9 fd66 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 0;
 8008058:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 800805a:	2200      	movs	r2, #0
 800805c:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 0);
 800805e:	2100      	movs	r1, #0
 8008060:	2004      	movs	r0, #4
 8008062:	f7fa fce2 	bl	8002a2a <EEPROM_LightStateUpdate>
 8008066:	e023      	b.n	80080b0 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8008068:	2013      	movs	r0, #19
 800806a:	f000 fd15 	bl	8008a98 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800806e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	2305      	movs	r3, #5
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2315      	movs	r3, #21
 800807a:	2221      	movs	r2, #33	; 0x21
 800807c:	219b      	movs	r1, #155	; 0x9b
 800807e:	20c8      	movs	r0, #200	; 0xc8
 8008080:	f7f9 fae5 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008084:	4911      	ldr	r1, [pc, #68]	; (80080cc <changeLightsStatusTouch+0x2c4>)
 8008086:	4810      	ldr	r0, [pc, #64]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 8008088:	f009 fc22 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800808c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	2300      	movs	r3, #0
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	2300      	movs	r3, #0
 8008098:	229d      	movs	r2, #157	; 0x9d
 800809a:	21cb      	movs	r1, #203	; 0xcb
 800809c:	480a      	ldr	r0, [pc, #40]	; (80080c8 <changeLightsStatusTouch+0x2c0>)
 800809e:	f7f9 fd41 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 1;
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <changeLightsStatusTouch+0x2b8>)
 80080a4:	2201      	movs	r2, #1
 80080a6:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 1);
 80080a8:	2101      	movs	r1, #1
 80080aa:	2004      	movs	r0, #4
 80080ac:	f7fa fcbd 	bl	8002a2a <EEPROM_LightStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80080b0:	4807      	ldr	r0, [pc, #28]	; (80080d0 <changeLightsStatusTouch+0x2c8>)
 80080b2:	f7f9 fb1d 	bl	80016f0 <EF_SetFont>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	200002ac 	.word	0x200002ac
 80080c4:	08015a94 	.word	0x08015a94
 80080c8:	200002fc 	.word	0x200002fc
 80080cc:	08015a98 	.word	0x08015a98
 80080d0:	08028f4c 	.word	0x08028f4c

080080d4 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af02      	add	r7, sp, #8
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	2b3b      	cmp	r3, #59	; 0x3b
 80080e2:	d966      	bls.n	80081b2 <predefinedActivityTouchAction+0xde>
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	2b64      	cmp	r3, #100	; 0x64
 80080e8:	d863      	bhi.n	80081b2 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 80080ea:	4b69      	ldr	r3, [pc, #420]	; (8008290 <predefinedActivityTouchAction+0x1bc>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d02f      	beq.n	8008152 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 80080f2:	4b67      	ldr	r3, [pc, #412]	; (8008290 <predefinedActivityTouchAction+0x1bc>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80080f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	230a      	movs	r3, #10
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2328      	movs	r3, #40	; 0x28
 8008104:	2278      	movs	r2, #120	; 0x78
 8008106:	213c      	movs	r1, #60	; 0x3c
 8008108:	2064      	movs	r0, #100	; 0x64
 800810a:	f7f9 faa0 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 800810e:	4961      	ldr	r1, [pc, #388]	; (8008294 <predefinedActivityTouchAction+0x1c0>)
 8008110:	4861      	ldr	r0, [pc, #388]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008112:	f009 fbdd 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008116:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	2300      	movs	r3, #0
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2300      	movs	r3, #0
 8008122:	223e      	movs	r2, #62	; 0x3e
 8008124:	2177      	movs	r1, #119	; 0x77
 8008126:	485c      	ldr	r0, [pc, #368]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008128:	f7f9 fcfc 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 800812c:	495b      	ldr	r1, [pc, #364]	; (800829c <predefinedActivityTouchAction+0x1c8>)
 800812e:	485a      	ldr	r0, [pc, #360]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008130:	f009 fbce 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	2300      	movs	r3, #0
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	2250      	movs	r2, #80	; 0x50
 8008142:	2193      	movs	r1, #147	; 0x93
 8008144:	4854      	ldr	r0, [pc, #336]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008146:	f7f9 fced 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 800814a:	2000      	movs	r0, #0
 800814c:	f7fc fe18 	bl	8004d80 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008150:	e099      	b.n	8008286 <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008152:	4b4f      	ldr	r3, [pc, #316]	; (8008290 <predefinedActivityTouchAction+0x1bc>)
 8008154:	2201      	movs	r2, #1
 8008156:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008158:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	230a      	movs	r3, #10
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2328      	movs	r3, #40	; 0x28
 8008164:	2278      	movs	r2, #120	; 0x78
 8008166:	213c      	movs	r1, #60	; 0x3c
 8008168:	2064      	movs	r0, #100	; 0x64
 800816a:	f7f9 fa70 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 800816e:	4949      	ldr	r1, [pc, #292]	; (8008294 <predefinedActivityTouchAction+0x1c0>)
 8008170:	4849      	ldr	r0, [pc, #292]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008172:	f009 fbad 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008176:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	2300      	movs	r3, #0
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2300      	movs	r3, #0
 8008182:	223e      	movs	r2, #62	; 0x3e
 8008184:	2177      	movs	r1, #119	; 0x77
 8008186:	4844      	ldr	r0, [pc, #272]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008188:	f7f9 fccc 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 800818c:	4944      	ldr	r1, [pc, #272]	; (80082a0 <predefinedActivityTouchAction+0x1cc>)
 800818e:	4842      	ldr	r0, [pc, #264]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008190:	f009 fb9e 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008194:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2300      	movs	r3, #0
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	2250      	movs	r2, #80	; 0x50
 80081a2:	2193      	movs	r1, #147	; 0x93
 80081a4:	483c      	ldr	r0, [pc, #240]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 80081a6:	f7f9 fcbd 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(1);
 80081aa:	2001      	movs	r0, #1
 80081ac:	f7fc fde8 	bl	8004d80 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80081b0:	e069      	b.n	8008286 <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	2b77      	cmp	r3, #119	; 0x77
 80081b6:	d966      	bls.n	8008286 <predefinedActivityTouchAction+0x1b2>
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	2ba0      	cmp	r3, #160	; 0xa0
 80081bc:	d863      	bhi.n	8008286 <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 80081be:	4b34      	ldr	r3, [pc, #208]	; (8008290 <predefinedActivityTouchAction+0x1bc>)
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d02f      	beq.n	8008226 <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 80081c6:	4b32      	ldr	r3, [pc, #200]	; (8008290 <predefinedActivityTouchAction+0x1bc>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80081cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	230a      	movs	r3, #10
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2328      	movs	r3, #40	; 0x28
 80081d8:	2278      	movs	r2, #120	; 0x78
 80081da:	2178      	movs	r1, #120	; 0x78
 80081dc:	2064      	movs	r0, #100	; 0x64
 80081de:	f7f9 fa36 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80081e2:	4930      	ldr	r1, [pc, #192]	; (80082a4 <predefinedActivityTouchAction+0x1d0>)
 80081e4:	482c      	ldr	r0, [pc, #176]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 80081e6:	f009 fb73 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	227a      	movs	r2, #122	; 0x7a
 80081f8:	2169      	movs	r1, #105	; 0x69
 80081fa:	4827      	ldr	r0, [pc, #156]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 80081fc:	f7f9 fc92 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008200:	4926      	ldr	r1, [pc, #152]	; (800829c <predefinedActivityTouchAction+0x1c8>)
 8008202:	4825      	ldr	r0, [pc, #148]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008204:	f009 fb64 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008208:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	2300      	movs	r3, #0
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	228c      	movs	r2, #140	; 0x8c
 8008216:	2193      	movs	r1, #147	; 0x93
 8008218:	481f      	ldr	r0, [pc, #124]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 800821a:	f7f9 fc83 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 800821e:	2000      	movs	r0, #0
 8008220:	f7fc fd94 	bl	8004d4c <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008224:	e02f      	b.n	8008286 <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <predefinedActivityTouchAction+0x1bc>)
 8008228:	2201      	movs	r2, #1
 800822a:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800822c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	230a      	movs	r3, #10
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	2328      	movs	r3, #40	; 0x28
 8008238:	2278      	movs	r2, #120	; 0x78
 800823a:	2178      	movs	r1, #120	; 0x78
 800823c:	2064      	movs	r0, #100	; 0x64
 800823e:	f7f9 fa06 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008242:	4918      	ldr	r1, [pc, #96]	; (80082a4 <predefinedActivityTouchAction+0x1d0>)
 8008244:	4814      	ldr	r0, [pc, #80]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008246:	f009 fb43 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800824a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	2300      	movs	r3, #0
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	227a      	movs	r2, #122	; 0x7a
 8008258:	2169      	movs	r1, #105	; 0x69
 800825a:	480f      	ldr	r0, [pc, #60]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 800825c:	f7f9 fc62 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008260:	490f      	ldr	r1, [pc, #60]	; (80082a0 <predefinedActivityTouchAction+0x1cc>)
 8008262:	480d      	ldr	r0, [pc, #52]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 8008264:	f009 fb34 	bl	80118d0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008268:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	2300      	movs	r3, #0
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	2300      	movs	r3, #0
 8008274:	228c      	movs	r2, #140	; 0x8c
 8008276:	2193      	movs	r1, #147	; 0x93
 8008278:	4807      	ldr	r0, [pc, #28]	; (8008298 <predefinedActivityTouchAction+0x1c4>)
 800827a:	f7f9 fc53 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 800827e:	2001      	movs	r0, #1
 8008280:	f7fc fd64 	bl	8004d4c <predefinedActivityCzyszczenie>
}
 8008284:	e7ff      	b.n	8008286 <predefinedActivityTouchAction+0x1b2>
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200002b0 	.word	0x200002b0
 8008294:	08015a9c 	.word	0x08015a9c
 8008298:	200002fc 	.word	0x200002fc
 800829c:	08015a94 	.word	0x08015a94
 80082a0:	08015a98 	.word	0x08015a98
 80082a4:	08015aa8 	.word	0x08015aa8

080082a8 <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	4603      	mov	r3, r0
 80082b0:	460a      	mov	r2, r1
 80082b2:	71fb      	strb	r3, [r7, #7]
 80082b4:	4613      	mov	r3, r2
 80082b6:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2bd8      	cmp	r3, #216	; 0xd8
 80082bc:	d92f      	bls.n	800831e <increaseNumberOfWSLedOnTFT+0x76>
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2bf7      	cmp	r3, #247	; 0xf7
 80082c2:	d82c      	bhi.n	800831e <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 80082c4:	4b38      	ldr	r3, [pc, #224]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b61      	cmp	r3, #97	; 0x61
 80082ca:	d806      	bhi.n	80082da <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 80082cc:	4b36      	ldr	r3, [pc, #216]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	4b34      	ldr	r3, [pc, #208]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	e002      	b.n	80082e0 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 80082da:	4b33      	ldr	r3, [pc, #204]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082dc:	2201      	movs	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80082e0:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	d807      	bhi.n	80082f8 <increaseNumberOfWSLedOnTFT+0x50>
 80082e8:	4b2f      	ldr	r3, [pc, #188]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	492f      	ldr	r1, [pc, #188]	; (80083ac <increaseNumberOfWSLedOnTFT+0x104>)
 80082f0:	482f      	ldr	r0, [pc, #188]	; (80083b0 <increaseNumberOfWSLedOnTFT+0x108>)
 80082f2:	f009 faed 	bl	80118d0 <siprintf>
 80082f6:	e006      	b.n	8008306 <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 80082f8:	4b2b      	ldr	r3, [pc, #172]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	492d      	ldr	r1, [pc, #180]	; (80083b4 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008300:	482b      	ldr	r0, [pc, #172]	; (80083b0 <increaseNumberOfWSLedOnTFT+0x108>)
 8008302:	f009 fae5 	bl	80118d0 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008306:	f24c 6318 	movw	r3, #50712	; 0xc618
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	2301      	movs	r3, #1
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	2300      	movs	r3, #0
 8008312:	223c      	movs	r2, #60	; 0x3c
 8008314:	21ac      	movs	r1, #172	; 0xac
 8008316:	4826      	ldr	r0, [pc, #152]	; (80083b0 <increaseNumberOfWSLedOnTFT+0x108>)
 8008318:	f7f9 fc04 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 800831c:	e03f      	b.n	800839e <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	2bfb      	cmp	r3, #251	; 0xfb
 8008322:	d93c      	bls.n	800839e <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 8008324:	4b20      	ldr	r3, [pc, #128]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b59      	cmp	r3, #89	; 0x59
 800832a:	d806      	bhi.n	800833a <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 800832c:	4b1e      	ldr	r3, [pc, #120]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	330a      	adds	r3, #10
 8008332:	b2da      	uxtb	r2, r3
 8008334:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e013      	b.n	8008362 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 800833a:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f103 020a 	add.w	r2, r3, #10
 8008342:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <increaseNumberOfWSLedOnTFT+0x110>)
 8008344:	fb83 1302 	smull	r1, r3, r3, r2
 8008348:	4413      	add	r3, r2
 800834a:	1199      	asrs	r1, r3, #6
 800834c:	17d3      	asrs	r3, r2, #31
 800834e:	1ac9      	subs	r1, r1, r3
 8008350:	460b      	mov	r3, r1
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	440b      	add	r3, r1
 8008356:	0159      	lsls	r1, r3, #5
 8008358:	440b      	add	r3, r1
 800835a:	1ad1      	subs	r1, r2, r3
 800835c:	b2ca      	uxtb	r2, r1
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 8008360:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008362:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b09      	cmp	r3, #9
 8008368:	d807      	bhi.n	800837a <increaseNumberOfWSLedOnTFT+0xd2>
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	490e      	ldr	r1, [pc, #56]	; (80083ac <increaseNumberOfWSLedOnTFT+0x104>)
 8008372:	480f      	ldr	r0, [pc, #60]	; (80083b0 <increaseNumberOfWSLedOnTFT+0x108>)
 8008374:	f009 faac 	bl	80118d0 <siprintf>
 8008378:	e006      	b.n	8008388 <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <increaseNumberOfWSLedOnTFT+0x100>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	490c      	ldr	r1, [pc, #48]	; (80083b4 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008382:	480b      	ldr	r0, [pc, #44]	; (80083b0 <increaseNumberOfWSLedOnTFT+0x108>)
 8008384:	f009 faa4 	bl	80118d0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008388:	f24c 6318 	movw	r3, #50712	; 0xc618
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	2301      	movs	r3, #1
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	223c      	movs	r2, #60	; 0x3c
 8008396:	21ac      	movs	r1, #172	; 0xac
 8008398:	4805      	ldr	r0, [pc, #20]	; (80083b0 <increaseNumberOfWSLedOnTFT+0x108>)
 800839a:	f7f9 fbc3 	bl	8001b24 <EF_PutString>
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000033 	.word	0x20000033
 80083ac:	08015ab4 	.word	0x08015ab4
 80083b0:	200002fc 	.word	0x200002fc
 80083b4:	08015abc 	.word	0x08015abc
 80083b8:	a57eb503 	.word	0xa57eb503

080083bc <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	460a      	mov	r2, r1
 80083c6:	71fb      	strb	r3, [r7, #7]
 80083c8:	4613      	mov	r3, r2
 80083ca:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 80083cc:	79bb      	ldrb	r3, [r7, #6]
 80083ce:	2b5e      	cmp	r3, #94	; 0x5e
 80083d0:	d91e      	bls.n	8008410 <changeTypeOfWSLights+0x54>
 80083d2:	79bb      	ldrb	r3, [r7, #6]
 80083d4:	2b74      	cmp	r3, #116	; 0x74
 80083d6:	d81b      	bhi.n	8008410 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	2b95      	cmp	r3, #149	; 0x95
 80083dc:	d906      	bls.n	80083ec <changeTypeOfWSLights+0x30>
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2bbe      	cmp	r3, #190	; 0xbe
 80083e2:	d803      	bhi.n	80083ec <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 80083e4:	201d      	movs	r0, #29
 80083e6:	f000 fb57 	bl	8008a98 <SendComand>
 80083ea:	e010      	b.n	800840e <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	2bc9      	cmp	r3, #201	; 0xc9
 80083f0:	d906      	bls.n	8008400 <changeTypeOfWSLights+0x44>
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	2bf2      	cmp	r3, #242	; 0xf2
 80083f6:	d803      	bhi.n	8008400 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 80083f8:	201e      	movs	r0, #30
 80083fa:	f000 fb4d 	bl	8008a98 <SendComand>
 80083fe:	e006      	b.n	800840e <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2bfd      	cmp	r3, #253	; 0xfd
 8008404:	d962      	bls.n	80084cc <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 8008406:	201f      	movs	r0, #31
 8008408:	f000 fb46 	bl	8008a98 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800840c:	e05e      	b.n	80084cc <changeTypeOfWSLights+0x110>
 800840e:	e05d      	b.n	80084cc <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008410:	79bb      	ldrb	r3, [r7, #6]
 8008412:	2b7c      	cmp	r3, #124	; 0x7c
 8008414:	d91e      	bls.n	8008454 <changeTypeOfWSLights+0x98>
 8008416:	79bb      	ldrb	r3, [r7, #6]
 8008418:	2b92      	cmp	r3, #146	; 0x92
 800841a:	d81b      	bhi.n	8008454 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	2b95      	cmp	r3, #149	; 0x95
 8008420:	d906      	bls.n	8008430 <changeTypeOfWSLights+0x74>
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	2bbe      	cmp	r3, #190	; 0xbe
 8008426:	d803      	bhi.n	8008430 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 8008428:	2020      	movs	r0, #32
 800842a:	f000 fb35 	bl	8008a98 <SendComand>
 800842e:	e010      	b.n	8008452 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2bc9      	cmp	r3, #201	; 0xc9
 8008434:	d906      	bls.n	8008444 <changeTypeOfWSLights+0x88>
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2bf2      	cmp	r3, #242	; 0xf2
 800843a:	d803      	bhi.n	8008444 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 800843c:	2021      	movs	r0, #33	; 0x21
 800843e:	f000 fb2b 	bl	8008a98 <SendComand>
 8008442:	e006      	b.n	8008452 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2bfd      	cmp	r3, #253	; 0xfd
 8008448:	d942      	bls.n	80084d0 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 800844a:	2022      	movs	r0, #34	; 0x22
 800844c:	f000 fb24 	bl	8008a98 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008450:	e03e      	b.n	80084d0 <changeTypeOfWSLights+0x114>
 8008452:	e03d      	b.n	80084d0 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008454:	79bb      	ldrb	r3, [r7, #6]
 8008456:	2b9b      	cmp	r3, #155	; 0x9b
 8008458:	d91e      	bls.n	8008498 <changeTypeOfWSLights+0xdc>
 800845a:	79bb      	ldrb	r3, [r7, #6]
 800845c:	2bb1      	cmp	r3, #177	; 0xb1
 800845e:	d81b      	bhi.n	8008498 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b13      	cmp	r3, #19
 8008464:	d906      	bls.n	8008474 <changeTypeOfWSLights+0xb8>
 8008466:	79fb      	ldrb	r3, [r7, #7]
 8008468:	2b64      	cmp	r3, #100	; 0x64
 800846a:	d803      	bhi.n	8008474 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 800846c:	2023      	movs	r0, #35	; 0x23
 800846e:	f000 fb13 	bl	8008a98 <SendComand>
 8008472:	e010      	b.n	8008496 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b77      	cmp	r3, #119	; 0x77
 8008478:	d906      	bls.n	8008488 <changeTypeOfWSLights+0xcc>
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	2bc8      	cmp	r3, #200	; 0xc8
 800847e:	d803      	bhi.n	8008488 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008480:	201c      	movs	r0, #28
 8008482:	f000 fb09 	bl	8008a98 <SendComand>
 8008486:	e006      	b.n	8008496 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	2bdb      	cmp	r3, #219	; 0xdb
 800848c:	d922      	bls.n	80084d4 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 800848e:	2024      	movs	r0, #36	; 0x24
 8008490:	f000 fb02 	bl	8008a98 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008494:	e01e      	b.n	80084d4 <changeTypeOfWSLights+0x118>
 8008496:	e01d      	b.n	80084d4 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008498:	79bb      	ldrb	r3, [r7, #6]
 800849a:	2bba      	cmp	r3, #186	; 0xba
 800849c:	d91b      	bls.n	80084d6 <changeTypeOfWSLights+0x11a>
 800849e:	79bb      	ldrb	r3, [r7, #6]
 80084a0:	2bd0      	cmp	r3, #208	; 0xd0
 80084a2:	d818      	bhi.n	80084d6 <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	2b45      	cmp	r3, #69	; 0x45
 80084a8:	d906      	bls.n	80084b8 <changeTypeOfWSLights+0xfc>
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	2b96      	cmp	r3, #150	; 0x96
 80084ae:	d803      	bhi.n	80084b8 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 80084b0:	2026      	movs	r0, #38	; 0x26
 80084b2:	f000 faf1 	bl	8008a98 <SendComand>
 80084b6:	e00e      	b.n	80084d6 <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	2ba9      	cmp	r3, #169	; 0xa9
 80084bc:	d90b      	bls.n	80084d6 <changeTypeOfWSLights+0x11a>
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	2bfa      	cmp	r3, #250	; 0xfa
 80084c2:	d808      	bhi.n	80084d6 <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 80084c4:	2027      	movs	r0, #39	; 0x27
 80084c6:	f000 fae7 	bl	8008a98 <SendComand>
		}
	}
}
 80084ca:	e004      	b.n	80084d6 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80084cc:	bf00      	nop
 80084ce:	e002      	b.n	80084d6 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80084d4:	bf00      	nop
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b094      	sub	sp, #80	; 0x50
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80084e8:	f107 0308 	add.w	r3, r7, #8
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 f9c9 	bl	8009886 <UARTDMA_GetLineFromReceiveBuffer>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d15f      	bne.n	80085ba <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80084fa:	f107 0308 	add.w	r3, r7, #8
 80084fe:	4931      	ldr	r1, [pc, #196]	; (80085c4 <UART_ParseLine+0xe4>)
 8008500:	4618      	mov	r0, r3
 8008502:	f00a f83d 	bl	8012580 <strtok>
 8008506:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8008508:	492f      	ldr	r1, [pc, #188]	; (80085c8 <UART_ParseLine+0xe8>)
 800850a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800850c:	f7f7 fe68 	bl	80001e0 <strcmp>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8008516:	f000 f869 	bl	80085ec <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 800851a:	e04e      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 800851c:	492b      	ldr	r1, [pc, #172]	; (80085cc <UART_ParseLine+0xec>)
 800851e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008520:	f7f7 fe5e 	bl	80001e0 <strcmp>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 800852a:	f000 f8ad 	bl	8008688 <UART_ParseAnswStatus>
}
 800852e:	e044      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8008530:	4927      	ldr	r1, [pc, #156]	; (80085d0 <UART_ParseLine+0xf0>)
 8008532:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008534:	f7f7 fe54 	bl	80001e0 <strcmp>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d102      	bne.n	8008544 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 800853e:	f000 f8ab 	bl	8008698 <UART_ParseAnswTemp>
}
 8008542:	e03a      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8008544:	4923      	ldr	r1, [pc, #140]	; (80085d4 <UART_ParseLine+0xf4>)
 8008546:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008548:	f7f7 fe4a 	bl	80001e0 <strcmp>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8008552:	f000 f945 	bl	80087e0 <UART_ParseAnswPres>
}
 8008556:	e030      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8008558:	491f      	ldr	r1, [pc, #124]	; (80085d8 <UART_ParseLine+0xf8>)
 800855a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800855c:	f7f7 fe40 	bl	80001e0 <strcmp>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d102      	bne.n	800856c <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8008566:	f000 f9bd 	bl	80088e4 <UART_ParseAnswChangeRelayState>
}
 800856a:	e026      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 800856c:	491b      	ldr	r1, [pc, #108]	; (80085dc <UART_ParseLine+0xfc>)
 800856e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008570:	f7f7 fe36 	bl	80001e0 <strcmp>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 800857a:	f000 f9ba 	bl	80088f2 <UART_ParseAnswChangeLightState>
}
 800857e:	e01c      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008580:	4917      	ldr	r1, [pc, #92]	; (80085e0 <UART_ParseLine+0x100>)
 8008582:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008584:	f7f7 fe2c 	bl	80001e0 <strcmp>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 800858e:	f000 f9b7 	bl	8008900 <UART_ParseAnswRelayStateStatus>
}
 8008592:	e012      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008594:	4913      	ldr	r1, [pc, #76]	; (80085e4 <UART_ParseLine+0x104>)
 8008596:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008598:	f7f7 fe22 	bl	80001e0 <strcmp>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 80085a2:	f000 fa13 	bl	80089cc <UART_ParseAnswLightsStateStatus>
}
 80085a6:	e008      	b.n	80085ba <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 80085a8:	490f      	ldr	r1, [pc, #60]	; (80085e8 <UART_ParseLine+0x108>)
 80085aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80085ac:	f7f7 fe18 	bl	80001e0 <strcmp>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 80085b6:	f000 f959 	bl	800886c <UART_ParseAnswDist>
}
 80085ba:	bf00      	nop
 80085bc:	3750      	adds	r7, #80	; 0x50
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	08015ac0 	.word	0x08015ac0
 80085c8:	08015ac4 	.word	0x08015ac4
 80085cc:	08015ac8 	.word	0x08015ac8
 80085d0:	08015ad0 	.word	0x08015ad0
 80085d4:	08015ad8 	.word	0x08015ad8
 80085d8:	08015ae0 	.word	0x08015ae0
 80085dc:	08015aec 	.word	0x08015aec
 80085e0:	08015af8 	.word	0x08015af8
 80085e4:	08015b04 	.word	0x08015b04
 80085e8:	08015b10 	.word	0x08015b10

080085ec <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80085f2:	491f      	ldr	r1, [pc, #124]	; (8008670 <UART_ParseLED+0x84>)
 80085f4:	2000      	movs	r0, #0
 80085f6:	f009 ffc3 	bl	8012580 <strtok>
 80085fa:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d031      	beq.n	8008668 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b2f      	cmp	r3, #47	; 0x2f
 800860a:	d903      	bls.n	8008614 <UART_ParseLED+0x28>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b39      	cmp	r3, #57	; 0x39
 8008612:	d904      	bls.n	800861e <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8008614:	4917      	ldr	r1, [pc, #92]	; (8008674 <UART_ParseLED+0x88>)
 8008616:	4818      	ldr	r0, [pc, #96]	; (8008678 <UART_ParseLED+0x8c>)
 8008618:	f001 f966 	bl	80098e8 <UARTDMA_Print>
			return;	// And exit parsing
 800861c:	e024      	b.n	8008668 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f008 fa9f 	bl	8010b62 <atoi>
 8008624:	4603      	mov	r3, r0
 8008626:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d10a      	bne.n	8008644 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008634:	4811      	ldr	r0, [pc, #68]	; (800867c <UART_ParseLED+0x90>)
 8008636:	f002 fbeb 	bl	800ae10 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 800863a:	4911      	ldr	r1, [pc, #68]	; (8008680 <UART_ParseLED+0x94>)
 800863c:	480e      	ldr	r0, [pc, #56]	; (8008678 <UART_ParseLED+0x8c>)
 800863e:	f001 f953 	bl	80098e8 <UARTDMA_Print>
 8008642:	e011      	b.n	8008668 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800864a:	2201      	movs	r2, #1
 800864c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008650:	480a      	ldr	r0, [pc, #40]	; (800867c <UART_ParseLED+0x90>)
 8008652:	f002 fbdd 	bl	800ae10 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8008656:	490b      	ldr	r1, [pc, #44]	; (8008684 <UART_ParseLED+0x98>)
 8008658:	4807      	ldr	r0, [pc, #28]	; (8008678 <UART_ParseLED+0x8c>)
 800865a:	f001 f945 	bl	80098e8 <UARTDMA_Print>
 800865e:	e003      	b.n	8008668 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008660:	4904      	ldr	r1, [pc, #16]	; (8008674 <UART_ParseLED+0x88>)
 8008662:	4805      	ldr	r0, [pc, #20]	; (8008678 <UART_ParseLED+0x8c>)
 8008664:	f001 f940 	bl	80098e8 <UARTDMA_Print>
		}
	}
}
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	08015b18 	.word	0x08015b18
 8008674:	08015b1c 	.word	0x08015b1c
 8008678:	200004a4 	.word	0x200004a4
 800867c:	40020800 	.word	0x40020800
 8008680:	08015b2c 	.word	0x08015b2c
 8008684:	08015b38 	.word	0x08015b38

08008688 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 800868c:	bf00      	nop
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 80086a2:	4947      	ldr	r1, [pc, #284]	; (80087c0 <UART_ParseAnswTemp+0x128>)
 80086a4:	2000      	movs	r0, #0
 80086a6:	f009 ff6b 	bl	8012580 <strtok>
 80086aa:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8081 	beq.w	80087b8 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 80086b6:	68b8      	ldr	r0, [r7, #8]
 80086b8:	f008 fa53 	bl	8010b62 <atoi>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80086c8:	493d      	ldr	r1, [pc, #244]	; (80087c0 <UART_ParseAnswTemp+0x128>)
 80086ca:	2000      	movs	r0, #0
 80086cc:	f009 ff58 	bl	8012580 <strtok>
 80086d0:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f008 fa42 	bl	8010b5c <atof>
 80086d8:	ec53 2b10 	vmov	r2, r3, d0
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	f7f8 fa9a 	bl	8000c18 <__aeabi_d2f>
 80086e4:	4603      	mov	r3, r0
 80086e6:	4a37      	ldr	r2, [pc, #220]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 80086e8:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 80086ea:	4b37      	ldr	r3, [pc, #220]	; (80087c8 <UART_ParseAnswTemp+0x130>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d162      	bne.n	80087b8 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d119      	bne.n	800872c <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80086f8:	4834      	ldr	r0, [pc, #208]	; (80087cc <UART_ParseAnswTemp+0x134>)
 80086fa:	f7f8 fff9 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80086fe:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7f7 ff38 	bl	8000578 <__aeabi_f2d>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4930      	ldr	r1, [pc, #192]	; (80087d0 <UART_ParseAnswTemp+0x138>)
 800870e:	4831      	ldr	r0, [pc, #196]	; (80087d4 <UART_ParseAnswTemp+0x13c>)
 8008710:	f009 f8de 	bl	80118d0 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008714:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	2301      	movs	r3, #1
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2300      	movs	r3, #0
 8008720:	2250      	movs	r2, #80	; 0x50
 8008722:	2114      	movs	r1, #20
 8008724:	482b      	ldr	r0, [pc, #172]	; (80087d4 <UART_ParseAnswTemp+0x13c>)
 8008726:	f7f9 f9fd 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 800872a:	e045      	b.n	80087b8 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d142      	bne.n	80087b8 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 8008734:	edd3 7a00 	vldr	s15, [r3]
 8008738:	eef5 7a40 	vcmp.f32	s15, #0.0
 800873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008740:	d11d      	bne.n	800877e <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8008742:	4b25      	ldr	r3, [pc, #148]	; (80087d8 <UART_ParseAnswTemp+0x140>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 8008748:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 800874a:	4820      	ldr	r0, [pc, #128]	; (80087cc <UART_ParseAnswTemp+0x134>)
 800874c:	f7f8 ffd0 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008750:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f7f7 ff0f 	bl	8000578 <__aeabi_f2d>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	491f      	ldr	r1, [pc, #124]	; (80087dc <UART_ParseAnswTemp+0x144>)
 8008760:	481c      	ldr	r0, [pc, #112]	; (80087d4 <UART_ParseAnswTemp+0x13c>)
 8008762:	f009 f8b5 	bl	80118d0 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008766:	f24c 6318 	movw	r3, #50712	; 0xc618
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	2301      	movs	r3, #1
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	226e      	movs	r2, #110	; 0x6e
 8008774:	2114      	movs	r1, #20
 8008776:	4817      	ldr	r0, [pc, #92]	; (80087d4 <UART_ParseAnswTemp+0x13c>)
 8008778:	f7f9 f9d4 	bl	8001b24 <EF_PutString>
	}
 800877c:	e01c      	b.n	80087b8 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 800877e:	4813      	ldr	r0, [pc, #76]	; (80087cc <UART_ParseAnswTemp+0x134>)
 8008780:	f7f8 ffb6 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f7f7 fef5 	bl	8000578 <__aeabi_f2d>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4912      	ldr	r1, [pc, #72]	; (80087dc <UART_ParseAnswTemp+0x144>)
 8008794:	480f      	ldr	r0, [pc, #60]	; (80087d4 <UART_ParseAnswTemp+0x13c>)
 8008796:	f009 f89b 	bl	80118d0 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800879a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	2301      	movs	r3, #1
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2300      	movs	r3, #0
 80087a6:	226e      	movs	r2, #110	; 0x6e
 80087a8:	2114      	movs	r1, #20
 80087aa:	480a      	ldr	r0, [pc, #40]	; (80087d4 <UART_ParseAnswTemp+0x13c>)
 80087ac:	f7f9 f9ba 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 80087b0:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <UART_ParseAnswTemp+0x12c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a08      	ldr	r2, [pc, #32]	; (80087d8 <UART_ParseAnswTemp+0x140>)
 80087b6:	6013      	str	r3, [r2, #0]
	}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	08015b18 	.word	0x08015b18
 80087c4:	20000294 	.word	0x20000294
 80087c8:	20000290 	.word	0x20000290
 80087cc:	08028f4c 	.word	0x08028f4c
 80087d0:	08015b44 	.word	0x08015b44
 80087d4:	200002fc 	.word	0x200002fc
 80087d8:	20000298 	.word	0x20000298
 80087dc:	08015b58 	.word	0x08015b58

080087e0 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80087e6:	491b      	ldr	r1, [pc, #108]	; (8008854 <UART_ParseAnswPres+0x74>)
 80087e8:	2000      	movs	r0, #0
 80087ea:	f009 fec9 	bl	8012580 <strtok>
 80087ee:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d028      	beq.n	800884a <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f008 f9af 	bl	8010b5c <atof>
 80087fe:	ec53 2b10 	vmov	r2, r3, d0
 8008802:	4610      	mov	r0, r2
 8008804:	4619      	mov	r1, r3
 8008806:	f7f8 fa07 	bl	8000c18 <__aeabi_d2f>
 800880a:	4603      	mov	r3, r0
 800880c:	4a12      	ldr	r2, [pc, #72]	; (8008858 <UART_ParseAnswPres+0x78>)
 800880e:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008810:	4b12      	ldr	r3, [pc, #72]	; (800885c <UART_ParseAnswPres+0x7c>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d118      	bne.n	800884a <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008818:	4811      	ldr	r0, [pc, #68]	; (8008860 <UART_ParseAnswPres+0x80>)
 800881a:	f7f8 ff69 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800881e:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <UART_ParseAnswPres+0x78>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f7f7 fea8 	bl	8000578 <__aeabi_f2d>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	490d      	ldr	r1, [pc, #52]	; (8008864 <UART_ParseAnswPres+0x84>)
 800882e:	480e      	ldr	r0, [pc, #56]	; (8008868 <UART_ParseAnswPres+0x88>)
 8008830:	f009 f84e 	bl	80118d0 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008834:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	2301      	movs	r3, #1
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2300      	movs	r3, #0
 8008840:	22aa      	movs	r2, #170	; 0xaa
 8008842:	2114      	movs	r1, #20
 8008844:	4808      	ldr	r0, [pc, #32]	; (8008868 <UART_ParseAnswPres+0x88>)
 8008846:	f7f9 f96d 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	08015b18 	.word	0x08015b18
 8008858:	2000029c 	.word	0x2000029c
 800885c:	20000290 	.word	0x20000290
 8008860:	08028f4c 	.word	0x08028f4c
 8008864:	08015b6c 	.word	0x08015b6c
 8008868:	200002fc 	.word	0x200002fc

0800886c <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008872:	4916      	ldr	r1, [pc, #88]	; (80088cc <UART_ParseAnswDist+0x60>)
 8008874:	2000      	movs	r0, #0
 8008876:	f009 fe83 	bl	8012580 <strtok>
 800887a:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01f      	beq.n	80088c4 <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f008 f96c 	bl	8010b62 <atoi>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <UART_ParseAnswDist+0x64>)
 8008890:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008892:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <UART_ParseAnswDist+0x68>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d114      	bne.n	80088c4 <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800889a:	480f      	ldr	r0, [pc, #60]	; (80088d8 <UART_ParseAnswDist+0x6c>)
 800889c:	f7f8 ff28 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <UART_ParseAnswDist+0x64>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	490d      	ldr	r1, [pc, #52]	; (80088dc <UART_ParseAnswDist+0x70>)
 80088a8:	480d      	ldr	r0, [pc, #52]	; (80088e0 <UART_ParseAnswDist+0x74>)
 80088aa:	f009 f811 	bl	80118d0 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80088ae:	f24c 6318 	movw	r3, #50712	; 0xc618
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	2301      	movs	r3, #1
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2300      	movs	r3, #0
 80088ba:	228c      	movs	r2, #140	; 0x8c
 80088bc:	21ad      	movs	r1, #173	; 0xad
 80088be:	4808      	ldr	r0, [pc, #32]	; (80088e0 <UART_ParseAnswDist+0x74>)
 80088c0:	f7f9 f930 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08015b18 	.word	0x08015b18
 80088d0:	200002a4 	.word	0x200002a4
 80088d4:	20000290 	.word	0x20000290
 80088d8:	08028f4c 	.word	0x08028f4c
 80088dc:	08015b84 	.word	0x08015b84
 80088e0:	200002fc 	.word	0x200002fc

080088e4 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
	//TODO!
}
 80088e8:	bf00      	nop
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0
	//TODO!
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008906:	2300      	movs	r3, #0
 8008908:	71fb      	strb	r3, [r7, #7]
 800890a:	e04a      	b.n	80089a2 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800890c:	4928      	ldr	r1, [pc, #160]	; (80089b0 <UART_ParseAnswRelayStateStatus+0xb0>)
 800890e:	2000      	movs	r0, #0
 8008910:	f009 fe36 	bl	8012580 <strtok>
 8008914:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d02f      	beq.n	800897e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800891e:	2300      	movs	r3, #0
 8008920:	71bb      	strb	r3, [r7, #6]
 8008922:	e025      	b.n	8008970 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008924:	79bb      	ldrb	r3, [r7, #6]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	4413      	add	r3, r2
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b2f      	cmp	r3, #47	; 0x2f
 800892e:	d905      	bls.n	800893c <UART_ParseAnswRelayStateStatus+0x3c>
 8008930:	79bb      	ldrb	r3, [r7, #6]
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	4413      	add	r3, r2
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b39      	cmp	r3, #57	; 0x39
 800893a:	d90e      	bls.n	800895a <UART_ParseAnswRelayStateStatus+0x5a>
 800893c:	79bb      	ldrb	r3, [r7, #6]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	4413      	add	r3, r2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b2e      	cmp	r3, #46	; 0x2e
 8008946:	d008      	beq.n	800895a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008948:	491a      	ldr	r1, [pc, #104]	; (80089b4 <UART_ParseAnswRelayStateStatus+0xb4>)
 800894a:	481b      	ldr	r0, [pc, #108]	; (80089b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800894c:	f008 ffc0 	bl	80118d0 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008950:	4919      	ldr	r1, [pc, #100]	; (80089b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008952:	481a      	ldr	r0, [pc, #104]	; (80089bc <UART_ParseAnswRelayStateStatus+0xbc>)
 8008954:	f000 ffc8 	bl	80098e8 <UARTDMA_Print>
					return;	// And exit parsing
 8008958:	e026      	b.n	80089a8 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800895a:	6838      	ldr	r0, [r7, #0]
 800895c:	f008 f901 	bl	8010b62 <atoi>
 8008960:	4602      	mov	r2, r0
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	b2d1      	uxtb	r1, r2
 8008966:	4a16      	ldr	r2, [pc, #88]	; (80089c0 <UART_ParseAnswRelayStateStatus+0xc0>)
 8008968:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800896a:	79bb      	ldrb	r3, [r7, #6]
 800896c:	3301      	adds	r3, #1
 800896e:	71bb      	strb	r3, [r7, #6]
 8008970:	79bb      	ldrb	r3, [r7, #6]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4413      	add	r3, r2
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1d3      	bne.n	8008924 <UART_ParseAnswRelayStateStatus+0x24>
 800897c:	e008      	b.n	8008990 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800897e:	4911      	ldr	r1, [pc, #68]	; (80089c4 <UART_ParseAnswRelayStateStatus+0xc4>)
 8008980:	480d      	ldr	r0, [pc, #52]	; (80089b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008982:	f008 ffa5 	bl	80118d0 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008986:	490c      	ldr	r1, [pc, #48]	; (80089b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008988:	480c      	ldr	r0, [pc, #48]	; (80089bc <UART_ParseAnswRelayStateStatus+0xbc>)
 800898a:	f000 ffad 	bl	80098e8 <UARTDMA_Print>
			return;	// And exit parsing
 800898e:	e00b      	b.n	80089a8 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008990:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <UART_ParseAnswRelayStateStatus+0xc8>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d101      	bne.n	800899c <UART_ParseAnswRelayStateStatus+0x9c>
 8008998:	f7fc fa40 	bl	8004e1c <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	3301      	adds	r3, #1
 80089a0:	71fb      	strb	r3, [r7, #7]
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d9b1      	bls.n	800890c <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	08015b18 	.word	0x08015b18
 80089b4:	08015b90 	.word	0x08015b90
 80089b8:	20000840 	.word	0x20000840
 80089bc:	200004a4 	.word	0x200004a4
 80089c0:	200002a8 	.word	0x200002a8
 80089c4:	08015ba4 	.word	0x08015ba4
 80089c8:	20000290 	.word	0x20000290

080089cc <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80089d2:	2300      	movs	r3, #0
 80089d4:	71fb      	strb	r3, [r7, #7]
 80089d6:	e04a      	b.n	8008a6e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80089d8:	4928      	ldr	r1, [pc, #160]	; (8008a7c <UART_ParseAnswLightsStateStatus+0xb0>)
 80089da:	2000      	movs	r0, #0
 80089dc:	f009 fdd0 	bl	8012580 <strtok>
 80089e0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d02f      	beq.n	8008a4a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80089ea:	2300      	movs	r3, #0
 80089ec:	71bb      	strb	r3, [r7, #6]
 80089ee:	e025      	b.n	8008a3c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80089f0:	79bb      	ldrb	r3, [r7, #6]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b2f      	cmp	r3, #47	; 0x2f
 80089fa:	d905      	bls.n	8008a08 <UART_ParseAnswLightsStateStatus+0x3c>
 80089fc:	79bb      	ldrb	r3, [r7, #6]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4413      	add	r3, r2
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b39      	cmp	r3, #57	; 0x39
 8008a06:	d90e      	bls.n	8008a26 <UART_ParseAnswLightsStateStatus+0x5a>
 8008a08:	79bb      	ldrb	r3, [r7, #6]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b2e      	cmp	r3, #46	; 0x2e
 8008a12:	d008      	beq.n	8008a26 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008a14:	491a      	ldr	r1, [pc, #104]	; (8008a80 <UART_ParseAnswLightsStateStatus+0xb4>)
 8008a16:	481b      	ldr	r0, [pc, #108]	; (8008a84 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008a18:	f008 ff5a 	bl	80118d0 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008a1c:	4919      	ldr	r1, [pc, #100]	; (8008a84 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008a1e:	481a      	ldr	r0, [pc, #104]	; (8008a88 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008a20:	f000 ff62 	bl	80098e8 <UARTDMA_Print>
					return;	// And exit parsing
 8008a24:	e026      	b.n	8008a74 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008a26:	6838      	ldr	r0, [r7, #0]
 8008a28:	f008 f89b 	bl	8010b62 <atoi>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	b2d1      	uxtb	r1, r2
 8008a32:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <UART_ParseAnswLightsStateStatus+0xc0>)
 8008a34:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008a36:	79bb      	ldrb	r3, [r7, #6]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	71bb      	strb	r3, [r7, #6]
 8008a3c:	79bb      	ldrb	r3, [r7, #6]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1d3      	bne.n	80089f0 <UART_ParseAnswLightsStateStatus+0x24>
 8008a48:	e008      	b.n	8008a5c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008a4a:	4911      	ldr	r1, [pc, #68]	; (8008a90 <UART_ParseAnswLightsStateStatus+0xc4>)
 8008a4c:	480d      	ldr	r0, [pc, #52]	; (8008a84 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008a4e:	f008 ff3f 	bl	80118d0 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008a52:	490c      	ldr	r1, [pc, #48]	; (8008a84 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008a54:	480c      	ldr	r0, [pc, #48]	; (8008a88 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008a56:	f000 ff47 	bl	80098e8 <UARTDMA_Print>
			return;	// And exit parsing
 8008a5a:	e00b      	b.n	8008a74 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <UART_ParseAnswLightsStateStatus+0xc8>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b05      	cmp	r3, #5
 8008a62:	d101      	bne.n	8008a68 <UART_ParseAnswLightsStateStatus+0x9c>
 8008a64:	f7fc fae2 	bl	800502c <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	71fb      	strb	r3, [r7, #7]
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d9b1      	bls.n	80089d8 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08015b18 	.word	0x08015b18
 8008a80:	08015b90 	.word	0x08015b90
 8008a84:	20000840 	.word	0x20000840
 8008a88:	200004a4 	.word	0x200004a4
 8008a8c:	200002ac 	.word	0x200002ac
 8008a90:	08015ba4 	.word	0x08015ba4
 8008a94:	20000290 	.word	0x20000290

08008a98 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	2b27      	cmp	r3, #39	; 0x27
 8008aaa:	f200 8129 	bhi.w	8008d00 <SendComand+0x268>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <SendComand+0x1c>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008b55 	.word	0x08008b55
 8008ab8:	08008b5f 	.word	0x08008b5f
 8008abc:	08008b69 	.word	0x08008b69
 8008ac0:	08008b73 	.word	0x08008b73
 8008ac4:	08008b87 	.word	0x08008b87
 8008ac8:	08008b91 	.word	0x08008b91
 8008acc:	08008b9b 	.word	0x08008b9b
 8008ad0:	08008ba5 	.word	0x08008ba5
 8008ad4:	08008baf 	.word	0x08008baf
 8008ad8:	08008bb9 	.word	0x08008bb9
 8008adc:	08008bc3 	.word	0x08008bc3
 8008ae0:	08008bcd 	.word	0x08008bcd
 8008ae4:	08008bd7 	.word	0x08008bd7
 8008ae8:	08008bff 	.word	0x08008bff
 8008aec:	08008c09 	.word	0x08008c09
 8008af0:	08008c13 	.word	0x08008c13
 8008af4:	08008c1d 	.word	0x08008c1d
 8008af8:	08008c27 	.word	0x08008c27
 8008afc:	08008c31 	.word	0x08008c31
 8008b00:	08008c3b 	.word	0x08008c3b
 8008b04:	08008c45 	.word	0x08008c45
 8008b08:	08008bf5 	.word	0x08008bf5
 8008b0c:	08008c63 	.word	0x08008c63
 8008b10:	08008be1 	.word	0x08008be1
 8008b14:	08008beb 	.word	0x08008beb
 8008b18:	08008c4f 	.word	0x08008c4f
 8008b1c:	08008c59 	.word	0x08008c59
 8008b20:	08008b7d 	.word	0x08008b7d
 8008b24:	08008c6d 	.word	0x08008c6d
 8008b28:	08008c77 	.word	0x08008c77
 8008b2c:	08008c81 	.word	0x08008c81
 8008b30:	08008c8b 	.word	0x08008c8b
 8008b34:	08008c95 	.word	0x08008c95
 8008b38:	08008c9f 	.word	0x08008c9f
 8008b3c:	08008ca9 	.word	0x08008ca9
 8008b40:	08008cb3 	.word	0x08008cb3
 8008b44:	08008cbd 	.word	0x08008cbd
 8008b48:	08008cc7 	.word	0x08008cc7
 8008b4c:	08008ced 	.word	0x08008ced
 8008b50:	08008cf7 	.word	0x08008cf7
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008b54:	496d      	ldr	r1, [pc, #436]	; (8008d0c <SendComand+0x274>)
 8008b56:	486e      	ldr	r0, [pc, #440]	; (8008d10 <SendComand+0x278>)
 8008b58:	f000 fec6 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b5c:	e0d0      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008b5e:	496d      	ldr	r1, [pc, #436]	; (8008d14 <SendComand+0x27c>)
 8008b60:	486b      	ldr	r0, [pc, #428]	; (8008d10 <SendComand+0x278>)
 8008b62:	f000 fec1 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b66:	e0cb      	b.n	8008d00 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008b68:	496b      	ldr	r1, [pc, #428]	; (8008d18 <SendComand+0x280>)
 8008b6a:	4869      	ldr	r0, [pc, #420]	; (8008d10 <SendComand+0x278>)
 8008b6c:	f000 febc 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b70:	e0c6      	b.n	8008d00 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008b72:	496a      	ldr	r1, [pc, #424]	; (8008d1c <SendComand+0x284>)
 8008b74:	4866      	ldr	r0, [pc, #408]	; (8008d10 <SendComand+0x278>)
 8008b76:	f000 feb7 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b7a:	e0c1      	b.n	8008d00 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008b7c:	4968      	ldr	r1, [pc, #416]	; (8008d20 <SendComand+0x288>)
 8008b7e:	4864      	ldr	r0, [pc, #400]	; (8008d10 <SendComand+0x278>)
 8008b80:	f000 feb2 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b84:	e0bc      	b.n	8008d00 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008b86:	4967      	ldr	r1, [pc, #412]	; (8008d24 <SendComand+0x28c>)
 8008b88:	4861      	ldr	r0, [pc, #388]	; (8008d10 <SendComand+0x278>)
 8008b8a:	f000 fead 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b8e:	e0b7      	b.n	8008d00 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008b90:	4965      	ldr	r1, [pc, #404]	; (8008d28 <SendComand+0x290>)
 8008b92:	485f      	ldr	r0, [pc, #380]	; (8008d10 <SendComand+0x278>)
 8008b94:	f000 fea8 	bl	80098e8 <UARTDMA_Print>
			break;
 8008b98:	e0b2      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008b9a:	4964      	ldr	r1, [pc, #400]	; (8008d2c <SendComand+0x294>)
 8008b9c:	485c      	ldr	r0, [pc, #368]	; (8008d10 <SendComand+0x278>)
 8008b9e:	f000 fea3 	bl	80098e8 <UARTDMA_Print>
			break;
 8008ba2:	e0ad      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008ba4:	4962      	ldr	r1, [pc, #392]	; (8008d30 <SendComand+0x298>)
 8008ba6:	485a      	ldr	r0, [pc, #360]	; (8008d10 <SendComand+0x278>)
 8008ba8:	f000 fe9e 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bac:	e0a8      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008bae:	4961      	ldr	r1, [pc, #388]	; (8008d34 <SendComand+0x29c>)
 8008bb0:	4857      	ldr	r0, [pc, #348]	; (8008d10 <SendComand+0x278>)
 8008bb2:	f000 fe99 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bb6:	e0a3      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008bb8:	495f      	ldr	r1, [pc, #380]	; (8008d38 <SendComand+0x2a0>)
 8008bba:	4855      	ldr	r0, [pc, #340]	; (8008d10 <SendComand+0x278>)
 8008bbc:	f000 fe94 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bc0:	e09e      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008bc2:	495e      	ldr	r1, [pc, #376]	; (8008d3c <SendComand+0x2a4>)
 8008bc4:	4852      	ldr	r0, [pc, #328]	; (8008d10 <SendComand+0x278>)
 8008bc6:	f000 fe8f 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bca:	e099      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008bcc:	495c      	ldr	r1, [pc, #368]	; (8008d40 <SendComand+0x2a8>)
 8008bce:	4850      	ldr	r0, [pc, #320]	; (8008d10 <SendComand+0x278>)
 8008bd0:	f000 fe8a 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bd4:	e094      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008bd6:	495b      	ldr	r1, [pc, #364]	; (8008d44 <SendComand+0x2ac>)
 8008bd8:	484d      	ldr	r0, [pc, #308]	; (8008d10 <SendComand+0x278>)
 8008bda:	f000 fe85 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bde:	e08f      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008be0:	4959      	ldr	r1, [pc, #356]	; (8008d48 <SendComand+0x2b0>)
 8008be2:	484b      	ldr	r0, [pc, #300]	; (8008d10 <SendComand+0x278>)
 8008be4:	f000 fe80 	bl	80098e8 <UARTDMA_Print>
			break;
 8008be8:	e08a      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008bea:	4958      	ldr	r1, [pc, #352]	; (8008d4c <SendComand+0x2b4>)
 8008bec:	4848      	ldr	r0, [pc, #288]	; (8008d10 <SendComand+0x278>)
 8008bee:	f000 fe7b 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bf2:	e085      	b.n	8008d00 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008bf4:	4956      	ldr	r1, [pc, #344]	; (8008d50 <SendComand+0x2b8>)
 8008bf6:	4846      	ldr	r0, [pc, #280]	; (8008d10 <SendComand+0x278>)
 8008bf8:	f000 fe76 	bl	80098e8 <UARTDMA_Print>
			break;
 8008bfc:	e080      	b.n	8008d00 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008bfe:	4955      	ldr	r1, [pc, #340]	; (8008d54 <SendComand+0x2bc>)
 8008c00:	4843      	ldr	r0, [pc, #268]	; (8008d10 <SendComand+0x278>)
 8008c02:	f000 fe71 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c06:	e07b      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008c08:	4953      	ldr	r1, [pc, #332]	; (8008d58 <SendComand+0x2c0>)
 8008c0a:	4841      	ldr	r0, [pc, #260]	; (8008d10 <SendComand+0x278>)
 8008c0c:	f000 fe6c 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c10:	e076      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008c12:	4952      	ldr	r1, [pc, #328]	; (8008d5c <SendComand+0x2c4>)
 8008c14:	483e      	ldr	r0, [pc, #248]	; (8008d10 <SendComand+0x278>)
 8008c16:	f000 fe67 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c1a:	e071      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008c1c:	4950      	ldr	r1, [pc, #320]	; (8008d60 <SendComand+0x2c8>)
 8008c1e:	483c      	ldr	r0, [pc, #240]	; (8008d10 <SendComand+0x278>)
 8008c20:	f000 fe62 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c24:	e06c      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008c26:	494f      	ldr	r1, [pc, #316]	; (8008d64 <SendComand+0x2cc>)
 8008c28:	4839      	ldr	r0, [pc, #228]	; (8008d10 <SendComand+0x278>)
 8008c2a:	f000 fe5d 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c2e:	e067      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008c30:	494d      	ldr	r1, [pc, #308]	; (8008d68 <SendComand+0x2d0>)
 8008c32:	4837      	ldr	r0, [pc, #220]	; (8008d10 <SendComand+0x278>)
 8008c34:	f000 fe58 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c38:	e062      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008c3a:	494c      	ldr	r1, [pc, #304]	; (8008d6c <SendComand+0x2d4>)
 8008c3c:	4834      	ldr	r0, [pc, #208]	; (8008d10 <SendComand+0x278>)
 8008c3e:	f000 fe53 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c42:	e05d      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008c44:	494a      	ldr	r1, [pc, #296]	; (8008d70 <SendComand+0x2d8>)
 8008c46:	4832      	ldr	r0, [pc, #200]	; (8008d10 <SendComand+0x278>)
 8008c48:	f000 fe4e 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c4c:	e058      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008c4e:	4949      	ldr	r1, [pc, #292]	; (8008d74 <SendComand+0x2dc>)
 8008c50:	482f      	ldr	r0, [pc, #188]	; (8008d10 <SendComand+0x278>)
 8008c52:	f000 fe49 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c56:	e053      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008c58:	4947      	ldr	r1, [pc, #284]	; (8008d78 <SendComand+0x2e0>)
 8008c5a:	482d      	ldr	r0, [pc, #180]	; (8008d10 <SendComand+0x278>)
 8008c5c:	f000 fe44 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c60:	e04e      	b.n	8008d00 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008c62:	4946      	ldr	r1, [pc, #280]	; (8008d7c <SendComand+0x2e4>)
 8008c64:	482a      	ldr	r0, [pc, #168]	; (8008d10 <SendComand+0x278>)
 8008c66:	f000 fe3f 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c6a:	e049      	b.n	8008d00 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008c6c:	4944      	ldr	r1, [pc, #272]	; (8008d80 <SendComand+0x2e8>)
 8008c6e:	4828      	ldr	r0, [pc, #160]	; (8008d10 <SendComand+0x278>)
 8008c70:	f000 fe3a 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c74:	e044      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008c76:	4943      	ldr	r1, [pc, #268]	; (8008d84 <SendComand+0x2ec>)
 8008c78:	4825      	ldr	r0, [pc, #148]	; (8008d10 <SendComand+0x278>)
 8008c7a:	f000 fe35 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c7e:	e03f      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008c80:	4941      	ldr	r1, [pc, #260]	; (8008d88 <SendComand+0x2f0>)
 8008c82:	4823      	ldr	r0, [pc, #140]	; (8008d10 <SendComand+0x278>)
 8008c84:	f000 fe30 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c88:	e03a      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008c8a:	4940      	ldr	r1, [pc, #256]	; (8008d8c <SendComand+0x2f4>)
 8008c8c:	4820      	ldr	r0, [pc, #128]	; (8008d10 <SendComand+0x278>)
 8008c8e:	f000 fe2b 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c92:	e035      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008c94:	493e      	ldr	r1, [pc, #248]	; (8008d90 <SendComand+0x2f8>)
 8008c96:	481e      	ldr	r0, [pc, #120]	; (8008d10 <SendComand+0x278>)
 8008c98:	f000 fe26 	bl	80098e8 <UARTDMA_Print>
			break;
 8008c9c:	e030      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008c9e:	493d      	ldr	r1, [pc, #244]	; (8008d94 <SendComand+0x2fc>)
 8008ca0:	481b      	ldr	r0, [pc, #108]	; (8008d10 <SendComand+0x278>)
 8008ca2:	f000 fe21 	bl	80098e8 <UARTDMA_Print>
			break;
 8008ca6:	e02b      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008ca8:	493b      	ldr	r1, [pc, #236]	; (8008d98 <SendComand+0x300>)
 8008caa:	4819      	ldr	r0, [pc, #100]	; (8008d10 <SendComand+0x278>)
 8008cac:	f000 fe1c 	bl	80098e8 <UARTDMA_Print>
			break;
 8008cb0:	e026      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008cb2:	493a      	ldr	r1, [pc, #232]	; (8008d9c <SendComand+0x304>)
 8008cb4:	4816      	ldr	r0, [pc, #88]	; (8008d10 <SendComand+0x278>)
 8008cb6:	f000 fe17 	bl	80098e8 <UARTDMA_Print>
			break;
 8008cba:	e021      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008cbc:	4938      	ldr	r1, [pc, #224]	; (8008da0 <SendComand+0x308>)
 8008cbe:	4814      	ldr	r0, [pc, #80]	; (8008d10 <SendComand+0x278>)
 8008cc0:	f000 fe12 	bl	80098e8 <UARTDMA_Print>
			break;
 8008cc4:	e01c      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008cc6:	4b37      	ldr	r3, [pc, #220]	; (8008da4 <SendComand+0x30c>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d802      	bhi.n	8008cd4 <SendComand+0x23c>
 8008cce:	4b35      	ldr	r3, [pc, #212]	; (8008da4 <SendComand+0x30c>)
 8008cd0:	2209      	movs	r2, #9
 8008cd2:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008cd4:	4b33      	ldr	r3, [pc, #204]	; (8008da4 <SendComand+0x30c>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4933      	ldr	r1, [pc, #204]	; (8008da8 <SendComand+0x310>)
 8008cdc:	4833      	ldr	r0, [pc, #204]	; (8008dac <SendComand+0x314>)
 8008cde:	f008 fdf7 	bl	80118d0 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008ce2:	4932      	ldr	r1, [pc, #200]	; (8008dac <SendComand+0x314>)
 8008ce4:	480a      	ldr	r0, [pc, #40]	; (8008d10 <SendComand+0x278>)
 8008ce6:	f000 fdff 	bl	80098e8 <UARTDMA_Print>
			break;
 8008cea:	e009      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008cec:	4930      	ldr	r1, [pc, #192]	; (8008db0 <SendComand+0x318>)
 8008cee:	4808      	ldr	r0, [pc, #32]	; (8008d10 <SendComand+0x278>)
 8008cf0:	f000 fdfa 	bl	80098e8 <UARTDMA_Print>
			break;
 8008cf4:	e004      	b.n	8008d00 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008cf6:	492f      	ldr	r1, [pc, #188]	; (8008db4 <SendComand+0x31c>)
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <SendComand+0x278>)
 8008cfa:	f000 fdf5 	bl	80098e8 <UARTDMA_Print>
			break;
 8008cfe:	bf00      	nop
		}
	return 1;
 8008d00:	2301      	movs	r3, #1
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	08015bc0 	.word	0x08015bc0
 8008d10:	200004a4 	.word	0x200004a4
 8008d14:	08015bc8 	.word	0x08015bc8
 8008d18:	08015bd0 	.word	0x08015bd0
 8008d1c:	08015bdc 	.word	0x08015bdc
 8008d20:	08015be4 	.word	0x08015be4
 8008d24:	08015bec 	.word	0x08015bec
 8008d28:	08015bf4 	.word	0x08015bf4
 8008d2c:	08015c04 	.word	0x08015c04
 8008d30:	08015c14 	.word	0x08015c14
 8008d34:	08015c24 	.word	0x08015c24
 8008d38:	08015c34 	.word	0x08015c34
 8008d3c:	08015c44 	.word	0x08015c44
 8008d40:	08015c54 	.word	0x08015c54
 8008d44:	08015c64 	.word	0x08015c64
 8008d48:	08015c74 	.word	0x08015c74
 8008d4c:	08015c84 	.word	0x08015c84
 8008d50:	08015c94 	.word	0x08015c94
 8008d54:	08015ca4 	.word	0x08015ca4
 8008d58:	08015cb4 	.word	0x08015cb4
 8008d5c:	08015cc4 	.word	0x08015cc4
 8008d60:	08015cd4 	.word	0x08015cd4
 8008d64:	08015ce4 	.word	0x08015ce4
 8008d68:	08015cf4 	.word	0x08015cf4
 8008d6c:	08015d04 	.word	0x08015d04
 8008d70:	08015d14 	.word	0x08015d14
 8008d74:	08015d24 	.word	0x08015d24
 8008d78:	08015d34 	.word	0x08015d34
 8008d7c:	08015d44 	.word	0x08015d44
 8008d80:	08015d54 	.word	0x08015d54
 8008d84:	08015d64 	.word	0x08015d64
 8008d88:	08015d74 	.word	0x08015d74
 8008d8c:	08015d84 	.word	0x08015d84
 8008d90:	08015d94 	.word	0x08015d94
 8008d94:	08015da4 	.word	0x08015da4
 8008d98:	08015db4 	.word	0x08015db4
 8008d9c:	08015dc4 	.word	0x08015dc4
 8008da0:	08015dd4 	.word	0x08015dd4
 8008da4:	20000033 	.word	0x20000033
 8008da8:	08015de4 	.word	0x08015de4
 8008dac:	20000840 	.word	0x20000840
 8008db0:	08015df4 	.word	0x08015df4
 8008db4:	08015e04 	.word	0x08015e04

08008db8 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d101      	bne.n	8008dd2 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e015      	b.n	8008dfe <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4413      	add	r3, r2
 8008ddc:	789a      	ldrb	r2, [r3, #2]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	3301      	adds	r3, #1
 8008de8:	425a      	negs	r2, r3
 8008dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008df2:	bf58      	it	pl
 8008df4:	4253      	negpl	r3, r2
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b085      	sub	sp, #20
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	425a      	negs	r2, r3
 8008e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e26:	bf58      	it	pl
 8008e28:	4253      	negpl	r3, r2
 8008e2a:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	7bfa      	ldrb	r2, [r7, #15]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d101      	bne.n	8008e3a <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008e36:	2301      	movs	r3, #1
 8008e38:	e00a      	b.n	8008e50 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4413      	add	r3, r2
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7bfa      	ldrb	r2, [r7, #15]
 8008e4c:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008e60:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e62:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <MX_SPI1_Init+0x68>)
 8008e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008e66:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e80:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008e86:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e90:	2210      	movs	r2, #16
 8008e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e94:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008ea6:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008eac:	4804      	ldr	r0, [pc, #16]	; (8008ec0 <MX_SPI1_Init+0x64>)
 8008eae:	f005 fd47 	bl	800e940 <HAL_SPI_Init>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008eb8:	f7fc fe2c 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20000934 	.word	0x20000934
 8008ec4:	40013000 	.word	0x40013000

08008ec8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008ecc:	4b17      	ldr	r3, [pc, #92]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008ece:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <MX_SPI3_Init+0x68>)
 8008ed0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008ed2:	4b16      	ldr	r3, [pc, #88]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ed8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008eda:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ee0:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ee6:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008eec:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ef8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008efa:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008efc:	2220      	movs	r2, #32
 8008efe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f0c:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008f12:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008f14:	220a      	movs	r2, #10
 8008f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008f18:	4804      	ldr	r0, [pc, #16]	; (8008f2c <MX_SPI3_Init+0x64>)
 8008f1a:	f005 fd11 	bl	800e940 <HAL_SPI_Init>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008f24:	f7fc fdf6 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008f28:	bf00      	nop
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	200008dc 	.word	0x200008dc
 8008f30:	40003c00 	.word	0x40003c00

08008f34 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f3a:	4a18      	ldr	r2, [pc, #96]	; (8008f9c <MX_SPI5_Init+0x68>)
 8008f3c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8008f3e:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f44:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008f46:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f4c:	4b12      	ldr	r3, [pc, #72]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f52:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f64:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f66:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f72:	4b09      	ldr	r3, [pc, #36]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f78:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f80:	220a      	movs	r2, #10
 8008f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008f84:	4804      	ldr	r0, [pc, #16]	; (8008f98 <MX_SPI5_Init+0x64>)
 8008f86:	f005 fcdb 	bl	800e940 <HAL_SPI_Init>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008f90:	f7fc fdc0 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8008f94:	bf00      	nop
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20000884 	.word	0x20000884
 8008f9c:	40015000 	.word	0x40015000

08008fa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08e      	sub	sp, #56	; 0x38
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	609a      	str	r2, [r3, #8]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a5a      	ldr	r2, [pc, #360]	; (8009128 <HAL_SPI_MspInit+0x188>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d12c      	bne.n	800901c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	623b      	str	r3, [r7, #32]
 8008fc6:	4b59      	ldr	r3, [pc, #356]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8008fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fca:	4a58      	ldr	r2, [pc, #352]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8008fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8008fd2:	4b56      	ldr	r3, [pc, #344]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fda:	623b      	str	r3, [r7, #32]
 8008fdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	4b52      	ldr	r3, [pc, #328]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	4a51      	ldr	r2, [pc, #324]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	6313      	str	r3, [r2, #48]	; 0x30
 8008fee:	4b4f      	ldr	r3, [pc, #316]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8008ffa:	23e0      	movs	r3, #224	; 0xe0
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ffe:	2302      	movs	r3, #2
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009002:	2300      	movs	r3, #0
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009006:	2303      	movs	r3, #3
 8009008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800900a:	2305      	movs	r3, #5
 800900c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800900e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009012:	4619      	mov	r1, r3
 8009014:	4846      	ldr	r0, [pc, #280]	; (8009130 <HAL_SPI_MspInit+0x190>)
 8009016:	f001 fd5f 	bl	800aad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800901a:	e081      	b.n	8009120 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a44      	ldr	r2, [pc, #272]	; (8009134 <HAL_SPI_MspInit+0x194>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d12c      	bne.n	8009080 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	4b40      	ldr	r3, [pc, #256]	; (800912c <HAL_SPI_MspInit+0x18c>)
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	4a3f      	ldr	r2, [pc, #252]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8009030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009034:	6413      	str	r3, [r2, #64]	; 0x40
 8009036:	4b3d      	ldr	r3, [pc, #244]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	4b39      	ldr	r3, [pc, #228]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	4a38      	ldr	r2, [pc, #224]	; (800912c <HAL_SPI_MspInit+0x18c>)
 800904c:	f043 0302 	orr.w	r3, r3, #2
 8009050:	6313      	str	r3, [r2, #48]	; 0x30
 8009052:	4b36      	ldr	r3, [pc, #216]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 800905e:	2338      	movs	r3, #56	; 0x38
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009062:	2302      	movs	r3, #2
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009066:	2300      	movs	r3, #0
 8009068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800906a:	2303      	movs	r3, #3
 800906c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800906e:	2306      	movs	r3, #6
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009076:	4619      	mov	r1, r3
 8009078:	482f      	ldr	r0, [pc, #188]	; (8009138 <HAL_SPI_MspInit+0x198>)
 800907a:	f001 fd2d 	bl	800aad8 <HAL_GPIO_Init>
}
 800907e:	e04f      	b.n	8009120 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a2d      	ldr	r2, [pc, #180]	; (800913c <HAL_SPI_MspInit+0x19c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d14a      	bne.n	8009120 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	4b27      	ldr	r3, [pc, #156]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	4a26      	ldr	r2, [pc, #152]	; (800912c <HAL_SPI_MspInit+0x18c>)
 8009094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009098:	6453      	str	r3, [r2, #68]	; 0x44
 800909a:	4b24      	ldr	r3, [pc, #144]	; (800912c <HAL_SPI_MspInit+0x18c>)
 800909c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a2:	613b      	str	r3, [r7, #16]
 80090a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	4b20      	ldr	r3, [pc, #128]	; (800912c <HAL_SPI_MspInit+0x18c>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	4a1f      	ldr	r2, [pc, #124]	; (800912c <HAL_SPI_MspInit+0x18c>)
 80090b0:	f043 0302 	orr.w	r3, r3, #2
 80090b4:	6313      	str	r3, [r2, #48]	; 0x30
 80090b6:	4b1d      	ldr	r3, [pc, #116]	; (800912c <HAL_SPI_MspInit+0x18c>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090c2:	2300      	movs	r3, #0
 80090c4:	60bb      	str	r3, [r7, #8]
 80090c6:	4b19      	ldr	r3, [pc, #100]	; (800912c <HAL_SPI_MspInit+0x18c>)
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	4a18      	ldr	r2, [pc, #96]	; (800912c <HAL_SPI_MspInit+0x18c>)
 80090cc:	f043 0301 	orr.w	r3, r3, #1
 80090d0:	6313      	str	r3, [r2, #48]	; 0x30
 80090d2:	4b16      	ldr	r3, [pc, #88]	; (800912c <HAL_SPI_MspInit+0x18c>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	60bb      	str	r3, [r7, #8]
 80090dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 80090de:	2301      	movs	r3, #1
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090e2:	2302      	movs	r3, #2
 80090e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090ea:	2303      	movs	r3, #3
 80090ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80090ee:	2306      	movs	r3, #6
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 80090f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f6:	4619      	mov	r1, r3
 80090f8:	480f      	ldr	r0, [pc, #60]	; (8009138 <HAL_SPI_MspInit+0x198>)
 80090fa:	f001 fced 	bl	800aad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 80090fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009104:	2302      	movs	r3, #2
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009108:	2300      	movs	r3, #0
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800910c:	2303      	movs	r3, #3
 800910e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009110:	2306      	movs	r3, #6
 8009112:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009118:	4619      	mov	r1, r3
 800911a:	4805      	ldr	r0, [pc, #20]	; (8009130 <HAL_SPI_MspInit+0x190>)
 800911c:	f001 fcdc 	bl	800aad8 <HAL_GPIO_Init>
}
 8009120:	bf00      	nop
 8009122:	3738      	adds	r7, #56	; 0x38
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	40013000 	.word	0x40013000
 800912c:	40023800 	.word	0x40023800
 8009130:	40020000 	.word	0x40020000
 8009134:	40003c00 	.word	0x40003c00
 8009138:	40020400 	.word	0x40020400
 800913c:	40015000 	.word	0x40015000

08009140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <HAL_MspInit+0x4c>)
 800914c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914e:	4a0f      	ldr	r2, [pc, #60]	; (800918c <HAL_MspInit+0x4c>)
 8009150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009154:	6453      	str	r3, [r2, #68]	; 0x44
 8009156:	4b0d      	ldr	r3, [pc, #52]	; (800918c <HAL_MspInit+0x4c>)
 8009158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009162:	2300      	movs	r3, #0
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4b09      	ldr	r3, [pc, #36]	; (800918c <HAL_MspInit+0x4c>)
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	4a08      	ldr	r2, [pc, #32]	; (800918c <HAL_MspInit+0x4c>)
 800916c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009170:	6413      	str	r3, [r2, #64]	; 0x40
 8009172:	4b06      	ldr	r3, [pc, #24]	; (800918c <HAL_MspInit+0x4c>)
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40023800 	.word	0x40023800

08009190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009194:	e7fe      	b.n	8009194 <NMI_Handler+0x4>

08009196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009196:	b480      	push	{r7}
 8009198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800919a:	e7fe      	b.n	800919a <HardFault_Handler+0x4>

0800919c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091a0:	e7fe      	b.n	80091a0 <MemManage_Handler+0x4>

080091a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091a2:	b480      	push	{r7}
 80091a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091a6:	e7fe      	b.n	80091a6 <BusFault_Handler+0x4>

080091a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091ac:	e7fe      	b.n	80091ac <UsageFault_Handler+0x4>

080091ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091ae:	b480      	push	{r7}
 80091b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091b2:	bf00      	nop
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091ca:	b480      	push	{r7}
 80091cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091ce:	bf00      	nop
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091dc:	f000 fe88 	bl	8009ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091e0:	bf00      	nop
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 80091e8:	2004      	movs	r0, #4
 80091ea:	f001 fe45 	bl	800ae78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 80091f6:	2010      	movs	r0, #16
 80091f8:	f001 fe3e 	bl	800ae78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80091fc:	bf00      	nop
 80091fe:	bd80      	pop	{r7, pc}

08009200 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8009204:	4802      	ldr	r0, [pc, #8]	; (8009210 <DMA1_Stream0_IRQHandler+0x10>)
 8009206:	f001 f9ef 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800920a:	bf00      	nop
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000444 	.word	0x20000444

08009214 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009218:	4802      	ldr	r0, [pc, #8]	; (8009224 <DMA1_Stream1_IRQHandler+0x10>)
 800921a:	f001 f9e5 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000390 	.word	0x20000390

08009228 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800922c:	4802      	ldr	r0, [pc, #8]	; (8009238 <DMA1_Stream5_IRQHandler+0x10>)
 800922e:	f000 faa5 	bl	800977c <UARTDMA_DmaReceiveIrqHandler>
	return;
 8009232:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200004a4 	.word	0x200004a4

0800923c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009240:	4802      	ldr	r0, [pc, #8]	; (800924c <DMA1_Stream6_IRQHandler+0x10>)
 8009242:	f001 f9d1 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009246:	bf00      	nop
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000b84 	.word	0x20000b84

08009250 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8009254:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009258:	f001 fe0e 	bl	800ae78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800925c:	bf00      	nop
 800925e:	bd80      	pop	{r7, pc}

08009260 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009264:	4802      	ldr	r0, [pc, #8]	; (8009270 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009266:	f006 f906 	bl	800f476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	2000098c 	.word	0x2000098c

08009274 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8009278:	4802      	ldr	r0, [pc, #8]	; (8009284 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800927a:	f006 f8fc 	bl	800f476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800927e:	bf00      	nop
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200009d4 	.word	0x200009d4

08009288 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800928c:	4802      	ldr	r0, [pc, #8]	; (8009298 <I2C1_EV_IRQHandler+0x10>)
 800928e:	f002 fd93 	bl	800bdb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009292:	bf00      	nop
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	200003f0 	.word	0x200003f0

0800929c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80092a0:	4802      	ldr	r0, [pc, #8]	; (80092ac <I2C1_ER_IRQHandler+0x10>)
 80092a2:	f002 fefa 	bl	800c09a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80092a6:	bf00      	nop
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	200003f0 	.word	0x200003f0

080092b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 80092b4:	4803      	ldr	r0, [pc, #12]	; (80092c4 <USART1_IRQHandler+0x14>)
 80092b6:	f000 fa37 	bl	8009728 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092ba:	4803      	ldr	r0, [pc, #12]	; (80092c8 <USART1_IRQHandler+0x18>)
 80092bc:	f006 fc0a 	bl	800fad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092c0:	bf00      	nop
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000670 	.word	0x20000670
 80092c8:	20000be4 	.word	0x20000be4

080092cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80092d0:	4803      	ldr	r0, [pc, #12]	; (80092e0 <USART2_IRQHandler+0x14>)
 80092d2:	f000 fa29 	bl	8009728 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80092d6:	4803      	ldr	r0, [pc, #12]	; (80092e4 <USART2_IRQHandler+0x18>)
 80092d8:	f006 fbfc 	bl	800fad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80092dc:	bf00      	nop
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200004a4 	.word	0x200004a4
 80092e4:	20000c28 	.word	0x20000c28

080092e8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80092ec:	4802      	ldr	r0, [pc, #8]	; (80092f8 <SPI3_IRQHandler+0x10>)
 80092ee:	f005 fd53 	bl	800ed98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80092f2:	bf00      	nop
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	200008dc 	.word	0x200008dc

080092fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 8009300:	4802      	ldr	r0, [pc, #8]	; (800930c <DMA2_Stream2_IRQHandler+0x10>)
 8009302:	f000 fa3b 	bl	800977c <UARTDMA_DmaReceiveIrqHandler>
	return;
 8009306:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000670 	.word	0x20000670

08009310 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009314:	4802      	ldr	r0, [pc, #8]	; (8009320 <DMA2_Stream7_IRQHandler+0x10>)
 8009316:	f001 f967 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800931a:	bf00      	nop
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20000ac4 	.word	0x20000ac4

08009324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0
	return 1;
 8009328:	2301      	movs	r3, #1
}
 800932a:	4618      	mov	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <_kill>:

int _kill(int pid, int sig)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800933e:	f007 fc15 	bl	8010b6c <__errno>
 8009342:	4603      	mov	r3, r0
 8009344:	2216      	movs	r2, #22
 8009346:	601a      	str	r2, [r3, #0]
	return -1;
 8009348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <_exit>:

void _exit (int status)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800935c:	f04f 31ff 	mov.w	r1, #4294967295
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff ffe7 	bl	8009334 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009366:	e7fe      	b.n	8009366 <_exit+0x12>

08009368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009374:	2300      	movs	r3, #0
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e00a      	b.n	8009390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800937a:	f3af 8000 	nop.w
 800937e:	4601      	mov	r1, r0
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	60ba      	str	r2, [r7, #8]
 8009386:	b2ca      	uxtb	r2, r1
 8009388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	3301      	adds	r3, #1
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	dbf0      	blt.n	800937a <_read+0x12>
	}

return len;
 8009398:	687b      	ldr	r3, [r7, #4]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b086      	sub	sp, #24
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093ae:	2300      	movs	r3, #0
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e009      	b.n	80093c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	60ba      	str	r2, [r7, #8]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	3301      	adds	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	dbf1      	blt.n	80093b4 <_write+0x12>
	}
	return len;
 80093d0:	687b      	ldr	r3, [r7, #4]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <_close>:

int _close(int file)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
	return -1;
 80093e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009402:	605a      	str	r2, [r3, #4]
	return 0;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <_isatty>:

int _isatty(int file)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
	return 1;
 800941a:	2301      	movs	r3, #1
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
	return 0;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800944c:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <_sbrk+0x5c>)
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <_sbrk+0x60>)
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009458:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <_sbrk+0x64>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d102      	bne.n	8009466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009460:	4b11      	ldr	r3, [pc, #68]	; (80094a8 <_sbrk+0x64>)
 8009462:	4a12      	ldr	r2, [pc, #72]	; (80094ac <_sbrk+0x68>)
 8009464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009466:	4b10      	ldr	r3, [pc, #64]	; (80094a8 <_sbrk+0x64>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	429a      	cmp	r2, r3
 8009472:	d207      	bcs.n	8009484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009474:	f007 fb7a 	bl	8010b6c <__errno>
 8009478:	4603      	mov	r3, r0
 800947a:	220c      	movs	r2, #12
 800947c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295
 8009482:	e009      	b.n	8009498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009484:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <_sbrk+0x64>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800948a:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <_sbrk+0x64>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	4a05      	ldr	r2, [pc, #20]	; (80094a8 <_sbrk+0x64>)
 8009494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009496:	68fb      	ldr	r3, [r7, #12]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20020000 	.word	0x20020000
 80094a4:	00000400 	.word	0x00000400
 80094a8:	200002b4 	.word	0x200002b4
 80094ac:	20000c80 	.word	0x20000c80

080094b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80094b4:	4b06      	ldr	r3, [pc, #24]	; (80094d0 <SystemInit+0x20>)
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ba:	4a05      	ldr	r2, [pc, #20]	; (80094d0 <SystemInit+0x20>)
 80094bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80094c4:	bf00      	nop
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000ed00 	.word	0xe000ed00

080094d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08c      	sub	sp, #48	; 0x30
 80094d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80094da:	f107 030c 	add.w	r3, r7, #12
 80094de:	2224      	movs	r2, #36	; 0x24
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f007 fb6c 	bl	8010bc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80094f0:	4b21      	ldr	r3, [pc, #132]	; (8009578 <MX_TIM2_Init+0xa4>)
 80094f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80094f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80094f8:	4b1f      	ldr	r3, [pc, #124]	; (8009578 <MX_TIM2_Init+0xa4>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094fe:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <MX_TIM2_Init+0xa4>)
 8009500:	2200      	movs	r2, #0
 8009502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009504:	4b1c      	ldr	r3, [pc, #112]	; (8009578 <MX_TIM2_Init+0xa4>)
 8009506:	f04f 32ff 	mov.w	r2, #4294967295
 800950a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <MX_TIM2_Init+0xa4>)
 800950e:	2200      	movs	r2, #0
 8009510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009512:	4b19      	ldr	r3, [pc, #100]	; (8009578 <MX_TIM2_Init+0xa4>)
 8009514:	2200      	movs	r2, #0
 8009516:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009518:	2301      	movs	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800951c:	2300      	movs	r3, #0
 800951e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009520:	2301      	movs	r3, #1
 8009522:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009524:	2300      	movs	r3, #0
 8009526:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800952c:	2300      	movs	r3, #0
 800952e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009530:	2301      	movs	r3, #1
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009534:	2300      	movs	r3, #0
 8009536:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800953c:	f107 030c 	add.w	r3, r7, #12
 8009540:	4619      	mov	r1, r3
 8009542:	480d      	ldr	r0, [pc, #52]	; (8009578 <MX_TIM2_Init+0xa4>)
 8009544:	f005 fef1 	bl	800f32a <HAL_TIM_Encoder_Init>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800954e:	f7fc fae1 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009556:	2300      	movs	r3, #0
 8009558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800955a:	1d3b      	adds	r3, r7, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4806      	ldr	r0, [pc, #24]	; (8009578 <MX_TIM2_Init+0xa4>)
 8009560:	f006 f93a 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800956a:	f7fc fad3 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800956e:	bf00      	nop
 8009570:	3730      	adds	r7, #48	; 0x30
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000a1c 	.word	0x20000a1c

0800957c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <MX_TIM10_Init+0x40>)
 8009582:	4a0f      	ldr	r2, [pc, #60]	; (80095c0 <MX_TIM10_Init+0x44>)
 8009584:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8009586:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <MX_TIM10_Init+0x40>)
 8009588:	f242 720f 	movw	r2, #9999	; 0x270f
 800958c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800958e:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <MX_TIM10_Init+0x40>)
 8009590:	2200      	movs	r2, #0
 8009592:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8009594:	4b09      	ldr	r3, [pc, #36]	; (80095bc <MX_TIM10_Init+0x40>)
 8009596:	f242 720f 	movw	r2, #9999	; 0x270f
 800959a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800959c:	4b07      	ldr	r3, [pc, #28]	; (80095bc <MX_TIM10_Init+0x40>)
 800959e:	2200      	movs	r2, #0
 80095a0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <MX_TIM10_Init+0x40>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80095a8:	4804      	ldr	r0, [pc, #16]	; (80095bc <MX_TIM10_Init+0x40>)
 80095aa:	f005 fddd 	bl	800f168 <HAL_TIM_Base_Init>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80095b4:	f7fc faae 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80095b8:	bf00      	nop
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	2000098c 	.word	0x2000098c
 80095c0:	40014400 	.word	0x40014400

080095c4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80095c8:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <MX_TIM11_Init+0x44>)
 80095ca:	4a10      	ldr	r2, [pc, #64]	; (800960c <MX_TIM11_Init+0x48>)
 80095cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80095ce:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <MX_TIM11_Init+0x44>)
 80095d0:	f643 2297 	movw	r2, #14999	; 0x3a97
 80095d4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <MX_TIM11_Init+0x44>)
 80095d8:	2200      	movs	r2, #0
 80095da:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 80095dc:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <MX_TIM11_Init+0x44>)
 80095de:	f247 522f 	movw	r2, #29999	; 0x752f
 80095e2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80095e4:	4b08      	ldr	r3, [pc, #32]	; (8009608 <MX_TIM11_Init+0x44>)
 80095e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <MX_TIM11_Init+0x44>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80095f2:	4805      	ldr	r0, [pc, #20]	; (8009608 <MX_TIM11_Init+0x44>)
 80095f4:	f005 fdb8 	bl	800f168 <HAL_TIM_Base_Init>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 80095fe:	f7fc fa89 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8009602:	bf00      	nop
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200009d4 	.word	0x200009d4
 800960c:	40014800 	.word	0x40014800

08009610 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08a      	sub	sp, #40	; 0x28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009630:	d12b      	bne.n	800968a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009632:	2300      	movs	r3, #0
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	4b17      	ldr	r3, [pc, #92]	; (8009694 <HAL_TIM_Encoder_MspInit+0x84>)
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	4a16      	ldr	r2, [pc, #88]	; (8009694 <HAL_TIM_Encoder_MspInit+0x84>)
 800963c:	f043 0301 	orr.w	r3, r3, #1
 8009640:	6413      	str	r3, [r2, #64]	; 0x40
 8009642:	4b14      	ldr	r3, [pc, #80]	; (8009694 <HAL_TIM_Encoder_MspInit+0x84>)
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	4b10      	ldr	r3, [pc, #64]	; (8009694 <HAL_TIM_Encoder_MspInit+0x84>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	4a0f      	ldr	r2, [pc, #60]	; (8009694 <HAL_TIM_Encoder_MspInit+0x84>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	6313      	str	r3, [r2, #48]	; 0x30
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <HAL_TIM_Encoder_MspInit+0x84>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800966a:	2303      	movs	r3, #3
 800966c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800966e:	2302      	movs	r3, #2
 8009670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009676:	2300      	movs	r3, #0
 8009678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800967a:	2301      	movs	r3, #1
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	4619      	mov	r1, r3
 8009684:	4804      	ldr	r0, [pc, #16]	; (8009698 <HAL_TIM_Encoder_MspInit+0x88>)
 8009686:	f001 fa27 	bl	800aad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800968a:	bf00      	nop
 800968c:	3728      	adds	r7, #40	; 0x28
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	40023800 	.word	0x40023800
 8009698:	40020000 	.word	0x40020000

0800969c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a1c      	ldr	r2, [pc, #112]	; (800971c <HAL_TIM_Base_MspInit+0x80>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d116      	bne.n	80096dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <HAL_TIM_Base_MspInit+0x84>)
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	4a1a      	ldr	r2, [pc, #104]	; (8009720 <HAL_TIM_Base_MspInit+0x84>)
 80096b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096bc:	6453      	str	r3, [r2, #68]	; 0x44
 80096be:	4b18      	ldr	r3, [pc, #96]	; (8009720 <HAL_TIM_Base_MspInit+0x84>)
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80096ca:	2200      	movs	r2, #0
 80096cc:	2100      	movs	r1, #0
 80096ce:	2019      	movs	r0, #25
 80096d0:	f000 fd91 	bl	800a1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80096d4:	2019      	movs	r0, #25
 80096d6:	f000 fdaa 	bl	800a22e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80096da:	e01a      	b.n	8009712 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a10      	ldr	r2, [pc, #64]	; (8009724 <HAL_TIM_Base_MspInit+0x88>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d115      	bne.n	8009712 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80096e6:	2300      	movs	r3, #0
 80096e8:	60bb      	str	r3, [r7, #8]
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <HAL_TIM_Base_MspInit+0x84>)
 80096ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ee:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <HAL_TIM_Base_MspInit+0x84>)
 80096f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096f4:	6453      	str	r3, [r2, #68]	; 0x44
 80096f6:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <HAL_TIM_Base_MspInit+0x84>)
 80096f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096fe:	60bb      	str	r3, [r7, #8]
 8009700:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	201a      	movs	r0, #26
 8009708:	f000 fd75 	bl	800a1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800970c:	201a      	movs	r0, #26
 800970e:	f000 fd8e 	bl	800a22e <HAL_NVIC_EnableIRQ>
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40014400 	.word	0x40014400
 8009720:	40023800 	.word	0x40023800
 8009724:	40014800 	.word	0x40014800

08009728 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b00      	cmp	r3, #0
 800973e:	d017      	beq.n	8009770 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	60fb      	str	r3, [r7, #12]
	}
}
 8009770:	bf00      	nop
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	d056      	beq.n	800984e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a8:	2220      	movs	r2, #32
 80097aa:	409a      	lsls	r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80097c0:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80097c8:	2300      	movs	r3, #0
 80097ca:	82fb      	strh	r3, [r7, #22]
 80097cc:	e01a      	b.n	8009804 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80097d4:	8afb      	ldrh	r3, [r7, #22]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	4413      	add	r3, r2
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	f7ff fb14 	bl	8008e0a <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 80097e2:	8afb      	ldrh	r3, [r7, #22]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	4413      	add	r3, r2
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b0a      	cmp	r3, #10
 80097ec:	d107      	bne.n	80097fe <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80097f4:	3301      	adds	r3, #1
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80097fe:	8afb      	ldrh	r3, [r7, #22]
 8009800:	3301      	adds	r3, #1
 8009802:	82fb      	strh	r3, [r7, #22]
 8009804:	8afa      	ldrh	r2, [r7, #22]
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	429a      	cmp	r2, r3
 800980a:	d3e0      	bcc.n	80097ce <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009814:	223f      	movs	r2, #63	; 0x3f
 8009816:	409a      	lsls	r2, r3
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	1d1a      	adds	r2, r3, #4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2240      	movs	r2, #64	; 0x40
 8009834:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f042 0201 	orr.w	r2, r2, #1
 800984c:	601a      	str	r2, [r3, #0]
	}
}
 800984e:	bf00      	nop
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	460b      	mov	r3, r1
 8009860:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff facc 	bl	8008e0a <RB_Write>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8009878:	2301      	movs	r3, #1
 800987a:	e000      	b.n	800987e <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01f      	beq.n	80098de <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800989e:	e013      	b.n	80098c8 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b0a      	cmp	r3, #10
 80098a6:	d10c      	bne.n	80098c2 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 80098be:	2300      	movs	r3, #0
 80098c0:	e00e      	b.n	80098e0 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3301      	adds	r3, #1
 80098c6:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3344      	adds	r3, #68	; 0x44
 80098cc:	68f9      	ldr	r1, [r7, #12]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fa72 	bl	8008db8 <RB_Read>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0e2      	beq.n	80098a0 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 80098de:	2301      	movs	r3, #1
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80098f6:	e012      	b.n	800991e <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff ffaa 	bl	8009856 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8009908:	7afb      	ldrb	r3, [r7, #11]
 800990a:	2b0a      	cmp	r3, #10
 800990c:	d107      	bne.n	800991e <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009914:	3301      	adds	r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	72fb      	strb	r3, [r7, #11]
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UARTDMA_Print+0x10>
		}
	}
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009960:	2300      	movs	r3, #0
 8009962:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d028      	beq.n	80099c6 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009974:	e013      	b.n	800999e <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8009976:	7b7b      	ldrb	r3, [r7, #13]
 8009978:	2b0a      	cmp	r3, #10
 800997a:	d107      	bne.n	800998c <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009982:	3b01      	subs	r3, #1
 8009984:	b2da      	uxtb	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800998c:	89fb      	ldrh	r3, [r7, #14]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	81fa      	strh	r2, [r7, #14]
 8009992:	4619      	mov	r1, r3
 8009994:	7b7a      	ldrb	r2, [r7, #13]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	440b      	add	r3, r1
 800999a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f203 1347 	addw	r3, r3, #327	; 0x147
 80099a4:	f107 020d 	add.w	r2, r7, #13
 80099a8:	4611      	mov	r1, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fa04 	bl	8008db8 <RB_Read>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0df      	beq.n	8009976 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	33c7      	adds	r3, #199	; 0xc7
 80099be:	89fa      	ldrh	r2, [r7, #14]
 80099c0:	4619      	mov	r1, r3
 80099c2:	f005 ffd9 	bl	800f978 <HAL_UART_Transmit_DMA>
	}
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0210 	orr.w	r2, r2, #16
 80099f0:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0210 	orr.w	r2, r2, #16
 8009a08:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0210 	orr.w	r2, r2, #16
 8009a20:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	2240      	movs	r2, #64	; 0x40
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f006 f821 	bl	800fa74 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0208 	bic.w	r2, r2, #8
 8009a48:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 0208 	bic.w	r2, r2, #8
 8009a60:	601a      	str	r2, [r3, #0]
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009a70:	4b11      	ldr	r3, [pc, #68]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a72:	4a12      	ldr	r2, [pc, #72]	; (8009abc <MX_USART1_UART_Init+0x50>)
 8009a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a92:	220c      	movs	r2, #12
 8009a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a96:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a9c:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009aa2:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <MX_USART1_UART_Init+0x4c>)
 8009aa4:	f005 ff1a 	bl	800f8dc <HAL_UART_Init>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009aae:	f7fc f831 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000be4 	.word	0x20000be4
 8009abc:	40011000 	.word	0x40011000

08009ac0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009ac4:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009ac6:	4a12      	ldr	r2, [pc, #72]	; (8009b10 <MX_USART2_UART_Init+0x50>)
 8009ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009aca:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009ad8:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009ae4:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009ae6:	220c      	movs	r2, #12
 8009ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009aea:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009af6:	4805      	ldr	r0, [pc, #20]	; (8009b0c <MX_USART2_UART_Init+0x4c>)
 8009af8:	f005 fef0 	bl	800f8dc <HAL_UART_Init>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009b02:	f7fc f807 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009b06:	bf00      	nop
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000c28 	.word	0x20000c28
 8009b10:	40004400 	.word	0x40004400

08009b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08c      	sub	sp, #48	; 0x30
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b1c:	f107 031c 	add.w	r3, r7, #28
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	609a      	str	r2, [r3, #8]
 8009b28:	60da      	str	r2, [r3, #12]
 8009b2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a59      	ldr	r2, [pc, #356]	; (8009c98 <HAL_UART_MspInit+0x184>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	f040 80c0 	bne.w	8009cb8 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61bb      	str	r3, [r7, #24]
 8009b3c:	4b57      	ldr	r3, [pc, #348]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b40:	4a56      	ldr	r2, [pc, #344]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b42:	f043 0310 	orr.w	r3, r3, #16
 8009b46:	6453      	str	r3, [r2, #68]	; 0x44
 8009b48:	4b54      	ldr	r3, [pc, #336]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	61bb      	str	r3, [r7, #24]
 8009b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	4b50      	ldr	r3, [pc, #320]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5c:	4a4f      	ldr	r2, [pc, #316]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	6313      	str	r3, [r2, #48]	; 0x30
 8009b64:	4b4d      	ldr	r3, [pc, #308]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b70:	2300      	movs	r3, #0
 8009b72:	613b      	str	r3, [r7, #16]
 8009b74:	4b49      	ldr	r3, [pc, #292]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	4a48      	ldr	r2, [pc, #288]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b7a:	f043 0302 	orr.w	r3, r3, #2
 8009b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8009b80:	4b46      	ldr	r3, [pc, #280]	; (8009c9c <HAL_UART_MspInit+0x188>)
 8009b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 8009b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b92:	2302      	movs	r3, #2
 8009b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b9e:	2307      	movs	r3, #7
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009ba2:	f107 031c 	add.w	r3, r7, #28
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	483d      	ldr	r0, [pc, #244]	; (8009ca0 <HAL_UART_MspInit+0x18c>)
 8009baa:	f000 ff95 	bl	800aad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 8009bae:	2380      	movs	r3, #128	; 0x80
 8009bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009bbe:	2307      	movs	r3, #7
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009bc2:	f107 031c 	add.w	r3, r7, #28
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4836      	ldr	r0, [pc, #216]	; (8009ca4 <HAL_UART_MspInit+0x190>)
 8009bca:	f000 ff85 	bl	800aad8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009bce:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bd0:	4a36      	ldr	r2, [pc, #216]	; (8009cac <HAL_UART_MspInit+0x198>)
 8009bd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009bd4:	4b34      	ldr	r3, [pc, #208]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009bda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bdc:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009be8:	4b2f      	ldr	r3, [pc, #188]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bf0:	4b2d      	ldr	r3, [pc, #180]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009bfc:	4b2a      	ldr	r3, [pc, #168]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009c02:	4b29      	ldr	r3, [pc, #164]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c08:	4b27      	ldr	r3, [pc, #156]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009c0e:	4826      	ldr	r0, [pc, #152]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009c10:	f000 fb52 	bl	800a2b8 <HAL_DMA_Init>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8009c1a:	f7fb ff7b 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a21      	ldr	r2, [pc, #132]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38
 8009c24:	4a20      	ldr	r2, [pc, #128]	; (8009ca8 <HAL_UART_MspInit+0x194>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009c2a:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c2c:	4a21      	ldr	r2, [pc, #132]	; (8009cb4 <HAL_UART_MspInit+0x1a0>)
 8009c2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009c30:	4b1f      	ldr	r3, [pc, #124]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c36:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c38:	4b1d      	ldr	r3, [pc, #116]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c3a:	2240      	movs	r2, #64	; 0x40
 8009c3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c3e:	4b1c      	ldr	r3, [pc, #112]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c4c:	4b18      	ldr	r3, [pc, #96]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c52:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c5e:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c64:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009c6a:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c6c:	f000 fb24 	bl	800a2b8 <HAL_DMA_Init>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8009c76:	f7fb ff4d 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c7e:	635a      	str	r2, [r3, #52]	; 0x34
 8009c80:	4a0b      	ldr	r2, [pc, #44]	; (8009cb0 <HAL_UART_MspInit+0x19c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	2025      	movs	r0, #37	; 0x25
 8009c8c:	f000 fab3 	bl	800a1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009c90:	2025      	movs	r0, #37	; 0x25
 8009c92:	f000 facc 	bl	800a22e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009c96:	e09d      	b.n	8009dd4 <HAL_UART_MspInit+0x2c0>
 8009c98:	40011000 	.word	0x40011000
 8009c9c:	40023800 	.word	0x40023800
 8009ca0:	40020000 	.word	0x40020000
 8009ca4:	40020400 	.word	0x40020400
 8009ca8:	20000b24 	.word	0x20000b24
 8009cac:	40026440 	.word	0x40026440
 8009cb0:	20000ac4 	.word	0x20000ac4
 8009cb4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a47      	ldr	r2, [pc, #284]	; (8009ddc <HAL_UART_MspInit+0x2c8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	f040 8088 	bne.w	8009dd4 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	4b45      	ldr	r3, [pc, #276]	; (8009de0 <HAL_UART_MspInit+0x2cc>)
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	4a44      	ldr	r2, [pc, #272]	; (8009de0 <HAL_UART_MspInit+0x2cc>)
 8009cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8009cd4:	4b42      	ldr	r3, [pc, #264]	; (8009de0 <HAL_UART_MspInit+0x2cc>)
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
 8009ce4:	4b3e      	ldr	r3, [pc, #248]	; (8009de0 <HAL_UART_MspInit+0x2cc>)
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	4a3d      	ldr	r2, [pc, #244]	; (8009de0 <HAL_UART_MspInit+0x2cc>)
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	6313      	str	r3, [r2, #48]	; 0x30
 8009cf0:	4b3b      	ldr	r3, [pc, #236]	; (8009de0 <HAL_UART_MspInit+0x2cc>)
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	60bb      	str	r3, [r7, #8]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d00:	2302      	movs	r3, #2
 8009d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009d0c:	2307      	movs	r3, #7
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d10:	f107 031c 	add.w	r3, r7, #28
 8009d14:	4619      	mov	r1, r3
 8009d16:	4833      	ldr	r0, [pc, #204]	; (8009de4 <HAL_UART_MspInit+0x2d0>)
 8009d18:	f000 fede 	bl	800aad8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009d1c:	4b32      	ldr	r3, [pc, #200]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d1e:	4a33      	ldr	r2, [pc, #204]	; (8009dec <HAL_UART_MspInit+0x2d8>)
 8009d20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009d22:	4b31      	ldr	r3, [pc, #196]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d2a:	4b2f      	ldr	r3, [pc, #188]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d30:	4b2d      	ldr	r3, [pc, #180]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009d36:	4b2c      	ldr	r3, [pc, #176]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d3e:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d44:	4b28      	ldr	r3, [pc, #160]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009d4a:	4b27      	ldr	r3, [pc, #156]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d56:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009d5c:	4822      	ldr	r0, [pc, #136]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d5e:	f000 faab 	bl	800a2b8 <HAL_DMA_Init>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8009d68:	f7fb fed4 	bl	8005b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1e      	ldr	r2, [pc, #120]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d70:	639a      	str	r2, [r3, #56]	; 0x38
 8009d72:	4a1d      	ldr	r2, [pc, #116]	; (8009de8 <HAL_UART_MspInit+0x2d4>)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8009d78:	4b1d      	ldr	r3, [pc, #116]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009d7a:	4a1e      	ldr	r2, [pc, #120]	; (8009df4 <HAL_UART_MspInit+0x2e0>)
 8009d7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8009d7e:	4b1c      	ldr	r3, [pc, #112]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d84:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d86:	4b1a      	ldr	r3, [pc, #104]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009d88:	2240      	movs	r2, #64	; 0x40
 8009d8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d8c:	4b18      	ldr	r3, [pc, #96]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009d92:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d98:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d9a:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009da0:	4b13      	ldr	r3, [pc, #76]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009da6:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009dac:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009db2:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009db8:	480d      	ldr	r0, [pc, #52]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009dba:	f000 fa7d 	bl	800a2b8 <HAL_DMA_Init>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8009dc4:	f7fb fea6 	bl	8005b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8009dce:	4a08      	ldr	r2, [pc, #32]	; (8009df0 <HAL_UART_MspInit+0x2dc>)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009dd4:	bf00      	nop
 8009dd6:	3730      	adds	r7, #48	; 0x30
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	40004400 	.word	0x40004400
 8009de0:	40023800 	.word	0x40023800
 8009de4:	40020000 	.word	0x40020000
 8009de8:	20000a64 	.word	0x20000a64
 8009dec:	40026088 	.word	0x40026088
 8009df0:	20000b84 	.word	0x20000b84
 8009df4:	400260a0 	.word	0x400260a0

08009df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009dfc:	480d      	ldr	r0, [pc, #52]	; (8009e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009dfe:	490e      	ldr	r1, [pc, #56]	; (8009e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009e00:	4a0e      	ldr	r2, [pc, #56]	; (8009e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e04:	e002      	b.n	8009e0c <LoopCopyDataInit>

08009e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e0a:	3304      	adds	r3, #4

08009e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e10:	d3f9      	bcc.n	8009e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e12:	4a0b      	ldr	r2, [pc, #44]	; (8009e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009e14:	4c0b      	ldr	r4, [pc, #44]	; (8009e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e18:	e001      	b.n	8009e1e <LoopFillZerobss>

08009e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e1c:	3204      	adds	r2, #4

08009e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e20:	d3fb      	bcc.n	8009e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009e22:	f7ff fb45 	bl	80094b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e26:	f006 fea7 	bl	8010b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e2a:	f7fb fd37 	bl	800589c <main>
  bx  lr    
 8009e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e38:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8009e3c:	08029480 	.word	0x08029480
  ldr r2, =_sbss
 8009e40:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009e44:	20000c80 	.word	0x20000c80

08009e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e48:	e7fe      	b.n	8009e48 <ADC_IRQHandler>
	...

08009e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e50:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <HAL_Init+0x40>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0d      	ldr	r2, [pc, #52]	; (8009e8c <HAL_Init+0x40>)
 8009e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e5c:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <HAL_Init+0x40>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <HAL_Init+0x40>)
 8009e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e68:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <HAL_Init+0x40>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a07      	ldr	r2, [pc, #28]	; (8009e8c <HAL_Init+0x40>)
 8009e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e74:	2003      	movs	r0, #3
 8009e76:	f000 f9b3 	bl	800a1e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f000 f808 	bl	8009e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e80:	f7ff f95e 	bl	8009140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	40023c00 	.word	0x40023c00

08009e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e98:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <HAL_InitTick+0x54>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <HAL_InitTick+0x58>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 f9d9 	bl	800a266 <HAL_SYSTICK_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e00e      	b.n	8009edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b0f      	cmp	r3, #15
 8009ec2:	d80a      	bhi.n	8009eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	f000 f993 	bl	800a1f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ed0:	4a06      	ldr	r2, [pc, #24]	; (8009eec <HAL_InitTick+0x5c>)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e000      	b.n	8009edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20000034 	.word	0x20000034
 8009ee8:	2000003c 	.word	0x2000003c
 8009eec:	20000038 	.word	0x20000038

08009ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ef4:	4b06      	ldr	r3, [pc, #24]	; (8009f10 <HAL_IncTick+0x20>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <HAL_IncTick+0x24>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4413      	add	r3, r2
 8009f00:	4a04      	ldr	r2, [pc, #16]	; (8009f14 <HAL_IncTick+0x24>)
 8009f02:	6013      	str	r3, [r2, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	2000003c 	.word	0x2000003c
 8009f14:	20000c6c 	.word	0x20000c6c

08009f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <HAL_GetTick+0x14>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000c6c 	.word	0x20000c6c

08009f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f38:	f7ff ffee 	bl	8009f18 <HAL_GetTick>
 8009f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f48:	d005      	beq.n	8009f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <HAL_Delay+0x44>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4413      	add	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f56:	bf00      	nop
 8009f58:	f7ff ffde 	bl	8009f18 <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d8f7      	bhi.n	8009f58 <HAL_Delay+0x28>
  {
  }
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	2000003c 	.word	0x2000003c

08009f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <__NVIC_SetPriorityGrouping+0x44>)
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f94:	4013      	ands	r3, r2
 8009f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009faa:	4a04      	ldr	r2, [pc, #16]	; (8009fbc <__NVIC_SetPriorityGrouping+0x44>)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	60d3      	str	r3, [r2, #12]
}
 8009fb0:	bf00      	nop
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	e000ed00 	.word	0xe000ed00

08009fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fc4:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	0a1b      	lsrs	r3, r3, #8
 8009fca:	f003 0307 	and.w	r3, r3, #7
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	e000ed00 	.word	0xe000ed00

08009fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	db0b      	blt.n	800a006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	f003 021f 	and.w	r2, r3, #31
 8009ff4:	4907      	ldr	r1, [pc, #28]	; (800a014 <__NVIC_EnableIRQ+0x38>)
 8009ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	fa00 f202 	lsl.w	r2, r0, r2
 800a002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	e000e100 	.word	0xe000e100

0800a018 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a026:	2b00      	cmp	r3, #0
 800a028:	db12      	blt.n	800a050 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	f003 021f 	and.w	r2, r3, #31
 800a030:	490a      	ldr	r1, [pc, #40]	; (800a05c <__NVIC_DisableIRQ+0x44>)
 800a032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a036:	095b      	lsrs	r3, r3, #5
 800a038:	2001      	movs	r0, #1
 800a03a:	fa00 f202 	lsl.w	r2, r0, r2
 800a03e:	3320      	adds	r3, #32
 800a040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a044:	f3bf 8f4f 	dsb	sy
}
 800a048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a04a:	f3bf 8f6f 	isb	sy
}
 800a04e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	e000e100 	.word	0xe000e100

0800a060 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	db0e      	blt.n	800a090 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800a072:	4a0b      	ldr	r2, [pc, #44]	; (800a0a0 <__NVIC_GetPendingIRQ+0x40>)
 800a074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a078:	095b      	lsrs	r3, r3, #5
 800a07a:	3340      	adds	r3, #64	; 0x40
 800a07c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	f003 031f 	and.w	r3, r3, #31
 800a086:	fa22 f303 	lsr.w	r3, r2, r3
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	e000      	b.n	800a092 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800a090:	2300      	movs	r3, #0
  }
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	e000e100 	.word	0xe000e100

0800a0a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	db0c      	blt.n	800a0d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	f003 021f 	and.w	r2, r3, #31
 800a0bc:	4907      	ldr	r1, [pc, #28]	; (800a0dc <__NVIC_ClearPendingIRQ+0x38>)
 800a0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	fa00 f202 	lsl.w	r2, r0, r2
 800a0ca:	3360      	adds	r3, #96	; 0x60
 800a0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	e000e100 	.word	0xe000e100

0800a0e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	db0a      	blt.n	800a10a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	490c      	ldr	r1, [pc, #48]	; (800a12c <__NVIC_SetPriority+0x4c>)
 800a0fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0fe:	0112      	lsls	r2, r2, #4
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	440b      	add	r3, r1
 800a104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a108:	e00a      	b.n	800a120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	4908      	ldr	r1, [pc, #32]	; (800a130 <__NVIC_SetPriority+0x50>)
 800a110:	79fb      	ldrb	r3, [r7, #7]
 800a112:	f003 030f 	and.w	r3, r3, #15
 800a116:	3b04      	subs	r3, #4
 800a118:	0112      	lsls	r2, r2, #4
 800a11a:	b2d2      	uxtb	r2, r2
 800a11c:	440b      	add	r3, r1
 800a11e:	761a      	strb	r2, [r3, #24]
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	e000e100 	.word	0xe000e100
 800a130:	e000ed00 	.word	0xe000ed00

0800a134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a134:	b480      	push	{r7}
 800a136:	b089      	sub	sp, #36	; 0x24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	f1c3 0307 	rsb	r3, r3, #7
 800a14e:	2b04      	cmp	r3, #4
 800a150:	bf28      	it	cs
 800a152:	2304      	movcs	r3, #4
 800a154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	3304      	adds	r3, #4
 800a15a:	2b06      	cmp	r3, #6
 800a15c:	d902      	bls.n	800a164 <NVIC_EncodePriority+0x30>
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	3b03      	subs	r3, #3
 800a162:	e000      	b.n	800a166 <NVIC_EncodePriority+0x32>
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a168:	f04f 32ff 	mov.w	r2, #4294967295
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	43da      	mvns	r2, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	401a      	ands	r2, r3
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a17c:	f04f 31ff 	mov.w	r1, #4294967295
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	fa01 f303 	lsl.w	r3, r1, r3
 800a186:	43d9      	mvns	r1, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a18c:	4313      	orrs	r3, r2
         );
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3724      	adds	r7, #36	; 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
	...

0800a19c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1ac:	d301      	bcc.n	800a1b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e00f      	b.n	800a1d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a1b2:	4a0a      	ldr	r2, [pc, #40]	; (800a1dc <SysTick_Config+0x40>)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a1ba:	210f      	movs	r1, #15
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	f7ff ff8e 	bl	800a0e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a1c4:	4b05      	ldr	r3, [pc, #20]	; (800a1dc <SysTick_Config+0x40>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <SysTick_Config+0x40>)
 800a1cc:	2207      	movs	r2, #7
 800a1ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	e000e010 	.word	0xe000e010

0800a1e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff fec5 	bl	8009f78 <__NVIC_SetPriorityGrouping>
}
 800a1ee:	bf00      	nop
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a208:	f7ff feda 	bl	8009fc0 <__NVIC_GetPriorityGrouping>
 800a20c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	68b9      	ldr	r1, [r7, #8]
 800a212:	6978      	ldr	r0, [r7, #20]
 800a214:	f7ff ff8e 	bl	800a134 <NVIC_EncodePriority>
 800a218:	4602      	mov	r2, r0
 800a21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a21e:	4611      	mov	r1, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff ff5d 	bl	800a0e0 <__NVIC_SetPriority>
}
 800a226:	bf00      	nop
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	4603      	mov	r3, r0
 800a236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff fecd 	bl	8009fdc <__NVIC_EnableIRQ>
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	4603      	mov	r3, r0
 800a252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff fedd 	bl	800a018 <__NVIC_DisableIRQ>
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff ff94 	bl	800a19c <SysTick_Config>
 800a274:	4603      	mov	r3, r0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	4603      	mov	r3, r0
 800a286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fee7 	bl	800a060 <__NVIC_GetPendingIRQ>
 800a292:	4603      	mov	r3, r0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a2a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff fefa 	bl	800a0a4 <__NVIC_ClearPendingIRQ>
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a2c4:	f7ff fe28 	bl	8009f18 <HAL_GetTick>
 800a2c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e099      	b.n	800a408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f022 0201 	bic.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a2f4:	e00f      	b.n	800a316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a2f6:	f7ff fe0f 	bl	8009f18 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b05      	cmp	r3, #5
 800a302:	d908      	bls.n	800a316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2220      	movs	r2, #32
 800a308:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2203      	movs	r2, #3
 800a30e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e078      	b.n	800a408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e8      	bne.n	800a2f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4b38      	ldr	r3, [pc, #224]	; (800a410 <HAL_DMA_Init+0x158>)
 800a330:	4013      	ands	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a34e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a35a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	4313      	orrs	r3, r2
 800a366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d107      	bne.n	800a380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a378:	4313      	orrs	r3, r2
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f023 0307 	bic.w	r3, r3, #7
 800a396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d117      	bne.n	800a3da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00e      	beq.n	800a3da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fb0f 	bl	800a9e0 <DMA_CheckFifoParam>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d008      	beq.n	800a3da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2240      	movs	r2, #64	; 0x40
 800a3cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e016      	b.n	800a408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fac6 	bl	800a974 <DMA_CalcBaseAndBitshift>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f0:	223f      	movs	r2, #63	; 0x3f
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	f010803f 	.word	0xf010803f

0800a414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <HAL_DMA_Start_IT+0x26>
 800a436:	2302      	movs	r3, #2
 800a438:	e040      	b.n	800a4bc <HAL_DMA_Start_IT+0xa8>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d12f      	bne.n	800a4ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2202      	movs	r2, #2
 800a452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fa58 	bl	800a918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a46c:	223f      	movs	r2, #63	; 0x3f
 800a46e:	409a      	lsls	r2, r3
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0216 	orr.w	r2, r2, #22
 800a482:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d007      	beq.n	800a49c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0208 	orr.w	r2, r2, #8
 800a49a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0201 	orr.w	r2, r2, #1
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	e005      	b.n	800a4ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a4d2:	f7ff fd21 	bl	8009f18 <HAL_GetTick>
 800a4d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d008      	beq.n	800a4f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2280      	movs	r2, #128	; 0x80
 800a4e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e052      	b.n	800a59c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0216 	bic.w	r2, r2, #22
 800a504:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	695a      	ldr	r2, [r3, #20]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a514:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d103      	bne.n	800a526 <HAL_DMA_Abort+0x62>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0208 	bic.w	r2, r2, #8
 800a534:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0201 	bic.w	r2, r2, #1
 800a544:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a546:	e013      	b.n	800a570 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a548:	f7ff fce6 	bl	8009f18 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b05      	cmp	r3, #5
 800a554:	d90c      	bls.n	800a570 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2220      	movs	r2, #32
 800a55a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2203      	movs	r2, #3
 800a560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e015      	b.n	800a59c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e4      	bne.n	800a548 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a582:	223f      	movs	r2, #63	; 0x3f
 800a584:	409a      	lsls	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d004      	beq.n	800a5c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2280      	movs	r2, #128	; 0x80
 800a5bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e00c      	b.n	800a5dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5f4:	4b92      	ldr	r3, [pc, #584]	; (800a840 <HAL_DMA_IRQHandler+0x258>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a92      	ldr	r2, [pc, #584]	; (800a844 <HAL_DMA_IRQHandler+0x25c>)
 800a5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fe:	0a9b      	lsrs	r3, r3, #10
 800a600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a612:	2208      	movs	r2, #8
 800a614:	409a      	lsls	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4013      	ands	r3, r2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d01a      	beq.n	800a654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d013      	beq.n	800a654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0204 	bic.w	r2, r2, #4
 800a63a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a640:	2208      	movs	r2, #8
 800a642:	409a      	lsls	r2, r3
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64c:	f043 0201 	orr.w	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a658:	2201      	movs	r2, #1
 800a65a:	409a      	lsls	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4013      	ands	r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d012      	beq.n	800a68a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a676:	2201      	movs	r2, #1
 800a678:	409a      	lsls	r2, r3
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a682:	f043 0202 	orr.w	r2, r3, #2
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a68e:	2204      	movs	r2, #4
 800a690:	409a      	lsls	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4013      	ands	r3, r2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d012      	beq.n	800a6c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ac:	2204      	movs	r2, #4
 800a6ae:	409a      	lsls	r2, r3
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b8:	f043 0204 	orr.w	r2, r3, #4
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	409a      	lsls	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d043      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d03c      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e2:	2210      	movs	r2, #16
 800a6e4:	409a      	lsls	r2, r3
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d018      	beq.n	800a72a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d108      	bne.n	800a718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d024      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	e01f      	b.n	800a758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01b      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
 800a728:	e016      	b.n	800a758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a734:	2b00      	cmp	r3, #0
 800a736:	d107      	bne.n	800a748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0208 	bic.w	r2, r2, #8
 800a746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75c:	2220      	movs	r2, #32
 800a75e:	409a      	lsls	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4013      	ands	r3, r2
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 808e 	beq.w	800a886 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0310 	and.w	r3, r3, #16
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 8086 	beq.w	800a886 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a77e:	2220      	movs	r2, #32
 800a780:	409a      	lsls	r2, r3
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b05      	cmp	r3, #5
 800a790:	d136      	bne.n	800a800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0216 	bic.w	r2, r2, #22
 800a7a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695a      	ldr	r2, [r3, #20]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d103      	bne.n	800a7c2 <HAL_DMA_IRQHandler+0x1da>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 0208 	bic.w	r2, r2, #8
 800a7d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d6:	223f      	movs	r2, #63	; 0x3f
 800a7d8:	409a      	lsls	r2, r3
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d07d      	beq.n	800a8f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
        }
        return;
 800a7fe:	e078      	b.n	800a8f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d01c      	beq.n	800a848 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a820:	2b00      	cmp	r3, #0
 800a822:	d030      	beq.n	800a886 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
 800a82c:	e02b      	b.n	800a886 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d027      	beq.n	800a886 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	e022      	b.n	800a886 <HAL_DMA_IRQHandler+0x29e>
 800a840:	20000034 	.word	0x20000034
 800a844:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10f      	bne.n	800a876 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0210 	bic.w	r2, r2, #16
 800a864:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d032      	beq.n	800a8f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d022      	beq.n	800a8e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2205      	movs	r2, #5
 800a89e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0201 	bic.w	r2, r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60bb      	str	r3, [r7, #8]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d307      	bcc.n	800a8ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f2      	bne.n	800a8b2 <HAL_DMA_IRQHandler+0x2ca>
 800a8cc:	e000      	b.n	800a8d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a8ce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
 800a8f0:	e000      	b.n	800a8f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a8f2:	bf00      	nop
    }
  }
}
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop

0800a8fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a90a:	b2db      	uxtb	r3, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d108      	bne.n	800a958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a956:	e007      	b.n	800a968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	60da      	str	r2, [r3, #12]
}
 800a968:	bf00      	nop
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	b2db      	uxtb	r3, r3
 800a982:	3b10      	subs	r3, #16
 800a984:	4a14      	ldr	r2, [pc, #80]	; (800a9d8 <DMA_CalcBaseAndBitshift+0x64>)
 800a986:	fba2 2303 	umull	r2, r3, r2, r3
 800a98a:	091b      	lsrs	r3, r3, #4
 800a98c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a98e:	4a13      	ldr	r2, [pc, #76]	; (800a9dc <DMA_CalcBaseAndBitshift+0x68>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4413      	add	r3, r2
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d909      	bls.n	800a9b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9aa:	f023 0303 	bic.w	r3, r3, #3
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	659a      	str	r2, [r3, #88]	; 0x58
 800a9b4:	e007      	b.n	800a9c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	aaaaaaab 	.word	0xaaaaaaab
 800a9dc:	08028f58 	.word	0x08028f58

0800a9e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d11f      	bne.n	800aa3a <DMA_CheckFifoParam+0x5a>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	d856      	bhi.n	800aaae <DMA_CheckFifoParam+0xce>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <DMA_CheckFifoParam+0x28>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa2b 	.word	0x0800aa2b
 800aa10:	0800aa19 	.word	0x0800aa19
 800aa14:	0800aaaf 	.word	0x0800aaaf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d046      	beq.n	800aab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa28:	e043      	b.n	800aab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa32:	d140      	bne.n	800aab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa38:	e03d      	b.n	800aab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa42:	d121      	bne.n	800aa88 <DMA_CheckFifoParam+0xa8>
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d837      	bhi.n	800aaba <DMA_CheckFifoParam+0xda>
 800aa4a:	a201      	add	r2, pc, #4	; (adr r2, 800aa50 <DMA_CheckFifoParam+0x70>)
 800aa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa50:	0800aa61 	.word	0x0800aa61
 800aa54:	0800aa67 	.word	0x0800aa67
 800aa58:	0800aa61 	.word	0x0800aa61
 800aa5c:	0800aa79 	.word	0x0800aa79
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
      break;
 800aa64:	e030      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d025      	beq.n	800aabe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa76:	e022      	b.n	800aabe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa80:	d11f      	bne.n	800aac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa86:	e01c      	b.n	800aac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d903      	bls.n	800aa96 <DMA_CheckFifoParam+0xb6>
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d003      	beq.n	800aa9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa94:	e018      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9a:	e015      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00e      	beq.n	800aac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aaac:	e00b      	b.n	800aac6 <DMA_CheckFifoParam+0xe6>
      break;
 800aaae:	bf00      	nop
 800aab0:	e00a      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      break;
 800aab2:	bf00      	nop
 800aab4:	e008      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      break;
 800aab6:	bf00      	nop
 800aab8:	e006      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      break;
 800aaba:	bf00      	nop
 800aabc:	e004      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      break;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      break;   
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <DMA_CheckFifoParam+0xe8>
      break;
 800aac6:	bf00      	nop
    }
  } 
  
  return status; 
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop

0800aad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aad8:	b480      	push	{r7}
 800aada:	b089      	sub	sp, #36	; 0x24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61fb      	str	r3, [r7, #28]
 800aaf2:	e159      	b.n	800ada8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	4013      	ands	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	f040 8148 	bne.w	800ada2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d005      	beq.n	800ab2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d130      	bne.n	800ab8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	2203      	movs	r2, #3
 800ab36:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3a:	43db      	mvns	r3, r3
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4e:	69ba      	ldr	r2, [r7, #24]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab60:	2201      	movs	r2, #1
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	fa02 f303 	lsl.w	r3, r2, r3
 800ab68:	43db      	mvns	r3, r3
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	091b      	lsrs	r3, r3, #4
 800ab76:	f003 0201 	and.w	r2, r3, #1
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	f003 0303 	and.w	r3, r3, #3
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d017      	beq.n	800abc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	2203      	movs	r2, #3
 800aba4:	fa02 f303 	lsl.w	r3, r2, r3
 800aba8:	43db      	mvns	r3, r3
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	4013      	ands	r3, r2
 800abae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f003 0303 	and.w	r3, r3, #3
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d123      	bne.n	800ac1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	08da      	lsrs	r2, r3, #3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3208      	adds	r2, #8
 800abdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f003 0307 	and.w	r3, r3, #7
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	220f      	movs	r2, #15
 800abec:	fa02 f303 	lsl.w	r3, r2, r3
 800abf0:	43db      	mvns	r3, r3
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	4013      	ands	r3, r2
 800abf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	fa02 f303 	lsl.w	r3, r2, r3
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	08da      	lsrs	r2, r3, #3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3208      	adds	r2, #8
 800ac16:	69b9      	ldr	r1, [r7, #24]
 800ac18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	2203      	movs	r2, #3
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	43db      	mvns	r3, r3
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	4013      	ands	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f003 0203 	and.w	r2, r3, #3
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 80a2 	beq.w	800ada2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	4b57      	ldr	r3, [pc, #348]	; (800adc0 <HAL_GPIO_Init+0x2e8>)
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	4a56      	ldr	r2, [pc, #344]	; (800adc0 <HAL_GPIO_Init+0x2e8>)
 800ac68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac6c:	6453      	str	r3, [r2, #68]	; 0x44
 800ac6e:	4b54      	ldr	r3, [pc, #336]	; (800adc0 <HAL_GPIO_Init+0x2e8>)
 800ac70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac7a:	4a52      	ldr	r2, [pc, #328]	; (800adc4 <HAL_GPIO_Init+0x2ec>)
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	089b      	lsrs	r3, r3, #2
 800ac80:	3302      	adds	r3, #2
 800ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	220f      	movs	r2, #15
 800ac92:	fa02 f303 	lsl.w	r3, r2, r3
 800ac96:	43db      	mvns	r3, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a49      	ldr	r2, [pc, #292]	; (800adc8 <HAL_GPIO_Init+0x2f0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d019      	beq.n	800acda <HAL_GPIO_Init+0x202>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a48      	ldr	r2, [pc, #288]	; (800adcc <HAL_GPIO_Init+0x2f4>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d013      	beq.n	800acd6 <HAL_GPIO_Init+0x1fe>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a47      	ldr	r2, [pc, #284]	; (800add0 <HAL_GPIO_Init+0x2f8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00d      	beq.n	800acd2 <HAL_GPIO_Init+0x1fa>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a46      	ldr	r2, [pc, #280]	; (800add4 <HAL_GPIO_Init+0x2fc>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d007      	beq.n	800acce <HAL_GPIO_Init+0x1f6>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a45      	ldr	r2, [pc, #276]	; (800add8 <HAL_GPIO_Init+0x300>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d101      	bne.n	800acca <HAL_GPIO_Init+0x1f2>
 800acc6:	2304      	movs	r3, #4
 800acc8:	e008      	b.n	800acdc <HAL_GPIO_Init+0x204>
 800acca:	2307      	movs	r3, #7
 800accc:	e006      	b.n	800acdc <HAL_GPIO_Init+0x204>
 800acce:	2303      	movs	r3, #3
 800acd0:	e004      	b.n	800acdc <HAL_GPIO_Init+0x204>
 800acd2:	2302      	movs	r3, #2
 800acd4:	e002      	b.n	800acdc <HAL_GPIO_Init+0x204>
 800acd6:	2301      	movs	r3, #1
 800acd8:	e000      	b.n	800acdc <HAL_GPIO_Init+0x204>
 800acda:	2300      	movs	r3, #0
 800acdc:	69fa      	ldr	r2, [r7, #28]
 800acde:	f002 0203 	and.w	r2, r2, #3
 800ace2:	0092      	lsls	r2, r2, #2
 800ace4:	4093      	lsls	r3, r2
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	4313      	orrs	r3, r2
 800acea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800acec:	4935      	ldr	r1, [pc, #212]	; (800adc4 <HAL_GPIO_Init+0x2ec>)
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	089b      	lsrs	r3, r3, #2
 800acf2:	3302      	adds	r3, #2
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800acfa:	4b38      	ldr	r3, [pc, #224]	; (800addc <HAL_GPIO_Init+0x304>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	43db      	mvns	r3, r3
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	4013      	ands	r3, r2
 800ad08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ad1e:	4a2f      	ldr	r2, [pc, #188]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ad24:	4b2d      	ldr	r3, [pc, #180]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	43db      	mvns	r3, r3
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	4013      	ands	r3, r2
 800ad32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad48:	4a24      	ldr	r2, [pc, #144]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad4e:	4b23      	ldr	r3, [pc, #140]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	43db      	mvns	r3, r3
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad72:	4a1a      	ldr	r2, [pc, #104]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad78:	4b18      	ldr	r3, [pc, #96]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	43db      	mvns	r3, r3
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	4013      	ands	r3, r2
 800ad86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d003      	beq.n	800ad9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad9c:	4a0f      	ldr	r2, [pc, #60]	; (800addc <HAL_GPIO_Init+0x304>)
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	3301      	adds	r3, #1
 800ada6:	61fb      	str	r3, [r7, #28]
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	2b0f      	cmp	r3, #15
 800adac:	f67f aea2 	bls.w	800aaf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	3724      	adds	r7, #36	; 0x24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	40023800 	.word	0x40023800
 800adc4:	40013800 	.word	0x40013800
 800adc8:	40020000 	.word	0x40020000
 800adcc:	40020400 	.word	0x40020400
 800add0:	40020800 	.word	0x40020800
 800add4:	40020c00 	.word	0x40020c00
 800add8:	40021000 	.word	0x40021000
 800addc:	40013c00 	.word	0x40013c00

0800ade0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	887b      	ldrh	r3, [r7, #2]
 800adf2:	4013      	ands	r3, r2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800adf8:	2301      	movs	r3, #1
 800adfa:	73fb      	strb	r3, [r7, #15]
 800adfc:	e001      	b.n	800ae02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	807b      	strh	r3, [r7, #2]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae20:	787b      	ldrb	r3, [r7, #1]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae26:	887a      	ldrh	r2, [r7, #2]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ae2c:	e003      	b.n	800ae36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ae2e:	887b      	ldrh	r3, [r7, #2]
 800ae30:	041a      	lsls	r2, r3, #16
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	619a      	str	r2, [r3, #24]
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b085      	sub	sp, #20
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ae54:	887a      	ldrh	r2, [r7, #2]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	041a      	lsls	r2, r3, #16
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	43d9      	mvns	r1, r3
 800ae60:	887b      	ldrh	r3, [r7, #2]
 800ae62:	400b      	ands	r3, r1
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	619a      	str	r2, [r3, #24]
}
 800ae6a:	bf00      	nop
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ae82:	4b08      	ldr	r3, [pc, #32]	; (800aea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae84:	695a      	ldr	r2, [r3, #20]
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	4013      	ands	r3, r2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d006      	beq.n	800ae9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae8e:	4a05      	ldr	r2, [pc, #20]	; (800aea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae90:	88fb      	ldrh	r3, [r7, #6]
 800ae92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae94:	88fb      	ldrh	r3, [r7, #6]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fa fe28 	bl	8005aec <HAL_GPIO_EXTI_Callback>
  }
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	40013c00 	.word	0x40013c00

0800aea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e12b      	b.n	800b112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d106      	bne.n	800aed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fa fbda 	bl	8005688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2224      	movs	r2, #36	; 0x24
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 0201 	bic.w	r2, r2, #1
 800aeea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aefa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af0c:	f003 fcf0 	bl	800e8f0 <HAL_RCC_GetPCLK1Freq>
 800af10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	4a81      	ldr	r2, [pc, #516]	; (800b11c <HAL_I2C_Init+0x274>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d807      	bhi.n	800af2c <HAL_I2C_Init+0x84>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4a80      	ldr	r2, [pc, #512]	; (800b120 <HAL_I2C_Init+0x278>)
 800af20:	4293      	cmp	r3, r2
 800af22:	bf94      	ite	ls
 800af24:	2301      	movls	r3, #1
 800af26:	2300      	movhi	r3, #0
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	e006      	b.n	800af3a <HAL_I2C_Init+0x92>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4a7d      	ldr	r2, [pc, #500]	; (800b124 <HAL_I2C_Init+0x27c>)
 800af30:	4293      	cmp	r3, r2
 800af32:	bf94      	ite	ls
 800af34:	2301      	movls	r3, #1
 800af36:	2300      	movhi	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e0e7      	b.n	800b112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4a78      	ldr	r2, [pc, #480]	; (800b128 <HAL_I2C_Init+0x280>)
 800af46:	fba2 2303 	umull	r2, r3, r2, r3
 800af4a:	0c9b      	lsrs	r3, r3, #18
 800af4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	430a      	orrs	r2, r1
 800af60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	4a6a      	ldr	r2, [pc, #424]	; (800b11c <HAL_I2C_Init+0x274>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d802      	bhi.n	800af7c <HAL_I2C_Init+0xd4>
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	3301      	adds	r3, #1
 800af7a:	e009      	b.n	800af90 <HAL_I2C_Init+0xe8>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af82:	fb02 f303 	mul.w	r3, r2, r3
 800af86:	4a69      	ldr	r2, [pc, #420]	; (800b12c <HAL_I2C_Init+0x284>)
 800af88:	fba2 2303 	umull	r2, r3, r2, r3
 800af8c:	099b      	lsrs	r3, r3, #6
 800af8e:	3301      	adds	r3, #1
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	430b      	orrs	r3, r1
 800af96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800afa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	495c      	ldr	r1, [pc, #368]	; (800b11c <HAL_I2C_Init+0x274>)
 800afac:	428b      	cmp	r3, r1
 800afae:	d819      	bhi.n	800afe4 <HAL_I2C_Init+0x13c>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	1e59      	subs	r1, r3, #1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	fbb1 f3f3 	udiv	r3, r1, r3
 800afbe:	1c59      	adds	r1, r3, #1
 800afc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800afc4:	400b      	ands	r3, r1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <HAL_I2C_Init+0x138>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	1e59      	subs	r1, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	fbb1 f3f3 	udiv	r3, r1, r3
 800afd8:	3301      	adds	r3, #1
 800afda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afde:	e051      	b.n	800b084 <HAL_I2C_Init+0x1dc>
 800afe0:	2304      	movs	r3, #4
 800afe2:	e04f      	b.n	800b084 <HAL_I2C_Init+0x1dc>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d111      	bne.n	800b010 <HAL_I2C_Init+0x168>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	1e58      	subs	r0, r3, #1
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6859      	ldr	r1, [r3, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	440b      	add	r3, r1
 800affa:	fbb0 f3f3 	udiv	r3, r0, r3
 800affe:	3301      	adds	r3, #1
 800b000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b004:	2b00      	cmp	r3, #0
 800b006:	bf0c      	ite	eq
 800b008:	2301      	moveq	r3, #1
 800b00a:	2300      	movne	r3, #0
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	e012      	b.n	800b036 <HAL_I2C_Init+0x18e>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	1e58      	subs	r0, r3, #1
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6859      	ldr	r1, [r3, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	440b      	add	r3, r1
 800b01e:	0099      	lsls	r1, r3, #2
 800b020:	440b      	add	r3, r1
 800b022:	fbb0 f3f3 	udiv	r3, r0, r3
 800b026:	3301      	adds	r3, #1
 800b028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bf0c      	ite	eq
 800b030:	2301      	moveq	r3, #1
 800b032:	2300      	movne	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <HAL_I2C_Init+0x196>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e022      	b.n	800b084 <HAL_I2C_Init+0x1dc>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10e      	bne.n	800b064 <HAL_I2C_Init+0x1bc>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	1e58      	subs	r0, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6859      	ldr	r1, [r3, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	440b      	add	r3, r1
 800b054:	fbb0 f3f3 	udiv	r3, r0, r3
 800b058:	3301      	adds	r3, #1
 800b05a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b05e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b062:	e00f      	b.n	800b084 <HAL_I2C_Init+0x1dc>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	1e58      	subs	r0, r3, #1
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6859      	ldr	r1, [r3, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	440b      	add	r3, r1
 800b072:	0099      	lsls	r1, r3, #2
 800b074:	440b      	add	r3, r1
 800b076:	fbb0 f3f3 	udiv	r3, r0, r3
 800b07a:	3301      	adds	r3, #1
 800b07c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	6809      	ldr	r1, [r1, #0]
 800b088:	4313      	orrs	r3, r2
 800b08a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69da      	ldr	r2, [r3, #28]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b0b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6911      	ldr	r1, [r2, #16]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	68d2      	ldr	r2, [r2, #12]
 800b0be:	4311      	orrs	r1, r2
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	6812      	ldr	r2, [r2, #0]
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	695a      	ldr	r2, [r3, #20]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f042 0201 	orr.w	r2, r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	000186a0 	.word	0x000186a0
 800b120:	001e847f 	.word	0x001e847f
 800b124:	003d08ff 	.word	0x003d08ff
 800b128:	431bde83 	.word	0x431bde83
 800b12c:	10624dd3 	.word	0x10624dd3

0800b130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af02      	add	r7, sp, #8
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	461a      	mov	r2, r3
 800b13c:	460b      	mov	r3, r1
 800b13e:	817b      	strh	r3, [r7, #10]
 800b140:	4613      	mov	r3, r2
 800b142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b144:	f7fe fee8 	bl	8009f18 <HAL_GetTick>
 800b148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b20      	cmp	r3, #32
 800b154:	f040 80e0 	bne.w	800b318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	2319      	movs	r3, #25
 800b15e:	2201      	movs	r2, #1
 800b160:	4970      	ldr	r1, [pc, #448]	; (800b324 <HAL_I2C_Master_Transmit+0x1f4>)
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f002 fd7a 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b16e:	2302      	movs	r3, #2
 800b170:	e0d3      	b.n	800b31a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d101      	bne.n	800b180 <HAL_I2C_Master_Transmit+0x50>
 800b17c:	2302      	movs	r3, #2
 800b17e:	e0cc      	b.n	800b31a <HAL_I2C_Master_Transmit+0x1ea>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b01      	cmp	r3, #1
 800b194:	d007      	beq.n	800b1a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f042 0201 	orr.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2221      	movs	r2, #33	; 0x21
 800b1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2210      	movs	r2, #16
 800b1c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	893a      	ldrh	r2, [r7, #8]
 800b1d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4a50      	ldr	r2, [pc, #320]	; (800b328 <HAL_I2C_Master_Transmit+0x1f8>)
 800b1e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1e8:	8979      	ldrh	r1, [r7, #10]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	6a3a      	ldr	r2, [r7, #32]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f002 f9be 	bl	800d570 <I2C_MasterRequestWrite>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e08d      	b.n	800b31a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1fe:	2300      	movs	r3, #0
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	613b      	str	r3, [r7, #16]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b214:	e066      	b.n	800b2e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	6a39      	ldr	r1, [r7, #32]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f002 fdf4 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00d      	beq.n	800b242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	2b04      	cmp	r3, #4
 800b22c:	d107      	bne.n	800b23e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b23c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e06b      	b.n	800b31a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3b01      	subs	r3, #1
 800b260:	b29a      	uxth	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26a:	3b01      	subs	r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d11b      	bne.n	800b2b8 <HAL_I2C_Master_Transmit+0x188>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b284:	2b00      	cmp	r3, #0
 800b286:	d017      	beq.n	800b2b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	6a39      	ldr	r1, [r7, #32]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f002 fde4 	bl	800de8a <I2C_WaitOnBTFFlagUntilTimeout>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00d      	beq.n	800b2e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d107      	bne.n	800b2e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e01a      	b.n	800b31a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d194      	bne.n	800b216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	e000      	b.n	800b31a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b318:	2302      	movs	r3, #2
  }
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	00100002 	.word	0x00100002
 800b328:	ffff0000 	.word	0xffff0000

0800b32c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08c      	sub	sp, #48	; 0x30
 800b330:	af02      	add	r7, sp, #8
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	461a      	mov	r2, r3
 800b338:	460b      	mov	r3, r1
 800b33a:	817b      	strh	r3, [r7, #10]
 800b33c:	4613      	mov	r3, r2
 800b33e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b340:	f7fe fdea 	bl	8009f18 <HAL_GetTick>
 800b344:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b20      	cmp	r3, #32
 800b350:	f040 820b 	bne.w	800b76a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	2319      	movs	r3, #25
 800b35a:	2201      	movs	r2, #1
 800b35c:	497c      	ldr	r1, [pc, #496]	; (800b550 <HAL_I2C_Master_Receive+0x224>)
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f002 fc7c 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b36a:	2302      	movs	r3, #2
 800b36c:	e1fe      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_I2C_Master_Receive+0x50>
 800b378:	2302      	movs	r3, #2
 800b37a:	e1f7      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d007      	beq.n	800b3a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f042 0201 	orr.w	r2, r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2222      	movs	r2, #34	; 0x22
 800b3b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2210      	movs	r2, #16
 800b3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	893a      	ldrh	r2, [r7, #8]
 800b3d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4a5c      	ldr	r2, [pc, #368]	; (800b554 <HAL_I2C_Master_Receive+0x228>)
 800b3e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b3e4:	8979      	ldrh	r1, [r7, #10]
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f002 f942 	bl	800d674 <I2C_MasterRequestRead>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e1b8      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d113      	bne.n	800b42a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b402:	2300      	movs	r3, #0
 800b404:	623b      	str	r3, [r7, #32]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	623b      	str	r3, [r7, #32]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	623b      	str	r3, [r7, #32]
 800b416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	e18c      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d11b      	bne.n	800b46a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b442:	2300      	movs	r3, #0
 800b444:	61fb      	str	r3, [r7, #28]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	61fb      	str	r3, [r7, #28]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	61fb      	str	r3, [r7, #28]
 800b456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	e16c      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d11b      	bne.n	800b4aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b492:	2300      	movs	r3, #0
 800b494:	61bb      	str	r3, [r7, #24]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	61bb      	str	r3, [r7, #24]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	61bb      	str	r3, [r7, #24]
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	e14c      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	617b      	str	r3, [r7, #20]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	617b      	str	r3, [r7, #20]
 800b4ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b4d0:	e138      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	f200 80f1 	bhi.w	800b6be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d123      	bne.n	800b52c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f002 fd41 	bl	800df70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e139      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	691a      	ldr	r2, [r3, #16]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b520:	b29b      	uxth	r3, r3
 800b522:	3b01      	subs	r3, #1
 800b524:	b29a      	uxth	r2, r3
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b52a:	e10b      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b530:	2b02      	cmp	r3, #2
 800b532:	d14e      	bne.n	800b5d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	2200      	movs	r2, #0
 800b53c:	4906      	ldr	r1, [pc, #24]	; (800b558 <HAL_I2C_Master_Receive+0x22c>)
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f002 fb8c 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d008      	beq.n	800b55c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e10e      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
 800b54e:	bf00      	nop
 800b550:	00100002 	.word	0x00100002
 800b554:	ffff0000 	.word	0xffff0000
 800b558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b56a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691a      	ldr	r2, [r3, #16]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b588:	3b01      	subs	r3, #1
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b594:	b29b      	uxth	r3, r3
 800b596:	3b01      	subs	r3, #1
 800b598:	b29a      	uxth	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	691a      	ldr	r2, [r3, #16]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	b2d2      	uxtb	r2, r2
 800b5aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5d0:	e0b8      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	2200      	movs	r2, #0
 800b5da:	4966      	ldr	r1, [pc, #408]	; (800b774 <HAL_I2C_Master_Receive+0x448>)
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f002 fb3d 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e0bf      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	691a      	ldr	r2, [r3, #16]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b618:	3b01      	subs	r3, #1
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b624:	b29b      	uxth	r3, r3
 800b626:	3b01      	subs	r3, #1
 800b628:	b29a      	uxth	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	2200      	movs	r2, #0
 800b636:	494f      	ldr	r1, [pc, #316]	; (800b774 <HAL_I2C_Master_Receive+0x448>)
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f002 fb0f 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e091      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	691a      	ldr	r2, [r3, #16]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b674:	3b01      	subs	r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b680:	b29b      	uxth	r3, r3
 800b682:	3b01      	subs	r3, #1
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6bc:	e042      	b.n	800b744 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f002 fc54 	bl	800df70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e04c      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	691a      	ldr	r2, [r3, #16]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	b2d2      	uxtb	r2, r2
 800b6de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	f003 0304 	and.w	r3, r3, #4
 800b70e:	2b04      	cmp	r3, #4
 800b710:	d118      	bne.n	800b744 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691a      	ldr	r2, [r3, #16]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71c:	b2d2      	uxtb	r2, r2
 800b71e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b72e:	3b01      	subs	r3, #1
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	3b01      	subs	r3, #1
 800b73e:	b29a      	uxth	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f47f aec2 	bne.w	800b4d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2220      	movs	r2, #32
 800b752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	e000      	b.n	800b76c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b76a:	2302      	movs	r3, #2
  }
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3728      	adds	r7, #40	; 0x28
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	00010004 	.word	0x00010004

0800b778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af02      	add	r7, sp, #8
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	4608      	mov	r0, r1
 800b782:	4611      	mov	r1, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4603      	mov	r3, r0
 800b788:	817b      	strh	r3, [r7, #10]
 800b78a:	460b      	mov	r3, r1
 800b78c:	813b      	strh	r3, [r7, #8]
 800b78e:	4613      	mov	r3, r2
 800b790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b792:	f7fe fbc1 	bl	8009f18 <HAL_GetTick>
 800b796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	f040 80d9 	bne.w	800b958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	2319      	movs	r3, #25
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	496d      	ldr	r1, [pc, #436]	; (800b964 <HAL_I2C_Mem_Write+0x1ec>)
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f002 fa53 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e0cc      	b.n	800b95a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d101      	bne.n	800b7ce <HAL_I2C_Mem_Write+0x56>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e0c5      	b.n	800b95a <HAL_I2C_Mem_Write+0x1e2>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d007      	beq.n	800b7f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0201 	orr.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2221      	movs	r2, #33	; 0x21
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2240      	movs	r2, #64	; 0x40
 800b810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6a3a      	ldr	r2, [r7, #32]
 800b81e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a4d      	ldr	r2, [pc, #308]	; (800b968 <HAL_I2C_Mem_Write+0x1f0>)
 800b834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b836:	88f8      	ldrh	r0, [r7, #6]
 800b838:	893a      	ldrh	r2, [r7, #8]
 800b83a:	8979      	ldrh	r1, [r7, #10]
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	4603      	mov	r3, r0
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f001 ffe2 	bl	800d810 <I2C_RequestMemoryWrite>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d052      	beq.n	800b8f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e081      	b.n	800b95a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f002 fad4 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00d      	beq.n	800b882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d107      	bne.n	800b87e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b87c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e06b      	b.n	800b95a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	781a      	ldrb	r2, [r3, #0]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b89c:	3b01      	subs	r3, #1
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b04      	cmp	r3, #4
 800b8be:	d11b      	bne.n	800b8f8 <HAL_I2C_Mem_Write+0x180>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d017      	beq.n	800b8f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d8:	1c5a      	adds	r2, r3, #1
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1aa      	bne.n	800b856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f002 fac0 	bl	800de8a <I2C_WaitOnBTFFlagUntilTimeout>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00d      	beq.n	800b92c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b914:	2b04      	cmp	r3, #4
 800b916:	d107      	bne.n	800b928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e016      	b.n	800b95a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b93a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2220      	movs	r2, #32
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	e000      	b.n	800b95a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b958:	2302      	movs	r3, #2
  }
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	00100002 	.word	0x00100002
 800b968:	ffff0000 	.word	0xffff0000

0800b96c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08c      	sub	sp, #48	; 0x30
 800b970:	af02      	add	r7, sp, #8
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	817b      	strh	r3, [r7, #10]
 800b97e:	460b      	mov	r3, r1
 800b980:	813b      	strh	r3, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b986:	f7fe fac7 	bl	8009f18 <HAL_GetTick>
 800b98a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b20      	cmp	r3, #32
 800b996:	f040 8208 	bne.w	800bdaa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	2319      	movs	r3, #25
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	497b      	ldr	r1, [pc, #492]	; (800bb90 <HAL_I2C_Mem_Read+0x224>)
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f002 f959 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	e1fb      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_I2C_Mem_Read+0x56>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e1f4      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d007      	beq.n	800b9e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f042 0201 	orr.w	r2, r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2222      	movs	r2, #34	; 0x22
 800b9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2240      	movs	r2, #64	; 0x40
 800ba04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ba18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4a5b      	ldr	r2, [pc, #364]	; (800bb94 <HAL_I2C_Mem_Read+0x228>)
 800ba28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba2a:	88f8      	ldrh	r0, [r7, #6]
 800ba2c:	893a      	ldrh	r2, [r7, #8]
 800ba2e:	8979      	ldrh	r1, [r7, #10]
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	4603      	mov	r3, r0
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f001 ff7e 	bl	800d93c <I2C_RequestMemoryRead>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e1b0      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d113      	bne.n	800ba7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba52:	2300      	movs	r3, #0
 800ba54:	623b      	str	r3, [r7, #32]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	623b      	str	r3, [r7, #32]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	623b      	str	r3, [r7, #32]
 800ba66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	e184      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d11b      	bne.n	800baba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba92:	2300      	movs	r3, #0
 800ba94:	61fb      	str	r3, [r7, #28]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	61fb      	str	r3, [r7, #28]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	61fb      	str	r3, [r7, #28]
 800baa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	e164      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d11b      	bne.n	800bafa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bad0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bae2:	2300      	movs	r3, #0
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	61bb      	str	r3, [r7, #24]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	61bb      	str	r3, [r7, #24]
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	e144      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bb10:	e138      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	f200 80f1 	bhi.w	800bcfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d123      	bne.n	800bb6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f002 fa21 	bl	800df70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e139      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691a      	ldr	r2, [r3, #16]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	b2d2      	uxtb	r2, r2
 800bb44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb54:	3b01      	subs	r3, #1
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb6a:	e10b      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d14e      	bne.n	800bc12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4906      	ldr	r1, [pc, #24]	; (800bb98 <HAL_I2C_Mem_Read+0x22c>)
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f002 f86c 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d008      	beq.n	800bb9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e10e      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
 800bb8e:	bf00      	nop
 800bb90:	00100002 	.word	0x00100002
 800bb94:	ffff0000 	.word	0xffff0000
 800bb98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	691a      	ldr	r2, [r3, #16]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	b2d2      	uxtb	r2, r2
 800bbb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	691a      	ldr	r2, [r3, #16]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe8:	b2d2      	uxtb	r2, r2
 800bbea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc10:	e0b8      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4966      	ldr	r1, [pc, #408]	; (800bdb4 <HAL_I2C_Mem_Read+0x448>)
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f002 f81d 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e0bf      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	691a      	ldr	r2, [r3, #16]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	b2d2      	uxtb	r2, r2
 800bc48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	2200      	movs	r2, #0
 800bc76:	494f      	ldr	r1, [pc, #316]	; (800bdb4 <HAL_I2C_Mem_Read+0x448>)
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f001 ffef 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e091      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	691a      	ldr	r2, [r3, #16]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca2:	b2d2      	uxtb	r2, r2
 800bca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	691a      	ldr	r2, [r3, #16]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce6:	3b01      	subs	r3, #1
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bcfc:	e042      	b.n	800bd84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f002 f934 	bl	800df70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e04c      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	691a      	ldr	r2, [r3, #16]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	f003 0304 	and.w	r3, r3, #4
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	d118      	bne.n	800bd84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	691a      	ldr	r2, [r3, #16]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	b2d2      	uxtb	r2, r2
 800bd5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f47f aec2 	bne.w	800bb12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e000      	b.n	800bdac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bdaa:	2302      	movs	r3, #2
  }
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3728      	adds	r7, #40	; 0x28
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	00010004 	.word	0x00010004

0800bdb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b088      	sub	sp, #32
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bde0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	2b10      	cmp	r3, #16
 800bde6:	d003      	beq.n	800bdf0 <HAL_I2C_EV_IRQHandler+0x38>
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	2b40      	cmp	r3, #64	; 0x40
 800bdec:	f040 80c1 	bne.w	800bf72 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <HAL_I2C_EV_IRQHandler+0x6e>
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800be10:	d003      	beq.n	800be1a <HAL_I2C_EV_IRQHandler+0x62>
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800be18:	d101      	bne.n	800be1e <HAL_I2C_EV_IRQHandler+0x66>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e000      	b.n	800be20 <HAL_I2C_EV_IRQHandler+0x68>
 800be1e:	2300      	movs	r3, #0
 800be20:	2b01      	cmp	r3, #1
 800be22:	f000 8132 	beq.w	800c08a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00c      	beq.n	800be4a <HAL_I2C_EV_IRQHandler+0x92>
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	0a5b      	lsrs	r3, r3, #9
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d006      	beq.n	800be4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f002 f91c 	bl	800e07a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fd79 	bl	800c93a <I2C_Master_SB>
 800be48:	e092      	b.n	800bf70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	08db      	lsrs	r3, r3, #3
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d009      	beq.n	800be6a <HAL_I2C_EV_IRQHandler+0xb2>
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	0a5b      	lsrs	r3, r3, #9
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fdef 	bl	800ca46 <I2C_Master_ADD10>
 800be68:	e082      	b.n	800bf70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d009      	beq.n	800be8a <HAL_I2C_EV_IRQHandler+0xd2>
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	0a5b      	lsrs	r3, r3, #9
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fe09 	bl	800ca9a <I2C_Master_ADDR>
 800be88:	e072      	b.n	800bf70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	089b      	lsrs	r3, r3, #2
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d03b      	beq.n	800bf0e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bea4:	f000 80f3 	beq.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	09db      	lsrs	r3, r3, #7
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00f      	beq.n	800bed4 <HAL_I2C_EV_IRQHandler+0x11c>
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	0a9b      	lsrs	r3, r3, #10
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d009      	beq.n	800bed4 <HAL_I2C_EV_IRQHandler+0x11c>
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	089b      	lsrs	r3, r3, #2
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d103      	bne.n	800bed4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f9f3 	bl	800c2b8 <I2C_MasterTransmit_TXE>
 800bed2:	e04d      	b.n	800bf70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	089b      	lsrs	r3, r3, #2
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 80d6 	beq.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	0a5b      	lsrs	r3, r3, #9
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 80cf 	beq.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	2b21      	cmp	r3, #33	; 0x21
 800bef4:	d103      	bne.n	800befe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa7a 	bl	800c3f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800befc:	e0c7      	b.n	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	2b40      	cmp	r3, #64	; 0x40
 800bf02:	f040 80c4 	bne.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fae8 	bl	800c4dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf0c:	e0bf      	b.n	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf1c:	f000 80b7 	beq.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	099b      	lsrs	r3, r3, #6
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00f      	beq.n	800bf4c <HAL_I2C_EV_IRQHandler+0x194>
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	0a9b      	lsrs	r3, r3, #10
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d009      	beq.n	800bf4c <HAL_I2C_EV_IRQHandler+0x194>
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	089b      	lsrs	r3, r3, #2
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fb5d 	bl	800c604 <I2C_MasterReceive_RXNE>
 800bf4a:	e011      	b.n	800bf70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	089b      	lsrs	r3, r3, #2
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 809a 	beq.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	0a5b      	lsrs	r3, r3, #9
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 8093 	beq.w	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fbfc 	bl	800c766 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf6e:	e08e      	b.n	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
 800bf70:	e08d      	b.n	800c08e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d004      	beq.n	800bf84 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	61fb      	str	r3, [r7, #28]
 800bf82:	e007      	b.n	800bf94 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	085b      	lsrs	r3, r3, #1
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d012      	beq.n	800bfc6 <HAL_I2C_EV_IRQHandler+0x20e>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	0a5b      	lsrs	r3, r3, #9
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00c      	beq.n	800bfc6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d003      	beq.n	800bfbc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800bfbc:	69b9      	ldr	r1, [r7, #24]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 ffba 	bl	800cf38 <I2C_Slave_ADDR>
 800bfc4:	e066      	b.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	091b      	lsrs	r3, r3, #4
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <HAL_I2C_EV_IRQHandler+0x22e>
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	0a5b      	lsrs	r3, r3, #9
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fff4 	bl	800cfcc <I2C_Slave_STOPF>
 800bfe4:	e056      	b.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
 800bfe8:	2b21      	cmp	r3, #33	; 0x21
 800bfea:	d002      	beq.n	800bff2 <HAL_I2C_EV_IRQHandler+0x23a>
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2b29      	cmp	r3, #41	; 0x29
 800bff0:	d125      	bne.n	800c03e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	09db      	lsrs	r3, r3, #7
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00f      	beq.n	800c01e <HAL_I2C_EV_IRQHandler+0x266>
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	0a9b      	lsrs	r3, r3, #10
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d009      	beq.n	800c01e <HAL_I2C_EV_IRQHandler+0x266>
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	089b      	lsrs	r3, r3, #2
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d103      	bne.n	800c01e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fed0 	bl	800cdbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c01c:	e039      	b.n	800c092 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	089b      	lsrs	r3, r3, #2
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	2b00      	cmp	r3, #0
 800c028:	d033      	beq.n	800c092 <HAL_I2C_EV_IRQHandler+0x2da>
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	0a5b      	lsrs	r3, r3, #9
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	d02d      	beq.n	800c092 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fefd 	bl	800ce36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c03c:	e029      	b.n	800c092 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	099b      	lsrs	r3, r3, #6
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00f      	beq.n	800c06a <HAL_I2C_EV_IRQHandler+0x2b2>
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	0a9b      	lsrs	r3, r3, #10
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <HAL_I2C_EV_IRQHandler+0x2b2>
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	089b      	lsrs	r3, r3, #2
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d103      	bne.n	800c06a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 ff08 	bl	800ce78 <I2C_SlaveReceive_RXNE>
 800c068:	e014      	b.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	089b      	lsrs	r3, r3, #2
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	0a5b      	lsrs	r3, r3, #9
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d008      	beq.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 ff36 	bl	800cef4 <I2C_SlaveReceive_BTF>
 800c088:	e004      	b.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c08a:	bf00      	nop
 800c08c:	e002      	b.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c08e:	bf00      	nop
 800c090:	e000      	b.n	800c094 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c092:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c094:	3720      	adds	r7, #32
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b08a      	sub	sp, #40	; 0x28
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	0a1b      	lsrs	r3, r3, #8
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00e      	beq.n	800c0e8 <HAL_I2C_ER_IRQHandler+0x4e>
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	0a1b      	lsrs	r3, r3, #8
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d008      	beq.n	800c0e8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	f043 0301 	orr.w	r3, r3, #1
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c0e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	0a5b      	lsrs	r3, r3, #9
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00e      	beq.n	800c112 <HAL_I2C_ER_IRQHandler+0x78>
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	0a1b      	lsrs	r3, r3, #8
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d008      	beq.n	800c112 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	f043 0302 	orr.w	r3, r3, #2
 800c106:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c110:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	0a9b      	lsrs	r3, r3, #10
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d03f      	beq.n	800c19e <HAL_I2C_ER_IRQHandler+0x104>
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	0a1b      	lsrs	r3, r3, #8
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d039      	beq.n	800c19e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c12a:	7efb      	ldrb	r3, [r7, #27]
 800c12c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c132:	b29b      	uxth	r3, r3
 800c134:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c13c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c142:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c144:	7ebb      	ldrb	r3, [r7, #26]
 800c146:	2b20      	cmp	r3, #32
 800c148:	d112      	bne.n	800c170 <HAL_I2C_ER_IRQHandler+0xd6>
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10f      	bne.n	800c170 <HAL_I2C_ER_IRQHandler+0xd6>
 800c150:	7cfb      	ldrb	r3, [r7, #19]
 800c152:	2b21      	cmp	r3, #33	; 0x21
 800c154:	d008      	beq.n	800c168 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c156:	7cfb      	ldrb	r3, [r7, #19]
 800c158:	2b29      	cmp	r3, #41	; 0x29
 800c15a:	d005      	beq.n	800c168 <HAL_I2C_ER_IRQHandler+0xce>
 800c15c:	7cfb      	ldrb	r3, [r7, #19]
 800c15e:	2b28      	cmp	r3, #40	; 0x28
 800c160:	d106      	bne.n	800c170 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b21      	cmp	r3, #33	; 0x21
 800c166:	d103      	bne.n	800c170 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 f85f 	bl	800d22c <I2C_Slave_AF>
 800c16e:	e016      	b.n	800c19e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c178:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	f043 0304 	orr.w	r3, r3, #4
 800c180:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c182:	7efb      	ldrb	r3, [r7, #27]
 800c184:	2b10      	cmp	r3, #16
 800c186:	d002      	beq.n	800c18e <HAL_I2C_ER_IRQHandler+0xf4>
 800c188:	7efb      	ldrb	r3, [r7, #27]
 800c18a:	2b40      	cmp	r3, #64	; 0x40
 800c18c:	d107      	bne.n	800c19e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c19c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c19e:	6a3b      	ldr	r3, [r7, #32]
 800c1a0:	0adb      	lsrs	r3, r3, #11
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00e      	beq.n	800c1c8 <HAL_I2C_ER_IRQHandler+0x12e>
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	0a1b      	lsrs	r3, r3, #8
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d008      	beq.n	800c1c8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	f043 0308 	orr.w	r3, r3, #8
 800c1bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c1c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d008      	beq.n	800c1e0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 f896 	bl	800d30c <I2C_ITError>
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	3728      	adds	r7, #40	; 0x28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
 800c244:	4613      	mov	r3, r2
 800c246:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d150      	bne.n	800c380 <I2C_MasterTransmit_TXE+0xc8>
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	2b21      	cmp	r3, #33	; 0x21
 800c2e2:	d14d      	bne.n	800c380 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b08      	cmp	r3, #8
 800c2e8:	d01d      	beq.n	800c326 <I2C_MasterTransmit_TXE+0x6e>
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	d01a      	beq.n	800c326 <I2C_MasterTransmit_TXE+0x6e>
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2f6:	d016      	beq.n	800c326 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c306:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2211      	movs	r2, #17
 800c30c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2220      	movs	r2, #32
 800c31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ff62 	bl	800c1e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c324:	e060      	b.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c334:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c344:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b40      	cmp	r3, #64	; 0x40
 800c35e:	d107      	bne.n	800c370 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff ff7d 	bl	800c268 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c36e:	e03b      	b.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff ff35 	bl	800c1e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c37e:	e033      	b.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	2b21      	cmp	r3, #33	; 0x21
 800c384:	d005      	beq.n	800c392 <I2C_MasterTransmit_TXE+0xda>
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	2b40      	cmp	r3, #64	; 0x40
 800c38a:	d12d      	bne.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	2b22      	cmp	r3, #34	; 0x22
 800c390:	d12a      	bne.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c396:	b29b      	uxth	r3, r3
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d108      	bne.n	800c3ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	685a      	ldr	r2, [r3, #4]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c3ac:	e01c      	b.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b40      	cmp	r3, #64	; 0x40
 800c3b8:	d103      	bne.n	800c3c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f88e 	bl	800c4dc <I2C_MemoryTransmit_TXE_BTF>
}
 800c3c0:	e012      	b.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c6:	781a      	ldrb	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c3e6:	e7ff      	b.n	800c3e8 <I2C_MasterTransmit_TXE+0x130>
 800c3e8:	bf00      	nop
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b21      	cmp	r3, #33	; 0x21
 800c408:	d164      	bne.n	800c4d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c40e:	b29b      	uxth	r3, r3
 800c410:	2b00      	cmp	r3, #0
 800c412:	d012      	beq.n	800c43a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	781a      	ldrb	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c438:	e04c      	b.n	800c4d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	d01d      	beq.n	800c47c <I2C_MasterTransmit_BTF+0x8c>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b20      	cmp	r3, #32
 800c444:	d01a      	beq.n	800c47c <I2C_MasterTransmit_BTF+0x8c>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c44c:	d016      	beq.n	800c47c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c45c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2211      	movs	r2, #17
 800c462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2220      	movs	r2, #32
 800c470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff feb7 	bl	800c1e8 <HAL_I2C_MasterTxCpltCallback>
}
 800c47a:	e02b      	b.n	800c4d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c48a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c49a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b40      	cmp	r3, #64	; 0x40
 800c4b4:	d107      	bne.n	800c4c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7ff fed2 	bl	800c268 <HAL_I2C_MemTxCpltCallback>
}
 800c4c4:	e006      	b.n	800c4d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fe8a 	bl	800c1e8 <HAL_I2C_MasterTxCpltCallback>
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d11d      	bne.n	800c530 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d10b      	bne.n	800c514 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c500:	b2da      	uxtb	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50c:	1c9a      	adds	r2, r3, #2
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c512:	e073      	b.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c518:	b29b      	uxth	r3, r3
 800c51a:	121b      	asrs	r3, r3, #8
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c52e:	e065      	b.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c534:	2b01      	cmp	r3, #1
 800c536:	d10b      	bne.n	800c550 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c54e:	e055      	b.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c554:	2b02      	cmp	r3, #2
 800c556:	d151      	bne.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	2b22      	cmp	r3, #34	; 0x22
 800c55c:	d10d      	bne.n	800c57a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c56c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c578:	e040      	b.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c57e:	b29b      	uxth	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d015      	beq.n	800c5b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	2b21      	cmp	r3, #33	; 0x21
 800c588:	d112      	bne.n	800c5b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c5ae:	e025      	b.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d120      	bne.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c5ba:	7bfb      	ldrb	r3, [r7, #15]
 800c5bc:	2b21      	cmp	r3, #33	; 0x21
 800c5be:	d11d      	bne.n	800c5fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c5ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff fe36 	bl	800c268 <HAL_I2C_MemTxCpltCallback>
}
 800c5fc:	bf00      	nop
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b22      	cmp	r3, #34	; 0x22
 800c616:	f040 80a2 	bne.w	800c75e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c61e:	b29b      	uxth	r3, r3
 800c620:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d921      	bls.n	800c66c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	691a      	ldr	r2, [r3, #16]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c632:	b2d2      	uxtb	r2, r2
 800c634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c644:	b29b      	uxth	r3, r3
 800c646:	3b01      	subs	r3, #1
 800c648:	b29a      	uxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b03      	cmp	r3, #3
 800c656:	f040 8082 	bne.w	800c75e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c668:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c66a:	e078      	b.n	800c75e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	2b02      	cmp	r3, #2
 800c672:	d074      	beq.n	800c75e <I2C_MasterReceive_RXNE+0x15a>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d002      	beq.n	800c680 <I2C_MasterReceive_RXNE+0x7c>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d16e      	bne.n	800c75e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f001 fc43 	bl	800df0c <I2C_WaitOnSTOPRequestThroughIT>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d142      	bne.n	800c712 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c69a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	691a      	ldr	r2, [r3, #16]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	b2d2      	uxtb	r2, r2
 800c6b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b40      	cmp	r3, #64	; 0x40
 800c6e4:	d10a      	bne.n	800c6fc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff fdc1 	bl	800c27c <HAL_I2C_MemRxCpltCallback>
}
 800c6fa:	e030      	b.n	800c75e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2212      	movs	r2, #18
 800c708:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff fd76 	bl	800c1fc <HAL_I2C_MasterRxCpltCallback>
}
 800c710:	e025      	b.n	800c75e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c720:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	691a      	ldr	r2, [r3, #16]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c734:	1c5a      	adds	r2, r3, #1
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c73e:	b29b      	uxth	r3, r3
 800c740:	3b01      	subs	r3, #1
 800c742:	b29a      	uxth	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7ff fd99 	bl	800c290 <HAL_I2C_ErrorCallback>
}
 800c75e:	bf00      	nop
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c772:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c778:	b29b      	uxth	r3, r3
 800c77a:	2b04      	cmp	r3, #4
 800c77c:	d11b      	bne.n	800c7b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c78c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	691a      	ldr	r2, [r3, #16]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c7b4:	e0bd      	b.n	800c932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	2b03      	cmp	r3, #3
 800c7be:	d129      	bne.n	800c814 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d00a      	beq.n	800c7ec <I2C_MasterReceive_BTF+0x86>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d007      	beq.n	800c7ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	691a      	ldr	r2, [r3, #16]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	b2d2      	uxtb	r2, r2
 800c7f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fe:	1c5a      	adds	r2, r3, #1
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c808:	b29b      	uxth	r3, r3
 800c80a:	3b01      	subs	r3, #1
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c812:	e08e      	b.n	800c932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c818:	b29b      	uxth	r3, r3
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d176      	bne.n	800c90c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d002      	beq.n	800c82a <I2C_MasterReceive_BTF+0xc4>
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b10      	cmp	r3, #16
 800c828:	d108      	bne.n	800c83c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c838:	601a      	str	r2, [r3, #0]
 800c83a:	e019      	b.n	800c870 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d002      	beq.n	800c848 <I2C_MasterReceive_BTF+0xe2>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b02      	cmp	r3, #2
 800c846:	d108      	bne.n	800c85a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	e00a      	b.n	800c870 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2b10      	cmp	r3, #16
 800c85e:	d007      	beq.n	800c870 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c86e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	691a      	ldr	r2, [r3, #16]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87a:	b2d2      	uxtb	r2, r2
 800c87c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	3b01      	subs	r3, #1
 800c890:	b29a      	uxth	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	691a      	ldr	r2, [r3, #16]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a8:	1c5a      	adds	r2, r3, #1
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c8ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b40      	cmp	r3, #64	; 0x40
 800c8de:	d10a      	bne.n	800c8f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff fcc4 	bl	800c27c <HAL_I2C_MemRxCpltCallback>
}
 800c8f4:	e01d      	b.n	800c932 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2212      	movs	r2, #18
 800c902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7ff fc79 	bl	800c1fc <HAL_I2C_MasterRxCpltCallback>
}
 800c90a:	e012      	b.n	800c932 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	691a      	ldr	r2, [r3, #16]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	b2d2      	uxtb	r2, r2
 800c918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c928:	b29b      	uxth	r3, r3
 800c92a:	3b01      	subs	r3, #1
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b40      	cmp	r3, #64	; 0x40
 800c94c:	d117      	bne.n	800c97e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c952:	2b00      	cmp	r3, #0
 800c954:	d109      	bne.n	800c96a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	461a      	mov	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c968:	e067      	b.n	800ca3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	f043 0301 	orr.w	r3, r3, #1
 800c974:	b2da      	uxtb	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	611a      	str	r2, [r3, #16]
}
 800c97c:	e05d      	b.n	800ca3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c986:	d133      	bne.n	800c9f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b21      	cmp	r3, #33	; 0x21
 800c992:	d109      	bne.n	800c9a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	461a      	mov	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c9a4:	611a      	str	r2, [r3, #16]
 800c9a6:	e008      	b.n	800c9ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f043 0301 	orr.w	r3, r3, #1
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d004      	beq.n	800c9cc <I2C_Master_SB+0x92>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d108      	bne.n	800c9de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d032      	beq.n	800ca3a <I2C_Master_SB+0x100>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d02d      	beq.n	800ca3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9ec:	605a      	str	r2, [r3, #4]
}
 800c9ee:	e024      	b.n	800ca3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10e      	bne.n	800ca16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	11db      	asrs	r3, r3, #7
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	f003 0306 	and.w	r3, r3, #6
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f063 030f 	orn	r3, r3, #15
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	611a      	str	r2, [r3, #16]
}
 800ca14:	e011      	b.n	800ca3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d10d      	bne.n	800ca3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	11db      	asrs	r3, r3, #7
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	f003 0306 	and.w	r3, r3, #6
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	f063 030e 	orn	r3, r3, #14
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	611a      	str	r2, [r3, #16]
}
 800ca3a:	bf00      	nop
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d004      	beq.n	800ca6c <I2C_Master_ADD10+0x26>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d108      	bne.n	800ca7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00c      	beq.n	800ca8e <I2C_Master_ADD10+0x48>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d007      	beq.n	800ca8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca8c:	605a      	str	r2, [r3, #4]
  }
}
 800ca8e:	bf00      	nop
 800ca90:	370c      	adds	r7, #12
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr

0800ca9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ca9a:	b480      	push	{r7}
 800ca9c:	b091      	sub	sp, #68	; 0x44
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800caa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b22      	cmp	r3, #34	; 0x22
 800cac2:	f040 8169 	bne.w	800cd98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10f      	bne.n	800caee <I2C_Master_ADDR+0x54>
 800cace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cad2:	2b40      	cmp	r3, #64	; 0x40
 800cad4:	d10b      	bne.n	800caee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cad6:	2300      	movs	r3, #0
 800cad8:	633b      	str	r3, [r7, #48]	; 0x30
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	695b      	ldr	r3, [r3, #20]
 800cae0:	633b      	str	r3, [r7, #48]	; 0x30
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	633b      	str	r3, [r7, #48]	; 0x30
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	e160      	b.n	800cdb0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d11d      	bne.n	800cb32 <I2C_Master_ADDR+0x98>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cafe:	d118      	bne.n	800cb32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb00:	2300      	movs	r3, #0
 800cb02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	651a      	str	r2, [r3, #80]	; 0x50
 800cb30:	e13e      	b.n	800cdb0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d113      	bne.n	800cb64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	e115      	b.n	800cd90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	f040 808a 	bne.w	800cc84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb76:	d137      	bne.n	800cbe8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb96:	d113      	bne.n	800cbc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cba6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cba8:	2300      	movs	r3, #0
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	627b      	str	r3, [r7, #36]	; 0x24
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	e0e7      	b.n	800cd90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	623b      	str	r3, [r7, #32]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	623b      	str	r3, [r7, #32]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	623b      	str	r3, [r7, #32]
 800cbd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	e0d3      	b.n	800cd90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	2b08      	cmp	r3, #8
 800cbec:	d02e      	beq.n	800cc4c <I2C_Master_ADDR+0x1b2>
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d02b      	beq.n	800cc4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf6:	2b12      	cmp	r3, #18
 800cbf8:	d102      	bne.n	800cc00 <I2C_Master_ADDR+0x166>
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d125      	bne.n	800cc4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d00e      	beq.n	800cc24 <I2C_Master_ADDR+0x18a>
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d00b      	beq.n	800cc24 <I2C_Master_ADDR+0x18a>
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	2b10      	cmp	r3, #16
 800cc10:	d008      	beq.n	800cc24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	e007      	b.n	800cc34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc34:	2300      	movs	r3, #0
 800cc36:	61fb      	str	r3, [r7, #28]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	61fb      	str	r3, [r7, #28]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	e0a1      	b.n	800cd90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61bb      	str	r3, [r7, #24]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	61bb      	str	r3, [r7, #24]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	61bb      	str	r3, [r7, #24]
 800cc70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	e085      	b.n	800cd90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d14d      	bne.n	800cd2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d016      	beq.n	800ccc2 <I2C_Master_ADDR+0x228>
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d013      	beq.n	800ccc2 <I2C_Master_ADDR+0x228>
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b10      	cmp	r3, #16
 800cc9e:	d010      	beq.n	800ccc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	e007      	b.n	800ccd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cce0:	d117      	bne.n	800cd12 <I2C_Master_ADDR+0x278>
 800cce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cce8:	d00b      	beq.n	800cd02 <I2C_Master_ADDR+0x268>
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d008      	beq.n	800cd02 <I2C_Master_ADDR+0x268>
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	2b08      	cmp	r3, #8
 800ccf4:	d005      	beq.n	800cd02 <I2C_Master_ADDR+0x268>
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	2b10      	cmp	r3, #16
 800ccfa:	d002      	beq.n	800cd02 <I2C_Master_ADDR+0x268>
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	2b20      	cmp	r3, #32
 800cd00:	d107      	bne.n	800cd12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd12:	2300      	movs	r3, #0
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	e032      	b.n	800cd90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd48:	d117      	bne.n	800cd7a <I2C_Master_ADDR+0x2e0>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd50:	d00b      	beq.n	800cd6a <I2C_Master_ADDR+0x2d0>
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d008      	beq.n	800cd6a <I2C_Master_ADDR+0x2d0>
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	2b08      	cmp	r3, #8
 800cd5c:	d005      	beq.n	800cd6a <I2C_Master_ADDR+0x2d0>
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	2b10      	cmp	r3, #16
 800cd62:	d002      	beq.n	800cd6a <I2C_Master_ADDR+0x2d0>
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	2b20      	cmp	r3, #32
 800cd68:	d107      	bne.n	800cd7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	685a      	ldr	r2, [r3, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	613b      	str	r3, [r7, #16]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	613b      	str	r3, [r7, #16]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800cd96:	e00b      	b.n	800cdb0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd98:	2300      	movs	r3, #0
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	68fb      	ldr	r3, [r7, #12]
}
 800cdae:	e7ff      	b.n	800cdb0 <I2C_Master_ADDR+0x316>
 800cdb0:	bf00      	nop
 800cdb2:	3744      	adds	r7, #68	; 0x44
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d02b      	beq.n	800ce2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdda:	781a      	ldrb	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d114      	bne.n	800ce2e <I2C_SlaveTransmit_TXE+0x72>
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	2b29      	cmp	r3, #41	; 0x29
 800ce08:	d111      	bne.n	800ce2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2221      	movs	r2, #33	; 0x21
 800ce1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2228      	movs	r2, #40	; 0x28
 800ce24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff f9f1 	bl	800c210 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ce2e:	bf00      	nop
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d011      	beq.n	800ce6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	781a      	ldrb	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	3b01      	subs	r3, #1
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d02c      	beq.n	800ceec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	691a      	ldr	r2, [r3, #16]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	b2d2      	uxtb	r2, r2
 800ce9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea4:	1c5a      	adds	r2, r3, #1
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d114      	bne.n	800ceec <I2C_SlaveReceive_RXNE+0x74>
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	2b2a      	cmp	r3, #42	; 0x2a
 800cec6:	d111      	bne.n	800ceec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ced6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2222      	movs	r2, #34	; 0x22
 800cedc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2228      	movs	r2, #40	; 0x28
 800cee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff f99c 	bl	800c224 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ceec:	bf00      	nop
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d012      	beq.n	800cf2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	691a      	ldr	r2, [r3, #16]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	b2d2      	uxtb	r2, r2
 800cf12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	3b01      	subs	r3, #1
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cf52:	2b28      	cmp	r3, #40	; 0x28
 800cf54:	d127      	bne.n	800cfa6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	089b      	lsrs	r3, r3, #2
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800cf72:	2301      	movs	r3, #1
 800cf74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	09db      	lsrs	r3, r3, #7
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d103      	bne.n	800cf8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	81bb      	strh	r3, [r7, #12]
 800cf88:	e002      	b.n	800cf90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800cf98:	89ba      	ldrh	r2, [r7, #12]
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff f94a 	bl	800c238 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cfa4:	e00e      	b.n	800cfc4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60bb      	str	r3, [r7, #8]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	60bb      	str	r3, [r7, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	60bb      	str	r3, [r7, #8]
 800cfba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800cfc4:	bf00      	nop
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	685a      	ldr	r2, [r3, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cfea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800cfec:	2300      	movs	r3, #0
 800cfee:	60bb      	str	r3, [r7, #8]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	60bb      	str	r3, [r7, #8]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d018:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d028:	d172      	bne.n	800d110 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
 800d02c:	2b22      	cmp	r3, #34	; 0x22
 800d02e:	d002      	beq.n	800d036 <I2C_Slave_STOPF+0x6a>
 800d030:	7bfb      	ldrb	r3, [r7, #15]
 800d032:	2b2a      	cmp	r3, #42	; 0x2a
 800d034:	d135      	bne.n	800d0a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	b29a      	uxth	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d048:	b29b      	uxth	r3, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d052:	f043 0204 	orr.w	r2, r3, #4
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d068:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd fc44 	bl	800a8fc <HAL_DMA_GetState>
 800d074:	4603      	mov	r3, r0
 800d076:	2b01      	cmp	r3, #1
 800d078:	d049      	beq.n	800d10e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	4a69      	ldr	r2, [pc, #420]	; (800d224 <I2C_Slave_STOPF+0x258>)
 800d080:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d086:	4618      	mov	r0, r3
 800d088:	f7fd fa8c 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d03d      	beq.n	800d10e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d09c:	4610      	mov	r0, r2
 800d09e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0a0:	e035      	b.n	800d10e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0be:	f043 0204 	orr.w	r2, r3, #4
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fd fc0e 	bl	800a8fc <HAL_DMA_GetState>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d014      	beq.n	800d110 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ea:	4a4e      	ldr	r2, [pc, #312]	; (800d224 <I2C_Slave_STOPF+0x258>)
 800d0ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fd fa56 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d008      	beq.n	800d110 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d108:	4610      	mov	r0, r2
 800d10a:	4798      	blx	r3
 800d10c:	e000      	b.n	800d110 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d10e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d114:	b29b      	uxth	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d03e      	beq.n	800d198 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	f003 0304 	and.w	r3, r3, #4
 800d124:	2b04      	cmp	r3, #4
 800d126:	d112      	bne.n	800d14e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	691a      	ldr	r2, [r3, #16]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	b2d2      	uxtb	r2, r2
 800d134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d144:	b29b      	uxth	r3, r3
 800d146:	3b01      	subs	r3, #1
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	695b      	ldr	r3, [r3, #20]
 800d154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d158:	2b40      	cmp	r3, #64	; 0x40
 800d15a:	d112      	bne.n	800d182 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	691a      	ldr	r2, [r3, #16]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	b2d2      	uxtb	r2, r2
 800d168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d178:	b29b      	uxth	r3, r3
 800d17a:	3b01      	subs	r3, #1
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d186:	b29b      	uxth	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d005      	beq.n	800d198 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d190:	f043 0204 	orr.w	r2, r3, #4
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d003      	beq.n	800d1a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f8b3 	bl	800d30c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d1a6:	e039      	b.n	800d21c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
 800d1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ac:	d109      	bne.n	800d1c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2228      	movs	r2, #40	; 0x28
 800d1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff f831 	bl	800c224 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b28      	cmp	r3, #40	; 0x28
 800d1cc:	d111      	bne.n	800d1f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a15      	ldr	r2, [pc, #84]	; (800d228 <I2C_Slave_STOPF+0x25c>)
 800d1d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2220      	movs	r2, #32
 800d1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7ff f832 	bl	800c254 <HAL_I2C_ListenCpltCallback>
}
 800d1f0:	e014      	b.n	800d21c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f6:	2b22      	cmp	r3, #34	; 0x22
 800d1f8:	d002      	beq.n	800d200 <I2C_Slave_STOPF+0x234>
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	2b22      	cmp	r3, #34	; 0x22
 800d1fe:	d10d      	bne.n	800d21c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2220      	movs	r2, #32
 800d20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7ff f804 	bl	800c224 <HAL_I2C_SlaveRxCpltCallback>
}
 800d21c:	bf00      	nop
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	0800db0d 	.word	0x0800db0d
 800d228:	ffff0000 	.word	0xffff0000

0800d22c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d23a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b08      	cmp	r3, #8
 800d246:	d002      	beq.n	800d24e <I2C_Slave_AF+0x22>
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2b20      	cmp	r3, #32
 800d24c:	d129      	bne.n	800d2a2 <I2C_Slave_AF+0x76>
 800d24e:	7bfb      	ldrb	r3, [r7, #15]
 800d250:	2b28      	cmp	r3, #40	; 0x28
 800d252:	d126      	bne.n	800d2a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a2c      	ldr	r2, [pc, #176]	; (800d308 <I2C_Slave_AF+0xdc>)
 800d258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d268:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d272:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d282:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2220      	movs	r2, #32
 800d28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7fe ffda 	bl	800c254 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d2a0:	e02e      	b.n	800d300 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d2a2:	7bfb      	ldrb	r3, [r7, #15]
 800d2a4:	2b21      	cmp	r3, #33	; 0x21
 800d2a6:	d126      	bne.n	800d2f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a17      	ldr	r2, [pc, #92]	; (800d308 <I2C_Slave_AF+0xdc>)
 800d2ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2221      	movs	r2, #33	; 0x21
 800d2b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2220      	movs	r2, #32
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	685a      	ldr	r2, [r3, #4]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d2d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d2dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7fe ff8e 	bl	800c210 <HAL_I2C_SlaveTxCpltCallback>
}
 800d2f4:	e004      	b.n	800d300 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d2fe:	615a      	str	r2, [r3, #20]
}
 800d300:	bf00      	nop
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	ffff0000 	.word	0xffff0000

0800d30c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d31a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d322:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	2b10      	cmp	r3, #16
 800d328:	d002      	beq.n	800d330 <I2C_ITError+0x24>
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	2b40      	cmp	r3, #64	; 0x40
 800d32e:	d10a      	bne.n	800d346 <I2C_ITError+0x3a>
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	2b22      	cmp	r3, #34	; 0x22
 800d334:	d107      	bne.n	800d346 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d344:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d34c:	2b28      	cmp	r3, #40	; 0x28
 800d34e:	d107      	bne.n	800d360 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2228      	movs	r2, #40	; 0x28
 800d35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d35e:	e015      	b.n	800d38c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d36a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d36e:	d00a      	beq.n	800d386 <I2C_ITError+0x7a>
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	2b60      	cmp	r3, #96	; 0x60
 800d374:	d007      	beq.n	800d386 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2220      	movs	r2, #32
 800d37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d39a:	d162      	bne.n	800d462 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d020      	beq.n	800d3fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3be:	4a6a      	ldr	r2, [pc, #424]	; (800d568 <I2C_ITError+0x25c>)
 800d3c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fd f8ec 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 8089 	beq.w	800d4e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f022 0201 	bic.w	r2, r2, #1
 800d3e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2220      	movs	r2, #32
 800d3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	4798      	blx	r3
 800d3fa:	e074      	b.n	800d4e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	4a59      	ldr	r2, [pc, #356]	; (800d568 <I2C_ITError+0x25c>)
 800d402:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fd f8cb 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d068      	beq.n	800d4e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41e:	2b40      	cmp	r3, #64	; 0x40
 800d420:	d10b      	bne.n	800d43a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	691a      	ldr	r2, [r3, #16]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	b2d2      	uxtb	r2, r2
 800d42e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f022 0201 	bic.w	r2, r2, #1
 800d448:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2220      	movs	r2, #32
 800d44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d45c:	4610      	mov	r0, r2
 800d45e:	4798      	blx	r3
 800d460:	e041      	b.n	800d4e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b60      	cmp	r3, #96	; 0x60
 800d46c:	d125      	bne.n	800d4ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2220      	movs	r2, #32
 800d472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d486:	2b40      	cmp	r3, #64	; 0x40
 800d488:	d10b      	bne.n	800d4a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	691a      	ldr	r2, [r3, #16]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d494:	b2d2      	uxtb	r2, r2
 800d496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49c:	1c5a      	adds	r2, r3, #1
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f022 0201 	bic.w	r2, r2, #1
 800d4b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7fe fef6 	bl	800c2a4 <HAL_I2C_AbortCpltCallback>
 800d4b8:	e015      	b.n	800d4e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c4:	2b40      	cmp	r3, #64	; 0x40
 800d4c6:	d10b      	bne.n	800d4e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	691a      	ldr	r2, [r3, #16]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7fe fed5 	bl	800c290 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10e      	bne.n	800d514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d109      	bne.n	800d514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d522:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d52a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d530:	f003 0304 	and.w	r3, r3, #4
 800d534:	2b04      	cmp	r3, #4
 800d536:	d113      	bne.n	800d560 <I2C_ITError+0x254>
 800d538:	7bfb      	ldrb	r3, [r7, #15]
 800d53a:	2b28      	cmp	r3, #40	; 0x28
 800d53c:	d110      	bne.n	800d560 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a0a      	ldr	r2, [pc, #40]	; (800d56c <I2C_ITError+0x260>)
 800d542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7fe fe7a 	bl	800c254 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d560:	bf00      	nop
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	0800db0d 	.word	0x0800db0d
 800d56c:	ffff0000 	.word	0xffff0000

0800d570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af02      	add	r7, sp, #8
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	607a      	str	r2, [r7, #4]
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	460b      	mov	r3, r1
 800d57e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2b08      	cmp	r3, #8
 800d58a:	d006      	beq.n	800d59a <I2C_MasterRequestWrite+0x2a>
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d003      	beq.n	800d59a <I2C_MasterRequestWrite+0x2a>
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d598:	d108      	bne.n	800d5ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	e00b      	b.n	800d5c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b0:	2b12      	cmp	r3, #18
 800d5b2:	d107      	bne.n	800d5c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fb43 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00d      	beq.n	800d5f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5ea:	d103      	bne.n	800d5f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e035      	b.n	800d664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d600:	d108      	bne.n	800d614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d602:	897b      	ldrh	r3, [r7, #10]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	461a      	mov	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d610:	611a      	str	r2, [r3, #16]
 800d612:	e01b      	b.n	800d64c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d614:	897b      	ldrh	r3, [r7, #10]
 800d616:	11db      	asrs	r3, r3, #7
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	f003 0306 	and.w	r3, r3, #6
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	f063 030f 	orn	r3, r3, #15
 800d624:	b2da      	uxtb	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	490e      	ldr	r1, [pc, #56]	; (800d66c <I2C_MasterRequestWrite+0xfc>)
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f000 fb69 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e010      	b.n	800d664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d642:	897b      	ldrh	r3, [r7, #10]
 800d644:	b2da      	uxtb	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4907      	ldr	r1, [pc, #28]	; (800d670 <I2C_MasterRequestWrite+0x100>)
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f000 fb59 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e000      	b.n	800d664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	00010008 	.word	0x00010008
 800d670:	00010002 	.word	0x00010002

0800d674 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b088      	sub	sp, #32
 800d678:	af02      	add	r7, sp, #8
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	607a      	str	r2, [r7, #4]
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	460b      	mov	r3, r1
 800d682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d698:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b08      	cmp	r3, #8
 800d69e:	d006      	beq.n	800d6ae <I2C_MasterRequestRead+0x3a>
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d003      	beq.n	800d6ae <I2C_MasterRequestRead+0x3a>
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6ac:	d108      	bne.n	800d6c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	e00b      	b.n	800d6d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c4:	2b11      	cmp	r3, #17
 800d6c6:	d107      	bne.n	800d6d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 fab9 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00d      	beq.n	800d70c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fe:	d103      	bne.n	800d708 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d708:	2303      	movs	r3, #3
 800d70a:	e079      	b.n	800d800 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d714:	d108      	bne.n	800d728 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d716:	897b      	ldrh	r3, [r7, #10]
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f043 0301 	orr.w	r3, r3, #1
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	611a      	str	r2, [r3, #16]
 800d726:	e05f      	b.n	800d7e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d728:	897b      	ldrh	r3, [r7, #10]
 800d72a:	11db      	asrs	r3, r3, #7
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	f003 0306 	and.w	r3, r3, #6
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f063 030f 	orn	r3, r3, #15
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	4930      	ldr	r1, [pc, #192]	; (800d808 <I2C_MasterRequestRead+0x194>)
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f000 fadf 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e054      	b.n	800d800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d756:	897b      	ldrh	r3, [r7, #10]
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	4929      	ldr	r1, [pc, #164]	; (800d80c <I2C_MasterRequestRead+0x198>)
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f000 facf 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e044      	b.n	800d800 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d776:	2300      	movs	r3, #0
 800d778:	613b      	str	r3, [r7, #16]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	613b      	str	r3, [r7, #16]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	699b      	ldr	r3, [r3, #24]
 800d788:	613b      	str	r3, [r7, #16]
 800d78a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d79a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f000 fa57 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00d      	beq.n	800d7d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7c2:	d103      	bne.n	800d7cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	e017      	b.n	800d800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d7d0:	897b      	ldrh	r3, [r7, #10]
 800d7d2:	11db      	asrs	r3, r3, #7
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	f003 0306 	and.w	r3, r3, #6
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	f063 030e 	orn	r3, r3, #14
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	4907      	ldr	r1, [pc, #28]	; (800d80c <I2C_MasterRequestRead+0x198>)
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 fa8b 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e000      	b.n	800d800 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	00010008 	.word	0x00010008
 800d80c:	00010002 	.word	0x00010002

0800d810 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af02      	add	r7, sp, #8
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	4608      	mov	r0, r1
 800d81a:	4611      	mov	r1, r2
 800d81c:	461a      	mov	r2, r3
 800d81e:	4603      	mov	r3, r0
 800d820:	817b      	strh	r3, [r7, #10]
 800d822:	460b      	mov	r3, r1
 800d824:	813b      	strh	r3, [r7, #8]
 800d826:	4613      	mov	r3, r2
 800d828:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	6a3b      	ldr	r3, [r7, #32]
 800d840:	2200      	movs	r2, #0
 800d842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f000 fa08 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00d      	beq.n	800d86e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d860:	d103      	bne.n	800d86a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d86a:	2303      	movs	r3, #3
 800d86c:	e05f      	b.n	800d92e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d86e:	897b      	ldrh	r3, [r7, #10]
 800d870:	b2db      	uxtb	r3, r3
 800d872:	461a      	mov	r2, r3
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d87c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	6a3a      	ldr	r2, [r7, #32]
 800d882:	492d      	ldr	r1, [pc, #180]	; (800d938 <I2C_RequestMemoryWrite+0x128>)
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 fa40 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d890:	2301      	movs	r3, #1
 800d892:	e04c      	b.n	800d92e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d894:	2300      	movs	r3, #0
 800d896:	617b      	str	r3, [r7, #20]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ac:	6a39      	ldr	r1, [r7, #32]
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f000 faaa 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00d      	beq.n	800d8d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d107      	bne.n	800d8d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e02b      	b.n	800d92e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d8d6:	88fb      	ldrh	r3, [r7, #6]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d105      	bne.n	800d8e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8dc:	893b      	ldrh	r3, [r7, #8]
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	611a      	str	r2, [r3, #16]
 800d8e6:	e021      	b.n	800d92c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d8e8:	893b      	ldrh	r3, [r7, #8]
 800d8ea:	0a1b      	lsrs	r3, r3, #8
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8f8:	6a39      	ldr	r1, [r7, #32]
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 fa84 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00d      	beq.n	800d922 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90a:	2b04      	cmp	r3, #4
 800d90c:	d107      	bne.n	800d91e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d91c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e005      	b.n	800d92e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d922:	893b      	ldrh	r3, [r7, #8]
 800d924:	b2da      	uxtb	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	00010002 	.word	0x00010002

0800d93c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af02      	add	r7, sp, #8
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	4608      	mov	r0, r1
 800d946:	4611      	mov	r1, r2
 800d948:	461a      	mov	r2, r3
 800d94a:	4603      	mov	r3, r0
 800d94c:	817b      	strh	r3, [r7, #10]
 800d94e:	460b      	mov	r3, r1
 800d950:	813b      	strh	r3, [r7, #8]
 800d952:	4613      	mov	r3, r2
 800d954:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d964:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 f96a 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00d      	beq.n	800d9aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d99c:	d103      	bne.n	800d9a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d9a6:	2303      	movs	r3, #3
 800d9a8:	e0aa      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d9aa:	897b      	ldrh	r3, [r7, #10]
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d9b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9bc:	6a3a      	ldr	r2, [r7, #32]
 800d9be:	4952      	ldr	r1, [pc, #328]	; (800db08 <I2C_RequestMemoryRead+0x1cc>)
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f000 f9a2 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e097      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	617b      	str	r3, [r7, #20]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	617b      	str	r3, [r7, #20]
 800d9e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e8:	6a39      	ldr	r1, [r7, #32]
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f000 fa0c 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00d      	beq.n	800da12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	d107      	bne.n	800da0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	e076      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800da12:	88fb      	ldrh	r3, [r7, #6]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d105      	bne.n	800da24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800da18:	893b      	ldrh	r3, [r7, #8]
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	611a      	str	r2, [r3, #16]
 800da22:	e021      	b.n	800da68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800da24:	893b      	ldrh	r3, [r7, #8]
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	b29b      	uxth	r3, r3
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da34:	6a39      	ldr	r1, [r7, #32]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 f9e6 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00d      	beq.n	800da5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da46:	2b04      	cmp	r3, #4
 800da48:	d107      	bne.n	800da5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e050      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800da5e:	893b      	ldrh	r3, [r7, #8]
 800da60:	b2da      	uxtb	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6a:	6a39      	ldr	r1, [r7, #32]
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f000 f9cb 	bl	800de08 <I2C_WaitOnTXEFlagUntilTimeout>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00d      	beq.n	800da94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	d107      	bne.n	800da90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e035      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800daa2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	6a3b      	ldr	r3, [r7, #32]
 800daaa:	2200      	movs	r2, #0
 800daac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 f8d3 	bl	800dc5c <I2C_WaitOnFlagUntilTimeout>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00d      	beq.n	800dad8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daca:	d103      	bne.n	800dad4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e013      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dad8:	897b      	ldrh	r3, [r7, #10]
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f043 0301 	orr.w	r3, r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	6a3a      	ldr	r2, [r7, #32]
 800daec:	4906      	ldr	r1, [pc, #24]	; (800db08 <I2C_RequestMemoryRead+0x1cc>)
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f000 f90b 	bl	800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	e000      	b.n	800db00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	00010002 	.word	0x00010002

0800db0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db14:	2300      	movs	r3, #0
 800db16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800db26:	4b4b      	ldr	r3, [pc, #300]	; (800dc54 <I2C_DMAAbort+0x148>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	08db      	lsrs	r3, r3, #3
 800db2c:	4a4a      	ldr	r2, [pc, #296]	; (800dc58 <I2C_DMAAbort+0x14c>)
 800db2e:	fba2 2303 	umull	r2, r3, r2, r3
 800db32:	0a1a      	lsrs	r2, r3, #8
 800db34:	4613      	mov	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	00da      	lsls	r2, r3, #3
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4a:	f043 0220 	orr.w	r2, r3, #32
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800db52:	e00a      	b.n	800db6a <I2C_DMAAbort+0x5e>
    }
    count--;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3b01      	subs	r3, #1
 800db58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db68:	d0ea      	beq.n	800db40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db76:	2200      	movs	r2, #0
 800db78:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d003      	beq.n	800db8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db86:	2200      	movs	r2, #0
 800db88:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	2200      	movs	r2, #0
 800db9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d003      	beq.n	800dbb0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbac:	2200      	movs	r2, #0
 800dbae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f022 0201 	bic.w	r2, r2, #1
 800dbce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	2b60      	cmp	r3, #96	; 0x60
 800dbda:	d10e      	bne.n	800dbfa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2220      	movs	r2, #32
 800dbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800dbf2:	6978      	ldr	r0, [r7, #20]
 800dbf4:	f7fe fb56 	bl	800c2a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dbf8:	e027      	b.n	800dc4a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dbfa:	7cfb      	ldrb	r3, [r7, #19]
 800dbfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dc00:	2b28      	cmp	r3, #40	; 0x28
 800dc02:	d117      	bne.n	800dc34 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f042 0201 	orr.w	r2, r2, #1
 800dc12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	2200      	movs	r2, #0
 800dc28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2228      	movs	r2, #40	; 0x28
 800dc2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dc32:	e007      	b.n	800dc44 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	2220      	movs	r2, #32
 800dc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800dc44:	6978      	ldr	r0, [r7, #20]
 800dc46:	f7fe fb23 	bl	800c290 <HAL_I2C_ErrorCallback>
}
 800dc4a:	bf00      	nop
 800dc4c:	3718      	adds	r7, #24
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20000034 	.word	0x20000034
 800dc58:	14f8b589 	.word	0x14f8b589

0800dc5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dc6c:	e025      	b.n	800dcba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc74:	d021      	beq.n	800dcba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc76:	f7fc f94f 	bl	8009f18 <HAL_GetTick>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	683a      	ldr	r2, [r7, #0]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d302      	bcc.n	800dc8c <I2C_WaitOnFlagUntilTimeout+0x30>
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d116      	bne.n	800dcba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2220      	movs	r2, #32
 800dc96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca6:	f043 0220 	orr.w	r2, r3, #32
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e023      	b.n	800dd02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	0c1b      	lsrs	r3, r3, #16
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d10d      	bne.n	800dce0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	695b      	ldr	r3, [r3, #20]
 800dcca:	43da      	mvns	r2, r3
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	4013      	ands	r3, r2
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	bf0c      	ite	eq
 800dcd6:	2301      	moveq	r3, #1
 800dcd8:	2300      	movne	r3, #0
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	461a      	mov	r2, r3
 800dcde:	e00c      	b.n	800dcfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	43da      	mvns	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	4013      	ands	r3, r2
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	bf0c      	ite	eq
 800dcf2:	2301      	moveq	r3, #1
 800dcf4:	2300      	movne	r3, #0
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d0b6      	beq.n	800dc6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
 800dd16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dd18:	e051      	b.n	800ddbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	695b      	ldr	r3, [r3, #20]
 800dd20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd28:	d123      	bne.n	800dd72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dd42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2220      	movs	r2, #32
 800dd4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd5e:	f043 0204 	orr.w	r2, r3, #4
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e046      	b.n	800de00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd78:	d021      	beq.n	800ddbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd7a:	f7fc f8cd 	bl	8009f18 <HAL_GetTick>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d302      	bcc.n	800dd90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d116      	bne.n	800ddbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2200      	movs	r2, #0
 800dd94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2220      	movs	r2, #32
 800dd9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddaa:	f043 0220 	orr.w	r2, r3, #32
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e020      	b.n	800de00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	0c1b      	lsrs	r3, r3, #16
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d10c      	bne.n	800dde2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	43da      	mvns	r2, r3
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	4013      	ands	r3, r2
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	bf14      	ite	ne
 800ddda:	2301      	movne	r3, #1
 800dddc:	2300      	moveq	r3, #0
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	e00b      	b.n	800ddfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	699b      	ldr	r3, [r3, #24]
 800dde8:	43da      	mvns	r2, r3
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	4013      	ands	r3, r2
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bf14      	ite	ne
 800ddf4:	2301      	movne	r3, #1
 800ddf6:	2300      	moveq	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d18d      	bne.n	800dd1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800de14:	e02d      	b.n	800de72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f000 f900 	bl	800e01c <I2C_IsAcknowledgeFailed>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e02d      	b.n	800de82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2c:	d021      	beq.n	800de72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de2e:	f7fc f873 	bl	8009f18 <HAL_GetTick>
 800de32:	4602      	mov	r2, r0
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d302      	bcc.n	800de44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d116      	bne.n	800de72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2220      	movs	r2, #32
 800de4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de5e:	f043 0220 	orr.w	r2, r3, #32
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	e007      	b.n	800de82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de7c:	2b80      	cmp	r3, #128	; 0x80
 800de7e:	d1ca      	bne.n	800de16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b084      	sub	sp, #16
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800de96:	e02d      	b.n	800def4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f000 f8bf 	bl	800e01c <I2C_IsAcknowledgeFailed>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e02d      	b.n	800df04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deae:	d021      	beq.n	800def4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deb0:	f7fc f832 	bl	8009f18 <HAL_GetTick>
 800deb4:	4602      	mov	r2, r0
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	429a      	cmp	r2, r3
 800debe:	d302      	bcc.n	800dec6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d116      	bne.n	800def4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2220      	movs	r2, #32
 800ded0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee0:	f043 0220 	orr.w	r2, r3, #32
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e007      	b.n	800df04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	f003 0304 	and.w	r3, r3, #4
 800defe:	2b04      	cmp	r3, #4
 800df00:	d1ca      	bne.n	800de98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800df18:	4b13      	ldr	r3, [pc, #76]	; (800df68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	08db      	lsrs	r3, r3, #3
 800df1e:	4a13      	ldr	r2, [pc, #76]	; (800df6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800df20:	fba2 2303 	umull	r2, r3, r2, r3
 800df24:	0a1a      	lsrs	r2, r3, #8
 800df26:	4613      	mov	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3b01      	subs	r3, #1
 800df32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d107      	bne.n	800df4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df3e:	f043 0220 	orr.w	r2, r3, #32
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	e008      	b.n	800df5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df58:	d0e9      	beq.n	800df2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	20000034 	.word	0x20000034
 800df6c:	14f8b589 	.word	0x14f8b589

0800df70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800df7c:	e042      	b.n	800e004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	f003 0310 	and.w	r3, r3, #16
 800df88:	2b10      	cmp	r3, #16
 800df8a:	d119      	bne.n	800dfc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f06f 0210 	mvn.w	r2, #16
 800df94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2200      	movs	r2, #0
 800df9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e029      	b.n	800e014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfc0:	f7fb ffaa 	bl	8009f18 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d302      	bcc.n	800dfd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d116      	bne.n	800e004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2220      	movs	r2, #32
 800dfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff0:	f043 0220 	orr.w	r2, r3, #32
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e007      	b.n	800e014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	695b      	ldr	r3, [r3, #20]
 800e00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e00e:	2b40      	cmp	r3, #64	; 0x40
 800e010:	d1b5      	bne.n	800df7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	695b      	ldr	r3, [r3, #20]
 800e02a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e032:	d11b      	bne.n	800e06c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e03c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2220      	movs	r2, #32
 800e048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e058:	f043 0204 	orr.w	r2, r3, #4
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	e000      	b.n	800e06e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b083      	sub	sp, #12
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e08a:	d103      	bne.n	800e094 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e092:	e007      	b.n	800e0a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e098:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e09c:	d102      	bne.n	800e0a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2208      	movs	r2, #8
 800e0a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e264      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d075      	beq.n	800e1ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e0ce:	4ba3      	ldr	r3, [pc, #652]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	f003 030c 	and.w	r3, r3, #12
 800e0d6:	2b04      	cmp	r3, #4
 800e0d8:	d00c      	beq.n	800e0f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e0da:	4ba0      	ldr	r3, [pc, #640]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e0e2:	2b08      	cmp	r3, #8
 800e0e4:	d112      	bne.n	800e10c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e0e6:	4b9d      	ldr	r3, [pc, #628]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0f2:	d10b      	bne.n	800e10c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0f4:	4b99      	ldr	r3, [pc, #612]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d05b      	beq.n	800e1b8 <HAL_RCC_OscConfig+0x108>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d157      	bne.n	800e1b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e23f      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e114:	d106      	bne.n	800e124 <HAL_RCC_OscConfig+0x74>
 800e116:	4b91      	ldr	r3, [pc, #580]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a90      	ldr	r2, [pc, #576]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e11c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	e01d      	b.n	800e160 <HAL_RCC_OscConfig+0xb0>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e12c:	d10c      	bne.n	800e148 <HAL_RCC_OscConfig+0x98>
 800e12e:	4b8b      	ldr	r3, [pc, #556]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a8a      	ldr	r2, [pc, #552]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	4b88      	ldr	r3, [pc, #544]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a87      	ldr	r2, [pc, #540]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e144:	6013      	str	r3, [r2, #0]
 800e146:	e00b      	b.n	800e160 <HAL_RCC_OscConfig+0xb0>
 800e148:	4b84      	ldr	r3, [pc, #528]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a83      	ldr	r2, [pc, #524]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e14e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	4b81      	ldr	r3, [pc, #516]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a80      	ldr	r2, [pc, #512]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e15a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e15e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d013      	beq.n	800e190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e168:	f7fb fed6 	bl	8009f18 <HAL_GetTick>
 800e16c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e16e:	e008      	b.n	800e182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e170:	f7fb fed2 	bl	8009f18 <HAL_GetTick>
 800e174:	4602      	mov	r2, r0
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	2b64      	cmp	r3, #100	; 0x64
 800e17c:	d901      	bls.n	800e182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e17e:	2303      	movs	r3, #3
 800e180:	e204      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e182:	4b76      	ldr	r3, [pc, #472]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d0f0      	beq.n	800e170 <HAL_RCC_OscConfig+0xc0>
 800e18e:	e014      	b.n	800e1ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e190:	f7fb fec2 	bl	8009f18 <HAL_GetTick>
 800e194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e196:	e008      	b.n	800e1aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e198:	f7fb febe 	bl	8009f18 <HAL_GetTick>
 800e19c:	4602      	mov	r2, r0
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	2b64      	cmp	r3, #100	; 0x64
 800e1a4:	d901      	bls.n	800e1aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	e1f0      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e1aa:	4b6c      	ldr	r3, [pc, #432]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1f0      	bne.n	800e198 <HAL_RCC_OscConfig+0xe8>
 800e1b6:	e000      	b.n	800e1ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e1b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f003 0302 	and.w	r3, r3, #2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d063      	beq.n	800e28e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e1c6:	4b65      	ldr	r3, [pc, #404]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	f003 030c 	and.w	r3, r3, #12
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00b      	beq.n	800e1ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e1d2:	4b62      	ldr	r3, [pc, #392]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e1da:	2b08      	cmp	r3, #8
 800e1dc:	d11c      	bne.n	800e218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e1de:	4b5f      	ldr	r3, [pc, #380]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d116      	bne.n	800e218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e1ea:	4b5c      	ldr	r3, [pc, #368]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f003 0302 	and.w	r3, r3, #2
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d005      	beq.n	800e202 <HAL_RCC_OscConfig+0x152>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d001      	beq.n	800e202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e1c4      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e202:	4b56      	ldr	r3, [pc, #344]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	4952      	ldr	r1, [pc, #328]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e212:	4313      	orrs	r3, r2
 800e214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e216:	e03a      	b.n	800e28e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d020      	beq.n	800e262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e220:	4b4f      	ldr	r3, [pc, #316]	; (800e360 <HAL_RCC_OscConfig+0x2b0>)
 800e222:	2201      	movs	r2, #1
 800e224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e226:	f7fb fe77 	bl	8009f18 <HAL_GetTick>
 800e22a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e22c:	e008      	b.n	800e240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e22e:	f7fb fe73 	bl	8009f18 <HAL_GetTick>
 800e232:	4602      	mov	r2, r0
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d901      	bls.n	800e240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e23c:	2303      	movs	r3, #3
 800e23e:	e1a5      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e240:	4b46      	ldr	r3, [pc, #280]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 0302 	and.w	r3, r3, #2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d0f0      	beq.n	800e22e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e24c:	4b43      	ldr	r3, [pc, #268]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	00db      	lsls	r3, r3, #3
 800e25a:	4940      	ldr	r1, [pc, #256]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e25c:	4313      	orrs	r3, r2
 800e25e:	600b      	str	r3, [r1, #0]
 800e260:	e015      	b.n	800e28e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e262:	4b3f      	ldr	r3, [pc, #252]	; (800e360 <HAL_RCC_OscConfig+0x2b0>)
 800e264:	2200      	movs	r2, #0
 800e266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e268:	f7fb fe56 	bl	8009f18 <HAL_GetTick>
 800e26c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e26e:	e008      	b.n	800e282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e270:	f7fb fe52 	bl	8009f18 <HAL_GetTick>
 800e274:	4602      	mov	r2, r0
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d901      	bls.n	800e282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e27e:	2303      	movs	r3, #3
 800e280:	e184      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e282:	4b36      	ldr	r3, [pc, #216]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f003 0302 	and.w	r3, r3, #2
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1f0      	bne.n	800e270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f003 0308 	and.w	r3, r3, #8
 800e296:	2b00      	cmp	r3, #0
 800e298:	d030      	beq.n	800e2fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d016      	beq.n	800e2d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e2a2:	4b30      	ldr	r3, [pc, #192]	; (800e364 <HAL_RCC_OscConfig+0x2b4>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2a8:	f7fb fe36 	bl	8009f18 <HAL_GetTick>
 800e2ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e2ae:	e008      	b.n	800e2c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e2b0:	f7fb fe32 	bl	8009f18 <HAL_GetTick>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d901      	bls.n	800e2c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e164      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e2c2:	4b26      	ldr	r3, [pc, #152]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c6:	f003 0302 	and.w	r3, r3, #2
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d0f0      	beq.n	800e2b0 <HAL_RCC_OscConfig+0x200>
 800e2ce:	e015      	b.n	800e2fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e2d0:	4b24      	ldr	r3, [pc, #144]	; (800e364 <HAL_RCC_OscConfig+0x2b4>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e2d6:	f7fb fe1f 	bl	8009f18 <HAL_GetTick>
 800e2da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e2dc:	e008      	b.n	800e2f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e2de:	f7fb fe1b 	bl	8009f18 <HAL_GetTick>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d901      	bls.n	800e2f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	e14d      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e2f0:	4b1a      	ldr	r3, [pc, #104]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f4:	f003 0302 	and.w	r3, r3, #2
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1f0      	bne.n	800e2de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f003 0304 	and.w	r3, r3, #4
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 80a0 	beq.w	800e44a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e30a:	2300      	movs	r3, #0
 800e30c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e30e:	4b13      	ldr	r3, [pc, #76]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10f      	bne.n	800e33a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e31a:	2300      	movs	r3, #0
 800e31c:	60bb      	str	r3, [r7, #8]
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e322:	4a0e      	ldr	r2, [pc, #56]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e328:	6413      	str	r3, [r2, #64]	; 0x40
 800e32a:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <HAL_RCC_OscConfig+0x2ac>)
 800e32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e332:	60bb      	str	r3, [r7, #8]
 800e334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e336:	2301      	movs	r3, #1
 800e338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e33a:	4b0b      	ldr	r3, [pc, #44]	; (800e368 <HAL_RCC_OscConfig+0x2b8>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e342:	2b00      	cmp	r3, #0
 800e344:	d121      	bne.n	800e38a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e346:	4b08      	ldr	r3, [pc, #32]	; (800e368 <HAL_RCC_OscConfig+0x2b8>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a07      	ldr	r2, [pc, #28]	; (800e368 <HAL_RCC_OscConfig+0x2b8>)
 800e34c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e352:	f7fb fde1 	bl	8009f18 <HAL_GetTick>
 800e356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e358:	e011      	b.n	800e37e <HAL_RCC_OscConfig+0x2ce>
 800e35a:	bf00      	nop
 800e35c:	40023800 	.word	0x40023800
 800e360:	42470000 	.word	0x42470000
 800e364:	42470e80 	.word	0x42470e80
 800e368:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e36c:	f7fb fdd4 	bl	8009f18 <HAL_GetTick>
 800e370:	4602      	mov	r2, r0
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	2b02      	cmp	r3, #2
 800e378:	d901      	bls.n	800e37e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e37a:	2303      	movs	r3, #3
 800e37c:	e106      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e37e:	4b85      	ldr	r3, [pc, #532]	; (800e594 <HAL_RCC_OscConfig+0x4e4>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e386:	2b00      	cmp	r3, #0
 800e388:	d0f0      	beq.n	800e36c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d106      	bne.n	800e3a0 <HAL_RCC_OscConfig+0x2f0>
 800e392:	4b81      	ldr	r3, [pc, #516]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e396:	4a80      	ldr	r2, [pc, #512]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e398:	f043 0301 	orr.w	r3, r3, #1
 800e39c:	6713      	str	r3, [r2, #112]	; 0x70
 800e39e:	e01c      	b.n	800e3da <HAL_RCC_OscConfig+0x32a>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	2b05      	cmp	r3, #5
 800e3a6:	d10c      	bne.n	800e3c2 <HAL_RCC_OscConfig+0x312>
 800e3a8:	4b7b      	ldr	r3, [pc, #492]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ac:	4a7a      	ldr	r2, [pc, #488]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3ae:	f043 0304 	orr.w	r3, r3, #4
 800e3b2:	6713      	str	r3, [r2, #112]	; 0x70
 800e3b4:	4b78      	ldr	r3, [pc, #480]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b8:	4a77      	ldr	r2, [pc, #476]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3ba:	f043 0301 	orr.w	r3, r3, #1
 800e3be:	6713      	str	r3, [r2, #112]	; 0x70
 800e3c0:	e00b      	b.n	800e3da <HAL_RCC_OscConfig+0x32a>
 800e3c2:	4b75      	ldr	r3, [pc, #468]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3c6:	4a74      	ldr	r2, [pc, #464]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3c8:	f023 0301 	bic.w	r3, r3, #1
 800e3cc:	6713      	str	r3, [r2, #112]	; 0x70
 800e3ce:	4b72      	ldr	r3, [pc, #456]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3d2:	4a71      	ldr	r2, [pc, #452]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e3d4:	f023 0304 	bic.w	r3, r3, #4
 800e3d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d015      	beq.n	800e40e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3e2:	f7fb fd99 	bl	8009f18 <HAL_GetTick>
 800e3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e3e8:	e00a      	b.n	800e400 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e3ea:	f7fb fd95 	bl	8009f18 <HAL_GetTick>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d901      	bls.n	800e400 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e3fc:	2303      	movs	r3, #3
 800e3fe:	e0c5      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e400:	4b65      	ldr	r3, [pc, #404]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e404:	f003 0302 	and.w	r3, r3, #2
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d0ee      	beq.n	800e3ea <HAL_RCC_OscConfig+0x33a>
 800e40c:	e014      	b.n	800e438 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e40e:	f7fb fd83 	bl	8009f18 <HAL_GetTick>
 800e412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e414:	e00a      	b.n	800e42c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e416:	f7fb fd7f 	bl	8009f18 <HAL_GetTick>
 800e41a:	4602      	mov	r2, r0
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	f241 3288 	movw	r2, #5000	; 0x1388
 800e424:	4293      	cmp	r3, r2
 800e426:	d901      	bls.n	800e42c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e428:	2303      	movs	r3, #3
 800e42a:	e0af      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e42c:	4b5a      	ldr	r3, [pc, #360]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e430:	f003 0302 	and.w	r3, r3, #2
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1ee      	bne.n	800e416 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e438:	7dfb      	ldrb	r3, [r7, #23]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d105      	bne.n	800e44a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e43e:	4b56      	ldr	r3, [pc, #344]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e442:	4a55      	ldr	r2, [pc, #340]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e448:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	699b      	ldr	r3, [r3, #24]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 809b 	beq.w	800e58a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e454:	4b50      	ldr	r3, [pc, #320]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	f003 030c 	and.w	r3, r3, #12
 800e45c:	2b08      	cmp	r3, #8
 800e45e:	d05c      	beq.n	800e51a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d141      	bne.n	800e4ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e468:	4b4c      	ldr	r3, [pc, #304]	; (800e59c <HAL_RCC_OscConfig+0x4ec>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e46e:	f7fb fd53 	bl	8009f18 <HAL_GetTick>
 800e472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e474:	e008      	b.n	800e488 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e476:	f7fb fd4f 	bl	8009f18 <HAL_GetTick>
 800e47a:	4602      	mov	r2, r0
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	2b02      	cmp	r3, #2
 800e482:	d901      	bls.n	800e488 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e484:	2303      	movs	r3, #3
 800e486:	e081      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e488:	4b43      	ldr	r3, [pc, #268]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1f0      	bne.n	800e476 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	69da      	ldr	r2, [r3, #28]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	431a      	orrs	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a2:	019b      	lsls	r3, r3, #6
 800e4a4:	431a      	orrs	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4aa:	085b      	lsrs	r3, r3, #1
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	041b      	lsls	r3, r3, #16
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b6:	061b      	lsls	r3, r3, #24
 800e4b8:	4937      	ldr	r1, [pc, #220]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e4be:	4b37      	ldr	r3, [pc, #220]	; (800e59c <HAL_RCC_OscConfig+0x4ec>)
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e4c4:	f7fb fd28 	bl	8009f18 <HAL_GetTick>
 800e4c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e4ca:	e008      	b.n	800e4de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e4cc:	f7fb fd24 	bl	8009f18 <HAL_GetTick>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	2b02      	cmp	r3, #2
 800e4d8:	d901      	bls.n	800e4de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	e056      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e4de:	4b2e      	ldr	r3, [pc, #184]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d0f0      	beq.n	800e4cc <HAL_RCC_OscConfig+0x41c>
 800e4ea:	e04e      	b.n	800e58a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e4ec:	4b2b      	ldr	r3, [pc, #172]	; (800e59c <HAL_RCC_OscConfig+0x4ec>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e4f2:	f7fb fd11 	bl	8009f18 <HAL_GetTick>
 800e4f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e4f8:	e008      	b.n	800e50c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e4fa:	f7fb fd0d 	bl	8009f18 <HAL_GetTick>
 800e4fe:	4602      	mov	r2, r0
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	2b02      	cmp	r3, #2
 800e506:	d901      	bls.n	800e50c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e508:	2303      	movs	r3, #3
 800e50a:	e03f      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e50c:	4b22      	ldr	r3, [pc, #136]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1f0      	bne.n	800e4fa <HAL_RCC_OscConfig+0x44a>
 800e518:	e037      	b.n	800e58a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d101      	bne.n	800e526 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	e032      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e526:	4b1c      	ldr	r3, [pc, #112]	; (800e598 <HAL_RCC_OscConfig+0x4e8>)
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d028      	beq.n	800e586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e53e:	429a      	cmp	r2, r3
 800e540:	d121      	bne.n	800e586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d11a      	bne.n	800e586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e556:	4013      	ands	r3, r2
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e55c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e55e:	4293      	cmp	r3, r2
 800e560:	d111      	bne.n	800e586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56c:	085b      	lsrs	r3, r3, #1
 800e56e:	3b01      	subs	r3, #1
 800e570:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e572:	429a      	cmp	r2, r3
 800e574:	d107      	bne.n	800e586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e580:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e582:	429a      	cmp	r2, r3
 800e584:	d001      	beq.n	800e58a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e000      	b.n	800e58c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	40007000 	.word	0x40007000
 800e598:	40023800 	.word	0x40023800
 800e59c:	42470060 	.word	0x42470060

0800e5a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e0cc      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e5b4:	4b68      	ldr	r3, [pc, #416]	; (800e758 <HAL_RCC_ClockConfig+0x1b8>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f003 0307 	and.w	r3, r3, #7
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d90c      	bls.n	800e5dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5c2:	4b65      	ldr	r3, [pc, #404]	; (800e758 <HAL_RCC_ClockConfig+0x1b8>)
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	b2d2      	uxtb	r2, r2
 800e5c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5ca:	4b63      	ldr	r3, [pc, #396]	; (800e758 <HAL_RCC_ClockConfig+0x1b8>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f003 0307 	and.w	r3, r3, #7
 800e5d2:	683a      	ldr	r2, [r7, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d001      	beq.n	800e5dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e0b8      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d020      	beq.n	800e62a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d005      	beq.n	800e600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e5f4:	4b59      	ldr	r3, [pc, #356]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	4a58      	ldr	r2, [pc, #352]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e5fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e5fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 0308 	and.w	r3, r3, #8
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d005      	beq.n	800e618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e60c:	4b53      	ldr	r3, [pc, #332]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	4a52      	ldr	r2, [pc, #328]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e618:	4b50      	ldr	r3, [pc, #320]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	494d      	ldr	r1, [pc, #308]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e626:	4313      	orrs	r3, r2
 800e628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 0301 	and.w	r3, r3, #1
 800e632:	2b00      	cmp	r3, #0
 800e634:	d044      	beq.n	800e6c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d107      	bne.n	800e64e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e63e:	4b47      	ldr	r3, [pc, #284]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d119      	bne.n	800e67e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e07f      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d003      	beq.n	800e65e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d107      	bne.n	800e66e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e65e:	4b3f      	ldr	r3, [pc, #252]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d109      	bne.n	800e67e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e66a:	2301      	movs	r3, #1
 800e66c:	e06f      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e66e:	4b3b      	ldr	r3, [pc, #236]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 0302 	and.w	r3, r3, #2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e067      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e67e:	4b37      	ldr	r3, [pc, #220]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	f023 0203 	bic.w	r2, r3, #3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	4934      	ldr	r1, [pc, #208]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e68c:	4313      	orrs	r3, r2
 800e68e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e690:	f7fb fc42 	bl	8009f18 <HAL_GetTick>
 800e694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e696:	e00a      	b.n	800e6ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e698:	f7fb fc3e 	bl	8009f18 <HAL_GetTick>
 800e69c:	4602      	mov	r2, r0
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d901      	bls.n	800e6ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e04f      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e6ae:	4b2b      	ldr	r3, [pc, #172]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	f003 020c 	and.w	r2, r3, #12
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d1eb      	bne.n	800e698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e6c0:	4b25      	ldr	r3, [pc, #148]	; (800e758 <HAL_RCC_ClockConfig+0x1b8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 0307 	and.w	r3, r3, #7
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d20c      	bcs.n	800e6e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6ce:	4b22      	ldr	r3, [pc, #136]	; (800e758 <HAL_RCC_ClockConfig+0x1b8>)
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	b2d2      	uxtb	r2, r2
 800e6d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6d6:	4b20      	ldr	r3, [pc, #128]	; (800e758 <HAL_RCC_ClockConfig+0x1b8>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f003 0307 	and.w	r3, r3, #7
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d001      	beq.n	800e6e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e032      	b.n	800e74e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d008      	beq.n	800e706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e6f4:	4b19      	ldr	r3, [pc, #100]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	4916      	ldr	r1, [pc, #88]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e702:	4313      	orrs	r3, r2
 800e704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f003 0308 	and.w	r3, r3, #8
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d009      	beq.n	800e726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e712:	4b12      	ldr	r3, [pc, #72]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	490e      	ldr	r1, [pc, #56]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e722:	4313      	orrs	r3, r2
 800e724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e726:	f000 f821 	bl	800e76c <HAL_RCC_GetSysClockFreq>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <HAL_RCC_ClockConfig+0x1bc>)
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	091b      	lsrs	r3, r3, #4
 800e732:	f003 030f 	and.w	r3, r3, #15
 800e736:	490a      	ldr	r1, [pc, #40]	; (800e760 <HAL_RCC_ClockConfig+0x1c0>)
 800e738:	5ccb      	ldrb	r3, [r1, r3]
 800e73a:	fa22 f303 	lsr.w	r3, r2, r3
 800e73e:	4a09      	ldr	r2, [pc, #36]	; (800e764 <HAL_RCC_ClockConfig+0x1c4>)
 800e740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e742:	4b09      	ldr	r3, [pc, #36]	; (800e768 <HAL_RCC_ClockConfig+0x1c8>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4618      	mov	r0, r3
 800e748:	f7fb fba2 	bl	8009e90 <HAL_InitTick>

  return HAL_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	40023c00 	.word	0x40023c00
 800e75c:	40023800 	.word	0x40023800
 800e760:	08026514 	.word	0x08026514
 800e764:	20000034 	.word	0x20000034
 800e768:	20000038 	.word	0x20000038

0800e76c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e76c:	b5b0      	push	{r4, r5, r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e772:	2100      	movs	r1, #0
 800e774:	6079      	str	r1, [r7, #4]
 800e776:	2100      	movs	r1, #0
 800e778:	60f9      	str	r1, [r7, #12]
 800e77a:	2100      	movs	r1, #0
 800e77c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e77e:	2100      	movs	r1, #0
 800e780:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e782:	4952      	ldr	r1, [pc, #328]	; (800e8cc <HAL_RCC_GetSysClockFreq+0x160>)
 800e784:	6889      	ldr	r1, [r1, #8]
 800e786:	f001 010c 	and.w	r1, r1, #12
 800e78a:	2908      	cmp	r1, #8
 800e78c:	d00d      	beq.n	800e7aa <HAL_RCC_GetSysClockFreq+0x3e>
 800e78e:	2908      	cmp	r1, #8
 800e790:	f200 8094 	bhi.w	800e8bc <HAL_RCC_GetSysClockFreq+0x150>
 800e794:	2900      	cmp	r1, #0
 800e796:	d002      	beq.n	800e79e <HAL_RCC_GetSysClockFreq+0x32>
 800e798:	2904      	cmp	r1, #4
 800e79a:	d003      	beq.n	800e7a4 <HAL_RCC_GetSysClockFreq+0x38>
 800e79c:	e08e      	b.n	800e8bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e79e:	4b4c      	ldr	r3, [pc, #304]	; (800e8d0 <HAL_RCC_GetSysClockFreq+0x164>)
 800e7a0:	60bb      	str	r3, [r7, #8]
       break;
 800e7a2:	e08e      	b.n	800e8c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e7a4:	4b4b      	ldr	r3, [pc, #300]	; (800e8d4 <HAL_RCC_GetSysClockFreq+0x168>)
 800e7a6:	60bb      	str	r3, [r7, #8]
      break;
 800e7a8:	e08b      	b.n	800e8c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e7aa:	4948      	ldr	r1, [pc, #288]	; (800e8cc <HAL_RCC_GetSysClockFreq+0x160>)
 800e7ac:	6849      	ldr	r1, [r1, #4]
 800e7ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e7b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e7b4:	4945      	ldr	r1, [pc, #276]	; (800e8cc <HAL_RCC_GetSysClockFreq+0x160>)
 800e7b6:	6849      	ldr	r1, [r1, #4]
 800e7b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e7bc:	2900      	cmp	r1, #0
 800e7be:	d024      	beq.n	800e80a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e7c0:	4942      	ldr	r1, [pc, #264]	; (800e8cc <HAL_RCC_GetSysClockFreq+0x160>)
 800e7c2:	6849      	ldr	r1, [r1, #4]
 800e7c4:	0989      	lsrs	r1, r1, #6
 800e7c6:	4608      	mov	r0, r1
 800e7c8:	f04f 0100 	mov.w	r1, #0
 800e7cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e7d0:	f04f 0500 	mov.w	r5, #0
 800e7d4:	ea00 0204 	and.w	r2, r0, r4
 800e7d8:	ea01 0305 	and.w	r3, r1, r5
 800e7dc:	493d      	ldr	r1, [pc, #244]	; (800e8d4 <HAL_RCC_GetSysClockFreq+0x168>)
 800e7de:	fb01 f003 	mul.w	r0, r1, r3
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	fb01 f102 	mul.w	r1, r1, r2
 800e7e8:	1844      	adds	r4, r0, r1
 800e7ea:	493a      	ldr	r1, [pc, #232]	; (800e8d4 <HAL_RCC_GetSysClockFreq+0x168>)
 800e7ec:	fba2 0101 	umull	r0, r1, r2, r1
 800e7f0:	1863      	adds	r3, r4, r1
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f04f 0300 	mov.w	r3, #0
 800e7fc:	f7f2 fa5c 	bl	8000cb8 <__aeabi_uldivmod>
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	4613      	mov	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	e04a      	b.n	800e8a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e80a:	4b30      	ldr	r3, [pc, #192]	; (800e8cc <HAL_RCC_GetSysClockFreq+0x160>)
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	099b      	lsrs	r3, r3, #6
 800e810:	461a      	mov	r2, r3
 800e812:	f04f 0300 	mov.w	r3, #0
 800e816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e81a:	f04f 0100 	mov.w	r1, #0
 800e81e:	ea02 0400 	and.w	r4, r2, r0
 800e822:	ea03 0501 	and.w	r5, r3, r1
 800e826:	4620      	mov	r0, r4
 800e828:	4629      	mov	r1, r5
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	f04f 0300 	mov.w	r3, #0
 800e832:	014b      	lsls	r3, r1, #5
 800e834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e838:	0142      	lsls	r2, r0, #5
 800e83a:	4610      	mov	r0, r2
 800e83c:	4619      	mov	r1, r3
 800e83e:	1b00      	subs	r0, r0, r4
 800e840:	eb61 0105 	sbc.w	r1, r1, r5
 800e844:	f04f 0200 	mov.w	r2, #0
 800e848:	f04f 0300 	mov.w	r3, #0
 800e84c:	018b      	lsls	r3, r1, #6
 800e84e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e852:	0182      	lsls	r2, r0, #6
 800e854:	1a12      	subs	r2, r2, r0
 800e856:	eb63 0301 	sbc.w	r3, r3, r1
 800e85a:	f04f 0000 	mov.w	r0, #0
 800e85e:	f04f 0100 	mov.w	r1, #0
 800e862:	00d9      	lsls	r1, r3, #3
 800e864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e868:	00d0      	lsls	r0, r2, #3
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	1912      	adds	r2, r2, r4
 800e870:	eb45 0303 	adc.w	r3, r5, r3
 800e874:	f04f 0000 	mov.w	r0, #0
 800e878:	f04f 0100 	mov.w	r1, #0
 800e87c:	0299      	lsls	r1, r3, #10
 800e87e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e882:	0290      	lsls	r0, r2, #10
 800e884:	4602      	mov	r2, r0
 800e886:	460b      	mov	r3, r1
 800e888:	4610      	mov	r0, r2
 800e88a:	4619      	mov	r1, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	461a      	mov	r2, r3
 800e890:	f04f 0300 	mov.w	r3, #0
 800e894:	f7f2 fa10 	bl	8000cb8 <__aeabi_uldivmod>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4613      	mov	r3, r2
 800e89e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e8a0:	4b0a      	ldr	r3, [pc, #40]	; (800e8cc <HAL_RCC_GetSysClockFreq+0x160>)
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	0c1b      	lsrs	r3, r3, #16
 800e8a6:	f003 0303 	and.w	r3, r3, #3
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8b8:	60bb      	str	r3, [r7, #8]
      break;
 800e8ba:	e002      	b.n	800e8c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e8bc:	4b04      	ldr	r3, [pc, #16]	; (800e8d0 <HAL_RCC_GetSysClockFreq+0x164>)
 800e8be:	60bb      	str	r3, [r7, #8]
      break;
 800e8c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e8cc:	40023800 	.word	0x40023800
 800e8d0:	00f42400 	.word	0x00f42400
 800e8d4:	017d7840 	.word	0x017d7840

0800e8d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e8dc:	4b03      	ldr	r3, [pc, #12]	; (800e8ec <HAL_RCC_GetHCLKFreq+0x14>)
 800e8de:	681b      	ldr	r3, [r3, #0]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	20000034 	.word	0x20000034

0800e8f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e8f4:	f7ff fff0 	bl	800e8d8 <HAL_RCC_GetHCLKFreq>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	4b05      	ldr	r3, [pc, #20]	; (800e910 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	0a9b      	lsrs	r3, r3, #10
 800e900:	f003 0307 	and.w	r3, r3, #7
 800e904:	4903      	ldr	r1, [pc, #12]	; (800e914 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e906:	5ccb      	ldrb	r3, [r1, r3]
 800e908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	40023800 	.word	0x40023800
 800e914:	08026524 	.word	0x08026524

0800e918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e91c:	f7ff ffdc 	bl	800e8d8 <HAL_RCC_GetHCLKFreq>
 800e920:	4602      	mov	r2, r0
 800e922:	4b05      	ldr	r3, [pc, #20]	; (800e938 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	0b5b      	lsrs	r3, r3, #13
 800e928:	f003 0307 	and.w	r3, r3, #7
 800e92c:	4903      	ldr	r1, [pc, #12]	; (800e93c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e92e:	5ccb      	ldrb	r3, [r1, r3]
 800e930:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e934:	4618      	mov	r0, r3
 800e936:	bd80      	pop	{r7, pc}
 800e938:	40023800 	.word	0x40023800
 800e93c:	08026524 	.word	0x08026524

0800e940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	e07b      	b.n	800ea4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e956:	2b00      	cmp	r3, #0
 800e958:	d108      	bne.n	800e96c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e962:	d009      	beq.n	800e978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	61da      	str	r2, [r3, #28]
 800e96a:	e005      	b.n	800e978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7fa fb04 	bl	8008fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2202      	movs	r2, #2
 800e99c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e9c0:	431a      	orrs	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9ca:	431a      	orrs	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	f003 0302 	and.w	r3, r3, #2
 800e9d4:	431a      	orrs	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9e8:	431a      	orrs	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9f2:	431a      	orrs	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a1b      	ldr	r3, [r3, #32]
 800e9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9fc:	ea42 0103 	orr.w	r1, r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	430a      	orrs	r2, r1
 800ea0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	699b      	ldr	r3, [r3, #24]
 800ea14:	0c1b      	lsrs	r3, r3, #16
 800ea16:	f003 0104 	and.w	r1, r3, #4
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1e:	f003 0210 	and.w	r2, r3, #16
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	430a      	orrs	r2, r1
 800ea28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69da      	ldr	r2, [r3, #28]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b08c      	sub	sp, #48	; 0x30
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	60f8      	str	r0, [r7, #12]
 800ea5a:	60b9      	str	r1, [r7, #8]
 800ea5c:	607a      	str	r2, [r7, #4]
 800ea5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea60:	2301      	movs	r3, #1
 800ea62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d101      	bne.n	800ea78 <HAL_SPI_TransmitReceive+0x26>
 800ea74:	2302      	movs	r3, #2
 800ea76:	e18a      	b.n	800ed8e <HAL_SPI_TransmitReceive+0x33c>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea80:	f7fb fa4a 	bl	8009f18 <HAL_GetTick>
 800ea84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ea96:	887b      	ldrh	r3, [r7, #2]
 800ea98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d00f      	beq.n	800eac2 <HAL_SPI_TransmitReceive+0x70>
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaa8:	d107      	bne.n	800eaba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d103      	bne.n	800eaba <HAL_SPI_TransmitReceive+0x68>
 800eab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eab6:	2b04      	cmp	r3, #4
 800eab8:	d003      	beq.n	800eac2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eaba:	2302      	movs	r3, #2
 800eabc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eac0:	e15b      	b.n	800ed7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d005      	beq.n	800ead4 <HAL_SPI_TransmitReceive+0x82>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <HAL_SPI_TransmitReceive+0x82>
 800eace:	887b      	ldrh	r3, [r7, #2]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d103      	bne.n	800eadc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eada:	e14e      	b.n	800ed7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	d003      	beq.n	800eaf0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2205      	movs	r2, #5
 800eaec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	887a      	ldrh	r2, [r7, #2]
 800eb00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	887a      	ldrh	r2, [r7, #2]
 800eb06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	887a      	ldrh	r2, [r7, #2]
 800eb12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	887a      	ldrh	r2, [r7, #2]
 800eb18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2200      	movs	r2, #0
 800eb24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb30:	2b40      	cmp	r3, #64	; 0x40
 800eb32:	d007      	beq.n	800eb44 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb4c:	d178      	bne.n	800ec40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <HAL_SPI_TransmitReceive+0x10a>
 800eb56:	8b7b      	ldrh	r3, [r7, #26]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d166      	bne.n	800ec2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb60:	881a      	ldrh	r2, [r3, #0]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6c:	1c9a      	adds	r2, r3, #2
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb80:	e053      	b.n	800ec2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	f003 0302 	and.w	r3, r3, #2
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d11b      	bne.n	800ebc8 <HAL_SPI_TransmitReceive+0x176>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d016      	beq.n	800ebc8 <HAL_SPI_TransmitReceive+0x176>
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d113      	bne.n	800ebc8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba4:	881a      	ldrh	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb0:	1c9a      	adds	r2, r3, #2
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d119      	bne.n	800ec0a <HAL_SPI_TransmitReceive+0x1b8>
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d014      	beq.n	800ec0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebea:	b292      	uxth	r2, r2
 800ebec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf2:	1c9a      	adds	r2, r3, #2
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec06:	2301      	movs	r3, #1
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ec0a:	f7fb f985 	bl	8009f18 <HAL_GetTick>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d807      	bhi.n	800ec2a <HAL_SPI_TransmitReceive+0x1d8>
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec20:	d003      	beq.n	800ec2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec28:	e0a7      	b.n	800ed7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1a6      	bne.n	800eb82 <HAL_SPI_TransmitReceive+0x130>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1a1      	bne.n	800eb82 <HAL_SPI_TransmitReceive+0x130>
 800ec3e:	e07c      	b.n	800ed3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d002      	beq.n	800ec4e <HAL_SPI_TransmitReceive+0x1fc>
 800ec48:	8b7b      	ldrh	r3, [r7, #26]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d16b      	bne.n	800ed26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	330c      	adds	r3, #12
 800ec58:	7812      	ldrb	r2, [r2, #0]
 800ec5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec60:	1c5a      	adds	r2, r3, #1
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	b29a      	uxth	r2, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec74:	e057      	b.n	800ed26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	689b      	ldr	r3, [r3, #8]
 800ec7c:	f003 0302 	and.w	r3, r3, #2
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d11c      	bne.n	800ecbe <HAL_SPI_TransmitReceive+0x26c>
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d017      	beq.n	800ecbe <HAL_SPI_TransmitReceive+0x26c>
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d114      	bne.n	800ecbe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	330c      	adds	r3, #12
 800ec9e:	7812      	ldrb	r2, [r2, #0]
 800eca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca6:	1c5a      	adds	r2, r3, #1
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	f003 0301 	and.w	r3, r3, #1
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d119      	bne.n	800ed00 <HAL_SPI_TransmitReceive+0x2ae>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d014      	beq.n	800ed00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68da      	ldr	r2, [r3, #12]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece0:	b2d2      	uxtb	r2, r2
 800ece2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece8:	1c5a      	adds	r2, r3, #1
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ed00:	f7fb f90a 	bl	8009f18 <HAL_GetTick>
 800ed04:	4602      	mov	r2, r0
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	1ad3      	subs	r3, r2, r3
 800ed0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d803      	bhi.n	800ed18 <HAL_SPI_TransmitReceive+0x2c6>
 800ed10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed16:	d102      	bne.n	800ed1e <HAL_SPI_TransmitReceive+0x2cc>
 800ed18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d103      	bne.n	800ed26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ed1e:	2303      	movs	r3, #3
 800ed20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed24:	e029      	b.n	800ed7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1a2      	bne.n	800ec76 <HAL_SPI_TransmitReceive+0x224>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d19d      	bne.n	800ec76 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f000 f9d0 	bl	800f0e4 <SPI_EndRxTxTransaction>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d006      	beq.n	800ed58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2220      	movs	r2, #32
 800ed54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ed56:	e010      	b.n	800ed7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10b      	bne.n	800ed78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed60:	2300      	movs	r3, #0
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	617b      	str	r3, [r7, #20]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	617b      	str	r3, [r7, #20]
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	e000      	b.n	800ed7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ed78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3730      	adds	r7, #48	; 0x30
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
	...

0800ed98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b088      	sub	sp, #32
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	099b      	lsrs	r3, r3, #6
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d10f      	bne.n	800eddc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	099b      	lsrs	r3, r3, #6
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d004      	beq.n	800eddc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	4798      	blx	r3
    return;
 800edda:	e0d7      	b.n	800ef8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	085b      	lsrs	r3, r3, #1
 800ede0:	f003 0301 	and.w	r3, r3, #1
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00a      	beq.n	800edfe <HAL_SPI_IRQHandler+0x66>
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	09db      	lsrs	r3, r3, #7
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d004      	beq.n	800edfe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	4798      	blx	r3
    return;
 800edfc:	e0c6      	b.n	800ef8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	095b      	lsrs	r3, r3, #5
 800ee02:	f003 0301 	and.w	r3, r3, #1
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10c      	bne.n	800ee24 <HAL_SPI_IRQHandler+0x8c>
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	099b      	lsrs	r3, r3, #6
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d106      	bne.n	800ee24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	0a1b      	lsrs	r3, r3, #8
 800ee1a:	f003 0301 	and.w	r3, r3, #1
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f000 80b4 	beq.w	800ef8c <HAL_SPI_IRQHandler+0x1f4>
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	095b      	lsrs	r3, r3, #5
 800ee28:	f003 0301 	and.w	r3, r3, #1
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 80ad 	beq.w	800ef8c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	099b      	lsrs	r3, r3, #6
 800ee36:	f003 0301 	and.w	r3, r3, #1
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d023      	beq.n	800ee86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d011      	beq.n	800ee6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee4e:	f043 0204 	orr.w	r2, r3, #4
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	617b      	str	r3, [r7, #20]
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	e00b      	b.n	800ee86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee6e:	2300      	movs	r3, #0
 800ee70:	613b      	str	r3, [r7, #16]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	613b      	str	r3, [r7, #16]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	613b      	str	r3, [r7, #16]
 800ee82:	693b      	ldr	r3, [r7, #16]
        return;
 800ee84:	e082      	b.n	800ef8c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	095b      	lsrs	r3, r3, #5
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d014      	beq.n	800eebc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee96:	f043 0201 	orr.w	r2, r3, #1
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ee9e:	2300      	movs	r3, #0
 800eea0:	60fb      	str	r3, [r7, #12]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	60fb      	str	r3, [r7, #12]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	0a1b      	lsrs	r3, r3, #8
 800eec0:	f003 0301 	and.w	r3, r3, #1
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00c      	beq.n	800eee2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eecc:	f043 0208 	orr.w	r2, r3, #8
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eed4:	2300      	movs	r3, #0
 800eed6:	60bb      	str	r3, [r7, #8]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	60bb      	str	r3, [r7, #8]
 800eee0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d04f      	beq.n	800ef8a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eef8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2201      	movs	r2, #1
 800eefe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	f003 0302 	and.w	r3, r3, #2
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d104      	bne.n	800ef16 <HAL_SPI_IRQHandler+0x17e>
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	f003 0301 	and.w	r3, r3, #1
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d034      	beq.n	800ef80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f022 0203 	bic.w	r2, r2, #3
 800ef24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d011      	beq.n	800ef52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef32:	4a18      	ldr	r2, [pc, #96]	; (800ef94 <HAL_SPI_IRQHandler+0x1fc>)
 800ef34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fb fb32 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d005      	beq.n	800ef52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d016      	beq.n	800ef88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef5e:	4a0d      	ldr	r2, [pc, #52]	; (800ef94 <HAL_SPI_IRQHandler+0x1fc>)
 800ef60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fb fb1c 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00a      	beq.n	800ef88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800ef7e:	e003      	b.n	800ef88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f809 	bl	800ef98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ef86:	e000      	b.n	800ef8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ef88:	bf00      	nop
    return;
 800ef8a:	bf00      	nop
  }
}
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	0800efad 	.word	0x0800efad

0800ef98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800efa0:	bf00      	nop
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7ff ffe6 	bl	800ef98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efcc:	bf00      	nop
 800efce:	3710      	adds	r7, #16
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b088      	sub	sp, #32
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	603b      	str	r3, [r7, #0]
 800efe0:	4613      	mov	r3, r2
 800efe2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800efe4:	f7fa ff98 	bl	8009f18 <HAL_GetTick>
 800efe8:	4602      	mov	r2, r0
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	1a9b      	subs	r3, r3, r2
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	4413      	add	r3, r2
 800eff2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eff4:	f7fa ff90 	bl	8009f18 <HAL_GetTick>
 800eff8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800effa:	4b39      	ldr	r3, [pc, #228]	; (800f0e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	015b      	lsls	r3, r3, #5
 800f000:	0d1b      	lsrs	r3, r3, #20
 800f002:	69fa      	ldr	r2, [r7, #28]
 800f004:	fb02 f303 	mul.w	r3, r2, r3
 800f008:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f00a:	e054      	b.n	800f0b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f012:	d050      	beq.n	800f0b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f014:	f7fa ff80 	bl	8009f18 <HAL_GetTick>
 800f018:	4602      	mov	r2, r0
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	69fa      	ldr	r2, [r7, #28]
 800f020:	429a      	cmp	r2, r3
 800f022:	d902      	bls.n	800f02a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d13d      	bne.n	800f0a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f042:	d111      	bne.n	800f068 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f04c:	d004      	beq.n	800f058 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f056:	d107      	bne.n	800f068 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f06c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f070:	d10f      	bne.n	800f092 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2201      	movs	r2, #1
 800f096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	e017      	b.n	800f0d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	689a      	ldr	r2, [r3, #8]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	4013      	ands	r3, r2
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	bf0c      	ite	eq
 800f0c6:	2301      	moveq	r3, #1
 800f0c8:	2300      	movne	r3, #0
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d19b      	bne.n	800f00c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3720      	adds	r7, #32
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	20000034 	.word	0x20000034

0800f0e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b088      	sub	sp, #32
 800f0e8:	af02      	add	r7, sp, #8
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f0f0:	4b1b      	ldr	r3, [pc, #108]	; (800f160 <SPI_EndRxTxTransaction+0x7c>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a1b      	ldr	r2, [pc, #108]	; (800f164 <SPI_EndRxTxTransaction+0x80>)
 800f0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0fa:	0d5b      	lsrs	r3, r3, #21
 800f0fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f100:	fb02 f303 	mul.w	r3, r2, r3
 800f104:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f10e:	d112      	bne.n	800f136 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2200      	movs	r2, #0
 800f118:	2180      	movs	r1, #128	; 0x80
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f7ff ff5a 	bl	800efd4 <SPI_WaitFlagStateUntilTimeout>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d016      	beq.n	800f154 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f12a:	f043 0220 	orr.w	r2, r3, #32
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f132:	2303      	movs	r3, #3
 800f134:	e00f      	b.n	800f156 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00a      	beq.n	800f152 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	3b01      	subs	r3, #1
 800f140:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f14c:	2b80      	cmp	r3, #128	; 0x80
 800f14e:	d0f2      	beq.n	800f136 <SPI_EndRxTxTransaction+0x52>
 800f150:	e000      	b.n	800f154 <SPI_EndRxTxTransaction+0x70>
        break;
 800f152:	bf00      	nop
  }

  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20000034 	.word	0x20000034
 800f164:	165e9f81 	.word	0x165e9f81

0800f168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f176:	2301      	movs	r3, #1
 800f178:	e041      	b.n	800f1fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f180:	b2db      	uxtb	r3, r3
 800f182:	2b00      	cmp	r3, #0
 800f184:	d106      	bne.n	800f194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7fa fa84 	bl	800969c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2202      	movs	r2, #2
 800f198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3304      	adds	r3, #4
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	f000 fa96 	bl	800f6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
	...

0800f208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f216:	b2db      	uxtb	r3, r3
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d001      	beq.n	800f220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f21c:	2301      	movs	r3, #1
 800f21e:	e044      	b.n	800f2aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2202      	movs	r2, #2
 800f224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	68da      	ldr	r2, [r3, #12]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f042 0201 	orr.w	r2, r2, #1
 800f236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a1e      	ldr	r2, [pc, #120]	; (800f2b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d018      	beq.n	800f274 <HAL_TIM_Base_Start_IT+0x6c>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f24a:	d013      	beq.n	800f274 <HAL_TIM_Base_Start_IT+0x6c>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a1a      	ldr	r2, [pc, #104]	; (800f2bc <HAL_TIM_Base_Start_IT+0xb4>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d00e      	beq.n	800f274 <HAL_TIM_Base_Start_IT+0x6c>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a19      	ldr	r2, [pc, #100]	; (800f2c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d009      	beq.n	800f274 <HAL_TIM_Base_Start_IT+0x6c>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a17      	ldr	r2, [pc, #92]	; (800f2c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d004      	beq.n	800f274 <HAL_TIM_Base_Start_IT+0x6c>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a16      	ldr	r2, [pc, #88]	; (800f2c8 <HAL_TIM_Base_Start_IT+0xc0>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d111      	bne.n	800f298 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	f003 0307 	and.w	r3, r3, #7
 800f27e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b06      	cmp	r3, #6
 800f284:	d010      	beq.n	800f2a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f042 0201 	orr.w	r2, r2, #1
 800f294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f296:	e007      	b.n	800f2a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f042 0201 	orr.w	r2, r2, #1
 800f2a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	40010000 	.word	0x40010000
 800f2bc:	40000400 	.word	0x40000400
 800f2c0:	40000800 	.word	0x40000800
 800f2c4:	40000c00 	.word	0x40000c00
 800f2c8:	40014000 	.word	0x40014000

0800f2cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68da      	ldr	r2, [r3, #12]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f022 0201 	bic.w	r2, r2, #1
 800f2e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6a1a      	ldr	r2, [r3, #32]
 800f2ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10f      	bne.n	800f314 <HAL_TIM_Base_Stop_IT+0x48>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6a1a      	ldr	r2, [r3, #32]
 800f2fa:	f240 4344 	movw	r3, #1092	; 0x444
 800f2fe:	4013      	ands	r3, r2
 800f300:	2b00      	cmp	r3, #0
 800f302:	d107      	bne.n	800f314 <HAL_TIM_Base_Stop_IT+0x48>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f022 0201 	bic.w	r2, r2, #1
 800f312:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b086      	sub	sp, #24
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
 800f332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e097      	b.n	800f46e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d106      	bne.n	800f358 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7fa f95c 	bl	8009610 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	6812      	ldr	r2, [r2, #0]
 800f36a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f36e:	f023 0307 	bic.w	r3, r3, #7
 800f372:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3304      	adds	r3, #4
 800f37c:	4619      	mov	r1, r3
 800f37e:	4610      	mov	r0, r2
 800f380:	f000 f9aa 	bl	800f6d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	697a      	ldr	r2, [r7, #20]
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3ac:	f023 0303 	bic.w	r3, r3, #3
 800f3b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	689a      	ldr	r2, [r3, #8]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	699b      	ldr	r3, [r3, #24]
 800f3ba:	021b      	lsls	r3, r3, #8
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f3ca:	f023 030c 	bic.w	r3, r3, #12
 800f3ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f3d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	68da      	ldr	r2, [r3, #12]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	021b      	lsls	r3, r3, #8
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	011a      	lsls	r2, r3, #4
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	6a1b      	ldr	r3, [r3, #32]
 800f3f8:	031b      	lsls	r3, r3, #12
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	4313      	orrs	r3, r2
 800f400:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f408:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f410:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	695b      	ldr	r3, [r3, #20]
 800f41a:	011b      	lsls	r3, r3, #4
 800f41c:	4313      	orrs	r3, r2
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	4313      	orrs	r3, r2
 800f422:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2201      	movs	r2, #1
 800f458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	f003 0302 	and.w	r3, r3, #2
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d122      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	f003 0302 	and.w	r3, r3, #2
 800f496:	2b02      	cmp	r3, #2
 800f498:	d11b      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f06f 0202 	mvn.w	r2, #2
 800f4a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	f003 0303 	and.w	r3, r3, #3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f8ee 	bl	800f69a <HAL_TIM_IC_CaptureCallback>
 800f4be:	e005      	b.n	800f4cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f8e0 	bl	800f686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f8f1 	bl	800f6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	f003 0304 	and.w	r3, r3, #4
 800f4dc:	2b04      	cmp	r3, #4
 800f4de:	d122      	bne.n	800f526 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	f003 0304 	and.w	r3, r3, #4
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	d11b      	bne.n	800f526 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f06f 0204 	mvn.w	r2, #4
 800f4f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2202      	movs	r2, #2
 800f4fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f8c4 	bl	800f69a <HAL_TIM_IC_CaptureCallback>
 800f512:	e005      	b.n	800f520 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f8b6 	bl	800f686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f8c7 	bl	800f6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b08      	cmp	r3, #8
 800f532:	d122      	bne.n	800f57a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	f003 0308 	and.w	r3, r3, #8
 800f53e:	2b08      	cmp	r3, #8
 800f540:	d11b      	bne.n	800f57a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f06f 0208 	mvn.w	r2, #8
 800f54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2204      	movs	r2, #4
 800f550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	69db      	ldr	r3, [r3, #28]
 800f558:	f003 0303 	and.w	r3, r3, #3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d003      	beq.n	800f568 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f89a 	bl	800f69a <HAL_TIM_IC_CaptureCallback>
 800f566:	e005      	b.n	800f574 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f88c 	bl	800f686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f89d 	bl	800f6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	f003 0310 	and.w	r3, r3, #16
 800f584:	2b10      	cmp	r3, #16
 800f586:	d122      	bne.n	800f5ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	f003 0310 	and.w	r3, r3, #16
 800f592:	2b10      	cmp	r3, #16
 800f594:	d11b      	bne.n	800f5ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f06f 0210 	mvn.w	r2, #16
 800f59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	69db      	ldr	r3, [r3, #28]
 800f5ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d003      	beq.n	800f5bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f870 	bl	800f69a <HAL_TIM_IC_CaptureCallback>
 800f5ba:	e005      	b.n	800f5c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f862 	bl	800f686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 f873 	bl	800f6ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d10e      	bne.n	800f5fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d107      	bne.n	800f5fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f06f 0201 	mvn.w	r2, #1
 800f5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7f6 fa43 	bl	8005a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f604:	2b80      	cmp	r3, #128	; 0x80
 800f606:	d10e      	bne.n	800f626 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f612:	2b80      	cmp	r3, #128	; 0x80
 800f614:	d107      	bne.n	800f626 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 f951 	bl	800f8c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f630:	2b40      	cmp	r3, #64	; 0x40
 800f632:	d10e      	bne.n	800f652 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f63e:	2b40      	cmp	r3, #64	; 0x40
 800f640:	d107      	bne.n	800f652 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f838 	bl	800f6c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	f003 0320 	and.w	r3, r3, #32
 800f65c:	2b20      	cmp	r3, #32
 800f65e:	d10e      	bne.n	800f67e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f003 0320 	and.w	r3, r3, #32
 800f66a:	2b20      	cmp	r3, #32
 800f66c:	d107      	bne.n	800f67e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f06f 0220 	mvn.w	r2, #32
 800f676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f91b 	bl	800f8b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f67e:	bf00      	nop
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f686:	b480      	push	{r7}
 800f688:	b083      	sub	sp, #12
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f68e:	bf00      	nop
 800f690:	370c      	adds	r7, #12
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr

0800f69a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f69a:	b480      	push	{r7}
 800f69c:	b083      	sub	sp, #12
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6a2:	bf00      	nop
 800f6a4:	370c      	adds	r7, #12
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr

0800f6ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6ae:	b480      	push	{r7}
 800f6b0:	b083      	sub	sp, #12
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6b6:	bf00      	nop
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6ca:	bf00      	nop
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
	...

0800f6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4a34      	ldr	r2, [pc, #208]	; (800f7bc <TIM_Base_SetConfig+0xe4>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d00f      	beq.n	800f710 <TIM_Base_SetConfig+0x38>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6f6:	d00b      	beq.n	800f710 <TIM_Base_SetConfig+0x38>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a31      	ldr	r2, [pc, #196]	; (800f7c0 <TIM_Base_SetConfig+0xe8>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d007      	beq.n	800f710 <TIM_Base_SetConfig+0x38>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a30      	ldr	r2, [pc, #192]	; (800f7c4 <TIM_Base_SetConfig+0xec>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d003      	beq.n	800f710 <TIM_Base_SetConfig+0x38>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a2f      	ldr	r2, [pc, #188]	; (800f7c8 <TIM_Base_SetConfig+0xf0>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d108      	bne.n	800f722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	4313      	orrs	r3, r2
 800f720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a25      	ldr	r2, [pc, #148]	; (800f7bc <TIM_Base_SetConfig+0xe4>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d01b      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f730:	d017      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4a22      	ldr	r2, [pc, #136]	; (800f7c0 <TIM_Base_SetConfig+0xe8>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d013      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a21      	ldr	r2, [pc, #132]	; (800f7c4 <TIM_Base_SetConfig+0xec>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d00f      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a20      	ldr	r2, [pc, #128]	; (800f7c8 <TIM_Base_SetConfig+0xf0>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00b      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a1f      	ldr	r2, [pc, #124]	; (800f7cc <TIM_Base_SetConfig+0xf4>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d007      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a1e      	ldr	r2, [pc, #120]	; (800f7d0 <TIM_Base_SetConfig+0xf8>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d003      	beq.n	800f762 <TIM_Base_SetConfig+0x8a>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a1d      	ldr	r2, [pc, #116]	; (800f7d4 <TIM_Base_SetConfig+0xfc>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d108      	bne.n	800f774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	4313      	orrs	r3, r2
 800f772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	4313      	orrs	r3, r2
 800f780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	689a      	ldr	r2, [r3, #8]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a08      	ldr	r2, [pc, #32]	; (800f7bc <TIM_Base_SetConfig+0xe4>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d103      	bne.n	800f7a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	691a      	ldr	r2, [r3, #16]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	615a      	str	r2, [r3, #20]
}
 800f7ae:	bf00      	nop
 800f7b0:	3714      	adds	r7, #20
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	40010000 	.word	0x40010000
 800f7c0:	40000400 	.word	0x40000400
 800f7c4:	40000800 	.word	0x40000800
 800f7c8:	40000c00 	.word	0x40000c00
 800f7cc:	40014000 	.word	0x40014000
 800f7d0:	40014400 	.word	0x40014400
 800f7d4:	40014800 	.word	0x40014800

0800f7d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d101      	bne.n	800f7f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	e050      	b.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2202      	movs	r2, #2
 800f7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	4313      	orrs	r3, r2
 800f820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a1c      	ldr	r2, [pc, #112]	; (800f8a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d018      	beq.n	800f866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f83c:	d013      	beq.n	800f866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a18      	ldr	r2, [pc, #96]	; (800f8a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d00e      	beq.n	800f866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a16      	ldr	r2, [pc, #88]	; (800f8a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d009      	beq.n	800f866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a15      	ldr	r2, [pc, #84]	; (800f8ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d004      	beq.n	800f866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a13      	ldr	r2, [pc, #76]	; (800f8b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d10c      	bne.n	800f880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f86c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	4313      	orrs	r3, r2
 800f876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3714      	adds	r7, #20
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	40010000 	.word	0x40010000
 800f8a4:	40000400 	.word	0x40000400
 800f8a8:	40000800 	.word	0x40000800
 800f8ac:	40000c00 	.word	0x40000c00
 800f8b0:	40014000 	.word	0x40014000

0800f8b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f8bc:	bf00      	nop
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f8d0:	bf00      	nop
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d101      	bne.n	800f8ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e03f      	b.n	800f96e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7fa f906 	bl	8009b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2224      	movs	r2, #36	; 0x24
 800f90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68da      	ldr	r2, [r3, #12]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f91e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 ff53 	bl	80107cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	691a      	ldr	r2, [r3, #16]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	695a      	ldr	r2, [r3, #20]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	68da      	ldr	r2, [r3, #12]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2220      	movs	r2, #32
 800f960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2220      	movs	r2, #32
 800f968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
	...

0800f978 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08c      	sub	sp, #48	; 0x30
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	4613      	mov	r3, r2
 800f984:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b20      	cmp	r3, #32
 800f990:	d165      	bne.n	800fa5e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <HAL_UART_Transmit_DMA+0x26>
 800f998:	88fb      	ldrh	r3, [r7, #6]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d101      	bne.n	800f9a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e05e      	b.n	800fa60 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d101      	bne.n	800f9b0 <HAL_UART_Transmit_DMA+0x38>
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	e057      	b.n	800fa60 <HAL_UART_Transmit_DMA+0xe8>
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	88fa      	ldrh	r2, [r7, #6]
 800f9c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	88fa      	ldrh	r2, [r7, #6]
 800f9c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2221      	movs	r2, #33	; 0x21
 800f9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9dc:	4a22      	ldr	r2, [pc, #136]	; (800fa68 <HAL_UART_Transmit_DMA+0xf0>)
 800f9de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9e4:	4a21      	ldr	r2, [pc, #132]	; (800fa6c <HAL_UART_Transmit_DMA+0xf4>)
 800f9e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9ec:	4a20      	ldr	r2, [pc, #128]	; (800fa70 <HAL_UART_Transmit_DMA+0xf8>)
 800f9ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800f9f8:	f107 0308 	add.w	r3, r7, #8
 800f9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	6819      	ldr	r1, [r3, #0]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	88fb      	ldrh	r3, [r7, #6]
 800fa10:	f7fa fd00 	bl	800a414 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	3314      	adds	r3, #20
 800fa2c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	e853 3f00 	ldrex	r3, [r3]
 800fa34:	617b      	str	r3, [r7, #20]
   return(result);
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3314      	adds	r3, #20
 800fa44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa46:	627a      	str	r2, [r7, #36]	; 0x24
 800fa48:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4a:	6a39      	ldr	r1, [r7, #32]
 800fa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa4e:	e841 2300 	strex	r3, r2, [r1]
 800fa52:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1e5      	bne.n	800fa26 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	e000      	b.n	800fa60 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fa5e:	2302      	movs	r3, #2
  }
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3730      	adds	r7, #48	; 0x30
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	0801006d 	.word	0x0801006d
 800fa6c:	08010107 	.word	0x08010107
 800fa70:	0801027f 	.word	0x0801027f

0800fa74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b20      	cmp	r3, #32
 800fa8c:	d11d      	bne.n	800faca <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <HAL_UART_Receive_DMA+0x26>
 800fa94:	88fb      	ldrh	r3, [r7, #6]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d101      	bne.n	800fa9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e016      	b.n	800facc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d101      	bne.n	800faac <HAL_UART_Receive_DMA+0x38>
 800faa8:	2302      	movs	r3, #2
 800faaa:	e00f      	b.n	800facc <HAL_UART_Receive_DMA+0x58>
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800faba:	88fb      	ldrh	r3, [r7, #6]
 800fabc:	461a      	mov	r2, r3
 800fabe:	68b9      	ldr	r1, [r7, #8]
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f000 fc27 	bl	8010314 <UART_Start_Receive_DMA>
 800fac6:	4603      	mov	r3, r0
 800fac8:	e000      	b.n	800facc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800faca:	2302      	movs	r3, #2
  }
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b0ba      	sub	sp, #232	; 0xe8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fafa:	2300      	movs	r3, #0
 800fafc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fb00:	2300      	movs	r3, #0
 800fb02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fb06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb0a:	f003 030f 	and.w	r3, r3, #15
 800fb0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800fb12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d10f      	bne.n	800fb3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fb1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb1e:	f003 0320 	and.w	r3, r3, #32
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d009      	beq.n	800fb3a <HAL_UART_IRQHandler+0x66>
 800fb26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb2a:	f003 0320 	and.w	r3, r3, #32
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d003      	beq.n	800fb3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 fd8f 	bl	8010656 <UART_Receive_IT>
      return;
 800fb38:	e256      	b.n	800ffe8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fb3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f000 80de 	beq.w	800fd00 <HAL_UART_IRQHandler+0x22c>
 800fb44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d106      	bne.n	800fb5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f000 80d1 	beq.w	800fd00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fb5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb62:	f003 0301 	and.w	r3, r3, #1
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00b      	beq.n	800fb82 <HAL_UART_IRQHandler+0xae>
 800fb6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d005      	beq.n	800fb82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb7a:	f043 0201 	orr.w	r2, r3, #1
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fb82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb86:	f003 0304 	and.w	r3, r3, #4
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00b      	beq.n	800fba6 <HAL_UART_IRQHandler+0xd2>
 800fb8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d005      	beq.n	800fba6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb9e:	f043 0202 	orr.w	r2, r3, #2
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbaa:	f003 0302 	and.w	r3, r3, #2
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00b      	beq.n	800fbca <HAL_UART_IRQHandler+0xf6>
 800fbb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fbb6:	f003 0301 	and.w	r3, r3, #1
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d005      	beq.n	800fbca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbc2:	f043 0204 	orr.w	r2, r3, #4
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fbca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbce:	f003 0308 	and.w	r3, r3, #8
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d011      	beq.n	800fbfa <HAL_UART_IRQHandler+0x126>
 800fbd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fbda:	f003 0320 	and.w	r3, r3, #32
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d105      	bne.n	800fbee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fbe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fbe6:	f003 0301 	and.w	r3, r3, #1
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d005      	beq.n	800fbfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf2:	f043 0208 	orr.w	r2, r3, #8
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 81ed 	beq.w	800ffde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc08:	f003 0320 	and.w	r3, r3, #32
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d008      	beq.n	800fc22 <HAL_UART_IRQHandler+0x14e>
 800fc10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc14:	f003 0320 	and.w	r3, r3, #32
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 fd1a 	bl	8010656 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	695b      	ldr	r3, [r3, #20]
 800fc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc2c:	2b40      	cmp	r3, #64	; 0x40
 800fc2e:	bf0c      	ite	eq
 800fc30:	2301      	moveq	r3, #1
 800fc32:	2300      	movne	r3, #0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3e:	f003 0308 	and.w	r3, r3, #8
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d103      	bne.n	800fc4e <HAL_UART_IRQHandler+0x17a>
 800fc46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d04f      	beq.n	800fcee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 fc22 	bl	8010498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	695b      	ldr	r3, [r3, #20]
 800fc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc5e:	2b40      	cmp	r3, #64	; 0x40
 800fc60:	d141      	bne.n	800fce6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	3314      	adds	r3, #20
 800fc68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fc70:	e853 3f00 	ldrex	r3, [r3]
 800fc74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fc78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3314      	adds	r3, #20
 800fc8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fc8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fc92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fc9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fc9e:	e841 2300 	strex	r3, r2, [r1]
 800fca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1d9      	bne.n	800fc62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d013      	beq.n	800fcde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcba:	4a7d      	ldr	r2, [pc, #500]	; (800feb0 <HAL_UART_IRQHandler+0x3dc>)
 800fcbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fa fc6e 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d016      	beq.n	800fcfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcdc:	e00e      	b.n	800fcfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 f9ae 	bl	8010040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fce4:	e00a      	b.n	800fcfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f9aa 	bl	8010040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcec:	e006      	b.n	800fcfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 f9a6 	bl	8010040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fcfa:	e170      	b.n	800ffde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcfc:	bf00      	nop
    return;
 800fcfe:	e16e      	b.n	800ffde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	f040 814a 	bne.w	800ff9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd0e:	f003 0310 	and.w	r3, r3, #16
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 8143 	beq.w	800ff9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fd18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd1c:	f003 0310 	and.w	r3, r3, #16
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 813c 	beq.w	800ff9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fd26:	2300      	movs	r3, #0
 800fd28:	60bb      	str	r3, [r7, #8]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	60bb      	str	r3, [r7, #8]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	60bb      	str	r3, [r7, #8]
 800fd3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	695b      	ldr	r3, [r3, #20]
 800fd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd46:	2b40      	cmp	r3, #64	; 0x40
 800fd48:	f040 80b4 	bne.w	800feb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fd58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 8140 	beq.w	800ffe2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fd66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	f080 8139 	bcs.w	800ffe2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fd76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd7c:	69db      	ldr	r3, [r3, #28]
 800fd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd82:	f000 8088 	beq.w	800fe96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	330c      	adds	r3, #12
 800fd8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd94:	e853 3f00 	ldrex	r3, [r3]
 800fd98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fd9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fda4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	330c      	adds	r3, #12
 800fdae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fdb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fdb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fdbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fdc2:	e841 2300 	strex	r3, r2, [r1]
 800fdc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fdca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1d9      	bne.n	800fd86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	3314      	adds	r3, #20
 800fdd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fddc:	e853 3f00 	ldrex	r3, [r3]
 800fde0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fde2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fde4:	f023 0301 	bic.w	r3, r3, #1
 800fde8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	3314      	adds	r3, #20
 800fdf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fdf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fdfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fdfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe02:	e841 2300 	strex	r3, r2, [r1]
 800fe06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fe08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e1      	bne.n	800fdd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	3314      	adds	r3, #20
 800fe14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fe1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	3314      	adds	r3, #20
 800fe2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fe32:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fe34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fe3a:	e841 2300 	strex	r3, r2, [r1]
 800fe3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fe40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1e3      	bne.n	800fe0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2220      	movs	r2, #32
 800fe4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	330c      	adds	r3, #12
 800fe5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe5e:	e853 3f00 	ldrex	r3, [r3]
 800fe62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe66:	f023 0310 	bic.w	r3, r3, #16
 800fe6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	330c      	adds	r3, #12
 800fe74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fe78:	65ba      	str	r2, [r7, #88]	; 0x58
 800fe7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe80:	e841 2300 	strex	r3, r2, [r1]
 800fe84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e3      	bne.n	800fe54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fa fb17 	bl	800a4c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	4619      	mov	r1, r3
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 f8d4 	bl	8010054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800feac:	e099      	b.n	800ffe2 <HAL_UART_IRQHandler+0x50e>
 800feae:	bf00      	nop
 800feb0:	0801055f 	.word	0x0801055f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800febc:	b29b      	uxth	r3, r3
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fec8:	b29b      	uxth	r3, r3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	f000 808b 	beq.w	800ffe6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 8086 	beq.w	800ffe6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	330c      	adds	r3, #12
 800fee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee4:	e853 3f00 	ldrex	r3, [r3]
 800fee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800feea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	330c      	adds	r3, #12
 800fefa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fefe:	647a      	str	r2, [r7, #68]	; 0x44
 800ff00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff06:	e841 2300 	strex	r3, r2, [r1]
 800ff0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d1e3      	bne.n	800feda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3314      	adds	r3, #20
 800ff18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1c:	e853 3f00 	ldrex	r3, [r3]
 800ff20:	623b      	str	r3, [r7, #32]
   return(result);
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	f023 0301 	bic.w	r3, r3, #1
 800ff28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	3314      	adds	r3, #20
 800ff32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ff36:	633a      	str	r2, [r7, #48]	; 0x30
 800ff38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff3e:	e841 2300 	strex	r3, r2, [r1]
 800ff42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1e3      	bne.n	800ff12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2220      	movs	r2, #32
 800ff4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	e853 3f00 	ldrex	r3, [r3]
 800ff66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f023 0310 	bic.w	r3, r3, #16
 800ff6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	330c      	adds	r3, #12
 800ff78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ff7c:	61fa      	str	r2, [r7, #28]
 800ff7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff80:	69b9      	ldr	r1, [r7, #24]
 800ff82:	69fa      	ldr	r2, [r7, #28]
 800ff84:	e841 2300 	strex	r3, r2, [r1]
 800ff88:	617b      	str	r3, [r7, #20]
   return(result);
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e3      	bne.n	800ff58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ff90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ff94:	4619      	mov	r1, r3
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 f85c 	bl	8010054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ff9c:	e023      	b.n	800ffe6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ff9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d009      	beq.n	800ffbe <HAL_UART_IRQHandler+0x4ea>
 800ffaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d003      	beq.n	800ffbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 fae5 	bl	8010586 <UART_Transmit_IT>
    return;
 800ffbc:	e014      	b.n	800ffe8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ffbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00e      	beq.n	800ffe8 <HAL_UART_IRQHandler+0x514>
 800ffca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d008      	beq.n	800ffe8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fb25 	bl	8010626 <UART_EndTransmit_IT>
    return;
 800ffdc:	e004      	b.n	800ffe8 <HAL_UART_IRQHandler+0x514>
    return;
 800ffde:	bf00      	nop
 800ffe0:	e002      	b.n	800ffe8 <HAL_UART_IRQHandler+0x514>
      return;
 800ffe2:	bf00      	nop
 800ffe4:	e000      	b.n	800ffe8 <HAL_UART_IRQHandler+0x514>
      return;
 800ffe6:	bf00      	nop
  }
}
 800ffe8:	37e8      	adds	r7, #232	; 0xe8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop

0800fff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fff8:	bf00      	nop
 800fffa:	370c      	adds	r7, #12
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010004:	b480      	push	{r7}
 8010006:	b083      	sub	sp, #12
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801000c:	bf00      	nop
 801000e:	370c      	adds	r7, #12
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010020:	bf00      	nop
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr

08010040 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	460b      	mov	r3, r1
 801005e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b090      	sub	sp, #64	; 0x40
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010078:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010084:	2b00      	cmp	r3, #0
 8010086:	d137      	bne.n	80100f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801008a:	2200      	movs	r2, #0
 801008c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801008e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	3314      	adds	r3, #20
 8010094:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010098:	e853 3f00 	ldrex	r3, [r3]
 801009c:	623b      	str	r3, [r7, #32]
   return(result);
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80100a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3314      	adds	r3, #20
 80100ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100ae:	633a      	str	r2, [r7, #48]	; 0x30
 80100b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100b6:	e841 2300 	strex	r3, r2, [r1]
 80100ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80100bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1e5      	bne.n	801008e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80100c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	330c      	adds	r3, #12
 80100c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	e853 3f00 	ldrex	r3, [r3]
 80100d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100d8:	637b      	str	r3, [r7, #52]	; 0x34
 80100da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	330c      	adds	r3, #12
 80100e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e2:	61fa      	str	r2, [r7, #28]
 80100e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e6:	69b9      	ldr	r1, [r7, #24]
 80100e8:	69fa      	ldr	r2, [r7, #28]
 80100ea:	e841 2300 	strex	r3, r2, [r1]
 80100ee:	617b      	str	r3, [r7, #20]
   return(result);
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1e5      	bne.n	80100c2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80100f6:	e002      	b.n	80100fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80100f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80100fa:	f7ff ff79 	bl	800fff0 <HAL_UART_TxCpltCallback>
}
 80100fe:	bf00      	nop
 8010100:	3740      	adds	r7, #64	; 0x40
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b084      	sub	sp, #16
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010112:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f7ff ff75 	bl	8010004 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801011a:	bf00      	nop
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b09c      	sub	sp, #112	; 0x70
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801012e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801013a:	2b00      	cmp	r3, #0
 801013c:	d172      	bne.n	8010224 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801013e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010140:	2200      	movs	r2, #0
 8010142:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	330c      	adds	r3, #12
 801014a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801014e:	e853 3f00 	ldrex	r3, [r3]
 8010152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801015a:	66bb      	str	r3, [r7, #104]	; 0x68
 801015c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	330c      	adds	r3, #12
 8010162:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010164:	65ba      	str	r2, [r7, #88]	; 0x58
 8010166:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801016a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801016c:	e841 2300 	strex	r3, r2, [r1]
 8010170:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010174:	2b00      	cmp	r3, #0
 8010176:	d1e5      	bne.n	8010144 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	3314      	adds	r3, #20
 801017e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010182:	e853 3f00 	ldrex	r3, [r3]
 8010186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018a:	f023 0301 	bic.w	r3, r3, #1
 801018e:	667b      	str	r3, [r7, #100]	; 0x64
 8010190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3314      	adds	r3, #20
 8010196:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010198:	647a      	str	r2, [r7, #68]	; 0x44
 801019a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801019e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101a0:	e841 2300 	strex	r3, r2, [r1]
 80101a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1e5      	bne.n	8010178 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3314      	adds	r3, #20
 80101b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	e853 3f00 	ldrex	r3, [r3]
 80101ba:	623b      	str	r3, [r7, #32]
   return(result);
 80101bc:	6a3b      	ldr	r3, [r7, #32]
 80101be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101c2:	663b      	str	r3, [r7, #96]	; 0x60
 80101c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	3314      	adds	r3, #20
 80101ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101cc:	633a      	str	r2, [r7, #48]	; 0x30
 80101ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101d4:	e841 2300 	strex	r3, r2, [r1]
 80101d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80101da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1e5      	bne.n	80101ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80101e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101e2:	2220      	movs	r2, #32
 80101e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d119      	bne.n	8010224 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	330c      	adds	r3, #12
 80101f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	e853 3f00 	ldrex	r3, [r3]
 80101fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f023 0310 	bic.w	r3, r3, #16
 8010206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	330c      	adds	r3, #12
 801020e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010210:	61fa      	str	r2, [r7, #28]
 8010212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010214:	69b9      	ldr	r1, [r7, #24]
 8010216:	69fa      	ldr	r2, [r7, #28]
 8010218:	e841 2300 	strex	r3, r2, [r1]
 801021c:	617b      	str	r3, [r7, #20]
   return(result);
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e5      	bne.n	80101f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010228:	2b01      	cmp	r3, #1
 801022a:	d106      	bne.n	801023a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801022c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801022e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010230:	4619      	mov	r1, r3
 8010232:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010234:	f7ff ff0e 	bl	8010054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010238:	e002      	b.n	8010240 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801023a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801023c:	f7ff feec 	bl	8010018 <HAL_UART_RxCpltCallback>
}
 8010240:	bf00      	nop
 8010242:	3770      	adds	r7, #112	; 0x70
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010254:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025a:	2b01      	cmp	r3, #1
 801025c:	d108      	bne.n	8010270 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010262:	085b      	lsrs	r3, r3, #1
 8010264:	b29b      	uxth	r3, r3
 8010266:	4619      	mov	r1, r3
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f7ff fef3 	bl	8010054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801026e:	e002      	b.n	8010276 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010270:	68f8      	ldr	r0, [r7, #12]
 8010272:	f7ff fedb 	bl	801002c <HAL_UART_RxHalfCpltCallback>
}
 8010276:	bf00      	nop
 8010278:	3710      	adds	r7, #16
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b084      	sub	sp, #16
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010286:	2300      	movs	r3, #0
 8010288:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801028e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	695b      	ldr	r3, [r3, #20]
 8010296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801029a:	2b80      	cmp	r3, #128	; 0x80
 801029c:	bf0c      	ite	eq
 801029e:	2301      	moveq	r3, #1
 80102a0:	2300      	movne	r3, #0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b21      	cmp	r3, #33	; 0x21
 80102b0:	d108      	bne.n	80102c4 <UART_DMAError+0x46>
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d005      	beq.n	80102c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	2200      	movs	r2, #0
 80102bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80102be:	68b8      	ldr	r0, [r7, #8]
 80102c0:	f000 f8c2 	bl	8010448 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	695b      	ldr	r3, [r3, #20]
 80102ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ce:	2b40      	cmp	r3, #64	; 0x40
 80102d0:	bf0c      	ite	eq
 80102d2:	2301      	moveq	r3, #1
 80102d4:	2300      	movne	r3, #0
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b22      	cmp	r3, #34	; 0x22
 80102e4:	d108      	bne.n	80102f8 <UART_DMAError+0x7a>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d005      	beq.n	80102f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	2200      	movs	r2, #0
 80102f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80102f2:	68b8      	ldr	r0, [r7, #8]
 80102f4:	f000 f8d0 	bl	8010498 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fc:	f043 0210 	orr.w	r2, r3, #16
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010304:	68b8      	ldr	r0, [r7, #8]
 8010306:	f7ff fe9b 	bl	8010040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801030a:	bf00      	nop
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
	...

08010314 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b098      	sub	sp, #96	; 0x60
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	4613      	mov	r3, r2
 8010320:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	88fa      	ldrh	r2, [r7, #6]
 801032c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2200      	movs	r2, #0
 8010332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2222      	movs	r2, #34	; 0x22
 8010338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010340:	4a3e      	ldr	r2, [pc, #248]	; (801043c <UART_Start_Receive_DMA+0x128>)
 8010342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010348:	4a3d      	ldr	r2, [pc, #244]	; (8010440 <UART_Start_Receive_DMA+0x12c>)
 801034a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010350:	4a3c      	ldr	r2, [pc, #240]	; (8010444 <UART_Start_Receive_DMA+0x130>)
 8010352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010358:	2200      	movs	r2, #0
 801035a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801035c:	f107 0308 	add.w	r3, r7, #8
 8010360:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	3304      	adds	r3, #4
 801036c:	4619      	mov	r1, r3
 801036e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	88fb      	ldrh	r3, [r7, #6]
 8010374:	f7fa f84e 	bl	800a414 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010378:	2300      	movs	r3, #0
 801037a:	613b      	str	r3, [r7, #16]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	613b      	str	r3, [r7, #16]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	613b      	str	r3, [r7, #16]
 801038c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	330c      	adds	r3, #12
 801039c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801039e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a0:	e853 3f00 	ldrex	r3, [r3]
 80103a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80103a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	330c      	adds	r3, #12
 80103b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80103b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80103bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103be:	e841 2300 	strex	r3, r2, [r1]
 80103c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1e5      	bne.n	8010396 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3314      	adds	r3, #20
 80103d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d4:	e853 3f00 	ldrex	r3, [r3]
 80103d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	f043 0301 	orr.w	r3, r3, #1
 80103e0:	657b      	str	r3, [r7, #84]	; 0x54
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3314      	adds	r3, #20
 80103e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80103ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f2:	e841 2300 	strex	r3, r2, [r1]
 80103f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80103f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1e5      	bne.n	80103ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3314      	adds	r3, #20
 8010404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	e853 3f00 	ldrex	r3, [r3]
 801040c:	617b      	str	r3, [r7, #20]
   return(result);
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010414:	653b      	str	r3, [r7, #80]	; 0x50
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3314      	adds	r3, #20
 801041c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801041e:	627a      	str	r2, [r7, #36]	; 0x24
 8010420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010422:	6a39      	ldr	r1, [r7, #32]
 8010424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010426:	e841 2300 	strex	r3, r2, [r1]
 801042a:	61fb      	str	r3, [r7, #28]
   return(result);
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1e5      	bne.n	80103fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8010432:	2300      	movs	r3, #0
}
 8010434:	4618      	mov	r0, r3
 8010436:	3760      	adds	r7, #96	; 0x60
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	08010123 	.word	0x08010123
 8010440:	08010249 	.word	0x08010249
 8010444:	0801027f 	.word	0x0801027f

08010448 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010448:	b480      	push	{r7}
 801044a:	b089      	sub	sp, #36	; 0x24
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	330c      	adds	r3, #12
 8010456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	e853 3f00 	ldrex	r3, [r3]
 801045e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010466:	61fb      	str	r3, [r7, #28]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	330c      	adds	r3, #12
 801046e:	69fa      	ldr	r2, [r7, #28]
 8010470:	61ba      	str	r2, [r7, #24]
 8010472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010474:	6979      	ldr	r1, [r7, #20]
 8010476:	69ba      	ldr	r2, [r7, #24]
 8010478:	e841 2300 	strex	r3, r2, [r1]
 801047c:	613b      	str	r3, [r7, #16]
   return(result);
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d1e5      	bne.n	8010450 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2220      	movs	r2, #32
 8010488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801048c:	bf00      	nop
 801048e:	3724      	adds	r7, #36	; 0x24
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010498:	b480      	push	{r7}
 801049a:	b095      	sub	sp, #84	; 0x54
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	330c      	adds	r3, #12
 80104a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104aa:	e853 3f00 	ldrex	r3, [r3]
 80104ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80104b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	330c      	adds	r3, #12
 80104be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104c0:	643a      	str	r2, [r7, #64]	; 0x40
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104c8:	e841 2300 	strex	r3, r2, [r1]
 80104cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80104ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1e5      	bne.n	80104a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	3314      	adds	r3, #20
 80104da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	e853 3f00 	ldrex	r3, [r3]
 80104e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	f023 0301 	bic.w	r3, r3, #1
 80104ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3314      	adds	r3, #20
 80104f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80104f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104fc:	e841 2300 	strex	r3, r2, [r1]
 8010500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	d1e5      	bne.n	80104d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801050c:	2b01      	cmp	r3, #1
 801050e:	d119      	bne.n	8010544 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	330c      	adds	r3, #12
 8010516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	e853 3f00 	ldrex	r3, [r3]
 801051e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	f023 0310 	bic.w	r3, r3, #16
 8010526:	647b      	str	r3, [r7, #68]	; 0x44
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	330c      	adds	r3, #12
 801052e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010530:	61ba      	str	r2, [r7, #24]
 8010532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010534:	6979      	ldr	r1, [r7, #20]
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	e841 2300 	strex	r3, r2, [r1]
 801053c:	613b      	str	r3, [r7, #16]
   return(result);
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e5      	bne.n	8010510 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2220      	movs	r2, #32
 8010548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2200      	movs	r2, #0
 8010550:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010552:	bf00      	nop
 8010554:	3754      	adds	r7, #84	; 0x54
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr

0801055e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b084      	sub	sp, #16
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801056a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2200      	movs	r2, #0
 8010576:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7ff fd61 	bl	8010040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801057e:	bf00      	nop
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010586:	b480      	push	{r7}
 8010588:	b085      	sub	sp, #20
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010594:	b2db      	uxtb	r3, r3
 8010596:	2b21      	cmp	r3, #33	; 0x21
 8010598:	d13e      	bne.n	8010618 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	689b      	ldr	r3, [r3, #8]
 801059e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105a2:	d114      	bne.n	80105ce <UART_Transmit_IT+0x48>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d110      	bne.n	80105ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a1b      	ldr	r3, [r3, #32]
 80105b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	881b      	ldrh	r3, [r3, #0]
 80105b6:	461a      	mov	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80105c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6a1b      	ldr	r3, [r3, #32]
 80105c6:	1c9a      	adds	r2, r3, #2
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	621a      	str	r2, [r3, #32]
 80105cc:	e008      	b.n	80105e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a1b      	ldr	r3, [r3, #32]
 80105d2:	1c59      	adds	r1, r3, #1
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	6211      	str	r1, [r2, #32]
 80105d8:	781a      	ldrb	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	3b01      	subs	r3, #1
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	4619      	mov	r1, r3
 80105ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d10f      	bne.n	8010614 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	68da      	ldr	r2, [r3, #12]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010602:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	68da      	ldr	r2, [r3, #12]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010612:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010614:	2300      	movs	r3, #0
 8010616:	e000      	b.n	801061a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010618:	2302      	movs	r3, #2
  }
}
 801061a:	4618      	mov	r0, r3
 801061c:	3714      	adds	r7, #20
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr

08010626 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b082      	sub	sp, #8
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	68da      	ldr	r2, [r3, #12]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801063c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff fcd2 	bl	800fff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b08c      	sub	sp, #48	; 0x30
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b22      	cmp	r3, #34	; 0x22
 8010668:	f040 80ab 	bne.w	80107c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010674:	d117      	bne.n	80106a6 <UART_Receive_IT+0x50>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	691b      	ldr	r3, [r3, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d113      	bne.n	80106a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801067e:	2300      	movs	r3, #0
 8010680:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010686:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	b29b      	uxth	r3, r3
 8010690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010694:	b29a      	uxth	r2, r3
 8010696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010698:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801069e:	1c9a      	adds	r2, r3, #2
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	629a      	str	r2, [r3, #40]	; 0x28
 80106a4:	e026      	b.n	80106f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80106ac:	2300      	movs	r3, #0
 80106ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	689b      	ldr	r3, [r3, #8]
 80106b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106b8:	d007      	beq.n	80106ca <UART_Receive_IT+0x74>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10a      	bne.n	80106d8 <UART_Receive_IT+0x82>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d106      	bne.n	80106d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d4:	701a      	strb	r2, [r3, #0]
 80106d6:	e008      	b.n	80106ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	3b01      	subs	r3, #1
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	4619      	mov	r1, r3
 8010702:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010704:	2b00      	cmp	r3, #0
 8010706:	d15a      	bne.n	80107be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	68da      	ldr	r2, [r3, #12]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f022 0220 	bic.w	r2, r2, #32
 8010716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	68da      	ldr	r2, [r3, #12]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	695a      	ldr	r2, [r3, #20]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f022 0201 	bic.w	r2, r2, #1
 8010736:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2220      	movs	r2, #32
 801073c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010744:	2b01      	cmp	r3, #1
 8010746:	d135      	bne.n	80107b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	330c      	adds	r3, #12
 8010754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	e853 3f00 	ldrex	r3, [r3]
 801075c:	613b      	str	r3, [r7, #16]
   return(result);
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	f023 0310 	bic.w	r3, r3, #16
 8010764:	627b      	str	r3, [r7, #36]	; 0x24
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	330c      	adds	r3, #12
 801076c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801076e:	623a      	str	r2, [r7, #32]
 8010770:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010772:	69f9      	ldr	r1, [r7, #28]
 8010774:	6a3a      	ldr	r2, [r7, #32]
 8010776:	e841 2300 	strex	r3, r2, [r1]
 801077a:	61bb      	str	r3, [r7, #24]
   return(result);
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e5      	bne.n	801074e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f003 0310 	and.w	r3, r3, #16
 801078c:	2b10      	cmp	r3, #16
 801078e:	d10a      	bne.n	80107a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010790:	2300      	movs	r3, #0
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	60fb      	str	r3, [r7, #12]
 80107a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff fc51 	bl	8010054 <HAL_UARTEx_RxEventCallback>
 80107b2:	e002      	b.n	80107ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff fc2f 	bl	8010018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	e002      	b.n	80107c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80107be:	2300      	movs	r3, #0
 80107c0:	e000      	b.n	80107c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80107c2:	2302      	movs	r3, #2
  }
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3730      	adds	r7, #48	; 0x30
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	b09f      	sub	sp, #124	; 0x7c
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	691b      	ldr	r3, [r3, #16]
 80107dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80107e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107e2:	68d9      	ldr	r1, [r3, #12]
 80107e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	ea40 0301 	orr.w	r3, r0, r1
 80107ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80107ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107f0:	689a      	ldr	r2, [r3, #8]
 80107f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	431a      	orrs	r2, r3
 80107f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107fa:	695b      	ldr	r3, [r3, #20]
 80107fc:	431a      	orrs	r2, r3
 80107fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	4313      	orrs	r3, r2
 8010804:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010810:	f021 010c 	bic.w	r1, r1, #12
 8010814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801081a:	430b      	orrs	r3, r1
 801081c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801081e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	695b      	ldr	r3, [r3, #20]
 8010824:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801082a:	6999      	ldr	r1, [r3, #24]
 801082c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	ea40 0301 	orr.w	r3, r0, r1
 8010834:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	4bc5      	ldr	r3, [pc, #788]	; (8010b50 <UART_SetConfig+0x384>)
 801083c:	429a      	cmp	r2, r3
 801083e:	d004      	beq.n	801084a <UART_SetConfig+0x7e>
 8010840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	4bc3      	ldr	r3, [pc, #780]	; (8010b54 <UART_SetConfig+0x388>)
 8010846:	429a      	cmp	r2, r3
 8010848:	d103      	bne.n	8010852 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801084a:	f7fe f865 	bl	800e918 <HAL_RCC_GetPCLK2Freq>
 801084e:	6778      	str	r0, [r7, #116]	; 0x74
 8010850:	e002      	b.n	8010858 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010852:	f7fe f84d 	bl	800e8f0 <HAL_RCC_GetPCLK1Freq>
 8010856:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010860:	f040 80b6 	bne.w	80109d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010866:	461c      	mov	r4, r3
 8010868:	f04f 0500 	mov.w	r5, #0
 801086c:	4622      	mov	r2, r4
 801086e:	462b      	mov	r3, r5
 8010870:	1891      	adds	r1, r2, r2
 8010872:	6439      	str	r1, [r7, #64]	; 0x40
 8010874:	415b      	adcs	r3, r3
 8010876:	647b      	str	r3, [r7, #68]	; 0x44
 8010878:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801087c:	1912      	adds	r2, r2, r4
 801087e:	eb45 0303 	adc.w	r3, r5, r3
 8010882:	f04f 0000 	mov.w	r0, #0
 8010886:	f04f 0100 	mov.w	r1, #0
 801088a:	00d9      	lsls	r1, r3, #3
 801088c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010890:	00d0      	lsls	r0, r2, #3
 8010892:	4602      	mov	r2, r0
 8010894:	460b      	mov	r3, r1
 8010896:	1911      	adds	r1, r2, r4
 8010898:	6639      	str	r1, [r7, #96]	; 0x60
 801089a:	416b      	adcs	r3, r5
 801089c:	667b      	str	r3, [r7, #100]	; 0x64
 801089e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	461a      	mov	r2, r3
 80108a4:	f04f 0300 	mov.w	r3, #0
 80108a8:	1891      	adds	r1, r2, r2
 80108aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80108ac:	415b      	adcs	r3, r3
 80108ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80108b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80108b8:	f7f0 f9fe 	bl	8000cb8 <__aeabi_uldivmod>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	4ba5      	ldr	r3, [pc, #660]	; (8010b58 <UART_SetConfig+0x38c>)
 80108c2:	fba3 2302 	umull	r2, r3, r3, r2
 80108c6:	095b      	lsrs	r3, r3, #5
 80108c8:	011e      	lsls	r6, r3, #4
 80108ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108cc:	461c      	mov	r4, r3
 80108ce:	f04f 0500 	mov.w	r5, #0
 80108d2:	4622      	mov	r2, r4
 80108d4:	462b      	mov	r3, r5
 80108d6:	1891      	adds	r1, r2, r2
 80108d8:	6339      	str	r1, [r7, #48]	; 0x30
 80108da:	415b      	adcs	r3, r3
 80108dc:	637b      	str	r3, [r7, #52]	; 0x34
 80108de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80108e2:	1912      	adds	r2, r2, r4
 80108e4:	eb45 0303 	adc.w	r3, r5, r3
 80108e8:	f04f 0000 	mov.w	r0, #0
 80108ec:	f04f 0100 	mov.w	r1, #0
 80108f0:	00d9      	lsls	r1, r3, #3
 80108f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80108f6:	00d0      	lsls	r0, r2, #3
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	1911      	adds	r1, r2, r4
 80108fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8010900:	416b      	adcs	r3, r5
 8010902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	461a      	mov	r2, r3
 801090a:	f04f 0300 	mov.w	r3, #0
 801090e:	1891      	adds	r1, r2, r2
 8010910:	62b9      	str	r1, [r7, #40]	; 0x28
 8010912:	415b      	adcs	r3, r3
 8010914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801091a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801091e:	f7f0 f9cb 	bl	8000cb8 <__aeabi_uldivmod>
 8010922:	4602      	mov	r2, r0
 8010924:	460b      	mov	r3, r1
 8010926:	4b8c      	ldr	r3, [pc, #560]	; (8010b58 <UART_SetConfig+0x38c>)
 8010928:	fba3 1302 	umull	r1, r3, r3, r2
 801092c:	095b      	lsrs	r3, r3, #5
 801092e:	2164      	movs	r1, #100	; 0x64
 8010930:	fb01 f303 	mul.w	r3, r1, r3
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	00db      	lsls	r3, r3, #3
 8010938:	3332      	adds	r3, #50	; 0x32
 801093a:	4a87      	ldr	r2, [pc, #540]	; (8010b58 <UART_SetConfig+0x38c>)
 801093c:	fba2 2303 	umull	r2, r3, r2, r3
 8010940:	095b      	lsrs	r3, r3, #5
 8010942:	005b      	lsls	r3, r3, #1
 8010944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010948:	441e      	add	r6, r3
 801094a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801094c:	4618      	mov	r0, r3
 801094e:	f04f 0100 	mov.w	r1, #0
 8010952:	4602      	mov	r2, r0
 8010954:	460b      	mov	r3, r1
 8010956:	1894      	adds	r4, r2, r2
 8010958:	623c      	str	r4, [r7, #32]
 801095a:	415b      	adcs	r3, r3
 801095c:	627b      	str	r3, [r7, #36]	; 0x24
 801095e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010962:	1812      	adds	r2, r2, r0
 8010964:	eb41 0303 	adc.w	r3, r1, r3
 8010968:	f04f 0400 	mov.w	r4, #0
 801096c:	f04f 0500 	mov.w	r5, #0
 8010970:	00dd      	lsls	r5, r3, #3
 8010972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010976:	00d4      	lsls	r4, r2, #3
 8010978:	4622      	mov	r2, r4
 801097a:	462b      	mov	r3, r5
 801097c:	1814      	adds	r4, r2, r0
 801097e:	653c      	str	r4, [r7, #80]	; 0x50
 8010980:	414b      	adcs	r3, r1
 8010982:	657b      	str	r3, [r7, #84]	; 0x54
 8010984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	461a      	mov	r2, r3
 801098a:	f04f 0300 	mov.w	r3, #0
 801098e:	1891      	adds	r1, r2, r2
 8010990:	61b9      	str	r1, [r7, #24]
 8010992:	415b      	adcs	r3, r3
 8010994:	61fb      	str	r3, [r7, #28]
 8010996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801099a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801099e:	f7f0 f98b 	bl	8000cb8 <__aeabi_uldivmod>
 80109a2:	4602      	mov	r2, r0
 80109a4:	460b      	mov	r3, r1
 80109a6:	4b6c      	ldr	r3, [pc, #432]	; (8010b58 <UART_SetConfig+0x38c>)
 80109a8:	fba3 1302 	umull	r1, r3, r3, r2
 80109ac:	095b      	lsrs	r3, r3, #5
 80109ae:	2164      	movs	r1, #100	; 0x64
 80109b0:	fb01 f303 	mul.w	r3, r1, r3
 80109b4:	1ad3      	subs	r3, r2, r3
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	3332      	adds	r3, #50	; 0x32
 80109ba:	4a67      	ldr	r2, [pc, #412]	; (8010b58 <UART_SetConfig+0x38c>)
 80109bc:	fba2 2303 	umull	r2, r3, r2, r3
 80109c0:	095b      	lsrs	r3, r3, #5
 80109c2:	f003 0207 	and.w	r2, r3, #7
 80109c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	4432      	add	r2, r6
 80109cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80109ce:	e0b9      	b.n	8010b44 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80109d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109d2:	461c      	mov	r4, r3
 80109d4:	f04f 0500 	mov.w	r5, #0
 80109d8:	4622      	mov	r2, r4
 80109da:	462b      	mov	r3, r5
 80109dc:	1891      	adds	r1, r2, r2
 80109de:	6139      	str	r1, [r7, #16]
 80109e0:	415b      	adcs	r3, r3
 80109e2:	617b      	str	r3, [r7, #20]
 80109e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80109e8:	1912      	adds	r2, r2, r4
 80109ea:	eb45 0303 	adc.w	r3, r5, r3
 80109ee:	f04f 0000 	mov.w	r0, #0
 80109f2:	f04f 0100 	mov.w	r1, #0
 80109f6:	00d9      	lsls	r1, r3, #3
 80109f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80109fc:	00d0      	lsls	r0, r2, #3
 80109fe:	4602      	mov	r2, r0
 8010a00:	460b      	mov	r3, r1
 8010a02:	eb12 0804 	adds.w	r8, r2, r4
 8010a06:	eb43 0905 	adc.w	r9, r3, r5
 8010a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f04f 0100 	mov.w	r1, #0
 8010a14:	f04f 0200 	mov.w	r2, #0
 8010a18:	f04f 0300 	mov.w	r3, #0
 8010a1c:	008b      	lsls	r3, r1, #2
 8010a1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010a22:	0082      	lsls	r2, r0, #2
 8010a24:	4640      	mov	r0, r8
 8010a26:	4649      	mov	r1, r9
 8010a28:	f7f0 f946 	bl	8000cb8 <__aeabi_uldivmod>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	4b49      	ldr	r3, [pc, #292]	; (8010b58 <UART_SetConfig+0x38c>)
 8010a32:	fba3 2302 	umull	r2, r3, r3, r2
 8010a36:	095b      	lsrs	r3, r3, #5
 8010a38:	011e      	lsls	r6, r3, #4
 8010a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f04f 0100 	mov.w	r1, #0
 8010a42:	4602      	mov	r2, r0
 8010a44:	460b      	mov	r3, r1
 8010a46:	1894      	adds	r4, r2, r2
 8010a48:	60bc      	str	r4, [r7, #8]
 8010a4a:	415b      	adcs	r3, r3
 8010a4c:	60fb      	str	r3, [r7, #12]
 8010a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a52:	1812      	adds	r2, r2, r0
 8010a54:	eb41 0303 	adc.w	r3, r1, r3
 8010a58:	f04f 0400 	mov.w	r4, #0
 8010a5c:	f04f 0500 	mov.w	r5, #0
 8010a60:	00dd      	lsls	r5, r3, #3
 8010a62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010a66:	00d4      	lsls	r4, r2, #3
 8010a68:	4622      	mov	r2, r4
 8010a6a:	462b      	mov	r3, r5
 8010a6c:	1814      	adds	r4, r2, r0
 8010a6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8010a70:	414b      	adcs	r3, r1
 8010a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f04f 0100 	mov.w	r1, #0
 8010a7e:	f04f 0200 	mov.w	r2, #0
 8010a82:	f04f 0300 	mov.w	r3, #0
 8010a86:	008b      	lsls	r3, r1, #2
 8010a88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010a8c:	0082      	lsls	r2, r0, #2
 8010a8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010a92:	f7f0 f911 	bl	8000cb8 <__aeabi_uldivmod>
 8010a96:	4602      	mov	r2, r0
 8010a98:	460b      	mov	r3, r1
 8010a9a:	4b2f      	ldr	r3, [pc, #188]	; (8010b58 <UART_SetConfig+0x38c>)
 8010a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8010aa0:	095b      	lsrs	r3, r3, #5
 8010aa2:	2164      	movs	r1, #100	; 0x64
 8010aa4:	fb01 f303 	mul.w	r3, r1, r3
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	011b      	lsls	r3, r3, #4
 8010aac:	3332      	adds	r3, #50	; 0x32
 8010aae:	4a2a      	ldr	r2, [pc, #168]	; (8010b58 <UART_SetConfig+0x38c>)
 8010ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ab4:	095b      	lsrs	r3, r3, #5
 8010ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010aba:	441e      	add	r6, r3
 8010abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f04f 0100 	mov.w	r1, #0
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	1894      	adds	r4, r2, r2
 8010aca:	603c      	str	r4, [r7, #0]
 8010acc:	415b      	adcs	r3, r3
 8010ace:	607b      	str	r3, [r7, #4]
 8010ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ad4:	1812      	adds	r2, r2, r0
 8010ad6:	eb41 0303 	adc.w	r3, r1, r3
 8010ada:	f04f 0400 	mov.w	r4, #0
 8010ade:	f04f 0500 	mov.w	r5, #0
 8010ae2:	00dd      	lsls	r5, r3, #3
 8010ae4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010ae8:	00d4      	lsls	r4, r2, #3
 8010aea:	4622      	mov	r2, r4
 8010aec:	462b      	mov	r3, r5
 8010aee:	eb12 0a00 	adds.w	sl, r2, r0
 8010af2:	eb43 0b01 	adc.w	fp, r3, r1
 8010af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f04f 0100 	mov.w	r1, #0
 8010b00:	f04f 0200 	mov.w	r2, #0
 8010b04:	f04f 0300 	mov.w	r3, #0
 8010b08:	008b      	lsls	r3, r1, #2
 8010b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010b0e:	0082      	lsls	r2, r0, #2
 8010b10:	4650      	mov	r0, sl
 8010b12:	4659      	mov	r1, fp
 8010b14:	f7f0 f8d0 	bl	8000cb8 <__aeabi_uldivmod>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	4b0e      	ldr	r3, [pc, #56]	; (8010b58 <UART_SetConfig+0x38c>)
 8010b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8010b22:	095b      	lsrs	r3, r3, #5
 8010b24:	2164      	movs	r1, #100	; 0x64
 8010b26:	fb01 f303 	mul.w	r3, r1, r3
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	011b      	lsls	r3, r3, #4
 8010b2e:	3332      	adds	r3, #50	; 0x32
 8010b30:	4a09      	ldr	r2, [pc, #36]	; (8010b58 <UART_SetConfig+0x38c>)
 8010b32:	fba2 2303 	umull	r2, r3, r2, r3
 8010b36:	095b      	lsrs	r3, r3, #5
 8010b38:	f003 020f 	and.w	r2, r3, #15
 8010b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4432      	add	r2, r6
 8010b42:	609a      	str	r2, [r3, #8]
}
 8010b44:	bf00      	nop
 8010b46:	377c      	adds	r7, #124	; 0x7c
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4e:	bf00      	nop
 8010b50:	40011000 	.word	0x40011000
 8010b54:	40011400 	.word	0x40011400
 8010b58:	51eb851f 	.word	0x51eb851f

08010b5c <atof>:
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	f001 bd03 	b.w	8012568 <strtod>

08010b62 <atoi>:
 8010b62:	220a      	movs	r2, #10
 8010b64:	2100      	movs	r1, #0
 8010b66:	f001 bded 	b.w	8012744 <strtol>
	...

08010b6c <__errno>:
 8010b6c:	4b01      	ldr	r3, [pc, #4]	; (8010b74 <__errno+0x8>)
 8010b6e:	6818      	ldr	r0, [r3, #0]
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop
 8010b74:	20000040 	.word	0x20000040

08010b78 <__libc_init_array>:
 8010b78:	b570      	push	{r4, r5, r6, lr}
 8010b7a:	4d0d      	ldr	r5, [pc, #52]	; (8010bb0 <__libc_init_array+0x38>)
 8010b7c:	4c0d      	ldr	r4, [pc, #52]	; (8010bb4 <__libc_init_array+0x3c>)
 8010b7e:	1b64      	subs	r4, r4, r5
 8010b80:	10a4      	asrs	r4, r4, #2
 8010b82:	2600      	movs	r6, #0
 8010b84:	42a6      	cmp	r6, r4
 8010b86:	d109      	bne.n	8010b9c <__libc_init_array+0x24>
 8010b88:	4d0b      	ldr	r5, [pc, #44]	; (8010bb8 <__libc_init_array+0x40>)
 8010b8a:	4c0c      	ldr	r4, [pc, #48]	; (8010bbc <__libc_init_array+0x44>)
 8010b8c:	f004 fcb6 	bl	80154fc <_init>
 8010b90:	1b64      	subs	r4, r4, r5
 8010b92:	10a4      	asrs	r4, r4, #2
 8010b94:	2600      	movs	r6, #0
 8010b96:	42a6      	cmp	r6, r4
 8010b98:	d105      	bne.n	8010ba6 <__libc_init_array+0x2e>
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
 8010b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ba0:	4798      	blx	r3
 8010ba2:	3601      	adds	r6, #1
 8010ba4:	e7ee      	b.n	8010b84 <__libc_init_array+0xc>
 8010ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010baa:	4798      	blx	r3
 8010bac:	3601      	adds	r6, #1
 8010bae:	e7f2      	b.n	8010b96 <__libc_init_array+0x1e>
 8010bb0:	08029478 	.word	0x08029478
 8010bb4:	08029478 	.word	0x08029478
 8010bb8:	08029478 	.word	0x08029478
 8010bbc:	0802947c 	.word	0x0802947c

08010bc0 <memset>:
 8010bc0:	4402      	add	r2, r0
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d100      	bne.n	8010bca <memset+0xa>
 8010bc8:	4770      	bx	lr
 8010bca:	f803 1b01 	strb.w	r1, [r3], #1
 8010bce:	e7f9      	b.n	8010bc4 <memset+0x4>

08010bd0 <__cvt>:
 8010bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd4:	ec55 4b10 	vmov	r4, r5, d0
 8010bd8:	2d00      	cmp	r5, #0
 8010bda:	460e      	mov	r6, r1
 8010bdc:	4619      	mov	r1, r3
 8010bde:	462b      	mov	r3, r5
 8010be0:	bfbb      	ittet	lt
 8010be2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010be6:	461d      	movlt	r5, r3
 8010be8:	2300      	movge	r3, #0
 8010bea:	232d      	movlt	r3, #45	; 0x2d
 8010bec:	700b      	strb	r3, [r1, #0]
 8010bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010bf4:	4691      	mov	r9, r2
 8010bf6:	f023 0820 	bic.w	r8, r3, #32
 8010bfa:	bfbc      	itt	lt
 8010bfc:	4622      	movlt	r2, r4
 8010bfe:	4614      	movlt	r4, r2
 8010c00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c04:	d005      	beq.n	8010c12 <__cvt+0x42>
 8010c06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c0a:	d100      	bne.n	8010c0e <__cvt+0x3e>
 8010c0c:	3601      	adds	r6, #1
 8010c0e:	2102      	movs	r1, #2
 8010c10:	e000      	b.n	8010c14 <__cvt+0x44>
 8010c12:	2103      	movs	r1, #3
 8010c14:	ab03      	add	r3, sp, #12
 8010c16:	9301      	str	r3, [sp, #4]
 8010c18:	ab02      	add	r3, sp, #8
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	ec45 4b10 	vmov	d0, r4, r5
 8010c20:	4653      	mov	r3, sl
 8010c22:	4632      	mov	r2, r6
 8010c24:	f001 fe44 	bl	80128b0 <_dtoa_r>
 8010c28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	d102      	bne.n	8010c36 <__cvt+0x66>
 8010c30:	f019 0f01 	tst.w	r9, #1
 8010c34:	d022      	beq.n	8010c7c <__cvt+0xac>
 8010c36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c3a:	eb07 0906 	add.w	r9, r7, r6
 8010c3e:	d110      	bne.n	8010c62 <__cvt+0x92>
 8010c40:	783b      	ldrb	r3, [r7, #0]
 8010c42:	2b30      	cmp	r3, #48	; 0x30
 8010c44:	d10a      	bne.n	8010c5c <__cvt+0x8c>
 8010c46:	2200      	movs	r2, #0
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	f7ef ff53 	bl	8000af8 <__aeabi_dcmpeq>
 8010c52:	b918      	cbnz	r0, 8010c5c <__cvt+0x8c>
 8010c54:	f1c6 0601 	rsb	r6, r6, #1
 8010c58:	f8ca 6000 	str.w	r6, [sl]
 8010c5c:	f8da 3000 	ldr.w	r3, [sl]
 8010c60:	4499      	add	r9, r3
 8010c62:	2200      	movs	r2, #0
 8010c64:	2300      	movs	r3, #0
 8010c66:	4620      	mov	r0, r4
 8010c68:	4629      	mov	r1, r5
 8010c6a:	f7ef ff45 	bl	8000af8 <__aeabi_dcmpeq>
 8010c6e:	b108      	cbz	r0, 8010c74 <__cvt+0xa4>
 8010c70:	f8cd 900c 	str.w	r9, [sp, #12]
 8010c74:	2230      	movs	r2, #48	; 0x30
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	454b      	cmp	r3, r9
 8010c7a:	d307      	bcc.n	8010c8c <__cvt+0xbc>
 8010c7c:	9b03      	ldr	r3, [sp, #12]
 8010c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c80:	1bdb      	subs	r3, r3, r7
 8010c82:	4638      	mov	r0, r7
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	b004      	add	sp, #16
 8010c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c8c:	1c59      	adds	r1, r3, #1
 8010c8e:	9103      	str	r1, [sp, #12]
 8010c90:	701a      	strb	r2, [r3, #0]
 8010c92:	e7f0      	b.n	8010c76 <__cvt+0xa6>

08010c94 <__exponent>:
 8010c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c96:	4603      	mov	r3, r0
 8010c98:	2900      	cmp	r1, #0
 8010c9a:	bfb8      	it	lt
 8010c9c:	4249      	neglt	r1, r1
 8010c9e:	f803 2b02 	strb.w	r2, [r3], #2
 8010ca2:	bfb4      	ite	lt
 8010ca4:	222d      	movlt	r2, #45	; 0x2d
 8010ca6:	222b      	movge	r2, #43	; 0x2b
 8010ca8:	2909      	cmp	r1, #9
 8010caa:	7042      	strb	r2, [r0, #1]
 8010cac:	dd2a      	ble.n	8010d04 <__exponent+0x70>
 8010cae:	f10d 0407 	add.w	r4, sp, #7
 8010cb2:	46a4      	mov	ip, r4
 8010cb4:	270a      	movs	r7, #10
 8010cb6:	46a6      	mov	lr, r4
 8010cb8:	460a      	mov	r2, r1
 8010cba:	fb91 f6f7 	sdiv	r6, r1, r7
 8010cbe:	fb07 1516 	mls	r5, r7, r6, r1
 8010cc2:	3530      	adds	r5, #48	; 0x30
 8010cc4:	2a63      	cmp	r2, #99	; 0x63
 8010cc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8010cca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010cce:	4631      	mov	r1, r6
 8010cd0:	dcf1      	bgt.n	8010cb6 <__exponent+0x22>
 8010cd2:	3130      	adds	r1, #48	; 0x30
 8010cd4:	f1ae 0502 	sub.w	r5, lr, #2
 8010cd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010cdc:	1c44      	adds	r4, r0, #1
 8010cde:	4629      	mov	r1, r5
 8010ce0:	4561      	cmp	r1, ip
 8010ce2:	d30a      	bcc.n	8010cfa <__exponent+0x66>
 8010ce4:	f10d 0209 	add.w	r2, sp, #9
 8010ce8:	eba2 020e 	sub.w	r2, r2, lr
 8010cec:	4565      	cmp	r5, ip
 8010cee:	bf88      	it	hi
 8010cf0:	2200      	movhi	r2, #0
 8010cf2:	4413      	add	r3, r2
 8010cf4:	1a18      	subs	r0, r3, r0
 8010cf6:	b003      	add	sp, #12
 8010cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010d02:	e7ed      	b.n	8010ce0 <__exponent+0x4c>
 8010d04:	2330      	movs	r3, #48	; 0x30
 8010d06:	3130      	adds	r1, #48	; 0x30
 8010d08:	7083      	strb	r3, [r0, #2]
 8010d0a:	70c1      	strb	r1, [r0, #3]
 8010d0c:	1d03      	adds	r3, r0, #4
 8010d0e:	e7f1      	b.n	8010cf4 <__exponent+0x60>

08010d10 <_printf_float>:
 8010d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	ed2d 8b02 	vpush	{d8}
 8010d18:	b08d      	sub	sp, #52	; 0x34
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010d20:	4616      	mov	r6, r2
 8010d22:	461f      	mov	r7, r3
 8010d24:	4605      	mov	r5, r0
 8010d26:	f002 ff31 	bl	8013b8c <_localeconv_r>
 8010d2a:	f8d0 a000 	ldr.w	sl, [r0]
 8010d2e:	4650      	mov	r0, sl
 8010d30:	f7ef fa60 	bl	80001f4 <strlen>
 8010d34:	2300      	movs	r3, #0
 8010d36:	930a      	str	r3, [sp, #40]	; 0x28
 8010d38:	6823      	ldr	r3, [r4, #0]
 8010d3a:	9305      	str	r3, [sp, #20]
 8010d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8010d40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010d44:	3307      	adds	r3, #7
 8010d46:	f023 0307 	bic.w	r3, r3, #7
 8010d4a:	f103 0208 	add.w	r2, r3, #8
 8010d4e:	f8c8 2000 	str.w	r2, [r8]
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010d5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010d5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010d62:	9307      	str	r3, [sp, #28]
 8010d64:	f8cd 8018 	str.w	r8, [sp, #24]
 8010d68:	ee08 0a10 	vmov	s16, r0
 8010d6c:	4b9f      	ldr	r3, [pc, #636]	; (8010fec <_printf_float+0x2dc>)
 8010d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d72:	f04f 32ff 	mov.w	r2, #4294967295
 8010d76:	f7ef fef1 	bl	8000b5c <__aeabi_dcmpun>
 8010d7a:	bb88      	cbnz	r0, 8010de0 <_printf_float+0xd0>
 8010d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d80:	4b9a      	ldr	r3, [pc, #616]	; (8010fec <_printf_float+0x2dc>)
 8010d82:	f04f 32ff 	mov.w	r2, #4294967295
 8010d86:	f7ef fecb 	bl	8000b20 <__aeabi_dcmple>
 8010d8a:	bb48      	cbnz	r0, 8010de0 <_printf_float+0xd0>
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	2300      	movs	r3, #0
 8010d90:	4640      	mov	r0, r8
 8010d92:	4649      	mov	r1, r9
 8010d94:	f7ef feba 	bl	8000b0c <__aeabi_dcmplt>
 8010d98:	b110      	cbz	r0, 8010da0 <_printf_float+0x90>
 8010d9a:	232d      	movs	r3, #45	; 0x2d
 8010d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010da0:	4b93      	ldr	r3, [pc, #588]	; (8010ff0 <_printf_float+0x2e0>)
 8010da2:	4894      	ldr	r0, [pc, #592]	; (8010ff4 <_printf_float+0x2e4>)
 8010da4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010da8:	bf94      	ite	ls
 8010daa:	4698      	movls	r8, r3
 8010dac:	4680      	movhi	r8, r0
 8010dae:	2303      	movs	r3, #3
 8010db0:	6123      	str	r3, [r4, #16]
 8010db2:	9b05      	ldr	r3, [sp, #20]
 8010db4:	f023 0204 	bic.w	r2, r3, #4
 8010db8:	6022      	str	r2, [r4, #0]
 8010dba:	f04f 0900 	mov.w	r9, #0
 8010dbe:	9700      	str	r7, [sp, #0]
 8010dc0:	4633      	mov	r3, r6
 8010dc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f9d8 	bl	801117c <_printf_common>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	f040 8090 	bne.w	8010ef2 <_printf_float+0x1e2>
 8010dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd6:	b00d      	add	sp, #52	; 0x34
 8010dd8:	ecbd 8b02 	vpop	{d8}
 8010ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de0:	4642      	mov	r2, r8
 8010de2:	464b      	mov	r3, r9
 8010de4:	4640      	mov	r0, r8
 8010de6:	4649      	mov	r1, r9
 8010de8:	f7ef feb8 	bl	8000b5c <__aeabi_dcmpun>
 8010dec:	b140      	cbz	r0, 8010e00 <_printf_float+0xf0>
 8010dee:	464b      	mov	r3, r9
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	bfbc      	itt	lt
 8010df4:	232d      	movlt	r3, #45	; 0x2d
 8010df6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010dfa:	487f      	ldr	r0, [pc, #508]	; (8010ff8 <_printf_float+0x2e8>)
 8010dfc:	4b7f      	ldr	r3, [pc, #508]	; (8010ffc <_printf_float+0x2ec>)
 8010dfe:	e7d1      	b.n	8010da4 <_printf_float+0x94>
 8010e00:	6863      	ldr	r3, [r4, #4]
 8010e02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e06:	9206      	str	r2, [sp, #24]
 8010e08:	1c5a      	adds	r2, r3, #1
 8010e0a:	d13f      	bne.n	8010e8c <_printf_float+0x17c>
 8010e0c:	2306      	movs	r3, #6
 8010e0e:	6063      	str	r3, [r4, #4]
 8010e10:	9b05      	ldr	r3, [sp, #20]
 8010e12:	6861      	ldr	r1, [r4, #4]
 8010e14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e18:	2300      	movs	r3, #0
 8010e1a:	9303      	str	r3, [sp, #12]
 8010e1c:	ab0a      	add	r3, sp, #40	; 0x28
 8010e1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010e22:	ab09      	add	r3, sp, #36	; 0x24
 8010e24:	ec49 8b10 	vmov	d0, r8, r9
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	6022      	str	r2, [r4, #0]
 8010e2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ff fecd 	bl	8010bd0 <__cvt>
 8010e36:	9b06      	ldr	r3, [sp, #24]
 8010e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e3a:	2b47      	cmp	r3, #71	; 0x47
 8010e3c:	4680      	mov	r8, r0
 8010e3e:	d108      	bne.n	8010e52 <_printf_float+0x142>
 8010e40:	1cc8      	adds	r0, r1, #3
 8010e42:	db02      	blt.n	8010e4a <_printf_float+0x13a>
 8010e44:	6863      	ldr	r3, [r4, #4]
 8010e46:	4299      	cmp	r1, r3
 8010e48:	dd41      	ble.n	8010ece <_printf_float+0x1be>
 8010e4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8010e4e:	fa5f fb8b 	uxtb.w	fp, fp
 8010e52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010e56:	d820      	bhi.n	8010e9a <_printf_float+0x18a>
 8010e58:	3901      	subs	r1, #1
 8010e5a:	465a      	mov	r2, fp
 8010e5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010e60:	9109      	str	r1, [sp, #36]	; 0x24
 8010e62:	f7ff ff17 	bl	8010c94 <__exponent>
 8010e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e68:	1813      	adds	r3, r2, r0
 8010e6a:	2a01      	cmp	r2, #1
 8010e6c:	4681      	mov	r9, r0
 8010e6e:	6123      	str	r3, [r4, #16]
 8010e70:	dc02      	bgt.n	8010e78 <_printf_float+0x168>
 8010e72:	6822      	ldr	r2, [r4, #0]
 8010e74:	07d2      	lsls	r2, r2, #31
 8010e76:	d501      	bpl.n	8010e7c <_printf_float+0x16c>
 8010e78:	3301      	adds	r3, #1
 8010e7a:	6123      	str	r3, [r4, #16]
 8010e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d09c      	beq.n	8010dbe <_printf_float+0xae>
 8010e84:	232d      	movs	r3, #45	; 0x2d
 8010e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e8a:	e798      	b.n	8010dbe <_printf_float+0xae>
 8010e8c:	9a06      	ldr	r2, [sp, #24]
 8010e8e:	2a47      	cmp	r2, #71	; 0x47
 8010e90:	d1be      	bne.n	8010e10 <_printf_float+0x100>
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1bc      	bne.n	8010e10 <_printf_float+0x100>
 8010e96:	2301      	movs	r3, #1
 8010e98:	e7b9      	b.n	8010e0e <_printf_float+0xfe>
 8010e9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010e9e:	d118      	bne.n	8010ed2 <_printf_float+0x1c2>
 8010ea0:	2900      	cmp	r1, #0
 8010ea2:	6863      	ldr	r3, [r4, #4]
 8010ea4:	dd0b      	ble.n	8010ebe <_printf_float+0x1ae>
 8010ea6:	6121      	str	r1, [r4, #16]
 8010ea8:	b913      	cbnz	r3, 8010eb0 <_printf_float+0x1a0>
 8010eaa:	6822      	ldr	r2, [r4, #0]
 8010eac:	07d0      	lsls	r0, r2, #31
 8010eae:	d502      	bpl.n	8010eb6 <_printf_float+0x1a6>
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	440b      	add	r3, r1
 8010eb4:	6123      	str	r3, [r4, #16]
 8010eb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8010eb8:	f04f 0900 	mov.w	r9, #0
 8010ebc:	e7de      	b.n	8010e7c <_printf_float+0x16c>
 8010ebe:	b913      	cbnz	r3, 8010ec6 <_printf_float+0x1b6>
 8010ec0:	6822      	ldr	r2, [r4, #0]
 8010ec2:	07d2      	lsls	r2, r2, #31
 8010ec4:	d501      	bpl.n	8010eca <_printf_float+0x1ba>
 8010ec6:	3302      	adds	r3, #2
 8010ec8:	e7f4      	b.n	8010eb4 <_printf_float+0x1a4>
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e7f2      	b.n	8010eb4 <_printf_float+0x1a4>
 8010ece:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ed4:	4299      	cmp	r1, r3
 8010ed6:	db05      	blt.n	8010ee4 <_printf_float+0x1d4>
 8010ed8:	6823      	ldr	r3, [r4, #0]
 8010eda:	6121      	str	r1, [r4, #16]
 8010edc:	07d8      	lsls	r0, r3, #31
 8010ede:	d5ea      	bpl.n	8010eb6 <_printf_float+0x1a6>
 8010ee0:	1c4b      	adds	r3, r1, #1
 8010ee2:	e7e7      	b.n	8010eb4 <_printf_float+0x1a4>
 8010ee4:	2900      	cmp	r1, #0
 8010ee6:	bfd4      	ite	le
 8010ee8:	f1c1 0202 	rsble	r2, r1, #2
 8010eec:	2201      	movgt	r2, #1
 8010eee:	4413      	add	r3, r2
 8010ef0:	e7e0      	b.n	8010eb4 <_printf_float+0x1a4>
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	055a      	lsls	r2, r3, #21
 8010ef6:	d407      	bmi.n	8010f08 <_printf_float+0x1f8>
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	4642      	mov	r2, r8
 8010efc:	4631      	mov	r1, r6
 8010efe:	4628      	mov	r0, r5
 8010f00:	47b8      	blx	r7
 8010f02:	3001      	adds	r0, #1
 8010f04:	d12c      	bne.n	8010f60 <_printf_float+0x250>
 8010f06:	e764      	b.n	8010dd2 <_printf_float+0xc2>
 8010f08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f0c:	f240 80e0 	bls.w	80110d0 <_printf_float+0x3c0>
 8010f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f14:	2200      	movs	r2, #0
 8010f16:	2300      	movs	r3, #0
 8010f18:	f7ef fdee 	bl	8000af8 <__aeabi_dcmpeq>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d034      	beq.n	8010f8a <_printf_float+0x27a>
 8010f20:	4a37      	ldr	r2, [pc, #220]	; (8011000 <_printf_float+0x2f0>)
 8010f22:	2301      	movs	r3, #1
 8010f24:	4631      	mov	r1, r6
 8010f26:	4628      	mov	r0, r5
 8010f28:	47b8      	blx	r7
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	f43f af51 	beq.w	8010dd2 <_printf_float+0xc2>
 8010f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f34:	429a      	cmp	r2, r3
 8010f36:	db02      	blt.n	8010f3e <_printf_float+0x22e>
 8010f38:	6823      	ldr	r3, [r4, #0]
 8010f3a:	07d8      	lsls	r0, r3, #31
 8010f3c:	d510      	bpl.n	8010f60 <_printf_float+0x250>
 8010f3e:	ee18 3a10 	vmov	r3, s16
 8010f42:	4652      	mov	r2, sl
 8010f44:	4631      	mov	r1, r6
 8010f46:	4628      	mov	r0, r5
 8010f48:	47b8      	blx	r7
 8010f4a:	3001      	adds	r0, #1
 8010f4c:	f43f af41 	beq.w	8010dd2 <_printf_float+0xc2>
 8010f50:	f04f 0800 	mov.w	r8, #0
 8010f54:	f104 091a 	add.w	r9, r4, #26
 8010f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	4543      	cmp	r3, r8
 8010f5e:	dc09      	bgt.n	8010f74 <_printf_float+0x264>
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	079b      	lsls	r3, r3, #30
 8010f64:	f100 8105 	bmi.w	8011172 <_printf_float+0x462>
 8010f68:	68e0      	ldr	r0, [r4, #12]
 8010f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f6c:	4298      	cmp	r0, r3
 8010f6e:	bfb8      	it	lt
 8010f70:	4618      	movlt	r0, r3
 8010f72:	e730      	b.n	8010dd6 <_printf_float+0xc6>
 8010f74:	2301      	movs	r3, #1
 8010f76:	464a      	mov	r2, r9
 8010f78:	4631      	mov	r1, r6
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	47b8      	blx	r7
 8010f7e:	3001      	adds	r0, #1
 8010f80:	f43f af27 	beq.w	8010dd2 <_printf_float+0xc2>
 8010f84:	f108 0801 	add.w	r8, r8, #1
 8010f88:	e7e6      	b.n	8010f58 <_printf_float+0x248>
 8010f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	dc39      	bgt.n	8011004 <_printf_float+0x2f4>
 8010f90:	4a1b      	ldr	r2, [pc, #108]	; (8011000 <_printf_float+0x2f0>)
 8010f92:	2301      	movs	r3, #1
 8010f94:	4631      	mov	r1, r6
 8010f96:	4628      	mov	r0, r5
 8010f98:	47b8      	blx	r7
 8010f9a:	3001      	adds	r0, #1
 8010f9c:	f43f af19 	beq.w	8010dd2 <_printf_float+0xc2>
 8010fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fa4:	4313      	orrs	r3, r2
 8010fa6:	d102      	bne.n	8010fae <_printf_float+0x29e>
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	07d9      	lsls	r1, r3, #31
 8010fac:	d5d8      	bpl.n	8010f60 <_printf_float+0x250>
 8010fae:	ee18 3a10 	vmov	r3, s16
 8010fb2:	4652      	mov	r2, sl
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	47b8      	blx	r7
 8010fba:	3001      	adds	r0, #1
 8010fbc:	f43f af09 	beq.w	8010dd2 <_printf_float+0xc2>
 8010fc0:	f04f 0900 	mov.w	r9, #0
 8010fc4:	f104 0a1a 	add.w	sl, r4, #26
 8010fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fca:	425b      	negs	r3, r3
 8010fcc:	454b      	cmp	r3, r9
 8010fce:	dc01      	bgt.n	8010fd4 <_printf_float+0x2c4>
 8010fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fd2:	e792      	b.n	8010efa <_printf_float+0x1ea>
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	4652      	mov	r2, sl
 8010fd8:	4631      	mov	r1, r6
 8010fda:	4628      	mov	r0, r5
 8010fdc:	47b8      	blx	r7
 8010fde:	3001      	adds	r0, #1
 8010fe0:	f43f aef7 	beq.w	8010dd2 <_printf_float+0xc2>
 8010fe4:	f109 0901 	add.w	r9, r9, #1
 8010fe8:	e7ee      	b.n	8010fc8 <_printf_float+0x2b8>
 8010fea:	bf00      	nop
 8010fec:	7fefffff 	.word	0x7fefffff
 8010ff0:	08028f64 	.word	0x08028f64
 8010ff4:	08028f68 	.word	0x08028f68
 8010ff8:	08028f70 	.word	0x08028f70
 8010ffc:	08028f6c 	.word	0x08028f6c
 8011000:	08028f74 	.word	0x08028f74
 8011004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011008:	429a      	cmp	r2, r3
 801100a:	bfa8      	it	ge
 801100c:	461a      	movge	r2, r3
 801100e:	2a00      	cmp	r2, #0
 8011010:	4691      	mov	r9, r2
 8011012:	dc37      	bgt.n	8011084 <_printf_float+0x374>
 8011014:	f04f 0b00 	mov.w	fp, #0
 8011018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801101c:	f104 021a 	add.w	r2, r4, #26
 8011020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011022:	9305      	str	r3, [sp, #20]
 8011024:	eba3 0309 	sub.w	r3, r3, r9
 8011028:	455b      	cmp	r3, fp
 801102a:	dc33      	bgt.n	8011094 <_printf_float+0x384>
 801102c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011030:	429a      	cmp	r2, r3
 8011032:	db3b      	blt.n	80110ac <_printf_float+0x39c>
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	07da      	lsls	r2, r3, #31
 8011038:	d438      	bmi.n	80110ac <_printf_float+0x39c>
 801103a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801103c:	9b05      	ldr	r3, [sp, #20]
 801103e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	eba2 0901 	sub.w	r9, r2, r1
 8011046:	4599      	cmp	r9, r3
 8011048:	bfa8      	it	ge
 801104a:	4699      	movge	r9, r3
 801104c:	f1b9 0f00 	cmp.w	r9, #0
 8011050:	dc35      	bgt.n	80110be <_printf_float+0x3ae>
 8011052:	f04f 0800 	mov.w	r8, #0
 8011056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801105a:	f104 0a1a 	add.w	sl, r4, #26
 801105e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	eba3 0309 	sub.w	r3, r3, r9
 8011068:	4543      	cmp	r3, r8
 801106a:	f77f af79 	ble.w	8010f60 <_printf_float+0x250>
 801106e:	2301      	movs	r3, #1
 8011070:	4652      	mov	r2, sl
 8011072:	4631      	mov	r1, r6
 8011074:	4628      	mov	r0, r5
 8011076:	47b8      	blx	r7
 8011078:	3001      	adds	r0, #1
 801107a:	f43f aeaa 	beq.w	8010dd2 <_printf_float+0xc2>
 801107e:	f108 0801 	add.w	r8, r8, #1
 8011082:	e7ec      	b.n	801105e <_printf_float+0x34e>
 8011084:	4613      	mov	r3, r2
 8011086:	4631      	mov	r1, r6
 8011088:	4642      	mov	r2, r8
 801108a:	4628      	mov	r0, r5
 801108c:	47b8      	blx	r7
 801108e:	3001      	adds	r0, #1
 8011090:	d1c0      	bne.n	8011014 <_printf_float+0x304>
 8011092:	e69e      	b.n	8010dd2 <_printf_float+0xc2>
 8011094:	2301      	movs	r3, #1
 8011096:	4631      	mov	r1, r6
 8011098:	4628      	mov	r0, r5
 801109a:	9205      	str	r2, [sp, #20]
 801109c:	47b8      	blx	r7
 801109e:	3001      	adds	r0, #1
 80110a0:	f43f ae97 	beq.w	8010dd2 <_printf_float+0xc2>
 80110a4:	9a05      	ldr	r2, [sp, #20]
 80110a6:	f10b 0b01 	add.w	fp, fp, #1
 80110aa:	e7b9      	b.n	8011020 <_printf_float+0x310>
 80110ac:	ee18 3a10 	vmov	r3, s16
 80110b0:	4652      	mov	r2, sl
 80110b2:	4631      	mov	r1, r6
 80110b4:	4628      	mov	r0, r5
 80110b6:	47b8      	blx	r7
 80110b8:	3001      	adds	r0, #1
 80110ba:	d1be      	bne.n	801103a <_printf_float+0x32a>
 80110bc:	e689      	b.n	8010dd2 <_printf_float+0xc2>
 80110be:	9a05      	ldr	r2, [sp, #20]
 80110c0:	464b      	mov	r3, r9
 80110c2:	4442      	add	r2, r8
 80110c4:	4631      	mov	r1, r6
 80110c6:	4628      	mov	r0, r5
 80110c8:	47b8      	blx	r7
 80110ca:	3001      	adds	r0, #1
 80110cc:	d1c1      	bne.n	8011052 <_printf_float+0x342>
 80110ce:	e680      	b.n	8010dd2 <_printf_float+0xc2>
 80110d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110d2:	2a01      	cmp	r2, #1
 80110d4:	dc01      	bgt.n	80110da <_printf_float+0x3ca>
 80110d6:	07db      	lsls	r3, r3, #31
 80110d8:	d538      	bpl.n	801114c <_printf_float+0x43c>
 80110da:	2301      	movs	r3, #1
 80110dc:	4642      	mov	r2, r8
 80110de:	4631      	mov	r1, r6
 80110e0:	4628      	mov	r0, r5
 80110e2:	47b8      	blx	r7
 80110e4:	3001      	adds	r0, #1
 80110e6:	f43f ae74 	beq.w	8010dd2 <_printf_float+0xc2>
 80110ea:	ee18 3a10 	vmov	r3, s16
 80110ee:	4652      	mov	r2, sl
 80110f0:	4631      	mov	r1, r6
 80110f2:	4628      	mov	r0, r5
 80110f4:	47b8      	blx	r7
 80110f6:	3001      	adds	r0, #1
 80110f8:	f43f ae6b 	beq.w	8010dd2 <_printf_float+0xc2>
 80110fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011100:	2200      	movs	r2, #0
 8011102:	2300      	movs	r3, #0
 8011104:	f7ef fcf8 	bl	8000af8 <__aeabi_dcmpeq>
 8011108:	b9d8      	cbnz	r0, 8011142 <_printf_float+0x432>
 801110a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801110c:	f108 0201 	add.w	r2, r8, #1
 8011110:	3b01      	subs	r3, #1
 8011112:	4631      	mov	r1, r6
 8011114:	4628      	mov	r0, r5
 8011116:	47b8      	blx	r7
 8011118:	3001      	adds	r0, #1
 801111a:	d10e      	bne.n	801113a <_printf_float+0x42a>
 801111c:	e659      	b.n	8010dd2 <_printf_float+0xc2>
 801111e:	2301      	movs	r3, #1
 8011120:	4652      	mov	r2, sl
 8011122:	4631      	mov	r1, r6
 8011124:	4628      	mov	r0, r5
 8011126:	47b8      	blx	r7
 8011128:	3001      	adds	r0, #1
 801112a:	f43f ae52 	beq.w	8010dd2 <_printf_float+0xc2>
 801112e:	f108 0801 	add.w	r8, r8, #1
 8011132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011134:	3b01      	subs	r3, #1
 8011136:	4543      	cmp	r3, r8
 8011138:	dcf1      	bgt.n	801111e <_printf_float+0x40e>
 801113a:	464b      	mov	r3, r9
 801113c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011140:	e6dc      	b.n	8010efc <_printf_float+0x1ec>
 8011142:	f04f 0800 	mov.w	r8, #0
 8011146:	f104 0a1a 	add.w	sl, r4, #26
 801114a:	e7f2      	b.n	8011132 <_printf_float+0x422>
 801114c:	2301      	movs	r3, #1
 801114e:	4642      	mov	r2, r8
 8011150:	e7df      	b.n	8011112 <_printf_float+0x402>
 8011152:	2301      	movs	r3, #1
 8011154:	464a      	mov	r2, r9
 8011156:	4631      	mov	r1, r6
 8011158:	4628      	mov	r0, r5
 801115a:	47b8      	blx	r7
 801115c:	3001      	adds	r0, #1
 801115e:	f43f ae38 	beq.w	8010dd2 <_printf_float+0xc2>
 8011162:	f108 0801 	add.w	r8, r8, #1
 8011166:	68e3      	ldr	r3, [r4, #12]
 8011168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801116a:	1a5b      	subs	r3, r3, r1
 801116c:	4543      	cmp	r3, r8
 801116e:	dcf0      	bgt.n	8011152 <_printf_float+0x442>
 8011170:	e6fa      	b.n	8010f68 <_printf_float+0x258>
 8011172:	f04f 0800 	mov.w	r8, #0
 8011176:	f104 0919 	add.w	r9, r4, #25
 801117a:	e7f4      	b.n	8011166 <_printf_float+0x456>

0801117c <_printf_common>:
 801117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011180:	4616      	mov	r6, r2
 8011182:	4699      	mov	r9, r3
 8011184:	688a      	ldr	r2, [r1, #8]
 8011186:	690b      	ldr	r3, [r1, #16]
 8011188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801118c:	4293      	cmp	r3, r2
 801118e:	bfb8      	it	lt
 8011190:	4613      	movlt	r3, r2
 8011192:	6033      	str	r3, [r6, #0]
 8011194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011198:	4607      	mov	r7, r0
 801119a:	460c      	mov	r4, r1
 801119c:	b10a      	cbz	r2, 80111a2 <_printf_common+0x26>
 801119e:	3301      	adds	r3, #1
 80111a0:	6033      	str	r3, [r6, #0]
 80111a2:	6823      	ldr	r3, [r4, #0]
 80111a4:	0699      	lsls	r1, r3, #26
 80111a6:	bf42      	ittt	mi
 80111a8:	6833      	ldrmi	r3, [r6, #0]
 80111aa:	3302      	addmi	r3, #2
 80111ac:	6033      	strmi	r3, [r6, #0]
 80111ae:	6825      	ldr	r5, [r4, #0]
 80111b0:	f015 0506 	ands.w	r5, r5, #6
 80111b4:	d106      	bne.n	80111c4 <_printf_common+0x48>
 80111b6:	f104 0a19 	add.w	sl, r4, #25
 80111ba:	68e3      	ldr	r3, [r4, #12]
 80111bc:	6832      	ldr	r2, [r6, #0]
 80111be:	1a9b      	subs	r3, r3, r2
 80111c0:	42ab      	cmp	r3, r5
 80111c2:	dc26      	bgt.n	8011212 <_printf_common+0x96>
 80111c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80111c8:	1e13      	subs	r3, r2, #0
 80111ca:	6822      	ldr	r2, [r4, #0]
 80111cc:	bf18      	it	ne
 80111ce:	2301      	movne	r3, #1
 80111d0:	0692      	lsls	r2, r2, #26
 80111d2:	d42b      	bmi.n	801122c <_printf_common+0xb0>
 80111d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80111d8:	4649      	mov	r1, r9
 80111da:	4638      	mov	r0, r7
 80111dc:	47c0      	blx	r8
 80111de:	3001      	adds	r0, #1
 80111e0:	d01e      	beq.n	8011220 <_printf_common+0xa4>
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	68e5      	ldr	r5, [r4, #12]
 80111e6:	6832      	ldr	r2, [r6, #0]
 80111e8:	f003 0306 	and.w	r3, r3, #6
 80111ec:	2b04      	cmp	r3, #4
 80111ee:	bf08      	it	eq
 80111f0:	1aad      	subeq	r5, r5, r2
 80111f2:	68a3      	ldr	r3, [r4, #8]
 80111f4:	6922      	ldr	r2, [r4, #16]
 80111f6:	bf0c      	ite	eq
 80111f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111fc:	2500      	movne	r5, #0
 80111fe:	4293      	cmp	r3, r2
 8011200:	bfc4      	itt	gt
 8011202:	1a9b      	subgt	r3, r3, r2
 8011204:	18ed      	addgt	r5, r5, r3
 8011206:	2600      	movs	r6, #0
 8011208:	341a      	adds	r4, #26
 801120a:	42b5      	cmp	r5, r6
 801120c:	d11a      	bne.n	8011244 <_printf_common+0xc8>
 801120e:	2000      	movs	r0, #0
 8011210:	e008      	b.n	8011224 <_printf_common+0xa8>
 8011212:	2301      	movs	r3, #1
 8011214:	4652      	mov	r2, sl
 8011216:	4649      	mov	r1, r9
 8011218:	4638      	mov	r0, r7
 801121a:	47c0      	blx	r8
 801121c:	3001      	adds	r0, #1
 801121e:	d103      	bne.n	8011228 <_printf_common+0xac>
 8011220:	f04f 30ff 	mov.w	r0, #4294967295
 8011224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011228:	3501      	adds	r5, #1
 801122a:	e7c6      	b.n	80111ba <_printf_common+0x3e>
 801122c:	18e1      	adds	r1, r4, r3
 801122e:	1c5a      	adds	r2, r3, #1
 8011230:	2030      	movs	r0, #48	; 0x30
 8011232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011236:	4422      	add	r2, r4
 8011238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801123c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011240:	3302      	adds	r3, #2
 8011242:	e7c7      	b.n	80111d4 <_printf_common+0x58>
 8011244:	2301      	movs	r3, #1
 8011246:	4622      	mov	r2, r4
 8011248:	4649      	mov	r1, r9
 801124a:	4638      	mov	r0, r7
 801124c:	47c0      	blx	r8
 801124e:	3001      	adds	r0, #1
 8011250:	d0e6      	beq.n	8011220 <_printf_common+0xa4>
 8011252:	3601      	adds	r6, #1
 8011254:	e7d9      	b.n	801120a <_printf_common+0x8e>
	...

08011258 <_printf_i>:
 8011258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801125c:	460c      	mov	r4, r1
 801125e:	4691      	mov	r9, r2
 8011260:	7e27      	ldrb	r7, [r4, #24]
 8011262:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011264:	2f78      	cmp	r7, #120	; 0x78
 8011266:	4680      	mov	r8, r0
 8011268:	469a      	mov	sl, r3
 801126a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801126e:	d807      	bhi.n	8011280 <_printf_i+0x28>
 8011270:	2f62      	cmp	r7, #98	; 0x62
 8011272:	d80a      	bhi.n	801128a <_printf_i+0x32>
 8011274:	2f00      	cmp	r7, #0
 8011276:	f000 80d8 	beq.w	801142a <_printf_i+0x1d2>
 801127a:	2f58      	cmp	r7, #88	; 0x58
 801127c:	f000 80a3 	beq.w	80113c6 <_printf_i+0x16e>
 8011280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011288:	e03a      	b.n	8011300 <_printf_i+0xa8>
 801128a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801128e:	2b15      	cmp	r3, #21
 8011290:	d8f6      	bhi.n	8011280 <_printf_i+0x28>
 8011292:	a001      	add	r0, pc, #4	; (adr r0, 8011298 <_printf_i+0x40>)
 8011294:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011298:	080112f1 	.word	0x080112f1
 801129c:	08011305 	.word	0x08011305
 80112a0:	08011281 	.word	0x08011281
 80112a4:	08011281 	.word	0x08011281
 80112a8:	08011281 	.word	0x08011281
 80112ac:	08011281 	.word	0x08011281
 80112b0:	08011305 	.word	0x08011305
 80112b4:	08011281 	.word	0x08011281
 80112b8:	08011281 	.word	0x08011281
 80112bc:	08011281 	.word	0x08011281
 80112c0:	08011281 	.word	0x08011281
 80112c4:	08011411 	.word	0x08011411
 80112c8:	08011335 	.word	0x08011335
 80112cc:	080113f3 	.word	0x080113f3
 80112d0:	08011281 	.word	0x08011281
 80112d4:	08011281 	.word	0x08011281
 80112d8:	08011433 	.word	0x08011433
 80112dc:	08011281 	.word	0x08011281
 80112e0:	08011335 	.word	0x08011335
 80112e4:	08011281 	.word	0x08011281
 80112e8:	08011281 	.word	0x08011281
 80112ec:	080113fb 	.word	0x080113fb
 80112f0:	680b      	ldr	r3, [r1, #0]
 80112f2:	1d1a      	adds	r2, r3, #4
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	600a      	str	r2, [r1, #0]
 80112f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80112fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011300:	2301      	movs	r3, #1
 8011302:	e0a3      	b.n	801144c <_printf_i+0x1f4>
 8011304:	6825      	ldr	r5, [r4, #0]
 8011306:	6808      	ldr	r0, [r1, #0]
 8011308:	062e      	lsls	r6, r5, #24
 801130a:	f100 0304 	add.w	r3, r0, #4
 801130e:	d50a      	bpl.n	8011326 <_printf_i+0xce>
 8011310:	6805      	ldr	r5, [r0, #0]
 8011312:	600b      	str	r3, [r1, #0]
 8011314:	2d00      	cmp	r5, #0
 8011316:	da03      	bge.n	8011320 <_printf_i+0xc8>
 8011318:	232d      	movs	r3, #45	; 0x2d
 801131a:	426d      	negs	r5, r5
 801131c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011320:	485e      	ldr	r0, [pc, #376]	; (801149c <_printf_i+0x244>)
 8011322:	230a      	movs	r3, #10
 8011324:	e019      	b.n	801135a <_printf_i+0x102>
 8011326:	f015 0f40 	tst.w	r5, #64	; 0x40
 801132a:	6805      	ldr	r5, [r0, #0]
 801132c:	600b      	str	r3, [r1, #0]
 801132e:	bf18      	it	ne
 8011330:	b22d      	sxthne	r5, r5
 8011332:	e7ef      	b.n	8011314 <_printf_i+0xbc>
 8011334:	680b      	ldr	r3, [r1, #0]
 8011336:	6825      	ldr	r5, [r4, #0]
 8011338:	1d18      	adds	r0, r3, #4
 801133a:	6008      	str	r0, [r1, #0]
 801133c:	0628      	lsls	r0, r5, #24
 801133e:	d501      	bpl.n	8011344 <_printf_i+0xec>
 8011340:	681d      	ldr	r5, [r3, #0]
 8011342:	e002      	b.n	801134a <_printf_i+0xf2>
 8011344:	0669      	lsls	r1, r5, #25
 8011346:	d5fb      	bpl.n	8011340 <_printf_i+0xe8>
 8011348:	881d      	ldrh	r5, [r3, #0]
 801134a:	4854      	ldr	r0, [pc, #336]	; (801149c <_printf_i+0x244>)
 801134c:	2f6f      	cmp	r7, #111	; 0x6f
 801134e:	bf0c      	ite	eq
 8011350:	2308      	moveq	r3, #8
 8011352:	230a      	movne	r3, #10
 8011354:	2100      	movs	r1, #0
 8011356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801135a:	6866      	ldr	r6, [r4, #4]
 801135c:	60a6      	str	r6, [r4, #8]
 801135e:	2e00      	cmp	r6, #0
 8011360:	bfa2      	ittt	ge
 8011362:	6821      	ldrge	r1, [r4, #0]
 8011364:	f021 0104 	bicge.w	r1, r1, #4
 8011368:	6021      	strge	r1, [r4, #0]
 801136a:	b90d      	cbnz	r5, 8011370 <_printf_i+0x118>
 801136c:	2e00      	cmp	r6, #0
 801136e:	d04d      	beq.n	801140c <_printf_i+0x1b4>
 8011370:	4616      	mov	r6, r2
 8011372:	fbb5 f1f3 	udiv	r1, r5, r3
 8011376:	fb03 5711 	mls	r7, r3, r1, r5
 801137a:	5dc7      	ldrb	r7, [r0, r7]
 801137c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011380:	462f      	mov	r7, r5
 8011382:	42bb      	cmp	r3, r7
 8011384:	460d      	mov	r5, r1
 8011386:	d9f4      	bls.n	8011372 <_printf_i+0x11a>
 8011388:	2b08      	cmp	r3, #8
 801138a:	d10b      	bne.n	80113a4 <_printf_i+0x14c>
 801138c:	6823      	ldr	r3, [r4, #0]
 801138e:	07df      	lsls	r7, r3, #31
 8011390:	d508      	bpl.n	80113a4 <_printf_i+0x14c>
 8011392:	6923      	ldr	r3, [r4, #16]
 8011394:	6861      	ldr	r1, [r4, #4]
 8011396:	4299      	cmp	r1, r3
 8011398:	bfde      	ittt	le
 801139a:	2330      	movle	r3, #48	; 0x30
 801139c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80113a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80113a4:	1b92      	subs	r2, r2, r6
 80113a6:	6122      	str	r2, [r4, #16]
 80113a8:	f8cd a000 	str.w	sl, [sp]
 80113ac:	464b      	mov	r3, r9
 80113ae:	aa03      	add	r2, sp, #12
 80113b0:	4621      	mov	r1, r4
 80113b2:	4640      	mov	r0, r8
 80113b4:	f7ff fee2 	bl	801117c <_printf_common>
 80113b8:	3001      	adds	r0, #1
 80113ba:	d14c      	bne.n	8011456 <_printf_i+0x1fe>
 80113bc:	f04f 30ff 	mov.w	r0, #4294967295
 80113c0:	b004      	add	sp, #16
 80113c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c6:	4835      	ldr	r0, [pc, #212]	; (801149c <_printf_i+0x244>)
 80113c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80113cc:	6823      	ldr	r3, [r4, #0]
 80113ce:	680e      	ldr	r6, [r1, #0]
 80113d0:	061f      	lsls	r7, r3, #24
 80113d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80113d6:	600e      	str	r6, [r1, #0]
 80113d8:	d514      	bpl.n	8011404 <_printf_i+0x1ac>
 80113da:	07d9      	lsls	r1, r3, #31
 80113dc:	bf44      	itt	mi
 80113de:	f043 0320 	orrmi.w	r3, r3, #32
 80113e2:	6023      	strmi	r3, [r4, #0]
 80113e4:	b91d      	cbnz	r5, 80113ee <_printf_i+0x196>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	f023 0320 	bic.w	r3, r3, #32
 80113ec:	6023      	str	r3, [r4, #0]
 80113ee:	2310      	movs	r3, #16
 80113f0:	e7b0      	b.n	8011354 <_printf_i+0xfc>
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	f043 0320 	orr.w	r3, r3, #32
 80113f8:	6023      	str	r3, [r4, #0]
 80113fa:	2378      	movs	r3, #120	; 0x78
 80113fc:	4828      	ldr	r0, [pc, #160]	; (80114a0 <_printf_i+0x248>)
 80113fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011402:	e7e3      	b.n	80113cc <_printf_i+0x174>
 8011404:	065e      	lsls	r6, r3, #25
 8011406:	bf48      	it	mi
 8011408:	b2ad      	uxthmi	r5, r5
 801140a:	e7e6      	b.n	80113da <_printf_i+0x182>
 801140c:	4616      	mov	r6, r2
 801140e:	e7bb      	b.n	8011388 <_printf_i+0x130>
 8011410:	680b      	ldr	r3, [r1, #0]
 8011412:	6826      	ldr	r6, [r4, #0]
 8011414:	6960      	ldr	r0, [r4, #20]
 8011416:	1d1d      	adds	r5, r3, #4
 8011418:	600d      	str	r5, [r1, #0]
 801141a:	0635      	lsls	r5, r6, #24
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	d501      	bpl.n	8011424 <_printf_i+0x1cc>
 8011420:	6018      	str	r0, [r3, #0]
 8011422:	e002      	b.n	801142a <_printf_i+0x1d2>
 8011424:	0671      	lsls	r1, r6, #25
 8011426:	d5fb      	bpl.n	8011420 <_printf_i+0x1c8>
 8011428:	8018      	strh	r0, [r3, #0]
 801142a:	2300      	movs	r3, #0
 801142c:	6123      	str	r3, [r4, #16]
 801142e:	4616      	mov	r6, r2
 8011430:	e7ba      	b.n	80113a8 <_printf_i+0x150>
 8011432:	680b      	ldr	r3, [r1, #0]
 8011434:	1d1a      	adds	r2, r3, #4
 8011436:	600a      	str	r2, [r1, #0]
 8011438:	681e      	ldr	r6, [r3, #0]
 801143a:	6862      	ldr	r2, [r4, #4]
 801143c:	2100      	movs	r1, #0
 801143e:	4630      	mov	r0, r6
 8011440:	f7ee fee6 	bl	8000210 <memchr>
 8011444:	b108      	cbz	r0, 801144a <_printf_i+0x1f2>
 8011446:	1b80      	subs	r0, r0, r6
 8011448:	6060      	str	r0, [r4, #4]
 801144a:	6863      	ldr	r3, [r4, #4]
 801144c:	6123      	str	r3, [r4, #16]
 801144e:	2300      	movs	r3, #0
 8011450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011454:	e7a8      	b.n	80113a8 <_printf_i+0x150>
 8011456:	6923      	ldr	r3, [r4, #16]
 8011458:	4632      	mov	r2, r6
 801145a:	4649      	mov	r1, r9
 801145c:	4640      	mov	r0, r8
 801145e:	47d0      	blx	sl
 8011460:	3001      	adds	r0, #1
 8011462:	d0ab      	beq.n	80113bc <_printf_i+0x164>
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	079b      	lsls	r3, r3, #30
 8011468:	d413      	bmi.n	8011492 <_printf_i+0x23a>
 801146a:	68e0      	ldr	r0, [r4, #12]
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	4298      	cmp	r0, r3
 8011470:	bfb8      	it	lt
 8011472:	4618      	movlt	r0, r3
 8011474:	e7a4      	b.n	80113c0 <_printf_i+0x168>
 8011476:	2301      	movs	r3, #1
 8011478:	4632      	mov	r2, r6
 801147a:	4649      	mov	r1, r9
 801147c:	4640      	mov	r0, r8
 801147e:	47d0      	blx	sl
 8011480:	3001      	adds	r0, #1
 8011482:	d09b      	beq.n	80113bc <_printf_i+0x164>
 8011484:	3501      	adds	r5, #1
 8011486:	68e3      	ldr	r3, [r4, #12]
 8011488:	9903      	ldr	r1, [sp, #12]
 801148a:	1a5b      	subs	r3, r3, r1
 801148c:	42ab      	cmp	r3, r5
 801148e:	dcf2      	bgt.n	8011476 <_printf_i+0x21e>
 8011490:	e7eb      	b.n	801146a <_printf_i+0x212>
 8011492:	2500      	movs	r5, #0
 8011494:	f104 0619 	add.w	r6, r4, #25
 8011498:	e7f5      	b.n	8011486 <_printf_i+0x22e>
 801149a:	bf00      	nop
 801149c:	08028f76 	.word	0x08028f76
 80114a0:	08028f87 	.word	0x08028f87

080114a4 <_scanf_float>:
 80114a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a8:	b087      	sub	sp, #28
 80114aa:	4617      	mov	r7, r2
 80114ac:	9303      	str	r3, [sp, #12]
 80114ae:	688b      	ldr	r3, [r1, #8]
 80114b0:	1e5a      	subs	r2, r3, #1
 80114b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80114b6:	bf83      	ittte	hi
 80114b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80114bc:	195b      	addhi	r3, r3, r5
 80114be:	9302      	strhi	r3, [sp, #8]
 80114c0:	2300      	movls	r3, #0
 80114c2:	bf86      	itte	hi
 80114c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80114c8:	608b      	strhi	r3, [r1, #8]
 80114ca:	9302      	strls	r3, [sp, #8]
 80114cc:	680b      	ldr	r3, [r1, #0]
 80114ce:	468b      	mov	fp, r1
 80114d0:	2500      	movs	r5, #0
 80114d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80114d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80114da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80114de:	4680      	mov	r8, r0
 80114e0:	460c      	mov	r4, r1
 80114e2:	465e      	mov	r6, fp
 80114e4:	46aa      	mov	sl, r5
 80114e6:	46a9      	mov	r9, r5
 80114e8:	9501      	str	r5, [sp, #4]
 80114ea:	68a2      	ldr	r2, [r4, #8]
 80114ec:	b152      	cbz	r2, 8011504 <_scanf_float+0x60>
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	2b4e      	cmp	r3, #78	; 0x4e
 80114f4:	d864      	bhi.n	80115c0 <_scanf_float+0x11c>
 80114f6:	2b40      	cmp	r3, #64	; 0x40
 80114f8:	d83c      	bhi.n	8011574 <_scanf_float+0xd0>
 80114fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80114fe:	b2c8      	uxtb	r0, r1
 8011500:	280e      	cmp	r0, #14
 8011502:	d93a      	bls.n	801157a <_scanf_float+0xd6>
 8011504:	f1b9 0f00 	cmp.w	r9, #0
 8011508:	d003      	beq.n	8011512 <_scanf_float+0x6e>
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011516:	f1ba 0f01 	cmp.w	sl, #1
 801151a:	f200 8113 	bhi.w	8011744 <_scanf_float+0x2a0>
 801151e:	455e      	cmp	r6, fp
 8011520:	f200 8105 	bhi.w	801172e <_scanf_float+0x28a>
 8011524:	2501      	movs	r5, #1
 8011526:	4628      	mov	r0, r5
 8011528:	b007      	add	sp, #28
 801152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801152e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011532:	2a0d      	cmp	r2, #13
 8011534:	d8e6      	bhi.n	8011504 <_scanf_float+0x60>
 8011536:	a101      	add	r1, pc, #4	; (adr r1, 801153c <_scanf_float+0x98>)
 8011538:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801153c:	0801167b 	.word	0x0801167b
 8011540:	08011505 	.word	0x08011505
 8011544:	08011505 	.word	0x08011505
 8011548:	08011505 	.word	0x08011505
 801154c:	080116db 	.word	0x080116db
 8011550:	080116b3 	.word	0x080116b3
 8011554:	08011505 	.word	0x08011505
 8011558:	08011505 	.word	0x08011505
 801155c:	08011689 	.word	0x08011689
 8011560:	08011505 	.word	0x08011505
 8011564:	08011505 	.word	0x08011505
 8011568:	08011505 	.word	0x08011505
 801156c:	08011505 	.word	0x08011505
 8011570:	08011641 	.word	0x08011641
 8011574:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011578:	e7db      	b.n	8011532 <_scanf_float+0x8e>
 801157a:	290e      	cmp	r1, #14
 801157c:	d8c2      	bhi.n	8011504 <_scanf_float+0x60>
 801157e:	a001      	add	r0, pc, #4	; (adr r0, 8011584 <_scanf_float+0xe0>)
 8011580:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011584:	08011633 	.word	0x08011633
 8011588:	08011505 	.word	0x08011505
 801158c:	08011633 	.word	0x08011633
 8011590:	080116c7 	.word	0x080116c7
 8011594:	08011505 	.word	0x08011505
 8011598:	080115e1 	.word	0x080115e1
 801159c:	0801161d 	.word	0x0801161d
 80115a0:	0801161d 	.word	0x0801161d
 80115a4:	0801161d 	.word	0x0801161d
 80115a8:	0801161d 	.word	0x0801161d
 80115ac:	0801161d 	.word	0x0801161d
 80115b0:	0801161d 	.word	0x0801161d
 80115b4:	0801161d 	.word	0x0801161d
 80115b8:	0801161d 	.word	0x0801161d
 80115bc:	0801161d 	.word	0x0801161d
 80115c0:	2b6e      	cmp	r3, #110	; 0x6e
 80115c2:	d809      	bhi.n	80115d8 <_scanf_float+0x134>
 80115c4:	2b60      	cmp	r3, #96	; 0x60
 80115c6:	d8b2      	bhi.n	801152e <_scanf_float+0x8a>
 80115c8:	2b54      	cmp	r3, #84	; 0x54
 80115ca:	d077      	beq.n	80116bc <_scanf_float+0x218>
 80115cc:	2b59      	cmp	r3, #89	; 0x59
 80115ce:	d199      	bne.n	8011504 <_scanf_float+0x60>
 80115d0:	2d07      	cmp	r5, #7
 80115d2:	d197      	bne.n	8011504 <_scanf_float+0x60>
 80115d4:	2508      	movs	r5, #8
 80115d6:	e029      	b.n	801162c <_scanf_float+0x188>
 80115d8:	2b74      	cmp	r3, #116	; 0x74
 80115da:	d06f      	beq.n	80116bc <_scanf_float+0x218>
 80115dc:	2b79      	cmp	r3, #121	; 0x79
 80115de:	e7f6      	b.n	80115ce <_scanf_float+0x12a>
 80115e0:	6821      	ldr	r1, [r4, #0]
 80115e2:	05c8      	lsls	r0, r1, #23
 80115e4:	d51a      	bpl.n	801161c <_scanf_float+0x178>
 80115e6:	9b02      	ldr	r3, [sp, #8]
 80115e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80115ec:	6021      	str	r1, [r4, #0]
 80115ee:	f109 0901 	add.w	r9, r9, #1
 80115f2:	b11b      	cbz	r3, 80115fc <_scanf_float+0x158>
 80115f4:	3b01      	subs	r3, #1
 80115f6:	3201      	adds	r2, #1
 80115f8:	9302      	str	r3, [sp, #8]
 80115fa:	60a2      	str	r2, [r4, #8]
 80115fc:	68a3      	ldr	r3, [r4, #8]
 80115fe:	3b01      	subs	r3, #1
 8011600:	60a3      	str	r3, [r4, #8]
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	3301      	adds	r3, #1
 8011606:	6123      	str	r3, [r4, #16]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	3b01      	subs	r3, #1
 801160c:	2b00      	cmp	r3, #0
 801160e:	607b      	str	r3, [r7, #4]
 8011610:	f340 8084 	ble.w	801171c <_scanf_float+0x278>
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	3301      	adds	r3, #1
 8011618:	603b      	str	r3, [r7, #0]
 801161a:	e766      	b.n	80114ea <_scanf_float+0x46>
 801161c:	eb1a 0f05 	cmn.w	sl, r5
 8011620:	f47f af70 	bne.w	8011504 <_scanf_float+0x60>
 8011624:	6822      	ldr	r2, [r4, #0]
 8011626:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801162a:	6022      	str	r2, [r4, #0]
 801162c:	f806 3b01 	strb.w	r3, [r6], #1
 8011630:	e7e4      	b.n	80115fc <_scanf_float+0x158>
 8011632:	6822      	ldr	r2, [r4, #0]
 8011634:	0610      	lsls	r0, r2, #24
 8011636:	f57f af65 	bpl.w	8011504 <_scanf_float+0x60>
 801163a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801163e:	e7f4      	b.n	801162a <_scanf_float+0x186>
 8011640:	f1ba 0f00 	cmp.w	sl, #0
 8011644:	d10e      	bne.n	8011664 <_scanf_float+0x1c0>
 8011646:	f1b9 0f00 	cmp.w	r9, #0
 801164a:	d10e      	bne.n	801166a <_scanf_float+0x1c6>
 801164c:	6822      	ldr	r2, [r4, #0]
 801164e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011652:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011656:	d108      	bne.n	801166a <_scanf_float+0x1c6>
 8011658:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801165c:	6022      	str	r2, [r4, #0]
 801165e:	f04f 0a01 	mov.w	sl, #1
 8011662:	e7e3      	b.n	801162c <_scanf_float+0x188>
 8011664:	f1ba 0f02 	cmp.w	sl, #2
 8011668:	d055      	beq.n	8011716 <_scanf_float+0x272>
 801166a:	2d01      	cmp	r5, #1
 801166c:	d002      	beq.n	8011674 <_scanf_float+0x1d0>
 801166e:	2d04      	cmp	r5, #4
 8011670:	f47f af48 	bne.w	8011504 <_scanf_float+0x60>
 8011674:	3501      	adds	r5, #1
 8011676:	b2ed      	uxtb	r5, r5
 8011678:	e7d8      	b.n	801162c <_scanf_float+0x188>
 801167a:	f1ba 0f01 	cmp.w	sl, #1
 801167e:	f47f af41 	bne.w	8011504 <_scanf_float+0x60>
 8011682:	f04f 0a02 	mov.w	sl, #2
 8011686:	e7d1      	b.n	801162c <_scanf_float+0x188>
 8011688:	b97d      	cbnz	r5, 80116aa <_scanf_float+0x206>
 801168a:	f1b9 0f00 	cmp.w	r9, #0
 801168e:	f47f af3c 	bne.w	801150a <_scanf_float+0x66>
 8011692:	6822      	ldr	r2, [r4, #0]
 8011694:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011698:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801169c:	f47f af39 	bne.w	8011512 <_scanf_float+0x6e>
 80116a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80116a4:	6022      	str	r2, [r4, #0]
 80116a6:	2501      	movs	r5, #1
 80116a8:	e7c0      	b.n	801162c <_scanf_float+0x188>
 80116aa:	2d03      	cmp	r5, #3
 80116ac:	d0e2      	beq.n	8011674 <_scanf_float+0x1d0>
 80116ae:	2d05      	cmp	r5, #5
 80116b0:	e7de      	b.n	8011670 <_scanf_float+0x1cc>
 80116b2:	2d02      	cmp	r5, #2
 80116b4:	f47f af26 	bne.w	8011504 <_scanf_float+0x60>
 80116b8:	2503      	movs	r5, #3
 80116ba:	e7b7      	b.n	801162c <_scanf_float+0x188>
 80116bc:	2d06      	cmp	r5, #6
 80116be:	f47f af21 	bne.w	8011504 <_scanf_float+0x60>
 80116c2:	2507      	movs	r5, #7
 80116c4:	e7b2      	b.n	801162c <_scanf_float+0x188>
 80116c6:	6822      	ldr	r2, [r4, #0]
 80116c8:	0591      	lsls	r1, r2, #22
 80116ca:	f57f af1b 	bpl.w	8011504 <_scanf_float+0x60>
 80116ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80116d2:	6022      	str	r2, [r4, #0]
 80116d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80116d8:	e7a8      	b.n	801162c <_scanf_float+0x188>
 80116da:	6822      	ldr	r2, [r4, #0]
 80116dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80116e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80116e4:	d006      	beq.n	80116f4 <_scanf_float+0x250>
 80116e6:	0550      	lsls	r0, r2, #21
 80116e8:	f57f af0c 	bpl.w	8011504 <_scanf_float+0x60>
 80116ec:	f1b9 0f00 	cmp.w	r9, #0
 80116f0:	f43f af0f 	beq.w	8011512 <_scanf_float+0x6e>
 80116f4:	0591      	lsls	r1, r2, #22
 80116f6:	bf58      	it	pl
 80116f8:	9901      	ldrpl	r1, [sp, #4]
 80116fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80116fe:	bf58      	it	pl
 8011700:	eba9 0101 	subpl.w	r1, r9, r1
 8011704:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011708:	bf58      	it	pl
 801170a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801170e:	6022      	str	r2, [r4, #0]
 8011710:	f04f 0900 	mov.w	r9, #0
 8011714:	e78a      	b.n	801162c <_scanf_float+0x188>
 8011716:	f04f 0a03 	mov.w	sl, #3
 801171a:	e787      	b.n	801162c <_scanf_float+0x188>
 801171c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011720:	4639      	mov	r1, r7
 8011722:	4640      	mov	r0, r8
 8011724:	4798      	blx	r3
 8011726:	2800      	cmp	r0, #0
 8011728:	f43f aedf 	beq.w	80114ea <_scanf_float+0x46>
 801172c:	e6ea      	b.n	8011504 <_scanf_float+0x60>
 801172e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011736:	463a      	mov	r2, r7
 8011738:	4640      	mov	r0, r8
 801173a:	4798      	blx	r3
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	3b01      	subs	r3, #1
 8011740:	6123      	str	r3, [r4, #16]
 8011742:	e6ec      	b.n	801151e <_scanf_float+0x7a>
 8011744:	1e6b      	subs	r3, r5, #1
 8011746:	2b06      	cmp	r3, #6
 8011748:	d825      	bhi.n	8011796 <_scanf_float+0x2f2>
 801174a:	2d02      	cmp	r5, #2
 801174c:	d836      	bhi.n	80117bc <_scanf_float+0x318>
 801174e:	455e      	cmp	r6, fp
 8011750:	f67f aee8 	bls.w	8011524 <_scanf_float+0x80>
 8011754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011758:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801175c:	463a      	mov	r2, r7
 801175e:	4640      	mov	r0, r8
 8011760:	4798      	blx	r3
 8011762:	6923      	ldr	r3, [r4, #16]
 8011764:	3b01      	subs	r3, #1
 8011766:	6123      	str	r3, [r4, #16]
 8011768:	e7f1      	b.n	801174e <_scanf_float+0x2aa>
 801176a:	9802      	ldr	r0, [sp, #8]
 801176c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011770:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011774:	9002      	str	r0, [sp, #8]
 8011776:	463a      	mov	r2, r7
 8011778:	4640      	mov	r0, r8
 801177a:	4798      	blx	r3
 801177c:	6923      	ldr	r3, [r4, #16]
 801177e:	3b01      	subs	r3, #1
 8011780:	6123      	str	r3, [r4, #16]
 8011782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011786:	fa5f fa8a 	uxtb.w	sl, sl
 801178a:	f1ba 0f02 	cmp.w	sl, #2
 801178e:	d1ec      	bne.n	801176a <_scanf_float+0x2c6>
 8011790:	3d03      	subs	r5, #3
 8011792:	b2ed      	uxtb	r5, r5
 8011794:	1b76      	subs	r6, r6, r5
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	05da      	lsls	r2, r3, #23
 801179a:	d52f      	bpl.n	80117fc <_scanf_float+0x358>
 801179c:	055b      	lsls	r3, r3, #21
 801179e:	d510      	bpl.n	80117c2 <_scanf_float+0x31e>
 80117a0:	455e      	cmp	r6, fp
 80117a2:	f67f aebf 	bls.w	8011524 <_scanf_float+0x80>
 80117a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80117ae:	463a      	mov	r2, r7
 80117b0:	4640      	mov	r0, r8
 80117b2:	4798      	blx	r3
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	6123      	str	r3, [r4, #16]
 80117ba:	e7f1      	b.n	80117a0 <_scanf_float+0x2fc>
 80117bc:	46aa      	mov	sl, r5
 80117be:	9602      	str	r6, [sp, #8]
 80117c0:	e7df      	b.n	8011782 <_scanf_float+0x2de>
 80117c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80117c6:	6923      	ldr	r3, [r4, #16]
 80117c8:	2965      	cmp	r1, #101	; 0x65
 80117ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80117ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80117d2:	6123      	str	r3, [r4, #16]
 80117d4:	d00c      	beq.n	80117f0 <_scanf_float+0x34c>
 80117d6:	2945      	cmp	r1, #69	; 0x45
 80117d8:	d00a      	beq.n	80117f0 <_scanf_float+0x34c>
 80117da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117de:	463a      	mov	r2, r7
 80117e0:	4640      	mov	r0, r8
 80117e2:	4798      	blx	r3
 80117e4:	6923      	ldr	r3, [r4, #16]
 80117e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80117ea:	3b01      	subs	r3, #1
 80117ec:	1eb5      	subs	r5, r6, #2
 80117ee:	6123      	str	r3, [r4, #16]
 80117f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117f4:	463a      	mov	r2, r7
 80117f6:	4640      	mov	r0, r8
 80117f8:	4798      	blx	r3
 80117fa:	462e      	mov	r6, r5
 80117fc:	6825      	ldr	r5, [r4, #0]
 80117fe:	f015 0510 	ands.w	r5, r5, #16
 8011802:	d158      	bne.n	80118b6 <_scanf_float+0x412>
 8011804:	7035      	strb	r5, [r6, #0]
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801180c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011810:	d11c      	bne.n	801184c <_scanf_float+0x3a8>
 8011812:	9b01      	ldr	r3, [sp, #4]
 8011814:	454b      	cmp	r3, r9
 8011816:	eba3 0209 	sub.w	r2, r3, r9
 801181a:	d124      	bne.n	8011866 <_scanf_float+0x3c2>
 801181c:	2200      	movs	r2, #0
 801181e:	4659      	mov	r1, fp
 8011820:	4640      	mov	r0, r8
 8011822:	f000 fe9b 	bl	801255c <_strtod_r>
 8011826:	9b03      	ldr	r3, [sp, #12]
 8011828:	6821      	ldr	r1, [r4, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f011 0f02 	tst.w	r1, #2
 8011830:	ec57 6b10 	vmov	r6, r7, d0
 8011834:	f103 0204 	add.w	r2, r3, #4
 8011838:	d020      	beq.n	801187c <_scanf_float+0x3d8>
 801183a:	9903      	ldr	r1, [sp, #12]
 801183c:	600a      	str	r2, [r1, #0]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	e9c3 6700 	strd	r6, r7, [r3]
 8011844:	68e3      	ldr	r3, [r4, #12]
 8011846:	3301      	adds	r3, #1
 8011848:	60e3      	str	r3, [r4, #12]
 801184a:	e66c      	b.n	8011526 <_scanf_float+0x82>
 801184c:	9b04      	ldr	r3, [sp, #16]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0e4      	beq.n	801181c <_scanf_float+0x378>
 8011852:	9905      	ldr	r1, [sp, #20]
 8011854:	230a      	movs	r3, #10
 8011856:	462a      	mov	r2, r5
 8011858:	3101      	adds	r1, #1
 801185a:	4640      	mov	r0, r8
 801185c:	f000 ff70 	bl	8012740 <_strtol_r>
 8011860:	9b04      	ldr	r3, [sp, #16]
 8011862:	9e05      	ldr	r6, [sp, #20]
 8011864:	1ac2      	subs	r2, r0, r3
 8011866:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801186a:	429e      	cmp	r6, r3
 801186c:	bf28      	it	cs
 801186e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011872:	4912      	ldr	r1, [pc, #72]	; (80118bc <_scanf_float+0x418>)
 8011874:	4630      	mov	r0, r6
 8011876:	f000 f82b 	bl	80118d0 <siprintf>
 801187a:	e7cf      	b.n	801181c <_scanf_float+0x378>
 801187c:	f011 0f04 	tst.w	r1, #4
 8011880:	9903      	ldr	r1, [sp, #12]
 8011882:	600a      	str	r2, [r1, #0]
 8011884:	d1db      	bne.n	801183e <_scanf_float+0x39a>
 8011886:	f8d3 8000 	ldr.w	r8, [r3]
 801188a:	ee10 2a10 	vmov	r2, s0
 801188e:	ee10 0a10 	vmov	r0, s0
 8011892:	463b      	mov	r3, r7
 8011894:	4639      	mov	r1, r7
 8011896:	f7ef f961 	bl	8000b5c <__aeabi_dcmpun>
 801189a:	b128      	cbz	r0, 80118a8 <_scanf_float+0x404>
 801189c:	4808      	ldr	r0, [pc, #32]	; (80118c0 <_scanf_float+0x41c>)
 801189e:	f000 f811 	bl	80118c4 <nanf>
 80118a2:	ed88 0a00 	vstr	s0, [r8]
 80118a6:	e7cd      	b.n	8011844 <_scanf_float+0x3a0>
 80118a8:	4630      	mov	r0, r6
 80118aa:	4639      	mov	r1, r7
 80118ac:	f7ef f9b4 	bl	8000c18 <__aeabi_d2f>
 80118b0:	f8c8 0000 	str.w	r0, [r8]
 80118b4:	e7c6      	b.n	8011844 <_scanf_float+0x3a0>
 80118b6:	2500      	movs	r5, #0
 80118b8:	e635      	b.n	8011526 <_scanf_float+0x82>
 80118ba:	bf00      	nop
 80118bc:	08028f98 	.word	0x08028f98
 80118c0:	080290a3 	.word	0x080290a3

080118c4 <nanf>:
 80118c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80118cc <nanf+0x8>
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	7fc00000 	.word	0x7fc00000

080118d0 <siprintf>:
 80118d0:	b40e      	push	{r1, r2, r3}
 80118d2:	b500      	push	{lr}
 80118d4:	b09c      	sub	sp, #112	; 0x70
 80118d6:	ab1d      	add	r3, sp, #116	; 0x74
 80118d8:	9002      	str	r0, [sp, #8]
 80118da:	9006      	str	r0, [sp, #24]
 80118dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80118e0:	4809      	ldr	r0, [pc, #36]	; (8011908 <siprintf+0x38>)
 80118e2:	9107      	str	r1, [sp, #28]
 80118e4:	9104      	str	r1, [sp, #16]
 80118e6:	4909      	ldr	r1, [pc, #36]	; (801190c <siprintf+0x3c>)
 80118e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ec:	9105      	str	r1, [sp, #20]
 80118ee:	6800      	ldr	r0, [r0, #0]
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	a902      	add	r1, sp, #8
 80118f4:	f002 ff46 	bl	8014784 <_svfiprintf_r>
 80118f8:	9b02      	ldr	r3, [sp, #8]
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	b01c      	add	sp, #112	; 0x70
 8011900:	f85d eb04 	ldr.w	lr, [sp], #4
 8011904:	b003      	add	sp, #12
 8011906:	4770      	bx	lr
 8011908:	20000040 	.word	0x20000040
 801190c:	ffff0208 	.word	0xffff0208

08011910 <sulp>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	4604      	mov	r4, r0
 8011914:	460d      	mov	r5, r1
 8011916:	ec45 4b10 	vmov	d0, r4, r5
 801191a:	4616      	mov	r6, r2
 801191c:	f002 fcce 	bl	80142bc <__ulp>
 8011920:	ec51 0b10 	vmov	r0, r1, d0
 8011924:	b17e      	cbz	r6, 8011946 <sulp+0x36>
 8011926:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801192a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801192e:	2b00      	cmp	r3, #0
 8011930:	dd09      	ble.n	8011946 <sulp+0x36>
 8011932:	051b      	lsls	r3, r3, #20
 8011934:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011938:	2400      	movs	r4, #0
 801193a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801193e:	4622      	mov	r2, r4
 8011940:	462b      	mov	r3, r5
 8011942:	f7ee fe71 	bl	8000628 <__aeabi_dmul>
 8011946:	bd70      	pop	{r4, r5, r6, pc}

08011948 <_strtod_l>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	b0a3      	sub	sp, #140	; 0x8c
 801194e:	461f      	mov	r7, r3
 8011950:	2300      	movs	r3, #0
 8011952:	931e      	str	r3, [sp, #120]	; 0x78
 8011954:	4ba4      	ldr	r3, [pc, #656]	; (8011be8 <_strtod_l+0x2a0>)
 8011956:	9219      	str	r2, [sp, #100]	; 0x64
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	9307      	str	r3, [sp, #28]
 801195c:	4604      	mov	r4, r0
 801195e:	4618      	mov	r0, r3
 8011960:	4688      	mov	r8, r1
 8011962:	f7ee fc47 	bl	80001f4 <strlen>
 8011966:	f04f 0a00 	mov.w	sl, #0
 801196a:	4605      	mov	r5, r0
 801196c:	f04f 0b00 	mov.w	fp, #0
 8011970:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011976:	781a      	ldrb	r2, [r3, #0]
 8011978:	2a2b      	cmp	r2, #43	; 0x2b
 801197a:	d04c      	beq.n	8011a16 <_strtod_l+0xce>
 801197c:	d839      	bhi.n	80119f2 <_strtod_l+0xaa>
 801197e:	2a0d      	cmp	r2, #13
 8011980:	d832      	bhi.n	80119e8 <_strtod_l+0xa0>
 8011982:	2a08      	cmp	r2, #8
 8011984:	d832      	bhi.n	80119ec <_strtod_l+0xa4>
 8011986:	2a00      	cmp	r2, #0
 8011988:	d03c      	beq.n	8011a04 <_strtod_l+0xbc>
 801198a:	2300      	movs	r3, #0
 801198c:	930e      	str	r3, [sp, #56]	; 0x38
 801198e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011990:	7833      	ldrb	r3, [r6, #0]
 8011992:	2b30      	cmp	r3, #48	; 0x30
 8011994:	f040 80b4 	bne.w	8011b00 <_strtod_l+0x1b8>
 8011998:	7873      	ldrb	r3, [r6, #1]
 801199a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801199e:	2b58      	cmp	r3, #88	; 0x58
 80119a0:	d16c      	bne.n	8011a7c <_strtod_l+0x134>
 80119a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	ab1e      	add	r3, sp, #120	; 0x78
 80119a8:	9702      	str	r7, [sp, #8]
 80119aa:	9300      	str	r3, [sp, #0]
 80119ac:	4a8f      	ldr	r2, [pc, #572]	; (8011bec <_strtod_l+0x2a4>)
 80119ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80119b0:	a91d      	add	r1, sp, #116	; 0x74
 80119b2:	4620      	mov	r0, r4
 80119b4:	f001 fde2 	bl	801357c <__gethex>
 80119b8:	f010 0707 	ands.w	r7, r0, #7
 80119bc:	4605      	mov	r5, r0
 80119be:	d005      	beq.n	80119cc <_strtod_l+0x84>
 80119c0:	2f06      	cmp	r7, #6
 80119c2:	d12a      	bne.n	8011a1a <_strtod_l+0xd2>
 80119c4:	3601      	adds	r6, #1
 80119c6:	2300      	movs	r3, #0
 80119c8:	961d      	str	r6, [sp, #116]	; 0x74
 80119ca:	930e      	str	r3, [sp, #56]	; 0x38
 80119cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f040 8596 	bne.w	8012500 <_strtod_l+0xbb8>
 80119d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119d6:	b1db      	cbz	r3, 8011a10 <_strtod_l+0xc8>
 80119d8:	4652      	mov	r2, sl
 80119da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80119de:	ec43 2b10 	vmov	d0, r2, r3
 80119e2:	b023      	add	sp, #140	; 0x8c
 80119e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e8:	2a20      	cmp	r2, #32
 80119ea:	d1ce      	bne.n	801198a <_strtod_l+0x42>
 80119ec:	3301      	adds	r3, #1
 80119ee:	931d      	str	r3, [sp, #116]	; 0x74
 80119f0:	e7c0      	b.n	8011974 <_strtod_l+0x2c>
 80119f2:	2a2d      	cmp	r2, #45	; 0x2d
 80119f4:	d1c9      	bne.n	801198a <_strtod_l+0x42>
 80119f6:	2201      	movs	r2, #1
 80119f8:	920e      	str	r2, [sp, #56]	; 0x38
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	921d      	str	r2, [sp, #116]	; 0x74
 80119fe:	785b      	ldrb	r3, [r3, #1]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1c4      	bne.n	801198e <_strtod_l+0x46>
 8011a04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f040 8576 	bne.w	80124fc <_strtod_l+0xbb4>
 8011a10:	4652      	mov	r2, sl
 8011a12:	465b      	mov	r3, fp
 8011a14:	e7e3      	b.n	80119de <_strtod_l+0x96>
 8011a16:	2200      	movs	r2, #0
 8011a18:	e7ee      	b.n	80119f8 <_strtod_l+0xb0>
 8011a1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011a1c:	b13a      	cbz	r2, 8011a2e <_strtod_l+0xe6>
 8011a1e:	2135      	movs	r1, #53	; 0x35
 8011a20:	a820      	add	r0, sp, #128	; 0x80
 8011a22:	f002 fd56 	bl	80144d2 <__copybits>
 8011a26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f002 f91b 	bl	8013c64 <_Bfree>
 8011a2e:	3f01      	subs	r7, #1
 8011a30:	2f05      	cmp	r7, #5
 8011a32:	d807      	bhi.n	8011a44 <_strtod_l+0xfc>
 8011a34:	e8df f007 	tbb	[pc, r7]
 8011a38:	1d180b0e 	.word	0x1d180b0e
 8011a3c:	030e      	.short	0x030e
 8011a3e:	f04f 0b00 	mov.w	fp, #0
 8011a42:	46da      	mov	sl, fp
 8011a44:	0728      	lsls	r0, r5, #28
 8011a46:	d5c1      	bpl.n	80119cc <_strtod_l+0x84>
 8011a48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011a4c:	e7be      	b.n	80119cc <_strtod_l+0x84>
 8011a4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011a52:	e7f7      	b.n	8011a44 <_strtod_l+0xfc>
 8011a54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011a58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011a5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011a62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a66:	e7ed      	b.n	8011a44 <_strtod_l+0xfc>
 8011a68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011bf0 <_strtod_l+0x2a8>
 8011a6c:	f04f 0a00 	mov.w	sl, #0
 8011a70:	e7e8      	b.n	8011a44 <_strtod_l+0xfc>
 8011a72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011a76:	f04f 3aff 	mov.w	sl, #4294967295
 8011a7a:	e7e3      	b.n	8011a44 <_strtod_l+0xfc>
 8011a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a7e:	1c5a      	adds	r2, r3, #1
 8011a80:	921d      	str	r2, [sp, #116]	; 0x74
 8011a82:	785b      	ldrb	r3, [r3, #1]
 8011a84:	2b30      	cmp	r3, #48	; 0x30
 8011a86:	d0f9      	beq.n	8011a7c <_strtod_l+0x134>
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d09f      	beq.n	80119cc <_strtod_l+0x84>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	f04f 0900 	mov.w	r9, #0
 8011a92:	9304      	str	r3, [sp, #16]
 8011a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a96:	930a      	str	r3, [sp, #40]	; 0x28
 8011a98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011a9c:	464f      	mov	r7, r9
 8011a9e:	220a      	movs	r2, #10
 8011aa0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011aa2:	7806      	ldrb	r6, [r0, #0]
 8011aa4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011aa8:	b2d9      	uxtb	r1, r3
 8011aaa:	2909      	cmp	r1, #9
 8011aac:	d92a      	bls.n	8011b04 <_strtod_l+0x1bc>
 8011aae:	9907      	ldr	r1, [sp, #28]
 8011ab0:	462a      	mov	r2, r5
 8011ab2:	f003 f8d9 	bl	8014c68 <strncmp>
 8011ab6:	b398      	cbz	r0, 8011b20 <_strtod_l+0x1d8>
 8011ab8:	2000      	movs	r0, #0
 8011aba:	4633      	mov	r3, r6
 8011abc:	463d      	mov	r5, r7
 8011abe:	9007      	str	r0, [sp, #28]
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	2b65      	cmp	r3, #101	; 0x65
 8011ac4:	d001      	beq.n	8011aca <_strtod_l+0x182>
 8011ac6:	2b45      	cmp	r3, #69	; 0x45
 8011ac8:	d118      	bne.n	8011afc <_strtod_l+0x1b4>
 8011aca:	b91d      	cbnz	r5, 8011ad4 <_strtod_l+0x18c>
 8011acc:	9b04      	ldr	r3, [sp, #16]
 8011ace:	4303      	orrs	r3, r0
 8011ad0:	d098      	beq.n	8011a04 <_strtod_l+0xbc>
 8011ad2:	2500      	movs	r5, #0
 8011ad4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011ad8:	f108 0301 	add.w	r3, r8, #1
 8011adc:	931d      	str	r3, [sp, #116]	; 0x74
 8011ade:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011ae2:	2b2b      	cmp	r3, #43	; 0x2b
 8011ae4:	d075      	beq.n	8011bd2 <_strtod_l+0x28a>
 8011ae6:	2b2d      	cmp	r3, #45	; 0x2d
 8011ae8:	d07b      	beq.n	8011be2 <_strtod_l+0x29a>
 8011aea:	f04f 0c00 	mov.w	ip, #0
 8011aee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011af2:	2909      	cmp	r1, #9
 8011af4:	f240 8082 	bls.w	8011bfc <_strtod_l+0x2b4>
 8011af8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011afc:	2600      	movs	r6, #0
 8011afe:	e09d      	b.n	8011c3c <_strtod_l+0x2f4>
 8011b00:	2300      	movs	r3, #0
 8011b02:	e7c4      	b.n	8011a8e <_strtod_l+0x146>
 8011b04:	2f08      	cmp	r7, #8
 8011b06:	bfd8      	it	le
 8011b08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011b0a:	f100 0001 	add.w	r0, r0, #1
 8011b0e:	bfda      	itte	le
 8011b10:	fb02 3301 	mlale	r3, r2, r1, r3
 8011b14:	9309      	strle	r3, [sp, #36]	; 0x24
 8011b16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011b1a:	3701      	adds	r7, #1
 8011b1c:	901d      	str	r0, [sp, #116]	; 0x74
 8011b1e:	e7bf      	b.n	8011aa0 <_strtod_l+0x158>
 8011b20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b22:	195a      	adds	r2, r3, r5
 8011b24:	921d      	str	r2, [sp, #116]	; 0x74
 8011b26:	5d5b      	ldrb	r3, [r3, r5]
 8011b28:	2f00      	cmp	r7, #0
 8011b2a:	d037      	beq.n	8011b9c <_strtod_l+0x254>
 8011b2c:	9007      	str	r0, [sp, #28]
 8011b2e:	463d      	mov	r5, r7
 8011b30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011b34:	2a09      	cmp	r2, #9
 8011b36:	d912      	bls.n	8011b5e <_strtod_l+0x216>
 8011b38:	2201      	movs	r2, #1
 8011b3a:	e7c2      	b.n	8011ac2 <_strtod_l+0x17a>
 8011b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b3e:	1c5a      	adds	r2, r3, #1
 8011b40:	921d      	str	r2, [sp, #116]	; 0x74
 8011b42:	785b      	ldrb	r3, [r3, #1]
 8011b44:	3001      	adds	r0, #1
 8011b46:	2b30      	cmp	r3, #48	; 0x30
 8011b48:	d0f8      	beq.n	8011b3c <_strtod_l+0x1f4>
 8011b4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011b4e:	2a08      	cmp	r2, #8
 8011b50:	f200 84db 	bhi.w	801250a <_strtod_l+0xbc2>
 8011b54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011b56:	9007      	str	r0, [sp, #28]
 8011b58:	2000      	movs	r0, #0
 8011b5a:	920a      	str	r2, [sp, #40]	; 0x28
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	3b30      	subs	r3, #48	; 0x30
 8011b60:	f100 0201 	add.w	r2, r0, #1
 8011b64:	d014      	beq.n	8011b90 <_strtod_l+0x248>
 8011b66:	9907      	ldr	r1, [sp, #28]
 8011b68:	4411      	add	r1, r2
 8011b6a:	9107      	str	r1, [sp, #28]
 8011b6c:	462a      	mov	r2, r5
 8011b6e:	eb00 0e05 	add.w	lr, r0, r5
 8011b72:	210a      	movs	r1, #10
 8011b74:	4572      	cmp	r2, lr
 8011b76:	d113      	bne.n	8011ba0 <_strtod_l+0x258>
 8011b78:	182a      	adds	r2, r5, r0
 8011b7a:	2a08      	cmp	r2, #8
 8011b7c:	f105 0501 	add.w	r5, r5, #1
 8011b80:	4405      	add	r5, r0
 8011b82:	dc1c      	bgt.n	8011bbe <_strtod_l+0x276>
 8011b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b86:	220a      	movs	r2, #10
 8011b88:	fb02 3301 	mla	r3, r2, r1, r3
 8011b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b8e:	2200      	movs	r2, #0
 8011b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b92:	1c59      	adds	r1, r3, #1
 8011b94:	911d      	str	r1, [sp, #116]	; 0x74
 8011b96:	785b      	ldrb	r3, [r3, #1]
 8011b98:	4610      	mov	r0, r2
 8011b9a:	e7c9      	b.n	8011b30 <_strtod_l+0x1e8>
 8011b9c:	4638      	mov	r0, r7
 8011b9e:	e7d2      	b.n	8011b46 <_strtod_l+0x1fe>
 8011ba0:	2a08      	cmp	r2, #8
 8011ba2:	dc04      	bgt.n	8011bae <_strtod_l+0x266>
 8011ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011ba6:	434e      	muls	r6, r1
 8011ba8:	9609      	str	r6, [sp, #36]	; 0x24
 8011baa:	3201      	adds	r2, #1
 8011bac:	e7e2      	b.n	8011b74 <_strtod_l+0x22c>
 8011bae:	f102 0c01 	add.w	ip, r2, #1
 8011bb2:	f1bc 0f10 	cmp.w	ip, #16
 8011bb6:	bfd8      	it	le
 8011bb8:	fb01 f909 	mulle.w	r9, r1, r9
 8011bbc:	e7f5      	b.n	8011baa <_strtod_l+0x262>
 8011bbe:	2d10      	cmp	r5, #16
 8011bc0:	bfdc      	itt	le
 8011bc2:	220a      	movle	r2, #10
 8011bc4:	fb02 3909 	mlale	r9, r2, r9, r3
 8011bc8:	e7e1      	b.n	8011b8e <_strtod_l+0x246>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	9307      	str	r3, [sp, #28]
 8011bce:	2201      	movs	r2, #1
 8011bd0:	e77c      	b.n	8011acc <_strtod_l+0x184>
 8011bd2:	f04f 0c00 	mov.w	ip, #0
 8011bd6:	f108 0302 	add.w	r3, r8, #2
 8011bda:	931d      	str	r3, [sp, #116]	; 0x74
 8011bdc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011be0:	e785      	b.n	8011aee <_strtod_l+0x1a6>
 8011be2:	f04f 0c01 	mov.w	ip, #1
 8011be6:	e7f6      	b.n	8011bd6 <_strtod_l+0x28e>
 8011be8:	0802928c 	.word	0x0802928c
 8011bec:	08028fa0 	.word	0x08028fa0
 8011bf0:	7ff00000 	.word	0x7ff00000
 8011bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bf6:	1c59      	adds	r1, r3, #1
 8011bf8:	911d      	str	r1, [sp, #116]	; 0x74
 8011bfa:	785b      	ldrb	r3, [r3, #1]
 8011bfc:	2b30      	cmp	r3, #48	; 0x30
 8011bfe:	d0f9      	beq.n	8011bf4 <_strtod_l+0x2ac>
 8011c00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011c04:	2908      	cmp	r1, #8
 8011c06:	f63f af79 	bhi.w	8011afc <_strtod_l+0x1b4>
 8011c0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c10:	9308      	str	r3, [sp, #32]
 8011c12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c14:	1c59      	adds	r1, r3, #1
 8011c16:	911d      	str	r1, [sp, #116]	; 0x74
 8011c18:	785b      	ldrb	r3, [r3, #1]
 8011c1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011c1e:	2e09      	cmp	r6, #9
 8011c20:	d937      	bls.n	8011c92 <_strtod_l+0x34a>
 8011c22:	9e08      	ldr	r6, [sp, #32]
 8011c24:	1b89      	subs	r1, r1, r6
 8011c26:	2908      	cmp	r1, #8
 8011c28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011c2c:	dc02      	bgt.n	8011c34 <_strtod_l+0x2ec>
 8011c2e:	4576      	cmp	r6, lr
 8011c30:	bfa8      	it	ge
 8011c32:	4676      	movge	r6, lr
 8011c34:	f1bc 0f00 	cmp.w	ip, #0
 8011c38:	d000      	beq.n	8011c3c <_strtod_l+0x2f4>
 8011c3a:	4276      	negs	r6, r6
 8011c3c:	2d00      	cmp	r5, #0
 8011c3e:	d14f      	bne.n	8011ce0 <_strtod_l+0x398>
 8011c40:	9904      	ldr	r1, [sp, #16]
 8011c42:	4301      	orrs	r1, r0
 8011c44:	f47f aec2 	bne.w	80119cc <_strtod_l+0x84>
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	f47f aedb 	bne.w	8011a04 <_strtod_l+0xbc>
 8011c4e:	2b69      	cmp	r3, #105	; 0x69
 8011c50:	d027      	beq.n	8011ca2 <_strtod_l+0x35a>
 8011c52:	dc24      	bgt.n	8011c9e <_strtod_l+0x356>
 8011c54:	2b49      	cmp	r3, #73	; 0x49
 8011c56:	d024      	beq.n	8011ca2 <_strtod_l+0x35a>
 8011c58:	2b4e      	cmp	r3, #78	; 0x4e
 8011c5a:	f47f aed3 	bne.w	8011a04 <_strtod_l+0xbc>
 8011c5e:	499e      	ldr	r1, [pc, #632]	; (8011ed8 <_strtod_l+0x590>)
 8011c60:	a81d      	add	r0, sp, #116	; 0x74
 8011c62:	f001 fee3 	bl	8013a2c <__match>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	f43f aecc 	beq.w	8011a04 <_strtod_l+0xbc>
 8011c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	2b28      	cmp	r3, #40	; 0x28
 8011c72:	d12d      	bne.n	8011cd0 <_strtod_l+0x388>
 8011c74:	4999      	ldr	r1, [pc, #612]	; (8011edc <_strtod_l+0x594>)
 8011c76:	aa20      	add	r2, sp, #128	; 0x80
 8011c78:	a81d      	add	r0, sp, #116	; 0x74
 8011c7a:	f001 feeb 	bl	8013a54 <__hexnan>
 8011c7e:	2805      	cmp	r0, #5
 8011c80:	d126      	bne.n	8011cd0 <_strtod_l+0x388>
 8011c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011c88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011c8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011c90:	e69c      	b.n	80119cc <_strtod_l+0x84>
 8011c92:	210a      	movs	r1, #10
 8011c94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011c98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011c9c:	e7b9      	b.n	8011c12 <_strtod_l+0x2ca>
 8011c9e:	2b6e      	cmp	r3, #110	; 0x6e
 8011ca0:	e7db      	b.n	8011c5a <_strtod_l+0x312>
 8011ca2:	498f      	ldr	r1, [pc, #572]	; (8011ee0 <_strtod_l+0x598>)
 8011ca4:	a81d      	add	r0, sp, #116	; 0x74
 8011ca6:	f001 fec1 	bl	8013a2c <__match>
 8011caa:	2800      	cmp	r0, #0
 8011cac:	f43f aeaa 	beq.w	8011a04 <_strtod_l+0xbc>
 8011cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cb2:	498c      	ldr	r1, [pc, #560]	; (8011ee4 <_strtod_l+0x59c>)
 8011cb4:	3b01      	subs	r3, #1
 8011cb6:	a81d      	add	r0, sp, #116	; 0x74
 8011cb8:	931d      	str	r3, [sp, #116]	; 0x74
 8011cba:	f001 feb7 	bl	8013a2c <__match>
 8011cbe:	b910      	cbnz	r0, 8011cc6 <_strtod_l+0x37e>
 8011cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	931d      	str	r3, [sp, #116]	; 0x74
 8011cc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011ef4 <_strtod_l+0x5ac>
 8011cca:	f04f 0a00 	mov.w	sl, #0
 8011cce:	e67d      	b.n	80119cc <_strtod_l+0x84>
 8011cd0:	4885      	ldr	r0, [pc, #532]	; (8011ee8 <_strtod_l+0x5a0>)
 8011cd2:	f002 ffb1 	bl	8014c38 <nan>
 8011cd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011cda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011cde:	e675      	b.n	80119cc <_strtod_l+0x84>
 8011ce0:	9b07      	ldr	r3, [sp, #28]
 8011ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ce4:	1af3      	subs	r3, r6, r3
 8011ce6:	2f00      	cmp	r7, #0
 8011ce8:	bf08      	it	eq
 8011cea:	462f      	moveq	r7, r5
 8011cec:	2d10      	cmp	r5, #16
 8011cee:	9308      	str	r3, [sp, #32]
 8011cf0:	46a8      	mov	r8, r5
 8011cf2:	bfa8      	it	ge
 8011cf4:	f04f 0810 	movge.w	r8, #16
 8011cf8:	f7ee fc1c 	bl	8000534 <__aeabi_ui2d>
 8011cfc:	2d09      	cmp	r5, #9
 8011cfe:	4682      	mov	sl, r0
 8011d00:	468b      	mov	fp, r1
 8011d02:	dd13      	ble.n	8011d2c <_strtod_l+0x3e4>
 8011d04:	4b79      	ldr	r3, [pc, #484]	; (8011eec <_strtod_l+0x5a4>)
 8011d06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011d0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011d0e:	f7ee fc8b 	bl	8000628 <__aeabi_dmul>
 8011d12:	4682      	mov	sl, r0
 8011d14:	4648      	mov	r0, r9
 8011d16:	468b      	mov	fp, r1
 8011d18:	f7ee fc0c 	bl	8000534 <__aeabi_ui2d>
 8011d1c:	4602      	mov	r2, r0
 8011d1e:	460b      	mov	r3, r1
 8011d20:	4650      	mov	r0, sl
 8011d22:	4659      	mov	r1, fp
 8011d24:	f7ee faca 	bl	80002bc <__adddf3>
 8011d28:	4682      	mov	sl, r0
 8011d2a:	468b      	mov	fp, r1
 8011d2c:	2d0f      	cmp	r5, #15
 8011d2e:	dc38      	bgt.n	8011da2 <_strtod_l+0x45a>
 8011d30:	9b08      	ldr	r3, [sp, #32]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f43f ae4a 	beq.w	80119cc <_strtod_l+0x84>
 8011d38:	dd24      	ble.n	8011d84 <_strtod_l+0x43c>
 8011d3a:	2b16      	cmp	r3, #22
 8011d3c:	dc0b      	bgt.n	8011d56 <_strtod_l+0x40e>
 8011d3e:	4d6b      	ldr	r5, [pc, #428]	; (8011eec <_strtod_l+0x5a4>)
 8011d40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011d44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011d48:	4652      	mov	r2, sl
 8011d4a:	465b      	mov	r3, fp
 8011d4c:	f7ee fc6c 	bl	8000628 <__aeabi_dmul>
 8011d50:	4682      	mov	sl, r0
 8011d52:	468b      	mov	fp, r1
 8011d54:	e63a      	b.n	80119cc <_strtod_l+0x84>
 8011d56:	9a08      	ldr	r2, [sp, #32]
 8011d58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	db20      	blt.n	8011da2 <_strtod_l+0x45a>
 8011d60:	4c62      	ldr	r4, [pc, #392]	; (8011eec <_strtod_l+0x5a4>)
 8011d62:	f1c5 050f 	rsb	r5, r5, #15
 8011d66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d6a:	4652      	mov	r2, sl
 8011d6c:	465b      	mov	r3, fp
 8011d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d72:	f7ee fc59 	bl	8000628 <__aeabi_dmul>
 8011d76:	9b08      	ldr	r3, [sp, #32]
 8011d78:	1b5d      	subs	r5, r3, r5
 8011d7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d82:	e7e3      	b.n	8011d4c <_strtod_l+0x404>
 8011d84:	9b08      	ldr	r3, [sp, #32]
 8011d86:	3316      	adds	r3, #22
 8011d88:	db0b      	blt.n	8011da2 <_strtod_l+0x45a>
 8011d8a:	9b07      	ldr	r3, [sp, #28]
 8011d8c:	4a57      	ldr	r2, [pc, #348]	; (8011eec <_strtod_l+0x5a4>)
 8011d8e:	1b9e      	subs	r6, r3, r6
 8011d90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d98:	4650      	mov	r0, sl
 8011d9a:	4659      	mov	r1, fp
 8011d9c:	f7ee fd6e 	bl	800087c <__aeabi_ddiv>
 8011da0:	e7d6      	b.n	8011d50 <_strtod_l+0x408>
 8011da2:	9b08      	ldr	r3, [sp, #32]
 8011da4:	eba5 0808 	sub.w	r8, r5, r8
 8011da8:	4498      	add	r8, r3
 8011daa:	f1b8 0f00 	cmp.w	r8, #0
 8011dae:	dd71      	ble.n	8011e94 <_strtod_l+0x54c>
 8011db0:	f018 030f 	ands.w	r3, r8, #15
 8011db4:	d00a      	beq.n	8011dcc <_strtod_l+0x484>
 8011db6:	494d      	ldr	r1, [pc, #308]	; (8011eec <_strtod_l+0x5a4>)
 8011db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011dbc:	4652      	mov	r2, sl
 8011dbe:	465b      	mov	r3, fp
 8011dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dc4:	f7ee fc30 	bl	8000628 <__aeabi_dmul>
 8011dc8:	4682      	mov	sl, r0
 8011dca:	468b      	mov	fp, r1
 8011dcc:	f038 080f 	bics.w	r8, r8, #15
 8011dd0:	d04d      	beq.n	8011e6e <_strtod_l+0x526>
 8011dd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011dd6:	dd22      	ble.n	8011e1e <_strtod_l+0x4d6>
 8011dd8:	2500      	movs	r5, #0
 8011dda:	462e      	mov	r6, r5
 8011ddc:	9509      	str	r5, [sp, #36]	; 0x24
 8011dde:	9507      	str	r5, [sp, #28]
 8011de0:	2322      	movs	r3, #34	; 0x22
 8011de2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011ef4 <_strtod_l+0x5ac>
 8011de6:	6023      	str	r3, [r4, #0]
 8011de8:	f04f 0a00 	mov.w	sl, #0
 8011dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f43f adec 	beq.w	80119cc <_strtod_l+0x84>
 8011df4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011df6:	4620      	mov	r0, r4
 8011df8:	f001 ff34 	bl	8013c64 <_Bfree>
 8011dfc:	9907      	ldr	r1, [sp, #28]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f001 ff30 	bl	8013c64 <_Bfree>
 8011e04:	4631      	mov	r1, r6
 8011e06:	4620      	mov	r0, r4
 8011e08:	f001 ff2c 	bl	8013c64 <_Bfree>
 8011e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f001 ff28 	bl	8013c64 <_Bfree>
 8011e14:	4629      	mov	r1, r5
 8011e16:	4620      	mov	r0, r4
 8011e18:	f001 ff24 	bl	8013c64 <_Bfree>
 8011e1c:	e5d6      	b.n	80119cc <_strtod_l+0x84>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011e24:	4650      	mov	r0, sl
 8011e26:	4659      	mov	r1, fp
 8011e28:	4699      	mov	r9, r3
 8011e2a:	f1b8 0f01 	cmp.w	r8, #1
 8011e2e:	dc21      	bgt.n	8011e74 <_strtod_l+0x52c>
 8011e30:	b10b      	cbz	r3, 8011e36 <_strtod_l+0x4ee>
 8011e32:	4682      	mov	sl, r0
 8011e34:	468b      	mov	fp, r1
 8011e36:	4b2e      	ldr	r3, [pc, #184]	; (8011ef0 <_strtod_l+0x5a8>)
 8011e38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011e3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011e40:	4652      	mov	r2, sl
 8011e42:	465b      	mov	r3, fp
 8011e44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011e48:	f7ee fbee 	bl	8000628 <__aeabi_dmul>
 8011e4c:	4b29      	ldr	r3, [pc, #164]	; (8011ef4 <_strtod_l+0x5ac>)
 8011e4e:	460a      	mov	r2, r1
 8011e50:	400b      	ands	r3, r1
 8011e52:	4929      	ldr	r1, [pc, #164]	; (8011ef8 <_strtod_l+0x5b0>)
 8011e54:	428b      	cmp	r3, r1
 8011e56:	4682      	mov	sl, r0
 8011e58:	d8be      	bhi.n	8011dd8 <_strtod_l+0x490>
 8011e5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011e5e:	428b      	cmp	r3, r1
 8011e60:	bf86      	itte	hi
 8011e62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011efc <_strtod_l+0x5b4>
 8011e66:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011e6e:	2300      	movs	r3, #0
 8011e70:	9304      	str	r3, [sp, #16]
 8011e72:	e081      	b.n	8011f78 <_strtod_l+0x630>
 8011e74:	f018 0f01 	tst.w	r8, #1
 8011e78:	d007      	beq.n	8011e8a <_strtod_l+0x542>
 8011e7a:	4b1d      	ldr	r3, [pc, #116]	; (8011ef0 <_strtod_l+0x5a8>)
 8011e7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	f7ee fbd0 	bl	8000628 <__aeabi_dmul>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	f109 0901 	add.w	r9, r9, #1
 8011e8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011e92:	e7ca      	b.n	8011e2a <_strtod_l+0x4e2>
 8011e94:	d0eb      	beq.n	8011e6e <_strtod_l+0x526>
 8011e96:	f1c8 0800 	rsb	r8, r8, #0
 8011e9a:	f018 020f 	ands.w	r2, r8, #15
 8011e9e:	d00a      	beq.n	8011eb6 <_strtod_l+0x56e>
 8011ea0:	4b12      	ldr	r3, [pc, #72]	; (8011eec <_strtod_l+0x5a4>)
 8011ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ea6:	4650      	mov	r0, sl
 8011ea8:	4659      	mov	r1, fp
 8011eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eae:	f7ee fce5 	bl	800087c <__aeabi_ddiv>
 8011eb2:	4682      	mov	sl, r0
 8011eb4:	468b      	mov	fp, r1
 8011eb6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011eba:	d0d8      	beq.n	8011e6e <_strtod_l+0x526>
 8011ebc:	f1b8 0f1f 	cmp.w	r8, #31
 8011ec0:	dd1e      	ble.n	8011f00 <_strtod_l+0x5b8>
 8011ec2:	2500      	movs	r5, #0
 8011ec4:	462e      	mov	r6, r5
 8011ec6:	9509      	str	r5, [sp, #36]	; 0x24
 8011ec8:	9507      	str	r5, [sp, #28]
 8011eca:	2322      	movs	r3, #34	; 0x22
 8011ecc:	f04f 0a00 	mov.w	sl, #0
 8011ed0:	f04f 0b00 	mov.w	fp, #0
 8011ed4:	6023      	str	r3, [r4, #0]
 8011ed6:	e789      	b.n	8011dec <_strtod_l+0x4a4>
 8011ed8:	08028f71 	.word	0x08028f71
 8011edc:	08028fb4 	.word	0x08028fb4
 8011ee0:	08028f69 	.word	0x08028f69
 8011ee4:	080291a8 	.word	0x080291a8
 8011ee8:	080290a3 	.word	0x080290a3
 8011eec:	08029328 	.word	0x08029328
 8011ef0:	08029300 	.word	0x08029300
 8011ef4:	7ff00000 	.word	0x7ff00000
 8011ef8:	7ca00000 	.word	0x7ca00000
 8011efc:	7fefffff 	.word	0x7fefffff
 8011f00:	f018 0310 	ands.w	r3, r8, #16
 8011f04:	bf18      	it	ne
 8011f06:	236a      	movne	r3, #106	; 0x6a
 8011f08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80122c0 <_strtod_l+0x978>
 8011f0c:	9304      	str	r3, [sp, #16]
 8011f0e:	4650      	mov	r0, sl
 8011f10:	4659      	mov	r1, fp
 8011f12:	2300      	movs	r3, #0
 8011f14:	f018 0f01 	tst.w	r8, #1
 8011f18:	d004      	beq.n	8011f24 <_strtod_l+0x5dc>
 8011f1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011f1e:	f7ee fb83 	bl	8000628 <__aeabi_dmul>
 8011f22:	2301      	movs	r3, #1
 8011f24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011f28:	f109 0908 	add.w	r9, r9, #8
 8011f2c:	d1f2      	bne.n	8011f14 <_strtod_l+0x5cc>
 8011f2e:	b10b      	cbz	r3, 8011f34 <_strtod_l+0x5ec>
 8011f30:	4682      	mov	sl, r0
 8011f32:	468b      	mov	fp, r1
 8011f34:	9b04      	ldr	r3, [sp, #16]
 8011f36:	b1bb      	cbz	r3, 8011f68 <_strtod_l+0x620>
 8011f38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011f3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	4659      	mov	r1, fp
 8011f44:	dd10      	ble.n	8011f68 <_strtod_l+0x620>
 8011f46:	2b1f      	cmp	r3, #31
 8011f48:	f340 8128 	ble.w	801219c <_strtod_l+0x854>
 8011f4c:	2b34      	cmp	r3, #52	; 0x34
 8011f4e:	bfde      	ittt	le
 8011f50:	3b20      	suble	r3, #32
 8011f52:	f04f 32ff 	movle.w	r2, #4294967295
 8011f56:	fa02 f303 	lslle.w	r3, r2, r3
 8011f5a:	f04f 0a00 	mov.w	sl, #0
 8011f5e:	bfcc      	ite	gt
 8011f60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011f64:	ea03 0b01 	andle.w	fp, r3, r1
 8011f68:	2200      	movs	r2, #0
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	4650      	mov	r0, sl
 8011f6e:	4659      	mov	r1, fp
 8011f70:	f7ee fdc2 	bl	8000af8 <__aeabi_dcmpeq>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d1a4      	bne.n	8011ec2 <_strtod_l+0x57a>
 8011f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f7e:	462b      	mov	r3, r5
 8011f80:	463a      	mov	r2, r7
 8011f82:	4620      	mov	r0, r4
 8011f84:	f001 feda 	bl	8013d3c <__s2b>
 8011f88:	9009      	str	r0, [sp, #36]	; 0x24
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f43f af24 	beq.w	8011dd8 <_strtod_l+0x490>
 8011f90:	9b07      	ldr	r3, [sp, #28]
 8011f92:	1b9e      	subs	r6, r3, r6
 8011f94:	9b08      	ldr	r3, [sp, #32]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	bfb4      	ite	lt
 8011f9a:	4633      	movlt	r3, r6
 8011f9c:	2300      	movge	r3, #0
 8011f9e:	9310      	str	r3, [sp, #64]	; 0x40
 8011fa0:	9b08      	ldr	r3, [sp, #32]
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011fa8:	9318      	str	r3, [sp, #96]	; 0x60
 8011faa:	462e      	mov	r6, r5
 8011fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fae:	4620      	mov	r0, r4
 8011fb0:	6859      	ldr	r1, [r3, #4]
 8011fb2:	f001 fe17 	bl	8013be4 <_Balloc>
 8011fb6:	9007      	str	r0, [sp, #28]
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	f43f af11 	beq.w	8011de0 <_strtod_l+0x498>
 8011fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc0:	691a      	ldr	r2, [r3, #16]
 8011fc2:	3202      	adds	r2, #2
 8011fc4:	f103 010c 	add.w	r1, r3, #12
 8011fc8:	0092      	lsls	r2, r2, #2
 8011fca:	300c      	adds	r0, #12
 8011fcc:	f001 fdfc 	bl	8013bc8 <memcpy>
 8011fd0:	ec4b ab10 	vmov	d0, sl, fp
 8011fd4:	aa20      	add	r2, sp, #128	; 0x80
 8011fd6:	a91f      	add	r1, sp, #124	; 0x7c
 8011fd8:	4620      	mov	r0, r4
 8011fda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011fde:	f002 f9e9 	bl	80143b4 <__d2b>
 8011fe2:	901e      	str	r0, [sp, #120]	; 0x78
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	f43f aefb 	beq.w	8011de0 <_strtod_l+0x498>
 8011fea:	2101      	movs	r1, #1
 8011fec:	4620      	mov	r0, r4
 8011fee:	f001 ff3f 	bl	8013e70 <__i2b>
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	f43f aef3 	beq.w	8011de0 <_strtod_l+0x498>
 8011ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011ffc:	9904      	ldr	r1, [sp, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	bfab      	itete	ge
 8012002:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8012004:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8012006:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012008:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801200c:	bfac      	ite	ge
 801200e:	eb03 0902 	addge.w	r9, r3, r2
 8012012:	1ad7      	sublt	r7, r2, r3
 8012014:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012016:	eba3 0801 	sub.w	r8, r3, r1
 801201a:	4490      	add	r8, r2
 801201c:	4ba3      	ldr	r3, [pc, #652]	; (80122ac <_strtod_l+0x964>)
 801201e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012022:	4598      	cmp	r8, r3
 8012024:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012028:	f280 80cc 	bge.w	80121c4 <_strtod_l+0x87c>
 801202c:	eba3 0308 	sub.w	r3, r3, r8
 8012030:	2b1f      	cmp	r3, #31
 8012032:	eba2 0203 	sub.w	r2, r2, r3
 8012036:	f04f 0101 	mov.w	r1, #1
 801203a:	f300 80b6 	bgt.w	80121aa <_strtod_l+0x862>
 801203e:	fa01 f303 	lsl.w	r3, r1, r3
 8012042:	9311      	str	r3, [sp, #68]	; 0x44
 8012044:	2300      	movs	r3, #0
 8012046:	930c      	str	r3, [sp, #48]	; 0x30
 8012048:	eb09 0802 	add.w	r8, r9, r2
 801204c:	9b04      	ldr	r3, [sp, #16]
 801204e:	45c1      	cmp	r9, r8
 8012050:	4417      	add	r7, r2
 8012052:	441f      	add	r7, r3
 8012054:	464b      	mov	r3, r9
 8012056:	bfa8      	it	ge
 8012058:	4643      	movge	r3, r8
 801205a:	42bb      	cmp	r3, r7
 801205c:	bfa8      	it	ge
 801205e:	463b      	movge	r3, r7
 8012060:	2b00      	cmp	r3, #0
 8012062:	bfc2      	ittt	gt
 8012064:	eba8 0803 	subgt.w	r8, r8, r3
 8012068:	1aff      	subgt	r7, r7, r3
 801206a:	eba9 0903 	subgt.w	r9, r9, r3
 801206e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012070:	2b00      	cmp	r3, #0
 8012072:	dd17      	ble.n	80120a4 <_strtod_l+0x75c>
 8012074:	4631      	mov	r1, r6
 8012076:	461a      	mov	r2, r3
 8012078:	4620      	mov	r0, r4
 801207a:	f001 ffb5 	bl	8013fe8 <__pow5mult>
 801207e:	4606      	mov	r6, r0
 8012080:	2800      	cmp	r0, #0
 8012082:	f43f aead 	beq.w	8011de0 <_strtod_l+0x498>
 8012086:	4601      	mov	r1, r0
 8012088:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801208a:	4620      	mov	r0, r4
 801208c:	f001 ff06 	bl	8013e9c <__multiply>
 8012090:	900f      	str	r0, [sp, #60]	; 0x3c
 8012092:	2800      	cmp	r0, #0
 8012094:	f43f aea4 	beq.w	8011de0 <_strtod_l+0x498>
 8012098:	991e      	ldr	r1, [sp, #120]	; 0x78
 801209a:	4620      	mov	r0, r4
 801209c:	f001 fde2 	bl	8013c64 <_Bfree>
 80120a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120a2:	931e      	str	r3, [sp, #120]	; 0x78
 80120a4:	f1b8 0f00 	cmp.w	r8, #0
 80120a8:	f300 8091 	bgt.w	80121ce <_strtod_l+0x886>
 80120ac:	9b08      	ldr	r3, [sp, #32]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	dd08      	ble.n	80120c4 <_strtod_l+0x77c>
 80120b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80120b4:	9907      	ldr	r1, [sp, #28]
 80120b6:	4620      	mov	r0, r4
 80120b8:	f001 ff96 	bl	8013fe8 <__pow5mult>
 80120bc:	9007      	str	r0, [sp, #28]
 80120be:	2800      	cmp	r0, #0
 80120c0:	f43f ae8e 	beq.w	8011de0 <_strtod_l+0x498>
 80120c4:	2f00      	cmp	r7, #0
 80120c6:	dd08      	ble.n	80120da <_strtod_l+0x792>
 80120c8:	9907      	ldr	r1, [sp, #28]
 80120ca:	463a      	mov	r2, r7
 80120cc:	4620      	mov	r0, r4
 80120ce:	f001 ffe5 	bl	801409c <__lshift>
 80120d2:	9007      	str	r0, [sp, #28]
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f43f ae83 	beq.w	8011de0 <_strtod_l+0x498>
 80120da:	f1b9 0f00 	cmp.w	r9, #0
 80120de:	dd08      	ble.n	80120f2 <_strtod_l+0x7aa>
 80120e0:	4631      	mov	r1, r6
 80120e2:	464a      	mov	r2, r9
 80120e4:	4620      	mov	r0, r4
 80120e6:	f001 ffd9 	bl	801409c <__lshift>
 80120ea:	4606      	mov	r6, r0
 80120ec:	2800      	cmp	r0, #0
 80120ee:	f43f ae77 	beq.w	8011de0 <_strtod_l+0x498>
 80120f2:	9a07      	ldr	r2, [sp, #28]
 80120f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80120f6:	4620      	mov	r0, r4
 80120f8:	f002 f858 	bl	80141ac <__mdiff>
 80120fc:	4605      	mov	r5, r0
 80120fe:	2800      	cmp	r0, #0
 8012100:	f43f ae6e 	beq.w	8011de0 <_strtod_l+0x498>
 8012104:	68c3      	ldr	r3, [r0, #12]
 8012106:	930f      	str	r3, [sp, #60]	; 0x3c
 8012108:	2300      	movs	r3, #0
 801210a:	60c3      	str	r3, [r0, #12]
 801210c:	4631      	mov	r1, r6
 801210e:	f002 f831 	bl	8014174 <__mcmp>
 8012112:	2800      	cmp	r0, #0
 8012114:	da65      	bge.n	80121e2 <_strtod_l+0x89a>
 8012116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012118:	ea53 030a 	orrs.w	r3, r3, sl
 801211c:	f040 8087 	bne.w	801222e <_strtod_l+0x8e6>
 8012120:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012124:	2b00      	cmp	r3, #0
 8012126:	f040 8082 	bne.w	801222e <_strtod_l+0x8e6>
 801212a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801212e:	0d1b      	lsrs	r3, r3, #20
 8012130:	051b      	lsls	r3, r3, #20
 8012132:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012136:	d97a      	bls.n	801222e <_strtod_l+0x8e6>
 8012138:	696b      	ldr	r3, [r5, #20]
 801213a:	b913      	cbnz	r3, 8012142 <_strtod_l+0x7fa>
 801213c:	692b      	ldr	r3, [r5, #16]
 801213e:	2b01      	cmp	r3, #1
 8012140:	dd75      	ble.n	801222e <_strtod_l+0x8e6>
 8012142:	4629      	mov	r1, r5
 8012144:	2201      	movs	r2, #1
 8012146:	4620      	mov	r0, r4
 8012148:	f001 ffa8 	bl	801409c <__lshift>
 801214c:	4631      	mov	r1, r6
 801214e:	4605      	mov	r5, r0
 8012150:	f002 f810 	bl	8014174 <__mcmp>
 8012154:	2800      	cmp	r0, #0
 8012156:	dd6a      	ble.n	801222e <_strtod_l+0x8e6>
 8012158:	9904      	ldr	r1, [sp, #16]
 801215a:	4a55      	ldr	r2, [pc, #340]	; (80122b0 <_strtod_l+0x968>)
 801215c:	465b      	mov	r3, fp
 801215e:	2900      	cmp	r1, #0
 8012160:	f000 8085 	beq.w	801226e <_strtod_l+0x926>
 8012164:	ea02 010b 	and.w	r1, r2, fp
 8012168:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801216c:	dc7f      	bgt.n	801226e <_strtod_l+0x926>
 801216e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012172:	f77f aeaa 	ble.w	8011eca <_strtod_l+0x582>
 8012176:	4a4f      	ldr	r2, [pc, #316]	; (80122b4 <_strtod_l+0x96c>)
 8012178:	2300      	movs	r3, #0
 801217a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801217e:	4650      	mov	r0, sl
 8012180:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012184:	4659      	mov	r1, fp
 8012186:	f7ee fa4f 	bl	8000628 <__aeabi_dmul>
 801218a:	460b      	mov	r3, r1
 801218c:	4303      	orrs	r3, r0
 801218e:	bf08      	it	eq
 8012190:	2322      	moveq	r3, #34	; 0x22
 8012192:	4682      	mov	sl, r0
 8012194:	468b      	mov	fp, r1
 8012196:	bf08      	it	eq
 8012198:	6023      	streq	r3, [r4, #0]
 801219a:	e62b      	b.n	8011df4 <_strtod_l+0x4ac>
 801219c:	f04f 32ff 	mov.w	r2, #4294967295
 80121a0:	fa02 f303 	lsl.w	r3, r2, r3
 80121a4:	ea03 0a0a 	and.w	sl, r3, sl
 80121a8:	e6de      	b.n	8011f68 <_strtod_l+0x620>
 80121aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80121ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80121b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80121b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80121ba:	fa01 f308 	lsl.w	r3, r1, r8
 80121be:	930c      	str	r3, [sp, #48]	; 0x30
 80121c0:	9111      	str	r1, [sp, #68]	; 0x44
 80121c2:	e741      	b.n	8012048 <_strtod_l+0x700>
 80121c4:	2300      	movs	r3, #0
 80121c6:	930c      	str	r3, [sp, #48]	; 0x30
 80121c8:	2301      	movs	r3, #1
 80121ca:	9311      	str	r3, [sp, #68]	; 0x44
 80121cc:	e73c      	b.n	8012048 <_strtod_l+0x700>
 80121ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80121d0:	4642      	mov	r2, r8
 80121d2:	4620      	mov	r0, r4
 80121d4:	f001 ff62 	bl	801409c <__lshift>
 80121d8:	901e      	str	r0, [sp, #120]	; 0x78
 80121da:	2800      	cmp	r0, #0
 80121dc:	f47f af66 	bne.w	80120ac <_strtod_l+0x764>
 80121e0:	e5fe      	b.n	8011de0 <_strtod_l+0x498>
 80121e2:	465f      	mov	r7, fp
 80121e4:	d16e      	bne.n	80122c4 <_strtod_l+0x97c>
 80121e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121ec:	b342      	cbz	r2, 8012240 <_strtod_l+0x8f8>
 80121ee:	4a32      	ldr	r2, [pc, #200]	; (80122b8 <_strtod_l+0x970>)
 80121f0:	4293      	cmp	r3, r2
 80121f2:	d128      	bne.n	8012246 <_strtod_l+0x8fe>
 80121f4:	9b04      	ldr	r3, [sp, #16]
 80121f6:	4650      	mov	r0, sl
 80121f8:	b1eb      	cbz	r3, 8012236 <_strtod_l+0x8ee>
 80121fa:	4a2d      	ldr	r2, [pc, #180]	; (80122b0 <_strtod_l+0x968>)
 80121fc:	403a      	ands	r2, r7
 80121fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012202:	f04f 31ff 	mov.w	r1, #4294967295
 8012206:	d819      	bhi.n	801223c <_strtod_l+0x8f4>
 8012208:	0d12      	lsrs	r2, r2, #20
 801220a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801220e:	fa01 f303 	lsl.w	r3, r1, r3
 8012212:	4298      	cmp	r0, r3
 8012214:	d117      	bne.n	8012246 <_strtod_l+0x8fe>
 8012216:	4b29      	ldr	r3, [pc, #164]	; (80122bc <_strtod_l+0x974>)
 8012218:	429f      	cmp	r7, r3
 801221a:	d102      	bne.n	8012222 <_strtod_l+0x8da>
 801221c:	3001      	adds	r0, #1
 801221e:	f43f addf 	beq.w	8011de0 <_strtod_l+0x498>
 8012222:	4b23      	ldr	r3, [pc, #140]	; (80122b0 <_strtod_l+0x968>)
 8012224:	403b      	ands	r3, r7
 8012226:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801222a:	f04f 0a00 	mov.w	sl, #0
 801222e:	9b04      	ldr	r3, [sp, #16]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d1a0      	bne.n	8012176 <_strtod_l+0x82e>
 8012234:	e5de      	b.n	8011df4 <_strtod_l+0x4ac>
 8012236:	f04f 33ff 	mov.w	r3, #4294967295
 801223a:	e7ea      	b.n	8012212 <_strtod_l+0x8ca>
 801223c:	460b      	mov	r3, r1
 801223e:	e7e8      	b.n	8012212 <_strtod_l+0x8ca>
 8012240:	ea53 030a 	orrs.w	r3, r3, sl
 8012244:	d088      	beq.n	8012158 <_strtod_l+0x810>
 8012246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012248:	b1db      	cbz	r3, 8012282 <_strtod_l+0x93a>
 801224a:	423b      	tst	r3, r7
 801224c:	d0ef      	beq.n	801222e <_strtod_l+0x8e6>
 801224e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012250:	9a04      	ldr	r2, [sp, #16]
 8012252:	4650      	mov	r0, sl
 8012254:	4659      	mov	r1, fp
 8012256:	b1c3      	cbz	r3, 801228a <_strtod_l+0x942>
 8012258:	f7ff fb5a 	bl	8011910 <sulp>
 801225c:	4602      	mov	r2, r0
 801225e:	460b      	mov	r3, r1
 8012260:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012264:	f7ee f82a 	bl	80002bc <__adddf3>
 8012268:	4682      	mov	sl, r0
 801226a:	468b      	mov	fp, r1
 801226c:	e7df      	b.n	801222e <_strtod_l+0x8e6>
 801226e:	4013      	ands	r3, r2
 8012270:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012274:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012278:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801227c:	f04f 3aff 	mov.w	sl, #4294967295
 8012280:	e7d5      	b.n	801222e <_strtod_l+0x8e6>
 8012282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012284:	ea13 0f0a 	tst.w	r3, sl
 8012288:	e7e0      	b.n	801224c <_strtod_l+0x904>
 801228a:	f7ff fb41 	bl	8011910 <sulp>
 801228e:	4602      	mov	r2, r0
 8012290:	460b      	mov	r3, r1
 8012292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012296:	f7ee f80f 	bl	80002b8 <__aeabi_dsub>
 801229a:	2200      	movs	r2, #0
 801229c:	2300      	movs	r3, #0
 801229e:	4682      	mov	sl, r0
 80122a0:	468b      	mov	fp, r1
 80122a2:	f7ee fc29 	bl	8000af8 <__aeabi_dcmpeq>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d0c1      	beq.n	801222e <_strtod_l+0x8e6>
 80122aa:	e60e      	b.n	8011eca <_strtod_l+0x582>
 80122ac:	fffffc02 	.word	0xfffffc02
 80122b0:	7ff00000 	.word	0x7ff00000
 80122b4:	39500000 	.word	0x39500000
 80122b8:	000fffff 	.word	0x000fffff
 80122bc:	7fefffff 	.word	0x7fefffff
 80122c0:	08028fc8 	.word	0x08028fc8
 80122c4:	4631      	mov	r1, r6
 80122c6:	4628      	mov	r0, r5
 80122c8:	f002 f8d0 	bl	801446c <__ratio>
 80122cc:	ec59 8b10 	vmov	r8, r9, d0
 80122d0:	ee10 0a10 	vmov	r0, s0
 80122d4:	2200      	movs	r2, #0
 80122d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80122da:	4649      	mov	r1, r9
 80122dc:	f7ee fc20 	bl	8000b20 <__aeabi_dcmple>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d07c      	beq.n	80123de <_strtod_l+0xa96>
 80122e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d04c      	beq.n	8012384 <_strtod_l+0xa3c>
 80122ea:	4b95      	ldr	r3, [pc, #596]	; (8012540 <_strtod_l+0xbf8>)
 80122ec:	2200      	movs	r2, #0
 80122ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80122f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012540 <_strtod_l+0xbf8>
 80122f6:	f04f 0800 	mov.w	r8, #0
 80122fa:	4b92      	ldr	r3, [pc, #584]	; (8012544 <_strtod_l+0xbfc>)
 80122fc:	403b      	ands	r3, r7
 80122fe:	9311      	str	r3, [sp, #68]	; 0x44
 8012300:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012302:	4b91      	ldr	r3, [pc, #580]	; (8012548 <_strtod_l+0xc00>)
 8012304:	429a      	cmp	r2, r3
 8012306:	f040 80b2 	bne.w	801246e <_strtod_l+0xb26>
 801230a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801230e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012312:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012316:	ec4b ab10 	vmov	d0, sl, fp
 801231a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801231e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012322:	f001 ffcb 	bl	80142bc <__ulp>
 8012326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801232a:	ec53 2b10 	vmov	r2, r3, d0
 801232e:	f7ee f97b 	bl	8000628 <__aeabi_dmul>
 8012332:	4652      	mov	r2, sl
 8012334:	465b      	mov	r3, fp
 8012336:	f7ed ffc1 	bl	80002bc <__adddf3>
 801233a:	460b      	mov	r3, r1
 801233c:	4981      	ldr	r1, [pc, #516]	; (8012544 <_strtod_l+0xbfc>)
 801233e:	4a83      	ldr	r2, [pc, #524]	; (801254c <_strtod_l+0xc04>)
 8012340:	4019      	ands	r1, r3
 8012342:	4291      	cmp	r1, r2
 8012344:	4682      	mov	sl, r0
 8012346:	d95e      	bls.n	8012406 <_strtod_l+0xabe>
 8012348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801234a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801234e:	4293      	cmp	r3, r2
 8012350:	d103      	bne.n	801235a <_strtod_l+0xa12>
 8012352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012354:	3301      	adds	r3, #1
 8012356:	f43f ad43 	beq.w	8011de0 <_strtod_l+0x498>
 801235a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012558 <_strtod_l+0xc10>
 801235e:	f04f 3aff 	mov.w	sl, #4294967295
 8012362:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012364:	4620      	mov	r0, r4
 8012366:	f001 fc7d 	bl	8013c64 <_Bfree>
 801236a:	9907      	ldr	r1, [sp, #28]
 801236c:	4620      	mov	r0, r4
 801236e:	f001 fc79 	bl	8013c64 <_Bfree>
 8012372:	4631      	mov	r1, r6
 8012374:	4620      	mov	r0, r4
 8012376:	f001 fc75 	bl	8013c64 <_Bfree>
 801237a:	4629      	mov	r1, r5
 801237c:	4620      	mov	r0, r4
 801237e:	f001 fc71 	bl	8013c64 <_Bfree>
 8012382:	e613      	b.n	8011fac <_strtod_l+0x664>
 8012384:	f1ba 0f00 	cmp.w	sl, #0
 8012388:	d11b      	bne.n	80123c2 <_strtod_l+0xa7a>
 801238a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801238e:	b9f3      	cbnz	r3, 80123ce <_strtod_l+0xa86>
 8012390:	4b6b      	ldr	r3, [pc, #428]	; (8012540 <_strtod_l+0xbf8>)
 8012392:	2200      	movs	r2, #0
 8012394:	4640      	mov	r0, r8
 8012396:	4649      	mov	r1, r9
 8012398:	f7ee fbb8 	bl	8000b0c <__aeabi_dcmplt>
 801239c:	b9d0      	cbnz	r0, 80123d4 <_strtod_l+0xa8c>
 801239e:	4640      	mov	r0, r8
 80123a0:	4649      	mov	r1, r9
 80123a2:	4b6b      	ldr	r3, [pc, #428]	; (8012550 <_strtod_l+0xc08>)
 80123a4:	2200      	movs	r2, #0
 80123a6:	f7ee f93f 	bl	8000628 <__aeabi_dmul>
 80123aa:	4680      	mov	r8, r0
 80123ac:	4689      	mov	r9, r1
 80123ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80123b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80123b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80123bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80123c0:	e79b      	b.n	80122fa <_strtod_l+0x9b2>
 80123c2:	f1ba 0f01 	cmp.w	sl, #1
 80123c6:	d102      	bne.n	80123ce <_strtod_l+0xa86>
 80123c8:	2f00      	cmp	r7, #0
 80123ca:	f43f ad7e 	beq.w	8011eca <_strtod_l+0x582>
 80123ce:	4b61      	ldr	r3, [pc, #388]	; (8012554 <_strtod_l+0xc0c>)
 80123d0:	2200      	movs	r2, #0
 80123d2:	e78c      	b.n	80122ee <_strtod_l+0x9a6>
 80123d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012550 <_strtod_l+0xc08>
 80123d8:	f04f 0800 	mov.w	r8, #0
 80123dc:	e7e7      	b.n	80123ae <_strtod_l+0xa66>
 80123de:	4b5c      	ldr	r3, [pc, #368]	; (8012550 <_strtod_l+0xc08>)
 80123e0:	4640      	mov	r0, r8
 80123e2:	4649      	mov	r1, r9
 80123e4:	2200      	movs	r2, #0
 80123e6:	f7ee f91f 	bl	8000628 <__aeabi_dmul>
 80123ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123ec:	4680      	mov	r8, r0
 80123ee:	4689      	mov	r9, r1
 80123f0:	b933      	cbnz	r3, 8012400 <_strtod_l+0xab8>
 80123f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123f6:	9012      	str	r0, [sp, #72]	; 0x48
 80123f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80123fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80123fe:	e7dd      	b.n	80123bc <_strtod_l+0xa74>
 8012400:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012404:	e7f9      	b.n	80123fa <_strtod_l+0xab2>
 8012406:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801240a:	9b04      	ldr	r3, [sp, #16]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1a8      	bne.n	8012362 <_strtod_l+0xa1a>
 8012410:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012416:	0d1b      	lsrs	r3, r3, #20
 8012418:	051b      	lsls	r3, r3, #20
 801241a:	429a      	cmp	r2, r3
 801241c:	d1a1      	bne.n	8012362 <_strtod_l+0xa1a>
 801241e:	4640      	mov	r0, r8
 8012420:	4649      	mov	r1, r9
 8012422:	f7ee fc61 	bl	8000ce8 <__aeabi_d2lz>
 8012426:	f7ee f8d1 	bl	80005cc <__aeabi_l2d>
 801242a:	4602      	mov	r2, r0
 801242c:	460b      	mov	r3, r1
 801242e:	4640      	mov	r0, r8
 8012430:	4649      	mov	r1, r9
 8012432:	f7ed ff41 	bl	80002b8 <__aeabi_dsub>
 8012436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012438:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801243c:	ea43 030a 	orr.w	r3, r3, sl
 8012440:	4313      	orrs	r3, r2
 8012442:	4680      	mov	r8, r0
 8012444:	4689      	mov	r9, r1
 8012446:	d053      	beq.n	80124f0 <_strtod_l+0xba8>
 8012448:	a335      	add	r3, pc, #212	; (adr r3, 8012520 <_strtod_l+0xbd8>)
 801244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244e:	f7ee fb5d 	bl	8000b0c <__aeabi_dcmplt>
 8012452:	2800      	cmp	r0, #0
 8012454:	f47f acce 	bne.w	8011df4 <_strtod_l+0x4ac>
 8012458:	a333      	add	r3, pc, #204	; (adr r3, 8012528 <_strtod_l+0xbe0>)
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	4640      	mov	r0, r8
 8012460:	4649      	mov	r1, r9
 8012462:	f7ee fb71 	bl	8000b48 <__aeabi_dcmpgt>
 8012466:	2800      	cmp	r0, #0
 8012468:	f43f af7b 	beq.w	8012362 <_strtod_l+0xa1a>
 801246c:	e4c2      	b.n	8011df4 <_strtod_l+0x4ac>
 801246e:	9b04      	ldr	r3, [sp, #16]
 8012470:	b333      	cbz	r3, 80124c0 <_strtod_l+0xb78>
 8012472:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012474:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012478:	d822      	bhi.n	80124c0 <_strtod_l+0xb78>
 801247a:	a32d      	add	r3, pc, #180	; (adr r3, 8012530 <_strtod_l+0xbe8>)
 801247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012480:	4640      	mov	r0, r8
 8012482:	4649      	mov	r1, r9
 8012484:	f7ee fb4c 	bl	8000b20 <__aeabi_dcmple>
 8012488:	b1a0      	cbz	r0, 80124b4 <_strtod_l+0xb6c>
 801248a:	4649      	mov	r1, r9
 801248c:	4640      	mov	r0, r8
 801248e:	f7ee fba3 	bl	8000bd8 <__aeabi_d2uiz>
 8012492:	2801      	cmp	r0, #1
 8012494:	bf38      	it	cc
 8012496:	2001      	movcc	r0, #1
 8012498:	f7ee f84c 	bl	8000534 <__aeabi_ui2d>
 801249c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801249e:	4680      	mov	r8, r0
 80124a0:	4689      	mov	r9, r1
 80124a2:	bb13      	cbnz	r3, 80124ea <_strtod_l+0xba2>
 80124a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124a8:	9014      	str	r0, [sp, #80]	; 0x50
 80124aa:	9315      	str	r3, [sp, #84]	; 0x54
 80124ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80124b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80124b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80124bc:	1a9b      	subs	r3, r3, r2
 80124be:	930d      	str	r3, [sp, #52]	; 0x34
 80124c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80124c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80124c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80124cc:	f001 fef6 	bl	80142bc <__ulp>
 80124d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80124d4:	ec53 2b10 	vmov	r2, r3, d0
 80124d8:	f7ee f8a6 	bl	8000628 <__aeabi_dmul>
 80124dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80124e0:	f7ed feec 	bl	80002bc <__adddf3>
 80124e4:	4682      	mov	sl, r0
 80124e6:	468b      	mov	fp, r1
 80124e8:	e78f      	b.n	801240a <_strtod_l+0xac2>
 80124ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80124ee:	e7dd      	b.n	80124ac <_strtod_l+0xb64>
 80124f0:	a311      	add	r3, pc, #68	; (adr r3, 8012538 <_strtod_l+0xbf0>)
 80124f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f6:	f7ee fb09 	bl	8000b0c <__aeabi_dcmplt>
 80124fa:	e7b4      	b.n	8012466 <_strtod_l+0xb1e>
 80124fc:	2300      	movs	r3, #0
 80124fe:	930e      	str	r3, [sp, #56]	; 0x38
 8012500:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012502:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012504:	6013      	str	r3, [r2, #0]
 8012506:	f7ff ba65 	b.w	80119d4 <_strtod_l+0x8c>
 801250a:	2b65      	cmp	r3, #101	; 0x65
 801250c:	f43f ab5d 	beq.w	8011bca <_strtod_l+0x282>
 8012510:	2b45      	cmp	r3, #69	; 0x45
 8012512:	f43f ab5a 	beq.w	8011bca <_strtod_l+0x282>
 8012516:	2201      	movs	r2, #1
 8012518:	f7ff bb92 	b.w	8011c40 <_strtod_l+0x2f8>
 801251c:	f3af 8000 	nop.w
 8012520:	94a03595 	.word	0x94a03595
 8012524:	3fdfffff 	.word	0x3fdfffff
 8012528:	35afe535 	.word	0x35afe535
 801252c:	3fe00000 	.word	0x3fe00000
 8012530:	ffc00000 	.word	0xffc00000
 8012534:	41dfffff 	.word	0x41dfffff
 8012538:	94a03595 	.word	0x94a03595
 801253c:	3fcfffff 	.word	0x3fcfffff
 8012540:	3ff00000 	.word	0x3ff00000
 8012544:	7ff00000 	.word	0x7ff00000
 8012548:	7fe00000 	.word	0x7fe00000
 801254c:	7c9fffff 	.word	0x7c9fffff
 8012550:	3fe00000 	.word	0x3fe00000
 8012554:	bff00000 	.word	0xbff00000
 8012558:	7fefffff 	.word	0x7fefffff

0801255c <_strtod_r>:
 801255c:	4b01      	ldr	r3, [pc, #4]	; (8012564 <_strtod_r+0x8>)
 801255e:	f7ff b9f3 	b.w	8011948 <_strtod_l>
 8012562:	bf00      	nop
 8012564:	200000a8 	.word	0x200000a8

08012568 <strtod>:
 8012568:	460a      	mov	r2, r1
 801256a:	4601      	mov	r1, r0
 801256c:	4802      	ldr	r0, [pc, #8]	; (8012578 <strtod+0x10>)
 801256e:	4b03      	ldr	r3, [pc, #12]	; (801257c <strtod+0x14>)
 8012570:	6800      	ldr	r0, [r0, #0]
 8012572:	f7ff b9e9 	b.w	8011948 <_strtod_l>
 8012576:	bf00      	nop
 8012578:	20000040 	.word	0x20000040
 801257c:	200000a8 	.word	0x200000a8

08012580 <strtok>:
 8012580:	4b16      	ldr	r3, [pc, #88]	; (80125dc <strtok+0x5c>)
 8012582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012584:	681e      	ldr	r6, [r3, #0]
 8012586:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012588:	4605      	mov	r5, r0
 801258a:	b9fc      	cbnz	r4, 80125cc <strtok+0x4c>
 801258c:	2050      	movs	r0, #80	; 0x50
 801258e:	9101      	str	r1, [sp, #4]
 8012590:	f001 fb00 	bl	8013b94 <malloc>
 8012594:	9901      	ldr	r1, [sp, #4]
 8012596:	65b0      	str	r0, [r6, #88]	; 0x58
 8012598:	4602      	mov	r2, r0
 801259a:	b920      	cbnz	r0, 80125a6 <strtok+0x26>
 801259c:	4b10      	ldr	r3, [pc, #64]	; (80125e0 <strtok+0x60>)
 801259e:	4811      	ldr	r0, [pc, #68]	; (80125e4 <strtok+0x64>)
 80125a0:	2157      	movs	r1, #87	; 0x57
 80125a2:	f000 f8d9 	bl	8012758 <__assert_func>
 80125a6:	e9c0 4400 	strd	r4, r4, [r0]
 80125aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80125ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80125b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80125b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80125ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80125be:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80125c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80125c6:	6184      	str	r4, [r0, #24]
 80125c8:	7704      	strb	r4, [r0, #28]
 80125ca:	6244      	str	r4, [r0, #36]	; 0x24
 80125cc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80125ce:	2301      	movs	r3, #1
 80125d0:	4628      	mov	r0, r5
 80125d2:	b002      	add	sp, #8
 80125d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125d8:	f000 b806 	b.w	80125e8 <__strtok_r>
 80125dc:	20000040 	.word	0x20000040
 80125e0:	08028ff0 	.word	0x08028ff0
 80125e4:	08029007 	.word	0x08029007

080125e8 <__strtok_r>:
 80125e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ea:	b908      	cbnz	r0, 80125f0 <__strtok_r+0x8>
 80125ec:	6810      	ldr	r0, [r2, #0]
 80125ee:	b188      	cbz	r0, 8012614 <__strtok_r+0x2c>
 80125f0:	4604      	mov	r4, r0
 80125f2:	4620      	mov	r0, r4
 80125f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80125f8:	460f      	mov	r7, r1
 80125fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80125fe:	b91e      	cbnz	r6, 8012608 <__strtok_r+0x20>
 8012600:	b965      	cbnz	r5, 801261c <__strtok_r+0x34>
 8012602:	6015      	str	r5, [r2, #0]
 8012604:	4628      	mov	r0, r5
 8012606:	e005      	b.n	8012614 <__strtok_r+0x2c>
 8012608:	42b5      	cmp	r5, r6
 801260a:	d1f6      	bne.n	80125fa <__strtok_r+0x12>
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1f0      	bne.n	80125f2 <__strtok_r+0xa>
 8012610:	6014      	str	r4, [r2, #0]
 8012612:	7003      	strb	r3, [r0, #0]
 8012614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012616:	461c      	mov	r4, r3
 8012618:	e00c      	b.n	8012634 <__strtok_r+0x4c>
 801261a:	b915      	cbnz	r5, 8012622 <__strtok_r+0x3a>
 801261c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012620:	460e      	mov	r6, r1
 8012622:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012626:	42ab      	cmp	r3, r5
 8012628:	d1f7      	bne.n	801261a <__strtok_r+0x32>
 801262a:	2b00      	cmp	r3, #0
 801262c:	d0f3      	beq.n	8012616 <__strtok_r+0x2e>
 801262e:	2300      	movs	r3, #0
 8012630:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012634:	6014      	str	r4, [r2, #0]
 8012636:	e7ed      	b.n	8012614 <__strtok_r+0x2c>

08012638 <_strtol_l.isra.0>:
 8012638:	2b01      	cmp	r3, #1
 801263a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801263e:	d001      	beq.n	8012644 <_strtol_l.isra.0+0xc>
 8012640:	2b24      	cmp	r3, #36	; 0x24
 8012642:	d906      	bls.n	8012652 <_strtol_l.isra.0+0x1a>
 8012644:	f7fe fa92 	bl	8010b6c <__errno>
 8012648:	2316      	movs	r3, #22
 801264a:	6003      	str	r3, [r0, #0]
 801264c:	2000      	movs	r0, #0
 801264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012652:	4f3a      	ldr	r7, [pc, #232]	; (801273c <_strtol_l.isra.0+0x104>)
 8012654:	468e      	mov	lr, r1
 8012656:	4676      	mov	r6, lr
 8012658:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801265c:	5de5      	ldrb	r5, [r4, r7]
 801265e:	f015 0508 	ands.w	r5, r5, #8
 8012662:	d1f8      	bne.n	8012656 <_strtol_l.isra.0+0x1e>
 8012664:	2c2d      	cmp	r4, #45	; 0x2d
 8012666:	d134      	bne.n	80126d2 <_strtol_l.isra.0+0x9a>
 8012668:	f89e 4000 	ldrb.w	r4, [lr]
 801266c:	f04f 0801 	mov.w	r8, #1
 8012670:	f106 0e02 	add.w	lr, r6, #2
 8012674:	2b00      	cmp	r3, #0
 8012676:	d05c      	beq.n	8012732 <_strtol_l.isra.0+0xfa>
 8012678:	2b10      	cmp	r3, #16
 801267a:	d10c      	bne.n	8012696 <_strtol_l.isra.0+0x5e>
 801267c:	2c30      	cmp	r4, #48	; 0x30
 801267e:	d10a      	bne.n	8012696 <_strtol_l.isra.0+0x5e>
 8012680:	f89e 4000 	ldrb.w	r4, [lr]
 8012684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012688:	2c58      	cmp	r4, #88	; 0x58
 801268a:	d14d      	bne.n	8012728 <_strtol_l.isra.0+0xf0>
 801268c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012690:	2310      	movs	r3, #16
 8012692:	f10e 0e02 	add.w	lr, lr, #2
 8012696:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801269a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801269e:	2600      	movs	r6, #0
 80126a0:	fbbc f9f3 	udiv	r9, ip, r3
 80126a4:	4635      	mov	r5, r6
 80126a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80126aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80126ae:	2f09      	cmp	r7, #9
 80126b0:	d818      	bhi.n	80126e4 <_strtol_l.isra.0+0xac>
 80126b2:	463c      	mov	r4, r7
 80126b4:	42a3      	cmp	r3, r4
 80126b6:	dd24      	ble.n	8012702 <_strtol_l.isra.0+0xca>
 80126b8:	2e00      	cmp	r6, #0
 80126ba:	db1f      	blt.n	80126fc <_strtol_l.isra.0+0xc4>
 80126bc:	45a9      	cmp	r9, r5
 80126be:	d31d      	bcc.n	80126fc <_strtol_l.isra.0+0xc4>
 80126c0:	d101      	bne.n	80126c6 <_strtol_l.isra.0+0x8e>
 80126c2:	45a2      	cmp	sl, r4
 80126c4:	db1a      	blt.n	80126fc <_strtol_l.isra.0+0xc4>
 80126c6:	fb05 4503 	mla	r5, r5, r3, r4
 80126ca:	2601      	movs	r6, #1
 80126cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80126d0:	e7eb      	b.n	80126aa <_strtol_l.isra.0+0x72>
 80126d2:	2c2b      	cmp	r4, #43	; 0x2b
 80126d4:	bf08      	it	eq
 80126d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80126da:	46a8      	mov	r8, r5
 80126dc:	bf08      	it	eq
 80126de:	f106 0e02 	addeq.w	lr, r6, #2
 80126e2:	e7c7      	b.n	8012674 <_strtol_l.isra.0+0x3c>
 80126e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80126e8:	2f19      	cmp	r7, #25
 80126ea:	d801      	bhi.n	80126f0 <_strtol_l.isra.0+0xb8>
 80126ec:	3c37      	subs	r4, #55	; 0x37
 80126ee:	e7e1      	b.n	80126b4 <_strtol_l.isra.0+0x7c>
 80126f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80126f4:	2f19      	cmp	r7, #25
 80126f6:	d804      	bhi.n	8012702 <_strtol_l.isra.0+0xca>
 80126f8:	3c57      	subs	r4, #87	; 0x57
 80126fa:	e7db      	b.n	80126b4 <_strtol_l.isra.0+0x7c>
 80126fc:	f04f 36ff 	mov.w	r6, #4294967295
 8012700:	e7e4      	b.n	80126cc <_strtol_l.isra.0+0x94>
 8012702:	2e00      	cmp	r6, #0
 8012704:	da05      	bge.n	8012712 <_strtol_l.isra.0+0xda>
 8012706:	2322      	movs	r3, #34	; 0x22
 8012708:	6003      	str	r3, [r0, #0]
 801270a:	4665      	mov	r5, ip
 801270c:	b942      	cbnz	r2, 8012720 <_strtol_l.isra.0+0xe8>
 801270e:	4628      	mov	r0, r5
 8012710:	e79d      	b.n	801264e <_strtol_l.isra.0+0x16>
 8012712:	f1b8 0f00 	cmp.w	r8, #0
 8012716:	d000      	beq.n	801271a <_strtol_l.isra.0+0xe2>
 8012718:	426d      	negs	r5, r5
 801271a:	2a00      	cmp	r2, #0
 801271c:	d0f7      	beq.n	801270e <_strtol_l.isra.0+0xd6>
 801271e:	b10e      	cbz	r6, 8012724 <_strtol_l.isra.0+0xec>
 8012720:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012724:	6011      	str	r1, [r2, #0]
 8012726:	e7f2      	b.n	801270e <_strtol_l.isra.0+0xd6>
 8012728:	2430      	movs	r4, #48	; 0x30
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1b3      	bne.n	8012696 <_strtol_l.isra.0+0x5e>
 801272e:	2308      	movs	r3, #8
 8012730:	e7b1      	b.n	8012696 <_strtol_l.isra.0+0x5e>
 8012732:	2c30      	cmp	r4, #48	; 0x30
 8012734:	d0a4      	beq.n	8012680 <_strtol_l.isra.0+0x48>
 8012736:	230a      	movs	r3, #10
 8012738:	e7ad      	b.n	8012696 <_strtol_l.isra.0+0x5e>
 801273a:	bf00      	nop
 801273c:	080290a5 	.word	0x080290a5

08012740 <_strtol_r>:
 8012740:	f7ff bf7a 	b.w	8012638 <_strtol_l.isra.0>

08012744 <strtol>:
 8012744:	4613      	mov	r3, r2
 8012746:	460a      	mov	r2, r1
 8012748:	4601      	mov	r1, r0
 801274a:	4802      	ldr	r0, [pc, #8]	; (8012754 <strtol+0x10>)
 801274c:	6800      	ldr	r0, [r0, #0]
 801274e:	f7ff bf73 	b.w	8012638 <_strtol_l.isra.0>
 8012752:	bf00      	nop
 8012754:	20000040 	.word	0x20000040

08012758 <__assert_func>:
 8012758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801275a:	4614      	mov	r4, r2
 801275c:	461a      	mov	r2, r3
 801275e:	4b09      	ldr	r3, [pc, #36]	; (8012784 <__assert_func+0x2c>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4605      	mov	r5, r0
 8012764:	68d8      	ldr	r0, [r3, #12]
 8012766:	b14c      	cbz	r4, 801277c <__assert_func+0x24>
 8012768:	4b07      	ldr	r3, [pc, #28]	; (8012788 <__assert_func+0x30>)
 801276a:	9100      	str	r1, [sp, #0]
 801276c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012770:	4906      	ldr	r1, [pc, #24]	; (801278c <__assert_func+0x34>)
 8012772:	462b      	mov	r3, r5
 8012774:	f000 fe88 	bl	8013488 <fiprintf>
 8012778:	f002 fb56 	bl	8014e28 <abort>
 801277c:	4b04      	ldr	r3, [pc, #16]	; (8012790 <__assert_func+0x38>)
 801277e:	461c      	mov	r4, r3
 8012780:	e7f3      	b.n	801276a <__assert_func+0x12>
 8012782:	bf00      	nop
 8012784:	20000040 	.word	0x20000040
 8012788:	08029068 	.word	0x08029068
 801278c:	08029075 	.word	0x08029075
 8012790:	080290a3 	.word	0x080290a3

08012794 <quorem>:
 8012794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012798:	6903      	ldr	r3, [r0, #16]
 801279a:	690c      	ldr	r4, [r1, #16]
 801279c:	42a3      	cmp	r3, r4
 801279e:	4607      	mov	r7, r0
 80127a0:	f2c0 8081 	blt.w	80128a6 <quorem+0x112>
 80127a4:	3c01      	subs	r4, #1
 80127a6:	f101 0814 	add.w	r8, r1, #20
 80127aa:	f100 0514 	add.w	r5, r0, #20
 80127ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127b2:	9301      	str	r3, [sp, #4]
 80127b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80127b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127bc:	3301      	adds	r3, #1
 80127be:	429a      	cmp	r2, r3
 80127c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80127c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80127cc:	d331      	bcc.n	8012832 <quorem+0x9e>
 80127ce:	f04f 0e00 	mov.w	lr, #0
 80127d2:	4640      	mov	r0, r8
 80127d4:	46ac      	mov	ip, r5
 80127d6:	46f2      	mov	sl, lr
 80127d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80127dc:	b293      	uxth	r3, r2
 80127de:	fb06 e303 	mla	r3, r6, r3, lr
 80127e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	ebaa 0303 	sub.w	r3, sl, r3
 80127ec:	0c12      	lsrs	r2, r2, #16
 80127ee:	f8dc a000 	ldr.w	sl, [ip]
 80127f2:	fb06 e202 	mla	r2, r6, r2, lr
 80127f6:	fa13 f38a 	uxtah	r3, r3, sl
 80127fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80127fe:	fa1f fa82 	uxth.w	sl, r2
 8012802:	f8dc 2000 	ldr.w	r2, [ip]
 8012806:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801280a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801280e:	b29b      	uxth	r3, r3
 8012810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012814:	4581      	cmp	r9, r0
 8012816:	f84c 3b04 	str.w	r3, [ip], #4
 801281a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801281e:	d2db      	bcs.n	80127d8 <quorem+0x44>
 8012820:	f855 300b 	ldr.w	r3, [r5, fp]
 8012824:	b92b      	cbnz	r3, 8012832 <quorem+0x9e>
 8012826:	9b01      	ldr	r3, [sp, #4]
 8012828:	3b04      	subs	r3, #4
 801282a:	429d      	cmp	r5, r3
 801282c:	461a      	mov	r2, r3
 801282e:	d32e      	bcc.n	801288e <quorem+0xfa>
 8012830:	613c      	str	r4, [r7, #16]
 8012832:	4638      	mov	r0, r7
 8012834:	f001 fc9e 	bl	8014174 <__mcmp>
 8012838:	2800      	cmp	r0, #0
 801283a:	db24      	blt.n	8012886 <quorem+0xf2>
 801283c:	3601      	adds	r6, #1
 801283e:	4628      	mov	r0, r5
 8012840:	f04f 0c00 	mov.w	ip, #0
 8012844:	f858 2b04 	ldr.w	r2, [r8], #4
 8012848:	f8d0 e000 	ldr.w	lr, [r0]
 801284c:	b293      	uxth	r3, r2
 801284e:	ebac 0303 	sub.w	r3, ip, r3
 8012852:	0c12      	lsrs	r2, r2, #16
 8012854:	fa13 f38e 	uxtah	r3, r3, lr
 8012858:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801285c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012860:	b29b      	uxth	r3, r3
 8012862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012866:	45c1      	cmp	r9, r8
 8012868:	f840 3b04 	str.w	r3, [r0], #4
 801286c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012870:	d2e8      	bcs.n	8012844 <quorem+0xb0>
 8012872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801287a:	b922      	cbnz	r2, 8012886 <quorem+0xf2>
 801287c:	3b04      	subs	r3, #4
 801287e:	429d      	cmp	r5, r3
 8012880:	461a      	mov	r2, r3
 8012882:	d30a      	bcc.n	801289a <quorem+0x106>
 8012884:	613c      	str	r4, [r7, #16]
 8012886:	4630      	mov	r0, r6
 8012888:	b003      	add	sp, #12
 801288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288e:	6812      	ldr	r2, [r2, #0]
 8012890:	3b04      	subs	r3, #4
 8012892:	2a00      	cmp	r2, #0
 8012894:	d1cc      	bne.n	8012830 <quorem+0x9c>
 8012896:	3c01      	subs	r4, #1
 8012898:	e7c7      	b.n	801282a <quorem+0x96>
 801289a:	6812      	ldr	r2, [r2, #0]
 801289c:	3b04      	subs	r3, #4
 801289e:	2a00      	cmp	r2, #0
 80128a0:	d1f0      	bne.n	8012884 <quorem+0xf0>
 80128a2:	3c01      	subs	r4, #1
 80128a4:	e7eb      	b.n	801287e <quorem+0xea>
 80128a6:	2000      	movs	r0, #0
 80128a8:	e7ee      	b.n	8012888 <quorem+0xf4>
 80128aa:	0000      	movs	r0, r0
 80128ac:	0000      	movs	r0, r0
	...

080128b0 <_dtoa_r>:
 80128b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128b4:	ed2d 8b02 	vpush	{d8}
 80128b8:	ec57 6b10 	vmov	r6, r7, d0
 80128bc:	b095      	sub	sp, #84	; 0x54
 80128be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80128c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80128c4:	9105      	str	r1, [sp, #20]
 80128c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80128ca:	4604      	mov	r4, r0
 80128cc:	9209      	str	r2, [sp, #36]	; 0x24
 80128ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80128d0:	b975      	cbnz	r5, 80128f0 <_dtoa_r+0x40>
 80128d2:	2010      	movs	r0, #16
 80128d4:	f001 f95e 	bl	8013b94 <malloc>
 80128d8:	4602      	mov	r2, r0
 80128da:	6260      	str	r0, [r4, #36]	; 0x24
 80128dc:	b920      	cbnz	r0, 80128e8 <_dtoa_r+0x38>
 80128de:	4bb2      	ldr	r3, [pc, #712]	; (8012ba8 <_dtoa_r+0x2f8>)
 80128e0:	21ea      	movs	r1, #234	; 0xea
 80128e2:	48b2      	ldr	r0, [pc, #712]	; (8012bac <_dtoa_r+0x2fc>)
 80128e4:	f7ff ff38 	bl	8012758 <__assert_func>
 80128e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80128ec:	6005      	str	r5, [r0, #0]
 80128ee:	60c5      	str	r5, [r0, #12]
 80128f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128f2:	6819      	ldr	r1, [r3, #0]
 80128f4:	b151      	cbz	r1, 801290c <_dtoa_r+0x5c>
 80128f6:	685a      	ldr	r2, [r3, #4]
 80128f8:	604a      	str	r2, [r1, #4]
 80128fa:	2301      	movs	r3, #1
 80128fc:	4093      	lsls	r3, r2
 80128fe:	608b      	str	r3, [r1, #8]
 8012900:	4620      	mov	r0, r4
 8012902:	f001 f9af 	bl	8013c64 <_Bfree>
 8012906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012908:	2200      	movs	r2, #0
 801290a:	601a      	str	r2, [r3, #0]
 801290c:	1e3b      	subs	r3, r7, #0
 801290e:	bfb9      	ittee	lt
 8012910:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012914:	9303      	strlt	r3, [sp, #12]
 8012916:	2300      	movge	r3, #0
 8012918:	f8c8 3000 	strge.w	r3, [r8]
 801291c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012920:	4ba3      	ldr	r3, [pc, #652]	; (8012bb0 <_dtoa_r+0x300>)
 8012922:	bfbc      	itt	lt
 8012924:	2201      	movlt	r2, #1
 8012926:	f8c8 2000 	strlt.w	r2, [r8]
 801292a:	ea33 0309 	bics.w	r3, r3, r9
 801292e:	d11b      	bne.n	8012968 <_dtoa_r+0xb8>
 8012930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012932:	f242 730f 	movw	r3, #9999	; 0x270f
 8012936:	6013      	str	r3, [r2, #0]
 8012938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801293c:	4333      	orrs	r3, r6
 801293e:	f000 857a 	beq.w	8013436 <_dtoa_r+0xb86>
 8012942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012944:	b963      	cbnz	r3, 8012960 <_dtoa_r+0xb0>
 8012946:	4b9b      	ldr	r3, [pc, #620]	; (8012bb4 <_dtoa_r+0x304>)
 8012948:	e024      	b.n	8012994 <_dtoa_r+0xe4>
 801294a:	4b9b      	ldr	r3, [pc, #620]	; (8012bb8 <_dtoa_r+0x308>)
 801294c:	9300      	str	r3, [sp, #0]
 801294e:	3308      	adds	r3, #8
 8012950:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012952:	6013      	str	r3, [r2, #0]
 8012954:	9800      	ldr	r0, [sp, #0]
 8012956:	b015      	add	sp, #84	; 0x54
 8012958:	ecbd 8b02 	vpop	{d8}
 801295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012960:	4b94      	ldr	r3, [pc, #592]	; (8012bb4 <_dtoa_r+0x304>)
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	3303      	adds	r3, #3
 8012966:	e7f3      	b.n	8012950 <_dtoa_r+0xa0>
 8012968:	ed9d 7b02 	vldr	d7, [sp, #8]
 801296c:	2200      	movs	r2, #0
 801296e:	ec51 0b17 	vmov	r0, r1, d7
 8012972:	2300      	movs	r3, #0
 8012974:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012978:	f7ee f8be 	bl	8000af8 <__aeabi_dcmpeq>
 801297c:	4680      	mov	r8, r0
 801297e:	b158      	cbz	r0, 8012998 <_dtoa_r+0xe8>
 8012980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012982:	2301      	movs	r3, #1
 8012984:	6013      	str	r3, [r2, #0]
 8012986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 8551 	beq.w	8013430 <_dtoa_r+0xb80>
 801298e:	488b      	ldr	r0, [pc, #556]	; (8012bbc <_dtoa_r+0x30c>)
 8012990:	6018      	str	r0, [r3, #0]
 8012992:	1e43      	subs	r3, r0, #1
 8012994:	9300      	str	r3, [sp, #0]
 8012996:	e7dd      	b.n	8012954 <_dtoa_r+0xa4>
 8012998:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801299c:	aa12      	add	r2, sp, #72	; 0x48
 801299e:	a913      	add	r1, sp, #76	; 0x4c
 80129a0:	4620      	mov	r0, r4
 80129a2:	f001 fd07 	bl	80143b4 <__d2b>
 80129a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80129aa:	4683      	mov	fp, r0
 80129ac:	2d00      	cmp	r5, #0
 80129ae:	d07c      	beq.n	8012aaa <_dtoa_r+0x1fa>
 80129b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80129b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80129be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80129c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80129c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80129ca:	4b7d      	ldr	r3, [pc, #500]	; (8012bc0 <_dtoa_r+0x310>)
 80129cc:	2200      	movs	r2, #0
 80129ce:	4630      	mov	r0, r6
 80129d0:	4639      	mov	r1, r7
 80129d2:	f7ed fc71 	bl	80002b8 <__aeabi_dsub>
 80129d6:	a36e      	add	r3, pc, #440	; (adr r3, 8012b90 <_dtoa_r+0x2e0>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	f7ed fe24 	bl	8000628 <__aeabi_dmul>
 80129e0:	a36d      	add	r3, pc, #436	; (adr r3, 8012b98 <_dtoa_r+0x2e8>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e6:	f7ed fc69 	bl	80002bc <__adddf3>
 80129ea:	4606      	mov	r6, r0
 80129ec:	4628      	mov	r0, r5
 80129ee:	460f      	mov	r7, r1
 80129f0:	f7ed fdb0 	bl	8000554 <__aeabi_i2d>
 80129f4:	a36a      	add	r3, pc, #424	; (adr r3, 8012ba0 <_dtoa_r+0x2f0>)
 80129f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fa:	f7ed fe15 	bl	8000628 <__aeabi_dmul>
 80129fe:	4602      	mov	r2, r0
 8012a00:	460b      	mov	r3, r1
 8012a02:	4630      	mov	r0, r6
 8012a04:	4639      	mov	r1, r7
 8012a06:	f7ed fc59 	bl	80002bc <__adddf3>
 8012a0a:	4606      	mov	r6, r0
 8012a0c:	460f      	mov	r7, r1
 8012a0e:	f7ee f8bb 	bl	8000b88 <__aeabi_d2iz>
 8012a12:	2200      	movs	r2, #0
 8012a14:	4682      	mov	sl, r0
 8012a16:	2300      	movs	r3, #0
 8012a18:	4630      	mov	r0, r6
 8012a1a:	4639      	mov	r1, r7
 8012a1c:	f7ee f876 	bl	8000b0c <__aeabi_dcmplt>
 8012a20:	b148      	cbz	r0, 8012a36 <_dtoa_r+0x186>
 8012a22:	4650      	mov	r0, sl
 8012a24:	f7ed fd96 	bl	8000554 <__aeabi_i2d>
 8012a28:	4632      	mov	r2, r6
 8012a2a:	463b      	mov	r3, r7
 8012a2c:	f7ee f864 	bl	8000af8 <__aeabi_dcmpeq>
 8012a30:	b908      	cbnz	r0, 8012a36 <_dtoa_r+0x186>
 8012a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a36:	f1ba 0f16 	cmp.w	sl, #22
 8012a3a:	d854      	bhi.n	8012ae6 <_dtoa_r+0x236>
 8012a3c:	4b61      	ldr	r3, [pc, #388]	; (8012bc4 <_dtoa_r+0x314>)
 8012a3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012a4a:	f7ee f85f 	bl	8000b0c <__aeabi_dcmplt>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	d04b      	beq.n	8012aea <_dtoa_r+0x23a>
 8012a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a56:	2300      	movs	r3, #0
 8012a58:	930e      	str	r3, [sp, #56]	; 0x38
 8012a5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a5c:	1b5d      	subs	r5, r3, r5
 8012a5e:	1e6b      	subs	r3, r5, #1
 8012a60:	9304      	str	r3, [sp, #16]
 8012a62:	bf43      	ittte	mi
 8012a64:	2300      	movmi	r3, #0
 8012a66:	f1c5 0801 	rsbmi	r8, r5, #1
 8012a6a:	9304      	strmi	r3, [sp, #16]
 8012a6c:	f04f 0800 	movpl.w	r8, #0
 8012a70:	f1ba 0f00 	cmp.w	sl, #0
 8012a74:	db3b      	blt.n	8012aee <_dtoa_r+0x23e>
 8012a76:	9b04      	ldr	r3, [sp, #16]
 8012a78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012a7c:	4453      	add	r3, sl
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	2300      	movs	r3, #0
 8012a82:	9306      	str	r3, [sp, #24]
 8012a84:	9b05      	ldr	r3, [sp, #20]
 8012a86:	2b09      	cmp	r3, #9
 8012a88:	d869      	bhi.n	8012b5e <_dtoa_r+0x2ae>
 8012a8a:	2b05      	cmp	r3, #5
 8012a8c:	bfc4      	itt	gt
 8012a8e:	3b04      	subgt	r3, #4
 8012a90:	9305      	strgt	r3, [sp, #20]
 8012a92:	9b05      	ldr	r3, [sp, #20]
 8012a94:	f1a3 0302 	sub.w	r3, r3, #2
 8012a98:	bfcc      	ite	gt
 8012a9a:	2500      	movgt	r5, #0
 8012a9c:	2501      	movle	r5, #1
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d869      	bhi.n	8012b76 <_dtoa_r+0x2c6>
 8012aa2:	e8df f003 	tbb	[pc, r3]
 8012aa6:	4e2c      	.short	0x4e2c
 8012aa8:	5a4c      	.short	0x5a4c
 8012aaa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012aae:	441d      	add	r5, r3
 8012ab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012ab4:	2b20      	cmp	r3, #32
 8012ab6:	bfc1      	itttt	gt
 8012ab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012abc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012ac0:	fa09 f303 	lslgt.w	r3, r9, r3
 8012ac4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012ac8:	bfda      	itte	le
 8012aca:	f1c3 0320 	rsble	r3, r3, #32
 8012ace:	fa06 f003 	lslle.w	r0, r6, r3
 8012ad2:	4318      	orrgt	r0, r3
 8012ad4:	f7ed fd2e 	bl	8000534 <__aeabi_ui2d>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	4606      	mov	r6, r0
 8012adc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012ae0:	3d01      	subs	r5, #1
 8012ae2:	9310      	str	r3, [sp, #64]	; 0x40
 8012ae4:	e771      	b.n	80129ca <_dtoa_r+0x11a>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e7b6      	b.n	8012a58 <_dtoa_r+0x1a8>
 8012aea:	900e      	str	r0, [sp, #56]	; 0x38
 8012aec:	e7b5      	b.n	8012a5a <_dtoa_r+0x1aa>
 8012aee:	f1ca 0300 	rsb	r3, sl, #0
 8012af2:	9306      	str	r3, [sp, #24]
 8012af4:	2300      	movs	r3, #0
 8012af6:	eba8 080a 	sub.w	r8, r8, sl
 8012afa:	930d      	str	r3, [sp, #52]	; 0x34
 8012afc:	e7c2      	b.n	8012a84 <_dtoa_r+0x1d4>
 8012afe:	2300      	movs	r3, #0
 8012b00:	9308      	str	r3, [sp, #32]
 8012b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	dc39      	bgt.n	8012b7c <_dtoa_r+0x2cc>
 8012b08:	f04f 0901 	mov.w	r9, #1
 8012b0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b10:	464b      	mov	r3, r9
 8012b12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012b16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012b18:	2200      	movs	r2, #0
 8012b1a:	6042      	str	r2, [r0, #4]
 8012b1c:	2204      	movs	r2, #4
 8012b1e:	f102 0614 	add.w	r6, r2, #20
 8012b22:	429e      	cmp	r6, r3
 8012b24:	6841      	ldr	r1, [r0, #4]
 8012b26:	d92f      	bls.n	8012b88 <_dtoa_r+0x2d8>
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f001 f85b 	bl	8013be4 <_Balloc>
 8012b2e:	9000      	str	r0, [sp, #0]
 8012b30:	2800      	cmp	r0, #0
 8012b32:	d14b      	bne.n	8012bcc <_dtoa_r+0x31c>
 8012b34:	4b24      	ldr	r3, [pc, #144]	; (8012bc8 <_dtoa_r+0x318>)
 8012b36:	4602      	mov	r2, r0
 8012b38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012b3c:	e6d1      	b.n	80128e2 <_dtoa_r+0x32>
 8012b3e:	2301      	movs	r3, #1
 8012b40:	e7de      	b.n	8012b00 <_dtoa_r+0x250>
 8012b42:	2300      	movs	r3, #0
 8012b44:	9308      	str	r3, [sp, #32]
 8012b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b48:	eb0a 0903 	add.w	r9, sl, r3
 8012b4c:	f109 0301 	add.w	r3, r9, #1
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	bfb8      	it	lt
 8012b56:	2301      	movlt	r3, #1
 8012b58:	e7dd      	b.n	8012b16 <_dtoa_r+0x266>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	e7f2      	b.n	8012b44 <_dtoa_r+0x294>
 8012b5e:	2501      	movs	r5, #1
 8012b60:	2300      	movs	r3, #0
 8012b62:	9305      	str	r3, [sp, #20]
 8012b64:	9508      	str	r5, [sp, #32]
 8012b66:	f04f 39ff 	mov.w	r9, #4294967295
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b70:	2312      	movs	r3, #18
 8012b72:	9209      	str	r2, [sp, #36]	; 0x24
 8012b74:	e7cf      	b.n	8012b16 <_dtoa_r+0x266>
 8012b76:	2301      	movs	r3, #1
 8012b78:	9308      	str	r3, [sp, #32]
 8012b7a:	e7f4      	b.n	8012b66 <_dtoa_r+0x2b6>
 8012b7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012b80:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b84:	464b      	mov	r3, r9
 8012b86:	e7c6      	b.n	8012b16 <_dtoa_r+0x266>
 8012b88:	3101      	adds	r1, #1
 8012b8a:	6041      	str	r1, [r0, #4]
 8012b8c:	0052      	lsls	r2, r2, #1
 8012b8e:	e7c6      	b.n	8012b1e <_dtoa_r+0x26e>
 8012b90:	636f4361 	.word	0x636f4361
 8012b94:	3fd287a7 	.word	0x3fd287a7
 8012b98:	8b60c8b3 	.word	0x8b60c8b3
 8012b9c:	3fc68a28 	.word	0x3fc68a28
 8012ba0:	509f79fb 	.word	0x509f79fb
 8012ba4:	3fd34413 	.word	0x3fd34413
 8012ba8:	08028ff0 	.word	0x08028ff0
 8012bac:	080291b2 	.word	0x080291b2
 8012bb0:	7ff00000 	.word	0x7ff00000
 8012bb4:	080291ae 	.word	0x080291ae
 8012bb8:	080291a5 	.word	0x080291a5
 8012bbc:	08028f75 	.word	0x08028f75
 8012bc0:	3ff80000 	.word	0x3ff80000
 8012bc4:	08029328 	.word	0x08029328
 8012bc8:	08029211 	.word	0x08029211
 8012bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bce:	9a00      	ldr	r2, [sp, #0]
 8012bd0:	601a      	str	r2, [r3, #0]
 8012bd2:	9b01      	ldr	r3, [sp, #4]
 8012bd4:	2b0e      	cmp	r3, #14
 8012bd6:	f200 80ad 	bhi.w	8012d34 <_dtoa_r+0x484>
 8012bda:	2d00      	cmp	r5, #0
 8012bdc:	f000 80aa 	beq.w	8012d34 <_dtoa_r+0x484>
 8012be0:	f1ba 0f00 	cmp.w	sl, #0
 8012be4:	dd36      	ble.n	8012c54 <_dtoa_r+0x3a4>
 8012be6:	4ac3      	ldr	r2, [pc, #780]	; (8012ef4 <_dtoa_r+0x644>)
 8012be8:	f00a 030f 	and.w	r3, sl, #15
 8012bec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012bf0:	ed93 7b00 	vldr	d7, [r3]
 8012bf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012bf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012bfc:	eeb0 8a47 	vmov.f32	s16, s14
 8012c00:	eef0 8a67 	vmov.f32	s17, s15
 8012c04:	d016      	beq.n	8012c34 <_dtoa_r+0x384>
 8012c06:	4bbc      	ldr	r3, [pc, #752]	; (8012ef8 <_dtoa_r+0x648>)
 8012c08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012c0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c10:	f7ed fe34 	bl	800087c <__aeabi_ddiv>
 8012c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c18:	f007 070f 	and.w	r7, r7, #15
 8012c1c:	2503      	movs	r5, #3
 8012c1e:	4eb6      	ldr	r6, [pc, #728]	; (8012ef8 <_dtoa_r+0x648>)
 8012c20:	b957      	cbnz	r7, 8012c38 <_dtoa_r+0x388>
 8012c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c26:	ec53 2b18 	vmov	r2, r3, d8
 8012c2a:	f7ed fe27 	bl	800087c <__aeabi_ddiv>
 8012c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c32:	e029      	b.n	8012c88 <_dtoa_r+0x3d8>
 8012c34:	2502      	movs	r5, #2
 8012c36:	e7f2      	b.n	8012c1e <_dtoa_r+0x36e>
 8012c38:	07f9      	lsls	r1, r7, #31
 8012c3a:	d508      	bpl.n	8012c4e <_dtoa_r+0x39e>
 8012c3c:	ec51 0b18 	vmov	r0, r1, d8
 8012c40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012c44:	f7ed fcf0 	bl	8000628 <__aeabi_dmul>
 8012c48:	ec41 0b18 	vmov	d8, r0, r1
 8012c4c:	3501      	adds	r5, #1
 8012c4e:	107f      	asrs	r7, r7, #1
 8012c50:	3608      	adds	r6, #8
 8012c52:	e7e5      	b.n	8012c20 <_dtoa_r+0x370>
 8012c54:	f000 80a6 	beq.w	8012da4 <_dtoa_r+0x4f4>
 8012c58:	f1ca 0600 	rsb	r6, sl, #0
 8012c5c:	4ba5      	ldr	r3, [pc, #660]	; (8012ef4 <_dtoa_r+0x644>)
 8012c5e:	4fa6      	ldr	r7, [pc, #664]	; (8012ef8 <_dtoa_r+0x648>)
 8012c60:	f006 020f 	and.w	r2, r6, #15
 8012c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012c70:	f7ed fcda 	bl	8000628 <__aeabi_dmul>
 8012c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c78:	1136      	asrs	r6, r6, #4
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	2502      	movs	r5, #2
 8012c7e:	2e00      	cmp	r6, #0
 8012c80:	f040 8085 	bne.w	8012d8e <_dtoa_r+0x4de>
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1d2      	bne.n	8012c2e <_dtoa_r+0x37e>
 8012c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f000 808c 	beq.w	8012da8 <_dtoa_r+0x4f8>
 8012c90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012c94:	4b99      	ldr	r3, [pc, #612]	; (8012efc <_dtoa_r+0x64c>)
 8012c96:	2200      	movs	r2, #0
 8012c98:	4630      	mov	r0, r6
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	f7ed ff36 	bl	8000b0c <__aeabi_dcmplt>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	f000 8081 	beq.w	8012da8 <_dtoa_r+0x4f8>
 8012ca6:	9b01      	ldr	r3, [sp, #4]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d07d      	beq.n	8012da8 <_dtoa_r+0x4f8>
 8012cac:	f1b9 0f00 	cmp.w	r9, #0
 8012cb0:	dd3c      	ble.n	8012d2c <_dtoa_r+0x47c>
 8012cb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012cb6:	9307      	str	r3, [sp, #28]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	4b91      	ldr	r3, [pc, #580]	; (8012f00 <_dtoa_r+0x650>)
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	4639      	mov	r1, r7
 8012cc0:	f7ed fcb2 	bl	8000628 <__aeabi_dmul>
 8012cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cc8:	3501      	adds	r5, #1
 8012cca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012cce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	f7ed fc3e 	bl	8000554 <__aeabi_i2d>
 8012cd8:	4632      	mov	r2, r6
 8012cda:	463b      	mov	r3, r7
 8012cdc:	f7ed fca4 	bl	8000628 <__aeabi_dmul>
 8012ce0:	4b88      	ldr	r3, [pc, #544]	; (8012f04 <_dtoa_r+0x654>)
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	f7ed faea 	bl	80002bc <__adddf3>
 8012ce8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cf0:	9303      	str	r3, [sp, #12]
 8012cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d15c      	bne.n	8012db2 <_dtoa_r+0x502>
 8012cf8:	4b83      	ldr	r3, [pc, #524]	; (8012f08 <_dtoa_r+0x658>)
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	4639      	mov	r1, r7
 8012d00:	f7ed fada 	bl	80002b8 <__aeabi_dsub>
 8012d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d08:	4606      	mov	r6, r0
 8012d0a:	460f      	mov	r7, r1
 8012d0c:	f7ed ff1c 	bl	8000b48 <__aeabi_dcmpgt>
 8012d10:	2800      	cmp	r0, #0
 8012d12:	f040 8296 	bne.w	8013242 <_dtoa_r+0x992>
 8012d16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d1a:	4630      	mov	r0, r6
 8012d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d20:	4639      	mov	r1, r7
 8012d22:	f7ed fef3 	bl	8000b0c <__aeabi_dcmplt>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	f040 8288 	bne.w	801323c <_dtoa_r+0x98c>
 8012d2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	f2c0 8158 	blt.w	8012fec <_dtoa_r+0x73c>
 8012d3c:	f1ba 0f0e 	cmp.w	sl, #14
 8012d40:	f300 8154 	bgt.w	8012fec <_dtoa_r+0x73c>
 8012d44:	4b6b      	ldr	r3, [pc, #428]	; (8012ef4 <_dtoa_r+0x644>)
 8012d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f280 80e3 	bge.w	8012f1c <_dtoa_r+0x66c>
 8012d56:	9b01      	ldr	r3, [sp, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	f300 80df 	bgt.w	8012f1c <_dtoa_r+0x66c>
 8012d5e:	f040 826d 	bne.w	801323c <_dtoa_r+0x98c>
 8012d62:	4b69      	ldr	r3, [pc, #420]	; (8012f08 <_dtoa_r+0x658>)
 8012d64:	2200      	movs	r2, #0
 8012d66:	4640      	mov	r0, r8
 8012d68:	4649      	mov	r1, r9
 8012d6a:	f7ed fc5d 	bl	8000628 <__aeabi_dmul>
 8012d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d72:	f7ed fedf 	bl	8000b34 <__aeabi_dcmpge>
 8012d76:	9e01      	ldr	r6, [sp, #4]
 8012d78:	4637      	mov	r7, r6
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	f040 8243 	bne.w	8013206 <_dtoa_r+0x956>
 8012d80:	9d00      	ldr	r5, [sp, #0]
 8012d82:	2331      	movs	r3, #49	; 0x31
 8012d84:	f805 3b01 	strb.w	r3, [r5], #1
 8012d88:	f10a 0a01 	add.w	sl, sl, #1
 8012d8c:	e23f      	b.n	801320e <_dtoa_r+0x95e>
 8012d8e:	07f2      	lsls	r2, r6, #31
 8012d90:	d505      	bpl.n	8012d9e <_dtoa_r+0x4ee>
 8012d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d96:	f7ed fc47 	bl	8000628 <__aeabi_dmul>
 8012d9a:	3501      	adds	r5, #1
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	1076      	asrs	r6, r6, #1
 8012da0:	3708      	adds	r7, #8
 8012da2:	e76c      	b.n	8012c7e <_dtoa_r+0x3ce>
 8012da4:	2502      	movs	r5, #2
 8012da6:	e76f      	b.n	8012c88 <_dtoa_r+0x3d8>
 8012da8:	9b01      	ldr	r3, [sp, #4]
 8012daa:	f8cd a01c 	str.w	sl, [sp, #28]
 8012dae:	930c      	str	r3, [sp, #48]	; 0x30
 8012db0:	e78d      	b.n	8012cce <_dtoa_r+0x41e>
 8012db2:	9900      	ldr	r1, [sp, #0]
 8012db4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012db8:	4b4e      	ldr	r3, [pc, #312]	; (8012ef4 <_dtoa_r+0x644>)
 8012dba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012dbe:	4401      	add	r1, r0
 8012dc0:	9102      	str	r1, [sp, #8]
 8012dc2:	9908      	ldr	r1, [sp, #32]
 8012dc4:	eeb0 8a47 	vmov.f32	s16, s14
 8012dc8:	eef0 8a67 	vmov.f32	s17, s15
 8012dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012dd4:	2900      	cmp	r1, #0
 8012dd6:	d045      	beq.n	8012e64 <_dtoa_r+0x5b4>
 8012dd8:	494c      	ldr	r1, [pc, #304]	; (8012f0c <_dtoa_r+0x65c>)
 8012dda:	2000      	movs	r0, #0
 8012ddc:	f7ed fd4e 	bl	800087c <__aeabi_ddiv>
 8012de0:	ec53 2b18 	vmov	r2, r3, d8
 8012de4:	f7ed fa68 	bl	80002b8 <__aeabi_dsub>
 8012de8:	9d00      	ldr	r5, [sp, #0]
 8012dea:	ec41 0b18 	vmov	d8, r0, r1
 8012dee:	4639      	mov	r1, r7
 8012df0:	4630      	mov	r0, r6
 8012df2:	f7ed fec9 	bl	8000b88 <__aeabi_d2iz>
 8012df6:	900c      	str	r0, [sp, #48]	; 0x30
 8012df8:	f7ed fbac 	bl	8000554 <__aeabi_i2d>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4630      	mov	r0, r6
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fa58 	bl	80002b8 <__aeabi_dsub>
 8012e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e0a:	3330      	adds	r3, #48	; 0x30
 8012e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8012e10:	ec53 2b18 	vmov	r2, r3, d8
 8012e14:	4606      	mov	r6, r0
 8012e16:	460f      	mov	r7, r1
 8012e18:	f7ed fe78 	bl	8000b0c <__aeabi_dcmplt>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d165      	bne.n	8012eec <_dtoa_r+0x63c>
 8012e20:	4632      	mov	r2, r6
 8012e22:	463b      	mov	r3, r7
 8012e24:	4935      	ldr	r1, [pc, #212]	; (8012efc <_dtoa_r+0x64c>)
 8012e26:	2000      	movs	r0, #0
 8012e28:	f7ed fa46 	bl	80002b8 <__aeabi_dsub>
 8012e2c:	ec53 2b18 	vmov	r2, r3, d8
 8012e30:	f7ed fe6c 	bl	8000b0c <__aeabi_dcmplt>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	f040 80b9 	bne.w	8012fac <_dtoa_r+0x6fc>
 8012e3a:	9b02      	ldr	r3, [sp, #8]
 8012e3c:	429d      	cmp	r5, r3
 8012e3e:	f43f af75 	beq.w	8012d2c <_dtoa_r+0x47c>
 8012e42:	4b2f      	ldr	r3, [pc, #188]	; (8012f00 <_dtoa_r+0x650>)
 8012e44:	ec51 0b18 	vmov	r0, r1, d8
 8012e48:	2200      	movs	r2, #0
 8012e4a:	f7ed fbed 	bl	8000628 <__aeabi_dmul>
 8012e4e:	4b2c      	ldr	r3, [pc, #176]	; (8012f00 <_dtoa_r+0x650>)
 8012e50:	ec41 0b18 	vmov	d8, r0, r1
 8012e54:	2200      	movs	r2, #0
 8012e56:	4630      	mov	r0, r6
 8012e58:	4639      	mov	r1, r7
 8012e5a:	f7ed fbe5 	bl	8000628 <__aeabi_dmul>
 8012e5e:	4606      	mov	r6, r0
 8012e60:	460f      	mov	r7, r1
 8012e62:	e7c4      	b.n	8012dee <_dtoa_r+0x53e>
 8012e64:	ec51 0b17 	vmov	r0, r1, d7
 8012e68:	f7ed fbde 	bl	8000628 <__aeabi_dmul>
 8012e6c:	9b02      	ldr	r3, [sp, #8]
 8012e6e:	9d00      	ldr	r5, [sp, #0]
 8012e70:	930c      	str	r3, [sp, #48]	; 0x30
 8012e72:	ec41 0b18 	vmov	d8, r0, r1
 8012e76:	4639      	mov	r1, r7
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f7ed fe85 	bl	8000b88 <__aeabi_d2iz>
 8012e7e:	9011      	str	r0, [sp, #68]	; 0x44
 8012e80:	f7ed fb68 	bl	8000554 <__aeabi_i2d>
 8012e84:	4602      	mov	r2, r0
 8012e86:	460b      	mov	r3, r1
 8012e88:	4630      	mov	r0, r6
 8012e8a:	4639      	mov	r1, r7
 8012e8c:	f7ed fa14 	bl	80002b8 <__aeabi_dsub>
 8012e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e92:	3330      	adds	r3, #48	; 0x30
 8012e94:	f805 3b01 	strb.w	r3, [r5], #1
 8012e98:	9b02      	ldr	r3, [sp, #8]
 8012e9a:	429d      	cmp	r5, r3
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	460f      	mov	r7, r1
 8012ea0:	f04f 0200 	mov.w	r2, #0
 8012ea4:	d134      	bne.n	8012f10 <_dtoa_r+0x660>
 8012ea6:	4b19      	ldr	r3, [pc, #100]	; (8012f0c <_dtoa_r+0x65c>)
 8012ea8:	ec51 0b18 	vmov	r0, r1, d8
 8012eac:	f7ed fa06 	bl	80002bc <__adddf3>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	f7ed fe46 	bl	8000b48 <__aeabi_dcmpgt>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	d175      	bne.n	8012fac <_dtoa_r+0x6fc>
 8012ec0:	ec53 2b18 	vmov	r2, r3, d8
 8012ec4:	4911      	ldr	r1, [pc, #68]	; (8012f0c <_dtoa_r+0x65c>)
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	f7ed f9f6 	bl	80002b8 <__aeabi_dsub>
 8012ecc:	4602      	mov	r2, r0
 8012ece:	460b      	mov	r3, r1
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	f7ed fe1a 	bl	8000b0c <__aeabi_dcmplt>
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	f43f af27 	beq.w	8012d2c <_dtoa_r+0x47c>
 8012ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ee0:	1e6b      	subs	r3, r5, #1
 8012ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8012ee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ee8:	2b30      	cmp	r3, #48	; 0x30
 8012eea:	d0f8      	beq.n	8012ede <_dtoa_r+0x62e>
 8012eec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012ef0:	e04a      	b.n	8012f88 <_dtoa_r+0x6d8>
 8012ef2:	bf00      	nop
 8012ef4:	08029328 	.word	0x08029328
 8012ef8:	08029300 	.word	0x08029300
 8012efc:	3ff00000 	.word	0x3ff00000
 8012f00:	40240000 	.word	0x40240000
 8012f04:	401c0000 	.word	0x401c0000
 8012f08:	40140000 	.word	0x40140000
 8012f0c:	3fe00000 	.word	0x3fe00000
 8012f10:	4baf      	ldr	r3, [pc, #700]	; (80131d0 <_dtoa_r+0x920>)
 8012f12:	f7ed fb89 	bl	8000628 <__aeabi_dmul>
 8012f16:	4606      	mov	r6, r0
 8012f18:	460f      	mov	r7, r1
 8012f1a:	e7ac      	b.n	8012e76 <_dtoa_r+0x5c6>
 8012f1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012f20:	9d00      	ldr	r5, [sp, #0]
 8012f22:	4642      	mov	r2, r8
 8012f24:	464b      	mov	r3, r9
 8012f26:	4630      	mov	r0, r6
 8012f28:	4639      	mov	r1, r7
 8012f2a:	f7ed fca7 	bl	800087c <__aeabi_ddiv>
 8012f2e:	f7ed fe2b 	bl	8000b88 <__aeabi_d2iz>
 8012f32:	9002      	str	r0, [sp, #8]
 8012f34:	f7ed fb0e 	bl	8000554 <__aeabi_i2d>
 8012f38:	4642      	mov	r2, r8
 8012f3a:	464b      	mov	r3, r9
 8012f3c:	f7ed fb74 	bl	8000628 <__aeabi_dmul>
 8012f40:	4602      	mov	r2, r0
 8012f42:	460b      	mov	r3, r1
 8012f44:	4630      	mov	r0, r6
 8012f46:	4639      	mov	r1, r7
 8012f48:	f7ed f9b6 	bl	80002b8 <__aeabi_dsub>
 8012f4c:	9e02      	ldr	r6, [sp, #8]
 8012f4e:	9f01      	ldr	r7, [sp, #4]
 8012f50:	3630      	adds	r6, #48	; 0x30
 8012f52:	f805 6b01 	strb.w	r6, [r5], #1
 8012f56:	9e00      	ldr	r6, [sp, #0]
 8012f58:	1bae      	subs	r6, r5, r6
 8012f5a:	42b7      	cmp	r7, r6
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	460b      	mov	r3, r1
 8012f60:	d137      	bne.n	8012fd2 <_dtoa_r+0x722>
 8012f62:	f7ed f9ab 	bl	80002bc <__adddf3>
 8012f66:	4642      	mov	r2, r8
 8012f68:	464b      	mov	r3, r9
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	460f      	mov	r7, r1
 8012f6e:	f7ed fdeb 	bl	8000b48 <__aeabi_dcmpgt>
 8012f72:	b9c8      	cbnz	r0, 8012fa8 <_dtoa_r+0x6f8>
 8012f74:	4642      	mov	r2, r8
 8012f76:	464b      	mov	r3, r9
 8012f78:	4630      	mov	r0, r6
 8012f7a:	4639      	mov	r1, r7
 8012f7c:	f7ed fdbc 	bl	8000af8 <__aeabi_dcmpeq>
 8012f80:	b110      	cbz	r0, 8012f88 <_dtoa_r+0x6d8>
 8012f82:	9b02      	ldr	r3, [sp, #8]
 8012f84:	07d9      	lsls	r1, r3, #31
 8012f86:	d40f      	bmi.n	8012fa8 <_dtoa_r+0x6f8>
 8012f88:	4620      	mov	r0, r4
 8012f8a:	4659      	mov	r1, fp
 8012f8c:	f000 fe6a 	bl	8013c64 <_Bfree>
 8012f90:	2300      	movs	r3, #0
 8012f92:	702b      	strb	r3, [r5, #0]
 8012f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f96:	f10a 0001 	add.w	r0, sl, #1
 8012f9a:	6018      	str	r0, [r3, #0]
 8012f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	f43f acd8 	beq.w	8012954 <_dtoa_r+0xa4>
 8012fa4:	601d      	str	r5, [r3, #0]
 8012fa6:	e4d5      	b.n	8012954 <_dtoa_r+0xa4>
 8012fa8:	f8cd a01c 	str.w	sl, [sp, #28]
 8012fac:	462b      	mov	r3, r5
 8012fae:	461d      	mov	r5, r3
 8012fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fb4:	2a39      	cmp	r2, #57	; 0x39
 8012fb6:	d108      	bne.n	8012fca <_dtoa_r+0x71a>
 8012fb8:	9a00      	ldr	r2, [sp, #0]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d1f7      	bne.n	8012fae <_dtoa_r+0x6fe>
 8012fbe:	9a07      	ldr	r2, [sp, #28]
 8012fc0:	9900      	ldr	r1, [sp, #0]
 8012fc2:	3201      	adds	r2, #1
 8012fc4:	9207      	str	r2, [sp, #28]
 8012fc6:	2230      	movs	r2, #48	; 0x30
 8012fc8:	700a      	strb	r2, [r1, #0]
 8012fca:	781a      	ldrb	r2, [r3, #0]
 8012fcc:	3201      	adds	r2, #1
 8012fce:	701a      	strb	r2, [r3, #0]
 8012fd0:	e78c      	b.n	8012eec <_dtoa_r+0x63c>
 8012fd2:	4b7f      	ldr	r3, [pc, #508]	; (80131d0 <_dtoa_r+0x920>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f7ed fb27 	bl	8000628 <__aeabi_dmul>
 8012fda:	2200      	movs	r2, #0
 8012fdc:	2300      	movs	r3, #0
 8012fde:	4606      	mov	r6, r0
 8012fe0:	460f      	mov	r7, r1
 8012fe2:	f7ed fd89 	bl	8000af8 <__aeabi_dcmpeq>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d09b      	beq.n	8012f22 <_dtoa_r+0x672>
 8012fea:	e7cd      	b.n	8012f88 <_dtoa_r+0x6d8>
 8012fec:	9a08      	ldr	r2, [sp, #32]
 8012fee:	2a00      	cmp	r2, #0
 8012ff0:	f000 80c4 	beq.w	801317c <_dtoa_r+0x8cc>
 8012ff4:	9a05      	ldr	r2, [sp, #20]
 8012ff6:	2a01      	cmp	r2, #1
 8012ff8:	f300 80a8 	bgt.w	801314c <_dtoa_r+0x89c>
 8012ffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ffe:	2a00      	cmp	r2, #0
 8013000:	f000 80a0 	beq.w	8013144 <_dtoa_r+0x894>
 8013004:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013008:	9e06      	ldr	r6, [sp, #24]
 801300a:	4645      	mov	r5, r8
 801300c:	9a04      	ldr	r2, [sp, #16]
 801300e:	2101      	movs	r1, #1
 8013010:	441a      	add	r2, r3
 8013012:	4620      	mov	r0, r4
 8013014:	4498      	add	r8, r3
 8013016:	9204      	str	r2, [sp, #16]
 8013018:	f000 ff2a 	bl	8013e70 <__i2b>
 801301c:	4607      	mov	r7, r0
 801301e:	2d00      	cmp	r5, #0
 8013020:	dd0b      	ble.n	801303a <_dtoa_r+0x78a>
 8013022:	9b04      	ldr	r3, [sp, #16]
 8013024:	2b00      	cmp	r3, #0
 8013026:	dd08      	ble.n	801303a <_dtoa_r+0x78a>
 8013028:	42ab      	cmp	r3, r5
 801302a:	9a04      	ldr	r2, [sp, #16]
 801302c:	bfa8      	it	ge
 801302e:	462b      	movge	r3, r5
 8013030:	eba8 0803 	sub.w	r8, r8, r3
 8013034:	1aed      	subs	r5, r5, r3
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	9304      	str	r3, [sp, #16]
 801303a:	9b06      	ldr	r3, [sp, #24]
 801303c:	b1fb      	cbz	r3, 801307e <_dtoa_r+0x7ce>
 801303e:	9b08      	ldr	r3, [sp, #32]
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 809f 	beq.w	8013184 <_dtoa_r+0x8d4>
 8013046:	2e00      	cmp	r6, #0
 8013048:	dd11      	ble.n	801306e <_dtoa_r+0x7be>
 801304a:	4639      	mov	r1, r7
 801304c:	4632      	mov	r2, r6
 801304e:	4620      	mov	r0, r4
 8013050:	f000 ffca 	bl	8013fe8 <__pow5mult>
 8013054:	465a      	mov	r2, fp
 8013056:	4601      	mov	r1, r0
 8013058:	4607      	mov	r7, r0
 801305a:	4620      	mov	r0, r4
 801305c:	f000 ff1e 	bl	8013e9c <__multiply>
 8013060:	4659      	mov	r1, fp
 8013062:	9007      	str	r0, [sp, #28]
 8013064:	4620      	mov	r0, r4
 8013066:	f000 fdfd 	bl	8013c64 <_Bfree>
 801306a:	9b07      	ldr	r3, [sp, #28]
 801306c:	469b      	mov	fp, r3
 801306e:	9b06      	ldr	r3, [sp, #24]
 8013070:	1b9a      	subs	r2, r3, r6
 8013072:	d004      	beq.n	801307e <_dtoa_r+0x7ce>
 8013074:	4659      	mov	r1, fp
 8013076:	4620      	mov	r0, r4
 8013078:	f000 ffb6 	bl	8013fe8 <__pow5mult>
 801307c:	4683      	mov	fp, r0
 801307e:	2101      	movs	r1, #1
 8013080:	4620      	mov	r0, r4
 8013082:	f000 fef5 	bl	8013e70 <__i2b>
 8013086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013088:	2b00      	cmp	r3, #0
 801308a:	4606      	mov	r6, r0
 801308c:	dd7c      	ble.n	8013188 <_dtoa_r+0x8d8>
 801308e:	461a      	mov	r2, r3
 8013090:	4601      	mov	r1, r0
 8013092:	4620      	mov	r0, r4
 8013094:	f000 ffa8 	bl	8013fe8 <__pow5mult>
 8013098:	9b05      	ldr	r3, [sp, #20]
 801309a:	2b01      	cmp	r3, #1
 801309c:	4606      	mov	r6, r0
 801309e:	dd76      	ble.n	801318e <_dtoa_r+0x8de>
 80130a0:	2300      	movs	r3, #0
 80130a2:	9306      	str	r3, [sp, #24]
 80130a4:	6933      	ldr	r3, [r6, #16]
 80130a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80130aa:	6918      	ldr	r0, [r3, #16]
 80130ac:	f000 fe90 	bl	8013dd0 <__hi0bits>
 80130b0:	f1c0 0020 	rsb	r0, r0, #32
 80130b4:	9b04      	ldr	r3, [sp, #16]
 80130b6:	4418      	add	r0, r3
 80130b8:	f010 001f 	ands.w	r0, r0, #31
 80130bc:	f000 8086 	beq.w	80131cc <_dtoa_r+0x91c>
 80130c0:	f1c0 0320 	rsb	r3, r0, #32
 80130c4:	2b04      	cmp	r3, #4
 80130c6:	dd7f      	ble.n	80131c8 <_dtoa_r+0x918>
 80130c8:	f1c0 001c 	rsb	r0, r0, #28
 80130cc:	9b04      	ldr	r3, [sp, #16]
 80130ce:	4403      	add	r3, r0
 80130d0:	4480      	add	r8, r0
 80130d2:	4405      	add	r5, r0
 80130d4:	9304      	str	r3, [sp, #16]
 80130d6:	f1b8 0f00 	cmp.w	r8, #0
 80130da:	dd05      	ble.n	80130e8 <_dtoa_r+0x838>
 80130dc:	4659      	mov	r1, fp
 80130de:	4642      	mov	r2, r8
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 ffdb 	bl	801409c <__lshift>
 80130e6:	4683      	mov	fp, r0
 80130e8:	9b04      	ldr	r3, [sp, #16]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	dd05      	ble.n	80130fa <_dtoa_r+0x84a>
 80130ee:	4631      	mov	r1, r6
 80130f0:	461a      	mov	r2, r3
 80130f2:	4620      	mov	r0, r4
 80130f4:	f000 ffd2 	bl	801409c <__lshift>
 80130f8:	4606      	mov	r6, r0
 80130fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d069      	beq.n	80131d4 <_dtoa_r+0x924>
 8013100:	4631      	mov	r1, r6
 8013102:	4658      	mov	r0, fp
 8013104:	f001 f836 	bl	8014174 <__mcmp>
 8013108:	2800      	cmp	r0, #0
 801310a:	da63      	bge.n	80131d4 <_dtoa_r+0x924>
 801310c:	2300      	movs	r3, #0
 801310e:	4659      	mov	r1, fp
 8013110:	220a      	movs	r2, #10
 8013112:	4620      	mov	r0, r4
 8013114:	f000 fdc8 	bl	8013ca8 <__multadd>
 8013118:	9b08      	ldr	r3, [sp, #32]
 801311a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801311e:	4683      	mov	fp, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 818f 	beq.w	8013444 <_dtoa_r+0xb94>
 8013126:	4639      	mov	r1, r7
 8013128:	2300      	movs	r3, #0
 801312a:	220a      	movs	r2, #10
 801312c:	4620      	mov	r0, r4
 801312e:	f000 fdbb 	bl	8013ca8 <__multadd>
 8013132:	f1b9 0f00 	cmp.w	r9, #0
 8013136:	4607      	mov	r7, r0
 8013138:	f300 808e 	bgt.w	8013258 <_dtoa_r+0x9a8>
 801313c:	9b05      	ldr	r3, [sp, #20]
 801313e:	2b02      	cmp	r3, #2
 8013140:	dc50      	bgt.n	80131e4 <_dtoa_r+0x934>
 8013142:	e089      	b.n	8013258 <_dtoa_r+0x9a8>
 8013144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801314a:	e75d      	b.n	8013008 <_dtoa_r+0x758>
 801314c:	9b01      	ldr	r3, [sp, #4]
 801314e:	1e5e      	subs	r6, r3, #1
 8013150:	9b06      	ldr	r3, [sp, #24]
 8013152:	42b3      	cmp	r3, r6
 8013154:	bfbf      	itttt	lt
 8013156:	9b06      	ldrlt	r3, [sp, #24]
 8013158:	9606      	strlt	r6, [sp, #24]
 801315a:	1af2      	sublt	r2, r6, r3
 801315c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801315e:	bfb6      	itet	lt
 8013160:	189b      	addlt	r3, r3, r2
 8013162:	1b9e      	subge	r6, r3, r6
 8013164:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013166:	9b01      	ldr	r3, [sp, #4]
 8013168:	bfb8      	it	lt
 801316a:	2600      	movlt	r6, #0
 801316c:	2b00      	cmp	r3, #0
 801316e:	bfb5      	itete	lt
 8013170:	eba8 0503 	sublt.w	r5, r8, r3
 8013174:	9b01      	ldrge	r3, [sp, #4]
 8013176:	2300      	movlt	r3, #0
 8013178:	4645      	movge	r5, r8
 801317a:	e747      	b.n	801300c <_dtoa_r+0x75c>
 801317c:	9e06      	ldr	r6, [sp, #24]
 801317e:	9f08      	ldr	r7, [sp, #32]
 8013180:	4645      	mov	r5, r8
 8013182:	e74c      	b.n	801301e <_dtoa_r+0x76e>
 8013184:	9a06      	ldr	r2, [sp, #24]
 8013186:	e775      	b.n	8013074 <_dtoa_r+0x7c4>
 8013188:	9b05      	ldr	r3, [sp, #20]
 801318a:	2b01      	cmp	r3, #1
 801318c:	dc18      	bgt.n	80131c0 <_dtoa_r+0x910>
 801318e:	9b02      	ldr	r3, [sp, #8]
 8013190:	b9b3      	cbnz	r3, 80131c0 <_dtoa_r+0x910>
 8013192:	9b03      	ldr	r3, [sp, #12]
 8013194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013198:	b9a3      	cbnz	r3, 80131c4 <_dtoa_r+0x914>
 801319a:	9b03      	ldr	r3, [sp, #12]
 801319c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131a0:	0d1b      	lsrs	r3, r3, #20
 80131a2:	051b      	lsls	r3, r3, #20
 80131a4:	b12b      	cbz	r3, 80131b2 <_dtoa_r+0x902>
 80131a6:	9b04      	ldr	r3, [sp, #16]
 80131a8:	3301      	adds	r3, #1
 80131aa:	9304      	str	r3, [sp, #16]
 80131ac:	f108 0801 	add.w	r8, r8, #1
 80131b0:	2301      	movs	r3, #1
 80131b2:	9306      	str	r3, [sp, #24]
 80131b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	f47f af74 	bne.w	80130a4 <_dtoa_r+0x7f4>
 80131bc:	2001      	movs	r0, #1
 80131be:	e779      	b.n	80130b4 <_dtoa_r+0x804>
 80131c0:	2300      	movs	r3, #0
 80131c2:	e7f6      	b.n	80131b2 <_dtoa_r+0x902>
 80131c4:	9b02      	ldr	r3, [sp, #8]
 80131c6:	e7f4      	b.n	80131b2 <_dtoa_r+0x902>
 80131c8:	d085      	beq.n	80130d6 <_dtoa_r+0x826>
 80131ca:	4618      	mov	r0, r3
 80131cc:	301c      	adds	r0, #28
 80131ce:	e77d      	b.n	80130cc <_dtoa_r+0x81c>
 80131d0:	40240000 	.word	0x40240000
 80131d4:	9b01      	ldr	r3, [sp, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	dc38      	bgt.n	801324c <_dtoa_r+0x99c>
 80131da:	9b05      	ldr	r3, [sp, #20]
 80131dc:	2b02      	cmp	r3, #2
 80131de:	dd35      	ble.n	801324c <_dtoa_r+0x99c>
 80131e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80131e4:	f1b9 0f00 	cmp.w	r9, #0
 80131e8:	d10d      	bne.n	8013206 <_dtoa_r+0x956>
 80131ea:	4631      	mov	r1, r6
 80131ec:	464b      	mov	r3, r9
 80131ee:	2205      	movs	r2, #5
 80131f0:	4620      	mov	r0, r4
 80131f2:	f000 fd59 	bl	8013ca8 <__multadd>
 80131f6:	4601      	mov	r1, r0
 80131f8:	4606      	mov	r6, r0
 80131fa:	4658      	mov	r0, fp
 80131fc:	f000 ffba 	bl	8014174 <__mcmp>
 8013200:	2800      	cmp	r0, #0
 8013202:	f73f adbd 	bgt.w	8012d80 <_dtoa_r+0x4d0>
 8013206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013208:	9d00      	ldr	r5, [sp, #0]
 801320a:	ea6f 0a03 	mvn.w	sl, r3
 801320e:	f04f 0800 	mov.w	r8, #0
 8013212:	4631      	mov	r1, r6
 8013214:	4620      	mov	r0, r4
 8013216:	f000 fd25 	bl	8013c64 <_Bfree>
 801321a:	2f00      	cmp	r7, #0
 801321c:	f43f aeb4 	beq.w	8012f88 <_dtoa_r+0x6d8>
 8013220:	f1b8 0f00 	cmp.w	r8, #0
 8013224:	d005      	beq.n	8013232 <_dtoa_r+0x982>
 8013226:	45b8      	cmp	r8, r7
 8013228:	d003      	beq.n	8013232 <_dtoa_r+0x982>
 801322a:	4641      	mov	r1, r8
 801322c:	4620      	mov	r0, r4
 801322e:	f000 fd19 	bl	8013c64 <_Bfree>
 8013232:	4639      	mov	r1, r7
 8013234:	4620      	mov	r0, r4
 8013236:	f000 fd15 	bl	8013c64 <_Bfree>
 801323a:	e6a5      	b.n	8012f88 <_dtoa_r+0x6d8>
 801323c:	2600      	movs	r6, #0
 801323e:	4637      	mov	r7, r6
 8013240:	e7e1      	b.n	8013206 <_dtoa_r+0x956>
 8013242:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013244:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013248:	4637      	mov	r7, r6
 801324a:	e599      	b.n	8012d80 <_dtoa_r+0x4d0>
 801324c:	9b08      	ldr	r3, [sp, #32]
 801324e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	f000 80fd 	beq.w	8013452 <_dtoa_r+0xba2>
 8013258:	2d00      	cmp	r5, #0
 801325a:	dd05      	ble.n	8013268 <_dtoa_r+0x9b8>
 801325c:	4639      	mov	r1, r7
 801325e:	462a      	mov	r2, r5
 8013260:	4620      	mov	r0, r4
 8013262:	f000 ff1b 	bl	801409c <__lshift>
 8013266:	4607      	mov	r7, r0
 8013268:	9b06      	ldr	r3, [sp, #24]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d05c      	beq.n	8013328 <_dtoa_r+0xa78>
 801326e:	6879      	ldr	r1, [r7, #4]
 8013270:	4620      	mov	r0, r4
 8013272:	f000 fcb7 	bl	8013be4 <_Balloc>
 8013276:	4605      	mov	r5, r0
 8013278:	b928      	cbnz	r0, 8013286 <_dtoa_r+0x9d6>
 801327a:	4b80      	ldr	r3, [pc, #512]	; (801347c <_dtoa_r+0xbcc>)
 801327c:	4602      	mov	r2, r0
 801327e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013282:	f7ff bb2e 	b.w	80128e2 <_dtoa_r+0x32>
 8013286:	693a      	ldr	r2, [r7, #16]
 8013288:	3202      	adds	r2, #2
 801328a:	0092      	lsls	r2, r2, #2
 801328c:	f107 010c 	add.w	r1, r7, #12
 8013290:	300c      	adds	r0, #12
 8013292:	f000 fc99 	bl	8013bc8 <memcpy>
 8013296:	2201      	movs	r2, #1
 8013298:	4629      	mov	r1, r5
 801329a:	4620      	mov	r0, r4
 801329c:	f000 fefe 	bl	801409c <__lshift>
 80132a0:	9b00      	ldr	r3, [sp, #0]
 80132a2:	3301      	adds	r3, #1
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	9b00      	ldr	r3, [sp, #0]
 80132a8:	444b      	add	r3, r9
 80132aa:	9307      	str	r3, [sp, #28]
 80132ac:	9b02      	ldr	r3, [sp, #8]
 80132ae:	f003 0301 	and.w	r3, r3, #1
 80132b2:	46b8      	mov	r8, r7
 80132b4:	9306      	str	r3, [sp, #24]
 80132b6:	4607      	mov	r7, r0
 80132b8:	9b01      	ldr	r3, [sp, #4]
 80132ba:	4631      	mov	r1, r6
 80132bc:	3b01      	subs	r3, #1
 80132be:	4658      	mov	r0, fp
 80132c0:	9302      	str	r3, [sp, #8]
 80132c2:	f7ff fa67 	bl	8012794 <quorem>
 80132c6:	4603      	mov	r3, r0
 80132c8:	3330      	adds	r3, #48	; 0x30
 80132ca:	9004      	str	r0, [sp, #16]
 80132cc:	4641      	mov	r1, r8
 80132ce:	4658      	mov	r0, fp
 80132d0:	9308      	str	r3, [sp, #32]
 80132d2:	f000 ff4f 	bl	8014174 <__mcmp>
 80132d6:	463a      	mov	r2, r7
 80132d8:	4681      	mov	r9, r0
 80132da:	4631      	mov	r1, r6
 80132dc:	4620      	mov	r0, r4
 80132de:	f000 ff65 	bl	80141ac <__mdiff>
 80132e2:	68c2      	ldr	r2, [r0, #12]
 80132e4:	9b08      	ldr	r3, [sp, #32]
 80132e6:	4605      	mov	r5, r0
 80132e8:	bb02      	cbnz	r2, 801332c <_dtoa_r+0xa7c>
 80132ea:	4601      	mov	r1, r0
 80132ec:	4658      	mov	r0, fp
 80132ee:	f000 ff41 	bl	8014174 <__mcmp>
 80132f2:	9b08      	ldr	r3, [sp, #32]
 80132f4:	4602      	mov	r2, r0
 80132f6:	4629      	mov	r1, r5
 80132f8:	4620      	mov	r0, r4
 80132fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80132fe:	f000 fcb1 	bl	8013c64 <_Bfree>
 8013302:	9b05      	ldr	r3, [sp, #20]
 8013304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013306:	9d01      	ldr	r5, [sp, #4]
 8013308:	ea43 0102 	orr.w	r1, r3, r2
 801330c:	9b06      	ldr	r3, [sp, #24]
 801330e:	430b      	orrs	r3, r1
 8013310:	9b08      	ldr	r3, [sp, #32]
 8013312:	d10d      	bne.n	8013330 <_dtoa_r+0xa80>
 8013314:	2b39      	cmp	r3, #57	; 0x39
 8013316:	d029      	beq.n	801336c <_dtoa_r+0xabc>
 8013318:	f1b9 0f00 	cmp.w	r9, #0
 801331c:	dd01      	ble.n	8013322 <_dtoa_r+0xa72>
 801331e:	9b04      	ldr	r3, [sp, #16]
 8013320:	3331      	adds	r3, #49	; 0x31
 8013322:	9a02      	ldr	r2, [sp, #8]
 8013324:	7013      	strb	r3, [r2, #0]
 8013326:	e774      	b.n	8013212 <_dtoa_r+0x962>
 8013328:	4638      	mov	r0, r7
 801332a:	e7b9      	b.n	80132a0 <_dtoa_r+0x9f0>
 801332c:	2201      	movs	r2, #1
 801332e:	e7e2      	b.n	80132f6 <_dtoa_r+0xa46>
 8013330:	f1b9 0f00 	cmp.w	r9, #0
 8013334:	db06      	blt.n	8013344 <_dtoa_r+0xa94>
 8013336:	9905      	ldr	r1, [sp, #20]
 8013338:	ea41 0909 	orr.w	r9, r1, r9
 801333c:	9906      	ldr	r1, [sp, #24]
 801333e:	ea59 0101 	orrs.w	r1, r9, r1
 8013342:	d120      	bne.n	8013386 <_dtoa_r+0xad6>
 8013344:	2a00      	cmp	r2, #0
 8013346:	ddec      	ble.n	8013322 <_dtoa_r+0xa72>
 8013348:	4659      	mov	r1, fp
 801334a:	2201      	movs	r2, #1
 801334c:	4620      	mov	r0, r4
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	f000 fea4 	bl	801409c <__lshift>
 8013354:	4631      	mov	r1, r6
 8013356:	4683      	mov	fp, r0
 8013358:	f000 ff0c 	bl	8014174 <__mcmp>
 801335c:	2800      	cmp	r0, #0
 801335e:	9b01      	ldr	r3, [sp, #4]
 8013360:	dc02      	bgt.n	8013368 <_dtoa_r+0xab8>
 8013362:	d1de      	bne.n	8013322 <_dtoa_r+0xa72>
 8013364:	07da      	lsls	r2, r3, #31
 8013366:	d5dc      	bpl.n	8013322 <_dtoa_r+0xa72>
 8013368:	2b39      	cmp	r3, #57	; 0x39
 801336a:	d1d8      	bne.n	801331e <_dtoa_r+0xa6e>
 801336c:	9a02      	ldr	r2, [sp, #8]
 801336e:	2339      	movs	r3, #57	; 0x39
 8013370:	7013      	strb	r3, [r2, #0]
 8013372:	462b      	mov	r3, r5
 8013374:	461d      	mov	r5, r3
 8013376:	3b01      	subs	r3, #1
 8013378:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801337c:	2a39      	cmp	r2, #57	; 0x39
 801337e:	d050      	beq.n	8013422 <_dtoa_r+0xb72>
 8013380:	3201      	adds	r2, #1
 8013382:	701a      	strb	r2, [r3, #0]
 8013384:	e745      	b.n	8013212 <_dtoa_r+0x962>
 8013386:	2a00      	cmp	r2, #0
 8013388:	dd03      	ble.n	8013392 <_dtoa_r+0xae2>
 801338a:	2b39      	cmp	r3, #57	; 0x39
 801338c:	d0ee      	beq.n	801336c <_dtoa_r+0xabc>
 801338e:	3301      	adds	r3, #1
 8013390:	e7c7      	b.n	8013322 <_dtoa_r+0xa72>
 8013392:	9a01      	ldr	r2, [sp, #4]
 8013394:	9907      	ldr	r1, [sp, #28]
 8013396:	f802 3c01 	strb.w	r3, [r2, #-1]
 801339a:	428a      	cmp	r2, r1
 801339c:	d02a      	beq.n	80133f4 <_dtoa_r+0xb44>
 801339e:	4659      	mov	r1, fp
 80133a0:	2300      	movs	r3, #0
 80133a2:	220a      	movs	r2, #10
 80133a4:	4620      	mov	r0, r4
 80133a6:	f000 fc7f 	bl	8013ca8 <__multadd>
 80133aa:	45b8      	cmp	r8, r7
 80133ac:	4683      	mov	fp, r0
 80133ae:	f04f 0300 	mov.w	r3, #0
 80133b2:	f04f 020a 	mov.w	r2, #10
 80133b6:	4641      	mov	r1, r8
 80133b8:	4620      	mov	r0, r4
 80133ba:	d107      	bne.n	80133cc <_dtoa_r+0xb1c>
 80133bc:	f000 fc74 	bl	8013ca8 <__multadd>
 80133c0:	4680      	mov	r8, r0
 80133c2:	4607      	mov	r7, r0
 80133c4:	9b01      	ldr	r3, [sp, #4]
 80133c6:	3301      	adds	r3, #1
 80133c8:	9301      	str	r3, [sp, #4]
 80133ca:	e775      	b.n	80132b8 <_dtoa_r+0xa08>
 80133cc:	f000 fc6c 	bl	8013ca8 <__multadd>
 80133d0:	4639      	mov	r1, r7
 80133d2:	4680      	mov	r8, r0
 80133d4:	2300      	movs	r3, #0
 80133d6:	220a      	movs	r2, #10
 80133d8:	4620      	mov	r0, r4
 80133da:	f000 fc65 	bl	8013ca8 <__multadd>
 80133de:	4607      	mov	r7, r0
 80133e0:	e7f0      	b.n	80133c4 <_dtoa_r+0xb14>
 80133e2:	f1b9 0f00 	cmp.w	r9, #0
 80133e6:	9a00      	ldr	r2, [sp, #0]
 80133e8:	bfcc      	ite	gt
 80133ea:	464d      	movgt	r5, r9
 80133ec:	2501      	movle	r5, #1
 80133ee:	4415      	add	r5, r2
 80133f0:	f04f 0800 	mov.w	r8, #0
 80133f4:	4659      	mov	r1, fp
 80133f6:	2201      	movs	r2, #1
 80133f8:	4620      	mov	r0, r4
 80133fa:	9301      	str	r3, [sp, #4]
 80133fc:	f000 fe4e 	bl	801409c <__lshift>
 8013400:	4631      	mov	r1, r6
 8013402:	4683      	mov	fp, r0
 8013404:	f000 feb6 	bl	8014174 <__mcmp>
 8013408:	2800      	cmp	r0, #0
 801340a:	dcb2      	bgt.n	8013372 <_dtoa_r+0xac2>
 801340c:	d102      	bne.n	8013414 <_dtoa_r+0xb64>
 801340e:	9b01      	ldr	r3, [sp, #4]
 8013410:	07db      	lsls	r3, r3, #31
 8013412:	d4ae      	bmi.n	8013372 <_dtoa_r+0xac2>
 8013414:	462b      	mov	r3, r5
 8013416:	461d      	mov	r5, r3
 8013418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801341c:	2a30      	cmp	r2, #48	; 0x30
 801341e:	d0fa      	beq.n	8013416 <_dtoa_r+0xb66>
 8013420:	e6f7      	b.n	8013212 <_dtoa_r+0x962>
 8013422:	9a00      	ldr	r2, [sp, #0]
 8013424:	429a      	cmp	r2, r3
 8013426:	d1a5      	bne.n	8013374 <_dtoa_r+0xac4>
 8013428:	f10a 0a01 	add.w	sl, sl, #1
 801342c:	2331      	movs	r3, #49	; 0x31
 801342e:	e779      	b.n	8013324 <_dtoa_r+0xa74>
 8013430:	4b13      	ldr	r3, [pc, #76]	; (8013480 <_dtoa_r+0xbd0>)
 8013432:	f7ff baaf 	b.w	8012994 <_dtoa_r+0xe4>
 8013436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013438:	2b00      	cmp	r3, #0
 801343a:	f47f aa86 	bne.w	801294a <_dtoa_r+0x9a>
 801343e:	4b11      	ldr	r3, [pc, #68]	; (8013484 <_dtoa_r+0xbd4>)
 8013440:	f7ff baa8 	b.w	8012994 <_dtoa_r+0xe4>
 8013444:	f1b9 0f00 	cmp.w	r9, #0
 8013448:	dc03      	bgt.n	8013452 <_dtoa_r+0xba2>
 801344a:	9b05      	ldr	r3, [sp, #20]
 801344c:	2b02      	cmp	r3, #2
 801344e:	f73f aec9 	bgt.w	80131e4 <_dtoa_r+0x934>
 8013452:	9d00      	ldr	r5, [sp, #0]
 8013454:	4631      	mov	r1, r6
 8013456:	4658      	mov	r0, fp
 8013458:	f7ff f99c 	bl	8012794 <quorem>
 801345c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013460:	f805 3b01 	strb.w	r3, [r5], #1
 8013464:	9a00      	ldr	r2, [sp, #0]
 8013466:	1aaa      	subs	r2, r5, r2
 8013468:	4591      	cmp	r9, r2
 801346a:	ddba      	ble.n	80133e2 <_dtoa_r+0xb32>
 801346c:	4659      	mov	r1, fp
 801346e:	2300      	movs	r3, #0
 8013470:	220a      	movs	r2, #10
 8013472:	4620      	mov	r0, r4
 8013474:	f000 fc18 	bl	8013ca8 <__multadd>
 8013478:	4683      	mov	fp, r0
 801347a:	e7eb      	b.n	8013454 <_dtoa_r+0xba4>
 801347c:	08029211 	.word	0x08029211
 8013480:	08028f74 	.word	0x08028f74
 8013484:	080291a5 	.word	0x080291a5

08013488 <fiprintf>:
 8013488:	b40e      	push	{r1, r2, r3}
 801348a:	b503      	push	{r0, r1, lr}
 801348c:	4601      	mov	r1, r0
 801348e:	ab03      	add	r3, sp, #12
 8013490:	4805      	ldr	r0, [pc, #20]	; (80134a8 <fiprintf+0x20>)
 8013492:	f853 2b04 	ldr.w	r2, [r3], #4
 8013496:	6800      	ldr	r0, [r0, #0]
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	f001 fa9d 	bl	80149d8 <_vfiprintf_r>
 801349e:	b002      	add	sp, #8
 80134a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80134a4:	b003      	add	sp, #12
 80134a6:	4770      	bx	lr
 80134a8:	20000040 	.word	0x20000040

080134ac <rshift>:
 80134ac:	6903      	ldr	r3, [r0, #16]
 80134ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80134b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80134ba:	f100 0414 	add.w	r4, r0, #20
 80134be:	dd45      	ble.n	801354c <rshift+0xa0>
 80134c0:	f011 011f 	ands.w	r1, r1, #31
 80134c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80134c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80134cc:	d10c      	bne.n	80134e8 <rshift+0x3c>
 80134ce:	f100 0710 	add.w	r7, r0, #16
 80134d2:	4629      	mov	r1, r5
 80134d4:	42b1      	cmp	r1, r6
 80134d6:	d334      	bcc.n	8013542 <rshift+0x96>
 80134d8:	1a9b      	subs	r3, r3, r2
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	1eea      	subs	r2, r5, #3
 80134de:	4296      	cmp	r6, r2
 80134e0:	bf38      	it	cc
 80134e2:	2300      	movcc	r3, #0
 80134e4:	4423      	add	r3, r4
 80134e6:	e015      	b.n	8013514 <rshift+0x68>
 80134e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80134ec:	f1c1 0820 	rsb	r8, r1, #32
 80134f0:	40cf      	lsrs	r7, r1
 80134f2:	f105 0e04 	add.w	lr, r5, #4
 80134f6:	46a1      	mov	r9, r4
 80134f8:	4576      	cmp	r6, lr
 80134fa:	46f4      	mov	ip, lr
 80134fc:	d815      	bhi.n	801352a <rshift+0x7e>
 80134fe:	1a9b      	subs	r3, r3, r2
 8013500:	009a      	lsls	r2, r3, #2
 8013502:	3a04      	subs	r2, #4
 8013504:	3501      	adds	r5, #1
 8013506:	42ae      	cmp	r6, r5
 8013508:	bf38      	it	cc
 801350a:	2200      	movcc	r2, #0
 801350c:	18a3      	adds	r3, r4, r2
 801350e:	50a7      	str	r7, [r4, r2]
 8013510:	b107      	cbz	r7, 8013514 <rshift+0x68>
 8013512:	3304      	adds	r3, #4
 8013514:	1b1a      	subs	r2, r3, r4
 8013516:	42a3      	cmp	r3, r4
 8013518:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801351c:	bf08      	it	eq
 801351e:	2300      	moveq	r3, #0
 8013520:	6102      	str	r2, [r0, #16]
 8013522:	bf08      	it	eq
 8013524:	6143      	streq	r3, [r0, #20]
 8013526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801352a:	f8dc c000 	ldr.w	ip, [ip]
 801352e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013532:	ea4c 0707 	orr.w	r7, ip, r7
 8013536:	f849 7b04 	str.w	r7, [r9], #4
 801353a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801353e:	40cf      	lsrs	r7, r1
 8013540:	e7da      	b.n	80134f8 <rshift+0x4c>
 8013542:	f851 cb04 	ldr.w	ip, [r1], #4
 8013546:	f847 cf04 	str.w	ip, [r7, #4]!
 801354a:	e7c3      	b.n	80134d4 <rshift+0x28>
 801354c:	4623      	mov	r3, r4
 801354e:	e7e1      	b.n	8013514 <rshift+0x68>

08013550 <__hexdig_fun>:
 8013550:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013554:	2b09      	cmp	r3, #9
 8013556:	d802      	bhi.n	801355e <__hexdig_fun+0xe>
 8013558:	3820      	subs	r0, #32
 801355a:	b2c0      	uxtb	r0, r0
 801355c:	4770      	bx	lr
 801355e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013562:	2b05      	cmp	r3, #5
 8013564:	d801      	bhi.n	801356a <__hexdig_fun+0x1a>
 8013566:	3847      	subs	r0, #71	; 0x47
 8013568:	e7f7      	b.n	801355a <__hexdig_fun+0xa>
 801356a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801356e:	2b05      	cmp	r3, #5
 8013570:	d801      	bhi.n	8013576 <__hexdig_fun+0x26>
 8013572:	3827      	subs	r0, #39	; 0x27
 8013574:	e7f1      	b.n	801355a <__hexdig_fun+0xa>
 8013576:	2000      	movs	r0, #0
 8013578:	4770      	bx	lr
	...

0801357c <__gethex>:
 801357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	ed2d 8b02 	vpush	{d8}
 8013584:	b089      	sub	sp, #36	; 0x24
 8013586:	ee08 0a10 	vmov	s16, r0
 801358a:	9304      	str	r3, [sp, #16]
 801358c:	4bbc      	ldr	r3, [pc, #752]	; (8013880 <__gethex+0x304>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	9301      	str	r3, [sp, #4]
 8013592:	4618      	mov	r0, r3
 8013594:	468b      	mov	fp, r1
 8013596:	4690      	mov	r8, r2
 8013598:	f7ec fe2c 	bl	80001f4 <strlen>
 801359c:	9b01      	ldr	r3, [sp, #4]
 801359e:	f8db 2000 	ldr.w	r2, [fp]
 80135a2:	4403      	add	r3, r0
 80135a4:	4682      	mov	sl, r0
 80135a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80135aa:	9305      	str	r3, [sp, #20]
 80135ac:	1c93      	adds	r3, r2, #2
 80135ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80135b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80135b6:	32fe      	adds	r2, #254	; 0xfe
 80135b8:	18d1      	adds	r1, r2, r3
 80135ba:	461f      	mov	r7, r3
 80135bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80135c0:	9100      	str	r1, [sp, #0]
 80135c2:	2830      	cmp	r0, #48	; 0x30
 80135c4:	d0f8      	beq.n	80135b8 <__gethex+0x3c>
 80135c6:	f7ff ffc3 	bl	8013550 <__hexdig_fun>
 80135ca:	4604      	mov	r4, r0
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d13a      	bne.n	8013646 <__gethex+0xca>
 80135d0:	9901      	ldr	r1, [sp, #4]
 80135d2:	4652      	mov	r2, sl
 80135d4:	4638      	mov	r0, r7
 80135d6:	f001 fb47 	bl	8014c68 <strncmp>
 80135da:	4605      	mov	r5, r0
 80135dc:	2800      	cmp	r0, #0
 80135de:	d168      	bne.n	80136b2 <__gethex+0x136>
 80135e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80135e4:	eb07 060a 	add.w	r6, r7, sl
 80135e8:	f7ff ffb2 	bl	8013550 <__hexdig_fun>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d062      	beq.n	80136b6 <__gethex+0x13a>
 80135f0:	4633      	mov	r3, r6
 80135f2:	7818      	ldrb	r0, [r3, #0]
 80135f4:	2830      	cmp	r0, #48	; 0x30
 80135f6:	461f      	mov	r7, r3
 80135f8:	f103 0301 	add.w	r3, r3, #1
 80135fc:	d0f9      	beq.n	80135f2 <__gethex+0x76>
 80135fe:	f7ff ffa7 	bl	8013550 <__hexdig_fun>
 8013602:	2301      	movs	r3, #1
 8013604:	fab0 f480 	clz	r4, r0
 8013608:	0964      	lsrs	r4, r4, #5
 801360a:	4635      	mov	r5, r6
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	463a      	mov	r2, r7
 8013610:	4616      	mov	r6, r2
 8013612:	3201      	adds	r2, #1
 8013614:	7830      	ldrb	r0, [r6, #0]
 8013616:	f7ff ff9b 	bl	8013550 <__hexdig_fun>
 801361a:	2800      	cmp	r0, #0
 801361c:	d1f8      	bne.n	8013610 <__gethex+0x94>
 801361e:	9901      	ldr	r1, [sp, #4]
 8013620:	4652      	mov	r2, sl
 8013622:	4630      	mov	r0, r6
 8013624:	f001 fb20 	bl	8014c68 <strncmp>
 8013628:	b980      	cbnz	r0, 801364c <__gethex+0xd0>
 801362a:	b94d      	cbnz	r5, 8013640 <__gethex+0xc4>
 801362c:	eb06 050a 	add.w	r5, r6, sl
 8013630:	462a      	mov	r2, r5
 8013632:	4616      	mov	r6, r2
 8013634:	3201      	adds	r2, #1
 8013636:	7830      	ldrb	r0, [r6, #0]
 8013638:	f7ff ff8a 	bl	8013550 <__hexdig_fun>
 801363c:	2800      	cmp	r0, #0
 801363e:	d1f8      	bne.n	8013632 <__gethex+0xb6>
 8013640:	1bad      	subs	r5, r5, r6
 8013642:	00ad      	lsls	r5, r5, #2
 8013644:	e004      	b.n	8013650 <__gethex+0xd4>
 8013646:	2400      	movs	r4, #0
 8013648:	4625      	mov	r5, r4
 801364a:	e7e0      	b.n	801360e <__gethex+0x92>
 801364c:	2d00      	cmp	r5, #0
 801364e:	d1f7      	bne.n	8013640 <__gethex+0xc4>
 8013650:	7833      	ldrb	r3, [r6, #0]
 8013652:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013656:	2b50      	cmp	r3, #80	; 0x50
 8013658:	d13b      	bne.n	80136d2 <__gethex+0x156>
 801365a:	7873      	ldrb	r3, [r6, #1]
 801365c:	2b2b      	cmp	r3, #43	; 0x2b
 801365e:	d02c      	beq.n	80136ba <__gethex+0x13e>
 8013660:	2b2d      	cmp	r3, #45	; 0x2d
 8013662:	d02e      	beq.n	80136c2 <__gethex+0x146>
 8013664:	1c71      	adds	r1, r6, #1
 8013666:	f04f 0900 	mov.w	r9, #0
 801366a:	7808      	ldrb	r0, [r1, #0]
 801366c:	f7ff ff70 	bl	8013550 <__hexdig_fun>
 8013670:	1e43      	subs	r3, r0, #1
 8013672:	b2db      	uxtb	r3, r3
 8013674:	2b18      	cmp	r3, #24
 8013676:	d82c      	bhi.n	80136d2 <__gethex+0x156>
 8013678:	f1a0 0210 	sub.w	r2, r0, #16
 801367c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013680:	f7ff ff66 	bl	8013550 <__hexdig_fun>
 8013684:	1e43      	subs	r3, r0, #1
 8013686:	b2db      	uxtb	r3, r3
 8013688:	2b18      	cmp	r3, #24
 801368a:	d91d      	bls.n	80136c8 <__gethex+0x14c>
 801368c:	f1b9 0f00 	cmp.w	r9, #0
 8013690:	d000      	beq.n	8013694 <__gethex+0x118>
 8013692:	4252      	negs	r2, r2
 8013694:	4415      	add	r5, r2
 8013696:	f8cb 1000 	str.w	r1, [fp]
 801369a:	b1e4      	cbz	r4, 80136d6 <__gethex+0x15a>
 801369c:	9b00      	ldr	r3, [sp, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	bf14      	ite	ne
 80136a2:	2700      	movne	r7, #0
 80136a4:	2706      	moveq	r7, #6
 80136a6:	4638      	mov	r0, r7
 80136a8:	b009      	add	sp, #36	; 0x24
 80136aa:	ecbd 8b02 	vpop	{d8}
 80136ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b2:	463e      	mov	r6, r7
 80136b4:	4625      	mov	r5, r4
 80136b6:	2401      	movs	r4, #1
 80136b8:	e7ca      	b.n	8013650 <__gethex+0xd4>
 80136ba:	f04f 0900 	mov.w	r9, #0
 80136be:	1cb1      	adds	r1, r6, #2
 80136c0:	e7d3      	b.n	801366a <__gethex+0xee>
 80136c2:	f04f 0901 	mov.w	r9, #1
 80136c6:	e7fa      	b.n	80136be <__gethex+0x142>
 80136c8:	230a      	movs	r3, #10
 80136ca:	fb03 0202 	mla	r2, r3, r2, r0
 80136ce:	3a10      	subs	r2, #16
 80136d0:	e7d4      	b.n	801367c <__gethex+0x100>
 80136d2:	4631      	mov	r1, r6
 80136d4:	e7df      	b.n	8013696 <__gethex+0x11a>
 80136d6:	1bf3      	subs	r3, r6, r7
 80136d8:	3b01      	subs	r3, #1
 80136da:	4621      	mov	r1, r4
 80136dc:	2b07      	cmp	r3, #7
 80136de:	dc0b      	bgt.n	80136f8 <__gethex+0x17c>
 80136e0:	ee18 0a10 	vmov	r0, s16
 80136e4:	f000 fa7e 	bl	8013be4 <_Balloc>
 80136e8:	4604      	mov	r4, r0
 80136ea:	b940      	cbnz	r0, 80136fe <__gethex+0x182>
 80136ec:	4b65      	ldr	r3, [pc, #404]	; (8013884 <__gethex+0x308>)
 80136ee:	4602      	mov	r2, r0
 80136f0:	21de      	movs	r1, #222	; 0xde
 80136f2:	4865      	ldr	r0, [pc, #404]	; (8013888 <__gethex+0x30c>)
 80136f4:	f7ff f830 	bl	8012758 <__assert_func>
 80136f8:	3101      	adds	r1, #1
 80136fa:	105b      	asrs	r3, r3, #1
 80136fc:	e7ee      	b.n	80136dc <__gethex+0x160>
 80136fe:	f100 0914 	add.w	r9, r0, #20
 8013702:	f04f 0b00 	mov.w	fp, #0
 8013706:	f1ca 0301 	rsb	r3, sl, #1
 801370a:	f8cd 9008 	str.w	r9, [sp, #8]
 801370e:	f8cd b000 	str.w	fp, [sp]
 8013712:	9306      	str	r3, [sp, #24]
 8013714:	42b7      	cmp	r7, r6
 8013716:	d340      	bcc.n	801379a <__gethex+0x21e>
 8013718:	9802      	ldr	r0, [sp, #8]
 801371a:	9b00      	ldr	r3, [sp, #0]
 801371c:	f840 3b04 	str.w	r3, [r0], #4
 8013720:	eba0 0009 	sub.w	r0, r0, r9
 8013724:	1080      	asrs	r0, r0, #2
 8013726:	0146      	lsls	r6, r0, #5
 8013728:	6120      	str	r0, [r4, #16]
 801372a:	4618      	mov	r0, r3
 801372c:	f000 fb50 	bl	8013dd0 <__hi0bits>
 8013730:	1a30      	subs	r0, r6, r0
 8013732:	f8d8 6000 	ldr.w	r6, [r8]
 8013736:	42b0      	cmp	r0, r6
 8013738:	dd63      	ble.n	8013802 <__gethex+0x286>
 801373a:	1b87      	subs	r7, r0, r6
 801373c:	4639      	mov	r1, r7
 801373e:	4620      	mov	r0, r4
 8013740:	f000 feea 	bl	8014518 <__any_on>
 8013744:	4682      	mov	sl, r0
 8013746:	b1a8      	cbz	r0, 8013774 <__gethex+0x1f8>
 8013748:	1e7b      	subs	r3, r7, #1
 801374a:	1159      	asrs	r1, r3, #5
 801374c:	f003 021f 	and.w	r2, r3, #31
 8013750:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013754:	f04f 0a01 	mov.w	sl, #1
 8013758:	fa0a f202 	lsl.w	r2, sl, r2
 801375c:	420a      	tst	r2, r1
 801375e:	d009      	beq.n	8013774 <__gethex+0x1f8>
 8013760:	4553      	cmp	r3, sl
 8013762:	dd05      	ble.n	8013770 <__gethex+0x1f4>
 8013764:	1eb9      	subs	r1, r7, #2
 8013766:	4620      	mov	r0, r4
 8013768:	f000 fed6 	bl	8014518 <__any_on>
 801376c:	2800      	cmp	r0, #0
 801376e:	d145      	bne.n	80137fc <__gethex+0x280>
 8013770:	f04f 0a02 	mov.w	sl, #2
 8013774:	4639      	mov	r1, r7
 8013776:	4620      	mov	r0, r4
 8013778:	f7ff fe98 	bl	80134ac <rshift>
 801377c:	443d      	add	r5, r7
 801377e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013782:	42ab      	cmp	r3, r5
 8013784:	da4c      	bge.n	8013820 <__gethex+0x2a4>
 8013786:	ee18 0a10 	vmov	r0, s16
 801378a:	4621      	mov	r1, r4
 801378c:	f000 fa6a 	bl	8013c64 <_Bfree>
 8013790:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013792:	2300      	movs	r3, #0
 8013794:	6013      	str	r3, [r2, #0]
 8013796:	27a3      	movs	r7, #163	; 0xa3
 8013798:	e785      	b.n	80136a6 <__gethex+0x12a>
 801379a:	1e73      	subs	r3, r6, #1
 801379c:	9a05      	ldr	r2, [sp, #20]
 801379e:	9303      	str	r3, [sp, #12]
 80137a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d019      	beq.n	80137dc <__gethex+0x260>
 80137a8:	f1bb 0f20 	cmp.w	fp, #32
 80137ac:	d107      	bne.n	80137be <__gethex+0x242>
 80137ae:	9b02      	ldr	r3, [sp, #8]
 80137b0:	9a00      	ldr	r2, [sp, #0]
 80137b2:	f843 2b04 	str.w	r2, [r3], #4
 80137b6:	9302      	str	r3, [sp, #8]
 80137b8:	2300      	movs	r3, #0
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	469b      	mov	fp, r3
 80137be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80137c2:	f7ff fec5 	bl	8013550 <__hexdig_fun>
 80137c6:	9b00      	ldr	r3, [sp, #0]
 80137c8:	f000 000f 	and.w	r0, r0, #15
 80137cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80137d0:	4303      	orrs	r3, r0
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	f10b 0b04 	add.w	fp, fp, #4
 80137d8:	9b03      	ldr	r3, [sp, #12]
 80137da:	e00d      	b.n	80137f8 <__gethex+0x27c>
 80137dc:	9b03      	ldr	r3, [sp, #12]
 80137de:	9a06      	ldr	r2, [sp, #24]
 80137e0:	4413      	add	r3, r2
 80137e2:	42bb      	cmp	r3, r7
 80137e4:	d3e0      	bcc.n	80137a8 <__gethex+0x22c>
 80137e6:	4618      	mov	r0, r3
 80137e8:	9901      	ldr	r1, [sp, #4]
 80137ea:	9307      	str	r3, [sp, #28]
 80137ec:	4652      	mov	r2, sl
 80137ee:	f001 fa3b 	bl	8014c68 <strncmp>
 80137f2:	9b07      	ldr	r3, [sp, #28]
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d1d7      	bne.n	80137a8 <__gethex+0x22c>
 80137f8:	461e      	mov	r6, r3
 80137fa:	e78b      	b.n	8013714 <__gethex+0x198>
 80137fc:	f04f 0a03 	mov.w	sl, #3
 8013800:	e7b8      	b.n	8013774 <__gethex+0x1f8>
 8013802:	da0a      	bge.n	801381a <__gethex+0x29e>
 8013804:	1a37      	subs	r7, r6, r0
 8013806:	4621      	mov	r1, r4
 8013808:	ee18 0a10 	vmov	r0, s16
 801380c:	463a      	mov	r2, r7
 801380e:	f000 fc45 	bl	801409c <__lshift>
 8013812:	1bed      	subs	r5, r5, r7
 8013814:	4604      	mov	r4, r0
 8013816:	f100 0914 	add.w	r9, r0, #20
 801381a:	f04f 0a00 	mov.w	sl, #0
 801381e:	e7ae      	b.n	801377e <__gethex+0x202>
 8013820:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013824:	42a8      	cmp	r0, r5
 8013826:	dd72      	ble.n	801390e <__gethex+0x392>
 8013828:	1b45      	subs	r5, r0, r5
 801382a:	42ae      	cmp	r6, r5
 801382c:	dc36      	bgt.n	801389c <__gethex+0x320>
 801382e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013832:	2b02      	cmp	r3, #2
 8013834:	d02a      	beq.n	801388c <__gethex+0x310>
 8013836:	2b03      	cmp	r3, #3
 8013838:	d02c      	beq.n	8013894 <__gethex+0x318>
 801383a:	2b01      	cmp	r3, #1
 801383c:	d115      	bne.n	801386a <__gethex+0x2ee>
 801383e:	42ae      	cmp	r6, r5
 8013840:	d113      	bne.n	801386a <__gethex+0x2ee>
 8013842:	2e01      	cmp	r6, #1
 8013844:	d10b      	bne.n	801385e <__gethex+0x2e2>
 8013846:	9a04      	ldr	r2, [sp, #16]
 8013848:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801384c:	6013      	str	r3, [r2, #0]
 801384e:	2301      	movs	r3, #1
 8013850:	6123      	str	r3, [r4, #16]
 8013852:	f8c9 3000 	str.w	r3, [r9]
 8013856:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013858:	2762      	movs	r7, #98	; 0x62
 801385a:	601c      	str	r4, [r3, #0]
 801385c:	e723      	b.n	80136a6 <__gethex+0x12a>
 801385e:	1e71      	subs	r1, r6, #1
 8013860:	4620      	mov	r0, r4
 8013862:	f000 fe59 	bl	8014518 <__any_on>
 8013866:	2800      	cmp	r0, #0
 8013868:	d1ed      	bne.n	8013846 <__gethex+0x2ca>
 801386a:	ee18 0a10 	vmov	r0, s16
 801386e:	4621      	mov	r1, r4
 8013870:	f000 f9f8 	bl	8013c64 <_Bfree>
 8013874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013876:	2300      	movs	r3, #0
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	2750      	movs	r7, #80	; 0x50
 801387c:	e713      	b.n	80136a6 <__gethex+0x12a>
 801387e:	bf00      	nop
 8013880:	0802928c 	.word	0x0802928c
 8013884:	08029211 	.word	0x08029211
 8013888:	08029222 	.word	0x08029222
 801388c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801388e:	2b00      	cmp	r3, #0
 8013890:	d1eb      	bne.n	801386a <__gethex+0x2ee>
 8013892:	e7d8      	b.n	8013846 <__gethex+0x2ca>
 8013894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013896:	2b00      	cmp	r3, #0
 8013898:	d1d5      	bne.n	8013846 <__gethex+0x2ca>
 801389a:	e7e6      	b.n	801386a <__gethex+0x2ee>
 801389c:	1e6f      	subs	r7, r5, #1
 801389e:	f1ba 0f00 	cmp.w	sl, #0
 80138a2:	d131      	bne.n	8013908 <__gethex+0x38c>
 80138a4:	b127      	cbz	r7, 80138b0 <__gethex+0x334>
 80138a6:	4639      	mov	r1, r7
 80138a8:	4620      	mov	r0, r4
 80138aa:	f000 fe35 	bl	8014518 <__any_on>
 80138ae:	4682      	mov	sl, r0
 80138b0:	117b      	asrs	r3, r7, #5
 80138b2:	2101      	movs	r1, #1
 80138b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80138b8:	f007 071f 	and.w	r7, r7, #31
 80138bc:	fa01 f707 	lsl.w	r7, r1, r7
 80138c0:	421f      	tst	r7, r3
 80138c2:	4629      	mov	r1, r5
 80138c4:	4620      	mov	r0, r4
 80138c6:	bf18      	it	ne
 80138c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80138cc:	1b76      	subs	r6, r6, r5
 80138ce:	f7ff fded 	bl	80134ac <rshift>
 80138d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80138d6:	2702      	movs	r7, #2
 80138d8:	f1ba 0f00 	cmp.w	sl, #0
 80138dc:	d048      	beq.n	8013970 <__gethex+0x3f4>
 80138de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80138e2:	2b02      	cmp	r3, #2
 80138e4:	d015      	beq.n	8013912 <__gethex+0x396>
 80138e6:	2b03      	cmp	r3, #3
 80138e8:	d017      	beq.n	801391a <__gethex+0x39e>
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d109      	bne.n	8013902 <__gethex+0x386>
 80138ee:	f01a 0f02 	tst.w	sl, #2
 80138f2:	d006      	beq.n	8013902 <__gethex+0x386>
 80138f4:	f8d9 0000 	ldr.w	r0, [r9]
 80138f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80138fc:	f01a 0f01 	tst.w	sl, #1
 8013900:	d10e      	bne.n	8013920 <__gethex+0x3a4>
 8013902:	f047 0710 	orr.w	r7, r7, #16
 8013906:	e033      	b.n	8013970 <__gethex+0x3f4>
 8013908:	f04f 0a01 	mov.w	sl, #1
 801390c:	e7d0      	b.n	80138b0 <__gethex+0x334>
 801390e:	2701      	movs	r7, #1
 8013910:	e7e2      	b.n	80138d8 <__gethex+0x35c>
 8013912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013914:	f1c3 0301 	rsb	r3, r3, #1
 8013918:	9315      	str	r3, [sp, #84]	; 0x54
 801391a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801391c:	2b00      	cmp	r3, #0
 801391e:	d0f0      	beq.n	8013902 <__gethex+0x386>
 8013920:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013924:	f104 0314 	add.w	r3, r4, #20
 8013928:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801392c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013930:	f04f 0c00 	mov.w	ip, #0
 8013934:	4618      	mov	r0, r3
 8013936:	f853 2b04 	ldr.w	r2, [r3], #4
 801393a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801393e:	d01c      	beq.n	801397a <__gethex+0x3fe>
 8013940:	3201      	adds	r2, #1
 8013942:	6002      	str	r2, [r0, #0]
 8013944:	2f02      	cmp	r7, #2
 8013946:	f104 0314 	add.w	r3, r4, #20
 801394a:	d13f      	bne.n	80139cc <__gethex+0x450>
 801394c:	f8d8 2000 	ldr.w	r2, [r8]
 8013950:	3a01      	subs	r2, #1
 8013952:	42b2      	cmp	r2, r6
 8013954:	d10a      	bne.n	801396c <__gethex+0x3f0>
 8013956:	1171      	asrs	r1, r6, #5
 8013958:	2201      	movs	r2, #1
 801395a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801395e:	f006 061f 	and.w	r6, r6, #31
 8013962:	fa02 f606 	lsl.w	r6, r2, r6
 8013966:	421e      	tst	r6, r3
 8013968:	bf18      	it	ne
 801396a:	4617      	movne	r7, r2
 801396c:	f047 0720 	orr.w	r7, r7, #32
 8013970:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013972:	601c      	str	r4, [r3, #0]
 8013974:	9b04      	ldr	r3, [sp, #16]
 8013976:	601d      	str	r5, [r3, #0]
 8013978:	e695      	b.n	80136a6 <__gethex+0x12a>
 801397a:	4299      	cmp	r1, r3
 801397c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013980:	d8d8      	bhi.n	8013934 <__gethex+0x3b8>
 8013982:	68a3      	ldr	r3, [r4, #8]
 8013984:	459b      	cmp	fp, r3
 8013986:	db19      	blt.n	80139bc <__gethex+0x440>
 8013988:	6861      	ldr	r1, [r4, #4]
 801398a:	ee18 0a10 	vmov	r0, s16
 801398e:	3101      	adds	r1, #1
 8013990:	f000 f928 	bl	8013be4 <_Balloc>
 8013994:	4681      	mov	r9, r0
 8013996:	b918      	cbnz	r0, 80139a0 <__gethex+0x424>
 8013998:	4b1a      	ldr	r3, [pc, #104]	; (8013a04 <__gethex+0x488>)
 801399a:	4602      	mov	r2, r0
 801399c:	2184      	movs	r1, #132	; 0x84
 801399e:	e6a8      	b.n	80136f2 <__gethex+0x176>
 80139a0:	6922      	ldr	r2, [r4, #16]
 80139a2:	3202      	adds	r2, #2
 80139a4:	f104 010c 	add.w	r1, r4, #12
 80139a8:	0092      	lsls	r2, r2, #2
 80139aa:	300c      	adds	r0, #12
 80139ac:	f000 f90c 	bl	8013bc8 <memcpy>
 80139b0:	4621      	mov	r1, r4
 80139b2:	ee18 0a10 	vmov	r0, s16
 80139b6:	f000 f955 	bl	8013c64 <_Bfree>
 80139ba:	464c      	mov	r4, r9
 80139bc:	6923      	ldr	r3, [r4, #16]
 80139be:	1c5a      	adds	r2, r3, #1
 80139c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80139c4:	6122      	str	r2, [r4, #16]
 80139c6:	2201      	movs	r2, #1
 80139c8:	615a      	str	r2, [r3, #20]
 80139ca:	e7bb      	b.n	8013944 <__gethex+0x3c8>
 80139cc:	6922      	ldr	r2, [r4, #16]
 80139ce:	455a      	cmp	r2, fp
 80139d0:	dd0b      	ble.n	80139ea <__gethex+0x46e>
 80139d2:	2101      	movs	r1, #1
 80139d4:	4620      	mov	r0, r4
 80139d6:	f7ff fd69 	bl	80134ac <rshift>
 80139da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80139de:	3501      	adds	r5, #1
 80139e0:	42ab      	cmp	r3, r5
 80139e2:	f6ff aed0 	blt.w	8013786 <__gethex+0x20a>
 80139e6:	2701      	movs	r7, #1
 80139e8:	e7c0      	b.n	801396c <__gethex+0x3f0>
 80139ea:	f016 061f 	ands.w	r6, r6, #31
 80139ee:	d0fa      	beq.n	80139e6 <__gethex+0x46a>
 80139f0:	449a      	add	sl, r3
 80139f2:	f1c6 0620 	rsb	r6, r6, #32
 80139f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80139fa:	f000 f9e9 	bl	8013dd0 <__hi0bits>
 80139fe:	42b0      	cmp	r0, r6
 8013a00:	dbe7      	blt.n	80139d2 <__gethex+0x456>
 8013a02:	e7f0      	b.n	80139e6 <__gethex+0x46a>
 8013a04:	08029211 	.word	0x08029211

08013a08 <L_shift>:
 8013a08:	f1c2 0208 	rsb	r2, r2, #8
 8013a0c:	0092      	lsls	r2, r2, #2
 8013a0e:	b570      	push	{r4, r5, r6, lr}
 8013a10:	f1c2 0620 	rsb	r6, r2, #32
 8013a14:	6843      	ldr	r3, [r0, #4]
 8013a16:	6804      	ldr	r4, [r0, #0]
 8013a18:	fa03 f506 	lsl.w	r5, r3, r6
 8013a1c:	432c      	orrs	r4, r5
 8013a1e:	40d3      	lsrs	r3, r2
 8013a20:	6004      	str	r4, [r0, #0]
 8013a22:	f840 3f04 	str.w	r3, [r0, #4]!
 8013a26:	4288      	cmp	r0, r1
 8013a28:	d3f4      	bcc.n	8013a14 <L_shift+0xc>
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}

08013a2c <__match>:
 8013a2c:	b530      	push	{r4, r5, lr}
 8013a2e:	6803      	ldr	r3, [r0, #0]
 8013a30:	3301      	adds	r3, #1
 8013a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a36:	b914      	cbnz	r4, 8013a3e <__match+0x12>
 8013a38:	6003      	str	r3, [r0, #0]
 8013a3a:	2001      	movs	r0, #1
 8013a3c:	bd30      	pop	{r4, r5, pc}
 8013a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013a46:	2d19      	cmp	r5, #25
 8013a48:	bf98      	it	ls
 8013a4a:	3220      	addls	r2, #32
 8013a4c:	42a2      	cmp	r2, r4
 8013a4e:	d0f0      	beq.n	8013a32 <__match+0x6>
 8013a50:	2000      	movs	r0, #0
 8013a52:	e7f3      	b.n	8013a3c <__match+0x10>

08013a54 <__hexnan>:
 8013a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a58:	680b      	ldr	r3, [r1, #0]
 8013a5a:	6801      	ldr	r1, [r0, #0]
 8013a5c:	115e      	asrs	r6, r3, #5
 8013a5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013a62:	f013 031f 	ands.w	r3, r3, #31
 8013a66:	b087      	sub	sp, #28
 8013a68:	bf18      	it	ne
 8013a6a:	3604      	addne	r6, #4
 8013a6c:	2500      	movs	r5, #0
 8013a6e:	1f37      	subs	r7, r6, #4
 8013a70:	4682      	mov	sl, r0
 8013a72:	4690      	mov	r8, r2
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	f846 5c04 	str.w	r5, [r6, #-4]
 8013a7a:	46b9      	mov	r9, r7
 8013a7c:	463c      	mov	r4, r7
 8013a7e:	9502      	str	r5, [sp, #8]
 8013a80:	46ab      	mov	fp, r5
 8013a82:	784a      	ldrb	r2, [r1, #1]
 8013a84:	1c4b      	adds	r3, r1, #1
 8013a86:	9303      	str	r3, [sp, #12]
 8013a88:	b342      	cbz	r2, 8013adc <__hexnan+0x88>
 8013a8a:	4610      	mov	r0, r2
 8013a8c:	9105      	str	r1, [sp, #20]
 8013a8e:	9204      	str	r2, [sp, #16]
 8013a90:	f7ff fd5e 	bl	8013550 <__hexdig_fun>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d14f      	bne.n	8013b38 <__hexnan+0xe4>
 8013a98:	9a04      	ldr	r2, [sp, #16]
 8013a9a:	9905      	ldr	r1, [sp, #20]
 8013a9c:	2a20      	cmp	r2, #32
 8013a9e:	d818      	bhi.n	8013ad2 <__hexnan+0x7e>
 8013aa0:	9b02      	ldr	r3, [sp, #8]
 8013aa2:	459b      	cmp	fp, r3
 8013aa4:	dd13      	ble.n	8013ace <__hexnan+0x7a>
 8013aa6:	454c      	cmp	r4, r9
 8013aa8:	d206      	bcs.n	8013ab8 <__hexnan+0x64>
 8013aaa:	2d07      	cmp	r5, #7
 8013aac:	dc04      	bgt.n	8013ab8 <__hexnan+0x64>
 8013aae:	462a      	mov	r2, r5
 8013ab0:	4649      	mov	r1, r9
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f7ff ffa8 	bl	8013a08 <L_shift>
 8013ab8:	4544      	cmp	r4, r8
 8013aba:	d950      	bls.n	8013b5e <__hexnan+0x10a>
 8013abc:	2300      	movs	r3, #0
 8013abe:	f1a4 0904 	sub.w	r9, r4, #4
 8013ac2:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ac6:	f8cd b008 	str.w	fp, [sp, #8]
 8013aca:	464c      	mov	r4, r9
 8013acc:	461d      	mov	r5, r3
 8013ace:	9903      	ldr	r1, [sp, #12]
 8013ad0:	e7d7      	b.n	8013a82 <__hexnan+0x2e>
 8013ad2:	2a29      	cmp	r2, #41	; 0x29
 8013ad4:	d156      	bne.n	8013b84 <__hexnan+0x130>
 8013ad6:	3102      	adds	r1, #2
 8013ad8:	f8ca 1000 	str.w	r1, [sl]
 8013adc:	f1bb 0f00 	cmp.w	fp, #0
 8013ae0:	d050      	beq.n	8013b84 <__hexnan+0x130>
 8013ae2:	454c      	cmp	r4, r9
 8013ae4:	d206      	bcs.n	8013af4 <__hexnan+0xa0>
 8013ae6:	2d07      	cmp	r5, #7
 8013ae8:	dc04      	bgt.n	8013af4 <__hexnan+0xa0>
 8013aea:	462a      	mov	r2, r5
 8013aec:	4649      	mov	r1, r9
 8013aee:	4620      	mov	r0, r4
 8013af0:	f7ff ff8a 	bl	8013a08 <L_shift>
 8013af4:	4544      	cmp	r4, r8
 8013af6:	d934      	bls.n	8013b62 <__hexnan+0x10e>
 8013af8:	f1a8 0204 	sub.w	r2, r8, #4
 8013afc:	4623      	mov	r3, r4
 8013afe:	f853 1b04 	ldr.w	r1, [r3], #4
 8013b02:	f842 1f04 	str.w	r1, [r2, #4]!
 8013b06:	429f      	cmp	r7, r3
 8013b08:	d2f9      	bcs.n	8013afe <__hexnan+0xaa>
 8013b0a:	1b3b      	subs	r3, r7, r4
 8013b0c:	f023 0303 	bic.w	r3, r3, #3
 8013b10:	3304      	adds	r3, #4
 8013b12:	3401      	adds	r4, #1
 8013b14:	3e03      	subs	r6, #3
 8013b16:	42b4      	cmp	r4, r6
 8013b18:	bf88      	it	hi
 8013b1a:	2304      	movhi	r3, #4
 8013b1c:	4443      	add	r3, r8
 8013b1e:	2200      	movs	r2, #0
 8013b20:	f843 2b04 	str.w	r2, [r3], #4
 8013b24:	429f      	cmp	r7, r3
 8013b26:	d2fb      	bcs.n	8013b20 <__hexnan+0xcc>
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	b91b      	cbnz	r3, 8013b34 <__hexnan+0xe0>
 8013b2c:	4547      	cmp	r7, r8
 8013b2e:	d127      	bne.n	8013b80 <__hexnan+0x12c>
 8013b30:	2301      	movs	r3, #1
 8013b32:	603b      	str	r3, [r7, #0]
 8013b34:	2005      	movs	r0, #5
 8013b36:	e026      	b.n	8013b86 <__hexnan+0x132>
 8013b38:	3501      	adds	r5, #1
 8013b3a:	2d08      	cmp	r5, #8
 8013b3c:	f10b 0b01 	add.w	fp, fp, #1
 8013b40:	dd06      	ble.n	8013b50 <__hexnan+0xfc>
 8013b42:	4544      	cmp	r4, r8
 8013b44:	d9c3      	bls.n	8013ace <__hexnan+0x7a>
 8013b46:	2300      	movs	r3, #0
 8013b48:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b4c:	2501      	movs	r5, #1
 8013b4e:	3c04      	subs	r4, #4
 8013b50:	6822      	ldr	r2, [r4, #0]
 8013b52:	f000 000f 	and.w	r0, r0, #15
 8013b56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013b5a:	6022      	str	r2, [r4, #0]
 8013b5c:	e7b7      	b.n	8013ace <__hexnan+0x7a>
 8013b5e:	2508      	movs	r5, #8
 8013b60:	e7b5      	b.n	8013ace <__hexnan+0x7a>
 8013b62:	9b01      	ldr	r3, [sp, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d0df      	beq.n	8013b28 <__hexnan+0xd4>
 8013b68:	f04f 32ff 	mov.w	r2, #4294967295
 8013b6c:	f1c3 0320 	rsb	r3, r3, #32
 8013b70:	fa22 f303 	lsr.w	r3, r2, r3
 8013b74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013b78:	401a      	ands	r2, r3
 8013b7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013b7e:	e7d3      	b.n	8013b28 <__hexnan+0xd4>
 8013b80:	3f04      	subs	r7, #4
 8013b82:	e7d1      	b.n	8013b28 <__hexnan+0xd4>
 8013b84:	2004      	movs	r0, #4
 8013b86:	b007      	add	sp, #28
 8013b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b8c <_localeconv_r>:
 8013b8c:	4800      	ldr	r0, [pc, #0]	; (8013b90 <_localeconv_r+0x4>)
 8013b8e:	4770      	bx	lr
 8013b90:	20000198 	.word	0x20000198

08013b94 <malloc>:
 8013b94:	4b02      	ldr	r3, [pc, #8]	; (8013ba0 <malloc+0xc>)
 8013b96:	4601      	mov	r1, r0
 8013b98:	6818      	ldr	r0, [r3, #0]
 8013b9a:	f000 bd3d 	b.w	8014618 <_malloc_r>
 8013b9e:	bf00      	nop
 8013ba0:	20000040 	.word	0x20000040

08013ba4 <__ascii_mbtowc>:
 8013ba4:	b082      	sub	sp, #8
 8013ba6:	b901      	cbnz	r1, 8013baa <__ascii_mbtowc+0x6>
 8013ba8:	a901      	add	r1, sp, #4
 8013baa:	b142      	cbz	r2, 8013bbe <__ascii_mbtowc+0x1a>
 8013bac:	b14b      	cbz	r3, 8013bc2 <__ascii_mbtowc+0x1e>
 8013bae:	7813      	ldrb	r3, [r2, #0]
 8013bb0:	600b      	str	r3, [r1, #0]
 8013bb2:	7812      	ldrb	r2, [r2, #0]
 8013bb4:	1e10      	subs	r0, r2, #0
 8013bb6:	bf18      	it	ne
 8013bb8:	2001      	movne	r0, #1
 8013bba:	b002      	add	sp, #8
 8013bbc:	4770      	bx	lr
 8013bbe:	4610      	mov	r0, r2
 8013bc0:	e7fb      	b.n	8013bba <__ascii_mbtowc+0x16>
 8013bc2:	f06f 0001 	mvn.w	r0, #1
 8013bc6:	e7f8      	b.n	8013bba <__ascii_mbtowc+0x16>

08013bc8 <memcpy>:
 8013bc8:	440a      	add	r2, r1
 8013bca:	4291      	cmp	r1, r2
 8013bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013bd0:	d100      	bne.n	8013bd4 <memcpy+0xc>
 8013bd2:	4770      	bx	lr
 8013bd4:	b510      	push	{r4, lr}
 8013bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bde:	4291      	cmp	r1, r2
 8013be0:	d1f9      	bne.n	8013bd6 <memcpy+0xe>
 8013be2:	bd10      	pop	{r4, pc}

08013be4 <_Balloc>:
 8013be4:	b570      	push	{r4, r5, r6, lr}
 8013be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013be8:	4604      	mov	r4, r0
 8013bea:	460d      	mov	r5, r1
 8013bec:	b976      	cbnz	r6, 8013c0c <_Balloc+0x28>
 8013bee:	2010      	movs	r0, #16
 8013bf0:	f7ff ffd0 	bl	8013b94 <malloc>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8013bf8:	b920      	cbnz	r0, 8013c04 <_Balloc+0x20>
 8013bfa:	4b18      	ldr	r3, [pc, #96]	; (8013c5c <_Balloc+0x78>)
 8013bfc:	4818      	ldr	r0, [pc, #96]	; (8013c60 <_Balloc+0x7c>)
 8013bfe:	2166      	movs	r1, #102	; 0x66
 8013c00:	f7fe fdaa 	bl	8012758 <__assert_func>
 8013c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c08:	6006      	str	r6, [r0, #0]
 8013c0a:	60c6      	str	r6, [r0, #12]
 8013c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c0e:	68f3      	ldr	r3, [r6, #12]
 8013c10:	b183      	cbz	r3, 8013c34 <_Balloc+0x50>
 8013c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c1a:	b9b8      	cbnz	r0, 8013c4c <_Balloc+0x68>
 8013c1c:	2101      	movs	r1, #1
 8013c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8013c22:	1d72      	adds	r2, r6, #5
 8013c24:	0092      	lsls	r2, r2, #2
 8013c26:	4620      	mov	r0, r4
 8013c28:	f000 fc97 	bl	801455a <_calloc_r>
 8013c2c:	b160      	cbz	r0, 8013c48 <_Balloc+0x64>
 8013c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c32:	e00e      	b.n	8013c52 <_Balloc+0x6e>
 8013c34:	2221      	movs	r2, #33	; 0x21
 8013c36:	2104      	movs	r1, #4
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f000 fc8e 	bl	801455a <_calloc_r>
 8013c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c40:	60f0      	str	r0, [r6, #12]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1e4      	bne.n	8013c12 <_Balloc+0x2e>
 8013c48:	2000      	movs	r0, #0
 8013c4a:	bd70      	pop	{r4, r5, r6, pc}
 8013c4c:	6802      	ldr	r2, [r0, #0]
 8013c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c52:	2300      	movs	r3, #0
 8013c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c58:	e7f7      	b.n	8013c4a <_Balloc+0x66>
 8013c5a:	bf00      	nop
 8013c5c:	08028ff0 	.word	0x08028ff0
 8013c60:	080292a0 	.word	0x080292a0

08013c64 <_Bfree>:
 8013c64:	b570      	push	{r4, r5, r6, lr}
 8013c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013c68:	4605      	mov	r5, r0
 8013c6a:	460c      	mov	r4, r1
 8013c6c:	b976      	cbnz	r6, 8013c8c <_Bfree+0x28>
 8013c6e:	2010      	movs	r0, #16
 8013c70:	f7ff ff90 	bl	8013b94 <malloc>
 8013c74:	4602      	mov	r2, r0
 8013c76:	6268      	str	r0, [r5, #36]	; 0x24
 8013c78:	b920      	cbnz	r0, 8013c84 <_Bfree+0x20>
 8013c7a:	4b09      	ldr	r3, [pc, #36]	; (8013ca0 <_Bfree+0x3c>)
 8013c7c:	4809      	ldr	r0, [pc, #36]	; (8013ca4 <_Bfree+0x40>)
 8013c7e:	218a      	movs	r1, #138	; 0x8a
 8013c80:	f7fe fd6a 	bl	8012758 <__assert_func>
 8013c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c88:	6006      	str	r6, [r0, #0]
 8013c8a:	60c6      	str	r6, [r0, #12]
 8013c8c:	b13c      	cbz	r4, 8013c9e <_Bfree+0x3a>
 8013c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013c90:	6862      	ldr	r2, [r4, #4]
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c98:	6021      	str	r1, [r4, #0]
 8013c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013c9e:	bd70      	pop	{r4, r5, r6, pc}
 8013ca0:	08028ff0 	.word	0x08028ff0
 8013ca4:	080292a0 	.word	0x080292a0

08013ca8 <__multadd>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	690e      	ldr	r6, [r1, #16]
 8013cae:	4607      	mov	r7, r0
 8013cb0:	4698      	mov	r8, r3
 8013cb2:	460c      	mov	r4, r1
 8013cb4:	f101 0014 	add.w	r0, r1, #20
 8013cb8:	2300      	movs	r3, #0
 8013cba:	6805      	ldr	r5, [r0, #0]
 8013cbc:	b2a9      	uxth	r1, r5
 8013cbe:	fb02 8101 	mla	r1, r2, r1, r8
 8013cc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013cc6:	0c2d      	lsrs	r5, r5, #16
 8013cc8:	fb02 c505 	mla	r5, r2, r5, ip
 8013ccc:	b289      	uxth	r1, r1
 8013cce:	3301      	adds	r3, #1
 8013cd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013cd4:	429e      	cmp	r6, r3
 8013cd6:	f840 1b04 	str.w	r1, [r0], #4
 8013cda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013cde:	dcec      	bgt.n	8013cba <__multadd+0x12>
 8013ce0:	f1b8 0f00 	cmp.w	r8, #0
 8013ce4:	d022      	beq.n	8013d2c <__multadd+0x84>
 8013ce6:	68a3      	ldr	r3, [r4, #8]
 8013ce8:	42b3      	cmp	r3, r6
 8013cea:	dc19      	bgt.n	8013d20 <__multadd+0x78>
 8013cec:	6861      	ldr	r1, [r4, #4]
 8013cee:	4638      	mov	r0, r7
 8013cf0:	3101      	adds	r1, #1
 8013cf2:	f7ff ff77 	bl	8013be4 <_Balloc>
 8013cf6:	4605      	mov	r5, r0
 8013cf8:	b928      	cbnz	r0, 8013d06 <__multadd+0x5e>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	4b0d      	ldr	r3, [pc, #52]	; (8013d34 <__multadd+0x8c>)
 8013cfe:	480e      	ldr	r0, [pc, #56]	; (8013d38 <__multadd+0x90>)
 8013d00:	21b5      	movs	r1, #181	; 0xb5
 8013d02:	f7fe fd29 	bl	8012758 <__assert_func>
 8013d06:	6922      	ldr	r2, [r4, #16]
 8013d08:	3202      	adds	r2, #2
 8013d0a:	f104 010c 	add.w	r1, r4, #12
 8013d0e:	0092      	lsls	r2, r2, #2
 8013d10:	300c      	adds	r0, #12
 8013d12:	f7ff ff59 	bl	8013bc8 <memcpy>
 8013d16:	4621      	mov	r1, r4
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f7ff ffa3 	bl	8013c64 <_Bfree>
 8013d1e:	462c      	mov	r4, r5
 8013d20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013d24:	3601      	adds	r6, #1
 8013d26:	f8c3 8014 	str.w	r8, [r3, #20]
 8013d2a:	6126      	str	r6, [r4, #16]
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d32:	bf00      	nop
 8013d34:	08029211 	.word	0x08029211
 8013d38:	080292a0 	.word	0x080292a0

08013d3c <__s2b>:
 8013d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d40:	460c      	mov	r4, r1
 8013d42:	4615      	mov	r5, r2
 8013d44:	461f      	mov	r7, r3
 8013d46:	2209      	movs	r2, #9
 8013d48:	3308      	adds	r3, #8
 8013d4a:	4606      	mov	r6, r0
 8013d4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d50:	2100      	movs	r1, #0
 8013d52:	2201      	movs	r2, #1
 8013d54:	429a      	cmp	r2, r3
 8013d56:	db09      	blt.n	8013d6c <__s2b+0x30>
 8013d58:	4630      	mov	r0, r6
 8013d5a:	f7ff ff43 	bl	8013be4 <_Balloc>
 8013d5e:	b940      	cbnz	r0, 8013d72 <__s2b+0x36>
 8013d60:	4602      	mov	r2, r0
 8013d62:	4b19      	ldr	r3, [pc, #100]	; (8013dc8 <__s2b+0x8c>)
 8013d64:	4819      	ldr	r0, [pc, #100]	; (8013dcc <__s2b+0x90>)
 8013d66:	21ce      	movs	r1, #206	; 0xce
 8013d68:	f7fe fcf6 	bl	8012758 <__assert_func>
 8013d6c:	0052      	lsls	r2, r2, #1
 8013d6e:	3101      	adds	r1, #1
 8013d70:	e7f0      	b.n	8013d54 <__s2b+0x18>
 8013d72:	9b08      	ldr	r3, [sp, #32]
 8013d74:	6143      	str	r3, [r0, #20]
 8013d76:	2d09      	cmp	r5, #9
 8013d78:	f04f 0301 	mov.w	r3, #1
 8013d7c:	6103      	str	r3, [r0, #16]
 8013d7e:	dd16      	ble.n	8013dae <__s2b+0x72>
 8013d80:	f104 0909 	add.w	r9, r4, #9
 8013d84:	46c8      	mov	r8, r9
 8013d86:	442c      	add	r4, r5
 8013d88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013d8c:	4601      	mov	r1, r0
 8013d8e:	3b30      	subs	r3, #48	; 0x30
 8013d90:	220a      	movs	r2, #10
 8013d92:	4630      	mov	r0, r6
 8013d94:	f7ff ff88 	bl	8013ca8 <__multadd>
 8013d98:	45a0      	cmp	r8, r4
 8013d9a:	d1f5      	bne.n	8013d88 <__s2b+0x4c>
 8013d9c:	f1a5 0408 	sub.w	r4, r5, #8
 8013da0:	444c      	add	r4, r9
 8013da2:	1b2d      	subs	r5, r5, r4
 8013da4:	1963      	adds	r3, r4, r5
 8013da6:	42bb      	cmp	r3, r7
 8013da8:	db04      	blt.n	8013db4 <__s2b+0x78>
 8013daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dae:	340a      	adds	r4, #10
 8013db0:	2509      	movs	r5, #9
 8013db2:	e7f6      	b.n	8013da2 <__s2b+0x66>
 8013db4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013db8:	4601      	mov	r1, r0
 8013dba:	3b30      	subs	r3, #48	; 0x30
 8013dbc:	220a      	movs	r2, #10
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	f7ff ff72 	bl	8013ca8 <__multadd>
 8013dc4:	e7ee      	b.n	8013da4 <__s2b+0x68>
 8013dc6:	bf00      	nop
 8013dc8:	08029211 	.word	0x08029211
 8013dcc:	080292a0 	.word	0x080292a0

08013dd0 <__hi0bits>:
 8013dd0:	0c03      	lsrs	r3, r0, #16
 8013dd2:	041b      	lsls	r3, r3, #16
 8013dd4:	b9d3      	cbnz	r3, 8013e0c <__hi0bits+0x3c>
 8013dd6:	0400      	lsls	r0, r0, #16
 8013dd8:	2310      	movs	r3, #16
 8013dda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013dde:	bf04      	itt	eq
 8013de0:	0200      	lsleq	r0, r0, #8
 8013de2:	3308      	addeq	r3, #8
 8013de4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013de8:	bf04      	itt	eq
 8013dea:	0100      	lsleq	r0, r0, #4
 8013dec:	3304      	addeq	r3, #4
 8013dee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013df2:	bf04      	itt	eq
 8013df4:	0080      	lsleq	r0, r0, #2
 8013df6:	3302      	addeq	r3, #2
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	db05      	blt.n	8013e08 <__hi0bits+0x38>
 8013dfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013e00:	f103 0301 	add.w	r3, r3, #1
 8013e04:	bf08      	it	eq
 8013e06:	2320      	moveq	r3, #32
 8013e08:	4618      	mov	r0, r3
 8013e0a:	4770      	bx	lr
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	e7e4      	b.n	8013dda <__hi0bits+0xa>

08013e10 <__lo0bits>:
 8013e10:	6803      	ldr	r3, [r0, #0]
 8013e12:	f013 0207 	ands.w	r2, r3, #7
 8013e16:	4601      	mov	r1, r0
 8013e18:	d00b      	beq.n	8013e32 <__lo0bits+0x22>
 8013e1a:	07da      	lsls	r2, r3, #31
 8013e1c:	d424      	bmi.n	8013e68 <__lo0bits+0x58>
 8013e1e:	0798      	lsls	r0, r3, #30
 8013e20:	bf49      	itett	mi
 8013e22:	085b      	lsrmi	r3, r3, #1
 8013e24:	089b      	lsrpl	r3, r3, #2
 8013e26:	2001      	movmi	r0, #1
 8013e28:	600b      	strmi	r3, [r1, #0]
 8013e2a:	bf5c      	itt	pl
 8013e2c:	600b      	strpl	r3, [r1, #0]
 8013e2e:	2002      	movpl	r0, #2
 8013e30:	4770      	bx	lr
 8013e32:	b298      	uxth	r0, r3
 8013e34:	b9b0      	cbnz	r0, 8013e64 <__lo0bits+0x54>
 8013e36:	0c1b      	lsrs	r3, r3, #16
 8013e38:	2010      	movs	r0, #16
 8013e3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013e3e:	bf04      	itt	eq
 8013e40:	0a1b      	lsreq	r3, r3, #8
 8013e42:	3008      	addeq	r0, #8
 8013e44:	071a      	lsls	r2, r3, #28
 8013e46:	bf04      	itt	eq
 8013e48:	091b      	lsreq	r3, r3, #4
 8013e4a:	3004      	addeq	r0, #4
 8013e4c:	079a      	lsls	r2, r3, #30
 8013e4e:	bf04      	itt	eq
 8013e50:	089b      	lsreq	r3, r3, #2
 8013e52:	3002      	addeq	r0, #2
 8013e54:	07da      	lsls	r2, r3, #31
 8013e56:	d403      	bmi.n	8013e60 <__lo0bits+0x50>
 8013e58:	085b      	lsrs	r3, r3, #1
 8013e5a:	f100 0001 	add.w	r0, r0, #1
 8013e5e:	d005      	beq.n	8013e6c <__lo0bits+0x5c>
 8013e60:	600b      	str	r3, [r1, #0]
 8013e62:	4770      	bx	lr
 8013e64:	4610      	mov	r0, r2
 8013e66:	e7e8      	b.n	8013e3a <__lo0bits+0x2a>
 8013e68:	2000      	movs	r0, #0
 8013e6a:	4770      	bx	lr
 8013e6c:	2020      	movs	r0, #32
 8013e6e:	4770      	bx	lr

08013e70 <__i2b>:
 8013e70:	b510      	push	{r4, lr}
 8013e72:	460c      	mov	r4, r1
 8013e74:	2101      	movs	r1, #1
 8013e76:	f7ff feb5 	bl	8013be4 <_Balloc>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	b928      	cbnz	r0, 8013e8a <__i2b+0x1a>
 8013e7e:	4b05      	ldr	r3, [pc, #20]	; (8013e94 <__i2b+0x24>)
 8013e80:	4805      	ldr	r0, [pc, #20]	; (8013e98 <__i2b+0x28>)
 8013e82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013e86:	f7fe fc67 	bl	8012758 <__assert_func>
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	6144      	str	r4, [r0, #20]
 8013e8e:	6103      	str	r3, [r0, #16]
 8013e90:	bd10      	pop	{r4, pc}
 8013e92:	bf00      	nop
 8013e94:	08029211 	.word	0x08029211
 8013e98:	080292a0 	.word	0x080292a0

08013e9c <__multiply>:
 8013e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ea0:	4614      	mov	r4, r2
 8013ea2:	690a      	ldr	r2, [r1, #16]
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	bfb8      	it	lt
 8013eaa:	460b      	movlt	r3, r1
 8013eac:	460d      	mov	r5, r1
 8013eae:	bfbc      	itt	lt
 8013eb0:	4625      	movlt	r5, r4
 8013eb2:	461c      	movlt	r4, r3
 8013eb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013eb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013ebc:	68ab      	ldr	r3, [r5, #8]
 8013ebe:	6869      	ldr	r1, [r5, #4]
 8013ec0:	eb0a 0709 	add.w	r7, sl, r9
 8013ec4:	42bb      	cmp	r3, r7
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	bfb8      	it	lt
 8013eca:	3101      	addlt	r1, #1
 8013ecc:	f7ff fe8a 	bl	8013be4 <_Balloc>
 8013ed0:	b930      	cbnz	r0, 8013ee0 <__multiply+0x44>
 8013ed2:	4602      	mov	r2, r0
 8013ed4:	4b42      	ldr	r3, [pc, #264]	; (8013fe0 <__multiply+0x144>)
 8013ed6:	4843      	ldr	r0, [pc, #268]	; (8013fe4 <__multiply+0x148>)
 8013ed8:	f240 115d 	movw	r1, #349	; 0x15d
 8013edc:	f7fe fc3c 	bl	8012758 <__assert_func>
 8013ee0:	f100 0614 	add.w	r6, r0, #20
 8013ee4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013ee8:	4633      	mov	r3, r6
 8013eea:	2200      	movs	r2, #0
 8013eec:	4543      	cmp	r3, r8
 8013eee:	d31e      	bcc.n	8013f2e <__multiply+0x92>
 8013ef0:	f105 0c14 	add.w	ip, r5, #20
 8013ef4:	f104 0314 	add.w	r3, r4, #20
 8013ef8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013efc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013f00:	9202      	str	r2, [sp, #8]
 8013f02:	ebac 0205 	sub.w	r2, ip, r5
 8013f06:	3a15      	subs	r2, #21
 8013f08:	f022 0203 	bic.w	r2, r2, #3
 8013f0c:	3204      	adds	r2, #4
 8013f0e:	f105 0115 	add.w	r1, r5, #21
 8013f12:	458c      	cmp	ip, r1
 8013f14:	bf38      	it	cc
 8013f16:	2204      	movcc	r2, #4
 8013f18:	9201      	str	r2, [sp, #4]
 8013f1a:	9a02      	ldr	r2, [sp, #8]
 8013f1c:	9303      	str	r3, [sp, #12]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d808      	bhi.n	8013f34 <__multiply+0x98>
 8013f22:	2f00      	cmp	r7, #0
 8013f24:	dc55      	bgt.n	8013fd2 <__multiply+0x136>
 8013f26:	6107      	str	r7, [r0, #16]
 8013f28:	b005      	add	sp, #20
 8013f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f2e:	f843 2b04 	str.w	r2, [r3], #4
 8013f32:	e7db      	b.n	8013eec <__multiply+0x50>
 8013f34:	f8b3 a000 	ldrh.w	sl, [r3]
 8013f38:	f1ba 0f00 	cmp.w	sl, #0
 8013f3c:	d020      	beq.n	8013f80 <__multiply+0xe4>
 8013f3e:	f105 0e14 	add.w	lr, r5, #20
 8013f42:	46b1      	mov	r9, r6
 8013f44:	2200      	movs	r2, #0
 8013f46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013f4a:	f8d9 b000 	ldr.w	fp, [r9]
 8013f4e:	b2a1      	uxth	r1, r4
 8013f50:	fa1f fb8b 	uxth.w	fp, fp
 8013f54:	fb0a b101 	mla	r1, sl, r1, fp
 8013f58:	4411      	add	r1, r2
 8013f5a:	f8d9 2000 	ldr.w	r2, [r9]
 8013f5e:	0c24      	lsrs	r4, r4, #16
 8013f60:	0c12      	lsrs	r2, r2, #16
 8013f62:	fb0a 2404 	mla	r4, sl, r4, r2
 8013f66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013f6a:	b289      	uxth	r1, r1
 8013f6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013f70:	45f4      	cmp	ip, lr
 8013f72:	f849 1b04 	str.w	r1, [r9], #4
 8013f76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013f7a:	d8e4      	bhi.n	8013f46 <__multiply+0xaa>
 8013f7c:	9901      	ldr	r1, [sp, #4]
 8013f7e:	5072      	str	r2, [r6, r1]
 8013f80:	9a03      	ldr	r2, [sp, #12]
 8013f82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013f86:	3304      	adds	r3, #4
 8013f88:	f1b9 0f00 	cmp.w	r9, #0
 8013f8c:	d01f      	beq.n	8013fce <__multiply+0x132>
 8013f8e:	6834      	ldr	r4, [r6, #0]
 8013f90:	f105 0114 	add.w	r1, r5, #20
 8013f94:	46b6      	mov	lr, r6
 8013f96:	f04f 0a00 	mov.w	sl, #0
 8013f9a:	880a      	ldrh	r2, [r1, #0]
 8013f9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013fa0:	fb09 b202 	mla	r2, r9, r2, fp
 8013fa4:	4492      	add	sl, r2
 8013fa6:	b2a4      	uxth	r4, r4
 8013fa8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013fac:	f84e 4b04 	str.w	r4, [lr], #4
 8013fb0:	f851 4b04 	ldr.w	r4, [r1], #4
 8013fb4:	f8be 2000 	ldrh.w	r2, [lr]
 8013fb8:	0c24      	lsrs	r4, r4, #16
 8013fba:	fb09 2404 	mla	r4, r9, r4, r2
 8013fbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013fc2:	458c      	cmp	ip, r1
 8013fc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013fc8:	d8e7      	bhi.n	8013f9a <__multiply+0xfe>
 8013fca:	9a01      	ldr	r2, [sp, #4]
 8013fcc:	50b4      	str	r4, [r6, r2]
 8013fce:	3604      	adds	r6, #4
 8013fd0:	e7a3      	b.n	8013f1a <__multiply+0x7e>
 8013fd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1a5      	bne.n	8013f26 <__multiply+0x8a>
 8013fda:	3f01      	subs	r7, #1
 8013fdc:	e7a1      	b.n	8013f22 <__multiply+0x86>
 8013fde:	bf00      	nop
 8013fe0:	08029211 	.word	0x08029211
 8013fe4:	080292a0 	.word	0x080292a0

08013fe8 <__pow5mult>:
 8013fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fec:	4615      	mov	r5, r2
 8013fee:	f012 0203 	ands.w	r2, r2, #3
 8013ff2:	4606      	mov	r6, r0
 8013ff4:	460f      	mov	r7, r1
 8013ff6:	d007      	beq.n	8014008 <__pow5mult+0x20>
 8013ff8:	4c25      	ldr	r4, [pc, #148]	; (8014090 <__pow5mult+0xa8>)
 8013ffa:	3a01      	subs	r2, #1
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014002:	f7ff fe51 	bl	8013ca8 <__multadd>
 8014006:	4607      	mov	r7, r0
 8014008:	10ad      	asrs	r5, r5, #2
 801400a:	d03d      	beq.n	8014088 <__pow5mult+0xa0>
 801400c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801400e:	b97c      	cbnz	r4, 8014030 <__pow5mult+0x48>
 8014010:	2010      	movs	r0, #16
 8014012:	f7ff fdbf 	bl	8013b94 <malloc>
 8014016:	4602      	mov	r2, r0
 8014018:	6270      	str	r0, [r6, #36]	; 0x24
 801401a:	b928      	cbnz	r0, 8014028 <__pow5mult+0x40>
 801401c:	4b1d      	ldr	r3, [pc, #116]	; (8014094 <__pow5mult+0xac>)
 801401e:	481e      	ldr	r0, [pc, #120]	; (8014098 <__pow5mult+0xb0>)
 8014020:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014024:	f7fe fb98 	bl	8012758 <__assert_func>
 8014028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801402c:	6004      	str	r4, [r0, #0]
 801402e:	60c4      	str	r4, [r0, #12]
 8014030:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014038:	b94c      	cbnz	r4, 801404e <__pow5mult+0x66>
 801403a:	f240 2171 	movw	r1, #625	; 0x271
 801403e:	4630      	mov	r0, r6
 8014040:	f7ff ff16 	bl	8013e70 <__i2b>
 8014044:	2300      	movs	r3, #0
 8014046:	f8c8 0008 	str.w	r0, [r8, #8]
 801404a:	4604      	mov	r4, r0
 801404c:	6003      	str	r3, [r0, #0]
 801404e:	f04f 0900 	mov.w	r9, #0
 8014052:	07eb      	lsls	r3, r5, #31
 8014054:	d50a      	bpl.n	801406c <__pow5mult+0x84>
 8014056:	4639      	mov	r1, r7
 8014058:	4622      	mov	r2, r4
 801405a:	4630      	mov	r0, r6
 801405c:	f7ff ff1e 	bl	8013e9c <__multiply>
 8014060:	4639      	mov	r1, r7
 8014062:	4680      	mov	r8, r0
 8014064:	4630      	mov	r0, r6
 8014066:	f7ff fdfd 	bl	8013c64 <_Bfree>
 801406a:	4647      	mov	r7, r8
 801406c:	106d      	asrs	r5, r5, #1
 801406e:	d00b      	beq.n	8014088 <__pow5mult+0xa0>
 8014070:	6820      	ldr	r0, [r4, #0]
 8014072:	b938      	cbnz	r0, 8014084 <__pow5mult+0x9c>
 8014074:	4622      	mov	r2, r4
 8014076:	4621      	mov	r1, r4
 8014078:	4630      	mov	r0, r6
 801407a:	f7ff ff0f 	bl	8013e9c <__multiply>
 801407e:	6020      	str	r0, [r4, #0]
 8014080:	f8c0 9000 	str.w	r9, [r0]
 8014084:	4604      	mov	r4, r0
 8014086:	e7e4      	b.n	8014052 <__pow5mult+0x6a>
 8014088:	4638      	mov	r0, r7
 801408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801408e:	bf00      	nop
 8014090:	080293f0 	.word	0x080293f0
 8014094:	08028ff0 	.word	0x08028ff0
 8014098:	080292a0 	.word	0x080292a0

0801409c <__lshift>:
 801409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140a0:	460c      	mov	r4, r1
 80140a2:	6849      	ldr	r1, [r1, #4]
 80140a4:	6923      	ldr	r3, [r4, #16]
 80140a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80140aa:	68a3      	ldr	r3, [r4, #8]
 80140ac:	4607      	mov	r7, r0
 80140ae:	4691      	mov	r9, r2
 80140b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80140b4:	f108 0601 	add.w	r6, r8, #1
 80140b8:	42b3      	cmp	r3, r6
 80140ba:	db0b      	blt.n	80140d4 <__lshift+0x38>
 80140bc:	4638      	mov	r0, r7
 80140be:	f7ff fd91 	bl	8013be4 <_Balloc>
 80140c2:	4605      	mov	r5, r0
 80140c4:	b948      	cbnz	r0, 80140da <__lshift+0x3e>
 80140c6:	4602      	mov	r2, r0
 80140c8:	4b28      	ldr	r3, [pc, #160]	; (801416c <__lshift+0xd0>)
 80140ca:	4829      	ldr	r0, [pc, #164]	; (8014170 <__lshift+0xd4>)
 80140cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80140d0:	f7fe fb42 	bl	8012758 <__assert_func>
 80140d4:	3101      	adds	r1, #1
 80140d6:	005b      	lsls	r3, r3, #1
 80140d8:	e7ee      	b.n	80140b8 <__lshift+0x1c>
 80140da:	2300      	movs	r3, #0
 80140dc:	f100 0114 	add.w	r1, r0, #20
 80140e0:	f100 0210 	add.w	r2, r0, #16
 80140e4:	4618      	mov	r0, r3
 80140e6:	4553      	cmp	r3, sl
 80140e8:	db33      	blt.n	8014152 <__lshift+0xb6>
 80140ea:	6920      	ldr	r0, [r4, #16]
 80140ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80140f0:	f104 0314 	add.w	r3, r4, #20
 80140f4:	f019 091f 	ands.w	r9, r9, #31
 80140f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014100:	d02b      	beq.n	801415a <__lshift+0xbe>
 8014102:	f1c9 0e20 	rsb	lr, r9, #32
 8014106:	468a      	mov	sl, r1
 8014108:	2200      	movs	r2, #0
 801410a:	6818      	ldr	r0, [r3, #0]
 801410c:	fa00 f009 	lsl.w	r0, r0, r9
 8014110:	4302      	orrs	r2, r0
 8014112:	f84a 2b04 	str.w	r2, [sl], #4
 8014116:	f853 2b04 	ldr.w	r2, [r3], #4
 801411a:	459c      	cmp	ip, r3
 801411c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014120:	d8f3      	bhi.n	801410a <__lshift+0x6e>
 8014122:	ebac 0304 	sub.w	r3, ip, r4
 8014126:	3b15      	subs	r3, #21
 8014128:	f023 0303 	bic.w	r3, r3, #3
 801412c:	3304      	adds	r3, #4
 801412e:	f104 0015 	add.w	r0, r4, #21
 8014132:	4584      	cmp	ip, r0
 8014134:	bf38      	it	cc
 8014136:	2304      	movcc	r3, #4
 8014138:	50ca      	str	r2, [r1, r3]
 801413a:	b10a      	cbz	r2, 8014140 <__lshift+0xa4>
 801413c:	f108 0602 	add.w	r6, r8, #2
 8014140:	3e01      	subs	r6, #1
 8014142:	4638      	mov	r0, r7
 8014144:	612e      	str	r6, [r5, #16]
 8014146:	4621      	mov	r1, r4
 8014148:	f7ff fd8c 	bl	8013c64 <_Bfree>
 801414c:	4628      	mov	r0, r5
 801414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014152:	f842 0f04 	str.w	r0, [r2, #4]!
 8014156:	3301      	adds	r3, #1
 8014158:	e7c5      	b.n	80140e6 <__lshift+0x4a>
 801415a:	3904      	subs	r1, #4
 801415c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014160:	f841 2f04 	str.w	r2, [r1, #4]!
 8014164:	459c      	cmp	ip, r3
 8014166:	d8f9      	bhi.n	801415c <__lshift+0xc0>
 8014168:	e7ea      	b.n	8014140 <__lshift+0xa4>
 801416a:	bf00      	nop
 801416c:	08029211 	.word	0x08029211
 8014170:	080292a0 	.word	0x080292a0

08014174 <__mcmp>:
 8014174:	b530      	push	{r4, r5, lr}
 8014176:	6902      	ldr	r2, [r0, #16]
 8014178:	690c      	ldr	r4, [r1, #16]
 801417a:	1b12      	subs	r2, r2, r4
 801417c:	d10e      	bne.n	801419c <__mcmp+0x28>
 801417e:	f100 0314 	add.w	r3, r0, #20
 8014182:	3114      	adds	r1, #20
 8014184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801418c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014194:	42a5      	cmp	r5, r4
 8014196:	d003      	beq.n	80141a0 <__mcmp+0x2c>
 8014198:	d305      	bcc.n	80141a6 <__mcmp+0x32>
 801419a:	2201      	movs	r2, #1
 801419c:	4610      	mov	r0, r2
 801419e:	bd30      	pop	{r4, r5, pc}
 80141a0:	4283      	cmp	r3, r0
 80141a2:	d3f3      	bcc.n	801418c <__mcmp+0x18>
 80141a4:	e7fa      	b.n	801419c <__mcmp+0x28>
 80141a6:	f04f 32ff 	mov.w	r2, #4294967295
 80141aa:	e7f7      	b.n	801419c <__mcmp+0x28>

080141ac <__mdiff>:
 80141ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b0:	460c      	mov	r4, r1
 80141b2:	4606      	mov	r6, r0
 80141b4:	4611      	mov	r1, r2
 80141b6:	4620      	mov	r0, r4
 80141b8:	4617      	mov	r7, r2
 80141ba:	f7ff ffdb 	bl	8014174 <__mcmp>
 80141be:	1e05      	subs	r5, r0, #0
 80141c0:	d110      	bne.n	80141e4 <__mdiff+0x38>
 80141c2:	4629      	mov	r1, r5
 80141c4:	4630      	mov	r0, r6
 80141c6:	f7ff fd0d 	bl	8013be4 <_Balloc>
 80141ca:	b930      	cbnz	r0, 80141da <__mdiff+0x2e>
 80141cc:	4b39      	ldr	r3, [pc, #228]	; (80142b4 <__mdiff+0x108>)
 80141ce:	4602      	mov	r2, r0
 80141d0:	f240 2132 	movw	r1, #562	; 0x232
 80141d4:	4838      	ldr	r0, [pc, #224]	; (80142b8 <__mdiff+0x10c>)
 80141d6:	f7fe fabf 	bl	8012758 <__assert_func>
 80141da:	2301      	movs	r3, #1
 80141dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80141e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e4:	bfa4      	itt	ge
 80141e6:	463b      	movge	r3, r7
 80141e8:	4627      	movge	r7, r4
 80141ea:	4630      	mov	r0, r6
 80141ec:	6879      	ldr	r1, [r7, #4]
 80141ee:	bfa6      	itte	ge
 80141f0:	461c      	movge	r4, r3
 80141f2:	2500      	movge	r5, #0
 80141f4:	2501      	movlt	r5, #1
 80141f6:	f7ff fcf5 	bl	8013be4 <_Balloc>
 80141fa:	b920      	cbnz	r0, 8014206 <__mdiff+0x5a>
 80141fc:	4b2d      	ldr	r3, [pc, #180]	; (80142b4 <__mdiff+0x108>)
 80141fe:	4602      	mov	r2, r0
 8014200:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014204:	e7e6      	b.n	80141d4 <__mdiff+0x28>
 8014206:	693e      	ldr	r6, [r7, #16]
 8014208:	60c5      	str	r5, [r0, #12]
 801420a:	6925      	ldr	r5, [r4, #16]
 801420c:	f107 0114 	add.w	r1, r7, #20
 8014210:	f104 0914 	add.w	r9, r4, #20
 8014214:	f100 0e14 	add.w	lr, r0, #20
 8014218:	f107 0210 	add.w	r2, r7, #16
 801421c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014220:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014224:	46f2      	mov	sl, lr
 8014226:	2700      	movs	r7, #0
 8014228:	f859 3b04 	ldr.w	r3, [r9], #4
 801422c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014230:	fa1f f883 	uxth.w	r8, r3
 8014234:	fa17 f78b 	uxtah	r7, r7, fp
 8014238:	0c1b      	lsrs	r3, r3, #16
 801423a:	eba7 0808 	sub.w	r8, r7, r8
 801423e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014242:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014246:	fa1f f888 	uxth.w	r8, r8
 801424a:	141f      	asrs	r7, r3, #16
 801424c:	454d      	cmp	r5, r9
 801424e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014252:	f84a 3b04 	str.w	r3, [sl], #4
 8014256:	d8e7      	bhi.n	8014228 <__mdiff+0x7c>
 8014258:	1b2b      	subs	r3, r5, r4
 801425a:	3b15      	subs	r3, #21
 801425c:	f023 0303 	bic.w	r3, r3, #3
 8014260:	3304      	adds	r3, #4
 8014262:	3415      	adds	r4, #21
 8014264:	42a5      	cmp	r5, r4
 8014266:	bf38      	it	cc
 8014268:	2304      	movcc	r3, #4
 801426a:	4419      	add	r1, r3
 801426c:	4473      	add	r3, lr
 801426e:	469e      	mov	lr, r3
 8014270:	460d      	mov	r5, r1
 8014272:	4565      	cmp	r5, ip
 8014274:	d30e      	bcc.n	8014294 <__mdiff+0xe8>
 8014276:	f10c 0203 	add.w	r2, ip, #3
 801427a:	1a52      	subs	r2, r2, r1
 801427c:	f022 0203 	bic.w	r2, r2, #3
 8014280:	3903      	subs	r1, #3
 8014282:	458c      	cmp	ip, r1
 8014284:	bf38      	it	cc
 8014286:	2200      	movcc	r2, #0
 8014288:	441a      	add	r2, r3
 801428a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801428e:	b17b      	cbz	r3, 80142b0 <__mdiff+0x104>
 8014290:	6106      	str	r6, [r0, #16]
 8014292:	e7a5      	b.n	80141e0 <__mdiff+0x34>
 8014294:	f855 8b04 	ldr.w	r8, [r5], #4
 8014298:	fa17 f488 	uxtah	r4, r7, r8
 801429c:	1422      	asrs	r2, r4, #16
 801429e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80142a2:	b2a4      	uxth	r4, r4
 80142a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80142a8:	f84e 4b04 	str.w	r4, [lr], #4
 80142ac:	1417      	asrs	r7, r2, #16
 80142ae:	e7e0      	b.n	8014272 <__mdiff+0xc6>
 80142b0:	3e01      	subs	r6, #1
 80142b2:	e7ea      	b.n	801428a <__mdiff+0xde>
 80142b4:	08029211 	.word	0x08029211
 80142b8:	080292a0 	.word	0x080292a0

080142bc <__ulp>:
 80142bc:	b082      	sub	sp, #8
 80142be:	ed8d 0b00 	vstr	d0, [sp]
 80142c2:	9b01      	ldr	r3, [sp, #4]
 80142c4:	4912      	ldr	r1, [pc, #72]	; (8014310 <__ulp+0x54>)
 80142c6:	4019      	ands	r1, r3
 80142c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80142cc:	2900      	cmp	r1, #0
 80142ce:	dd05      	ble.n	80142dc <__ulp+0x20>
 80142d0:	2200      	movs	r2, #0
 80142d2:	460b      	mov	r3, r1
 80142d4:	ec43 2b10 	vmov	d0, r2, r3
 80142d8:	b002      	add	sp, #8
 80142da:	4770      	bx	lr
 80142dc:	4249      	negs	r1, r1
 80142de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80142e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80142e6:	f04f 0200 	mov.w	r2, #0
 80142ea:	f04f 0300 	mov.w	r3, #0
 80142ee:	da04      	bge.n	80142fa <__ulp+0x3e>
 80142f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80142f4:	fa41 f300 	asr.w	r3, r1, r0
 80142f8:	e7ec      	b.n	80142d4 <__ulp+0x18>
 80142fa:	f1a0 0114 	sub.w	r1, r0, #20
 80142fe:	291e      	cmp	r1, #30
 8014300:	bfda      	itte	le
 8014302:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014306:	fa20 f101 	lsrle.w	r1, r0, r1
 801430a:	2101      	movgt	r1, #1
 801430c:	460a      	mov	r2, r1
 801430e:	e7e1      	b.n	80142d4 <__ulp+0x18>
 8014310:	7ff00000 	.word	0x7ff00000

08014314 <__b2d>:
 8014314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014316:	6905      	ldr	r5, [r0, #16]
 8014318:	f100 0714 	add.w	r7, r0, #20
 801431c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014320:	1f2e      	subs	r6, r5, #4
 8014322:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014326:	4620      	mov	r0, r4
 8014328:	f7ff fd52 	bl	8013dd0 <__hi0bits>
 801432c:	f1c0 0320 	rsb	r3, r0, #32
 8014330:	280a      	cmp	r0, #10
 8014332:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80143b0 <__b2d+0x9c>
 8014336:	600b      	str	r3, [r1, #0]
 8014338:	dc14      	bgt.n	8014364 <__b2d+0x50>
 801433a:	f1c0 0e0b 	rsb	lr, r0, #11
 801433e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014342:	42b7      	cmp	r7, r6
 8014344:	ea41 030c 	orr.w	r3, r1, ip
 8014348:	bf34      	ite	cc
 801434a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801434e:	2100      	movcs	r1, #0
 8014350:	3015      	adds	r0, #21
 8014352:	fa04 f000 	lsl.w	r0, r4, r0
 8014356:	fa21 f10e 	lsr.w	r1, r1, lr
 801435a:	ea40 0201 	orr.w	r2, r0, r1
 801435e:	ec43 2b10 	vmov	d0, r2, r3
 8014362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014364:	42b7      	cmp	r7, r6
 8014366:	bf3a      	itte	cc
 8014368:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801436c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014370:	2100      	movcs	r1, #0
 8014372:	380b      	subs	r0, #11
 8014374:	d017      	beq.n	80143a6 <__b2d+0x92>
 8014376:	f1c0 0c20 	rsb	ip, r0, #32
 801437a:	fa04 f500 	lsl.w	r5, r4, r0
 801437e:	42be      	cmp	r6, r7
 8014380:	fa21 f40c 	lsr.w	r4, r1, ip
 8014384:	ea45 0504 	orr.w	r5, r5, r4
 8014388:	bf8c      	ite	hi
 801438a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801438e:	2400      	movls	r4, #0
 8014390:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014394:	fa01 f000 	lsl.w	r0, r1, r0
 8014398:	fa24 f40c 	lsr.w	r4, r4, ip
 801439c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80143a0:	ea40 0204 	orr.w	r2, r0, r4
 80143a4:	e7db      	b.n	801435e <__b2d+0x4a>
 80143a6:	ea44 030c 	orr.w	r3, r4, ip
 80143aa:	460a      	mov	r2, r1
 80143ac:	e7d7      	b.n	801435e <__b2d+0x4a>
 80143ae:	bf00      	nop
 80143b0:	3ff00000 	.word	0x3ff00000

080143b4 <__d2b>:
 80143b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143b8:	4689      	mov	r9, r1
 80143ba:	2101      	movs	r1, #1
 80143bc:	ec57 6b10 	vmov	r6, r7, d0
 80143c0:	4690      	mov	r8, r2
 80143c2:	f7ff fc0f 	bl	8013be4 <_Balloc>
 80143c6:	4604      	mov	r4, r0
 80143c8:	b930      	cbnz	r0, 80143d8 <__d2b+0x24>
 80143ca:	4602      	mov	r2, r0
 80143cc:	4b25      	ldr	r3, [pc, #148]	; (8014464 <__d2b+0xb0>)
 80143ce:	4826      	ldr	r0, [pc, #152]	; (8014468 <__d2b+0xb4>)
 80143d0:	f240 310a 	movw	r1, #778	; 0x30a
 80143d4:	f7fe f9c0 	bl	8012758 <__assert_func>
 80143d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80143dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143e0:	bb35      	cbnz	r5, 8014430 <__d2b+0x7c>
 80143e2:	2e00      	cmp	r6, #0
 80143e4:	9301      	str	r3, [sp, #4]
 80143e6:	d028      	beq.n	801443a <__d2b+0x86>
 80143e8:	4668      	mov	r0, sp
 80143ea:	9600      	str	r6, [sp, #0]
 80143ec:	f7ff fd10 	bl	8013e10 <__lo0bits>
 80143f0:	9900      	ldr	r1, [sp, #0]
 80143f2:	b300      	cbz	r0, 8014436 <__d2b+0x82>
 80143f4:	9a01      	ldr	r2, [sp, #4]
 80143f6:	f1c0 0320 	rsb	r3, r0, #32
 80143fa:	fa02 f303 	lsl.w	r3, r2, r3
 80143fe:	430b      	orrs	r3, r1
 8014400:	40c2      	lsrs	r2, r0
 8014402:	6163      	str	r3, [r4, #20]
 8014404:	9201      	str	r2, [sp, #4]
 8014406:	9b01      	ldr	r3, [sp, #4]
 8014408:	61a3      	str	r3, [r4, #24]
 801440a:	2b00      	cmp	r3, #0
 801440c:	bf14      	ite	ne
 801440e:	2202      	movne	r2, #2
 8014410:	2201      	moveq	r2, #1
 8014412:	6122      	str	r2, [r4, #16]
 8014414:	b1d5      	cbz	r5, 801444c <__d2b+0x98>
 8014416:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801441a:	4405      	add	r5, r0
 801441c:	f8c9 5000 	str.w	r5, [r9]
 8014420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014424:	f8c8 0000 	str.w	r0, [r8]
 8014428:	4620      	mov	r0, r4
 801442a:	b003      	add	sp, #12
 801442c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014434:	e7d5      	b.n	80143e2 <__d2b+0x2e>
 8014436:	6161      	str	r1, [r4, #20]
 8014438:	e7e5      	b.n	8014406 <__d2b+0x52>
 801443a:	a801      	add	r0, sp, #4
 801443c:	f7ff fce8 	bl	8013e10 <__lo0bits>
 8014440:	9b01      	ldr	r3, [sp, #4]
 8014442:	6163      	str	r3, [r4, #20]
 8014444:	2201      	movs	r2, #1
 8014446:	6122      	str	r2, [r4, #16]
 8014448:	3020      	adds	r0, #32
 801444a:	e7e3      	b.n	8014414 <__d2b+0x60>
 801444c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014454:	f8c9 0000 	str.w	r0, [r9]
 8014458:	6918      	ldr	r0, [r3, #16]
 801445a:	f7ff fcb9 	bl	8013dd0 <__hi0bits>
 801445e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014462:	e7df      	b.n	8014424 <__d2b+0x70>
 8014464:	08029211 	.word	0x08029211
 8014468:	080292a0 	.word	0x080292a0

0801446c <__ratio>:
 801446c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014470:	4688      	mov	r8, r1
 8014472:	4669      	mov	r1, sp
 8014474:	4681      	mov	r9, r0
 8014476:	f7ff ff4d 	bl	8014314 <__b2d>
 801447a:	a901      	add	r1, sp, #4
 801447c:	4640      	mov	r0, r8
 801447e:	ec55 4b10 	vmov	r4, r5, d0
 8014482:	f7ff ff47 	bl	8014314 <__b2d>
 8014486:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801448a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801448e:	eba3 0c02 	sub.w	ip, r3, r2
 8014492:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014496:	1a9b      	subs	r3, r3, r2
 8014498:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801449c:	ec51 0b10 	vmov	r0, r1, d0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	bfd6      	itet	le
 80144a4:	460a      	movle	r2, r1
 80144a6:	462a      	movgt	r2, r5
 80144a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80144ac:	468b      	mov	fp, r1
 80144ae:	462f      	mov	r7, r5
 80144b0:	bfd4      	ite	le
 80144b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80144b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80144ba:	4620      	mov	r0, r4
 80144bc:	ee10 2a10 	vmov	r2, s0
 80144c0:	465b      	mov	r3, fp
 80144c2:	4639      	mov	r1, r7
 80144c4:	f7ec f9da 	bl	800087c <__aeabi_ddiv>
 80144c8:	ec41 0b10 	vmov	d0, r0, r1
 80144cc:	b003      	add	sp, #12
 80144ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080144d2 <__copybits>:
 80144d2:	3901      	subs	r1, #1
 80144d4:	b570      	push	{r4, r5, r6, lr}
 80144d6:	1149      	asrs	r1, r1, #5
 80144d8:	6914      	ldr	r4, [r2, #16]
 80144da:	3101      	adds	r1, #1
 80144dc:	f102 0314 	add.w	r3, r2, #20
 80144e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80144e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80144e8:	1f05      	subs	r5, r0, #4
 80144ea:	42a3      	cmp	r3, r4
 80144ec:	d30c      	bcc.n	8014508 <__copybits+0x36>
 80144ee:	1aa3      	subs	r3, r4, r2
 80144f0:	3b11      	subs	r3, #17
 80144f2:	f023 0303 	bic.w	r3, r3, #3
 80144f6:	3211      	adds	r2, #17
 80144f8:	42a2      	cmp	r2, r4
 80144fa:	bf88      	it	hi
 80144fc:	2300      	movhi	r3, #0
 80144fe:	4418      	add	r0, r3
 8014500:	2300      	movs	r3, #0
 8014502:	4288      	cmp	r0, r1
 8014504:	d305      	bcc.n	8014512 <__copybits+0x40>
 8014506:	bd70      	pop	{r4, r5, r6, pc}
 8014508:	f853 6b04 	ldr.w	r6, [r3], #4
 801450c:	f845 6f04 	str.w	r6, [r5, #4]!
 8014510:	e7eb      	b.n	80144ea <__copybits+0x18>
 8014512:	f840 3b04 	str.w	r3, [r0], #4
 8014516:	e7f4      	b.n	8014502 <__copybits+0x30>

08014518 <__any_on>:
 8014518:	f100 0214 	add.w	r2, r0, #20
 801451c:	6900      	ldr	r0, [r0, #16]
 801451e:	114b      	asrs	r3, r1, #5
 8014520:	4298      	cmp	r0, r3
 8014522:	b510      	push	{r4, lr}
 8014524:	db11      	blt.n	801454a <__any_on+0x32>
 8014526:	dd0a      	ble.n	801453e <__any_on+0x26>
 8014528:	f011 011f 	ands.w	r1, r1, #31
 801452c:	d007      	beq.n	801453e <__any_on+0x26>
 801452e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014532:	fa24 f001 	lsr.w	r0, r4, r1
 8014536:	fa00 f101 	lsl.w	r1, r0, r1
 801453a:	428c      	cmp	r4, r1
 801453c:	d10b      	bne.n	8014556 <__any_on+0x3e>
 801453e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014542:	4293      	cmp	r3, r2
 8014544:	d803      	bhi.n	801454e <__any_on+0x36>
 8014546:	2000      	movs	r0, #0
 8014548:	bd10      	pop	{r4, pc}
 801454a:	4603      	mov	r3, r0
 801454c:	e7f7      	b.n	801453e <__any_on+0x26>
 801454e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014552:	2900      	cmp	r1, #0
 8014554:	d0f5      	beq.n	8014542 <__any_on+0x2a>
 8014556:	2001      	movs	r0, #1
 8014558:	e7f6      	b.n	8014548 <__any_on+0x30>

0801455a <_calloc_r>:
 801455a:	b513      	push	{r0, r1, r4, lr}
 801455c:	434a      	muls	r2, r1
 801455e:	4611      	mov	r1, r2
 8014560:	9201      	str	r2, [sp, #4]
 8014562:	f000 f859 	bl	8014618 <_malloc_r>
 8014566:	4604      	mov	r4, r0
 8014568:	b118      	cbz	r0, 8014572 <_calloc_r+0x18>
 801456a:	9a01      	ldr	r2, [sp, #4]
 801456c:	2100      	movs	r1, #0
 801456e:	f7fc fb27 	bl	8010bc0 <memset>
 8014572:	4620      	mov	r0, r4
 8014574:	b002      	add	sp, #8
 8014576:	bd10      	pop	{r4, pc}

08014578 <_free_r>:
 8014578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801457a:	2900      	cmp	r1, #0
 801457c:	d048      	beq.n	8014610 <_free_r+0x98>
 801457e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014582:	9001      	str	r0, [sp, #4]
 8014584:	2b00      	cmp	r3, #0
 8014586:	f1a1 0404 	sub.w	r4, r1, #4
 801458a:	bfb8      	it	lt
 801458c:	18e4      	addlt	r4, r4, r3
 801458e:	f000 fe8b 	bl	80152a8 <__malloc_lock>
 8014592:	4a20      	ldr	r2, [pc, #128]	; (8014614 <_free_r+0x9c>)
 8014594:	9801      	ldr	r0, [sp, #4]
 8014596:	6813      	ldr	r3, [r2, #0]
 8014598:	4615      	mov	r5, r2
 801459a:	b933      	cbnz	r3, 80145aa <_free_r+0x32>
 801459c:	6063      	str	r3, [r4, #4]
 801459e:	6014      	str	r4, [r2, #0]
 80145a0:	b003      	add	sp, #12
 80145a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145a6:	f000 be85 	b.w	80152b4 <__malloc_unlock>
 80145aa:	42a3      	cmp	r3, r4
 80145ac:	d90b      	bls.n	80145c6 <_free_r+0x4e>
 80145ae:	6821      	ldr	r1, [r4, #0]
 80145b0:	1862      	adds	r2, r4, r1
 80145b2:	4293      	cmp	r3, r2
 80145b4:	bf04      	itt	eq
 80145b6:	681a      	ldreq	r2, [r3, #0]
 80145b8:	685b      	ldreq	r3, [r3, #4]
 80145ba:	6063      	str	r3, [r4, #4]
 80145bc:	bf04      	itt	eq
 80145be:	1852      	addeq	r2, r2, r1
 80145c0:	6022      	streq	r2, [r4, #0]
 80145c2:	602c      	str	r4, [r5, #0]
 80145c4:	e7ec      	b.n	80145a0 <_free_r+0x28>
 80145c6:	461a      	mov	r2, r3
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	b10b      	cbz	r3, 80145d0 <_free_r+0x58>
 80145cc:	42a3      	cmp	r3, r4
 80145ce:	d9fa      	bls.n	80145c6 <_free_r+0x4e>
 80145d0:	6811      	ldr	r1, [r2, #0]
 80145d2:	1855      	adds	r5, r2, r1
 80145d4:	42a5      	cmp	r5, r4
 80145d6:	d10b      	bne.n	80145f0 <_free_r+0x78>
 80145d8:	6824      	ldr	r4, [r4, #0]
 80145da:	4421      	add	r1, r4
 80145dc:	1854      	adds	r4, r2, r1
 80145de:	42a3      	cmp	r3, r4
 80145e0:	6011      	str	r1, [r2, #0]
 80145e2:	d1dd      	bne.n	80145a0 <_free_r+0x28>
 80145e4:	681c      	ldr	r4, [r3, #0]
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	6053      	str	r3, [r2, #4]
 80145ea:	4421      	add	r1, r4
 80145ec:	6011      	str	r1, [r2, #0]
 80145ee:	e7d7      	b.n	80145a0 <_free_r+0x28>
 80145f0:	d902      	bls.n	80145f8 <_free_r+0x80>
 80145f2:	230c      	movs	r3, #12
 80145f4:	6003      	str	r3, [r0, #0]
 80145f6:	e7d3      	b.n	80145a0 <_free_r+0x28>
 80145f8:	6825      	ldr	r5, [r4, #0]
 80145fa:	1961      	adds	r1, r4, r5
 80145fc:	428b      	cmp	r3, r1
 80145fe:	bf04      	itt	eq
 8014600:	6819      	ldreq	r1, [r3, #0]
 8014602:	685b      	ldreq	r3, [r3, #4]
 8014604:	6063      	str	r3, [r4, #4]
 8014606:	bf04      	itt	eq
 8014608:	1949      	addeq	r1, r1, r5
 801460a:	6021      	streq	r1, [r4, #0]
 801460c:	6054      	str	r4, [r2, #4]
 801460e:	e7c7      	b.n	80145a0 <_free_r+0x28>
 8014610:	b003      	add	sp, #12
 8014612:	bd30      	pop	{r4, r5, pc}
 8014614:	200002b8 	.word	0x200002b8

08014618 <_malloc_r>:
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801461a:	1ccd      	adds	r5, r1, #3
 801461c:	f025 0503 	bic.w	r5, r5, #3
 8014620:	3508      	adds	r5, #8
 8014622:	2d0c      	cmp	r5, #12
 8014624:	bf38      	it	cc
 8014626:	250c      	movcc	r5, #12
 8014628:	2d00      	cmp	r5, #0
 801462a:	4606      	mov	r6, r0
 801462c:	db01      	blt.n	8014632 <_malloc_r+0x1a>
 801462e:	42a9      	cmp	r1, r5
 8014630:	d903      	bls.n	801463a <_malloc_r+0x22>
 8014632:	230c      	movs	r3, #12
 8014634:	6033      	str	r3, [r6, #0]
 8014636:	2000      	movs	r0, #0
 8014638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801463a:	f000 fe35 	bl	80152a8 <__malloc_lock>
 801463e:	4921      	ldr	r1, [pc, #132]	; (80146c4 <_malloc_r+0xac>)
 8014640:	680a      	ldr	r2, [r1, #0]
 8014642:	4614      	mov	r4, r2
 8014644:	b99c      	cbnz	r4, 801466e <_malloc_r+0x56>
 8014646:	4f20      	ldr	r7, [pc, #128]	; (80146c8 <_malloc_r+0xb0>)
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	b923      	cbnz	r3, 8014656 <_malloc_r+0x3e>
 801464c:	4621      	mov	r1, r4
 801464e:	4630      	mov	r0, r6
 8014650:	f000 fafa 	bl	8014c48 <_sbrk_r>
 8014654:	6038      	str	r0, [r7, #0]
 8014656:	4629      	mov	r1, r5
 8014658:	4630      	mov	r0, r6
 801465a:	f000 faf5 	bl	8014c48 <_sbrk_r>
 801465e:	1c43      	adds	r3, r0, #1
 8014660:	d123      	bne.n	80146aa <_malloc_r+0x92>
 8014662:	230c      	movs	r3, #12
 8014664:	6033      	str	r3, [r6, #0]
 8014666:	4630      	mov	r0, r6
 8014668:	f000 fe24 	bl	80152b4 <__malloc_unlock>
 801466c:	e7e3      	b.n	8014636 <_malloc_r+0x1e>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	1b5b      	subs	r3, r3, r5
 8014672:	d417      	bmi.n	80146a4 <_malloc_r+0x8c>
 8014674:	2b0b      	cmp	r3, #11
 8014676:	d903      	bls.n	8014680 <_malloc_r+0x68>
 8014678:	6023      	str	r3, [r4, #0]
 801467a:	441c      	add	r4, r3
 801467c:	6025      	str	r5, [r4, #0]
 801467e:	e004      	b.n	801468a <_malloc_r+0x72>
 8014680:	6863      	ldr	r3, [r4, #4]
 8014682:	42a2      	cmp	r2, r4
 8014684:	bf0c      	ite	eq
 8014686:	600b      	streq	r3, [r1, #0]
 8014688:	6053      	strne	r3, [r2, #4]
 801468a:	4630      	mov	r0, r6
 801468c:	f000 fe12 	bl	80152b4 <__malloc_unlock>
 8014690:	f104 000b 	add.w	r0, r4, #11
 8014694:	1d23      	adds	r3, r4, #4
 8014696:	f020 0007 	bic.w	r0, r0, #7
 801469a:	1ac2      	subs	r2, r0, r3
 801469c:	d0cc      	beq.n	8014638 <_malloc_r+0x20>
 801469e:	1a1b      	subs	r3, r3, r0
 80146a0:	50a3      	str	r3, [r4, r2]
 80146a2:	e7c9      	b.n	8014638 <_malloc_r+0x20>
 80146a4:	4622      	mov	r2, r4
 80146a6:	6864      	ldr	r4, [r4, #4]
 80146a8:	e7cc      	b.n	8014644 <_malloc_r+0x2c>
 80146aa:	1cc4      	adds	r4, r0, #3
 80146ac:	f024 0403 	bic.w	r4, r4, #3
 80146b0:	42a0      	cmp	r0, r4
 80146b2:	d0e3      	beq.n	801467c <_malloc_r+0x64>
 80146b4:	1a21      	subs	r1, r4, r0
 80146b6:	4630      	mov	r0, r6
 80146b8:	f000 fac6 	bl	8014c48 <_sbrk_r>
 80146bc:	3001      	adds	r0, #1
 80146be:	d1dd      	bne.n	801467c <_malloc_r+0x64>
 80146c0:	e7cf      	b.n	8014662 <_malloc_r+0x4a>
 80146c2:	bf00      	nop
 80146c4:	200002b8 	.word	0x200002b8
 80146c8:	200002bc 	.word	0x200002bc

080146cc <__ssputs_r>:
 80146cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146d0:	688e      	ldr	r6, [r1, #8]
 80146d2:	429e      	cmp	r6, r3
 80146d4:	4682      	mov	sl, r0
 80146d6:	460c      	mov	r4, r1
 80146d8:	4690      	mov	r8, r2
 80146da:	461f      	mov	r7, r3
 80146dc:	d838      	bhi.n	8014750 <__ssputs_r+0x84>
 80146de:	898a      	ldrh	r2, [r1, #12]
 80146e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80146e4:	d032      	beq.n	801474c <__ssputs_r+0x80>
 80146e6:	6825      	ldr	r5, [r4, #0]
 80146e8:	6909      	ldr	r1, [r1, #16]
 80146ea:	eba5 0901 	sub.w	r9, r5, r1
 80146ee:	6965      	ldr	r5, [r4, #20]
 80146f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80146f8:	3301      	adds	r3, #1
 80146fa:	444b      	add	r3, r9
 80146fc:	106d      	asrs	r5, r5, #1
 80146fe:	429d      	cmp	r5, r3
 8014700:	bf38      	it	cc
 8014702:	461d      	movcc	r5, r3
 8014704:	0553      	lsls	r3, r2, #21
 8014706:	d531      	bpl.n	801476c <__ssputs_r+0xa0>
 8014708:	4629      	mov	r1, r5
 801470a:	f7ff ff85 	bl	8014618 <_malloc_r>
 801470e:	4606      	mov	r6, r0
 8014710:	b950      	cbnz	r0, 8014728 <__ssputs_r+0x5c>
 8014712:	230c      	movs	r3, #12
 8014714:	f8ca 3000 	str.w	r3, [sl]
 8014718:	89a3      	ldrh	r3, [r4, #12]
 801471a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801471e:	81a3      	strh	r3, [r4, #12]
 8014720:	f04f 30ff 	mov.w	r0, #4294967295
 8014724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014728:	6921      	ldr	r1, [r4, #16]
 801472a:	464a      	mov	r2, r9
 801472c:	f7ff fa4c 	bl	8013bc8 <memcpy>
 8014730:	89a3      	ldrh	r3, [r4, #12]
 8014732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801473a:	81a3      	strh	r3, [r4, #12]
 801473c:	6126      	str	r6, [r4, #16]
 801473e:	6165      	str	r5, [r4, #20]
 8014740:	444e      	add	r6, r9
 8014742:	eba5 0509 	sub.w	r5, r5, r9
 8014746:	6026      	str	r6, [r4, #0]
 8014748:	60a5      	str	r5, [r4, #8]
 801474a:	463e      	mov	r6, r7
 801474c:	42be      	cmp	r6, r7
 801474e:	d900      	bls.n	8014752 <__ssputs_r+0x86>
 8014750:	463e      	mov	r6, r7
 8014752:	4632      	mov	r2, r6
 8014754:	6820      	ldr	r0, [r4, #0]
 8014756:	4641      	mov	r1, r8
 8014758:	f000 fd8c 	bl	8015274 <memmove>
 801475c:	68a3      	ldr	r3, [r4, #8]
 801475e:	6822      	ldr	r2, [r4, #0]
 8014760:	1b9b      	subs	r3, r3, r6
 8014762:	4432      	add	r2, r6
 8014764:	60a3      	str	r3, [r4, #8]
 8014766:	6022      	str	r2, [r4, #0]
 8014768:	2000      	movs	r0, #0
 801476a:	e7db      	b.n	8014724 <__ssputs_r+0x58>
 801476c:	462a      	mov	r2, r5
 801476e:	f000 fda7 	bl	80152c0 <_realloc_r>
 8014772:	4606      	mov	r6, r0
 8014774:	2800      	cmp	r0, #0
 8014776:	d1e1      	bne.n	801473c <__ssputs_r+0x70>
 8014778:	6921      	ldr	r1, [r4, #16]
 801477a:	4650      	mov	r0, sl
 801477c:	f7ff fefc 	bl	8014578 <_free_r>
 8014780:	e7c7      	b.n	8014712 <__ssputs_r+0x46>
	...

08014784 <_svfiprintf_r>:
 8014784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014788:	4698      	mov	r8, r3
 801478a:	898b      	ldrh	r3, [r1, #12]
 801478c:	061b      	lsls	r3, r3, #24
 801478e:	b09d      	sub	sp, #116	; 0x74
 8014790:	4607      	mov	r7, r0
 8014792:	460d      	mov	r5, r1
 8014794:	4614      	mov	r4, r2
 8014796:	d50e      	bpl.n	80147b6 <_svfiprintf_r+0x32>
 8014798:	690b      	ldr	r3, [r1, #16]
 801479a:	b963      	cbnz	r3, 80147b6 <_svfiprintf_r+0x32>
 801479c:	2140      	movs	r1, #64	; 0x40
 801479e:	f7ff ff3b 	bl	8014618 <_malloc_r>
 80147a2:	6028      	str	r0, [r5, #0]
 80147a4:	6128      	str	r0, [r5, #16]
 80147a6:	b920      	cbnz	r0, 80147b2 <_svfiprintf_r+0x2e>
 80147a8:	230c      	movs	r3, #12
 80147aa:	603b      	str	r3, [r7, #0]
 80147ac:	f04f 30ff 	mov.w	r0, #4294967295
 80147b0:	e0d1      	b.n	8014956 <_svfiprintf_r+0x1d2>
 80147b2:	2340      	movs	r3, #64	; 0x40
 80147b4:	616b      	str	r3, [r5, #20]
 80147b6:	2300      	movs	r3, #0
 80147b8:	9309      	str	r3, [sp, #36]	; 0x24
 80147ba:	2320      	movs	r3, #32
 80147bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80147c4:	2330      	movs	r3, #48	; 0x30
 80147c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014970 <_svfiprintf_r+0x1ec>
 80147ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147ce:	f04f 0901 	mov.w	r9, #1
 80147d2:	4623      	mov	r3, r4
 80147d4:	469a      	mov	sl, r3
 80147d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147da:	b10a      	cbz	r2, 80147e0 <_svfiprintf_r+0x5c>
 80147dc:	2a25      	cmp	r2, #37	; 0x25
 80147de:	d1f9      	bne.n	80147d4 <_svfiprintf_r+0x50>
 80147e0:	ebba 0b04 	subs.w	fp, sl, r4
 80147e4:	d00b      	beq.n	80147fe <_svfiprintf_r+0x7a>
 80147e6:	465b      	mov	r3, fp
 80147e8:	4622      	mov	r2, r4
 80147ea:	4629      	mov	r1, r5
 80147ec:	4638      	mov	r0, r7
 80147ee:	f7ff ff6d 	bl	80146cc <__ssputs_r>
 80147f2:	3001      	adds	r0, #1
 80147f4:	f000 80aa 	beq.w	801494c <_svfiprintf_r+0x1c8>
 80147f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147fa:	445a      	add	r2, fp
 80147fc:	9209      	str	r2, [sp, #36]	; 0x24
 80147fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 80a2 	beq.w	801494c <_svfiprintf_r+0x1c8>
 8014808:	2300      	movs	r3, #0
 801480a:	f04f 32ff 	mov.w	r2, #4294967295
 801480e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014812:	f10a 0a01 	add.w	sl, sl, #1
 8014816:	9304      	str	r3, [sp, #16]
 8014818:	9307      	str	r3, [sp, #28]
 801481a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801481e:	931a      	str	r3, [sp, #104]	; 0x68
 8014820:	4654      	mov	r4, sl
 8014822:	2205      	movs	r2, #5
 8014824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014828:	4851      	ldr	r0, [pc, #324]	; (8014970 <_svfiprintf_r+0x1ec>)
 801482a:	f7eb fcf1 	bl	8000210 <memchr>
 801482e:	9a04      	ldr	r2, [sp, #16]
 8014830:	b9d8      	cbnz	r0, 801486a <_svfiprintf_r+0xe6>
 8014832:	06d0      	lsls	r0, r2, #27
 8014834:	bf44      	itt	mi
 8014836:	2320      	movmi	r3, #32
 8014838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801483c:	0711      	lsls	r1, r2, #28
 801483e:	bf44      	itt	mi
 8014840:	232b      	movmi	r3, #43	; 0x2b
 8014842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014846:	f89a 3000 	ldrb.w	r3, [sl]
 801484a:	2b2a      	cmp	r3, #42	; 0x2a
 801484c:	d015      	beq.n	801487a <_svfiprintf_r+0xf6>
 801484e:	9a07      	ldr	r2, [sp, #28]
 8014850:	4654      	mov	r4, sl
 8014852:	2000      	movs	r0, #0
 8014854:	f04f 0c0a 	mov.w	ip, #10
 8014858:	4621      	mov	r1, r4
 801485a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801485e:	3b30      	subs	r3, #48	; 0x30
 8014860:	2b09      	cmp	r3, #9
 8014862:	d94e      	bls.n	8014902 <_svfiprintf_r+0x17e>
 8014864:	b1b0      	cbz	r0, 8014894 <_svfiprintf_r+0x110>
 8014866:	9207      	str	r2, [sp, #28]
 8014868:	e014      	b.n	8014894 <_svfiprintf_r+0x110>
 801486a:	eba0 0308 	sub.w	r3, r0, r8
 801486e:	fa09 f303 	lsl.w	r3, r9, r3
 8014872:	4313      	orrs	r3, r2
 8014874:	9304      	str	r3, [sp, #16]
 8014876:	46a2      	mov	sl, r4
 8014878:	e7d2      	b.n	8014820 <_svfiprintf_r+0x9c>
 801487a:	9b03      	ldr	r3, [sp, #12]
 801487c:	1d19      	adds	r1, r3, #4
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	9103      	str	r1, [sp, #12]
 8014882:	2b00      	cmp	r3, #0
 8014884:	bfbb      	ittet	lt
 8014886:	425b      	neglt	r3, r3
 8014888:	f042 0202 	orrlt.w	r2, r2, #2
 801488c:	9307      	strge	r3, [sp, #28]
 801488e:	9307      	strlt	r3, [sp, #28]
 8014890:	bfb8      	it	lt
 8014892:	9204      	strlt	r2, [sp, #16]
 8014894:	7823      	ldrb	r3, [r4, #0]
 8014896:	2b2e      	cmp	r3, #46	; 0x2e
 8014898:	d10c      	bne.n	80148b4 <_svfiprintf_r+0x130>
 801489a:	7863      	ldrb	r3, [r4, #1]
 801489c:	2b2a      	cmp	r3, #42	; 0x2a
 801489e:	d135      	bne.n	801490c <_svfiprintf_r+0x188>
 80148a0:	9b03      	ldr	r3, [sp, #12]
 80148a2:	1d1a      	adds	r2, r3, #4
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	9203      	str	r2, [sp, #12]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	bfb8      	it	lt
 80148ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80148b0:	3402      	adds	r4, #2
 80148b2:	9305      	str	r3, [sp, #20]
 80148b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014980 <_svfiprintf_r+0x1fc>
 80148b8:	7821      	ldrb	r1, [r4, #0]
 80148ba:	2203      	movs	r2, #3
 80148bc:	4650      	mov	r0, sl
 80148be:	f7eb fca7 	bl	8000210 <memchr>
 80148c2:	b140      	cbz	r0, 80148d6 <_svfiprintf_r+0x152>
 80148c4:	2340      	movs	r3, #64	; 0x40
 80148c6:	eba0 000a 	sub.w	r0, r0, sl
 80148ca:	fa03 f000 	lsl.w	r0, r3, r0
 80148ce:	9b04      	ldr	r3, [sp, #16]
 80148d0:	4303      	orrs	r3, r0
 80148d2:	3401      	adds	r4, #1
 80148d4:	9304      	str	r3, [sp, #16]
 80148d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148da:	4826      	ldr	r0, [pc, #152]	; (8014974 <_svfiprintf_r+0x1f0>)
 80148dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148e0:	2206      	movs	r2, #6
 80148e2:	f7eb fc95 	bl	8000210 <memchr>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d038      	beq.n	801495c <_svfiprintf_r+0x1d8>
 80148ea:	4b23      	ldr	r3, [pc, #140]	; (8014978 <_svfiprintf_r+0x1f4>)
 80148ec:	bb1b      	cbnz	r3, 8014936 <_svfiprintf_r+0x1b2>
 80148ee:	9b03      	ldr	r3, [sp, #12]
 80148f0:	3307      	adds	r3, #7
 80148f2:	f023 0307 	bic.w	r3, r3, #7
 80148f6:	3308      	adds	r3, #8
 80148f8:	9303      	str	r3, [sp, #12]
 80148fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148fc:	4433      	add	r3, r6
 80148fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014900:	e767      	b.n	80147d2 <_svfiprintf_r+0x4e>
 8014902:	fb0c 3202 	mla	r2, ip, r2, r3
 8014906:	460c      	mov	r4, r1
 8014908:	2001      	movs	r0, #1
 801490a:	e7a5      	b.n	8014858 <_svfiprintf_r+0xd4>
 801490c:	2300      	movs	r3, #0
 801490e:	3401      	adds	r4, #1
 8014910:	9305      	str	r3, [sp, #20]
 8014912:	4619      	mov	r1, r3
 8014914:	f04f 0c0a 	mov.w	ip, #10
 8014918:	4620      	mov	r0, r4
 801491a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801491e:	3a30      	subs	r2, #48	; 0x30
 8014920:	2a09      	cmp	r2, #9
 8014922:	d903      	bls.n	801492c <_svfiprintf_r+0x1a8>
 8014924:	2b00      	cmp	r3, #0
 8014926:	d0c5      	beq.n	80148b4 <_svfiprintf_r+0x130>
 8014928:	9105      	str	r1, [sp, #20]
 801492a:	e7c3      	b.n	80148b4 <_svfiprintf_r+0x130>
 801492c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014930:	4604      	mov	r4, r0
 8014932:	2301      	movs	r3, #1
 8014934:	e7f0      	b.n	8014918 <_svfiprintf_r+0x194>
 8014936:	ab03      	add	r3, sp, #12
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	462a      	mov	r2, r5
 801493c:	4b0f      	ldr	r3, [pc, #60]	; (801497c <_svfiprintf_r+0x1f8>)
 801493e:	a904      	add	r1, sp, #16
 8014940:	4638      	mov	r0, r7
 8014942:	f7fc f9e5 	bl	8010d10 <_printf_float>
 8014946:	1c42      	adds	r2, r0, #1
 8014948:	4606      	mov	r6, r0
 801494a:	d1d6      	bne.n	80148fa <_svfiprintf_r+0x176>
 801494c:	89ab      	ldrh	r3, [r5, #12]
 801494e:	065b      	lsls	r3, r3, #25
 8014950:	f53f af2c 	bmi.w	80147ac <_svfiprintf_r+0x28>
 8014954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014956:	b01d      	add	sp, #116	; 0x74
 8014958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495c:	ab03      	add	r3, sp, #12
 801495e:	9300      	str	r3, [sp, #0]
 8014960:	462a      	mov	r2, r5
 8014962:	4b06      	ldr	r3, [pc, #24]	; (801497c <_svfiprintf_r+0x1f8>)
 8014964:	a904      	add	r1, sp, #16
 8014966:	4638      	mov	r0, r7
 8014968:	f7fc fc76 	bl	8011258 <_printf_i>
 801496c:	e7eb      	b.n	8014946 <_svfiprintf_r+0x1c2>
 801496e:	bf00      	nop
 8014970:	080293fc 	.word	0x080293fc
 8014974:	08029406 	.word	0x08029406
 8014978:	08010d11 	.word	0x08010d11
 801497c:	080146cd 	.word	0x080146cd
 8014980:	08029402 	.word	0x08029402

08014984 <__sfputc_r>:
 8014984:	6893      	ldr	r3, [r2, #8]
 8014986:	3b01      	subs	r3, #1
 8014988:	2b00      	cmp	r3, #0
 801498a:	b410      	push	{r4}
 801498c:	6093      	str	r3, [r2, #8]
 801498e:	da08      	bge.n	80149a2 <__sfputc_r+0x1e>
 8014990:	6994      	ldr	r4, [r2, #24]
 8014992:	42a3      	cmp	r3, r4
 8014994:	db01      	blt.n	801499a <__sfputc_r+0x16>
 8014996:	290a      	cmp	r1, #10
 8014998:	d103      	bne.n	80149a2 <__sfputc_r+0x1e>
 801499a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801499e:	f000 b975 	b.w	8014c8c <__swbuf_r>
 80149a2:	6813      	ldr	r3, [r2, #0]
 80149a4:	1c58      	adds	r0, r3, #1
 80149a6:	6010      	str	r0, [r2, #0]
 80149a8:	7019      	strb	r1, [r3, #0]
 80149aa:	4608      	mov	r0, r1
 80149ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149b0:	4770      	bx	lr

080149b2 <__sfputs_r>:
 80149b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b4:	4606      	mov	r6, r0
 80149b6:	460f      	mov	r7, r1
 80149b8:	4614      	mov	r4, r2
 80149ba:	18d5      	adds	r5, r2, r3
 80149bc:	42ac      	cmp	r4, r5
 80149be:	d101      	bne.n	80149c4 <__sfputs_r+0x12>
 80149c0:	2000      	movs	r0, #0
 80149c2:	e007      	b.n	80149d4 <__sfputs_r+0x22>
 80149c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149c8:	463a      	mov	r2, r7
 80149ca:	4630      	mov	r0, r6
 80149cc:	f7ff ffda 	bl	8014984 <__sfputc_r>
 80149d0:	1c43      	adds	r3, r0, #1
 80149d2:	d1f3      	bne.n	80149bc <__sfputs_r+0xa>
 80149d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149d8 <_vfiprintf_r>:
 80149d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149dc:	460d      	mov	r5, r1
 80149de:	b09d      	sub	sp, #116	; 0x74
 80149e0:	4614      	mov	r4, r2
 80149e2:	4698      	mov	r8, r3
 80149e4:	4606      	mov	r6, r0
 80149e6:	b118      	cbz	r0, 80149f0 <_vfiprintf_r+0x18>
 80149e8:	6983      	ldr	r3, [r0, #24]
 80149ea:	b90b      	cbnz	r3, 80149f0 <_vfiprintf_r+0x18>
 80149ec:	f000 fb3e 	bl	801506c <__sinit>
 80149f0:	4b89      	ldr	r3, [pc, #548]	; (8014c18 <_vfiprintf_r+0x240>)
 80149f2:	429d      	cmp	r5, r3
 80149f4:	d11b      	bne.n	8014a2e <_vfiprintf_r+0x56>
 80149f6:	6875      	ldr	r5, [r6, #4]
 80149f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149fa:	07d9      	lsls	r1, r3, #31
 80149fc:	d405      	bmi.n	8014a0a <_vfiprintf_r+0x32>
 80149fe:	89ab      	ldrh	r3, [r5, #12]
 8014a00:	059a      	lsls	r2, r3, #22
 8014a02:	d402      	bmi.n	8014a0a <_vfiprintf_r+0x32>
 8014a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a06:	f000 fbcf 	bl	80151a8 <__retarget_lock_acquire_recursive>
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	071b      	lsls	r3, r3, #28
 8014a0e:	d501      	bpl.n	8014a14 <_vfiprintf_r+0x3c>
 8014a10:	692b      	ldr	r3, [r5, #16]
 8014a12:	b9eb      	cbnz	r3, 8014a50 <_vfiprintf_r+0x78>
 8014a14:	4629      	mov	r1, r5
 8014a16:	4630      	mov	r0, r6
 8014a18:	f000 f998 	bl	8014d4c <__swsetup_r>
 8014a1c:	b1c0      	cbz	r0, 8014a50 <_vfiprintf_r+0x78>
 8014a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a20:	07dc      	lsls	r4, r3, #31
 8014a22:	d50e      	bpl.n	8014a42 <_vfiprintf_r+0x6a>
 8014a24:	f04f 30ff 	mov.w	r0, #4294967295
 8014a28:	b01d      	add	sp, #116	; 0x74
 8014a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2e:	4b7b      	ldr	r3, [pc, #492]	; (8014c1c <_vfiprintf_r+0x244>)
 8014a30:	429d      	cmp	r5, r3
 8014a32:	d101      	bne.n	8014a38 <_vfiprintf_r+0x60>
 8014a34:	68b5      	ldr	r5, [r6, #8]
 8014a36:	e7df      	b.n	80149f8 <_vfiprintf_r+0x20>
 8014a38:	4b79      	ldr	r3, [pc, #484]	; (8014c20 <_vfiprintf_r+0x248>)
 8014a3a:	429d      	cmp	r5, r3
 8014a3c:	bf08      	it	eq
 8014a3e:	68f5      	ldreq	r5, [r6, #12]
 8014a40:	e7da      	b.n	80149f8 <_vfiprintf_r+0x20>
 8014a42:	89ab      	ldrh	r3, [r5, #12]
 8014a44:	0598      	lsls	r0, r3, #22
 8014a46:	d4ed      	bmi.n	8014a24 <_vfiprintf_r+0x4c>
 8014a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a4a:	f000 fbae 	bl	80151aa <__retarget_lock_release_recursive>
 8014a4e:	e7e9      	b.n	8014a24 <_vfiprintf_r+0x4c>
 8014a50:	2300      	movs	r3, #0
 8014a52:	9309      	str	r3, [sp, #36]	; 0x24
 8014a54:	2320      	movs	r3, #32
 8014a56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a5e:	2330      	movs	r3, #48	; 0x30
 8014a60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014c24 <_vfiprintf_r+0x24c>
 8014a64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a68:	f04f 0901 	mov.w	r9, #1
 8014a6c:	4623      	mov	r3, r4
 8014a6e:	469a      	mov	sl, r3
 8014a70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a74:	b10a      	cbz	r2, 8014a7a <_vfiprintf_r+0xa2>
 8014a76:	2a25      	cmp	r2, #37	; 0x25
 8014a78:	d1f9      	bne.n	8014a6e <_vfiprintf_r+0x96>
 8014a7a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a7e:	d00b      	beq.n	8014a98 <_vfiprintf_r+0xc0>
 8014a80:	465b      	mov	r3, fp
 8014a82:	4622      	mov	r2, r4
 8014a84:	4629      	mov	r1, r5
 8014a86:	4630      	mov	r0, r6
 8014a88:	f7ff ff93 	bl	80149b2 <__sfputs_r>
 8014a8c:	3001      	adds	r0, #1
 8014a8e:	f000 80aa 	beq.w	8014be6 <_vfiprintf_r+0x20e>
 8014a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a94:	445a      	add	r2, fp
 8014a96:	9209      	str	r2, [sp, #36]	; 0x24
 8014a98:	f89a 3000 	ldrb.w	r3, [sl]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	f000 80a2 	beq.w	8014be6 <_vfiprintf_r+0x20e>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8014aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014aac:	f10a 0a01 	add.w	sl, sl, #1
 8014ab0:	9304      	str	r3, [sp, #16]
 8014ab2:	9307      	str	r3, [sp, #28]
 8014ab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8014aba:	4654      	mov	r4, sl
 8014abc:	2205      	movs	r2, #5
 8014abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ac2:	4858      	ldr	r0, [pc, #352]	; (8014c24 <_vfiprintf_r+0x24c>)
 8014ac4:	f7eb fba4 	bl	8000210 <memchr>
 8014ac8:	9a04      	ldr	r2, [sp, #16]
 8014aca:	b9d8      	cbnz	r0, 8014b04 <_vfiprintf_r+0x12c>
 8014acc:	06d1      	lsls	r1, r2, #27
 8014ace:	bf44      	itt	mi
 8014ad0:	2320      	movmi	r3, #32
 8014ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ad6:	0713      	lsls	r3, r2, #28
 8014ad8:	bf44      	itt	mi
 8014ada:	232b      	movmi	r3, #43	; 0x2b
 8014adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ae6:	d015      	beq.n	8014b14 <_vfiprintf_r+0x13c>
 8014ae8:	9a07      	ldr	r2, [sp, #28]
 8014aea:	4654      	mov	r4, sl
 8014aec:	2000      	movs	r0, #0
 8014aee:	f04f 0c0a 	mov.w	ip, #10
 8014af2:	4621      	mov	r1, r4
 8014af4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014af8:	3b30      	subs	r3, #48	; 0x30
 8014afa:	2b09      	cmp	r3, #9
 8014afc:	d94e      	bls.n	8014b9c <_vfiprintf_r+0x1c4>
 8014afe:	b1b0      	cbz	r0, 8014b2e <_vfiprintf_r+0x156>
 8014b00:	9207      	str	r2, [sp, #28]
 8014b02:	e014      	b.n	8014b2e <_vfiprintf_r+0x156>
 8014b04:	eba0 0308 	sub.w	r3, r0, r8
 8014b08:	fa09 f303 	lsl.w	r3, r9, r3
 8014b0c:	4313      	orrs	r3, r2
 8014b0e:	9304      	str	r3, [sp, #16]
 8014b10:	46a2      	mov	sl, r4
 8014b12:	e7d2      	b.n	8014aba <_vfiprintf_r+0xe2>
 8014b14:	9b03      	ldr	r3, [sp, #12]
 8014b16:	1d19      	adds	r1, r3, #4
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	9103      	str	r1, [sp, #12]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	bfbb      	ittet	lt
 8014b20:	425b      	neglt	r3, r3
 8014b22:	f042 0202 	orrlt.w	r2, r2, #2
 8014b26:	9307      	strge	r3, [sp, #28]
 8014b28:	9307      	strlt	r3, [sp, #28]
 8014b2a:	bfb8      	it	lt
 8014b2c:	9204      	strlt	r2, [sp, #16]
 8014b2e:	7823      	ldrb	r3, [r4, #0]
 8014b30:	2b2e      	cmp	r3, #46	; 0x2e
 8014b32:	d10c      	bne.n	8014b4e <_vfiprintf_r+0x176>
 8014b34:	7863      	ldrb	r3, [r4, #1]
 8014b36:	2b2a      	cmp	r3, #42	; 0x2a
 8014b38:	d135      	bne.n	8014ba6 <_vfiprintf_r+0x1ce>
 8014b3a:	9b03      	ldr	r3, [sp, #12]
 8014b3c:	1d1a      	adds	r2, r3, #4
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	9203      	str	r2, [sp, #12]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	bfb8      	it	lt
 8014b46:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b4a:	3402      	adds	r4, #2
 8014b4c:	9305      	str	r3, [sp, #20]
 8014b4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014c34 <_vfiprintf_r+0x25c>
 8014b52:	7821      	ldrb	r1, [r4, #0]
 8014b54:	2203      	movs	r2, #3
 8014b56:	4650      	mov	r0, sl
 8014b58:	f7eb fb5a 	bl	8000210 <memchr>
 8014b5c:	b140      	cbz	r0, 8014b70 <_vfiprintf_r+0x198>
 8014b5e:	2340      	movs	r3, #64	; 0x40
 8014b60:	eba0 000a 	sub.w	r0, r0, sl
 8014b64:	fa03 f000 	lsl.w	r0, r3, r0
 8014b68:	9b04      	ldr	r3, [sp, #16]
 8014b6a:	4303      	orrs	r3, r0
 8014b6c:	3401      	adds	r4, #1
 8014b6e:	9304      	str	r3, [sp, #16]
 8014b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b74:	482c      	ldr	r0, [pc, #176]	; (8014c28 <_vfiprintf_r+0x250>)
 8014b76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b7a:	2206      	movs	r2, #6
 8014b7c:	f7eb fb48 	bl	8000210 <memchr>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d03f      	beq.n	8014c04 <_vfiprintf_r+0x22c>
 8014b84:	4b29      	ldr	r3, [pc, #164]	; (8014c2c <_vfiprintf_r+0x254>)
 8014b86:	bb1b      	cbnz	r3, 8014bd0 <_vfiprintf_r+0x1f8>
 8014b88:	9b03      	ldr	r3, [sp, #12]
 8014b8a:	3307      	adds	r3, #7
 8014b8c:	f023 0307 	bic.w	r3, r3, #7
 8014b90:	3308      	adds	r3, #8
 8014b92:	9303      	str	r3, [sp, #12]
 8014b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b96:	443b      	add	r3, r7
 8014b98:	9309      	str	r3, [sp, #36]	; 0x24
 8014b9a:	e767      	b.n	8014a6c <_vfiprintf_r+0x94>
 8014b9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ba0:	460c      	mov	r4, r1
 8014ba2:	2001      	movs	r0, #1
 8014ba4:	e7a5      	b.n	8014af2 <_vfiprintf_r+0x11a>
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	3401      	adds	r4, #1
 8014baa:	9305      	str	r3, [sp, #20]
 8014bac:	4619      	mov	r1, r3
 8014bae:	f04f 0c0a 	mov.w	ip, #10
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bb8:	3a30      	subs	r2, #48	; 0x30
 8014bba:	2a09      	cmp	r2, #9
 8014bbc:	d903      	bls.n	8014bc6 <_vfiprintf_r+0x1ee>
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d0c5      	beq.n	8014b4e <_vfiprintf_r+0x176>
 8014bc2:	9105      	str	r1, [sp, #20]
 8014bc4:	e7c3      	b.n	8014b4e <_vfiprintf_r+0x176>
 8014bc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bca:	4604      	mov	r4, r0
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e7f0      	b.n	8014bb2 <_vfiprintf_r+0x1da>
 8014bd0:	ab03      	add	r3, sp, #12
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	462a      	mov	r2, r5
 8014bd6:	4b16      	ldr	r3, [pc, #88]	; (8014c30 <_vfiprintf_r+0x258>)
 8014bd8:	a904      	add	r1, sp, #16
 8014bda:	4630      	mov	r0, r6
 8014bdc:	f7fc f898 	bl	8010d10 <_printf_float>
 8014be0:	4607      	mov	r7, r0
 8014be2:	1c78      	adds	r0, r7, #1
 8014be4:	d1d6      	bne.n	8014b94 <_vfiprintf_r+0x1bc>
 8014be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014be8:	07d9      	lsls	r1, r3, #31
 8014bea:	d405      	bmi.n	8014bf8 <_vfiprintf_r+0x220>
 8014bec:	89ab      	ldrh	r3, [r5, #12]
 8014bee:	059a      	lsls	r2, r3, #22
 8014bf0:	d402      	bmi.n	8014bf8 <_vfiprintf_r+0x220>
 8014bf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bf4:	f000 fad9 	bl	80151aa <__retarget_lock_release_recursive>
 8014bf8:	89ab      	ldrh	r3, [r5, #12]
 8014bfa:	065b      	lsls	r3, r3, #25
 8014bfc:	f53f af12 	bmi.w	8014a24 <_vfiprintf_r+0x4c>
 8014c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c02:	e711      	b.n	8014a28 <_vfiprintf_r+0x50>
 8014c04:	ab03      	add	r3, sp, #12
 8014c06:	9300      	str	r3, [sp, #0]
 8014c08:	462a      	mov	r2, r5
 8014c0a:	4b09      	ldr	r3, [pc, #36]	; (8014c30 <_vfiprintf_r+0x258>)
 8014c0c:	a904      	add	r1, sp, #16
 8014c0e:	4630      	mov	r0, r6
 8014c10:	f7fc fb22 	bl	8011258 <_printf_i>
 8014c14:	e7e4      	b.n	8014be0 <_vfiprintf_r+0x208>
 8014c16:	bf00      	nop
 8014c18:	08029430 	.word	0x08029430
 8014c1c:	08029450 	.word	0x08029450
 8014c20:	08029410 	.word	0x08029410
 8014c24:	080293fc 	.word	0x080293fc
 8014c28:	08029406 	.word	0x08029406
 8014c2c:	08010d11 	.word	0x08010d11
 8014c30:	080149b3 	.word	0x080149b3
 8014c34:	08029402 	.word	0x08029402

08014c38 <nan>:
 8014c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014c40 <nan+0x8>
 8014c3c:	4770      	bx	lr
 8014c3e:	bf00      	nop
 8014c40:	00000000 	.word	0x00000000
 8014c44:	7ff80000 	.word	0x7ff80000

08014c48 <_sbrk_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4d06      	ldr	r5, [pc, #24]	; (8014c64 <_sbrk_r+0x1c>)
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	602b      	str	r3, [r5, #0]
 8014c54:	f7f4 fbf6 	bl	8009444 <_sbrk>
 8014c58:	1c43      	adds	r3, r0, #1
 8014c5a:	d102      	bne.n	8014c62 <_sbrk_r+0x1a>
 8014c5c:	682b      	ldr	r3, [r5, #0]
 8014c5e:	b103      	cbz	r3, 8014c62 <_sbrk_r+0x1a>
 8014c60:	6023      	str	r3, [r4, #0]
 8014c62:	bd38      	pop	{r3, r4, r5, pc}
 8014c64:	20000c7c 	.word	0x20000c7c

08014c68 <strncmp>:
 8014c68:	b510      	push	{r4, lr}
 8014c6a:	b16a      	cbz	r2, 8014c88 <strncmp+0x20>
 8014c6c:	3901      	subs	r1, #1
 8014c6e:	1884      	adds	r4, r0, r2
 8014c70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014c74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d103      	bne.n	8014c84 <strncmp+0x1c>
 8014c7c:	42a0      	cmp	r0, r4
 8014c7e:	d001      	beq.n	8014c84 <strncmp+0x1c>
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d1f5      	bne.n	8014c70 <strncmp+0x8>
 8014c84:	1a98      	subs	r0, r3, r2
 8014c86:	bd10      	pop	{r4, pc}
 8014c88:	4610      	mov	r0, r2
 8014c8a:	e7fc      	b.n	8014c86 <strncmp+0x1e>

08014c8c <__swbuf_r>:
 8014c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8e:	460e      	mov	r6, r1
 8014c90:	4614      	mov	r4, r2
 8014c92:	4605      	mov	r5, r0
 8014c94:	b118      	cbz	r0, 8014c9e <__swbuf_r+0x12>
 8014c96:	6983      	ldr	r3, [r0, #24]
 8014c98:	b90b      	cbnz	r3, 8014c9e <__swbuf_r+0x12>
 8014c9a:	f000 f9e7 	bl	801506c <__sinit>
 8014c9e:	4b21      	ldr	r3, [pc, #132]	; (8014d24 <__swbuf_r+0x98>)
 8014ca0:	429c      	cmp	r4, r3
 8014ca2:	d12b      	bne.n	8014cfc <__swbuf_r+0x70>
 8014ca4:	686c      	ldr	r4, [r5, #4]
 8014ca6:	69a3      	ldr	r3, [r4, #24]
 8014ca8:	60a3      	str	r3, [r4, #8]
 8014caa:	89a3      	ldrh	r3, [r4, #12]
 8014cac:	071a      	lsls	r2, r3, #28
 8014cae:	d52f      	bpl.n	8014d10 <__swbuf_r+0x84>
 8014cb0:	6923      	ldr	r3, [r4, #16]
 8014cb2:	b36b      	cbz	r3, 8014d10 <__swbuf_r+0x84>
 8014cb4:	6923      	ldr	r3, [r4, #16]
 8014cb6:	6820      	ldr	r0, [r4, #0]
 8014cb8:	1ac0      	subs	r0, r0, r3
 8014cba:	6963      	ldr	r3, [r4, #20]
 8014cbc:	b2f6      	uxtb	r6, r6
 8014cbe:	4283      	cmp	r3, r0
 8014cc0:	4637      	mov	r7, r6
 8014cc2:	dc04      	bgt.n	8014cce <__swbuf_r+0x42>
 8014cc4:	4621      	mov	r1, r4
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	f000 f93c 	bl	8014f44 <_fflush_r>
 8014ccc:	bb30      	cbnz	r0, 8014d1c <__swbuf_r+0x90>
 8014cce:	68a3      	ldr	r3, [r4, #8]
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	60a3      	str	r3, [r4, #8]
 8014cd4:	6823      	ldr	r3, [r4, #0]
 8014cd6:	1c5a      	adds	r2, r3, #1
 8014cd8:	6022      	str	r2, [r4, #0]
 8014cda:	701e      	strb	r6, [r3, #0]
 8014cdc:	6963      	ldr	r3, [r4, #20]
 8014cde:	3001      	adds	r0, #1
 8014ce0:	4283      	cmp	r3, r0
 8014ce2:	d004      	beq.n	8014cee <__swbuf_r+0x62>
 8014ce4:	89a3      	ldrh	r3, [r4, #12]
 8014ce6:	07db      	lsls	r3, r3, #31
 8014ce8:	d506      	bpl.n	8014cf8 <__swbuf_r+0x6c>
 8014cea:	2e0a      	cmp	r6, #10
 8014cec:	d104      	bne.n	8014cf8 <__swbuf_r+0x6c>
 8014cee:	4621      	mov	r1, r4
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	f000 f927 	bl	8014f44 <_fflush_r>
 8014cf6:	b988      	cbnz	r0, 8014d1c <__swbuf_r+0x90>
 8014cf8:	4638      	mov	r0, r7
 8014cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cfc:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <__swbuf_r+0x9c>)
 8014cfe:	429c      	cmp	r4, r3
 8014d00:	d101      	bne.n	8014d06 <__swbuf_r+0x7a>
 8014d02:	68ac      	ldr	r4, [r5, #8]
 8014d04:	e7cf      	b.n	8014ca6 <__swbuf_r+0x1a>
 8014d06:	4b09      	ldr	r3, [pc, #36]	; (8014d2c <__swbuf_r+0xa0>)
 8014d08:	429c      	cmp	r4, r3
 8014d0a:	bf08      	it	eq
 8014d0c:	68ec      	ldreq	r4, [r5, #12]
 8014d0e:	e7ca      	b.n	8014ca6 <__swbuf_r+0x1a>
 8014d10:	4621      	mov	r1, r4
 8014d12:	4628      	mov	r0, r5
 8014d14:	f000 f81a 	bl	8014d4c <__swsetup_r>
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	d0cb      	beq.n	8014cb4 <__swbuf_r+0x28>
 8014d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8014d20:	e7ea      	b.n	8014cf8 <__swbuf_r+0x6c>
 8014d22:	bf00      	nop
 8014d24:	08029430 	.word	0x08029430
 8014d28:	08029450 	.word	0x08029450
 8014d2c:	08029410 	.word	0x08029410

08014d30 <__ascii_wctomb>:
 8014d30:	b149      	cbz	r1, 8014d46 <__ascii_wctomb+0x16>
 8014d32:	2aff      	cmp	r2, #255	; 0xff
 8014d34:	bf85      	ittet	hi
 8014d36:	238a      	movhi	r3, #138	; 0x8a
 8014d38:	6003      	strhi	r3, [r0, #0]
 8014d3a:	700a      	strbls	r2, [r1, #0]
 8014d3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d40:	bf98      	it	ls
 8014d42:	2001      	movls	r0, #1
 8014d44:	4770      	bx	lr
 8014d46:	4608      	mov	r0, r1
 8014d48:	4770      	bx	lr
	...

08014d4c <__swsetup_r>:
 8014d4c:	4b32      	ldr	r3, [pc, #200]	; (8014e18 <__swsetup_r+0xcc>)
 8014d4e:	b570      	push	{r4, r5, r6, lr}
 8014d50:	681d      	ldr	r5, [r3, #0]
 8014d52:	4606      	mov	r6, r0
 8014d54:	460c      	mov	r4, r1
 8014d56:	b125      	cbz	r5, 8014d62 <__swsetup_r+0x16>
 8014d58:	69ab      	ldr	r3, [r5, #24]
 8014d5a:	b913      	cbnz	r3, 8014d62 <__swsetup_r+0x16>
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f000 f985 	bl	801506c <__sinit>
 8014d62:	4b2e      	ldr	r3, [pc, #184]	; (8014e1c <__swsetup_r+0xd0>)
 8014d64:	429c      	cmp	r4, r3
 8014d66:	d10f      	bne.n	8014d88 <__swsetup_r+0x3c>
 8014d68:	686c      	ldr	r4, [r5, #4]
 8014d6a:	89a3      	ldrh	r3, [r4, #12]
 8014d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d70:	0719      	lsls	r1, r3, #28
 8014d72:	d42c      	bmi.n	8014dce <__swsetup_r+0x82>
 8014d74:	06dd      	lsls	r5, r3, #27
 8014d76:	d411      	bmi.n	8014d9c <__swsetup_r+0x50>
 8014d78:	2309      	movs	r3, #9
 8014d7a:	6033      	str	r3, [r6, #0]
 8014d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d80:	81a3      	strh	r3, [r4, #12]
 8014d82:	f04f 30ff 	mov.w	r0, #4294967295
 8014d86:	e03e      	b.n	8014e06 <__swsetup_r+0xba>
 8014d88:	4b25      	ldr	r3, [pc, #148]	; (8014e20 <__swsetup_r+0xd4>)
 8014d8a:	429c      	cmp	r4, r3
 8014d8c:	d101      	bne.n	8014d92 <__swsetup_r+0x46>
 8014d8e:	68ac      	ldr	r4, [r5, #8]
 8014d90:	e7eb      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d92:	4b24      	ldr	r3, [pc, #144]	; (8014e24 <__swsetup_r+0xd8>)
 8014d94:	429c      	cmp	r4, r3
 8014d96:	bf08      	it	eq
 8014d98:	68ec      	ldreq	r4, [r5, #12]
 8014d9a:	e7e6      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d9c:	0758      	lsls	r0, r3, #29
 8014d9e:	d512      	bpl.n	8014dc6 <__swsetup_r+0x7a>
 8014da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014da2:	b141      	cbz	r1, 8014db6 <__swsetup_r+0x6a>
 8014da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014da8:	4299      	cmp	r1, r3
 8014daa:	d002      	beq.n	8014db2 <__swsetup_r+0x66>
 8014dac:	4630      	mov	r0, r6
 8014dae:	f7ff fbe3 	bl	8014578 <_free_r>
 8014db2:	2300      	movs	r3, #0
 8014db4:	6363      	str	r3, [r4, #52]	; 0x34
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dbc:	81a3      	strh	r3, [r4, #12]
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	6923      	ldr	r3, [r4, #16]
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	f043 0308 	orr.w	r3, r3, #8
 8014dcc:	81a3      	strh	r3, [r4, #12]
 8014dce:	6923      	ldr	r3, [r4, #16]
 8014dd0:	b94b      	cbnz	r3, 8014de6 <__swsetup_r+0x9a>
 8014dd2:	89a3      	ldrh	r3, [r4, #12]
 8014dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ddc:	d003      	beq.n	8014de6 <__swsetup_r+0x9a>
 8014dde:	4621      	mov	r1, r4
 8014de0:	4630      	mov	r0, r6
 8014de2:	f000 fa07 	bl	80151f4 <__smakebuf_r>
 8014de6:	89a0      	ldrh	r0, [r4, #12]
 8014de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014dec:	f010 0301 	ands.w	r3, r0, #1
 8014df0:	d00a      	beq.n	8014e08 <__swsetup_r+0xbc>
 8014df2:	2300      	movs	r3, #0
 8014df4:	60a3      	str	r3, [r4, #8]
 8014df6:	6963      	ldr	r3, [r4, #20]
 8014df8:	425b      	negs	r3, r3
 8014dfa:	61a3      	str	r3, [r4, #24]
 8014dfc:	6923      	ldr	r3, [r4, #16]
 8014dfe:	b943      	cbnz	r3, 8014e12 <__swsetup_r+0xc6>
 8014e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e04:	d1ba      	bne.n	8014d7c <__swsetup_r+0x30>
 8014e06:	bd70      	pop	{r4, r5, r6, pc}
 8014e08:	0781      	lsls	r1, r0, #30
 8014e0a:	bf58      	it	pl
 8014e0c:	6963      	ldrpl	r3, [r4, #20]
 8014e0e:	60a3      	str	r3, [r4, #8]
 8014e10:	e7f4      	b.n	8014dfc <__swsetup_r+0xb0>
 8014e12:	2000      	movs	r0, #0
 8014e14:	e7f7      	b.n	8014e06 <__swsetup_r+0xba>
 8014e16:	bf00      	nop
 8014e18:	20000040 	.word	0x20000040
 8014e1c:	08029430 	.word	0x08029430
 8014e20:	08029450 	.word	0x08029450
 8014e24:	08029410 	.word	0x08029410

08014e28 <abort>:
 8014e28:	b508      	push	{r3, lr}
 8014e2a:	2006      	movs	r0, #6
 8014e2c:	f000 fa96 	bl	801535c <raise>
 8014e30:	2001      	movs	r0, #1
 8014e32:	f7f4 fa8f 	bl	8009354 <_exit>
	...

08014e38 <__sflush_r>:
 8014e38:	898a      	ldrh	r2, [r1, #12]
 8014e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e3e:	4605      	mov	r5, r0
 8014e40:	0710      	lsls	r0, r2, #28
 8014e42:	460c      	mov	r4, r1
 8014e44:	d458      	bmi.n	8014ef8 <__sflush_r+0xc0>
 8014e46:	684b      	ldr	r3, [r1, #4]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	dc05      	bgt.n	8014e58 <__sflush_r+0x20>
 8014e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	dc02      	bgt.n	8014e58 <__sflush_r+0x20>
 8014e52:	2000      	movs	r0, #0
 8014e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e5a:	2e00      	cmp	r6, #0
 8014e5c:	d0f9      	beq.n	8014e52 <__sflush_r+0x1a>
 8014e5e:	2300      	movs	r3, #0
 8014e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e64:	682f      	ldr	r7, [r5, #0]
 8014e66:	602b      	str	r3, [r5, #0]
 8014e68:	d032      	beq.n	8014ed0 <__sflush_r+0x98>
 8014e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e6c:	89a3      	ldrh	r3, [r4, #12]
 8014e6e:	075a      	lsls	r2, r3, #29
 8014e70:	d505      	bpl.n	8014e7e <__sflush_r+0x46>
 8014e72:	6863      	ldr	r3, [r4, #4]
 8014e74:	1ac0      	subs	r0, r0, r3
 8014e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e78:	b10b      	cbz	r3, 8014e7e <__sflush_r+0x46>
 8014e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e7c:	1ac0      	subs	r0, r0, r3
 8014e7e:	2300      	movs	r3, #0
 8014e80:	4602      	mov	r2, r0
 8014e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e84:	6a21      	ldr	r1, [r4, #32]
 8014e86:	4628      	mov	r0, r5
 8014e88:	47b0      	blx	r6
 8014e8a:	1c43      	adds	r3, r0, #1
 8014e8c:	89a3      	ldrh	r3, [r4, #12]
 8014e8e:	d106      	bne.n	8014e9e <__sflush_r+0x66>
 8014e90:	6829      	ldr	r1, [r5, #0]
 8014e92:	291d      	cmp	r1, #29
 8014e94:	d82c      	bhi.n	8014ef0 <__sflush_r+0xb8>
 8014e96:	4a2a      	ldr	r2, [pc, #168]	; (8014f40 <__sflush_r+0x108>)
 8014e98:	40ca      	lsrs	r2, r1
 8014e9a:	07d6      	lsls	r6, r2, #31
 8014e9c:	d528      	bpl.n	8014ef0 <__sflush_r+0xb8>
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	6062      	str	r2, [r4, #4]
 8014ea2:	04d9      	lsls	r1, r3, #19
 8014ea4:	6922      	ldr	r2, [r4, #16]
 8014ea6:	6022      	str	r2, [r4, #0]
 8014ea8:	d504      	bpl.n	8014eb4 <__sflush_r+0x7c>
 8014eaa:	1c42      	adds	r2, r0, #1
 8014eac:	d101      	bne.n	8014eb2 <__sflush_r+0x7a>
 8014eae:	682b      	ldr	r3, [r5, #0]
 8014eb0:	b903      	cbnz	r3, 8014eb4 <__sflush_r+0x7c>
 8014eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8014eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014eb6:	602f      	str	r7, [r5, #0]
 8014eb8:	2900      	cmp	r1, #0
 8014eba:	d0ca      	beq.n	8014e52 <__sflush_r+0x1a>
 8014ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ec0:	4299      	cmp	r1, r3
 8014ec2:	d002      	beq.n	8014eca <__sflush_r+0x92>
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	f7ff fb57 	bl	8014578 <_free_r>
 8014eca:	2000      	movs	r0, #0
 8014ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8014ece:	e7c1      	b.n	8014e54 <__sflush_r+0x1c>
 8014ed0:	6a21      	ldr	r1, [r4, #32]
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	47b0      	blx	r6
 8014ed8:	1c41      	adds	r1, r0, #1
 8014eda:	d1c7      	bne.n	8014e6c <__sflush_r+0x34>
 8014edc:	682b      	ldr	r3, [r5, #0]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d0c4      	beq.n	8014e6c <__sflush_r+0x34>
 8014ee2:	2b1d      	cmp	r3, #29
 8014ee4:	d001      	beq.n	8014eea <__sflush_r+0xb2>
 8014ee6:	2b16      	cmp	r3, #22
 8014ee8:	d101      	bne.n	8014eee <__sflush_r+0xb6>
 8014eea:	602f      	str	r7, [r5, #0]
 8014eec:	e7b1      	b.n	8014e52 <__sflush_r+0x1a>
 8014eee:	89a3      	ldrh	r3, [r4, #12]
 8014ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ef4:	81a3      	strh	r3, [r4, #12]
 8014ef6:	e7ad      	b.n	8014e54 <__sflush_r+0x1c>
 8014ef8:	690f      	ldr	r7, [r1, #16]
 8014efa:	2f00      	cmp	r7, #0
 8014efc:	d0a9      	beq.n	8014e52 <__sflush_r+0x1a>
 8014efe:	0793      	lsls	r3, r2, #30
 8014f00:	680e      	ldr	r6, [r1, #0]
 8014f02:	bf08      	it	eq
 8014f04:	694b      	ldreq	r3, [r1, #20]
 8014f06:	600f      	str	r7, [r1, #0]
 8014f08:	bf18      	it	ne
 8014f0a:	2300      	movne	r3, #0
 8014f0c:	eba6 0807 	sub.w	r8, r6, r7
 8014f10:	608b      	str	r3, [r1, #8]
 8014f12:	f1b8 0f00 	cmp.w	r8, #0
 8014f16:	dd9c      	ble.n	8014e52 <__sflush_r+0x1a>
 8014f18:	6a21      	ldr	r1, [r4, #32]
 8014f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f1c:	4643      	mov	r3, r8
 8014f1e:	463a      	mov	r2, r7
 8014f20:	4628      	mov	r0, r5
 8014f22:	47b0      	blx	r6
 8014f24:	2800      	cmp	r0, #0
 8014f26:	dc06      	bgt.n	8014f36 <__sflush_r+0xfe>
 8014f28:	89a3      	ldrh	r3, [r4, #12]
 8014f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f2e:	81a3      	strh	r3, [r4, #12]
 8014f30:	f04f 30ff 	mov.w	r0, #4294967295
 8014f34:	e78e      	b.n	8014e54 <__sflush_r+0x1c>
 8014f36:	4407      	add	r7, r0
 8014f38:	eba8 0800 	sub.w	r8, r8, r0
 8014f3c:	e7e9      	b.n	8014f12 <__sflush_r+0xda>
 8014f3e:	bf00      	nop
 8014f40:	20400001 	.word	0x20400001

08014f44 <_fflush_r>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	690b      	ldr	r3, [r1, #16]
 8014f48:	4605      	mov	r5, r0
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	b913      	cbnz	r3, 8014f54 <_fflush_r+0x10>
 8014f4e:	2500      	movs	r5, #0
 8014f50:	4628      	mov	r0, r5
 8014f52:	bd38      	pop	{r3, r4, r5, pc}
 8014f54:	b118      	cbz	r0, 8014f5e <_fflush_r+0x1a>
 8014f56:	6983      	ldr	r3, [r0, #24]
 8014f58:	b90b      	cbnz	r3, 8014f5e <_fflush_r+0x1a>
 8014f5a:	f000 f887 	bl	801506c <__sinit>
 8014f5e:	4b14      	ldr	r3, [pc, #80]	; (8014fb0 <_fflush_r+0x6c>)
 8014f60:	429c      	cmp	r4, r3
 8014f62:	d11b      	bne.n	8014f9c <_fflush_r+0x58>
 8014f64:	686c      	ldr	r4, [r5, #4]
 8014f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d0ef      	beq.n	8014f4e <_fflush_r+0xa>
 8014f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f70:	07d0      	lsls	r0, r2, #31
 8014f72:	d404      	bmi.n	8014f7e <_fflush_r+0x3a>
 8014f74:	0599      	lsls	r1, r3, #22
 8014f76:	d402      	bmi.n	8014f7e <_fflush_r+0x3a>
 8014f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f7a:	f000 f915 	bl	80151a8 <__retarget_lock_acquire_recursive>
 8014f7e:	4628      	mov	r0, r5
 8014f80:	4621      	mov	r1, r4
 8014f82:	f7ff ff59 	bl	8014e38 <__sflush_r>
 8014f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f88:	07da      	lsls	r2, r3, #31
 8014f8a:	4605      	mov	r5, r0
 8014f8c:	d4e0      	bmi.n	8014f50 <_fflush_r+0xc>
 8014f8e:	89a3      	ldrh	r3, [r4, #12]
 8014f90:	059b      	lsls	r3, r3, #22
 8014f92:	d4dd      	bmi.n	8014f50 <_fflush_r+0xc>
 8014f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f96:	f000 f908 	bl	80151aa <__retarget_lock_release_recursive>
 8014f9a:	e7d9      	b.n	8014f50 <_fflush_r+0xc>
 8014f9c:	4b05      	ldr	r3, [pc, #20]	; (8014fb4 <_fflush_r+0x70>)
 8014f9e:	429c      	cmp	r4, r3
 8014fa0:	d101      	bne.n	8014fa6 <_fflush_r+0x62>
 8014fa2:	68ac      	ldr	r4, [r5, #8]
 8014fa4:	e7df      	b.n	8014f66 <_fflush_r+0x22>
 8014fa6:	4b04      	ldr	r3, [pc, #16]	; (8014fb8 <_fflush_r+0x74>)
 8014fa8:	429c      	cmp	r4, r3
 8014faa:	bf08      	it	eq
 8014fac:	68ec      	ldreq	r4, [r5, #12]
 8014fae:	e7da      	b.n	8014f66 <_fflush_r+0x22>
 8014fb0:	08029430 	.word	0x08029430
 8014fb4:	08029450 	.word	0x08029450
 8014fb8:	08029410 	.word	0x08029410

08014fbc <std>:
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	b510      	push	{r4, lr}
 8014fc0:	4604      	mov	r4, r0
 8014fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8014fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fca:	6083      	str	r3, [r0, #8]
 8014fcc:	8181      	strh	r1, [r0, #12]
 8014fce:	6643      	str	r3, [r0, #100]	; 0x64
 8014fd0:	81c2      	strh	r2, [r0, #14]
 8014fd2:	6183      	str	r3, [r0, #24]
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	2208      	movs	r2, #8
 8014fd8:	305c      	adds	r0, #92	; 0x5c
 8014fda:	f7fb fdf1 	bl	8010bc0 <memset>
 8014fde:	4b05      	ldr	r3, [pc, #20]	; (8014ff4 <std+0x38>)
 8014fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8014fe2:	4b05      	ldr	r3, [pc, #20]	; (8014ff8 <std+0x3c>)
 8014fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fe6:	4b05      	ldr	r3, [pc, #20]	; (8014ffc <std+0x40>)
 8014fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fea:	4b05      	ldr	r3, [pc, #20]	; (8015000 <std+0x44>)
 8014fec:	6224      	str	r4, [r4, #32]
 8014fee:	6323      	str	r3, [r4, #48]	; 0x30
 8014ff0:	bd10      	pop	{r4, pc}
 8014ff2:	bf00      	nop
 8014ff4:	08015395 	.word	0x08015395
 8014ff8:	080153b7 	.word	0x080153b7
 8014ffc:	080153ef 	.word	0x080153ef
 8015000:	08015413 	.word	0x08015413

08015004 <_cleanup_r>:
 8015004:	4901      	ldr	r1, [pc, #4]	; (801500c <_cleanup_r+0x8>)
 8015006:	f000 b8af 	b.w	8015168 <_fwalk_reent>
 801500a:	bf00      	nop
 801500c:	08014f45 	.word	0x08014f45

08015010 <__sfmoreglue>:
 8015010:	b570      	push	{r4, r5, r6, lr}
 8015012:	1e4a      	subs	r2, r1, #1
 8015014:	2568      	movs	r5, #104	; 0x68
 8015016:	4355      	muls	r5, r2
 8015018:	460e      	mov	r6, r1
 801501a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801501e:	f7ff fafb 	bl	8014618 <_malloc_r>
 8015022:	4604      	mov	r4, r0
 8015024:	b140      	cbz	r0, 8015038 <__sfmoreglue+0x28>
 8015026:	2100      	movs	r1, #0
 8015028:	e9c0 1600 	strd	r1, r6, [r0]
 801502c:	300c      	adds	r0, #12
 801502e:	60a0      	str	r0, [r4, #8]
 8015030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015034:	f7fb fdc4 	bl	8010bc0 <memset>
 8015038:	4620      	mov	r0, r4
 801503a:	bd70      	pop	{r4, r5, r6, pc}

0801503c <__sfp_lock_acquire>:
 801503c:	4801      	ldr	r0, [pc, #4]	; (8015044 <__sfp_lock_acquire+0x8>)
 801503e:	f000 b8b3 	b.w	80151a8 <__retarget_lock_acquire_recursive>
 8015042:	bf00      	nop
 8015044:	20000c78 	.word	0x20000c78

08015048 <__sfp_lock_release>:
 8015048:	4801      	ldr	r0, [pc, #4]	; (8015050 <__sfp_lock_release+0x8>)
 801504a:	f000 b8ae 	b.w	80151aa <__retarget_lock_release_recursive>
 801504e:	bf00      	nop
 8015050:	20000c78 	.word	0x20000c78

08015054 <__sinit_lock_acquire>:
 8015054:	4801      	ldr	r0, [pc, #4]	; (801505c <__sinit_lock_acquire+0x8>)
 8015056:	f000 b8a7 	b.w	80151a8 <__retarget_lock_acquire_recursive>
 801505a:	bf00      	nop
 801505c:	20000c73 	.word	0x20000c73

08015060 <__sinit_lock_release>:
 8015060:	4801      	ldr	r0, [pc, #4]	; (8015068 <__sinit_lock_release+0x8>)
 8015062:	f000 b8a2 	b.w	80151aa <__retarget_lock_release_recursive>
 8015066:	bf00      	nop
 8015068:	20000c73 	.word	0x20000c73

0801506c <__sinit>:
 801506c:	b510      	push	{r4, lr}
 801506e:	4604      	mov	r4, r0
 8015070:	f7ff fff0 	bl	8015054 <__sinit_lock_acquire>
 8015074:	69a3      	ldr	r3, [r4, #24]
 8015076:	b11b      	cbz	r3, 8015080 <__sinit+0x14>
 8015078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801507c:	f7ff bff0 	b.w	8015060 <__sinit_lock_release>
 8015080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015084:	6523      	str	r3, [r4, #80]	; 0x50
 8015086:	4b13      	ldr	r3, [pc, #76]	; (80150d4 <__sinit+0x68>)
 8015088:	4a13      	ldr	r2, [pc, #76]	; (80150d8 <__sinit+0x6c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	62a2      	str	r2, [r4, #40]	; 0x28
 801508e:	42a3      	cmp	r3, r4
 8015090:	bf04      	itt	eq
 8015092:	2301      	moveq	r3, #1
 8015094:	61a3      	streq	r3, [r4, #24]
 8015096:	4620      	mov	r0, r4
 8015098:	f000 f820 	bl	80150dc <__sfp>
 801509c:	6060      	str	r0, [r4, #4]
 801509e:	4620      	mov	r0, r4
 80150a0:	f000 f81c 	bl	80150dc <__sfp>
 80150a4:	60a0      	str	r0, [r4, #8]
 80150a6:	4620      	mov	r0, r4
 80150a8:	f000 f818 	bl	80150dc <__sfp>
 80150ac:	2200      	movs	r2, #0
 80150ae:	60e0      	str	r0, [r4, #12]
 80150b0:	2104      	movs	r1, #4
 80150b2:	6860      	ldr	r0, [r4, #4]
 80150b4:	f7ff ff82 	bl	8014fbc <std>
 80150b8:	68a0      	ldr	r0, [r4, #8]
 80150ba:	2201      	movs	r2, #1
 80150bc:	2109      	movs	r1, #9
 80150be:	f7ff ff7d 	bl	8014fbc <std>
 80150c2:	68e0      	ldr	r0, [r4, #12]
 80150c4:	2202      	movs	r2, #2
 80150c6:	2112      	movs	r1, #18
 80150c8:	f7ff ff78 	bl	8014fbc <std>
 80150cc:	2301      	movs	r3, #1
 80150ce:	61a3      	str	r3, [r4, #24]
 80150d0:	e7d2      	b.n	8015078 <__sinit+0xc>
 80150d2:	bf00      	nop
 80150d4:	08028f60 	.word	0x08028f60
 80150d8:	08015005 	.word	0x08015005

080150dc <__sfp>:
 80150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150de:	4607      	mov	r7, r0
 80150e0:	f7ff ffac 	bl	801503c <__sfp_lock_acquire>
 80150e4:	4b1e      	ldr	r3, [pc, #120]	; (8015160 <__sfp+0x84>)
 80150e6:	681e      	ldr	r6, [r3, #0]
 80150e8:	69b3      	ldr	r3, [r6, #24]
 80150ea:	b913      	cbnz	r3, 80150f2 <__sfp+0x16>
 80150ec:	4630      	mov	r0, r6
 80150ee:	f7ff ffbd 	bl	801506c <__sinit>
 80150f2:	3648      	adds	r6, #72	; 0x48
 80150f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150f8:	3b01      	subs	r3, #1
 80150fa:	d503      	bpl.n	8015104 <__sfp+0x28>
 80150fc:	6833      	ldr	r3, [r6, #0]
 80150fe:	b30b      	cbz	r3, 8015144 <__sfp+0x68>
 8015100:	6836      	ldr	r6, [r6, #0]
 8015102:	e7f7      	b.n	80150f4 <__sfp+0x18>
 8015104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015108:	b9d5      	cbnz	r5, 8015140 <__sfp+0x64>
 801510a:	4b16      	ldr	r3, [pc, #88]	; (8015164 <__sfp+0x88>)
 801510c:	60e3      	str	r3, [r4, #12]
 801510e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015112:	6665      	str	r5, [r4, #100]	; 0x64
 8015114:	f000 f847 	bl	80151a6 <__retarget_lock_init_recursive>
 8015118:	f7ff ff96 	bl	8015048 <__sfp_lock_release>
 801511c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015124:	6025      	str	r5, [r4, #0]
 8015126:	61a5      	str	r5, [r4, #24]
 8015128:	2208      	movs	r2, #8
 801512a:	4629      	mov	r1, r5
 801512c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015130:	f7fb fd46 	bl	8010bc0 <memset>
 8015134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801513c:	4620      	mov	r0, r4
 801513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015140:	3468      	adds	r4, #104	; 0x68
 8015142:	e7d9      	b.n	80150f8 <__sfp+0x1c>
 8015144:	2104      	movs	r1, #4
 8015146:	4638      	mov	r0, r7
 8015148:	f7ff ff62 	bl	8015010 <__sfmoreglue>
 801514c:	4604      	mov	r4, r0
 801514e:	6030      	str	r0, [r6, #0]
 8015150:	2800      	cmp	r0, #0
 8015152:	d1d5      	bne.n	8015100 <__sfp+0x24>
 8015154:	f7ff ff78 	bl	8015048 <__sfp_lock_release>
 8015158:	230c      	movs	r3, #12
 801515a:	603b      	str	r3, [r7, #0]
 801515c:	e7ee      	b.n	801513c <__sfp+0x60>
 801515e:	bf00      	nop
 8015160:	08028f60 	.word	0x08028f60
 8015164:	ffff0001 	.word	0xffff0001

08015168 <_fwalk_reent>:
 8015168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801516c:	4606      	mov	r6, r0
 801516e:	4688      	mov	r8, r1
 8015170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015174:	2700      	movs	r7, #0
 8015176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801517a:	f1b9 0901 	subs.w	r9, r9, #1
 801517e:	d505      	bpl.n	801518c <_fwalk_reent+0x24>
 8015180:	6824      	ldr	r4, [r4, #0]
 8015182:	2c00      	cmp	r4, #0
 8015184:	d1f7      	bne.n	8015176 <_fwalk_reent+0xe>
 8015186:	4638      	mov	r0, r7
 8015188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801518c:	89ab      	ldrh	r3, [r5, #12]
 801518e:	2b01      	cmp	r3, #1
 8015190:	d907      	bls.n	80151a2 <_fwalk_reent+0x3a>
 8015192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015196:	3301      	adds	r3, #1
 8015198:	d003      	beq.n	80151a2 <_fwalk_reent+0x3a>
 801519a:	4629      	mov	r1, r5
 801519c:	4630      	mov	r0, r6
 801519e:	47c0      	blx	r8
 80151a0:	4307      	orrs	r7, r0
 80151a2:	3568      	adds	r5, #104	; 0x68
 80151a4:	e7e9      	b.n	801517a <_fwalk_reent+0x12>

080151a6 <__retarget_lock_init_recursive>:
 80151a6:	4770      	bx	lr

080151a8 <__retarget_lock_acquire_recursive>:
 80151a8:	4770      	bx	lr

080151aa <__retarget_lock_release_recursive>:
 80151aa:	4770      	bx	lr

080151ac <__swhatbuf_r>:
 80151ac:	b570      	push	{r4, r5, r6, lr}
 80151ae:	460e      	mov	r6, r1
 80151b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151b4:	2900      	cmp	r1, #0
 80151b6:	b096      	sub	sp, #88	; 0x58
 80151b8:	4614      	mov	r4, r2
 80151ba:	461d      	mov	r5, r3
 80151bc:	da07      	bge.n	80151ce <__swhatbuf_r+0x22>
 80151be:	2300      	movs	r3, #0
 80151c0:	602b      	str	r3, [r5, #0]
 80151c2:	89b3      	ldrh	r3, [r6, #12]
 80151c4:	061a      	lsls	r2, r3, #24
 80151c6:	d410      	bmi.n	80151ea <__swhatbuf_r+0x3e>
 80151c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151cc:	e00e      	b.n	80151ec <__swhatbuf_r+0x40>
 80151ce:	466a      	mov	r2, sp
 80151d0:	f000 f946 	bl	8015460 <_fstat_r>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	dbf2      	blt.n	80151be <__swhatbuf_r+0x12>
 80151d8:	9a01      	ldr	r2, [sp, #4]
 80151da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80151de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80151e2:	425a      	negs	r2, r3
 80151e4:	415a      	adcs	r2, r3
 80151e6:	602a      	str	r2, [r5, #0]
 80151e8:	e7ee      	b.n	80151c8 <__swhatbuf_r+0x1c>
 80151ea:	2340      	movs	r3, #64	; 0x40
 80151ec:	2000      	movs	r0, #0
 80151ee:	6023      	str	r3, [r4, #0]
 80151f0:	b016      	add	sp, #88	; 0x58
 80151f2:	bd70      	pop	{r4, r5, r6, pc}

080151f4 <__smakebuf_r>:
 80151f4:	898b      	ldrh	r3, [r1, #12]
 80151f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151f8:	079d      	lsls	r5, r3, #30
 80151fa:	4606      	mov	r6, r0
 80151fc:	460c      	mov	r4, r1
 80151fe:	d507      	bpl.n	8015210 <__smakebuf_r+0x1c>
 8015200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015204:	6023      	str	r3, [r4, #0]
 8015206:	6123      	str	r3, [r4, #16]
 8015208:	2301      	movs	r3, #1
 801520a:	6163      	str	r3, [r4, #20]
 801520c:	b002      	add	sp, #8
 801520e:	bd70      	pop	{r4, r5, r6, pc}
 8015210:	ab01      	add	r3, sp, #4
 8015212:	466a      	mov	r2, sp
 8015214:	f7ff ffca 	bl	80151ac <__swhatbuf_r>
 8015218:	9900      	ldr	r1, [sp, #0]
 801521a:	4605      	mov	r5, r0
 801521c:	4630      	mov	r0, r6
 801521e:	f7ff f9fb 	bl	8014618 <_malloc_r>
 8015222:	b948      	cbnz	r0, 8015238 <__smakebuf_r+0x44>
 8015224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015228:	059a      	lsls	r2, r3, #22
 801522a:	d4ef      	bmi.n	801520c <__smakebuf_r+0x18>
 801522c:	f023 0303 	bic.w	r3, r3, #3
 8015230:	f043 0302 	orr.w	r3, r3, #2
 8015234:	81a3      	strh	r3, [r4, #12]
 8015236:	e7e3      	b.n	8015200 <__smakebuf_r+0xc>
 8015238:	4b0d      	ldr	r3, [pc, #52]	; (8015270 <__smakebuf_r+0x7c>)
 801523a:	62b3      	str	r3, [r6, #40]	; 0x28
 801523c:	89a3      	ldrh	r3, [r4, #12]
 801523e:	6020      	str	r0, [r4, #0]
 8015240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015244:	81a3      	strh	r3, [r4, #12]
 8015246:	9b00      	ldr	r3, [sp, #0]
 8015248:	6163      	str	r3, [r4, #20]
 801524a:	9b01      	ldr	r3, [sp, #4]
 801524c:	6120      	str	r0, [r4, #16]
 801524e:	b15b      	cbz	r3, 8015268 <__smakebuf_r+0x74>
 8015250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015254:	4630      	mov	r0, r6
 8015256:	f000 f915 	bl	8015484 <_isatty_r>
 801525a:	b128      	cbz	r0, 8015268 <__smakebuf_r+0x74>
 801525c:	89a3      	ldrh	r3, [r4, #12]
 801525e:	f023 0303 	bic.w	r3, r3, #3
 8015262:	f043 0301 	orr.w	r3, r3, #1
 8015266:	81a3      	strh	r3, [r4, #12]
 8015268:	89a0      	ldrh	r0, [r4, #12]
 801526a:	4305      	orrs	r5, r0
 801526c:	81a5      	strh	r5, [r4, #12]
 801526e:	e7cd      	b.n	801520c <__smakebuf_r+0x18>
 8015270:	08015005 	.word	0x08015005

08015274 <memmove>:
 8015274:	4288      	cmp	r0, r1
 8015276:	b510      	push	{r4, lr}
 8015278:	eb01 0402 	add.w	r4, r1, r2
 801527c:	d902      	bls.n	8015284 <memmove+0x10>
 801527e:	4284      	cmp	r4, r0
 8015280:	4623      	mov	r3, r4
 8015282:	d807      	bhi.n	8015294 <memmove+0x20>
 8015284:	1e43      	subs	r3, r0, #1
 8015286:	42a1      	cmp	r1, r4
 8015288:	d008      	beq.n	801529c <memmove+0x28>
 801528a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801528e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015292:	e7f8      	b.n	8015286 <memmove+0x12>
 8015294:	4402      	add	r2, r0
 8015296:	4601      	mov	r1, r0
 8015298:	428a      	cmp	r2, r1
 801529a:	d100      	bne.n	801529e <memmove+0x2a>
 801529c:	bd10      	pop	{r4, pc}
 801529e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80152a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80152a6:	e7f7      	b.n	8015298 <memmove+0x24>

080152a8 <__malloc_lock>:
 80152a8:	4801      	ldr	r0, [pc, #4]	; (80152b0 <__malloc_lock+0x8>)
 80152aa:	f7ff bf7d 	b.w	80151a8 <__retarget_lock_acquire_recursive>
 80152ae:	bf00      	nop
 80152b0:	20000c74 	.word	0x20000c74

080152b4 <__malloc_unlock>:
 80152b4:	4801      	ldr	r0, [pc, #4]	; (80152bc <__malloc_unlock+0x8>)
 80152b6:	f7ff bf78 	b.w	80151aa <__retarget_lock_release_recursive>
 80152ba:	bf00      	nop
 80152bc:	20000c74 	.word	0x20000c74

080152c0 <_realloc_r>:
 80152c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152c2:	4607      	mov	r7, r0
 80152c4:	4614      	mov	r4, r2
 80152c6:	460e      	mov	r6, r1
 80152c8:	b921      	cbnz	r1, 80152d4 <_realloc_r+0x14>
 80152ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80152ce:	4611      	mov	r1, r2
 80152d0:	f7ff b9a2 	b.w	8014618 <_malloc_r>
 80152d4:	b922      	cbnz	r2, 80152e0 <_realloc_r+0x20>
 80152d6:	f7ff f94f 	bl	8014578 <_free_r>
 80152da:	4625      	mov	r5, r4
 80152dc:	4628      	mov	r0, r5
 80152de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e0:	f000 f8f2 	bl	80154c8 <_malloc_usable_size_r>
 80152e4:	42a0      	cmp	r0, r4
 80152e6:	d20f      	bcs.n	8015308 <_realloc_r+0x48>
 80152e8:	4621      	mov	r1, r4
 80152ea:	4638      	mov	r0, r7
 80152ec:	f7ff f994 	bl	8014618 <_malloc_r>
 80152f0:	4605      	mov	r5, r0
 80152f2:	2800      	cmp	r0, #0
 80152f4:	d0f2      	beq.n	80152dc <_realloc_r+0x1c>
 80152f6:	4631      	mov	r1, r6
 80152f8:	4622      	mov	r2, r4
 80152fa:	f7fe fc65 	bl	8013bc8 <memcpy>
 80152fe:	4631      	mov	r1, r6
 8015300:	4638      	mov	r0, r7
 8015302:	f7ff f939 	bl	8014578 <_free_r>
 8015306:	e7e9      	b.n	80152dc <_realloc_r+0x1c>
 8015308:	4635      	mov	r5, r6
 801530a:	e7e7      	b.n	80152dc <_realloc_r+0x1c>

0801530c <_raise_r>:
 801530c:	291f      	cmp	r1, #31
 801530e:	b538      	push	{r3, r4, r5, lr}
 8015310:	4604      	mov	r4, r0
 8015312:	460d      	mov	r5, r1
 8015314:	d904      	bls.n	8015320 <_raise_r+0x14>
 8015316:	2316      	movs	r3, #22
 8015318:	6003      	str	r3, [r0, #0]
 801531a:	f04f 30ff 	mov.w	r0, #4294967295
 801531e:	bd38      	pop	{r3, r4, r5, pc}
 8015320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015322:	b112      	cbz	r2, 801532a <_raise_r+0x1e>
 8015324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015328:	b94b      	cbnz	r3, 801533e <_raise_r+0x32>
 801532a:	4620      	mov	r0, r4
 801532c:	f000 f830 	bl	8015390 <_getpid_r>
 8015330:	462a      	mov	r2, r5
 8015332:	4601      	mov	r1, r0
 8015334:	4620      	mov	r0, r4
 8015336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801533a:	f000 b817 	b.w	801536c <_kill_r>
 801533e:	2b01      	cmp	r3, #1
 8015340:	d00a      	beq.n	8015358 <_raise_r+0x4c>
 8015342:	1c59      	adds	r1, r3, #1
 8015344:	d103      	bne.n	801534e <_raise_r+0x42>
 8015346:	2316      	movs	r3, #22
 8015348:	6003      	str	r3, [r0, #0]
 801534a:	2001      	movs	r0, #1
 801534c:	e7e7      	b.n	801531e <_raise_r+0x12>
 801534e:	2400      	movs	r4, #0
 8015350:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015354:	4628      	mov	r0, r5
 8015356:	4798      	blx	r3
 8015358:	2000      	movs	r0, #0
 801535a:	e7e0      	b.n	801531e <_raise_r+0x12>

0801535c <raise>:
 801535c:	4b02      	ldr	r3, [pc, #8]	; (8015368 <raise+0xc>)
 801535e:	4601      	mov	r1, r0
 8015360:	6818      	ldr	r0, [r3, #0]
 8015362:	f7ff bfd3 	b.w	801530c <_raise_r>
 8015366:	bf00      	nop
 8015368:	20000040 	.word	0x20000040

0801536c <_kill_r>:
 801536c:	b538      	push	{r3, r4, r5, lr}
 801536e:	4d07      	ldr	r5, [pc, #28]	; (801538c <_kill_r+0x20>)
 8015370:	2300      	movs	r3, #0
 8015372:	4604      	mov	r4, r0
 8015374:	4608      	mov	r0, r1
 8015376:	4611      	mov	r1, r2
 8015378:	602b      	str	r3, [r5, #0]
 801537a:	f7f3 ffdb 	bl	8009334 <_kill>
 801537e:	1c43      	adds	r3, r0, #1
 8015380:	d102      	bne.n	8015388 <_kill_r+0x1c>
 8015382:	682b      	ldr	r3, [r5, #0]
 8015384:	b103      	cbz	r3, 8015388 <_kill_r+0x1c>
 8015386:	6023      	str	r3, [r4, #0]
 8015388:	bd38      	pop	{r3, r4, r5, pc}
 801538a:	bf00      	nop
 801538c:	20000c7c 	.word	0x20000c7c

08015390 <_getpid_r>:
 8015390:	f7f3 bfc8 	b.w	8009324 <_getpid>

08015394 <__sread>:
 8015394:	b510      	push	{r4, lr}
 8015396:	460c      	mov	r4, r1
 8015398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801539c:	f000 f89c 	bl	80154d8 <_read_r>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	bfab      	itete	ge
 80153a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80153a6:	89a3      	ldrhlt	r3, [r4, #12]
 80153a8:	181b      	addge	r3, r3, r0
 80153aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80153ae:	bfac      	ite	ge
 80153b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80153b2:	81a3      	strhlt	r3, [r4, #12]
 80153b4:	bd10      	pop	{r4, pc}

080153b6 <__swrite>:
 80153b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ba:	461f      	mov	r7, r3
 80153bc:	898b      	ldrh	r3, [r1, #12]
 80153be:	05db      	lsls	r3, r3, #23
 80153c0:	4605      	mov	r5, r0
 80153c2:	460c      	mov	r4, r1
 80153c4:	4616      	mov	r6, r2
 80153c6:	d505      	bpl.n	80153d4 <__swrite+0x1e>
 80153c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153cc:	2302      	movs	r3, #2
 80153ce:	2200      	movs	r2, #0
 80153d0:	f000 f868 	bl	80154a4 <_lseek_r>
 80153d4:	89a3      	ldrh	r3, [r4, #12]
 80153d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153de:	81a3      	strh	r3, [r4, #12]
 80153e0:	4632      	mov	r2, r6
 80153e2:	463b      	mov	r3, r7
 80153e4:	4628      	mov	r0, r5
 80153e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153ea:	f000 b817 	b.w	801541c <_write_r>

080153ee <__sseek>:
 80153ee:	b510      	push	{r4, lr}
 80153f0:	460c      	mov	r4, r1
 80153f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153f6:	f000 f855 	bl	80154a4 <_lseek_r>
 80153fa:	1c43      	adds	r3, r0, #1
 80153fc:	89a3      	ldrh	r3, [r4, #12]
 80153fe:	bf15      	itete	ne
 8015400:	6560      	strne	r0, [r4, #84]	; 0x54
 8015402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801540a:	81a3      	strheq	r3, [r4, #12]
 801540c:	bf18      	it	ne
 801540e:	81a3      	strhne	r3, [r4, #12]
 8015410:	bd10      	pop	{r4, pc}

08015412 <__sclose>:
 8015412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015416:	f000 b813 	b.w	8015440 <_close_r>
	...

0801541c <_write_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4d07      	ldr	r5, [pc, #28]	; (801543c <_write_r+0x20>)
 8015420:	4604      	mov	r4, r0
 8015422:	4608      	mov	r0, r1
 8015424:	4611      	mov	r1, r2
 8015426:	2200      	movs	r2, #0
 8015428:	602a      	str	r2, [r5, #0]
 801542a:	461a      	mov	r2, r3
 801542c:	f7f3 ffb9 	bl	80093a2 <_write>
 8015430:	1c43      	adds	r3, r0, #1
 8015432:	d102      	bne.n	801543a <_write_r+0x1e>
 8015434:	682b      	ldr	r3, [r5, #0]
 8015436:	b103      	cbz	r3, 801543a <_write_r+0x1e>
 8015438:	6023      	str	r3, [r4, #0]
 801543a:	bd38      	pop	{r3, r4, r5, pc}
 801543c:	20000c7c 	.word	0x20000c7c

08015440 <_close_r>:
 8015440:	b538      	push	{r3, r4, r5, lr}
 8015442:	4d06      	ldr	r5, [pc, #24]	; (801545c <_close_r+0x1c>)
 8015444:	2300      	movs	r3, #0
 8015446:	4604      	mov	r4, r0
 8015448:	4608      	mov	r0, r1
 801544a:	602b      	str	r3, [r5, #0]
 801544c:	f7f3 ffc5 	bl	80093da <_close>
 8015450:	1c43      	adds	r3, r0, #1
 8015452:	d102      	bne.n	801545a <_close_r+0x1a>
 8015454:	682b      	ldr	r3, [r5, #0]
 8015456:	b103      	cbz	r3, 801545a <_close_r+0x1a>
 8015458:	6023      	str	r3, [r4, #0]
 801545a:	bd38      	pop	{r3, r4, r5, pc}
 801545c:	20000c7c 	.word	0x20000c7c

08015460 <_fstat_r>:
 8015460:	b538      	push	{r3, r4, r5, lr}
 8015462:	4d07      	ldr	r5, [pc, #28]	; (8015480 <_fstat_r+0x20>)
 8015464:	2300      	movs	r3, #0
 8015466:	4604      	mov	r4, r0
 8015468:	4608      	mov	r0, r1
 801546a:	4611      	mov	r1, r2
 801546c:	602b      	str	r3, [r5, #0]
 801546e:	f7f3 ffc0 	bl	80093f2 <_fstat>
 8015472:	1c43      	adds	r3, r0, #1
 8015474:	d102      	bne.n	801547c <_fstat_r+0x1c>
 8015476:	682b      	ldr	r3, [r5, #0]
 8015478:	b103      	cbz	r3, 801547c <_fstat_r+0x1c>
 801547a:	6023      	str	r3, [r4, #0]
 801547c:	bd38      	pop	{r3, r4, r5, pc}
 801547e:	bf00      	nop
 8015480:	20000c7c 	.word	0x20000c7c

08015484 <_isatty_r>:
 8015484:	b538      	push	{r3, r4, r5, lr}
 8015486:	4d06      	ldr	r5, [pc, #24]	; (80154a0 <_isatty_r+0x1c>)
 8015488:	2300      	movs	r3, #0
 801548a:	4604      	mov	r4, r0
 801548c:	4608      	mov	r0, r1
 801548e:	602b      	str	r3, [r5, #0]
 8015490:	f7f3 ffbf 	bl	8009412 <_isatty>
 8015494:	1c43      	adds	r3, r0, #1
 8015496:	d102      	bne.n	801549e <_isatty_r+0x1a>
 8015498:	682b      	ldr	r3, [r5, #0]
 801549a:	b103      	cbz	r3, 801549e <_isatty_r+0x1a>
 801549c:	6023      	str	r3, [r4, #0]
 801549e:	bd38      	pop	{r3, r4, r5, pc}
 80154a0:	20000c7c 	.word	0x20000c7c

080154a4 <_lseek_r>:
 80154a4:	b538      	push	{r3, r4, r5, lr}
 80154a6:	4d07      	ldr	r5, [pc, #28]	; (80154c4 <_lseek_r+0x20>)
 80154a8:	4604      	mov	r4, r0
 80154aa:	4608      	mov	r0, r1
 80154ac:	4611      	mov	r1, r2
 80154ae:	2200      	movs	r2, #0
 80154b0:	602a      	str	r2, [r5, #0]
 80154b2:	461a      	mov	r2, r3
 80154b4:	f7f3 ffb8 	bl	8009428 <_lseek>
 80154b8:	1c43      	adds	r3, r0, #1
 80154ba:	d102      	bne.n	80154c2 <_lseek_r+0x1e>
 80154bc:	682b      	ldr	r3, [r5, #0]
 80154be:	b103      	cbz	r3, 80154c2 <_lseek_r+0x1e>
 80154c0:	6023      	str	r3, [r4, #0]
 80154c2:	bd38      	pop	{r3, r4, r5, pc}
 80154c4:	20000c7c 	.word	0x20000c7c

080154c8 <_malloc_usable_size_r>:
 80154c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154cc:	1f18      	subs	r0, r3, #4
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	bfbc      	itt	lt
 80154d2:	580b      	ldrlt	r3, [r1, r0]
 80154d4:	18c0      	addlt	r0, r0, r3
 80154d6:	4770      	bx	lr

080154d8 <_read_r>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	4d07      	ldr	r5, [pc, #28]	; (80154f8 <_read_r+0x20>)
 80154dc:	4604      	mov	r4, r0
 80154de:	4608      	mov	r0, r1
 80154e0:	4611      	mov	r1, r2
 80154e2:	2200      	movs	r2, #0
 80154e4:	602a      	str	r2, [r5, #0]
 80154e6:	461a      	mov	r2, r3
 80154e8:	f7f3 ff3e 	bl	8009368 <_read>
 80154ec:	1c43      	adds	r3, r0, #1
 80154ee:	d102      	bne.n	80154f6 <_read_r+0x1e>
 80154f0:	682b      	ldr	r3, [r5, #0]
 80154f2:	b103      	cbz	r3, 80154f6 <_read_r+0x1e>
 80154f4:	6023      	str	r3, [r4, #0]
 80154f6:	bd38      	pop	{r3, r4, r5, pc}
 80154f8:	20000c7c 	.word	0x20000c7c

080154fc <_init>:
 80154fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154fe:	bf00      	nop
 8015500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015502:	bc08      	pop	{r3}
 8015504:	469e      	mov	lr, r3
 8015506:	4770      	bx	lr

08015508 <_fini>:
 8015508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801550a:	bf00      	nop
 801550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801550e:	bc08      	pop	{r3}
 8015510:	469e      	mov	lr, r3
 8015512:	4770      	bx	lr
