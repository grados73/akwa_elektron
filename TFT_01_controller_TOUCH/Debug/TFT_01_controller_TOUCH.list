
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f58  08014dc0  08014dc0  00024dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028d18  08028d18  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08028d18  08028d18  00038d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028d20  08028d20  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028d20  08028d20  00038d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028d24  08028d24  00038d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08028d28  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000214  08028f3c  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08028f3c  00040910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237b1  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b17  00000000  00000000  000639f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  00068510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000078dc  00000000  00000000  00069e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025a7c  00000000  00000000  0007176c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00098e4e  00000000  00000000  000971e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00130036  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000017e0  00000000  00000000  00130090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e74  00000000  00000000  00131870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014da4 	.word	0x08014da4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08014da4 	.word	0x08014da4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002c0 	.word	0x200002c0

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002c0 	.word	0x200002c0

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200002c0 	.word	0x200002c0

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002c0 	.word	0x200002c0

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002c0 	.word	0x200002c0

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002c0 	.word	0x200002c0

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f007 fee6 	bl	8009a00 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002c4 	.word	0x200002c4

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f008 fe17 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f008 fe11 	bl	800a8e0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f008 fe06 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f008 fdf3 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f008 fded 	bl	800a8e0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f008 fde1 	bl	800a8e0 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f008 fdd7 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f008 fcdc 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f008 fcd6 	bl	800a8e0 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f008 fc9f 	bl	800a8e0 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	200002c4 	.word	0x200002c4

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f008 fc7f 	bl	800a8e0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f008 fc76 	bl	800a8e0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002c4 	.word	0x200002c4
 8002054:	080180e8 	.word	0x080180e8
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f008 fc39 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00c fa50 	bl	800e522 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f008 fc29 	bl	800a8e0 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002c8 	.word	0x200002c8
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002f1 	.word	0x200002f1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f007 fb86 	bl	80099e8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f008 fabd 	bl	800a8b0 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f007 fb51 	bl	80099e8 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f007 fb4b 	bl	80099e8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f008 fa7f 	bl	800a8b0 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f007 fb13 	bl	80099e8 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 fcc0 	bl	8009d6c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f007 fcab 	bl	8009d4e <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f007 fc7a 	bl	8009cfe <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002f1 	.word	0x200002f1
 8002420:	200002f4 	.word	0x200002f4
 8002424:	200002f0 	.word	0x200002f0
 8002428:	200002c8 	.word	0x200002c8
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f007 fc6a 	bl	8009d1a <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002f1 	.word	0x200002f1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f008 fa31 	bl	800a8e0 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f007 fab3 	bl	8009a00 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002f1 	.word	0x200002f1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f007 fbd3 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f007 fbec 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f007 fbcb 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f007 fbe4 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f007 fbc3 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f007 fbdc 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f007 fbbb 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f007 fbd4 	bl	8009cfe <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002f8 	.word	0x200002f8

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f008 fb1d 	bl	800ac00 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002f8 	.word	0x200002f8

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f008 fb07 	bl	800ac00 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f008 fbfa 	bl	800adfc <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002f8 	.word	0x200002f8

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f007 f887 	bl	80099e8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f008 fd8f 	bl	800b43c <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000033c 	.word	0x2000033c

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f008 fc77 	bl	800b248 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f007 f843 	bl	80099e8 <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000033c 	.word	0x2000033c
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f005 ff45 	bl	80089dc <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f005 ff41 	bl	80089dc <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f005 ff38 	bl	80089dc <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f005 ff34 	bl	80089dc <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f005 ff2b 	bl	80089dc <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f005 ff27 	bl	80089dc <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f005 ff1e 	bl	80089dc <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f005 ff1a 	bl	80089dc <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f005 ff0d 	bl	80089dc <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f005 ff09 	bl	80089dc <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f005 ff00 	bl	80089dc <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f005 fefc 	bl	80089dc <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f005 fef3 	bl	80089dc <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f005 feef 	bl	80089dc <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f005 fee6 	bl	80089dc <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f005 fee2 	bl	80089dc <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c32:	f107 030a 	add.w	r3, r7, #10
 8002c36:	2201      	movs	r2, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f7ff fe58 	bl	80028f0 <eeprom_read>
 8002c40:	e009      	b.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d106      	bne.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c48:	f107 030a 	add.w	r3, r7, #10
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	200c      	movs	r0, #12
 8002c52:	f7ff fe4d 	bl	80028f0 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	e016      	b.n	8002c8e <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e004      	b.n	8002c82 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	72fb      	strb	r3, [r7, #11]
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d9e5      	bls.n	8002c60 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6039      	str	r1, [r7, #0]
 8002ca8:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	e011      	b.n	8002cdc <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7abb      	ldrb	r3, [r7, #10]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	72fb      	strb	r3, [r7, #11]
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d9ea      	bls.n	8002cb8 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ce8:	f107 030a 	add.w	r3, r7, #10
 8002cec:	2201      	movs	r2, #1
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	f7ff fe1b 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002cf6:	e009      	b.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d106      	bne.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002cfe:	f107 030a 	add.w	r3, r7, #10
 8002d02:	2201      	movs	r2, #1
 8002d04:	4619      	mov	r1, r3
 8002d06:	200c      	movs	r0, #12
 8002d08:	f7ff fe10 	bl	800292c <eeprom_write>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d2e:	f107 0309 	add.w	r3, r7, #9
 8002d32:	2201      	movs	r2, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	2006      	movs	r0, #6
 8002d38:	f7ff fdda 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7ff fdd3 	bl	80028f0 <eeprom_read>
 8002d4a:	e010      	b.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d10d      	bne.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d52:	f107 0309 	add.w	r3, r7, #9
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	200d      	movs	r0, #13
 8002d5c:	f7ff fdc8 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	2201      	movs	r2, #1
 8002d66:	4619      	mov	r1, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fdc1 	bl	80028f0 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	72fb      	strb	r3, [r7, #11]
 8002d76:	e016      	b.n	8002da6 <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002d78:	7a7b      	ldrb	r3, [r7, #9]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e004      	b.n	8002d9a <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	3301      	adds	r3, #1
 8002da4:	72fb      	strb	r3, [r7, #11]
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d9e5      	bls.n	8002d78 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002dac:	2301      	movs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002db0:	2304      	movs	r3, #4
 8002db2:	72bb      	strb	r3, [r7, #10]
 8002db4:	e016      	b.n	8002de4 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002db6:	7a3b      	ldrb	r3, [r7, #8]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002dc2:	7abb      	ldrb	r3, [r7, #10]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e004      	b.n	8002dd8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002dce:	7abb      	ldrb	r3, [r7, #10]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002dde:	7abb      	ldrb	r3, [r7, #10]
 8002de0:	3301      	adds	r3, #1
 8002de2:	72bb      	strb	r3, [r7, #10]
 8002de4:	7abb      	ldrb	r3, [r7, #10]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d9e5      	bls.n	8002db6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	72fb      	strb	r3, [r7, #11]
 8002e10:	e011      	b.n	8002e36 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	7a7b      	ldrb	r3, [r7, #9]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	3301      	adds	r3, #1
 8002e34:	72fb      	strb	r3, [r7, #11]
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9ea      	bls.n	8002e12 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e40:	2304      	movs	r3, #4
 8002e42:	72bb      	strb	r3, [r7, #10]
 8002e44:	e011      	b.n	8002e6a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	7a3b      	ldrb	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	3301      	adds	r3, #1
 8002e68:	72bb      	strb	r3, [r7, #10]
 8002e6a:	7abb      	ldrb	r3, [r7, #10]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d9ea      	bls.n	8002e46 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e76:	f107 0309 	add.w	r3, r7, #9
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2006      	movs	r0, #6
 8002e80:	f7ff fd54 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2007      	movs	r0, #7
 8002e8e:	f7ff fd4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002e92:	e010      	b.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10d      	bne.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e9a:	f107 0309 	add.w	r3, r7, #9
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	200d      	movs	r0, #13
 8002ea4:	f7ff fd42 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2201      	movs	r2, #1
 8002eae:	4619      	mov	r1, r3
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	f7ff fd3b 	bl	800292c <eeprom_write>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	6039      	str	r1, [r7, #0]
 8002ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002ed4:	f107 030f 	add.w	r3, r7, #15
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	2008      	movs	r0, #8
 8002ede:	f7ff fd07 	bl	80028f0 <eeprom_read>
 8002ee2:	e009      	b.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d106      	bne.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002eea:	f107 030f 	add.w	r3, r7, #15
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f7ff fcfc 	bl	80028f0 <eeprom_read>
	}

	*hourOn = TempHour;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	6039      	str	r1, [r7, #0]
 8002f10:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f1c:	f107 030f 	add.w	r3, r7, #15
 8002f20:	2201      	movs	r2, #1
 8002f22:	4619      	mov	r1, r3
 8002f24:	2009      	movs	r0, #9
 8002f26:	f7ff fce3 	bl	80028f0 <eeprom_read>
 8002f2a:	e009      	b.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d106      	bne.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f32:	f107 030f 	add.w	r3, r7, #15
 8002f36:	2201      	movs	r2, #1
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff fcd8 	bl	80028f0 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f64:	f107 030f 	add.w	r3, r7, #15
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	f7ff fcbf 	bl	80028f0 <eeprom_read>
 8002f72:	e009      	b.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d106      	bne.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f7a:	f107 030f 	add.w	r3, r7, #15
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4619      	mov	r1, r3
 8002f82:	2011      	movs	r0, #17
 8002f84:	f7ff fcb4 	bl	80028f0 <eeprom_read>
	}

	*hourOff = TempHour;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]

}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fac:	f107 030f 	add.w	r3, r7, #15
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	200b      	movs	r0, #11
 8002fb6:	f7ff fc9b 	bl	80028f0 <eeprom_read>
 8002fba:	e009      	b.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d106      	bne.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fc2:	f107 030f 	add.w	r3, r7, #15
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2012      	movs	r0, #18
 8002fcc:	f7ff fc90 	bl	80028f0 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <EEPROM_ScheduleHourOnUpdate+0x2a>
 8002ff8:	f107 030f 	add.w	r3, r7, #15
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4619      	mov	r1, r3
 8003000:	2008      	movs	r0, #8
 8003002:	f7ff fc93 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 8003006:	e009      	b.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d106      	bne.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
 800300e:	f107 030f 	add.w	r3, r7, #15
 8003012:	2201      	movs	r2, #1
 8003014:	4619      	mov	r1, r3
 8003016:	200f      	movs	r0, #15
 8003018:	f7ff fc88 	bl	800292c <eeprom_write>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	460a      	mov	r2, r1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	4613      	mov	r3, r2
 8003032:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 800303e:	f107 030f 	add.w	r3, r7, #15
 8003042:	2201      	movs	r2, #1
 8003044:	4619      	mov	r1, r3
 8003046:	2009      	movs	r0, #9
 8003048:	f7ff fc70 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 800304c:	e009      	b.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d106      	bne.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	2201      	movs	r2, #1
 800305a:	4619      	mov	r1, r3
 800305c:	2010      	movs	r0, #16
 800305e:	f7ff fc65 	bl	800292c <eeprom_write>
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	460a      	mov	r2, r1
 8003074:	71fb      	strb	r3, [r7, #7]
 8003076:	4613      	mov	r3, r2
 8003078:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003084:	f107 030f 	add.w	r3, r7, #15
 8003088:	2201      	movs	r2, #1
 800308a:	4619      	mov	r1, r3
 800308c:	200a      	movs	r0, #10
 800308e:	f7ff fc4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8003092:	e009      	b.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d106      	bne.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
 800309a:	f107 030f 	add.w	r3, r7, #15
 800309e:	2201      	movs	r2, #1
 80030a0:	4619      	mov	r1, r3
 80030a2:	2011      	movs	r0, #17
 80030a4:	f7ff fc42 	bl	800292c <eeprom_write>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80030ca:	f107 030f 	add.w	r3, r7, #15
 80030ce:	2201      	movs	r2, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	200b      	movs	r0, #11
 80030d4:	f7ff fc2a 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80030d8:	e009      	b.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d106      	bne.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80030e0:	f107 030f 	add.w	r3, r7, #15
 80030e4:	2201      	movs	r2, #1
 80030e6:	4619      	mov	r1, r3
 80030e8:	2012      	movs	r0, #18
 80030ea:	f7ff fc1f 	bl	800292c <eeprom_write>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80030fe:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003102:	f7fe fef9 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003106:	238c      	movs	r3, #140	; 0x8c
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23f0      	movs	r3, #240	; 0xf0
 800310c:	4aae      	ldr	r2, [pc, #696]	; (80033c8 <system_init+0x2d0>)
 800310e:	2132      	movs	r1, #50	; 0x32
 8003110:	201e      	movs	r0, #30
 8003112:	f7fe fec6 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003116:	48ad      	ldr	r0, [pc, #692]	; (80033cc <system_init+0x2d4>)
 8003118:	f7fe faea 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 800311c:	49ac      	ldr	r1, [pc, #688]	; (80033d0 <system_init+0x2d8>)
 800311e:	48ad      	ldr	r0, [pc, #692]	; (80033d4 <system_init+0x2dc>)
 8003120:	f00e f82a 	bl	8011178 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003124:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	220a      	movs	r2, #10
 8003132:	213c      	movs	r1, #60	; 0x3c
 8003134:	48a7      	ldr	r0, [pc, #668]	; (80033d4 <system_init+0x2dc>)
 8003136:	f7fe fcf5 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800313a:	f006 fc55 	bl	80099e8 <HAL_GetTick>
 800313e:	4603      	mov	r3, r0
 8003140:	4aa5      	ldr	r2, [pc, #660]	; (80033d8 <system_init+0x2e0>)
 8003142:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003144:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2305      	movs	r3, #5
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2314      	movs	r3, #20
 8003150:	2214      	movs	r2, #20
 8003152:	21be      	movs	r1, #190	; 0xbe
 8003154:	203c      	movs	r0, #60	; 0x3c
 8003156:	f7fe f9fd 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800315a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2305      	movs	r3, #5
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2314      	movs	r3, #20
 8003166:	2214      	movs	r2, #20
 8003168:	21be      	movs	r1, #190	; 0xbe
 800316a:	205a      	movs	r0, #90	; 0x5a
 800316c:	f7fe f9f2 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2305      	movs	r3, #5
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2314      	movs	r3, #20
 800317c:	2214      	movs	r2, #20
 800317e:	21be      	movs	r1, #190	; 0xbe
 8003180:	2078      	movs	r0, #120	; 0x78
 8003182:	f7fe f9e7 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 8003186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2305      	movs	r3, #5
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2314      	movs	r3, #20
 8003192:	2214      	movs	r2, #20
 8003194:	21be      	movs	r1, #190	; 0xbe
 8003196:	2096      	movs	r0, #150	; 0x96
 8003198:	f7fe f9dc 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 800319c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2305      	movs	r3, #5
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2314      	movs	r3, #20
 80031a8:	2214      	movs	r2, #20
 80031aa:	21be      	movs	r1, #190	; 0xbe
 80031ac:	20b4      	movs	r0, #180	; 0xb4
 80031ae:	f7fe f9d1 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80031b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	2305      	movs	r3, #5
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2314      	movs	r3, #20
 80031be:	2214      	movs	r2, #20
 80031c0:	21be      	movs	r1, #190	; 0xbe
 80031c2:	20d2      	movs	r0, #210	; 0xd2
 80031c4:	f7fe f9c6 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80031c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2305      	movs	r3, #5
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2314      	movs	r3, #20
 80031d4:	2214      	movs	r2, #20
 80031d6:	21be      	movs	r1, #190	; 0xbe
 80031d8:	20f0      	movs	r0, #240	; 0xf0
 80031da:	f7fe f9bb 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80031de:	f006 fc03 	bl	80099e8 <HAL_GetTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <system_init+0x2e0>)
 80031e6:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80031e8:	487c      	ldr	r0, [pc, #496]	; (80033dc <system_init+0x2e4>)
 80031ea:	f7fe fa81 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80031ee:	20c8      	movs	r0, #200	; 0xc8
 80031f0:	f002 f8e6 	bl	80053c0 <initWait>
	  	  LastTime = HAL_GetTick();
 80031f4:	f006 fbf8 	bl	80099e8 <HAL_GetTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a77      	ldr	r2, [pc, #476]	; (80033d8 <system_init+0x2e0>)
 80031fc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80031fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2305      	movs	r3, #5
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2314      	movs	r3, #20
 800320a:	2214      	movs	r2, #20
 800320c:	21be      	movs	r1, #190	; 0xbe
 800320e:	203c      	movs	r0, #60	; 0x3c
 8003210:	f7fe fa1d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003214:	2201      	movs	r2, #1
 8003216:	4972      	ldr	r1, [pc, #456]	; (80033e0 <system_init+0x2e8>)
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff fb69 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800321e:	2025      	movs	r0, #37	; 0x25
 8003220:	f005 fbdc 	bl	80089dc <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003224:	486f      	ldr	r0, [pc, #444]	; (80033e4 <system_init+0x2ec>)
 8003226:	f006 f9ef 	bl	8009608 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800322a:	496f      	ldr	r1, [pc, #444]	; (80033e8 <system_init+0x2f0>)
 800322c:	4869      	ldr	r0, [pc, #420]	; (80033d4 <system_init+0x2dc>)
 800322e:	f00d ffa3 	bl	8011178 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003232:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	2301      	movs	r3, #1
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	22dc      	movs	r2, #220	; 0xdc
 8003240:	2114      	movs	r1, #20
 8003242:	4864      	ldr	r0, [pc, #400]	; (80033d4 <system_init+0x2dc>)
 8003244:	f7fe fc6e 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003248:	20c8      	movs	r0, #200	; 0xc8
 800324a:	f002 f8b9 	bl	80053c0 <initWait>
	  	  	  LastTime = HAL_GetTick();
 800324e:	f006 fbcb 	bl	80099e8 <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <system_init+0x2e0>)
 8003256:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003258:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2314      	movs	r3, #20
 8003264:	2214      	movs	r2, #20
 8003266:	21be      	movs	r1, #190	; 0xbe
 8003268:	205a      	movs	r0, #90	; 0x5a
 800326a:	f7fe f9f0 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 800326e:	201b      	movs	r0, #27
 8003270:	f005 fbb4 	bl	80089dc <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003274:	f7ff fc62 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003278:	485a      	ldr	r0, [pc, #360]	; (80033e4 <system_init+0x2ec>)
 800327a:	f006 f9c5 	bl	8009608 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 800327e:	495b      	ldr	r1, [pc, #364]	; (80033ec <system_init+0x2f4>)
 8003280:	4854      	ldr	r0, [pc, #336]	; (80033d4 <system_init+0x2dc>)
 8003282:	f00d ff79 	bl	8011178 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003286:	f24c 6318 	movw	r3, #50712	; 0xc618
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2301      	movs	r3, #1
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	22dc      	movs	r2, #220	; 0xdc
 8003294:	2114      	movs	r1, #20
 8003296:	484f      	ldr	r0, [pc, #316]	; (80033d4 <system_init+0x2dc>)
 8003298:	f7fe fc44 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800329c:	20c8      	movs	r0, #200	; 0xc8
 800329e:	f002 f88f 	bl	80053c0 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80032a2:	f006 fba1 	bl	80099e8 <HAL_GetTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <system_init+0x2e0>)
 80032aa:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80032ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	2305      	movs	r3, #5
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2314      	movs	r3, #20
 80032b8:	2214      	movs	r2, #20
 80032ba:	21be      	movs	r1, #190	; 0xbe
 80032bc:	2078      	movs	r0, #120	; 0x78
 80032be:	f7fe f9c6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80032c2:	2004      	movs	r0, #4
 80032c4:	f005 fb8a 	bl	80089dc <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80032c8:	2001      	movs	r0, #1
 80032ca:	f004 fa6f 	bl	80077ac <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80032ce:	20c8      	movs	r0, #200	; 0xc8
 80032d0:	f002 f876 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 80032d4:	f006 fb88 	bl	80099e8 <HAL_GetTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <system_init+0x2e0>)
 80032dc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80032de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2305      	movs	r3, #5
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2314      	movs	r3, #20
 80032ea:	2214      	movs	r2, #20
 80032ec:	21be      	movs	r1, #190	; 0xbe
 80032ee:	2096      	movs	r0, #150	; 0x96
 80032f0:	f7fe f9ad 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80032f4:	f7ff fc5a 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80032f8:	483a      	ldr	r0, [pc, #232]	; (80033e4 <system_init+0x2ec>)
 80032fa:	f006 f985 	bl	8009608 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80032fe:	493c      	ldr	r1, [pc, #240]	; (80033f0 <system_init+0x2f8>)
 8003300:	4834      	ldr	r0, [pc, #208]	; (80033d4 <system_init+0x2dc>)
 8003302:	f00d ff39 	bl	8011178 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003306:	f24c 6318 	movw	r3, #50712	; 0xc618
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2301      	movs	r3, #1
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	22dc      	movs	r2, #220	; 0xdc
 8003314:	2114      	movs	r1, #20
 8003316:	482f      	ldr	r0, [pc, #188]	; (80033d4 <system_init+0x2dc>)
 8003318:	f7fe fc04 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800331c:	20c8      	movs	r0, #200	; 0xc8
 800331e:	f002 f84f 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003322:	f006 fb61 	bl	80099e8 <HAL_GetTick>
 8003326:	4603      	mov	r3, r0
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <system_init+0x2e0>)
 800332a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 800332c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2305      	movs	r3, #5
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2314      	movs	r3, #20
 8003338:	2214      	movs	r2, #20
 800333a:	21be      	movs	r1, #190	; 0xbe
 800333c:	20b4      	movs	r0, #180	; 0xb4
 800333e:	f7fe f986 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8003342:	2003      	movs	r0, #3
 8003344:	f005 fb4a 	bl	80089dc <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003348:	2002      	movs	r0, #2
 800334a:	f004 fa2f 	bl	80077ac <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800334e:	20c8      	movs	r0, #200	; 0xc8
 8003350:	f002 f836 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003354:	f006 fb48 	bl	80099e8 <HAL_GetTick>
 8003358:	4603      	mov	r3, r0
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <system_init+0x2e0>)
 800335c:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 800335e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2305      	movs	r3, #5
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2314      	movs	r3, #20
 800336a:	2214      	movs	r2, #20
 800336c:	21be      	movs	r1, #190	; 0xbe
 800336e:	20d2      	movs	r0, #210	; 0xd2
 8003370:	f7fe f96d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003374:	2015      	movs	r0, #21
 8003376:	f005 fb31 	bl	80089dc <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800337a:	20c8      	movs	r0, #200	; 0xc8
 800337c:	f002 f820 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003380:	f006 fb32 	bl	80099e8 <HAL_GetTick>
 8003384:	4603      	mov	r3, r0
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <system_init+0x2e0>)
 8003388:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800338a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2305      	movs	r3, #5
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2314      	movs	r3, #20
 8003396:	2214      	movs	r2, #20
 8003398:	21be      	movs	r1, #190	; 0xbe
 800339a:	20f0      	movs	r0, #240	; 0xf0
 800339c:	f7fe f957 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80033a0:	2016      	movs	r0, #22
 80033a2:	f005 fb1b 	bl	80089dc <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80033a6:	480f      	ldr	r0, [pc, #60]	; (80033e4 <system_init+0x2ec>)
 80033a8:	f006 f92e 	bl	8009608 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80033ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033b0:	f002 f806 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 80033b4:	f006 fb18 	bl	80099e8 <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <system_init+0x2e0>)
 80033bc:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08018158 	.word	0x08018158
 80033cc:	080180dc 	.word	0x080180dc
 80033d0:	08014dc0 	.word	0x08014dc0
 80033d4:	200002fc 	.word	0x200002fc
 80033d8:	20000250 	.word	0x20000250
 80033dc:	08016164 	.word	0x08016164
 80033e0:	20000033 	.word	0x20000033
 80033e4:	200004a4 	.word	0x200004a4
 80033e8:	08014dd4 	.word	0x08014dd4
 80033ec:	08014df0 	.word	0x08014df0
 80033f0:	08014e10 	.word	0x08014e10

080033f4 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80033fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	460b      	mov	r3, r1
 8003406:	ed87 1a01 	vstr	s2, [r7, #4]
 800340a:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800340c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003410:	f7fe fd72 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003414:	2003      	movs	r0, #3
 8003416:	f005 fae1 	bl	80089dc <SendComand>
	  SendComand(UCMD_PRES_1);
 800341a:	2004      	movs	r0, #4
 800341c:	f005 fade 	bl	80089dc <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003420:	201b      	movs	r0, #27
 8003422:	f005 fadb 	bl	80089dc <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8003426:	f7ff f9b5 	bl	8002794 <DS3231_GetHour>
 800342a:	4603      	mov	r3, r0
 800342c:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 800342e:	f7ff f9bd 	bl	80027ac <DS3231_GetMinute>
 8003432:	4603      	mov	r3, r0
 8003434:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003436:	4881      	ldr	r0, [pc, #516]	; (800363c <showCurrentParameters+0x248>)
 8003438:	f7fe f95a 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 800343c:	4980      	ldr	r1, [pc, #512]	; (8003640 <showCurrentParameters+0x24c>)
 800343e:	4881      	ldr	r0, [pc, #516]	; (8003644 <showCurrentParameters+0x250>)
 8003440:	f00d fe9a 	bl	8011178 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003444:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003452:	220a      	movs	r2, #10
 8003454:	212f      	movs	r1, #47	; 0x2f
 8003456:	487b      	ldr	r0, [pc, #492]	; (8003644 <showCurrentParameters+0x250>)
 8003458:	f7fe fb64 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800345c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2329      	movs	r3, #41	; 0x29
 8003464:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003468:	2129      	movs	r1, #41	; 0x29
 800346a:	2000      	movs	r0, #0
 800346c:	f7fd fe90 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003470:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	232b      	movs	r3, #43	; 0x2b
 8003478:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800347c:	212b      	movs	r1, #43	; 0x2b
 800347e:	2000      	movs	r0, #0
 8003480:	f7fd fe86 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d809      	bhi.n	800349e <showCurrentParameters+0xaa>
 800348a:	7fbb      	ldrb	r3, [r7, #30]
 800348c:	2b09      	cmp	r3, #9
 800348e:	d806      	bhi.n	800349e <showCurrentParameters+0xaa>
 8003490:	7ffa      	ldrb	r2, [r7, #31]
 8003492:	7fbb      	ldrb	r3, [r7, #30]
 8003494:	496c      	ldr	r1, [pc, #432]	; (8003648 <showCurrentParameters+0x254>)
 8003496:	486b      	ldr	r0, [pc, #428]	; (8003644 <showCurrentParameters+0x250>)
 8003498:	f00d fe6e 	bl	8011178 <siprintf>
 800349c:	e019      	b.n	80034d2 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d806      	bhi.n	80034b2 <showCurrentParameters+0xbe>
 80034a4:	7ffa      	ldrb	r2, [r7, #31]
 80034a6:	7fbb      	ldrb	r3, [r7, #30]
 80034a8:	4968      	ldr	r1, [pc, #416]	; (800364c <showCurrentParameters+0x258>)
 80034aa:	4866      	ldr	r0, [pc, #408]	; (8003644 <showCurrentParameters+0x250>)
 80034ac:	f00d fe64 	bl	8011178 <siprintf>
 80034b0:	e00f      	b.n	80034d2 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80034b2:	7fbb      	ldrb	r3, [r7, #30]
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	d806      	bhi.n	80034c6 <showCurrentParameters+0xd2>
 80034b8:	7ffa      	ldrb	r2, [r7, #31]
 80034ba:	7fbb      	ldrb	r3, [r7, #30]
 80034bc:	4964      	ldr	r1, [pc, #400]	; (8003650 <showCurrentParameters+0x25c>)
 80034be:	4861      	ldr	r0, [pc, #388]	; (8003644 <showCurrentParameters+0x250>)
 80034c0:	f00d fe5a 	bl	8011178 <siprintf>
 80034c4:	e005      	b.n	80034d2 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80034c6:	7ffa      	ldrb	r2, [r7, #31]
 80034c8:	7fbb      	ldrb	r3, [r7, #30]
 80034ca:	4962      	ldr	r1, [pc, #392]	; (8003654 <showCurrentParameters+0x260>)
 80034cc:	485d      	ldr	r0, [pc, #372]	; (8003644 <showCurrentParameters+0x250>)
 80034ce:	f00d fe53 	bl	8011178 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80034d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	2232      	movs	r2, #50	; 0x32
 80034e0:	2114      	movs	r1, #20
 80034e2:	4858      	ldr	r0, [pc, #352]	; (8003644 <showCurrentParameters+0x250>)
 80034e4:	f7fe fb1e 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80034e8:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <showCurrentParameters+0x264>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f843 	bl	8000578 <__aeabi_f2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4959      	ldr	r1, [pc, #356]	; (800365c <showCurrentParameters+0x268>)
 80034f8:	4852      	ldr	r0, [pc, #328]	; (8003644 <showCurrentParameters+0x250>)
 80034fa:	f00d fe3d 	bl	8011178 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80034fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2301      	movs	r3, #1
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	2250      	movs	r2, #80	; 0x50
 800350c:	2114      	movs	r1, #20
 800350e:	484d      	ldr	r0, [pc, #308]	; (8003644 <showCurrentParameters+0x250>)
 8003510:	f7fe fb08 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <showCurrentParameters+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f82d 	bl	8000578 <__aeabi_f2d>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4950      	ldr	r1, [pc, #320]	; (8003664 <showCurrentParameters+0x270>)
 8003524:	4847      	ldr	r0, [pc, #284]	; (8003644 <showCurrentParameters+0x250>)
 8003526:	f00d fe27 	bl	8011178 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800352a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	226e      	movs	r2, #110	; 0x6e
 8003538:	2114      	movs	r1, #20
 800353a:	4842      	ldr	r0, [pc, #264]	; (8003644 <showCurrentParameters+0x250>)
 800353c:	f7fe faf2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <showCurrentParameters+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4949      	ldr	r1, [pc, #292]	; (800366c <showCurrentParameters+0x278>)
 8003548:	483e      	ldr	r0, [pc, #248]	; (8003644 <showCurrentParameters+0x250>)
 800354a:	f00d fe15 	bl	8011178 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800354e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	228c      	movs	r2, #140	; 0x8c
 800355c:	2114      	movs	r1, #20
 800355e:	4839      	ldr	r0, [pc, #228]	; (8003644 <showCurrentParameters+0x250>)
 8003560:	f7fe fae0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <showCurrentParameters+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd f805 	bl	8000578 <__aeabi_f2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4940      	ldr	r1, [pc, #256]	; (8003674 <showCurrentParameters+0x280>)
 8003574:	4833      	ldr	r0, [pc, #204]	; (8003644 <showCurrentParameters+0x250>)
 8003576:	f00d fdff 	bl	8011178 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800357a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	22aa      	movs	r2, #170	; 0xaa
 8003588:	2114      	movs	r1, #20
 800358a:	482e      	ldr	r0, [pc, #184]	; (8003644 <showCurrentParameters+0x250>)
 800358c:	f7fe faca 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003590:	4839      	ldr	r0, [pc, #228]	; (8003678 <showCurrentParameters+0x284>)
 8003592:	f7fe f8ad 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2305      	movs	r3, #5
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2314      	movs	r3, #20
 80035a2:	225f      	movs	r2, #95	; 0x5f
 80035a4:	21d8      	movs	r1, #216	; 0xd8
 80035a6:	20dc      	movs	r0, #220	; 0xdc
 80035a8:	f7fe f851 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80035ac:	4933      	ldr	r1, [pc, #204]	; (800367c <showCurrentParameters+0x288>)
 80035ae:	4825      	ldr	r0, [pc, #148]	; (8003644 <showCurrentParameters+0x250>)
 80035b0:	f00d fde2 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	22da      	movs	r2, #218	; 0xda
 80035c2:	21df      	movs	r1, #223	; 0xdf
 80035c4:	481f      	ldr	r0, [pc, #124]	; (8003644 <showCurrentParameters+0x250>)
 80035c6:	f7fe faad 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80035ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2305      	movs	r3, #5
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2314      	movs	r3, #20
 80035d6:	2264      	movs	r2, #100	; 0x64
 80035d8:	21d8      	movs	r1, #216	; 0xd8
 80035da:	200a      	movs	r0, #10
 80035dc:	f7fe f837 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80035e0:	4927      	ldr	r1, [pc, #156]	; (8003680 <showCurrentParameters+0x28c>)
 80035e2:	4818      	ldr	r0, [pc, #96]	; (8003644 <showCurrentParameters+0x250>)
 80035e4:	f00d fdc8 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	22da      	movs	r2, #218	; 0xda
 80035f6:	2114      	movs	r1, #20
 80035f8:	4812      	ldr	r0, [pc, #72]	; (8003644 <showCurrentParameters+0x250>)
 80035fa:	f7fe fa93 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80035fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2305      	movs	r3, #5
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2314      	movs	r3, #20
 800360a:	225a      	movs	r2, #90	; 0x5a
 800360c:	21d8      	movs	r1, #216	; 0xd8
 800360e:	2078      	movs	r0, #120	; 0x78
 8003610:	f7fe f81d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003614:	491b      	ldr	r1, [pc, #108]	; (8003684 <showCurrentParameters+0x290>)
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <showCurrentParameters+0x250>)
 8003618:	f00d fdae 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800361c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	22da      	movs	r2, #218	; 0xda
 800362a:	2184      	movs	r1, #132	; 0x84
 800362c:	4805      	ldr	r0, [pc, #20]	; (8003644 <showCurrentParameters+0x250>)
 800362e:	f7fe fa79 	bl	8001b24 <EF_PutString>
}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	080180dc 	.word	0x080180dc
 8003640:	08014e30 	.word	0x08014e30
 8003644:	200002fc 	.word	0x200002fc
 8003648:	08014e40 	.word	0x08014e40
 800364c:	08014e50 	.word	0x08014e50
 8003650:	08014e60 	.word	0x08014e60
 8003654:	08014e70 	.word	0x08014e70
 8003658:	20000294 	.word	0x20000294
 800365c:	08014e80 	.word	0x08014e80
 8003660:	200002a0 	.word	0x200002a0
 8003664:	08014e94 	.word	0x08014e94
 8003668:	200002a4 	.word	0x200002a4
 800366c:	08014ea8 	.word	0x08014ea8
 8003670:	2000029c 	.word	0x2000029c
 8003674:	08014ebc 	.word	0x08014ebc
 8003678:	08016164 	.word	0x08016164
 800367c:	08014ed4 	.word	0x08014ed4
 8003680:	08014ee0 	.word	0x08014ee0
 8003684:	08014eec 	.word	0x08014eec

08003688 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800368e:	2015      	movs	r0, #21
 8003690:	f005 f9a4 	bl	80089dc <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003694:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003698:	f7fe fc2e 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800369c:	485c      	ldr	r0, [pc, #368]	; (8003810 <showControlPanel+0x188>)
 800369e:	f7fe f827 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80036a2:	495c      	ldr	r1, [pc, #368]	; (8003814 <showControlPanel+0x18c>)
 80036a4:	485c      	ldr	r0, [pc, #368]	; (8003818 <showControlPanel+0x190>)
 80036a6:	f00d fd67 	bl	8011178 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	231f      	movs	r3, #31
 80036b6:	220a      	movs	r2, #10
 80036b8:	2123      	movs	r1, #35	; 0x23
 80036ba:	4857      	ldr	r0, [pc, #348]	; (8003818 <showControlPanel+0x190>)
 80036bc:	f7fe fa32 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80036c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2329      	movs	r3, #41	; 0x29
 80036c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036cc:	2129      	movs	r1, #41	; 0x29
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7fd fd5e 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80036d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	232b      	movs	r3, #43	; 0x2b
 80036dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036e0:	212b      	movs	r1, #43	; 0x2b
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd fd54 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80036e8:	494c      	ldr	r1, [pc, #304]	; (800381c <showControlPanel+0x194>)
 80036ea:	484b      	ldr	r0, [pc, #300]	; (8003818 <showControlPanel+0x190>)
 80036ec:	f00d fd44 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	223c      	movs	r2, #60	; 0x3c
 80036fe:	2114      	movs	r1, #20
 8003700:	4845      	ldr	r0, [pc, #276]	; (8003818 <showControlPanel+0x190>)
 8003702:	f7fe fa0f 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8003706:	4946      	ldr	r1, [pc, #280]	; (8003820 <showControlPanel+0x198>)
 8003708:	4843      	ldr	r0, [pc, #268]	; (8003818 <showControlPanel+0x190>)
 800370a:	f00d fd35 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800370e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2301      	movs	r3, #1
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	225a      	movs	r2, #90	; 0x5a
 800371c:	2114      	movs	r1, #20
 800371e:	483e      	ldr	r0, [pc, #248]	; (8003818 <showControlPanel+0x190>)
 8003720:	f7fe fa00 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003724:	493f      	ldr	r1, [pc, #252]	; (8003824 <showControlPanel+0x19c>)
 8003726:	483c      	ldr	r0, [pc, #240]	; (8003818 <showControlPanel+0x190>)
 8003728:	f00d fd26 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800372c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	2278      	movs	r2, #120	; 0x78
 800373a:	2114      	movs	r1, #20
 800373c:	4836      	ldr	r0, [pc, #216]	; (8003818 <showControlPanel+0x190>)
 800373e:	f7fe f9f1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003742:	4939      	ldr	r1, [pc, #228]	; (8003828 <showControlPanel+0x1a0>)
 8003744:	4834      	ldr	r0, [pc, #208]	; (8003818 <showControlPanel+0x190>)
 8003746:	f00d fd17 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800374a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2300      	movs	r3, #0
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	2296      	movs	r2, #150	; 0x96
 8003758:	2114      	movs	r1, #20
 800375a:	482f      	ldr	r0, [pc, #188]	; (8003818 <showControlPanel+0x190>)
 800375c:	f7fe f9e2 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003760:	4832      	ldr	r0, [pc, #200]	; (800382c <showControlPanel+0x1a4>)
 8003762:	f7fd ffc5 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003766:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2305      	movs	r3, #5
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2314      	movs	r3, #20
 8003772:	225f      	movs	r2, #95	; 0x5f
 8003774:	21d8      	movs	r1, #216	; 0xd8
 8003776:	20dc      	movs	r0, #220	; 0xdc
 8003778:	f7fd ff69 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 800377c:	492c      	ldr	r1, [pc, #176]	; (8003830 <showControlPanel+0x1a8>)
 800377e:	4826      	ldr	r0, [pc, #152]	; (8003818 <showControlPanel+0x190>)
 8003780:	f00d fcfa 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003784:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2300      	movs	r3, #0
 8003790:	22da      	movs	r2, #218	; 0xda
 8003792:	21df      	movs	r1, #223	; 0xdf
 8003794:	4820      	ldr	r0, [pc, #128]	; (8003818 <showControlPanel+0x190>)
 8003796:	f7fe f9c5 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800379a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2305      	movs	r3, #5
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2314      	movs	r3, #20
 80037a6:	2264      	movs	r2, #100	; 0x64
 80037a8:	21d8      	movs	r1, #216	; 0xd8
 80037aa:	200a      	movs	r0, #10
 80037ac:	f7fd ff4f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80037b0:	4920      	ldr	r1, [pc, #128]	; (8003834 <showControlPanel+0x1ac>)
 80037b2:	4819      	ldr	r0, [pc, #100]	; (8003818 <showControlPanel+0x190>)
 80037b4:	f00d fce0 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	22da      	movs	r2, #218	; 0xda
 80037c6:	2114      	movs	r1, #20
 80037c8:	4813      	ldr	r0, [pc, #76]	; (8003818 <showControlPanel+0x190>)
 80037ca:	f7fe f9ab 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80037ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2305      	movs	r3, #5
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2314      	movs	r3, #20
 80037da:	225a      	movs	r2, #90	; 0x5a
 80037dc:	21d8      	movs	r1, #216	; 0xd8
 80037de:	2078      	movs	r0, #120	; 0x78
 80037e0:	f7fd ff35 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80037e4:	4914      	ldr	r1, [pc, #80]	; (8003838 <showControlPanel+0x1b0>)
 80037e6:	480c      	ldr	r0, [pc, #48]	; (8003818 <showControlPanel+0x190>)
 80037e8:	f00d fcc6 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	22da      	movs	r2, #218	; 0xda
 80037fa:	217e      	movs	r1, #126	; 0x7e
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <showControlPanel+0x190>)
 80037fe:	f7fe f991 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003802:	4803      	ldr	r0, [pc, #12]	; (8003810 <showControlPanel+0x188>)
 8003804:	f7fd ff74 	bl	80016f0 <EF_SetFont>


}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	080180dc 	.word	0x080180dc
 8003814:	08014ef4 	.word	0x08014ef4
 8003818:	200002fc 	.word	0x200002fc
 800381c:	08014f08 	.word	0x08014f08
 8003820:	08014f1c 	.word	0x08014f1c
 8003824:	08014f30 	.word	0x08014f30
 8003828:	08014f44 	.word	0x08014f44
 800382c:	08016164 	.word	0x08016164
 8003830:	08014f58 	.word	0x08014f58
 8003834:	08014f64 	.word	0x08014f64
 8003838:	08014f6c 	.word	0x08014f6c

0800383c <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003842:	2016      	movs	r0, #22
 8003844:	f005 f8ca 	bl	80089dc <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003848:	f24c 6018 	movw	r0, #50712	; 0xc618
 800384c:	f7fe fb54 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003850:	485b      	ldr	r0, [pc, #364]	; (80039c0 <showLightsControlPanel+0x184>)
 8003852:	f7fd ff4d 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003856:	495b      	ldr	r1, [pc, #364]	; (80039c4 <showLightsControlPanel+0x188>)
 8003858:	485b      	ldr	r0, [pc, #364]	; (80039c8 <showLightsControlPanel+0x18c>)
 800385a:	f00d fc8d 	bl	8011178 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800385e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800386c:	220a      	movs	r2, #10
 800386e:	2146      	movs	r1, #70	; 0x46
 8003870:	4855      	ldr	r0, [pc, #340]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003872:	f7fe f957 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003876:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2329      	movs	r3, #41	; 0x29
 800387e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003882:	2129      	movs	r1, #41	; 0x29
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd fc83 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800388a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	232b      	movs	r3, #43	; 0x2b
 8003892:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003896:	212b      	movs	r1, #43	; 0x2b
 8003898:	2000      	movs	r0, #0
 800389a:	f7fd fc79 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 800389e:	494b      	ldr	r1, [pc, #300]	; (80039cc <showLightsControlPanel+0x190>)
 80038a0:	4849      	ldr	r0, [pc, #292]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038a2:	f00d fc69 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	223c      	movs	r2, #60	; 0x3c
 80038b4:	2114      	movs	r1, #20
 80038b6:	4844      	ldr	r0, [pc, #272]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038b8:	f7fe f934 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80038bc:	4944      	ldr	r1, [pc, #272]	; (80039d0 <showLightsControlPanel+0x194>)
 80038be:	4842      	ldr	r0, [pc, #264]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038c0:	f00d fc5a 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80038c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	2301      	movs	r3, #1
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2300      	movs	r3, #0
 80038d0:	225a      	movs	r2, #90	; 0x5a
 80038d2:	2114      	movs	r1, #20
 80038d4:	483c      	ldr	r0, [pc, #240]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038d6:	f7fe f925 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80038da:	493e      	ldr	r1, [pc, #248]	; (80039d4 <showLightsControlPanel+0x198>)
 80038dc:	483a      	ldr	r0, [pc, #232]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038de:	f00d fc4b 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	2278      	movs	r2, #120	; 0x78
 80038f0:	2114      	movs	r1, #20
 80038f2:	4835      	ldr	r0, [pc, #212]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038f4:	f7fe f916 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80038f8:	4937      	ldr	r1, [pc, #220]	; (80039d8 <showLightsControlPanel+0x19c>)
 80038fa:	4833      	ldr	r0, [pc, #204]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038fc:	f00d fc3c 	bl	8011178 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003900:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2296      	movs	r2, #150	; 0x96
 800390e:	2114      	movs	r1, #20
 8003910:	482d      	ldr	r0, [pc, #180]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003912:	f7fe f907 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003916:	4831      	ldr	r0, [pc, #196]	; (80039dc <showLightsControlPanel+0x1a0>)
 8003918:	f7fd feea 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800391c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2305      	movs	r3, #5
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2314      	movs	r3, #20
 8003928:	225f      	movs	r2, #95	; 0x5f
 800392a:	21d8      	movs	r1, #216	; 0xd8
 800392c:	20dc      	movs	r0, #220	; 0xdc
 800392e:	f7fd fe8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003932:	492b      	ldr	r1, [pc, #172]	; (80039e0 <showLightsControlPanel+0x1a4>)
 8003934:	4824      	ldr	r0, [pc, #144]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003936:	f00d fc1f 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800393a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	22da      	movs	r2, #218	; 0xda
 8003948:	21e6      	movs	r1, #230	; 0xe6
 800394a:	481f      	ldr	r0, [pc, #124]	; (80039c8 <showLightsControlPanel+0x18c>)
 800394c:	f7fe f8ea 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003950:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	2305      	movs	r3, #5
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2314      	movs	r3, #20
 800395c:	225a      	movs	r2, #90	; 0x5a
 800395e:	21d8      	movs	r1, #216	; 0xd8
 8003960:	2078      	movs	r0, #120	; 0x78
 8003962:	f7fd fe74 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003966:	491f      	ldr	r1, [pc, #124]	; (80039e4 <showLightsControlPanel+0x1a8>)
 8003968:	4817      	ldr	r0, [pc, #92]	; (80039c8 <showLightsControlPanel+0x18c>)
 800396a:	f00d fc05 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800396e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	22da      	movs	r2, #218	; 0xda
 800397c:	217e      	movs	r1, #126	; 0x7e
 800397e:	4812      	ldr	r0, [pc, #72]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003980:	f7fe f8d0 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003984:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2305      	movs	r3, #5
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2314      	movs	r3, #20
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	21d8      	movs	r1, #216	; 0xd8
 8003994:	200a      	movs	r0, #10
 8003996:	f7fd fe5a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 800399a:	4913      	ldr	r1, [pc, #76]	; (80039e8 <showLightsControlPanel+0x1ac>)
 800399c:	480a      	ldr	r0, [pc, #40]	; (80039c8 <showLightsControlPanel+0x18c>)
 800399e:	f00d fbeb 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	22da      	movs	r2, #218	; 0xda
 80039b0:	210d      	movs	r1, #13
 80039b2:	4805      	ldr	r0, [pc, #20]	; (80039c8 <showLightsControlPanel+0x18c>)
 80039b4:	f7fe f8b6 	bl	8001b24 <EF_PutString>


}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	080180dc 	.word	0x080180dc
 80039c4:	08014f78 	.word	0x08014f78
 80039c8:	200002fc 	.word	0x200002fc
 80039cc:	08014f88 	.word	0x08014f88
 80039d0:	08014f98 	.word	0x08014f98
 80039d4:	08014fa8 	.word	0x08014fa8
 80039d8:	08014fb8 	.word	0x08014fb8
 80039dc:	08016164 	.word	0x08016164
 80039e0:	08014fc8 	.word	0x08014fc8
 80039e4:	08014fd0 	.word	0x08014fd0
 80039e8:	08014fdc 	.word	0x08014fdc

080039ec <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80039f2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80039f6:	f7fe fa7f 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80039fa:	48a2      	ldr	r0, [pc, #648]	; (8003c84 <showClockSetPanel+0x298>)
 80039fc:	f7fd fe78 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003a00:	f7fe fec8 	bl	8002794 <DS3231_GetHour>
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003a08:	f7fe fed0 	bl	80027ac <DS3231_GetMinute>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003a10:	f7fe feb4 	bl	800277c <DS3231_GetDayOfWeek>
 8003a14:	4603      	mov	r3, r0
 8003a16:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003a18:	499b      	ldr	r1, [pc, #620]	; (8003c88 <showClockSetPanel+0x29c>)
 8003a1a:	489c      	ldr	r0, [pc, #624]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a1c:	f00d fbac 	bl	8011178 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a2e:	220a      	movs	r2, #10
 8003a30:	212f      	movs	r1, #47	; 0x2f
 8003a32:	4896      	ldr	r0, [pc, #600]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a34:	f7fe f876 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2329      	movs	r3, #41	; 0x29
 8003a40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a44:	2129      	movs	r1, #41	; 0x29
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fd fba2 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	232b      	movs	r3, #43	; 0x2b
 8003a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a58:	212b      	movs	r1, #43	; 0x2b
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd fb98 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	461a      	mov	r2, r3
 8003a64:	498a      	ldr	r1, [pc, #552]	; (8003c90 <showClockSetPanel+0x2a4>)
 8003a66:	4889      	ldr	r0, [pc, #548]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a68:	f00d fb86 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	2246      	movs	r2, #70	; 0x46
 8003a7a:	2114      	movs	r1, #20
 8003a7c:	4883      	ldr	r0, [pc, #524]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a7e:	f7fe f851 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4983      	ldr	r1, [pc, #524]	; (8003c94 <showClockSetPanel+0x2a8>)
 8003a88:	4880      	ldr	r0, [pc, #512]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a8a:	f00d fb75 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	2301      	movs	r3, #1
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	226e      	movs	r2, #110	; 0x6e
 8003a9c:	2114      	movs	r1, #20
 8003a9e:	487b      	ldr	r0, [pc, #492]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003aa0:	f7fe f840 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003aa4:	797b      	ldrb	r3, [r7, #5]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	497b      	ldr	r1, [pc, #492]	; (8003c98 <showClockSetPanel+0x2ac>)
 8003aaa:	4878      	ldr	r0, [pc, #480]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003aac:	f00d fb64 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ab0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2296      	movs	r2, #150	; 0x96
 8003abe:	2114      	movs	r1, #20
 8003ac0:	4872      	ldr	r0, [pc, #456]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ac2:	f7fe f82f 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003ac6:	4875      	ldr	r0, [pc, #468]	; (8003c9c <showClockSetPanel+0x2b0>)
 8003ac8:	f7fd fe12 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003acc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2315      	movs	r3, #21
 8003ad8:	221e      	movs	r2, #30
 8003ada:	214b      	movs	r1, #75	; 0x4b
 8003adc:	20f0      	movs	r0, #240	; 0xf0
 8003ade:	f7fd fdb6 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003ae2:	496f      	ldr	r1, [pc, #444]	; (8003ca0 <showClockSetPanel+0x2b4>)
 8003ae4:	4869      	ldr	r0, [pc, #420]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ae6:	f00d fb47 	bl	8011178 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003aea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	224d      	movs	r2, #77	; 0x4d
 8003af8:	21f3      	movs	r1, #243	; 0xf3
 8003afa:	4864      	ldr	r0, [pc, #400]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003afc:	f7fe f812 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b00:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2305      	movs	r3, #5
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2315      	movs	r3, #21
 8003b0c:	221e      	movs	r2, #30
 8003b0e:	214b      	movs	r1, #75	; 0x4b
 8003b10:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b14:	f7fd fd9b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003b18:	4962      	ldr	r1, [pc, #392]	; (8003ca4 <showClockSetPanel+0x2b8>)
 8003b1a:	485c      	ldr	r0, [pc, #368]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b1c:	f00d fb2c 	bl	8011178 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b20:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2300      	movs	r3, #0
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	224d      	movs	r2, #77	; 0x4d
 8003b2e:	f240 111d 	movw	r1, #285	; 0x11d
 8003b32:	4856      	ldr	r0, [pc, #344]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b34:	f7fd fff6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2305      	movs	r3, #5
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2315      	movs	r3, #21
 8003b44:	221e      	movs	r2, #30
 8003b46:	2173      	movs	r1, #115	; 0x73
 8003b48:	20f0      	movs	r0, #240	; 0xf0
 8003b4a:	f7fd fd80 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003b4e:	4954      	ldr	r1, [pc, #336]	; (8003ca0 <showClockSetPanel+0x2b4>)
 8003b50:	484e      	ldr	r0, [pc, #312]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b52:	f00d fb11 	bl	8011178 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	2275      	movs	r2, #117	; 0x75
 8003b64:	21f5      	movs	r1, #245	; 0xf5
 8003b66:	4849      	ldr	r0, [pc, #292]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b68:	f7fd ffdc 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2305      	movs	r3, #5
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2315      	movs	r3, #21
 8003b78:	221e      	movs	r2, #30
 8003b7a:	2173      	movs	r1, #115	; 0x73
 8003b7c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b80:	f7fd fd65 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003b84:	4948      	ldr	r1, [pc, #288]	; (8003ca8 <showClockSetPanel+0x2bc>)
 8003b86:	4841      	ldr	r0, [pc, #260]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b88:	f00d faf6 	bl	8011178 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2300      	movs	r3, #0
 8003b98:	2275      	movs	r2, #117	; 0x75
 8003b9a:	f240 111b 	movw	r1, #283	; 0x11b
 8003b9e:	483b      	ldr	r0, [pc, #236]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ba0:	f7fd ffc0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ba4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2305      	movs	r3, #5
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2315      	movs	r3, #21
 8003bb0:	221e      	movs	r2, #30
 8003bb2:	219b      	movs	r1, #155	; 0x9b
 8003bb4:	20f0      	movs	r0, #240	; 0xf0
 8003bb6:	f7fd fd4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003bba:	493c      	ldr	r1, [pc, #240]	; (8003cac <showClockSetPanel+0x2c0>)
 8003bbc:	4833      	ldr	r0, [pc, #204]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bbe:	f00d fadb 	bl	8011178 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bc2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	229d      	movs	r2, #157	; 0x9d
 8003bd0:	21f3      	movs	r1, #243	; 0xf3
 8003bd2:	482e      	ldr	r0, [pc, #184]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bd4:	f7fd ffa6 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003bd8:	4830      	ldr	r0, [pc, #192]	; (8003c9c <showClockSetPanel+0x2b0>)
 8003bda:	f7fd fd89 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003bde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2305      	movs	r3, #5
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2314      	movs	r3, #20
 8003bea:	225f      	movs	r2, #95	; 0x5f
 8003bec:	21d8      	movs	r1, #216	; 0xd8
 8003bee:	20dc      	movs	r0, #220	; 0xdc
 8003bf0:	f7fd fd2d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003bf4:	492e      	ldr	r1, [pc, #184]	; (8003cb0 <showClockSetPanel+0x2c4>)
 8003bf6:	4825      	ldr	r0, [pc, #148]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bf8:	f00d fabe 	bl	8011178 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003bfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	22da      	movs	r2, #218	; 0xda
 8003c0a:	21e6      	movs	r1, #230	; 0xe6
 8003c0c:	481f      	ldr	r0, [pc, #124]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c0e:	f7fd ff89 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c12:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2305      	movs	r3, #5
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2316      	movs	r3, #22
 8003c1e:	22aa      	movs	r2, #170	; 0xaa
 8003c20:	21be      	movs	r1, #190	; 0xbe
 8003c22:	2050      	movs	r0, #80	; 0x50
 8003c24:	f7fd fd13 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003c28:	4922      	ldr	r1, [pc, #136]	; (8003cb4 <showClockSetPanel+0x2c8>)
 8003c2a:	4818      	ldr	r0, [pc, #96]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c2c:	f00d faa4 	bl	8011178 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2300      	movs	r3, #0
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	22c1      	movs	r2, #193	; 0xc1
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	4812      	ldr	r0, [pc, #72]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c42:	f7fd ff6f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2305      	movs	r3, #5
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2314      	movs	r3, #20
 8003c52:	2264      	movs	r2, #100	; 0x64
 8003c54:	21d8      	movs	r1, #216	; 0xd8
 8003c56:	200a      	movs	r0, #10
 8003c58:	f7fd fcf9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003c5c:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <showClockSetPanel+0x2cc>)
 8003c5e:	480b      	ldr	r0, [pc, #44]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c60:	f00d fa8a 	bl	8011178 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22da      	movs	r2, #218	; 0xda
 8003c72:	210d      	movs	r1, #13
 8003c74:	4805      	ldr	r0, [pc, #20]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c76:	f7fd ff55 	bl	8001b24 <EF_PutString>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	080180dc 	.word	0x080180dc
 8003c88:	08014fe8 	.word	0x08014fe8
 8003c8c:	200002fc 	.word	0x200002fc
 8003c90:	08014ff8 	.word	0x08014ff8
 8003c94:	08015004 	.word	0x08015004
 8003c98:	08015014 	.word	0x08015014
 8003c9c:	08016164 	.word	0x08016164
 8003ca0:	08015024 	.word	0x08015024
 8003ca4:	08015028 	.word	0x08015028
 8003ca8:	0801502c 	.word	0x0801502c
 8003cac:	08015030 	.word	0x08015030
 8003cb0:	08015034 	.word	0x08015034
 8003cb4:	0801503c 	.word	0x0801503c
 8003cb8:	0801504c 	.word	0x0801504c

08003cbc <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cc2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cc6:	f7fe f917 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cca:	487a      	ldr	r0, [pc, #488]	; (8003eb4 <showPreparedActivitiesPanel+0x1f8>)
 8003ccc:	f7fd fd10 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003cd0:	4979      	ldr	r1, [pc, #484]	; (8003eb8 <showPreparedActivitiesPanel+0x1fc>)
 8003cd2:	487a      	ldr	r0, [pc, #488]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003cd4:	f00d fa50 	bl	8011178 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003cd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	220a      	movs	r2, #10
 8003ce6:	212f      	movs	r1, #47	; 0x2f
 8003ce8:	4874      	ldr	r0, [pc, #464]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003cea:	f7fd ff1b 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003cee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2329      	movs	r3, #41	; 0x29
 8003cf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cfa:	2129      	movs	r1, #41	; 0x29
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7fd fa47 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	232b      	movs	r3, #43	; 0x2b
 8003d0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d0e:	212b      	movs	r1, #43	; 0x2b
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fd fa3d 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003d16:	486a      	ldr	r0, [pc, #424]	; (8003ec0 <showPreparedActivitiesPanel+0x204>)
 8003d18:	f7fd fcea 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2305      	movs	r3, #5
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2314      	movs	r3, #20
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	21d8      	movs	r1, #216	; 0xd8
 8003d2c:	200a      	movs	r0, #10
 8003d2e:	f7fd fc8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d32:	4964      	ldr	r1, [pc, #400]	; (8003ec4 <showPreparedActivitiesPanel+0x208>)
 8003d34:	4861      	ldr	r0, [pc, #388]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d36:	f00d fa1f 	bl	8011178 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	22da      	movs	r2, #218	; 0xda
 8003d48:	210d      	movs	r1, #13
 8003d4a:	485c      	ldr	r0, [pc, #368]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d4c:	f7fd feea 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003d50:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <showPreparedActivitiesPanel+0x20c>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d029      	beq.n	8003dac <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	230a      	movs	r3, #10
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2328      	movs	r3, #40	; 0x28
 8003d64:	2278      	movs	r2, #120	; 0x78
 8003d66:	213c      	movs	r1, #60	; 0x3c
 8003d68:	2064      	movs	r0, #100	; 0x64
 8003d6a:	f7fd fc70 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003d6e:	4957      	ldr	r1, [pc, #348]	; (8003ecc <showPreparedActivitiesPanel+0x210>)
 8003d70:	4852      	ldr	r0, [pc, #328]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d72:	f00d fa01 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	223e      	movs	r2, #62	; 0x3e
 8003d84:	2177      	movs	r1, #119	; 0x77
 8003d86:	484d      	ldr	r0, [pc, #308]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d88:	f7fd fecc 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003d8c:	4950      	ldr	r1, [pc, #320]	; (8003ed0 <showPreparedActivitiesPanel+0x214>)
 8003d8e:	484b      	ldr	r0, [pc, #300]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d90:	f00d f9f2 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2250      	movs	r2, #80	; 0x50
 8003da2:	2193      	movs	r1, #147	; 0x93
 8003da4:	4845      	ldr	r0, [pc, #276]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003da6:	f7fd febd 	bl	8001b24 <EF_PutString>
 8003daa:	e028      	b.n	8003dfe <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003dac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	230a      	movs	r3, #10
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2328      	movs	r3, #40	; 0x28
 8003db8:	2278      	movs	r2, #120	; 0x78
 8003dba:	213c      	movs	r1, #60	; 0x3c
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	f7fd fc46 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003dc2:	4942      	ldr	r1, [pc, #264]	; (8003ecc <showPreparedActivitiesPanel+0x210>)
 8003dc4:	483d      	ldr	r0, [pc, #244]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003dc6:	f00d f9d7 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	223e      	movs	r2, #62	; 0x3e
 8003dd8:	2177      	movs	r1, #119	; 0x77
 8003dda:	4838      	ldr	r0, [pc, #224]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003ddc:	f7fd fea2 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003de0:	493c      	ldr	r1, [pc, #240]	; (8003ed4 <showPreparedActivitiesPanel+0x218>)
 8003de2:	4836      	ldr	r0, [pc, #216]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003de4:	f00d f9c8 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003de8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	2250      	movs	r2, #80	; 0x50
 8003df6:	2193      	movs	r1, #147	; 0x93
 8003df8:	4830      	ldr	r0, [pc, #192]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003dfa:	f7fd fe93 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <showPreparedActivitiesPanel+0x20c>)
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d029      	beq.n	8003e5a <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2328      	movs	r3, #40	; 0x28
 8003e12:	2278      	movs	r2, #120	; 0x78
 8003e14:	2178      	movs	r1, #120	; 0x78
 8003e16:	2064      	movs	r0, #100	; 0x64
 8003e18:	f7fd fc19 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e1c:	492e      	ldr	r1, [pc, #184]	; (8003ed8 <showPreparedActivitiesPanel+0x21c>)
 8003e1e:	4827      	ldr	r0, [pc, #156]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e20:	f00d f9aa 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	227a      	movs	r2, #122	; 0x7a
 8003e32:	2169      	movs	r1, #105	; 0x69
 8003e34:	4821      	ldr	r0, [pc, #132]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e36:	f7fd fe75 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <showPreparedActivitiesPanel+0x214>)
 8003e3c:	481f      	ldr	r0, [pc, #124]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e3e:	f00d f99b 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	228c      	movs	r2, #140	; 0x8c
 8003e50:	2193      	movs	r1, #147	; 0x93
 8003e52:	481a      	ldr	r0, [pc, #104]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e54:	f7fd fe66 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003e58:	e028      	b.n	8003eac <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	230a      	movs	r3, #10
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2328      	movs	r3, #40	; 0x28
 8003e66:	2278      	movs	r2, #120	; 0x78
 8003e68:	2178      	movs	r1, #120	; 0x78
 8003e6a:	2064      	movs	r0, #100	; 0x64
 8003e6c:	f7fd fbef 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e70:	4919      	ldr	r1, [pc, #100]	; (8003ed8 <showPreparedActivitiesPanel+0x21c>)
 8003e72:	4812      	ldr	r0, [pc, #72]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e74:	f00d f980 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	227a      	movs	r2, #122	; 0x7a
 8003e86:	2169      	movs	r1, #105	; 0x69
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e8a:	f7fd fe4b 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003e8e:	4911      	ldr	r1, [pc, #68]	; (8003ed4 <showPreparedActivitiesPanel+0x218>)
 8003e90:	480a      	ldr	r0, [pc, #40]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e92:	f00d f971 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	228c      	movs	r2, #140	; 0x8c
 8003ea4:	2193      	movs	r1, #147	; 0x93
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003ea8:	f7fd fe3c 	bl	8001b24 <EF_PutString>
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	080180dc 	.word	0x080180dc
 8003eb8:	08015054 	.word	0x08015054
 8003ebc:	200002fc 	.word	0x200002fc
 8003ec0:	08016164 	.word	0x08016164
 8003ec4:	0801504c 	.word	0x0801504c
 8003ec8:	200002b0 	.word	0x200002b0
 8003ecc:	08015064 	.word	0x08015064
 8003ed0:	08015070 	.word	0x08015070
 8003ed4:	08015074 	.word	0x08015074
 8003ed8:	08015078 	.word	0x08015078

08003edc <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ee2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003ee6:	f7fe f807 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003eea:	48c7      	ldr	r0, [pc, #796]	; (8004208 <showWSLedPanel+0x32c>)
 8003eec:	f7fd fc00 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003ef0:	49c6      	ldr	r1, [pc, #792]	; (800420c <showWSLedPanel+0x330>)
 8003ef2:	48c7      	ldr	r0, [pc, #796]	; (8004210 <showWSLedPanel+0x334>)
 8003ef4:	f00d f940 	bl	8011178 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ef8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	231f      	movs	r3, #31
 8003f04:	220a      	movs	r2, #10
 8003f06:	2146      	movs	r1, #70	; 0x46
 8003f08:	48c1      	ldr	r0, [pc, #772]	; (8004210 <showWSLedPanel+0x334>)
 8003f0a:	f7fd fe0b 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003f0e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2329      	movs	r3, #41	; 0x29
 8003f16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f1a:	2129      	movs	r1, #41	; 0x29
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fd f937 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003f22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	232b      	movs	r3, #43	; 0x2b
 8003f2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f2e:	212b      	movs	r1, #43	; 0x2b
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fd f92d 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003f36:	4bb7      	ldr	r3, [pc, #732]	; (8004214 <showWSLedPanel+0x338>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	49b6      	ldr	r1, [pc, #728]	; (8004218 <showWSLedPanel+0x33c>)
 8003f3e:	48b4      	ldr	r0, [pc, #720]	; (8004210 <showWSLedPanel+0x334>)
 8003f40:	f00d f91a 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	223c      	movs	r2, #60	; 0x3c
 8003f52:	2114      	movs	r1, #20
 8003f54:	48ae      	ldr	r0, [pc, #696]	; (8004210 <showWSLedPanel+0x334>)
 8003f56:	f7fd fde5 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003f5a:	49b0      	ldr	r1, [pc, #704]	; (800421c <showWSLedPanel+0x340>)
 8003f5c:	48ac      	ldr	r0, [pc, #688]	; (8004210 <showWSLedPanel+0x334>)
 8003f5e:	f00d f90b 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f62:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	225a      	movs	r2, #90	; 0x5a
 8003f70:	2114      	movs	r1, #20
 8003f72:	48a7      	ldr	r0, [pc, #668]	; (8004210 <showWSLedPanel+0x334>)
 8003f74:	f7fd fdd6 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003f78:	49a9      	ldr	r1, [pc, #676]	; (8004220 <showWSLedPanel+0x344>)
 8003f7a:	48a5      	ldr	r0, [pc, #660]	; (8004210 <showWSLedPanel+0x334>)
 8003f7c:	f00d f8fc 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2278      	movs	r2, #120	; 0x78
 8003f8e:	2114      	movs	r1, #20
 8003f90:	489f      	ldr	r0, [pc, #636]	; (8004210 <showWSLedPanel+0x334>)
 8003f92:	f7fd fdc7 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003f96:	48a3      	ldr	r0, [pc, #652]	; (8004224 <showWSLedPanel+0x348>)
 8003f98:	f7fd fbaa 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2315      	movs	r3, #21
 8003fa8:	221e      	movs	r2, #30
 8003faa:	2141      	movs	r1, #65	; 0x41
 8003fac:	20d9      	movs	r0, #217	; 0xd9
 8003fae:	f7fd fb4e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003fb2:	499d      	ldr	r1, [pc, #628]	; (8004228 <showWSLedPanel+0x34c>)
 8003fb4:	4896      	ldr	r0, [pc, #600]	; (8004210 <showWSLedPanel+0x334>)
 8003fb6:	f00d f8df 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2243      	movs	r2, #67	; 0x43
 8003fc8:	21df      	movs	r1, #223	; 0xdf
 8003fca:	4891      	ldr	r0, [pc, #580]	; (8004210 <showWSLedPanel+0x334>)
 8003fcc:	f7fd fdaa 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003fd0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2315      	movs	r3, #21
 8003fdc:	221e      	movs	r2, #30
 8003fde:	2141      	movs	r1, #65	; 0x41
 8003fe0:	20fc      	movs	r0, #252	; 0xfc
 8003fe2:	f7fd fb34 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003fe6:	4991      	ldr	r1, [pc, #580]	; (800422c <showWSLedPanel+0x350>)
 8003fe8:	4889      	ldr	r0, [pc, #548]	; (8004210 <showWSLedPanel+0x334>)
 8003fea:	f00d f8c5 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2243      	movs	r2, #67	; 0x43
 8003ffc:	f240 1101 	movw	r1, #257	; 0x101
 8004000:	4883      	ldr	r0, [pc, #524]	; (8004210 <showWSLedPanel+0x334>)
 8004002:	f7fd fd8f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004006:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	2305      	movs	r3, #5
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2315      	movs	r3, #21
 8004012:	221e      	movs	r2, #30
 8004014:	2141      	movs	r1, #65	; 0x41
 8004016:	f240 101f 	movw	r0, #287	; 0x11f
 800401a:	f7fd fb18 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 800401e:	4984      	ldr	r1, [pc, #528]	; (8004230 <showWSLedPanel+0x354>)
 8004020:	487b      	ldr	r0, [pc, #492]	; (8004210 <showWSLedPanel+0x334>)
 8004022:	f00d f8a9 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004026:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	2243      	movs	r2, #67	; 0x43
 8004034:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004038:	4875      	ldr	r0, [pc, #468]	; (8004210 <showWSLedPanel+0x334>)
 800403a:	f7fd fd73 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800403e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2305      	movs	r3, #5
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2315      	movs	r3, #21
 800404a:	2228      	movs	r2, #40	; 0x28
 800404c:	215f      	movs	r1, #95	; 0x5f
 800404e:	2096      	movs	r0, #150	; 0x96
 8004050:	f7fd fafd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004054:	4977      	ldr	r1, [pc, #476]	; (8004234 <showWSLedPanel+0x358>)
 8004056:	486e      	ldr	r0, [pc, #440]	; (8004210 <showWSLedPanel+0x334>)
 8004058:	f00d f88e 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800405c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	2300      	movs	r3, #0
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	2261      	movs	r2, #97	; 0x61
 800406a:	219b      	movs	r1, #155	; 0x9b
 800406c:	4868      	ldr	r0, [pc, #416]	; (8004210 <showWSLedPanel+0x334>)
 800406e:	f7fd fd59 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	2305      	movs	r3, #5
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2315      	movs	r3, #21
 800407e:	2228      	movs	r2, #40	; 0x28
 8004080:	215f      	movs	r1, #95	; 0x5f
 8004082:	20ca      	movs	r0, #202	; 0xca
 8004084:	f7fd fae3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004088:	496b      	ldr	r1, [pc, #428]	; (8004238 <showWSLedPanel+0x35c>)
 800408a:	4861      	ldr	r0, [pc, #388]	; (8004210 <showWSLedPanel+0x334>)
 800408c:	f00d f874 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2300      	movs	r3, #0
 800409c:	2261      	movs	r2, #97	; 0x61
 800409e:	21d2      	movs	r1, #210	; 0xd2
 80040a0:	485b      	ldr	r0, [pc, #364]	; (8004210 <showWSLedPanel+0x334>)
 80040a2:	f7fd fd3f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80040a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	2305      	movs	r3, #5
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2315      	movs	r3, #21
 80040b2:	2228      	movs	r2, #40	; 0x28
 80040b4:	215f      	movs	r1, #95	; 0x5f
 80040b6:	20fe      	movs	r0, #254	; 0xfe
 80040b8:	f7fd fac9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80040bc:	495f      	ldr	r1, [pc, #380]	; (800423c <showWSLedPanel+0x360>)
 80040be:	4854      	ldr	r0, [pc, #336]	; (8004210 <showWSLedPanel+0x334>)
 80040c0:	f00d f85a 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80040c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	2300      	movs	r3, #0
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	2261      	movs	r2, #97	; 0x61
 80040d2:	f44f 7183 	mov.w	r1, #262	; 0x106
 80040d6:	484e      	ldr	r0, [pc, #312]	; (8004210 <showWSLedPanel+0x334>)
 80040d8:	f7fd fd24 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80040dc:	231f      	movs	r3, #31
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	2305      	movs	r3, #5
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2315      	movs	r3, #21
 80040e6:	2228      	movs	r2, #40	; 0x28
 80040e8:	217d      	movs	r1, #125	; 0x7d
 80040ea:	2096      	movs	r0, #150	; 0x96
 80040ec:	f7fd faaf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80040f0:	4950      	ldr	r1, [pc, #320]	; (8004234 <showWSLedPanel+0x358>)
 80040f2:	4847      	ldr	r0, [pc, #284]	; (8004210 <showWSLedPanel+0x334>)
 80040f4:	f00d f840 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80040f8:	231f      	movs	r3, #31
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	227f      	movs	r2, #127	; 0x7f
 8004104:	219b      	movs	r1, #155	; 0x9b
 8004106:	4842      	ldr	r0, [pc, #264]	; (8004210 <showWSLedPanel+0x334>)
 8004108:	f7fd fd0c 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800410c:	231f      	movs	r3, #31
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	2305      	movs	r3, #5
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2315      	movs	r3, #21
 8004116:	2228      	movs	r2, #40	; 0x28
 8004118:	217d      	movs	r1, #125	; 0x7d
 800411a:	20ca      	movs	r0, #202	; 0xca
 800411c:	f7fd fa97 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004120:	4945      	ldr	r1, [pc, #276]	; (8004238 <showWSLedPanel+0x35c>)
 8004122:	483b      	ldr	r0, [pc, #236]	; (8004210 <showWSLedPanel+0x334>)
 8004124:	f00d f828 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004128:	231f      	movs	r3, #31
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2300      	movs	r3, #0
 8004132:	227f      	movs	r2, #127	; 0x7f
 8004134:	21d2      	movs	r1, #210	; 0xd2
 8004136:	4836      	ldr	r0, [pc, #216]	; (8004210 <showWSLedPanel+0x334>)
 8004138:	f7fd fcf4 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800413c:	231f      	movs	r3, #31
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2305      	movs	r3, #5
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2315      	movs	r3, #21
 8004146:	2228      	movs	r2, #40	; 0x28
 8004148:	217d      	movs	r1, #125	; 0x7d
 800414a:	20fe      	movs	r0, #254	; 0xfe
 800414c:	f7fd fa7f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004150:	493a      	ldr	r1, [pc, #232]	; (800423c <showWSLedPanel+0x360>)
 8004152:	482f      	ldr	r0, [pc, #188]	; (8004210 <showWSLedPanel+0x334>)
 8004154:	f00d f810 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004158:	231f      	movs	r3, #31
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	227f      	movs	r2, #127	; 0x7f
 8004164:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004168:	4829      	ldr	r0, [pc, #164]	; (8004210 <showWSLedPanel+0x334>)
 800416a:	f7fd fcdb 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 800416e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	2305      	movs	r3, #5
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2315      	movs	r3, #21
 800417a:	2250      	movs	r2, #80	; 0x50
 800417c:	219c      	movs	r1, #156	; 0x9c
 800417e:	2014      	movs	r0, #20
 8004180:	f7fd fa65 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004184:	492e      	ldr	r1, [pc, #184]	; (8004240 <showWSLedPanel+0x364>)
 8004186:	4822      	ldr	r0, [pc, #136]	; (8004210 <showWSLedPanel+0x334>)
 8004188:	f00c fff6 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 800418c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	229e      	movs	r2, #158	; 0x9e
 800419a:	211c      	movs	r1, #28
 800419c:	481c      	ldr	r0, [pc, #112]	; (8004210 <showWSLedPanel+0x334>)
 800419e:	f7fd fcc1 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80041a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2305      	movs	r3, #5
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2315      	movs	r3, #21
 80041ae:	2250      	movs	r2, #80	; 0x50
 80041b0:	219c      	movs	r1, #156	; 0x9c
 80041b2:	2078      	movs	r0, #120	; 0x78
 80041b4:	f7fd fa4b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80041b8:	4922      	ldr	r1, [pc, #136]	; (8004244 <showWSLedPanel+0x368>)
 80041ba:	4815      	ldr	r0, [pc, #84]	; (8004210 <showWSLedPanel+0x334>)
 80041bc:	f00c ffdc 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	229e      	movs	r2, #158	; 0x9e
 80041ce:	2187      	movs	r1, #135	; 0x87
 80041d0:	480f      	ldr	r0, [pc, #60]	; (8004210 <showWSLedPanel+0x334>)
 80041d2:	f7fd fca7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80041d6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2305      	movs	r3, #5
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2315      	movs	r3, #21
 80041e2:	2250      	movs	r2, #80	; 0x50
 80041e4:	219c      	movs	r1, #156	; 0x9c
 80041e6:	20dc      	movs	r0, #220	; 0xdc
 80041e8:	f7fd fa31 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <showWSLedPanel+0x36c>)
 80041ee:	4808      	ldr	r0, [pc, #32]	; (8004210 <showWSLedPanel+0x334>)
 80041f0:	f00c ffc2 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80041f4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2300      	movs	r3, #0
 8004200:	229e      	movs	r2, #158	; 0x9e
 8004202:	21e9      	movs	r1, #233	; 0xe9
 8004204:	e022      	b.n	800424c <showWSLedPanel+0x370>
 8004206:	bf00      	nop
 8004208:	080180dc 	.word	0x080180dc
 800420c:	08015084 	.word	0x08015084
 8004210:	200002fc 	.word	0x200002fc
 8004214:	20000033 	.word	0x20000033
 8004218:	08015090 	.word	0x08015090
 800421c:	080150a0 	.word	0x080150a0
 8004220:	080150a8 	.word	0x080150a8
 8004224:	08016164 	.word	0x08016164
 8004228:	08015024 	.word	0x08015024
 800422c:	0801502c 	.word	0x0801502c
 8004230:	080150b0 	.word	0x080150b0
 8004234:	080150b4 	.word	0x080150b4
 8004238:	080150b8 	.word	0x080150b8
 800423c:	080150bc 	.word	0x080150bc
 8004240:	080150c0 	.word	0x080150c0
 8004244:	08015074 	.word	0x08015074
 8004248:	080150c8 	.word	0x080150c8
 800424c:	482b      	ldr	r0, [pc, #172]	; (80042fc <showWSLedPanel+0x420>)
 800424e:	f7fd fc69 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004252:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2305      	movs	r3, #5
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2315      	movs	r3, #21
 800425e:	2250      	movs	r2, #80	; 0x50
 8004260:	21bb      	movs	r1, #187	; 0xbb
 8004262:	2046      	movs	r0, #70	; 0x46
 8004264:	f7fd f9f3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004268:	4925      	ldr	r1, [pc, #148]	; (8004300 <showWSLedPanel+0x424>)
 800426a:	4824      	ldr	r0, [pc, #144]	; (80042fc <showWSLedPanel+0x420>)
 800426c:	f00c ff84 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004270:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	22bd      	movs	r2, #189	; 0xbd
 800427e:	214e      	movs	r1, #78	; 0x4e
 8004280:	481e      	ldr	r0, [pc, #120]	; (80042fc <showWSLedPanel+0x420>)
 8004282:	f7fd fc4f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004286:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2305      	movs	r3, #5
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2315      	movs	r3, #21
 8004292:	2250      	movs	r2, #80	; 0x50
 8004294:	21bb      	movs	r1, #187	; 0xbb
 8004296:	20aa      	movs	r0, #170	; 0xaa
 8004298:	f7fd f9d9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 800429c:	4919      	ldr	r1, [pc, #100]	; (8004304 <showWSLedPanel+0x428>)
 800429e:	4817      	ldr	r0, [pc, #92]	; (80042fc <showWSLedPanel+0x420>)
 80042a0:	f00c ff6a 	bl	8011178 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80042a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	22bd      	movs	r2, #189	; 0xbd
 80042b2:	21b5      	movs	r1, #181	; 0xb5
 80042b4:	4811      	ldr	r0, [pc, #68]	; (80042fc <showWSLedPanel+0x420>)
 80042b6:	f7fd fc35 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80042ba:	4813      	ldr	r0, [pc, #76]	; (8004308 <showWSLedPanel+0x42c>)
 80042bc:	f7fd fa18 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80042c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	2305      	movs	r3, #5
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	2314      	movs	r3, #20
 80042cc:	2264      	movs	r2, #100	; 0x64
 80042ce:	21d8      	movs	r1, #216	; 0xd8
 80042d0:	200a      	movs	r0, #10
 80042d2:	f7fd f9bc 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <showWSLedPanel+0x430>)
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <showWSLedPanel+0x420>)
 80042da:	f00c ff4d 	bl	8011178 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80042de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	22da      	movs	r2, #218	; 0xda
 80042ec:	210d      	movs	r1, #13
 80042ee:	4803      	ldr	r0, [pc, #12]	; (80042fc <showWSLedPanel+0x420>)
 80042f0:	f7fd fc18 	bl	8001b24 <EF_PutString>


}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200002fc 	.word	0x200002fc
 8004300:	080150d0 	.word	0x080150d0
 8004304:	080150d8 	.word	0x080150d8
 8004308:	08016164 	.word	0x08016164
 800430c:	0801504c 	.word	0x0801504c

08004310 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af02      	add	r7, sp, #8
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800434a:	2300      	movs	r3, #0
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004352:	2100      	movs	r1, #0
 8004354:	460a      	mov	r2, r1
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	460a      	mov	r2, r1
 800435a:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	f107 0320 	add.w	r3, r7, #32
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	f107 0318 	add.w	r3, r7, #24
 8004372:	2100      	movs	r1, #0
 8004374:	460a      	mov	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	460a      	mov	r2, r1
 800437a:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800438a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	2305      	movs	r3, #5
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2314      	movs	r3, #20
 8004396:	2214      	movs	r2, #20
 8004398:	2132      	movs	r1, #50	; 0x32
 800439a:	203c      	movs	r0, #60	; 0x3c
 800439c:	f7fd f8da 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	2305      	movs	r3, #5
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2314      	movs	r3, #20
 80043ac:	2214      	movs	r2, #20
 80043ae:	2132      	movs	r1, #50	; 0x32
 80043b0:	205a      	movs	r0, #90	; 0x5a
 80043b2:	f7fd f8cf 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	2305      	movs	r3, #5
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2314      	movs	r3, #20
 80043c2:	2214      	movs	r2, #20
 80043c4:	2132      	movs	r1, #50	; 0x32
 80043c6:	2078      	movs	r0, #120	; 0x78
 80043c8:	f7fd f8c4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	2305      	movs	r3, #5
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2314      	movs	r3, #20
 80043d8:	2214      	movs	r2, #20
 80043da:	2132      	movs	r1, #50	; 0x32
 80043dc:	2096      	movs	r0, #150	; 0x96
 80043de:	f7fd f8b9 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2305      	movs	r3, #5
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2314      	movs	r3, #20
 80043ee:	2214      	movs	r2, #20
 80043f0:	2132      	movs	r1, #50	; 0x32
 80043f2:	20b4      	movs	r0, #180	; 0xb4
 80043f4:	f7fd f8ae 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2305      	movs	r3, #5
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2314      	movs	r3, #20
 8004404:	2214      	movs	r2, #20
 8004406:	2132      	movs	r1, #50	; 0x32
 8004408:	20d2      	movs	r0, #210	; 0xd2
 800440a:	f7fd f8a3 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800440e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2305      	movs	r3, #5
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2314      	movs	r3, #20
 800441a:	2214      	movs	r2, #20
 800441c:	2132      	movs	r1, #50	; 0x32
 800441e:	20f0      	movs	r0, #240	; 0xf0
 8004420:	f7fd f898 	bl	8001554 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 feda 	bl	80051e0 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 ff43 	bl	80052ba <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004434:	48cc      	ldr	r0, [pc, #816]	; (8004768 <drawschedulePanel+0x458>)
 8004436:	f7fd f95b 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800443a:	49cc      	ldr	r1, [pc, #816]	; (800476c <drawschedulePanel+0x45c>)
 800443c:	48cc      	ldr	r0, [pc, #816]	; (8004770 <drawschedulePanel+0x460>)
 800443e:	f00c fe9b 	bl	8011178 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004442:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	2301      	movs	r3, #1
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	224b      	movs	r2, #75	; 0x4b
 8004450:	213c      	movs	r1, #60	; 0x3c
 8004452:	48c7      	ldr	r0, [pc, #796]	; (8004770 <drawschedulePanel+0x460>)
 8004454:	f7fd fb66 	bl	8001b24 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004458:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	2305      	movs	r3, #5
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2314      	movs	r3, #20
 8004464:	2214      	movs	r2, #20
 8004466:	21aa      	movs	r1, #170	; 0xaa
 8004468:	2015      	movs	r0, #21
 800446a:	f7fd f873 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800446e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2305      	movs	r3, #5
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2314      	movs	r3, #20
 800447a:	2214      	movs	r2, #20
 800447c:	21aa      	movs	r1, #170	; 0xaa
 800447e:	2035      	movs	r0, #53	; 0x35
 8004480:	f7fd f868 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2305      	movs	r3, #5
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2314      	movs	r3, #20
 8004490:	2214      	movs	r2, #20
 8004492:	21aa      	movs	r1, #170	; 0xaa
 8004494:	2055      	movs	r0, #85	; 0x55
 8004496:	f7fd f85d 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800449a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2314      	movs	r3, #20
 80044a6:	2214      	movs	r2, #20
 80044a8:	21aa      	movs	r1, #170	; 0xaa
 80044aa:	2075      	movs	r0, #117	; 0x75
 80044ac:	f7fd f852 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2305      	movs	r3, #5
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2314      	movs	r3, #20
 80044bc:	2214      	movs	r2, #20
 80044be:	21aa      	movs	r1, #170	; 0xaa
 80044c0:	2095      	movs	r0, #149	; 0x95
 80044c2:	f7fd f847 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2305      	movs	r3, #5
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2314      	movs	r3, #20
 80044d2:	2214      	movs	r2, #20
 80044d4:	21aa      	movs	r1, #170	; 0xaa
 80044d6:	20b5      	movs	r0, #181	; 0xb5
 80044d8:	f7fd f83c 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2305      	movs	r3, #5
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2314      	movs	r3, #20
 80044e8:	2214      	movs	r2, #20
 80044ea:	21aa      	movs	r1, #170	; 0xaa
 80044ec:	20d5      	movs	r0, #213	; 0xd5
 80044ee:	f7fd f831 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2305      	movs	r3, #5
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2314      	movs	r3, #20
 80044fe:	2214      	movs	r2, #20
 8004500:	21aa      	movs	r1, #170	; 0xaa
 8004502:	20f5      	movs	r0, #245	; 0xf5
 8004504:	f7fd f826 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2305      	movs	r3, #5
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2314      	movs	r3, #20
 8004514:	2214      	movs	r2, #20
 8004516:	21aa      	movs	r1, #170	; 0xaa
 8004518:	f240 1015 	movw	r0, #277	; 0x115
 800451c:	f7fd f81a 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004520:	4994      	ldr	r1, [pc, #592]	; (8004774 <drawschedulePanel+0x464>)
 8004522:	4893      	ldr	r0, [pc, #588]	; (8004770 <drawschedulePanel+0x460>)
 8004524:	f00c fe28 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004528:	f24c 6318 	movw	r3, #50712	; 0xc618
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	2301      	movs	r3, #1
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	22c3      	movs	r2, #195	; 0xc3
 8004536:	2115      	movs	r1, #21
 8004538:	488d      	ldr	r0, [pc, #564]	; (8004770 <drawschedulePanel+0x460>)
 800453a:	f7fd faf3 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800453e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2305      	movs	r3, #5
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2314      	movs	r3, #20
 800454a:	2222      	movs	r2, #34	; 0x22
 800454c:	2165      	movs	r1, #101	; 0x65
 800454e:	20bb      	movs	r0, #187	; 0xbb
 8004550:	f7fd f87d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004554:	4988      	ldr	r1, [pc, #544]	; (8004778 <drawschedulePanel+0x468>)
 8004556:	4886      	ldr	r0, [pc, #536]	; (8004770 <drawschedulePanel+0x460>)
 8004558:	f00c fe0e 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800455c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	2268      	movs	r2, #104	; 0x68
 800456a:	21c1      	movs	r1, #193	; 0xc1
 800456c:	4880      	ldr	r0, [pc, #512]	; (8004770 <drawschedulePanel+0x460>)
 800456e:	f7fd fad9 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004572:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	2305      	movs	r3, #5
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2314      	movs	r3, #20
 800457e:	2222      	movs	r2, #34	; 0x22
 8004580:	2165      	movs	r1, #101	; 0x65
 8004582:	20e9      	movs	r0, #233	; 0xe9
 8004584:	f7fd f863 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004588:	497c      	ldr	r1, [pc, #496]	; (800477c <drawschedulePanel+0x46c>)
 800458a:	4879      	ldr	r0, [pc, #484]	; (8004770 <drawschedulePanel+0x460>)
 800458c:	f00c fdf4 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004590:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2300      	movs	r3, #0
 800459c:	2268      	movs	r2, #104	; 0x68
 800459e:	21ec      	movs	r1, #236	; 0xec
 80045a0:	4873      	ldr	r0, [pc, #460]	; (8004770 <drawschedulePanel+0x460>)
 80045a2:	f7fd fabf 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	2305      	movs	r3, #5
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2314      	movs	r3, #20
 80045b2:	2222      	movs	r2, #34	; 0x22
 80045b4:	2165      	movs	r1, #101	; 0x65
 80045b6:	f240 1017 	movw	r0, #279	; 0x117
 80045ba:	f7fd f848 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80045be:	4970      	ldr	r1, [pc, #448]	; (8004780 <drawschedulePanel+0x470>)
 80045c0:	486b      	ldr	r0, [pc, #428]	; (8004770 <drawschedulePanel+0x460>)
 80045c2:	f00c fdd9 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	2300      	movs	r3, #0
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	2268      	movs	r2, #104	; 0x68
 80045d4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80045d8:	4865      	ldr	r0, [pc, #404]	; (8004770 <drawschedulePanel+0x460>)
 80045da:	f7fd faa3 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2305      	movs	r3, #5
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2314      	movs	r3, #20
 80045ea:	2222      	movs	r2, #34	; 0x22
 80045ec:	2188      	movs	r1, #136	; 0x88
 80045ee:	20bb      	movs	r0, #187	; 0xbb
 80045f0:	f7fd f82d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80045f4:	4960      	ldr	r1, [pc, #384]	; (8004778 <drawschedulePanel+0x468>)
 80045f6:	485e      	ldr	r0, [pc, #376]	; (8004770 <drawschedulePanel+0x460>)
 80045f8:	f00c fdbe 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	228b      	movs	r2, #139	; 0x8b
 800460a:	21c1      	movs	r1, #193	; 0xc1
 800460c:	4858      	ldr	r0, [pc, #352]	; (8004770 <drawschedulePanel+0x460>)
 800460e:	f7fd fa89 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004612:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	2305      	movs	r3, #5
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2314      	movs	r3, #20
 800461e:	2222      	movs	r2, #34	; 0x22
 8004620:	2188      	movs	r1, #136	; 0x88
 8004622:	20e9      	movs	r0, #233	; 0xe9
 8004624:	f7fd f813 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004628:	4954      	ldr	r1, [pc, #336]	; (800477c <drawschedulePanel+0x46c>)
 800462a:	4851      	ldr	r0, [pc, #324]	; (8004770 <drawschedulePanel+0x460>)
 800462c:	f00c fda4 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004630:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	228b      	movs	r2, #139	; 0x8b
 800463e:	21ec      	movs	r1, #236	; 0xec
 8004640:	484b      	ldr	r0, [pc, #300]	; (8004770 <drawschedulePanel+0x460>)
 8004642:	f7fd fa6f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004646:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2305      	movs	r3, #5
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2314      	movs	r3, #20
 8004652:	2222      	movs	r2, #34	; 0x22
 8004654:	2188      	movs	r1, #136	; 0x88
 8004656:	f240 1017 	movw	r0, #279	; 0x117
 800465a:	f7fc fff8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 800465e:	4948      	ldr	r1, [pc, #288]	; (8004780 <drawschedulePanel+0x470>)
 8004660:	4843      	ldr	r0, [pc, #268]	; (8004770 <drawschedulePanel+0x460>)
 8004662:	f00c fd89 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004666:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	228b      	movs	r2, #139	; 0x8b
 8004674:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004678:	483d      	ldr	r0, [pc, #244]	; (8004770 <drawschedulePanel+0x460>)
 800467a:	f7fd fa53 	bl	8001b24 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 800467e:	4841      	ldr	r0, [pc, #260]	; (8004784 <drawschedulePanel+0x474>)
 8004680:	f7fd f836 	bl	80016f0 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 80db 	bne.w	8004842 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 800468c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004690:	4619      	mov	r1, r3
 8004692:	2001      	movs	r0, #1
 8004694:	f7fe fc13 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004698:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800469c:	4619      	mov	r1, r3
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fe fc31 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 80046a4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80046a8:	4619      	mov	r1, r3
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fe fc4f 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80046b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046b4:	4619      	mov	r1, r3
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fe fc6d 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80046bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c0:	4619      	mov	r1, r3
 80046c2:	2001      	movs	r0, #1
 80046c4:	f7fe faaa 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80046c8:	f107 031c 	add.w	r3, r7, #28
 80046cc:	4619      	mov	r1, r3
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7fe fb20 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80046d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046d8:	2b17      	cmp	r3, #23
 80046da:	d902      	bls.n	80046e2 <drawschedulePanel+0x3d2>
 80046dc:	2317      	movs	r3, #23
 80046de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80046e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046e6:	2b3b      	cmp	r3, #59	; 0x3b
 80046e8:	d902      	bls.n	80046f0 <drawschedulePanel+0x3e0>
 80046ea:	233b      	movs	r3, #59	; 0x3b
 80046ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80046f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046f4:	2b17      	cmp	r3, #23
 80046f6:	d902      	bls.n	80046fe <drawschedulePanel+0x3ee>
 80046f8:	2317      	movs	r3, #23
 80046fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80046fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004702:	2b3b      	cmp	r3, #59	; 0x3b
 8004704:	d902      	bls.n	800470c <drawschedulePanel+0x3fc>
 8004706:	233b      	movs	r3, #59	; 0x3b
 8004708:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 800470c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004710:	2b09      	cmp	r3, #9
 8004712:	d80d      	bhi.n	8004730 <drawschedulePanel+0x420>
 8004714:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004718:	2b09      	cmp	r3, #9
 800471a:	d809      	bhi.n	8004730 <drawschedulePanel+0x420>
 800471c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004720:	461a      	mov	r2, r3
 8004722:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004726:	4918      	ldr	r1, [pc, #96]	; (8004788 <drawschedulePanel+0x478>)
 8004728:	4811      	ldr	r0, [pc, #68]	; (8004770 <drawschedulePanel+0x460>)
 800472a:	f00c fd25 	bl	8011178 <siprintf>
 800472e:	e03a      	b.n	80047a6 <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004734:	2b09      	cmp	r3, #9
 8004736:	d809      	bhi.n	800474c <drawschedulePanel+0x43c>
 8004738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800473c:	461a      	mov	r2, r3
 800473e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004742:	4912      	ldr	r1, [pc, #72]	; (800478c <drawschedulePanel+0x47c>)
 8004744:	480a      	ldr	r0, [pc, #40]	; (8004770 <drawschedulePanel+0x460>)
 8004746:	f00c fd17 	bl	8011178 <siprintf>
 800474a:	e02c      	b.n	80047a6 <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 800474c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004750:	2b09      	cmp	r3, #9
 8004752:	d81f      	bhi.n	8004794 <drawschedulePanel+0x484>
 8004754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004758:	461a      	mov	r2, r3
 800475a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800475e:	490c      	ldr	r1, [pc, #48]	; (8004790 <drawschedulePanel+0x480>)
 8004760:	4803      	ldr	r0, [pc, #12]	; (8004770 <drawschedulePanel+0x460>)
 8004762:	f00c fd09 	bl	8011178 <siprintf>
 8004766:	e01e      	b.n	80047a6 <drawschedulePanel+0x496>
 8004768:	08016164 	.word	0x08016164
 800476c:	080150e0 	.word	0x080150e0
 8004770:	200002fc 	.word	0x200002fc
 8004774:	080150f8 	.word	0x080150f8
 8004778:	0801511c 	.word	0x0801511c
 800477c:	08015120 	.word	0x08015120
 8004780:	08015124 	.word	0x08015124
 8004784:	080180dc 	.word	0x080180dc
 8004788:	0801512c 	.word	0x0801512c
 800478c:	0801513c 	.word	0x0801513c
 8004790:	0801514c 	.word	0x0801514c
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004798:	461a      	mov	r2, r3
 800479a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800479e:	498f      	ldr	r1, [pc, #572]	; (80049dc <drawschedulePanel+0x6cc>)
 80047a0:	488f      	ldr	r0, [pc, #572]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047a2:	f00c fce9 	bl	8011178 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	2301      	movs	r3, #1
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	2264      	movs	r2, #100	; 0x64
 80047b4:	210a      	movs	r1, #10
 80047b6:	488a      	ldr	r0, [pc, #552]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047b8:	f7fd f9b4 	bl	8001b24 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d80d      	bhi.n	80047e0 <drawschedulePanel+0x4d0>
 80047c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047c8:	2b09      	cmp	r3, #9
 80047ca:	d809      	bhi.n	80047e0 <drawschedulePanel+0x4d0>
 80047cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047d0:	461a      	mov	r2, r3
 80047d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047d6:	4983      	ldr	r1, [pc, #524]	; (80049e4 <drawschedulePanel+0x6d4>)
 80047d8:	4881      	ldr	r0, [pc, #516]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047da:	f00c fccd 	bl	8011178 <siprintf>
 80047de:	e024      	b.n	800482a <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80047e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	d809      	bhi.n	80047fc <drawschedulePanel+0x4ec>
 80047e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047ec:	461a      	mov	r2, r3
 80047ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047f2:	497d      	ldr	r1, [pc, #500]	; (80049e8 <drawschedulePanel+0x6d8>)
 80047f4:	487a      	ldr	r0, [pc, #488]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047f6:	f00c fcbf 	bl	8011178 <siprintf>
 80047fa:	e016      	b.n	800482a <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004800:	2b09      	cmp	r3, #9
 8004802:	d809      	bhi.n	8004818 <drawschedulePanel+0x508>
 8004804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004808:	461a      	mov	r2, r3
 800480a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800480e:	4977      	ldr	r1, [pc, #476]	; (80049ec <drawschedulePanel+0x6dc>)
 8004810:	4873      	ldr	r0, [pc, #460]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004812:	f00c fcb1 	bl	8011178 <siprintf>
 8004816:	e008      	b.n	800482a <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004818:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800481c:	461a      	mov	r2, r3
 800481e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004822:	4973      	ldr	r1, [pc, #460]	; (80049f0 <drawschedulePanel+0x6e0>)
 8004824:	486e      	ldr	r0, [pc, #440]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004826:	f00c fca7 	bl	8011178 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800482a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2301      	movs	r3, #1
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	2287      	movs	r2, #135	; 0x87
 8004838:	210a      	movs	r1, #10
 800483a:	4869      	ldr	r0, [pc, #420]	; (80049e0 <drawschedulePanel+0x6d0>)
 800483c:	f7fd f972 	bl	8001b24 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004840:	e0c7      	b.n	80049d2 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 80c4 	bne.w	80049d2 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800484a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800484e:	4619      	mov	r1, r3
 8004850:	2002      	movs	r0, #2
 8004852:	f7fe fb34 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004856:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800485a:	4619      	mov	r1, r3
 800485c:	2002      	movs	r0, #2
 800485e:	f7fe fb52 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004862:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004866:	4619      	mov	r1, r3
 8004868:	2002      	movs	r0, #2
 800486a:	f7fe fb70 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 800486e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004872:	4619      	mov	r1, r3
 8004874:	2002      	movs	r0, #2
 8004876:	f7fe fb8e 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	2002      	movs	r0, #2
 8004882:	f7fe f9cb 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4619      	mov	r1, r3
 800488c:	2002      	movs	r0, #2
 800488e:	f7fe fa41 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004896:	2b17      	cmp	r3, #23
 8004898:	d902      	bls.n	80048a0 <drawschedulePanel+0x590>
 800489a:	2317      	movs	r3, #23
 800489c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 80048a0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048a4:	2b3b      	cmp	r3, #59	; 0x3b
 80048a6:	d902      	bls.n	80048ae <drawschedulePanel+0x59e>
 80048a8:	233b      	movs	r3, #59	; 0x3b
 80048aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80048ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048b2:	2b17      	cmp	r3, #23
 80048b4:	d902      	bls.n	80048bc <drawschedulePanel+0x5ac>
 80048b6:	2317      	movs	r3, #23
 80048b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80048bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048c0:	2b3b      	cmp	r3, #59	; 0x3b
 80048c2:	d902      	bls.n	80048ca <drawschedulePanel+0x5ba>
 80048c4:	233b      	movs	r3, #59	; 0x3b
 80048c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80048ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d80d      	bhi.n	80048ee <drawschedulePanel+0x5de>
 80048d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048d6:	2b09      	cmp	r3, #9
 80048d8:	d809      	bhi.n	80048ee <drawschedulePanel+0x5de>
 80048da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048de:	461a      	mov	r2, r3
 80048e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048e4:	4943      	ldr	r1, [pc, #268]	; (80049f4 <drawschedulePanel+0x6e4>)
 80048e6:	483e      	ldr	r0, [pc, #248]	; (80049e0 <drawschedulePanel+0x6d0>)
 80048e8:	f00c fc46 	bl	8011178 <siprintf>
 80048ec:	e024      	b.n	8004938 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 80048ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	d809      	bhi.n	800490a <drawschedulePanel+0x5fa>
 80048f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048fa:	461a      	mov	r2, r3
 80048fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004900:	493d      	ldr	r1, [pc, #244]	; (80049f8 <drawschedulePanel+0x6e8>)
 8004902:	4837      	ldr	r0, [pc, #220]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004904:	f00c fc38 	bl	8011178 <siprintf>
 8004908:	e016      	b.n	8004938 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 800490a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800490e:	2b09      	cmp	r3, #9
 8004910:	d809      	bhi.n	8004926 <drawschedulePanel+0x616>
 8004912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004916:	461a      	mov	r2, r3
 8004918:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800491c:	4937      	ldr	r1, [pc, #220]	; (80049fc <drawschedulePanel+0x6ec>)
 800491e:	4830      	ldr	r0, [pc, #192]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004920:	f00c fc2a 	bl	8011178 <siprintf>
 8004924:	e008      	b.n	8004938 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492a:	461a      	mov	r2, r3
 800492c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004930:	4933      	ldr	r1, [pc, #204]	; (8004a00 <drawschedulePanel+0x6f0>)
 8004932:	482b      	ldr	r0, [pc, #172]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004934:	f00c fc20 	bl	8011178 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004938:	f24c 6318 	movw	r3, #50712	; 0xc618
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2301      	movs	r3, #1
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	2264      	movs	r2, #100	; 0x64
 8004946:	210a      	movs	r1, #10
 8004948:	4825      	ldr	r0, [pc, #148]	; (80049e0 <drawschedulePanel+0x6d0>)
 800494a:	f7fd f8eb 	bl	8001b24 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 800494e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004952:	2b09      	cmp	r3, #9
 8004954:	d80d      	bhi.n	8004972 <drawschedulePanel+0x662>
 8004956:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800495a:	2b09      	cmp	r3, #9
 800495c:	d809      	bhi.n	8004972 <drawschedulePanel+0x662>
 800495e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004962:	461a      	mov	r2, r3
 8004964:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004968:	4926      	ldr	r1, [pc, #152]	; (8004a04 <drawschedulePanel+0x6f4>)
 800496a:	481d      	ldr	r0, [pc, #116]	; (80049e0 <drawschedulePanel+0x6d0>)
 800496c:	f00c fc04 	bl	8011178 <siprintf>
 8004970:	e024      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004972:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004976:	2b09      	cmp	r3, #9
 8004978:	d809      	bhi.n	800498e <drawschedulePanel+0x67e>
 800497a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800497e:	461a      	mov	r2, r3
 8004980:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004984:	4920      	ldr	r1, [pc, #128]	; (8004a08 <drawschedulePanel+0x6f8>)
 8004986:	4816      	ldr	r0, [pc, #88]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004988:	f00c fbf6 	bl	8011178 <siprintf>
 800498c:	e016      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 800498e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d809      	bhi.n	80049aa <drawschedulePanel+0x69a>
 8004996:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800499a:	461a      	mov	r2, r3
 800499c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049a0:	491a      	ldr	r1, [pc, #104]	; (8004a0c <drawschedulePanel+0x6fc>)
 80049a2:	480f      	ldr	r0, [pc, #60]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049a4:	f00c fbe8 	bl	8011178 <siprintf>
 80049a8:	e008      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 80049aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049ae:	461a      	mov	r2, r3
 80049b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049b4:	4916      	ldr	r1, [pc, #88]	; (8004a10 <drawschedulePanel+0x700>)
 80049b6:	480a      	ldr	r0, [pc, #40]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049b8:	f00c fbde 	bl	8011178 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049bc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	2301      	movs	r3, #1
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	2287      	movs	r2, #135	; 0x87
 80049ca:	210c      	movs	r1, #12
 80049cc:	4804      	ldr	r0, [pc, #16]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049ce:	f7fd f8a9 	bl	8001b24 <EF_PutString>
}
 80049d2:	bf00      	nop
 80049d4:	3738      	adds	r7, #56	; 0x38
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	0801515c 	.word	0x0801515c
 80049e0:	200002fc 	.word	0x200002fc
 80049e4:	0801516c 	.word	0x0801516c
 80049e8:	0801517c 	.word	0x0801517c
 80049ec:	0801518c 	.word	0x0801518c
 80049f0:	0801519c 	.word	0x0801519c
 80049f4:	080151ac 	.word	0x080151ac
 80049f8:	080151bc 	.word	0x080151bc
 80049fc:	080151cc 	.word	0x080151cc
 8004a00:	080151dc 	.word	0x080151dc
 8004a04:	080151ec 	.word	0x080151ec
 8004a08:	080151fc 	.word	0x080151fc
 8004a0c:	0801520c 	.word	0x0801520c
 8004a10:	0801521c 	.word	0x0801521c

08004a14 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004a1a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004a1e:	f7fd fa6b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a22:	483f      	ldr	r0, [pc, #252]	; (8004b20 <showSchedule1Panel+0x10c>)
 8004a24:	f7fc fe64 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004a28:	493e      	ldr	r1, [pc, #248]	; (8004b24 <showSchedule1Panel+0x110>)
 8004a2a:	483f      	ldr	r0, [pc, #252]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a2c:	f00c fba4 	bl	8011178 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004a30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a3e:	220a      	movs	r2, #10
 8004a40:	212a      	movs	r1, #42	; 0x2a
 8004a42:	4839      	ldr	r0, [pc, #228]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a44:	f7fd f86e 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004a48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2329      	movs	r3, #41	; 0x29
 8004a50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a54:	2129      	movs	r1, #41	; 0x29
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fc fb9a 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004a5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	232b      	movs	r3, #43	; 0x2b
 8004a64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a68:	212b      	movs	r1, #43	; 0x2b
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fc fb90 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7ff fc4d 	bl	8004310 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004a76:	482d      	ldr	r0, [pc, #180]	; (8004b2c <showSchedule1Panel+0x118>)
 8004a78:	f7fc fe3a 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004a7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	2305      	movs	r3, #5
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2314      	movs	r3, #20
 8004a88:	225f      	movs	r2, #95	; 0x5f
 8004a8a:	21d8      	movs	r1, #216	; 0xd8
 8004a8c:	20dc      	movs	r0, #220	; 0xdc
 8004a8e:	f7fc fdde 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004a92:	4927      	ldr	r1, [pc, #156]	; (8004b30 <showSchedule1Panel+0x11c>)
 8004a94:	4824      	ldr	r0, [pc, #144]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a96:	f00c fb6f 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004a9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	22da      	movs	r2, #218	; 0xda
 8004aa8:	21e6      	movs	r1, #230	; 0xe6
 8004aaa:	481f      	ldr	r0, [pc, #124]	; (8004b28 <showSchedule1Panel+0x114>)
 8004aac:	f7fd f83a 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ab0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	2305      	movs	r3, #5
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	2314      	movs	r3, #20
 8004abc:	225a      	movs	r2, #90	; 0x5a
 8004abe:	21d8      	movs	r1, #216	; 0xd8
 8004ac0:	2078      	movs	r0, #120	; 0x78
 8004ac2:	f7fc fdc4 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004ac6:	491b      	ldr	r1, [pc, #108]	; (8004b34 <showSchedule1Panel+0x120>)
 8004ac8:	4817      	ldr	r0, [pc, #92]	; (8004b28 <showSchedule1Panel+0x114>)
 8004aca:	f00c fb55 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ace:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	22da      	movs	r2, #218	; 0xda
 8004adc:	217e      	movs	r1, #126	; 0x7e
 8004ade:	4812      	ldr	r0, [pc, #72]	; (8004b28 <showSchedule1Panel+0x114>)
 8004ae0:	f7fd f820 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2305      	movs	r3, #5
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2314      	movs	r3, #20
 8004af0:	2264      	movs	r2, #100	; 0x64
 8004af2:	21d8      	movs	r1, #216	; 0xd8
 8004af4:	200a      	movs	r0, #10
 8004af6:	f7fc fdaa 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004afa:	490f      	ldr	r1, [pc, #60]	; (8004b38 <showSchedule1Panel+0x124>)
 8004afc:	480a      	ldr	r0, [pc, #40]	; (8004b28 <showSchedule1Panel+0x114>)
 8004afe:	f00c fb3b 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004b02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	22da      	movs	r2, #218	; 0xda
 8004b10:	210d      	movs	r1, #13
 8004b12:	4805      	ldr	r0, [pc, #20]	; (8004b28 <showSchedule1Panel+0x114>)
 8004b14:	f7fd f806 	bl	8001b24 <EF_PutString>
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	080180dc 	.word	0x080180dc
 8004b24:	0801522c 	.word	0x0801522c
 8004b28:	200002fc 	.word	0x200002fc
 8004b2c:	08016164 	.word	0x08016164
 8004b30:	0801523c 	.word	0x0801523c
 8004b34:	08015248 	.word	0x08015248
 8004b38:	08015250 	.word	0x08015250

08004b3c <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b42:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b46:	f7fd f9d7 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b4a:	4832      	ldr	r0, [pc, #200]	; (8004c14 <showSchedule2Panel+0xd8>)
 8004b4c:	f7fc fdd0 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004b50:	4931      	ldr	r1, [pc, #196]	; (8004c18 <showSchedule2Panel+0xdc>)
 8004b52:	4832      	ldr	r0, [pc, #200]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004b54:	f00c fb10 	bl	8011178 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b66:	220a      	movs	r2, #10
 8004b68:	212a      	movs	r1, #42	; 0x2a
 8004b6a:	482c      	ldr	r0, [pc, #176]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004b6c:	f7fc ffda 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2329      	movs	r3, #41	; 0x29
 8004b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b7c:	2129      	movs	r1, #41	; 0x29
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fc fb06 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	232b      	movs	r3, #43	; 0x2b
 8004b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b90:	212b      	movs	r1, #43	; 0x2b
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fc fafc 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f7ff fbb9 	bl	8004310 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b9e:	4820      	ldr	r0, [pc, #128]	; (8004c20 <showSchedule2Panel+0xe4>)
 8004ba0:	f7fc fda6 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ba4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	2305      	movs	r3, #5
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	2314      	movs	r3, #20
 8004bb0:	225a      	movs	r2, #90	; 0x5a
 8004bb2:	21d8      	movs	r1, #216	; 0xd8
 8004bb4:	2078      	movs	r0, #120	; 0x78
 8004bb6:	f7fc fd4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bba:	491a      	ldr	r1, [pc, #104]	; (8004c24 <showSchedule2Panel+0xe8>)
 8004bbc:	4817      	ldr	r0, [pc, #92]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bbe:	f00c fadb 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	22da      	movs	r2, #218	; 0xda
 8004bd0:	217e      	movs	r1, #126	; 0x7e
 8004bd2:	4812      	ldr	r0, [pc, #72]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bd4:	f7fc ffa6 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	2305      	movs	r3, #5
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2314      	movs	r3, #20
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	21d8      	movs	r1, #216	; 0xd8
 8004be8:	200a      	movs	r0, #10
 8004bea:	f7fc fd30 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004bee:	490e      	ldr	r1, [pc, #56]	; (8004c28 <showSchedule2Panel+0xec>)
 8004bf0:	480a      	ldr	r0, [pc, #40]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bf2:	f00c fac1 	bl	8011178 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bf6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	22da      	movs	r2, #218	; 0xda
 8004c04:	210d      	movs	r1, #13
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004c08:	f7fc ff8c 	bl	8001b24 <EF_PutString>
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	080180dc 	.word	0x080180dc
 8004c18:	0801525c 	.word	0x0801525c
 8004c1c:	200002fc 	.word	0x200002fc
 8004c20:	08016164 	.word	0x08016164
 8004c24:	08015248 	.word	0x08015248
 8004c28:	08015250 	.word	0x08015250

08004c2c <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004c32:	f7fd fdaf 	bl	8002794 <DS3231_GetHour>
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004c3a:	f7fd fdb7 	bl	80027ac <DS3231_GetMinute>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c42:	482a      	ldr	r0, [pc, #168]	; (8004cec <ChangeHourOnScreen+0xc0>)
 8004c44:	f7fc fd54 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <ChangeHourOnScreen+0xc4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	79fa      	ldrb	r2, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d021      	beq.n	8004c96 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004c52:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <ChangeHourOnScreen+0xc8>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11d      	bne.n	8004c96 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b09      	cmp	r3, #9
 8004c5e:	d806      	bhi.n	8004c6e <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	461a      	mov	r2, r3
 8004c64:	4924      	ldr	r1, [pc, #144]	; (8004cf8 <ChangeHourOnScreen+0xcc>)
 8004c66:	4825      	ldr	r0, [pc, #148]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c68:	f00c fa86 	bl	8011178 <siprintf>
 8004c6c:	e005      	b.n	8004c7a <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	461a      	mov	r2, r3
 8004c72:	4923      	ldr	r1, [pc, #140]	; (8004d00 <ChangeHourOnScreen+0xd4>)
 8004c74:	4821      	ldr	r0, [pc, #132]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c76:	f00c fa7f 	bl	8011178 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	2301      	movs	r3, #1
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	2232      	movs	r2, #50	; 0x32
 8004c88:	2161      	movs	r1, #97	; 0x61
 8004c8a:	481c      	ldr	r0, [pc, #112]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c8c:	f7fc ff4a 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <ChangeHourOnScreen+0xc4>)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <ChangeHourOnScreen+0xd8>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	79ba      	ldrb	r2, [r7, #6]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d021      	beq.n	8004ce4 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <ChangeHourOnScreen+0xc8>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d11d      	bne.n	8004ce4 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d806      	bhi.n	8004cbc <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004cae:	79bb      	ldrb	r3, [r7, #6]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4915      	ldr	r1, [pc, #84]	; (8004d08 <ChangeHourOnScreen+0xdc>)
 8004cb4:	4811      	ldr	r0, [pc, #68]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cb6:	f00c fa5f 	bl	8011178 <siprintf>
 8004cba:	e005      	b.n	8004cc8 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004cbc:	79bb      	ldrb	r3, [r7, #6]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <ChangeHourOnScreen+0xe0>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cc4:	f00c fa58 	bl	8011178 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2232      	movs	r2, #50	; 0x32
 8004cd6:	2196      	movs	r1, #150	; 0x96
 8004cd8:	4808      	ldr	r0, [pc, #32]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cda:	f7fc ff23 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <ChangeHourOnScreen+0xd8>)
 8004ce0:	79bb      	ldrb	r3, [r7, #6]
 8004ce2:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	080180dc 	.word	0x080180dc
 8004cf0:	2000024c 	.word	0x2000024c
 8004cf4:	20000290 	.word	0x20000290
 8004cf8:	0801526c 	.word	0x0801526c
 8004cfc:	200002fc 	.word	0x200002fc
 8004d00:	08015274 	.word	0x08015274
 8004d04:	2000024d 	.word	0x2000024d
 8004d08:	08015278 	.word	0x08015278
 8004d0c:	08015280 	.word	0x08015280

08004d10 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004d24:	f7fd ff0a 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004d28:	f7fd ff40 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004d2c:	e005      	b.n	8004d3a <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004d2e:	2018      	movs	r0, #24
 8004d30:	f003 fe54 	bl	80089dc <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004d34:	2019      	movs	r0, #25
 8004d36:	f003 fe51 	bl	80089dc <SendComand>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d12e      	bne.n	8004db6 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004d58:	f7fd fef0 	bl	8002b3c <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004d5c:	481b      	ldr	r0, [pc, #108]	; (8004dcc <predefinedActivityKarmienie+0x88>)
 8004d5e:	f7fc fcc7 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	230a      	movs	r3, #10
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2328      	movs	r3, #40	; 0x28
 8004d6e:	2278      	movs	r2, #120	; 0x78
 8004d70:	213c      	movs	r1, #60	; 0x3c
 8004d72:	2064      	movs	r0, #100	; 0x64
 8004d74:	f7fc fc6b 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004d78:	4915      	ldr	r1, [pc, #84]	; (8004dd0 <predefinedActivityKarmienie+0x8c>)
 8004d7a:	4816      	ldr	r0, [pc, #88]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d7c:	f00c f9fc 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	223e      	movs	r2, #62	; 0x3e
 8004d8e:	2177      	movs	r1, #119	; 0x77
 8004d90:	4810      	ldr	r0, [pc, #64]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d92:	f7fc fec7 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004d96:	4910      	ldr	r1, [pc, #64]	; (8004dd8 <predefinedActivityKarmienie+0x94>)
 8004d98:	480e      	ldr	r0, [pc, #56]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d9a:	f00c f9ed 	bl	8011178 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	2250      	movs	r2, #80	; 0x50
 8004dac:	2193      	movs	r1, #147	; 0x93
 8004dae:	4809      	ldr	r0, [pc, #36]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004db0:	f7fc feb8 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004db4:	e005      	b.n	8004dc2 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004db6:	2018      	movs	r0, #24
 8004db8:	f003 fe10 	bl	80089dc <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <predefinedActivityKarmienie+0x98>)
 8004dbe:	f009 ff8b 	bl	800ecd8 <HAL_TIM_Base_Start_IT>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	08016164 	.word	0x08016164
 8004dd0:	08015064 	.word	0x08015064
 8004dd4:	200002fc 	.word	0x200002fc
 8004dd8:	08015074 	.word	0x08015074
 8004ddc:	20000768 	.word	0x20000768

08004de0 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004de6:	487d      	ldr	r0, [pc, #500]	; (8004fdc <drawCurrentStateOfSwitches+0x1fc>)
 8004de8:	f7fc fc82 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004dec:	4b7c      	ldr	r3, [pc, #496]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01c      	beq.n	8004e2e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004df4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	2305      	movs	r3, #5
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2315      	movs	r3, #21
 8004e00:	2221      	movs	r2, #33	; 0x21
 8004e02:	2141      	movs	r1, #65	; 0x41
 8004e04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e08:	f7fc fc21 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e0c:	4975      	ldr	r1, [pc, #468]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004e0e:	4876      	ldr	r0, [pc, #472]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e10:	f00c f9b2 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e14:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2243      	movs	r2, #67	; 0x43
 8004e22:	f240 1111 	movw	r1, #273	; 0x111
 8004e26:	4870      	ldr	r0, [pc, #448]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e28:	f7fc fe7c 	bl	8001b24 <EF_PutString>
 8004e2c:	e01b      	b.n	8004e66 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	2305      	movs	r3, #5
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2315      	movs	r3, #21
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	2141      	movs	r1, #65	; 0x41
 8004e3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e42:	f7fc fc04 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e46:	4969      	ldr	r1, [pc, #420]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004e48:	4867      	ldr	r0, [pc, #412]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e4a:	f00c f995 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2300      	movs	r3, #0
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2243      	movs	r2, #67	; 0x43
 8004e5c:	f240 1111 	movw	r1, #273	; 0x111
 8004e60:	4861      	ldr	r0, [pc, #388]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e62:	f7fc fe5f 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004e66:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e6e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	2305      	movs	r3, #5
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2315      	movs	r3, #21
 8004e7a:	2221      	movs	r2, #33	; 0x21
 8004e7c:	215f      	movs	r1, #95	; 0x5f
 8004e7e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e82:	f7fc fbe4 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e86:	4957      	ldr	r1, [pc, #348]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004e88:	4857      	ldr	r0, [pc, #348]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e8a:	f00c f975 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e8e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2261      	movs	r2, #97	; 0x61
 8004e9c:	f240 1111 	movw	r1, #273	; 0x111
 8004ea0:	4851      	ldr	r0, [pc, #324]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004ea2:	f7fc fe3f 	bl	8001b24 <EF_PutString>
 8004ea6:	e01b      	b.n	8004ee0 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ea8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2305      	movs	r3, #5
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2315      	movs	r3, #21
 8004eb4:	2221      	movs	r2, #33	; 0x21
 8004eb6:	215f      	movs	r1, #95	; 0x5f
 8004eb8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ebc:	f7fc fbc7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004ec0:	494a      	ldr	r1, [pc, #296]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004ec2:	4849      	ldr	r0, [pc, #292]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004ec4:	f00c f958 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2261      	movs	r2, #97	; 0x61
 8004ed6:	f240 1111 	movw	r1, #273	; 0x111
 8004eda:	4843      	ldr	r0, [pc, #268]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004edc:	f7fc fe22 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004ee2:	789b      	ldrb	r3, [r3, #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01c      	beq.n	8004f22 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ee8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	2305      	movs	r3, #5
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2315      	movs	r3, #21
 8004ef4:	2221      	movs	r2, #33	; 0x21
 8004ef6:	217d      	movs	r1, #125	; 0x7d
 8004ef8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004efc:	f7fc fba7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f00:	4938      	ldr	r1, [pc, #224]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004f02:	4839      	ldr	r0, [pc, #228]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f04:	f00c f938 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	227f      	movs	r2, #127	; 0x7f
 8004f16:	f240 1111 	movw	r1, #273	; 0x111
 8004f1a:	4833      	ldr	r0, [pc, #204]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f1c:	f7fc fe02 	bl	8001b24 <EF_PutString>
 8004f20:	e01b      	b.n	8004f5a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	2305      	movs	r3, #5
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2315      	movs	r3, #21
 8004f2e:	2221      	movs	r2, #33	; 0x21
 8004f30:	217d      	movs	r1, #125	; 0x7d
 8004f32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f36:	f7fc fb8a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f3a:	492c      	ldr	r1, [pc, #176]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004f3c:	482a      	ldr	r0, [pc, #168]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f3e:	f00c f91b 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	227f      	movs	r2, #127	; 0x7f
 8004f50:	f240 1111 	movw	r1, #273	; 0x111
 8004f54:	4824      	ldr	r0, [pc, #144]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f56:	f7fc fde5 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01c      	beq.n	8004f9c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	2305      	movs	r3, #5
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2315      	movs	r3, #21
 8004f6e:	2221      	movs	r2, #33	; 0x21
 8004f70:	219b      	movs	r1, #155	; 0x9b
 8004f72:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f76:	f7fc fb6a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f7a:	491a      	ldr	r1, [pc, #104]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004f7c:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f7e:	f00c f8fb 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	229d      	movs	r2, #157	; 0x9d
 8004f90:	f240 1111 	movw	r1, #273	; 0x111
 8004f94:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f96:	f7fc fdc5 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004f9a:	e01b      	b.n	8004fd4 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2315      	movs	r3, #21
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	219b      	movs	r1, #155	; 0x9b
 8004fac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fb0:	f7fc fb4d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fb4:	490d      	ldr	r1, [pc, #52]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004fb8:	f00c f8de 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	229d      	movs	r2, #157	; 0x9d
 8004fca:	f240 1111 	movw	r1, #273	; 0x111
 8004fce:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004fd0:	f7fc fda8 	bl	8001b24 <EF_PutString>
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	08016164 	.word	0x08016164
 8004fe0:	200002a8 	.word	0x200002a8
 8004fe4:	08015070 	.word	0x08015070
 8004fe8:	200002fc 	.word	0x200002fc
 8004fec:	08015074 	.word	0x08015074

08004ff0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004ff6:	4875      	ldr	r0, [pc, #468]	; (80051cc <drawCurrentStateOfLights+0x1dc>)
 8004ff8:	f7fc fb7a 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8004ffc:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01a      	beq.n	800503a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005004:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	2305      	movs	r3, #5
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2315      	movs	r3, #21
 8005010:	2221      	movs	r2, #33	; 0x21
 8005012:	2141      	movs	r1, #65	; 0x41
 8005014:	20c8      	movs	r0, #200	; 0xc8
 8005016:	f7fc fb1a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800501a:	496e      	ldr	r1, [pc, #440]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 800501c:	486e      	ldr	r0, [pc, #440]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800501e:	f00c f8ab 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005022:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	2300      	movs	r3, #0
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	2243      	movs	r2, #67	; 0x43
 8005030:	21cb      	movs	r1, #203	; 0xcb
 8005032:	4869      	ldr	r0, [pc, #420]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005034:	f7fc fd76 	bl	8001b24 <EF_PutString>
 8005038:	e019      	b.n	800506e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800503a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	2305      	movs	r3, #5
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2315      	movs	r3, #21
 8005046:	2221      	movs	r2, #33	; 0x21
 8005048:	2141      	movs	r1, #65	; 0x41
 800504a:	20c8      	movs	r0, #200	; 0xc8
 800504c:	f7fc faff 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005050:	4962      	ldr	r1, [pc, #392]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 8005052:	4861      	ldr	r0, [pc, #388]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005054:	f00c f890 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005058:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	2300      	movs	r3, #0
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	2243      	movs	r2, #67	; 0x43
 8005066:	21cb      	movs	r1, #203	; 0xcb
 8005068:	485b      	ldr	r0, [pc, #364]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800506a:	f7fc fd5b 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800506e:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005076:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2305      	movs	r3, #5
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2315      	movs	r3, #21
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	215f      	movs	r1, #95	; 0x5f
 8005086:	20c8      	movs	r0, #200	; 0xc8
 8005088:	f7fc fae1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800508c:	4951      	ldr	r1, [pc, #324]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 800508e:	4852      	ldr	r0, [pc, #328]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005090:	f00c f872 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005094:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2261      	movs	r2, #97	; 0x61
 80050a2:	21cb      	movs	r1, #203	; 0xcb
 80050a4:	484c      	ldr	r0, [pc, #304]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050a6:	f7fc fd3d 	bl	8001b24 <EF_PutString>
 80050aa:	e019      	b.n	80050e0 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	2305      	movs	r3, #5
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2315      	movs	r3, #21
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	215f      	movs	r1, #95	; 0x5f
 80050bc:	20c8      	movs	r0, #200	; 0xc8
 80050be:	f7fc fac6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050c2:	4946      	ldr	r1, [pc, #280]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 80050c4:	4844      	ldr	r0, [pc, #272]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050c6:	f00c f857 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	2261      	movs	r2, #97	; 0x61
 80050d8:	21cb      	movs	r1, #203	; 0xcb
 80050da:	483f      	ldr	r0, [pc, #252]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050dc:	f7fc fd22 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 80050e2:	789b      	ldrb	r3, [r3, #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050e8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2305      	movs	r3, #5
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2315      	movs	r3, #21
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	217d      	movs	r1, #125	; 0x7d
 80050f8:	20c8      	movs	r0, #200	; 0xc8
 80050fa:	f7fc faa8 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050fe:	4935      	ldr	r1, [pc, #212]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 8005100:	4835      	ldr	r0, [pc, #212]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005102:	f00c f839 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005106:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	227f      	movs	r2, #127	; 0x7f
 8005114:	21cb      	movs	r1, #203	; 0xcb
 8005116:	4830      	ldr	r0, [pc, #192]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005118:	f7fc fd04 	bl	8001b24 <EF_PutString>
 800511c:	e019      	b.n	8005152 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800511e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	2305      	movs	r3, #5
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2315      	movs	r3, #21
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	217d      	movs	r1, #125	; 0x7d
 800512e:	20c8      	movs	r0, #200	; 0xc8
 8005130:	f7fc fa8d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005134:	4929      	ldr	r1, [pc, #164]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 8005136:	4828      	ldr	r0, [pc, #160]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005138:	f00c f81e 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800513c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	2300      	movs	r3, #0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	227f      	movs	r2, #127	; 0x7f
 800514a:	21cb      	movs	r1, #203	; 0xcb
 800514c:	4822      	ldr	r0, [pc, #136]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800514e:	f7fc fce9 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01a      	beq.n	8005190 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800515a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2305      	movs	r3, #5
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2315      	movs	r3, #21
 8005166:	2221      	movs	r2, #33	; 0x21
 8005168:	219b      	movs	r1, #155	; 0x9b
 800516a:	20c8      	movs	r0, #200	; 0xc8
 800516c:	f7fc fa6f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005170:	4918      	ldr	r1, [pc, #96]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 8005172:	4819      	ldr	r0, [pc, #100]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005174:	f00c f800 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	229d      	movs	r2, #157	; 0x9d
 8005186:	21cb      	movs	r1, #203	; 0xcb
 8005188:	4813      	ldr	r0, [pc, #76]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800518a:	f7fc fccb 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800518e:	e019      	b.n	80051c4 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	2305      	movs	r3, #5
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2315      	movs	r3, #21
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	219b      	movs	r1, #155	; 0x9b
 80051a0:	20c8      	movs	r0, #200	; 0xc8
 80051a2:	f7fc fa54 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 80051a8:	480b      	ldr	r0, [pc, #44]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80051aa:	f00b ffe5 	bl	8011178 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	229d      	movs	r2, #157	; 0x9d
 80051bc:	21cb      	movs	r1, #203	; 0xcb
 80051be:	4806      	ldr	r0, [pc, #24]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80051c0:	f7fc fcb0 	bl	8001b24 <EF_PutString>
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08016164 	.word	0x08016164
 80051d0:	200002ac 	.word	0x200002ac
 80051d4:	08015070 	.word	0x08015070
 80051d8:	200002fc 	.word	0x200002fc
 80051dc:	08015074 	.word	0x08015074

080051e0 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	2100      	movs	r1, #0
 80051f4:	460a      	mov	r2, r1
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	460a      	mov	r2, r1
 80051fa:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7fd fd09 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800520a:	7a3b      	ldrb	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <restoreTFTScheduleDayOfWeek+0x3a>
 8005210:	2101      	movs	r1, #1
 8005212:	2001      	movs	r0, #1
 8005214:	f001 fa9c 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8005218:	e003      	b.n	8005222 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800521a:	2100      	movs	r1, #0
 800521c:	2001      	movs	r0, #1
 800521e:	f001 fa97 	bl	8006750 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005222:	7a7b      	ldrb	r3, [r7, #9]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <restoreTFTScheduleDayOfWeek+0x52>
 8005228:	2101      	movs	r1, #1
 800522a:	2002      	movs	r0, #2
 800522c:	f001 fa90 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8005230:	e003      	b.n	800523a <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005232:	2100      	movs	r1, #0
 8005234:	2002      	movs	r0, #2
 8005236:	f001 fa8b 	bl	8006750 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800523a:	7abb      	ldrb	r3, [r7, #10]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <restoreTFTScheduleDayOfWeek+0x6a>
 8005240:	2101      	movs	r1, #1
 8005242:	2003      	movs	r0, #3
 8005244:	f001 fa84 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8005248:	e003      	b.n	8005252 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800524a:	2100      	movs	r1, #0
 800524c:	2003      	movs	r0, #3
 800524e:	f001 fa7f 	bl	8006750 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <restoreTFTScheduleDayOfWeek+0x82>
 8005258:	2101      	movs	r1, #1
 800525a:	2004      	movs	r0, #4
 800525c:	f001 fa78 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8005260:	e003      	b.n	800526a <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005262:	2100      	movs	r1, #0
 8005264:	2004      	movs	r0, #4
 8005266:	f001 fa73 	bl	8006750 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800526a:	7b3b      	ldrb	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <restoreTFTScheduleDayOfWeek+0x9a>
 8005270:	2101      	movs	r1, #1
 8005272:	2005      	movs	r0, #5
 8005274:	f001 fa6c 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8005278:	e003      	b.n	8005282 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800527a:	2100      	movs	r1, #0
 800527c:	2005      	movs	r0, #5
 800527e:	f001 fa67 	bl	8006750 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005282:	7b7b      	ldrb	r3, [r7, #13]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <restoreTFTScheduleDayOfWeek+0xb2>
 8005288:	2101      	movs	r1, #1
 800528a:	2006      	movs	r0, #6
 800528c:	f001 fa60 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8005290:	e003      	b.n	800529a <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005292:	2100      	movs	r1, #0
 8005294:	2006      	movs	r0, #6
 8005296:	f001 fa5b 	bl	8006750 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <restoreTFTScheduleDayOfWeek+0xca>
 80052a0:	2101      	movs	r1, #1
 80052a2:	2007      	movs	r0, #7
 80052a4:	f001 fa54 	bl	8006750 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80052a8:	e003      	b.n	80052b2 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80052aa:	2100      	movs	r1, #0
 80052ac:	2007      	movs	r0, #7
 80052ae:	f001 fa4f 	bl	8006750 <changeTFTScheduleDayOfWeek>
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80052d2:	f107 020c 	add.w	r2, r7, #12
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd fd1a 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80052e0:	7b3b      	ldrb	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <restoreTFTScheduleRelayLights+0x36>
 80052e6:	2101      	movs	r1, #1
 80052e8:	2001      	movs	r0, #1
 80052ea:	f001 fb0e 	bl	800690a <changeTFTScheduleRelayLights>
 80052ee:	e003      	b.n	80052f8 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80052f0:	2100      	movs	r1, #0
 80052f2:	2001      	movs	r0, #1
 80052f4:	f001 fb09 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <restoreTFTScheduleRelayLights+0x4e>
 80052fe:	2101      	movs	r1, #1
 8005300:	2002      	movs	r0, #2
 8005302:	f001 fb02 	bl	800690a <changeTFTScheduleRelayLights>
 8005306:	e003      	b.n	8005310 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005308:	2100      	movs	r1, #0
 800530a:	2002      	movs	r0, #2
 800530c:	f001 fafd 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <restoreTFTScheduleRelayLights+0x66>
 8005316:	2101      	movs	r1, #1
 8005318:	2003      	movs	r0, #3
 800531a:	f001 faf6 	bl	800690a <changeTFTScheduleRelayLights>
 800531e:	e003      	b.n	8005328 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005320:	2100      	movs	r1, #0
 8005322:	2003      	movs	r0, #3
 8005324:	f001 faf1 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <restoreTFTScheduleRelayLights+0x7e>
 800532e:	2101      	movs	r1, #1
 8005330:	2004      	movs	r0, #4
 8005332:	f001 faea 	bl	800690a <changeTFTScheduleRelayLights>
 8005336:	e003      	b.n	8005340 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005338:	2100      	movs	r1, #0
 800533a:	2004      	movs	r0, #4
 800533c:	f001 fae5 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005340:	7c3b      	ldrb	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <restoreTFTScheduleRelayLights+0x96>
 8005346:	2101      	movs	r1, #1
 8005348:	2005      	movs	r0, #5
 800534a:	f001 fade 	bl	800690a <changeTFTScheduleRelayLights>
 800534e:	e003      	b.n	8005358 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005350:	2100      	movs	r1, #0
 8005352:	2005      	movs	r0, #5
 8005354:	f001 fad9 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <restoreTFTScheduleRelayLights+0xae>
 800535e:	2101      	movs	r1, #1
 8005360:	2006      	movs	r0, #6
 8005362:	f001 fad2 	bl	800690a <changeTFTScheduleRelayLights>
 8005366:	e003      	b.n	8005370 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005368:	2100      	movs	r1, #0
 800536a:	2006      	movs	r0, #6
 800536c:	f001 facd 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005370:	7cbb      	ldrb	r3, [r7, #18]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <restoreTFTScheduleRelayLights+0xc6>
 8005376:	2101      	movs	r1, #1
 8005378:	2007      	movs	r0, #7
 800537a:	f001 fac6 	bl	800690a <changeTFTScheduleRelayLights>
 800537e:	e003      	b.n	8005388 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005380:	2100      	movs	r1, #0
 8005382:	2007      	movs	r0, #7
 8005384:	f001 fac1 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <restoreTFTScheduleRelayLights+0xde>
 800538e:	2101      	movs	r1, #1
 8005390:	2008      	movs	r0, #8
 8005392:	f001 faba 	bl	800690a <changeTFTScheduleRelayLights>
 8005396:	e003      	b.n	80053a0 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 8005398:	2100      	movs	r1, #0
 800539a:	2008      	movs	r0, #8
 800539c:	f001 fab5 	bl	800690a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80053a0:	7d3b      	ldrb	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <restoreTFTScheduleRelayLights+0xf6>
 80053a6:	2101      	movs	r1, #1
 80053a8:	2009      	movs	r0, #9
 80053aa:	f001 faae 	bl	800690a <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80053ae:	e003      	b.n	80053b8 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80053b0:	2100      	movs	r1, #0
 80053b2:	2009      	movs	r0, #9
 80053b4:	f001 faa9 	bl	800690a <changeTFTScheduleRelayLights>
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80053c8:	bf00      	nop
 80053ca:	f004 fb0d 	bl	80099e8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <initWait+0x28>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d2f6      	bcs.n	80053ca <initWait+0xa>
    {
    }
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000250 	.word	0x20000250

080053ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f2:	f107 0314 	add.w	r3, r7, #20
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b3f      	ldr	r3, [pc, #252]	; (8005504 <MX_GPIO_Init+0x118>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a3e      	ldr	r2, [pc, #248]	; (8005504 <MX_GPIO_Init+0x118>)
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <MX_GPIO_Init+0x118>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b38      	ldr	r3, [pc, #224]	; (8005504 <MX_GPIO_Init+0x118>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a37      	ldr	r2, [pc, #220]	; (8005504 <MX_GPIO_Init+0x118>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b35      	ldr	r3, [pc, #212]	; (8005504 <MX_GPIO_Init+0x118>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <MX_GPIO_Init+0x118>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a30      	ldr	r2, [pc, #192]	; (8005504 <MX_GPIO_Init+0x118>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <MX_GPIO_Init+0x118>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <MX_GPIO_Init+0x118>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a29      	ldr	r2, [pc, #164]	; (8005504 <MX_GPIO_Init+0x118>)
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b27      	ldr	r3, [pc, #156]	; (8005504 <MX_GPIO_Init+0x118>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005478:	4823      	ldr	r0, [pc, #140]	; (8005508 <MX_GPIO_Init+0x11c>)
 800547a:	f005 fa31 	bl	800a8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8005484:	4821      	ldr	r0, [pc, #132]	; (800550c <MX_GPIO_Init+0x120>)
 8005486:	f005 fa2b 	bl	800a8e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800548a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800548e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005490:	2301      	movs	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005498:	2300      	movs	r3, #0
 800549a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	4619      	mov	r1, r3
 80054a2:	4819      	ldr	r0, [pc, #100]	; (8005508 <MX_GPIO_Init+0x11c>)
 80054a4:	f005 f880 	bl	800a5a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 80054a8:	2310      	movs	r3, #16
 80054aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054b2:	2301      	movs	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	4619      	mov	r1, r3
 80054bc:	4814      	ldr	r0, [pc, #80]	; (8005510 <MX_GPIO_Init+0x124>)
 80054be:	f005 f873 	bl	800a5a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80054c2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80054c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054c8:	2301      	movs	r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d0:	2300      	movs	r3, #0
 80054d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	4619      	mov	r1, r3
 80054da:	480c      	ldr	r0, [pc, #48]	; (800550c <MX_GPIO_Init+0x120>)
 80054dc:	f005 f864 	bl	800a5a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80054e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	4619      	mov	r1, r3
 80054f6:	4806      	ldr	r0, [pc, #24]	; (8005510 <MX_GPIO_Init+0x124>)
 80054f8:	f005 f856 	bl	800a5a8 <HAL_GPIO_Init>

}
 80054fc:	bf00      	nop
 80054fe:	3728      	adds	r7, #40	; 0x28
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	40020800 	.word	0x40020800
 800550c:	40020400 	.word	0x40020400
 8005510:	40020000 	.word	0x40020000

08005514 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <MX_I2C1_Init+0x50>)
 800551a:	4a13      	ldr	r2, [pc, #76]	; (8005568 <MX_I2C1_Init+0x54>)
 800551c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <MX_I2C1_Init+0x50>)
 8005520:	4a12      	ldr	r2, [pc, #72]	; (800556c <MX_I2C1_Init+0x58>)
 8005522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005524:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <MX_I2C1_Init+0x50>)
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <MX_I2C1_Init+0x50>)
 800552c:	2200      	movs	r2, #0
 800552e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <MX_I2C1_Init+0x50>)
 8005532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <MX_I2C1_Init+0x50>)
 800553a:	2200      	movs	r2, #0
 800553c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <MX_I2C1_Init+0x50>)
 8005540:	2200      	movs	r2, #0
 8005542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <MX_I2C1_Init+0x50>)
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <MX_I2C1_Init+0x50>)
 800554c:	2200      	movs	r2, #0
 800554e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005550:	4804      	ldr	r0, [pc, #16]	; (8005564 <MX_I2C1_Init+0x50>)
 8005552:	f005 fa11 	bl	800a978 <HAL_I2C_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800555c:	f000 fa7c 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005560:	bf00      	nop
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200003f0 	.word	0x200003f0
 8005568:	40005400 	.word	0x40005400
 800556c:	00061a80 	.word	0x00061a80

08005570 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <MX_I2C3_Init+0x50>)
 8005576:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <MX_I2C3_Init+0x54>)
 8005578:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <MX_I2C3_Init+0x50>)
 800557c:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <MX_I2C3_Init+0x58>)
 800557e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005580:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <MX_I2C3_Init+0x50>)
 8005582:	2200      	movs	r2, #0
 8005584:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005586:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <MX_I2C3_Init+0x50>)
 8005588:	2200      	movs	r2, #0
 800558a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <MX_I2C3_Init+0x50>)
 800558e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005592:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <MX_I2C3_Init+0x50>)
 8005596:	2200      	movs	r2, #0
 8005598:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <MX_I2C3_Init+0x50>)
 800559c:	2200      	movs	r2, #0
 800559e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <MX_I2C3_Init+0x50>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <MX_I2C3_Init+0x50>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80055ac:	4804      	ldr	r0, [pc, #16]	; (80055c0 <MX_I2C3_Init+0x50>)
 80055ae:	f005 f9e3 	bl	800a978 <HAL_I2C_Init>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80055b8:	f000 fa4e 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80055bc:	bf00      	nop
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	2000033c 	.word	0x2000033c
 80055c4:	40005c00 	.word	0x40005c00
 80055c8:	000186a0 	.word	0x000186a0

080055cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d4:	f107 031c 	add.w	r3, r7, #28
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a74      	ldr	r2, [pc, #464]	; (80057bc <HAL_I2C_MspInit+0x1f0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	f040 8090 	bne.w	8005710 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f0:	2300      	movs	r3, #0
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	4a71      	ldr	r2, [pc, #452]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005600:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800560c:	23c0      	movs	r3, #192	; 0xc0
 800560e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005610:	2312      	movs	r3, #18
 8005612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005618:	2303      	movs	r3, #3
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800561c:	2304      	movs	r3, #4
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005620:	f107 031c 	add.w	r3, r7, #28
 8005624:	4619      	mov	r1, r3
 8005626:	4867      	ldr	r0, [pc, #412]	; (80057c4 <HAL_I2C_MspInit+0x1f8>)
 8005628:	f004 ffbe 	bl	800a5a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	4b63      	ldr	r3, [pc, #396]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	4a62      	ldr	r2, [pc, #392]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800563a:	6413      	str	r3, [r2, #64]	; 0x40
 800563c:	4b60      	ldr	r3, [pc, #384]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005648:	4b5f      	ldr	r3, [pc, #380]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 800564a:	4a60      	ldr	r2, [pc, #384]	; (80057cc <HAL_I2C_MspInit+0x200>)
 800564c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800564e:	4b5e      	ldr	r3, [pc, #376]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 8005650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005654:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005656:	4b5c      	ldr	r3, [pc, #368]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 8005658:	2200      	movs	r2, #0
 800565a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800565c:	4b5a      	ldr	r3, [pc, #360]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 800565e:	2200      	movs	r2, #0
 8005660:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005662:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 8005664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005668:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800566a:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005670:	4b55      	ldr	r3, [pc, #340]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 8005672:	2200      	movs	r2, #0
 8005674:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005676:	4b54      	ldr	r3, [pc, #336]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 8005678:	2200      	movs	r2, #0
 800567a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800567c:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 800567e:	2200      	movs	r2, #0
 8005680:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005682:	4b51      	ldr	r3, [pc, #324]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 8005684:	2200      	movs	r2, #0
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005688:	484f      	ldr	r0, [pc, #316]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 800568a:	f004 fb7d 	bl	8009d88 <HAL_DMA_Init>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005694:	f000 f9e0 	bl	8005a58 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
 800569e:	4a4a      	ldr	r2, [pc, #296]	; (80057c8 <HAL_I2C_MspInit+0x1fc>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80056a4:	4b4a      	ldr	r3, [pc, #296]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056a6:	4a4b      	ldr	r2, [pc, #300]	; (80057d4 <HAL_I2C_MspInit+0x208>)
 80056a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80056aa:	4b49      	ldr	r3, [pc, #292]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056b0:	4b47      	ldr	r3, [pc, #284]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b6:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056bc:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80056d0:	4b3f      	ldr	r3, [pc, #252]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056d6:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056d8:	2200      	movs	r2, #0
 80056da:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056dc:	4b3c      	ldr	r3, [pc, #240]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056de:	2200      	movs	r2, #0
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80056e2:	483b      	ldr	r0, [pc, #236]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056e4:	f004 fb50 	bl	8009d88 <HAL_DMA_Init>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80056ee:	f000 f9b3 	bl	8005a58 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a36      	ldr	r2, [pc, #216]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056f6:	635a      	str	r2, [r3, #52]	; 0x34
 80056f8:	4a35      	ldr	r2, [pc, #212]	; (80057d0 <HAL_I2C_MspInit+0x204>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2100      	movs	r1, #0
 8005702:	2020      	movs	r0, #32
 8005704:	f004 fadf 	bl	8009cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005708:	2020      	movs	r0, #32
 800570a:	f004 faf8 	bl	8009cfe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800570e:	e050      	b.n	80057b2 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a30      	ldr	r2, [pc, #192]	; (80057d8 <HAL_I2C_MspInit+0x20c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d14b      	bne.n	80057b2 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	4a27      	ldr	r2, [pc, #156]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	6313      	str	r3, [r2, #48]	; 0x30
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005740:	f043 0302 	orr.w	r3, r3, #2
 8005744:	6313      	str	r3, [r2, #48]	; 0x30
 8005746:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005758:	2312      	movs	r3, #18
 800575a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575c:	2300      	movs	r3, #0
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005760:	2303      	movs	r3, #3
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005764:	2304      	movs	r3, #4
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	4619      	mov	r1, r3
 800576e:	481b      	ldr	r0, [pc, #108]	; (80057dc <HAL_I2C_MspInit+0x210>)
 8005770:	f004 ff1a 	bl	800a5a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800577a:	2312      	movs	r3, #18
 800577c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005782:	2303      	movs	r3, #3
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005786:	2309      	movs	r3, #9
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578a:	f107 031c 	add.w	r3, r7, #28
 800578e:	4619      	mov	r1, r3
 8005790:	480c      	ldr	r0, [pc, #48]	; (80057c4 <HAL_I2C_MspInit+0x1f8>)
 8005792:	f004 ff09 	bl	800a5a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 80057a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057a4:	6413      	str	r3, [r2, #64]	; 0x40
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_I2C_MspInit+0x1f4>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
}
 80057b2:	bf00      	nop
 80057b4:	3730      	adds	r7, #48	; 0x30
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40005400 	.word	0x40005400
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40020400 	.word	0x40020400
 80057c8:	20000444 	.word	0x20000444
 80057cc:	40026010 	.word	0x40026010
 80057d0:	20000390 	.word	0x20000390
 80057d4:	40026028 	.word	0x40026028
 80057d8:	40005c00 	.word	0x40005c00
 80057dc:	40020000 	.word	0x40020000

080057e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057e6:	f004 f899 	bl	800991c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057ea:	f000 f857 	bl	800589c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057ee:	f7ff fdfd 	bl	80053ec <MX_GPIO_Init>
  MX_SPI1_Init();
 80057f2:	f003 fad5 	bl	8008da0 <MX_SPI1_Init>
  MX_DMA_Init();
 80057f6:	f7fc fe7d 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80057fa:	f003 ff8f 	bl	800971c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80057fe:	f003 fb05 	bl	8008e0c <MX_SPI3_Init>
  MX_I2C1_Init();
 8005802:	f7ff fe87 	bl	8005514 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005806:	f003 fd7b 	bl	8009300 <MX_TIM11_Init>
  MX_TIM10_Init();
 800580a:	f003 fd55 	bl	80092b8 <MX_TIM10_Init>
  MX_I2C3_Init();
 800580e:	f7ff feaf 	bl	8005570 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005812:	f000 f8ab 	bl	800596c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005816:	481b      	ldr	r0, [pc, #108]	; (8005884 <main+0xa4>)
 8005818:	f009 fa5e 	bl	800ecd8 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 800581c:	481a      	ldr	r0, [pc, #104]	; (8005888 <main+0xa8>)
 800581e:	f7fc fbc9 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005822:	491a      	ldr	r1, [pc, #104]	; (800588c <main+0xac>)
 8005824:	481a      	ldr	r0, [pc, #104]	; (8005890 <main+0xb0>)
 8005826:	f003 ff2a 	bl	800967e <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800582a:	2117      	movs	r1, #23
 800582c:	4819      	ldr	r0, [pc, #100]	; (8005894 <main+0xb4>)
 800582e:	f7fc fe11 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8005832:	4819      	ldr	r0, [pc, #100]	; (8005898 <main+0xb8>)
 8005834:	f7fc fe96 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8005838:	2001      	movs	r0, #1
 800583a:	f7fc feed 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 800583e:	2001      	movs	r0, #1
 8005840:	f7fc ff0a 	bl	8002658 <DS3231_EnableOscillator>
  // EEPROM CHECK
  uint8_t result = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8005848:	e001      	b.n	800584e <main+0x6e>
  Error_Handler();
 800584a:	f000 f905 	bl	8005a58 <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 800584e:	1dfb      	adds	r3, r7, #7
 8005850:	2201      	movs	r2, #1
 8005852:	4619      	mov	r1, r3
 8005854:	2001      	movs	r0, #1
 8005856:	f7fd f84b 	bl	80028f0 <eeprom_read>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f4      	bne.n	800584a <main+0x6a>
  {

	  //
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005860:	480b      	ldr	r0, [pc, #44]	; (8005890 <main+0xb0>)
 8005862:	f003 febf 	bl	80095e4 <UARTDMA_IsDataReceivedReady>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 800586c:	4808      	ldr	r0, [pc, #32]	; (8005890 <main+0xb0>)
 800586e:	f002 fdd9 	bl	8008424 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005872:	4807      	ldr	r0, [pc, #28]	; (8005890 <main+0xb0>)
 8005874:	f003 fec8 	bl	8009608 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8005878:	f7fc fd1a 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 800587c:	f000 f928 	bl	8005ad0 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005880:	e7ee      	b.n	8005860 <main+0x80>
 8005882:	bf00      	nop
 8005884:	200007b0 	.word	0x200007b0
 8005888:	20000710 	.word	0x20000710
 800588c:	200008b8 	.word	0x200008b8
 8005890:	200004a4 	.word	0x200004a4
 8005894:	200006b8 	.word	0x200006b8
 8005898:	200003f0 	.word	0x200003f0

0800589c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b094      	sub	sp, #80	; 0x50
 80058a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058a2:	f107 0320 	add.w	r3, r7, #32
 80058a6:	2230      	movs	r2, #48	; 0x30
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f00a fddc 	bl	8010468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	4b27      	ldr	r3, [pc, #156]	; (8005964 <SystemClock_Config+0xc8>)
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <SystemClock_Config+0xc8>)
 80058ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ce:	6413      	str	r3, [r2, #64]	; 0x40
 80058d0:	4b24      	ldr	r3, [pc, #144]	; (8005964 <SystemClock_Config+0xc8>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058dc:	2300      	movs	r3, #0
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <SystemClock_Config+0xcc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a20      	ldr	r2, [pc, #128]	; (8005968 <SystemClock_Config+0xcc>)
 80058e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <SystemClock_Config+0xcc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005902:	2302      	movs	r3, #2
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800590c:	230c      	movs	r3, #12
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005910:	2360      	movs	r3, #96	; 0x60
 8005912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005914:	2302      	movs	r3, #2
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005918:	2304      	movs	r3, #4
 800591a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800591c:	f107 0320 	add.w	r3, r7, #32
 8005920:	4618      	mov	r0, r3
 8005922:	f008 f92d 	bl	800db80 <HAL_RCC_OscConfig>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800592c:	f000 f894 	bl	8005a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005930:	230f      	movs	r3, #15
 8005932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005934:	2302      	movs	r3, #2
 8005936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800593c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005946:	f107 030c 	add.w	r3, r7, #12
 800594a:	2103      	movs	r1, #3
 800594c:	4618      	mov	r0, r3
 800594e:	f008 fb8f 	bl	800e070 <HAL_RCC_ClockConfig>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005958:	f000 f87e 	bl	8005a58 <Error_Handler>
  }
}
 800595c:	bf00      	nop
 800595e:	3750      	adds	r7, #80	; 0x50
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40023800 	.word	0x40023800
 8005968:	40007000 	.word	0x40007000

0800596c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005970:	2200      	movs	r2, #0
 8005972:	2100      	movs	r1, #0
 8005974:	200a      	movs	r0, #10
 8005976:	f004 f9a6 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800597a:	200a      	movs	r0, #10
 800597c:	f004 f9bf 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	2017      	movs	r0, #23
 8005986:	f004 f99e 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800598a:	2017      	movs	r0, #23
 800598c:	f004 f9b7 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005990:	2200      	movs	r2, #0
 8005992:	2100      	movs	r1, #0
 8005994:	201f      	movs	r0, #31
 8005996:	f004 f996 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800599a:	201f      	movs	r0, #31
 800599c:	f004 f9af 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2100      	movs	r1, #0
 80059a4:	2026      	movs	r0, #38	; 0x26
 80059a6:	f004 f98e 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059aa:	2026      	movs	r0, #38	; 0x26
 80059ac:	f004 f9a7 	bl	8009cfe <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80059b0:	2200      	movs	r2, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	2033      	movs	r0, #51	; 0x33
 80059b6:	f004 f986 	bl	8009cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80059ba:	2033      	movs	r0, #51	; 0x33
 80059bc:	f004 f99f 	bl	8009cfe <HAL_NVIC_EnableIRQ>
}
 80059c0:	bf00      	nop
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80059d6:	f7ff f929 	bl	8004c2c <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d117      	bne.n	8005a14 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d90d      	bls.n	8005a08 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 80059ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059f0:	480d      	ldr	r0, [pc, #52]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80059f2:	f004 ff8e 	bl	800a912 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80059f6:	2000      	movs	r0, #0
 80059f8:	f7ff f9a4 	bl	8004d44 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 80059fc:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005a02:	480a      	ldr	r0, [pc, #40]	; (8005a2c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005a04:	f009 f9ca 	bl	800ed9c <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a12:	701a      	strb	r2, [r3, #0]
	}
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40014800 	.word	0x40014800
 8005a20:	40014400 	.word	0x40014400
 8005a24:	20000254 	.word	0x20000254
 8005a28:	40020800 	.word	0x40020800
 8005a2c:	20000768 	.word	0x20000768

08005a30 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a40:	d101      	bne.n	8005a46 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005a42:	f7fc fcfb 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d101      	bne.n	8005a50 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005a4c:	f7fc fe48 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005a5e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005a62:	f7fc fa49 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005a66:	4814      	ldr	r0, [pc, #80]	; (8005ab8 <Error_Handler+0x60>)
 8005a68:	f7fb fe42 	bl	80016f0 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005a6c:	4a13      	ldr	r2, [pc, #76]	; (8005abc <Error_Handler+0x64>)
 8005a6e:	4914      	ldr	r1, [pc, #80]	; (8005ac0 <Error_Handler+0x68>)
 8005a70:	4814      	ldr	r0, [pc, #80]	; (8005ac4 <Error_Handler+0x6c>)
 8005a72:	f00b fb81 	bl	8011178 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005a76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2300      	movs	r3, #0
 8005a82:	2214      	movs	r2, #20
 8005a84:	210a      	movs	r1, #10
 8005a86:	480f      	ldr	r0, [pc, #60]	; (8005ac4 <Error_Handler+0x6c>)
 8005a88:	f7fc f84c 	bl	8001b24 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005a8c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <Error_Handler+0x70>)
 8005a92:	490e      	ldr	r1, [pc, #56]	; (8005acc <Error_Handler+0x74>)
 8005a94:	480b      	ldr	r0, [pc, #44]	; (8005ac4 <Error_Handler+0x6c>)
 8005a96:	f00b fb6f 	bl	8011178 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005a9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2232      	movs	r2, #50	; 0x32
 8005aa8:	210a      	movs	r1, #10
 8005aaa:	4806      	ldr	r0, [pc, #24]	; (8005ac4 <Error_Handler+0x6c>)
 8005aac:	f7fc f83a 	bl	8001b24 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab0:	b672      	cpsid	i
}
 8005ab2:	bf00      	nop

  __disable_irq();

  while (1)
 8005ab4:	e7fe      	b.n	8005ab4 <Error_Handler+0x5c>
 8005ab6:	bf00      	nop
 8005ab8:	08016164 	.word	0x08016164
 8005abc:	08015288 	.word	0x08015288
 8005ac0:	0801529c 	.word	0x0801529c
 8005ac4:	200002fc 	.word	0x200002fc
 8005ac8:	080287d8 	.word	0x080287d8
 8005acc:	080152b4 	.word	0x080152b4

08005ad0 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
	switch(State)
 8005ad4:	4b4f      	ldr	r3, [pc, #316]	; (8005c14 <MenuTFT+0x144>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	f200 8098 	bhi.w	8005c0e <MenuTFT+0x13e>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <MenuTFT+0x14>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b1b 	.word	0x08005b1b
 8005aec:	08005b4f 	.word	0x08005b4f
 8005af0:	08005b7f 	.word	0x08005b7f
 8005af4:	08005b9d 	.word	0x08005b9d
 8005af8:	08005b67 	.word	0x08005b67
 8005afc:	08005bb5 	.word	0x08005bb5
 8005b00:	08005bd3 	.word	0x08005bd3
 8005b04:	08005bf1 	.word	0x08005bf1
	{
	case MENUTFT_INIT:
		system_init();
 8005b08:	f7fd faf6 	bl	80030f8 <system_init>
		State = MENUTFT_PARAMETERS;
 8005b0c:	4b41      	ldr	r3, [pc, #260]	; (8005c14 <MenuTFT+0x144>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <MenuTFT+0x148>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
		break;
 8005b18:	e079      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005b1a:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <MenuTFT+0x148>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d112      	bne.n	8005b48 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005b22:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <MenuTFT+0x14c>)
 8005b24:	edd3 7a00 	vldr	s15, [r3]
 8005b28:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <MenuTFT+0x150>)
 8005b2a:	ed93 7a00 	vldr	s14, [r3]
 8005b2e:	eeb0 1a47 	vmov.f32	s2, s14
 8005b32:	2100      	movs	r1, #0
 8005b34:	2000      	movs	r0, #0
 8005b36:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005c24 <MenuTFT+0x154>
 8005b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b3e:	f7fd fc59 	bl	80033f4 <showCurrentParameters>
			StateChangeFlag = 0;
 8005b42:	4b35      	ldr	r3, [pc, #212]	; (8005c18 <MenuTFT+0x148>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005b48:	f000 f874 	bl	8005c34 <TouchParametersActivity>
		break;
 8005b4c:	e05f      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005b4e:	4b32      	ldr	r3, [pc, #200]	; (8005c18 <MenuTFT+0x148>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d104      	bne.n	8005b60 <MenuTFT+0x90>
		{
			showControlPanel();
 8005b56:	f7fd fd97 	bl	8003688 <showControlPanel>
			StateChangeFlag = 0;
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <MenuTFT+0x148>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005b60:	f000 f8c8 	bl	8005cf4 <TouchSwitchActivity>
		break;
 8005b64:	e053      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005b66:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <MenuTFT+0x148>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d104      	bne.n	8005b78 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005b6e:	f7fd fe65 	bl	800383c <showLightsControlPanel>
			StateChangeFlag = 0;
 8005b72:	4b29      	ldr	r3, [pc, #164]	; (8005c18 <MenuTFT+0x148>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005b78:	f000 f92e 	bl	8005dd8 <TouchLightsActivity>
		break;
 8005b7c:	e047      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005b7e:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <MenuTFT+0x148>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005b86:	f7fd ff31 	bl	80039ec <showClockSetPanel>
			ClockChangeFlag = 1;
 8005b8a:	4b27      	ldr	r3, [pc, #156]	; (8005c28 <MenuTFT+0x158>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <MenuTFT+0x148>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005b96:	f000 f98f 	bl	8005eb8 <TouchClockActivity>
		break;
 8005b9a:	e038      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005b9c:	4b1e      	ldr	r3, [pc, #120]	; (8005c18 <MenuTFT+0x148>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d104      	bne.n	8005bae <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005ba4:	f7fe f88a 	bl	8003cbc <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <MenuTFT+0x148>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005bae:	f000 fa47 	bl	8006040 <TouchPredefinedActivityActivity>
		break;
 8005bb2:	e02c      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005bb4:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <MenuTFT+0x148>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d107      	bne.n	8005bcc <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005bbc:	f7fe f98e 	bl	8003edc <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005bc0:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <MenuTFT+0x15c>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <MenuTFT+0x148>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005bcc:	f000 fa82 	bl	80060d4 <TouchWSLedActivity>
		break;
 8005bd0:	e01d      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <MenuTFT+0x148>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d107      	bne.n	8005bea <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005bda:	f7fe ff1b 	bl	8004a14 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005bde:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <MenuTFT+0x160>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <MenuTFT+0x148>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005bea:	f000 fadf 	bl	80061ac <Schedule1Activity>
		break;
 8005bee:	e00e      	b.n	8005c0e <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <MenuTFT+0x148>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d107      	bne.n	8005c08 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005bf8:	f7fe ffa0 	bl	8004b3c <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <MenuTFT+0x160>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <MenuTFT+0x148>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005c08:	f000 fbd2 	bl	80063b0 <Schedule2Activity>
		break;
 8005c0c:	bf00      	nop
	}
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000290 	.word	0x20000290
 8005c18:	20000255 	.word	0x20000255
 8005c1c:	20000294 	.word	0x20000294
 8005c20:	2000029c 	.word	0x2000029c
 8005c24:	00000000 	.word	0x00000000
 8005c28:	20000256 	.word	0x20000256
 8005c2c:	20000257 	.word	0x20000257
 8005c30:	20000258 	.word	0x20000258

08005c34 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005c3a:	f7fc fb27 	bl	800228c <XPT2046_IsTouched>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d04c      	beq.n	8005cde <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005c44:	f003 fed0 	bl	80099e8 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <TouchParametersActivity+0xb4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c54:	d343      	bcc.n	8005cde <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005c56:	1d3a      	adds	r2, r7, #4
 8005c58:	1dbb      	adds	r3, r7, #6
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fc fad7 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	d90f      	bls.n	8005c88 <TouchParametersActivity+0x54>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b6e      	cmp	r3, #110	; 0x6e
 8005c6c:	d80c      	bhi.n	8005c88 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005c6e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005c70:	2bd7      	cmp	r3, #215	; 0xd7
 8005c72:	d909      	bls.n	8005c88 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	2bec      	cmp	r3, #236	; 0xec
 8005c78:	d806      	bhi.n	8005c88 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005c7a:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <TouchParametersActivity+0xb8>)
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <TouchParametersActivity+0xbc>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e025      	b.n	8005cd4 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2bdb      	cmp	r3, #219	; 0xdb
 8005c8c:	d910      	bls.n	8005cb0 <TouchParametersActivity+0x7c>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005c94:	d20c      	bcs.n	8005cb0 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005c96:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005c98:	2bd7      	cmp	r3, #215	; 0xd7
 8005c9a:	d909      	bls.n	8005cb0 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005c9c:	88bb      	ldrh	r3, [r7, #4]
 8005c9e:	2bec      	cmp	r3, #236	; 0xec
 8005ca0:	d806      	bhi.n	8005cb0 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <TouchParametersActivity+0xb8>)
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <TouchParametersActivity+0xbc>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e011      	b.n	8005cd4 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	2b77      	cmp	r3, #119	; 0x77
 8005cb4:	d90e      	bls.n	8005cd4 <TouchParametersActivity+0xa0>
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	2bd2      	cmp	r3, #210	; 0xd2
 8005cba:	d80b      	bhi.n	8005cd4 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005cbc:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005cbe:	2bd7      	cmp	r3, #215	; 0xd7
 8005cc0:	d908      	bls.n	8005cd4 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005cc2:	88bb      	ldrh	r3, [r7, #4]
 8005cc4:	2bec      	cmp	r3, #236	; 0xec
 8005cc6:	d805      	bhi.n	8005cd4 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <TouchParametersActivity+0xb8>)
 8005cca:	2203      	movs	r2, #3
 8005ccc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <TouchParametersActivity+0xbc>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005cd4:	f003 fe88 	bl	80099e8 <HAL_GetTick>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4a03      	ldr	r2, [pc, #12]	; (8005ce8 <TouchParametersActivity+0xb4>)
 8005cdc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2000028c 	.word	0x2000028c
 8005cec:	20000290 	.word	0x20000290
 8005cf0:	20000255 	.word	0x20000255

08005cf4 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005cfa:	f7fc fac7 	bl	800228c <XPT2046_IsTouched>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d05d      	beq.n	8005dc0 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005d04:	f003 fe70 	bl	80099e8 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	; (8005dc8 <TouchSwitchActivity+0xd4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d14:	d354      	bcc.n	8005dc0 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005d16:	1d3a      	adds	r2, r7, #4
 8005d18:	1dbb      	adds	r3, r7, #6
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fc fa77 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d90f      	bls.n	8005d48 <TouchSwitchActivity+0x54>
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	2b6e      	cmp	r3, #110	; 0x6e
 8005d2c:	d80c      	bhi.n	8005d48 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d2e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d30:	2bd7      	cmp	r3, #215	; 0xd7
 8005d32:	d909      	bls.n	8005d48 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d34:	88bb      	ldrh	r3, [r7, #4]
 8005d36:	2bec      	cmp	r3, #236	; 0xec
 8005d38:	d806      	bhi.n	8005d48 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <TouchSwitchActivity+0xd8>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d40:	4b23      	ldr	r3, [pc, #140]	; (8005dd0 <TouchSwitchActivity+0xdc>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e036      	b.n	8005db6 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	2bdb      	cmp	r3, #219	; 0xdb
 8005d4c:	d910      	bls.n	8005d70 <TouchSwitchActivity+0x7c>
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005d54:	d20c      	bcs.n	8005d70 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d56:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d58:	2bd7      	cmp	r3, #215	; 0xd7
 8005d5a:	d909      	bls.n	8005d70 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d5c:	88bb      	ldrh	r3, [r7, #4]
 8005d5e:	2bec      	cmp	r3, #236	; 0xec
 8005d60:	d806      	bhi.n	8005d70 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005d62:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <TouchSwitchActivity+0xd8>)
 8005d64:	2205      	movs	r2, #5
 8005d66:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <TouchSwitchActivity+0xdc>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e022      	b.n	8005db6 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	2b77      	cmp	r3, #119	; 0x77
 8005d74:	d90f      	bls.n	8005d96 <TouchSwitchActivity+0xa2>
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2bd2      	cmp	r3, #210	; 0xd2
 8005d7a:	d80c      	bhi.n	8005d96 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d7c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d7e:	2bd7      	cmp	r3, #215	; 0xd7
 8005d80:	d909      	bls.n	8005d96 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d82:	88bb      	ldrh	r3, [r7, #4]
 8005d84:	2bec      	cmp	r3, #236	; 0xec
 8005d86:	d806      	bhi.n	8005d96 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005d88:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <TouchSwitchActivity+0xd8>)
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <TouchSwitchActivity+0xdc>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e00f      	b.n	8005db6 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005d9c:	d30b      	bcc.n	8005db6 <TouchSwitchActivity+0xc2>
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005da4:	d207      	bcs.n	8005db6 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005da6:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <TouchSwitchActivity+0xe0>)
 8005da8:	f7fb fca2 	bl	80016f0 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005dac:	88bb      	ldrh	r3, [r7, #4]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fe55 	bl	8007a60 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005db6:	f003 fe17 	bl	80099e8 <HAL_GetTick>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4a02      	ldr	r2, [pc, #8]	; (8005dc8 <TouchSwitchActivity+0xd4>)
 8005dbe:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	2000028c 	.word	0x2000028c
 8005dcc:	20000290 	.word	0x20000290
 8005dd0:	20000255 	.word	0x20000255
 8005dd4:	08016164 	.word	0x08016164

08005dd8 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005dde:	f7fc fa55 	bl	800228c <XPT2046_IsTouched>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d05b      	beq.n	8005ea0 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005de8:	f003 fdfe 	bl	80099e8 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b2e      	ldr	r3, [pc, #184]	; (8005ea8 <TouchLightsActivity+0xd0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df8:	d352      	bcc.n	8005ea0 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005dfa:	1d3a      	adds	r2, r7, #4
 8005dfc:	1dbb      	adds	r3, r7, #6
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fc fa05 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d90f      	bls.n	8005e2c <TouchLightsActivity+0x54>
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	2b6e      	cmp	r3, #110	; 0x6e
 8005e10:	d80c      	bhi.n	8005e2c <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e12:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e14:	2bd7      	cmp	r3, #215	; 0xd7
 8005e16:	d909      	bls.n	8005e2c <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e18:	88bb      	ldrh	r3, [r7, #4]
 8005e1a:	2bec      	cmp	r3, #236	; 0xec
 8005e1c:	d806      	bhi.n	8005e2c <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <TouchLightsActivity+0xd4>)
 8005e20:	2202      	movs	r2, #2
 8005e22:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e24:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <TouchLightsActivity+0xd8>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e034      	b.n	8005e96 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	2bdb      	cmp	r3, #219	; 0xdb
 8005e30:	d910      	bls.n	8005e54 <TouchLightsActivity+0x7c>
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005e38:	d20c      	bcs.n	8005e54 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e3a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e3c:	2bd7      	cmp	r3, #215	; 0xd7
 8005e3e:	d909      	bls.n	8005e54 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e40:	88bb      	ldrh	r3, [r7, #4]
 8005e42:	2bec      	cmp	r3, #236	; 0xec
 8005e44:	d806      	bhi.n	8005e54 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005e46:	4b19      	ldr	r3, [pc, #100]	; (8005eac <TouchLightsActivity+0xd4>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e4c:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <TouchLightsActivity+0xd8>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e020      	b.n	8005e96 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b77      	cmp	r3, #119	; 0x77
 8005e58:	d90f      	bls.n	8005e7a <TouchLightsActivity+0xa2>
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	2bd2      	cmp	r3, #210	; 0xd2
 8005e5e:	d80c      	bhi.n	8005e7a <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e60:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e62:	2bd7      	cmp	r3, #215	; 0xd7
 8005e64:	d909      	bls.n	8005e7a <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e66:	88bb      	ldrh	r3, [r7, #4]
 8005e68:	2bec      	cmp	r3, #236	; 0xec
 8005e6a:	d806      	bhi.n	8005e7a <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <TouchLightsActivity+0xd4>)
 8005e6e:	2206      	movs	r2, #6
 8005e70:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <TouchLightsActivity+0xd8>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e00d      	b.n	8005e96 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	2bc7      	cmp	r3, #199	; 0xc7
 8005e7e:	d90a      	bls.n	8005e96 <TouchLightsActivity+0xbe>
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2be9      	cmp	r3, #233	; 0xe9
 8005e84:	d807      	bhi.n	8005e96 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005e86:	480b      	ldr	r0, [pc, #44]	; (8005eb4 <TouchLightsActivity+0xdc>)
 8005e88:	f7fb fc32 	bl	80016f0 <EF_SetFont>
				changeLightsStatusTouch(y);
 8005e8c:	88bb      	ldrh	r3, [r7, #4]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 ff5b 	bl	8007d4c <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8005e96:	f003 fda7 	bl	80099e8 <HAL_GetTick>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4a02      	ldr	r2, [pc, #8]	; (8005ea8 <TouchLightsActivity+0xd0>)
 8005e9e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	2000028c 	.word	0x2000028c
 8005eac:	20000290 	.word	0x20000290
 8005eb0:	20000255 	.word	0x20000255
 8005eb4:	08016164 	.word	0x08016164

08005eb8 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8005ebe:	f7fc f9e5 	bl	800228c <XPT2046_IsTouched>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a3 	beq.w	8006010 <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005eca:	4853      	ldr	r0, [pc, #332]	; (8006018 <TouchClockActivity+0x160>)
 8005ecc:	f7fb fc10 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005ed0:	f003 fd8a 	bl	80099e8 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b51      	ldr	r3, [pc, #324]	; (800601c <TouchClockActivity+0x164>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee0:	f0c0 8096 	bcc.w	8006010 <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005ee4:	1d3a      	adds	r2, r7, #4
 8005ee6:	1dbb      	adds	r3, r7, #6
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fc f990 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <TouchClockActivity+0x168>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d114      	bne.n	8005f22 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8005ef8:	f7fc fc4c 	bl	8002794 <DS3231_GetHour>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	4b48      	ldr	r3, [pc, #288]	; (8006024 <TouchClockActivity+0x16c>)
 8005f02:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8005f04:	f7fc fc52 	bl	80027ac <DS3231_GetMinute>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b46      	ldr	r3, [pc, #280]	; (8006028 <TouchClockActivity+0x170>)
 8005f0e:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8005f10:	f7fc fc34 	bl	800277c <DS3231_GetDayOfWeek>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b44      	ldr	r3, [pc, #272]	; (800602c <TouchClockActivity+0x174>)
 8005f1a:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8005f1c:	4b40      	ldr	r3, [pc, #256]	; (8006020 <TouchClockActivity+0x168>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d90f      	bls.n	8005f48 <TouchClockActivity+0x90>
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	2b6e      	cmp	r3, #110	; 0x6e
 8005f2c:	d80c      	bhi.n	8005f48 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f2e:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f30:	2bd7      	cmp	r3, #215	; 0xd7
 8005f32:	d909      	bls.n	8005f48 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f34:	88bb      	ldrh	r3, [r7, #4]
 8005f36:	2bec      	cmp	r3, #236	; 0xec
 8005f38:	d806      	bhi.n	8005f48 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <TouchClockActivity+0x178>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005f40:	4b3c      	ldr	r3, [pc, #240]	; (8006034 <TouchClockActivity+0x17c>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e05e      	b.n	8006006 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	2bdb      	cmp	r3, #219	; 0xdb
 8005f4c:	d92c      	bls.n	8005fa8 <TouchClockActivity+0xf0>
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005f54:	d228      	bcs.n	8005fa8 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005f56:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005f58:	2bd7      	cmp	r3, #215	; 0xd7
 8005f5a:	d925      	bls.n	8005fa8 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005f5c:	88bb      	ldrh	r3, [r7, #4]
 8005f5e:	2bec      	cmp	r3, #236	; 0xec
 8005f60:	d822      	bhi.n	8005fa8 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 8005f62:	4b32      	ldr	r3, [pc, #200]	; (800602c <TouchClockActivity+0x174>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fc fc2c 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8005f6c:	4b2d      	ldr	r3, [pc, #180]	; (8006024 <TouchClockActivity+0x16c>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fc fc39 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005f76:	4b2c      	ldr	r3, [pc, #176]	; (8006028 <TouchClockActivity+0x170>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fc fc49 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8005f80:	2032      	movs	r0, #50	; 0x32
 8005f82:	f7fc fc58 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005f86:	492c      	ldr	r1, [pc, #176]	; (8006038 <TouchClockActivity+0x180>)
 8005f88:	482c      	ldr	r0, [pc, #176]	; (800603c <TouchClockActivity+0x184>)
 8005f8a:	f00b f8f5 	bl	8011178 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8005f8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	2301      	movs	r3, #1
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005f9c:	220a      	movs	r2, #10
 8005f9e:	212f      	movs	r1, #47	; 0x2f
 8005fa0:	4826      	ldr	r0, [pc, #152]	; (800603c <TouchClockActivity+0x184>)
 8005fa2:	f7fb fdbf 	bl	8001b24 <EF_PutString>
 8005fa6:	e02e      	b.n	8006006 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b6d      	cmp	r3, #109	; 0x6d
 8005fac:	d90f      	bls.n	8005fce <TouchClockActivity+0x116>
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	2bdc      	cmp	r3, #220	; 0xdc
 8005fb2:	d80c      	bhi.n	8005fce <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8005fb4:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8005fb6:	2bbd      	cmp	r3, #189	; 0xbd
 8005fb8:	d909      	bls.n	8005fce <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8005fba:	88bb      	ldrh	r3, [r7, #4]
 8005fbc:	2bd4      	cmp	r3, #212	; 0xd4
 8005fbe:	d806      	bhi.n	8005fce <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <TouchClockActivity+0x178>)
 8005fc2:	2207      	movs	r2, #7
 8005fc4:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <TouchClockActivity+0x17c>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	e01b      	b.n	8006006 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2bef      	cmp	r3, #239	; 0xef
 8005fd2:	d90a      	bls.n	8005fea <TouchClockActivity+0x132>
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005fda:	d806      	bhi.n	8005fea <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	88ba      	ldrh	r2, [r7, #4]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fc36 	bl	8007854 <clockIncreaseOneHourAndMinute>
 8005fe8:	e00d      	b.n	8006006 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8005ff0:	d309      	bcc.n	8006006 <TouchClockActivity+0x14e>
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8005ff8:	d805      	bhi.n	8006006 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	88ba      	ldrh	r2, [r7, #4]
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fcb5 	bl	8007970 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 8006006:	f003 fcef 	bl	80099e8 <HAL_GetTick>
 800600a:	4603      	mov	r3, r0
 800600c:	4a03      	ldr	r2, [pc, #12]	; (800601c <TouchClockActivity+0x164>)
 800600e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	080180dc 	.word	0x080180dc
 800601c:	2000028c 	.word	0x2000028c
 8006020:	20000256 	.word	0x20000256
 8006024:	20000031 	.word	0x20000031
 8006028:	20000032 	.word	0x20000032
 800602c:	20000030 	.word	0x20000030
 8006030:	20000290 	.word	0x20000290
 8006034:	20000255 	.word	0x20000255
 8006038:	080152cc 	.word	0x080152cc
 800603c:	200002fc 	.word	0x200002fc

08006040 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 8006046:	f7fc f921 	bl	800228c <XPT2046_IsTouched>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d034      	beq.n	80060ba <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006050:	f003 fcca 	bl	80099e8 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <TouchPredefinedActivityActivity+0x84>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006060:	d32b      	bcc.n	80060ba <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006062:	1d3a      	adds	r2, r7, #4
 8006064:	1dbb      	adds	r3, r7, #6
 8006066:	4611      	mov	r1, r2
 8006068:	4618      	mov	r0, r3
 800606a:	f7fc f8d1 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 800606e:	4816      	ldr	r0, [pc, #88]	; (80060c8 <TouchPredefinedActivityActivity+0x88>)
 8006070:	f7fb fb3e 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	2b09      	cmp	r3, #9
 8006078:	d90f      	bls.n	800609a <TouchPredefinedActivityActivity+0x5a>
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b6e      	cmp	r3, #110	; 0x6e
 800607e:	d80c      	bhi.n	800609a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006080:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006082:	2bd7      	cmp	r3, #215	; 0xd7
 8006084:	d909      	bls.n	800609a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006086:	88bb      	ldrh	r3, [r7, #4]
 8006088:	2bec      	cmp	r3, #236	; 0xec
 800608a:	d806      	bhi.n	800609a <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <TouchPredefinedActivityActivity+0x8c>)
 800608e:	2202      	movs	r2, #2
 8006090:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <TouchPredefinedActivityActivity+0x90>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e00a      	b.n	80060b0 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2b63      	cmp	r3, #99	; 0x63
 800609e:	d907      	bls.n	80060b0 <TouchPredefinedActivityActivity+0x70>
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	2bdc      	cmp	r3, #220	; 0xdc
 80060a4:	d804      	bhi.n	80060b0 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 80060a6:	88bb      	ldrh	r3, [r7, #4]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 ffb4 	bl	8008018 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 80060b0:	f003 fc9a 	bl	80099e8 <HAL_GetTick>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4a03      	ldr	r2, [pc, #12]	; (80060c4 <TouchPredefinedActivityActivity+0x84>)
 80060b8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000028c 	.word	0x2000028c
 80060c8:	08016164 	.word	0x08016164
 80060cc:	20000290 	.word	0x20000290
 80060d0:	20000255 	.word	0x20000255

080060d4 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80060da:	f7fc f8d7 	bl	800228c <XPT2046_IsTouched>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d050      	beq.n	8006186 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80060e4:	482a      	ldr	r0, [pc, #168]	; (8006190 <TouchWSLedActivity+0xbc>)
 80060e6:	f7fb fb03 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80060ea:	f003 fc7d 	bl	80099e8 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <TouchWSLedActivity+0xc0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060fa:	d344      	bcc.n	8006186 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80060fc:	1d3a      	adds	r2, r7, #4
 80060fe:	1dbb      	adds	r3, r7, #6
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f7fc f884 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006108:	4b23      	ldr	r3, [pc, #140]	; (8006198 <TouchWSLedActivity+0xc4>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10b      	bne.n	8006128 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006110:	bf00      	nop
 8006112:	2201      	movs	r2, #1
 8006114:	4921      	ldr	r1, [pc, #132]	; (800619c <TouchWSLedActivity+0xc8>)
 8006116:	2001      	movs	r0, #1
 8006118:	f7fc fbea 	bl	80028f0 <eeprom_read>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f7      	bne.n	8006112 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 8006122:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <TouchWSLedActivity+0xcc>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006128:	88fb      	ldrh	r3, [r7, #6]
 800612a:	2b09      	cmp	r3, #9
 800612c:	d90f      	bls.n	800614e <TouchWSLedActivity+0x7a>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b6e      	cmp	r3, #110	; 0x6e
 8006132:	d80c      	bhi.n	800614e <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006134:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006136:	2bd7      	cmp	r3, #215	; 0xd7
 8006138:	d909      	bls.n	800614e <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800613a:	88bb      	ldrh	r3, [r7, #4]
 800613c:	2bec      	cmp	r3, #236	; 0xec
 800613e:	d806      	bhi.n	800614e <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006140:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <TouchWSLedActivity+0xd0>)
 8006142:	2205      	movs	r2, #5
 8006144:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <TouchWSLedActivity+0xd4>)
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e016      	b.n	800617c <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 800614e:	88bb      	ldrh	r3, [r7, #4]
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d90b      	bls.n	800616c <TouchWSLedActivity+0x98>
 8006154:	88bb      	ldrh	r3, [r7, #4]
 8006156:	2b56      	cmp	r3, #86	; 0x56
 8006158:	d808      	bhi.n	800616c <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	88ba      	ldrh	r2, [r7, #4]
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	4611      	mov	r1, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f002 f841 	bl	80081ec <increaseNumberOfWSLedOnTFT>
 800616a:	e007      	b.n	800617c <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	88ba      	ldrh	r2, [r7, #4]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f002 f8c2 	bl	8008300 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 800617c:	f003 fc34 	bl	80099e8 <HAL_GetTick>
 8006180:	4603      	mov	r3, r0
 8006182:	4a04      	ldr	r2, [pc, #16]	; (8006194 <TouchWSLedActivity+0xc0>)
 8006184:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	080180dc 	.word	0x080180dc
 8006194:	2000028c 	.word	0x2000028c
 8006198:	20000256 	.word	0x20000256
 800619c:	20000033 	.word	0x20000033
 80061a0:	20000257 	.word	0x20000257
 80061a4:	20000290 	.word	0x20000290
 80061a8:	20000255 	.word	0x20000255

080061ac <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 80061b2:	4b70      	ldr	r3, [pc, #448]	; (8006374 <Schedule1Activity+0x1c8>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d105      	bne.n	80061c6 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 80061ba:	2001      	movs	r0, #1
 80061bc:	f001 faf6 	bl	80077ac <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 80061c0:	4b6c      	ldr	r3, [pc, #432]	; (8006374 <Schedule1Activity+0x1c8>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 80061c6:	f7fc f861 	bl	800228c <XPT2046_IsTouched>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80cc 	beq.w	800636a <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80061d2:	f003 fc09 	bl	80099e8 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	4b67      	ldr	r3, [pc, #412]	; (8006378 <Schedule1Activity+0x1cc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e2:	f0c0 80c2 	bcc.w	800636a <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80061e6:	1d3a      	adds	r2, r7, #4
 80061e8:	1dbb      	adds	r3, r7, #6
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fc f80f 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d90f      	bls.n	8006218 <Schedule1Activity+0x6c>
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2b6e      	cmp	r3, #110	; 0x6e
 80061fc:	d80c      	bhi.n	8006218 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061fe:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006200:	2bd7      	cmp	r3, #215	; 0xd7
 8006202:	d909      	bls.n	8006218 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006204:	88bb      	ldrh	r3, [r7, #4]
 8006206:	2bec      	cmp	r3, #236	; 0xec
 8006208:	d806      	bhi.n	8006218 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800620a:	4b5c      	ldr	r3, [pc, #368]	; (800637c <Schedule1Activity+0x1d0>)
 800620c:	2203      	movs	r2, #3
 800620e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006210:	4b5b      	ldr	r3, [pc, #364]	; (8006380 <Schedule1Activity+0x1d4>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e0a3      	b.n	8006360 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2bdb      	cmp	r3, #219	; 0xdb
 800621c:	d910      	bls.n	8006240 <Schedule1Activity+0x94>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006224:	d20c      	bcs.n	8006240 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006226:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006228:	2bd7      	cmp	r3, #215	; 0xd7
 800622a:	d909      	bls.n	8006240 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800622c:	88bb      	ldrh	r3, [r7, #4]
 800622e:	2bec      	cmp	r3, #236	; 0xec
 8006230:	d806      	bhi.n	8006240 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 8006232:	4b52      	ldr	r3, [pc, #328]	; (800637c <Schedule1Activity+0x1d0>)
 8006234:	2208      	movs	r2, #8
 8006236:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006238:	4b51      	ldr	r3, [pc, #324]	; (8006380 <Schedule1Activity+0x1d4>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e08f      	b.n	8006360 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006240:	88bb      	ldrh	r3, [r7, #4]
 8006242:	2b31      	cmp	r3, #49	; 0x31
 8006244:	d909      	bls.n	800625a <Schedule1Activity+0xae>
 8006246:	88bb      	ldrh	r3, [r7, #4]
 8006248:	2b46      	cmp	r3, #70	; 0x46
 800624a:	d806      	bhi.n	800625a <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	88ba      	ldrh	r2, [r7, #4]
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f99a 	bl	800658c <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006258:	e082      	b.n	8006360 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 800625a:	88bb      	ldrh	r3, [r7, #4]
 800625c:	2b64      	cmp	r3, #100	; 0x64
 800625e:	d909      	bls.n	8006274 <Schedule1Activity+0xc8>
 8006260:	88bb      	ldrh	r3, [r7, #4]
 8006262:	2b79      	cmp	r3, #121	; 0x79
 8006264:	d806      	bhi.n	8006274 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	88ba      	ldrh	r2, [r7, #4]
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fc67 	bl	8006b40 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006272:	e075      	b.n	8006360 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006274:	88bb      	ldrh	r3, [r7, #4]
 8006276:	2b87      	cmp	r3, #135	; 0x87
 8006278:	d909      	bls.n	800628e <Schedule1Activity+0xe2>
 800627a:	88bb      	ldrh	r3, [r7, #4]
 800627c:	2b9c      	cmp	r3, #156	; 0x9c
 800627e:	d806      	bhi.n	800628e <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	88ba      	ldrh	r2, [r7, #4]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fd24 	bl	8006cd4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 800628c:	e068      	b.n	8006360 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800628e:	88bb      	ldrh	r3, [r7, #4]
 8006290:	2ba9      	cmp	r3, #169	; 0xa9
 8006292:	d909      	bls.n	80062a8 <Schedule1Activity+0xfc>
 8006294:	88bb      	ldrh	r3, [r7, #4]
 8006296:	2bbe      	cmp	r3, #190	; 0xbe
 8006298:	d806      	bhi.n	80062a8 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	88ba      	ldrh	r2, [r7, #4]
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 f857 	bl	8007354 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 80062a6:	e05b      	b.n	8006360 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2b77      	cmp	r3, #119	; 0x77
 80062ac:	d958      	bls.n	8006360 <Schedule1Activity+0x1b4>
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	2bd2      	cmp	r3, #210	; 0xd2
 80062b2:	d855      	bhi.n	8006360 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80062b4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80062b6:	2bd7      	cmp	r3, #215	; 0xd7
 80062b8:	d952      	bls.n	8006360 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80062ba:	88bb      	ldrh	r3, [r7, #4]
 80062bc:	2bec      	cmp	r3, #236	; 0xec
 80062be:	d84f      	bhi.n	8006360 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 80062c0:	4b30      	ldr	r3, [pc, #192]	; (8006384 <Schedule1Activity+0x1d8>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	2001      	movs	r0, #1
 80062c8:	f7fc fe89 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 80062cc:	4b2e      	ldr	r3, [pc, #184]	; (8006388 <Schedule1Activity+0x1dc>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	2001      	movs	r0, #1
 80062d4:	f7fc fea6 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 80062d8:	4b2c      	ldr	r3, [pc, #176]	; (800638c <Schedule1Activity+0x1e0>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	2001      	movs	r0, #1
 80062e0:	f7fc fec3 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 80062e4:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <Schedule1Activity+0x1e4>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7fc fee0 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 80062f0:	4928      	ldr	r1, [pc, #160]	; (8006394 <Schedule1Activity+0x1e8>)
 80062f2:	2001      	movs	r0, #1
 80062f4:	f7fc fcd3 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 80062f8:	4927      	ldr	r1, [pc, #156]	; (8006398 <Schedule1Activity+0x1ec>)
 80062fa:	2001      	movs	r0, #1
 80062fc:	f7fc fd7a 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006300:	4826      	ldr	r0, [pc, #152]	; (800639c <Schedule1Activity+0x1f0>)
 8006302:	f7fb f9f5 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006306:	4926      	ldr	r1, [pc, #152]	; (80063a0 <Schedule1Activity+0x1f4>)
 8006308:	4826      	ldr	r0, [pc, #152]	; (80063a4 <Schedule1Activity+0x1f8>)
 800630a:	f00a ff35 	bl	8011178 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800630e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	2301      	movs	r3, #1
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800631c:	220a      	movs	r2, #10
 800631e:	2128      	movs	r1, #40	; 0x28
 8006320:	4820      	ldr	r0, [pc, #128]	; (80063a4 <Schedule1Activity+0x1f8>)
 8006322:	f7fb fbff 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006326:	4820      	ldr	r0, [pc, #128]	; (80063a8 <Schedule1Activity+0x1fc>)
 8006328:	f7fb f9e2 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800632c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	2305      	movs	r3, #5
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2314      	movs	r3, #20
 8006338:	225a      	movs	r2, #90	; 0x5a
 800633a:	21d8      	movs	r1, #216	; 0xd8
 800633c:	2078      	movs	r0, #120	; 0x78
 800633e:	f7fb f986 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006342:	491a      	ldr	r1, [pc, #104]	; (80063ac <Schedule1Activity+0x200>)
 8006344:	4817      	ldr	r0, [pc, #92]	; (80063a4 <Schedule1Activity+0x1f8>)
 8006346:	f00a ff17 	bl	8011178 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800634a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	2300      	movs	r3, #0
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	22da      	movs	r2, #218	; 0xda
 8006358:	217e      	movs	r1, #126	; 0x7e
 800635a:	4812      	ldr	r0, [pc, #72]	; (80063a4 <Schedule1Activity+0x1f8>)
 800635c:	f7fb fbe2 	bl	8001b24 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006360:	f003 fb42 	bl	80099e8 <HAL_GetTick>
 8006364:	4603      	mov	r3, r0
 8006366:	4a04      	ldr	r2, [pc, #16]	; (8006378 <Schedule1Activity+0x1cc>)
 8006368:	6013      	str	r3, [r2, #0]
		}
	}
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000258 	.word	0x20000258
 8006378:	2000028c 	.word	0x2000028c
 800637c:	20000290 	.word	0x20000290
 8006380:	20000255 	.word	0x20000255
 8006384:	20000281 	.word	0x20000281
 8006388:	20000283 	.word	0x20000283
 800638c:	20000282 	.word	0x20000282
 8006390:	20000284 	.word	0x20000284
 8006394:	2000025c 	.word	0x2000025c
 8006398:	20000264 	.word	0x20000264
 800639c:	080180dc 	.word	0x080180dc
 80063a0:	080152dc 	.word	0x080152dc
 80063a4:	200002fc 	.word	0x200002fc
 80063a8:	08016164 	.word	0x08016164
 80063ac:	080152f0 	.word	0x080152f0

080063b0 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 80063b6:	4b66      	ldr	r3, [pc, #408]	; (8006550 <Schedule2Activity+0x1a0>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 80063be:	2002      	movs	r0, #2
 80063c0:	f001 f9f4 	bl	80077ac <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 80063c4:	4b62      	ldr	r3, [pc, #392]	; (8006550 <Schedule2Activity+0x1a0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 80063ca:	f7fb ff5f 	bl	800228c <XPT2046_IsTouched>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80b8 	beq.w	8006546 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80063d6:	f003 fb07 	bl	80099e8 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	4b5d      	ldr	r3, [pc, #372]	; (8006554 <Schedule2Activity+0x1a4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e6:	f0c0 80ae 	bcc.w	8006546 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80063ea:	1d3a      	adds	r2, r7, #4
 80063ec:	1dbb      	adds	r3, r7, #6
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fb ff0d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d90f      	bls.n	800641c <Schedule2Activity+0x6c>
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b6e      	cmp	r3, #110	; 0x6e
 8006400:	d80c      	bhi.n	800641c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006402:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006404:	2bd7      	cmp	r3, #215	; 0xd7
 8006406:	d909      	bls.n	800641c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006408:	88bb      	ldrh	r3, [r7, #4]
 800640a:	2bec      	cmp	r3, #236	; 0xec
 800640c:	d806      	bhi.n	800641c <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800640e:	4b52      	ldr	r3, [pc, #328]	; (8006558 <Schedule2Activity+0x1a8>)
 8006410:	2203      	movs	r2, #3
 8006412:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006414:	4b51      	ldr	r3, [pc, #324]	; (800655c <Schedule2Activity+0x1ac>)
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e08f      	b.n	800653c <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800641c:	88bb      	ldrh	r3, [r7, #4]
 800641e:	2b31      	cmp	r3, #49	; 0x31
 8006420:	d909      	bls.n	8006436 <Schedule2Activity+0x86>
 8006422:	88bb      	ldrh	r3, [r7, #4]
 8006424:	2b46      	cmp	r3, #70	; 0x46
 8006426:	d806      	bhi.n	8006436 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	88ba      	ldrh	r2, [r7, #4]
 800642c:	4611      	mov	r1, r2
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fd1a 	bl	8006e68 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006434:	e082      	b.n	800653c <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006436:	88bb      	ldrh	r3, [r7, #4]
 8006438:	2b64      	cmp	r3, #100	; 0x64
 800643a:	d909      	bls.n	8006450 <Schedule2Activity+0xa0>
 800643c:	88bb      	ldrh	r3, [r7, #4]
 800643e:	2b79      	cmp	r3, #121	; 0x79
 8006440:	d806      	bhi.n	8006450 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	88ba      	ldrh	r2, [r7, #4]
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fdef 	bl	800702c <MenuTFTSchedule2ActivityHourMinuteONAdd>
 800644e:	e075      	b.n	800653c <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006450:	88bb      	ldrh	r3, [r7, #4]
 8006452:	2b87      	cmp	r3, #135	; 0x87
 8006454:	d909      	bls.n	800646a <Schedule2Activity+0xba>
 8006456:	88bb      	ldrh	r3, [r7, #4]
 8006458:	2b9c      	cmp	r3, #156	; 0x9c
 800645a:	d806      	bhi.n	800646a <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	88ba      	ldrh	r2, [r7, #4]
 8006460:	4611      	mov	r1, r2
 8006462:	4618      	mov	r0, r3
 8006464:	f000 feac 	bl	80071c0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006468:	e068      	b.n	800653c <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	2ba9      	cmp	r3, #169	; 0xa9
 800646e:	d909      	bls.n	8006484 <Schedule2Activity+0xd4>
 8006470:	88bb      	ldrh	r3, [r7, #4]
 8006472:	2bbe      	cmp	r3, #190	; 0xbe
 8006474:	d806      	bhi.n	8006484 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	88ba      	ldrh	r2, [r7, #4]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f001 f87f 	bl	8007580 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006482:	e05b      	b.n	800653c <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	2b77      	cmp	r3, #119	; 0x77
 8006488:	d958      	bls.n	800653c <Schedule2Activity+0x18c>
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	2bd2      	cmp	r3, #210	; 0xd2
 800648e:	d855      	bhi.n	800653c <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006490:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006492:	2bd7      	cmp	r3, #215	; 0xd7
 8006494:	d952      	bls.n	800653c <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006496:	88bb      	ldrh	r3, [r7, #4]
 8006498:	2bec      	cmp	r3, #236	; 0xec
 800649a:	d84f      	bhi.n	800653c <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 800649c:	4b30      	ldr	r3, [pc, #192]	; (8006560 <Schedule2Activity+0x1b0>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	2002      	movs	r0, #2
 80064a4:	f7fc fd9b 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 80064a8:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <Schedule2Activity+0x1b4>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	4619      	mov	r1, r3
 80064ae:	2002      	movs	r0, #2
 80064b0:	f7fc fdb8 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 80064b4:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <Schedule2Activity+0x1b8>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	4619      	mov	r1, r3
 80064ba:	2002      	movs	r0, #2
 80064bc:	f7fc fdd5 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 80064c0:	4b2a      	ldr	r3, [pc, #168]	; (800656c <Schedule2Activity+0x1bc>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	2002      	movs	r0, #2
 80064c8:	f7fc fdf2 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 80064cc:	4928      	ldr	r1, [pc, #160]	; (8006570 <Schedule2Activity+0x1c0>)
 80064ce:	2002      	movs	r0, #2
 80064d0:	f7fc fbe5 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 80064d4:	4927      	ldr	r1, [pc, #156]	; (8006574 <Schedule2Activity+0x1c4>)
 80064d6:	2002      	movs	r0, #2
 80064d8:	f7fc fc8c 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 80064dc:	4826      	ldr	r0, [pc, #152]	; (8006578 <Schedule2Activity+0x1c8>)
 80064de:	f7fb f907 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 80064e2:	4926      	ldr	r1, [pc, #152]	; (800657c <Schedule2Activity+0x1cc>)
 80064e4:	4826      	ldr	r0, [pc, #152]	; (8006580 <Schedule2Activity+0x1d0>)
 80064e6:	f00a fe47 	bl	8011178 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 80064ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2301      	movs	r3, #1
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80064f8:	220a      	movs	r2, #10
 80064fa:	2128      	movs	r1, #40	; 0x28
 80064fc:	4820      	ldr	r0, [pc, #128]	; (8006580 <Schedule2Activity+0x1d0>)
 80064fe:	f7fb fb11 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006502:	4820      	ldr	r0, [pc, #128]	; (8006584 <Schedule2Activity+0x1d4>)
 8006504:	f7fb f8f4 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006508:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	2305      	movs	r3, #5
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2314      	movs	r3, #20
 8006514:	225a      	movs	r2, #90	; 0x5a
 8006516:	21d8      	movs	r1, #216	; 0xd8
 8006518:	2078      	movs	r0, #120	; 0x78
 800651a:	f7fb f898 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 800651e:	491a      	ldr	r1, [pc, #104]	; (8006588 <Schedule2Activity+0x1d8>)
 8006520:	4817      	ldr	r0, [pc, #92]	; (8006580 <Schedule2Activity+0x1d0>)
 8006522:	f00a fe29 	bl	8011178 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006526:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	2300      	movs	r3, #0
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	22da      	movs	r2, #218	; 0xda
 8006534:	217e      	movs	r1, #126	; 0x7e
 8006536:	4812      	ldr	r0, [pc, #72]	; (8006580 <Schedule2Activity+0x1d0>)
 8006538:	f7fb faf4 	bl	8001b24 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 800653c:	f003 fa54 	bl	80099e8 <HAL_GetTick>
 8006540:	4603      	mov	r3, r0
 8006542:	4a04      	ldr	r2, [pc, #16]	; (8006554 <Schedule2Activity+0x1a4>)
 8006544:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000258 	.word	0x20000258
 8006554:	2000028c 	.word	0x2000028c
 8006558:	20000290 	.word	0x20000290
 800655c:	20000255 	.word	0x20000255
 8006560:	20000285 	.word	0x20000285
 8006564:	20000287 	.word	0x20000287
 8006568:	20000286 	.word	0x20000286
 800656c:	20000288 	.word	0x20000288
 8006570:	20000270 	.word	0x20000270
 8006574:	20000278 	.word	0x20000278
 8006578:	080180dc 	.word	0x080180dc
 800657c:	080152f8 	.word	0x080152f8
 8006580:	200002fc 	.word	0x200002fc
 8006584:	08016164 	.word	0x08016164
 8006588:	080152f0 	.word	0x080152f0

0800658c <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	460a      	mov	r2, r1
 8006596:	80fb      	strh	r3, [r7, #6]
 8006598:	4613      	mov	r3, r2
 800659a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b3b      	cmp	r3, #59	; 0x3b
 80065a0:	d91a      	bls.n	80065d8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	2b50      	cmp	r3, #80	; 0x50
 80065a6:	d817      	bhi.n	80065d8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80065a8:	4b68      	ldr	r3, [pc, #416]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 80065b0:	2100      	movs	r1, #0
 80065b2:	2001      	movs	r0, #1
 80065b4:	f000 f8cc 	bl	8006750 <changeTFTScheduleDayOfWeek>
 80065b8:	e003      	b.n	80065c2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80065ba:	2101      	movs	r1, #1
 80065bc:	2001      	movs	r0, #1
 80065be:	f000 f8c7 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 80065c2:	4b62      	ldr	r3, [pc, #392]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b5e      	ldr	r3, [pc, #376]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	e0b4      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	2b59      	cmp	r3, #89	; 0x59
 80065dc:	d91a      	bls.n	8006614 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	2b6e      	cmp	r3, #110	; 0x6e
 80065e2:	d817      	bhi.n	8006614 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 80065e4:	4b59      	ldr	r3, [pc, #356]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 80065ec:	2100      	movs	r1, #0
 80065ee:	2002      	movs	r0, #2
 80065f0:	f000 f8ae 	bl	8006750 <changeTFTScheduleDayOfWeek>
 80065f4:	e003      	b.n	80065fe <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 80065f6:	2101      	movs	r1, #1
 80065f8:	2002      	movs	r0, #2
 80065fa:	f000 f8a9 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 80065fe:	4b53      	ldr	r3, [pc, #332]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	4b4f      	ldr	r3, [pc, #316]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006610:	705a      	strb	r2, [r3, #1]
 8006612:	e096      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	2b77      	cmp	r3, #119	; 0x77
 8006618:	d91a      	bls.n	8006650 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	2b8c      	cmp	r3, #140	; 0x8c
 800661e:	d817      	bhi.n	8006650 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006620:	4b4a      	ldr	r3, [pc, #296]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006622:	789b      	ldrb	r3, [r3, #2]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006628:	2100      	movs	r1, #0
 800662a:	2003      	movs	r0, #3
 800662c:	f000 f890 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006630:	e003      	b.n	800663a <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006632:	2101      	movs	r1, #1
 8006634:	2003      	movs	r0, #3
 8006636:	f000 f88b 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 800663a:	4b44      	ldr	r3, [pc, #272]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800663c:	789b      	ldrb	r3, [r3, #2]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	4b40      	ldr	r3, [pc, #256]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800664c:	709a      	strb	r2, [r3, #2]
 800664e:	e078      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	2b95      	cmp	r3, #149	; 0x95
 8006654:	d91a      	bls.n	800668c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	2baa      	cmp	r3, #170	; 0xaa
 800665a:	d817      	bhi.n	800668c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 800665c:	4b3b      	ldr	r3, [pc, #236]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800665e:	78db      	ldrb	r3, [r3, #3]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006664:	2100      	movs	r1, #0
 8006666:	2004      	movs	r0, #4
 8006668:	f000 f872 	bl	8006750 <changeTFTScheduleDayOfWeek>
 800666c:	e003      	b.n	8006676 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800666e:	2101      	movs	r1, #1
 8006670:	2004      	movs	r0, #4
 8006672:	f000 f86d 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006676:	4b35      	ldr	r3, [pc, #212]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006678:	78db      	ldrb	r3, [r3, #3]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bf0c      	ite	eq
 800667e:	2301      	moveq	r3, #1
 8006680:	2300      	movne	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	4b31      	ldr	r3, [pc, #196]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006688:	70da      	strb	r2, [r3, #3]
 800668a:	e05a      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2bb3      	cmp	r3, #179	; 0xb3
 8006690:	d91a      	bls.n	80066c8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	2bc8      	cmp	r3, #200	; 0xc8
 8006696:	d817      	bhi.n	80066c8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006698:	4b2c      	ldr	r3, [pc, #176]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800669a:	791b      	ldrb	r3, [r3, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d004      	beq.n	80066aa <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 80066a0:	2100      	movs	r1, #0
 80066a2:	2005      	movs	r0, #5
 80066a4:	f000 f854 	bl	8006750 <changeTFTScheduleDayOfWeek>
 80066a8:	e003      	b.n	80066b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80066aa:	2101      	movs	r1, #1
 80066ac:	2005      	movs	r0, #5
 80066ae:	f000 f84f 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 80066b2:	4b26      	ldr	r3, [pc, #152]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066b4:	791b      	ldrb	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	4b22      	ldr	r3, [pc, #136]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066c4:	711a      	strb	r2, [r3, #4]
 80066c6:	e03c      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	2bd1      	cmp	r3, #209	; 0xd1
 80066cc:	d91a      	bls.n	8006704 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	2be6      	cmp	r3, #230	; 0xe6
 80066d2:	d817      	bhi.n	8006704 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 80066d4:	4b1d      	ldr	r3, [pc, #116]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066d6:	795b      	ldrb	r3, [r3, #5]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 80066dc:	2100      	movs	r1, #0
 80066de:	2006      	movs	r0, #6
 80066e0:	f000 f836 	bl	8006750 <changeTFTScheduleDayOfWeek>
 80066e4:	e003      	b.n	80066ee <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 80066e6:	2101      	movs	r1, #1
 80066e8:	2006      	movs	r0, #6
 80066ea:	f000 f831 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 80066ee:	4b17      	ldr	r3, [pc, #92]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066f0:	795b      	ldrb	r3, [r3, #5]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006700:	715a      	strb	r2, [r3, #5]
 8006702:	e01e      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2bef      	cmp	r3, #239	; 0xef
 8006708:	d91b      	bls.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006710:	d817      	bhi.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006712:	4b0e      	ldr	r3, [pc, #56]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006714:	799b      	ldrb	r3, [r3, #6]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 800671a:	2100      	movs	r1, #0
 800671c:	2007      	movs	r0, #7
 800671e:	f000 f817 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006722:	e003      	b.n	800672c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006724:	2101      	movs	r1, #1
 8006726:	2007      	movs	r0, #7
 8006728:	f000 f812 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 800672c:	4b07      	ldr	r3, [pc, #28]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800672e:	799b      	ldrb	r3, [r3, #6]
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800673e:	719a      	strb	r2, [r3, #6]
	}
}
 8006740:	e7ff      	b.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2000025c 	.word	0x2000025c

08006750 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af02      	add	r7, sp, #8
 8006756:	4603      	mov	r3, r0
 8006758:	460a      	mov	r2, r1
 800675a:	71fb      	strb	r3, [r7, #7]
 800675c:	4613      	mov	r3, r2
 800675e:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d11a      	bne.n	800679c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006766:	79bb      	ldrb	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800676c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	2305      	movs	r3, #5
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	2312      	movs	r3, #18
 8006778:	2212      	movs	r2, #18
 800677a:	2133      	movs	r1, #51	; 0x33
 800677c:	203d      	movs	r0, #61	; 0x3d
 800677e:	f7fa ff66 	bl	800164e <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006782:	e0be      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006784:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	2305      	movs	r3, #5
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	2312      	movs	r3, #18
 8006790:	2212      	movs	r2, #18
 8006792:	2133      	movs	r1, #51	; 0x33
 8006794:	203d      	movs	r0, #61	; 0x3d
 8006796:	f7fa ff5a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800679a:	e0b2      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d11a      	bne.n	80067d8 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 80067a2:	79bb      	ldrb	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10b      	bne.n	80067c0 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80067a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2305      	movs	r3, #5
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2312      	movs	r3, #18
 80067b4:	2212      	movs	r2, #18
 80067b6:	2133      	movs	r1, #51	; 0x33
 80067b8:	205b      	movs	r0, #91	; 0x5b
 80067ba:	f7fa ff48 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80067be:	e0a0      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80067c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	2305      	movs	r3, #5
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	2312      	movs	r3, #18
 80067cc:	2212      	movs	r2, #18
 80067ce:	2133      	movs	r1, #51	; 0x33
 80067d0:	205b      	movs	r0, #91	; 0x5b
 80067d2:	f7fa ff3c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80067d6:	e094      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d11a      	bne.n	8006814 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 80067de:	79bb      	ldrb	r3, [r7, #6]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80067e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	2305      	movs	r3, #5
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2312      	movs	r3, #18
 80067f0:	2212      	movs	r2, #18
 80067f2:	2133      	movs	r1, #51	; 0x33
 80067f4:	2079      	movs	r0, #121	; 0x79
 80067f6:	f7fa ff2a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80067fa:	e082      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80067fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	2305      	movs	r3, #5
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	2312      	movs	r3, #18
 8006808:	2212      	movs	r2, #18
 800680a:	2133      	movs	r1, #51	; 0x33
 800680c:	2079      	movs	r0, #121	; 0x79
 800680e:	f7fa ff1e 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006812:	e076      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d11a      	bne.n	8006850 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 800681a:	79bb      	ldrb	r3, [r7, #6]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10b      	bne.n	8006838 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006820:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	2305      	movs	r3, #5
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	2312      	movs	r3, #18
 800682c:	2212      	movs	r2, #18
 800682e:	2133      	movs	r1, #51	; 0x33
 8006830:	2097      	movs	r0, #151	; 0x97
 8006832:	f7fa ff0c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006836:	e064      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006838:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2305      	movs	r3, #5
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2312      	movs	r3, #18
 8006844:	2212      	movs	r2, #18
 8006846:	2133      	movs	r1, #51	; 0x33
 8006848:	2097      	movs	r0, #151	; 0x97
 800684a:	f7fa ff00 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800684e:	e058      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b05      	cmp	r3, #5
 8006854:	d11a      	bne.n	800688c <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8006856:	79bb      	ldrb	r3, [r7, #6]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800685c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	2305      	movs	r3, #5
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	2312      	movs	r3, #18
 8006868:	2212      	movs	r2, #18
 800686a:	2133      	movs	r1, #51	; 0x33
 800686c:	20b5      	movs	r0, #181	; 0xb5
 800686e:	f7fa feee 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006872:	e046      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006874:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	2305      	movs	r3, #5
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	2312      	movs	r3, #18
 8006880:	2212      	movs	r2, #18
 8006882:	2133      	movs	r1, #51	; 0x33
 8006884:	20b5      	movs	r0, #181	; 0xb5
 8006886:	f7fa fee2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800688a:	e03a      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	2b06      	cmp	r3, #6
 8006890:	d11a      	bne.n	80068c8 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006892:	79bb      	ldrb	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006898:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	2305      	movs	r3, #5
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2312      	movs	r3, #18
 80068a4:	2212      	movs	r2, #18
 80068a6:	2133      	movs	r1, #51	; 0x33
 80068a8:	20d3      	movs	r0, #211	; 0xd3
 80068aa:	f7fa fed0 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068ae:	e028      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	2305      	movs	r3, #5
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	2312      	movs	r3, #18
 80068bc:	2212      	movs	r2, #18
 80068be:	2133      	movs	r1, #51	; 0x33
 80068c0:	20d3      	movs	r0, #211	; 0xd3
 80068c2:	f7fa fec4 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068c6:	e01c      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	2b07      	cmp	r3, #7
 80068cc:	d119      	bne.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 80068ce:	79bb      	ldrb	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10b      	bne.n	80068ec <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	2305      	movs	r3, #5
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2312      	movs	r3, #18
 80068e0:	2212      	movs	r2, #18
 80068e2:	2133      	movs	r1, #51	; 0x33
 80068e4:	20f1      	movs	r0, #241	; 0xf1
 80068e6:	f7fa feb2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068ea:	e00a      	b.n	8006902 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	2305      	movs	r3, #5
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	2312      	movs	r3, #18
 80068f8:	2212      	movs	r2, #18
 80068fa:	2133      	movs	r1, #51	; 0x33
 80068fc:	20f1      	movs	r0, #241	; 0xf1
 80068fe:	f7fa fea6 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af02      	add	r7, sp, #8
 8006910:	4603      	mov	r3, r0
 8006912:	460a      	mov	r2, r1
 8006914:	71fb      	strb	r3, [r7, #7]
 8006916:	4613      	mov	r3, r2
 8006918:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d11a      	bne.n	8006956 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8006920:	79bb      	ldrb	r3, [r7, #6]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006926:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	2305      	movs	r3, #5
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2312      	movs	r3, #18
 8006932:	2212      	movs	r2, #18
 8006934:	21ab      	movs	r1, #171	; 0xab
 8006936:	2016      	movs	r0, #22
 8006938:	f7fa fe89 	bl	800164e <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800693c:	e0fc      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800693e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	2305      	movs	r3, #5
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	2312      	movs	r3, #18
 800694a:	2212      	movs	r2, #18
 800694c:	21ab      	movs	r1, #171	; 0xab
 800694e:	2016      	movs	r0, #22
 8006950:	f7fa fe7d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006954:	e0f0      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d11a      	bne.n	8006992 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 800695c:	79bb      	ldrb	r3, [r7, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006962:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	2305      	movs	r3, #5
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	2312      	movs	r3, #18
 800696e:	2212      	movs	r2, #18
 8006970:	21ab      	movs	r1, #171	; 0xab
 8006972:	2036      	movs	r0, #54	; 0x36
 8006974:	f7fa fe6b 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006978:	e0de      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800697a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	2305      	movs	r3, #5
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2312      	movs	r3, #18
 8006986:	2212      	movs	r2, #18
 8006988:	21ab      	movs	r1, #171	; 0xab
 800698a:	2036      	movs	r0, #54	; 0x36
 800698c:	f7fa fe5f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006990:	e0d2      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2b03      	cmp	r3, #3
 8006996:	d11a      	bne.n	80069ce <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006998:	79bb      	ldrb	r3, [r7, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800699e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	2305      	movs	r3, #5
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2312      	movs	r3, #18
 80069aa:	2212      	movs	r2, #18
 80069ac:	21ab      	movs	r1, #171	; 0xab
 80069ae:	2056      	movs	r0, #86	; 0x56
 80069b0:	f7fa fe4d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069b4:	e0c0      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	2305      	movs	r3, #5
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2312      	movs	r3, #18
 80069c2:	2212      	movs	r2, #18
 80069c4:	21ab      	movs	r1, #171	; 0xab
 80069c6:	2056      	movs	r0, #86	; 0x56
 80069c8:	f7fa fe41 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069cc:	e0b4      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d11a      	bne.n	8006a0a <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 80069d4:	79bb      	ldrb	r3, [r7, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	2305      	movs	r3, #5
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2312      	movs	r3, #18
 80069e6:	2212      	movs	r2, #18
 80069e8:	21ab      	movs	r1, #171	; 0xab
 80069ea:	2076      	movs	r0, #118	; 0x76
 80069ec:	f7fa fe2f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069f0:	e0a2      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	2305      	movs	r3, #5
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	2312      	movs	r3, #18
 80069fe:	2212      	movs	r2, #18
 8006a00:	21ab      	movs	r1, #171	; 0xab
 8006a02:	2076      	movs	r0, #118	; 0x76
 8006a04:	f7fa fe23 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a08:	e096      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d11a      	bne.n	8006a46 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006a10:	79bb      	ldrb	r3, [r7, #6]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	2305      	movs	r3, #5
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2312      	movs	r3, #18
 8006a22:	2212      	movs	r2, #18
 8006a24:	21ab      	movs	r1, #171	; 0xab
 8006a26:	2096      	movs	r0, #150	; 0x96
 8006a28:	f7fa fe11 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a2c:	e084      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	2305      	movs	r3, #5
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2312      	movs	r3, #18
 8006a3a:	2212      	movs	r2, #18
 8006a3c:	21ab      	movs	r1, #171	; 0xab
 8006a3e:	2096      	movs	r0, #150	; 0x96
 8006a40:	f7fa fe05 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a44:	e078      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2b06      	cmp	r3, #6
 8006a4a:	d11a      	bne.n	8006a82 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006a4c:	79bb      	ldrb	r3, [r7, #6]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	2305      	movs	r3, #5
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2312      	movs	r3, #18
 8006a5e:	2212      	movs	r2, #18
 8006a60:	21ab      	movs	r1, #171	; 0xab
 8006a62:	20b6      	movs	r0, #182	; 0xb6
 8006a64:	f7fa fdf3 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a68:	e066      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	2305      	movs	r3, #5
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2312      	movs	r3, #18
 8006a76:	2212      	movs	r2, #18
 8006a78:	21ab      	movs	r1, #171	; 0xab
 8006a7a:	20b6      	movs	r0, #182	; 0xb6
 8006a7c:	f7fa fde7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a80:	e05a      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	2b07      	cmp	r3, #7
 8006a86:	d11a      	bne.n	8006abe <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006a88:	79bb      	ldrb	r3, [r7, #6]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	2305      	movs	r3, #5
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2312      	movs	r3, #18
 8006a9a:	2212      	movs	r2, #18
 8006a9c:	21ab      	movs	r1, #171	; 0xab
 8006a9e:	20d6      	movs	r0, #214	; 0xd6
 8006aa0:	f7fa fdd5 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006aa4:	e048      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006aa6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	2305      	movs	r3, #5
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	2312      	movs	r3, #18
 8006ab2:	2212      	movs	r2, #18
 8006ab4:	21ab      	movs	r1, #171	; 0xab
 8006ab6:	20d6      	movs	r0, #214	; 0xd6
 8006ab8:	f7fa fdc9 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006abc:	e03c      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d11a      	bne.n	8006afa <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006ac4:	79bb      	ldrb	r3, [r7, #6]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006aca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2305      	movs	r3, #5
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2312      	movs	r3, #18
 8006ad6:	2212      	movs	r2, #18
 8006ad8:	21ab      	movs	r1, #171	; 0xab
 8006ada:	20f6      	movs	r0, #246	; 0xf6
 8006adc:	f7fa fdb7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ae0:	e02a      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ae2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	2305      	movs	r3, #5
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2312      	movs	r3, #18
 8006aee:	2212      	movs	r2, #18
 8006af0:	21ab      	movs	r1, #171	; 0xab
 8006af2:	20f6      	movs	r0, #246	; 0xf6
 8006af4:	f7fa fdab 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006af8:	e01e      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	2b09      	cmp	r3, #9
 8006afe:	d11b      	bne.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006b00:	79bb      	ldrb	r3, [r7, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	2305      	movs	r3, #5
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2312      	movs	r3, #18
 8006b12:	2212      	movs	r2, #18
 8006b14:	21ab      	movs	r1, #171	; 0xab
 8006b16:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006b1a:	f7fa fd98 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b1e:	e00b      	b.n	8006b38 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	2305      	movs	r3, #5
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	2312      	movs	r3, #18
 8006b2c:	2212      	movs	r2, #18
 8006b2e:	21ab      	movs	r1, #171	; 0xab
 8006b30:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006b34:	f7fa fd8b 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	4603      	mov	r3, r0
 8006b48:	460a      	mov	r2, r1
 8006b4a:	80fb      	strh	r3, [r7, #6]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006b50:	4859      	ldr	r0, [pc, #356]	; (8006cb8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006b52:	f7fa fdcd 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	2bba      	cmp	r3, #186	; 0xba
 8006b5a:	d92f      	bls.n	8006bbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	2bdd      	cmp	r3, #221	; 0xdd
 8006b60:	d82c      	bhi.n	8006bbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006b62:	4b56      	ldr	r3, [pc, #344]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b17      	cmp	r3, #23
 8006b68:	d806      	bhi.n	8006b78 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006b6a:	4b54      	ldr	r3, [pc, #336]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	4b52      	ldr	r3, [pc, #328]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e002      	b.n	8006b7e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006b78:	4b50      	ldr	r3, [pc, #320]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006b7e:	4b4f      	ldr	r3, [pc, #316]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b09      	cmp	r3, #9
 8006b84:	d907      	bls.n	8006b96 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006b86:	4b4d      	ldr	r3, [pc, #308]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	494c      	ldr	r1, [pc, #304]	; (8006cc0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006b8e:	484d      	ldr	r0, [pc, #308]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006b90:	f00a faf2 	bl	8011178 <siprintf>
 8006b94:	e006      	b.n	8006ba4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006b96:	4b49      	ldr	r3, [pc, #292]	; (8006cbc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	494a      	ldr	r1, [pc, #296]	; (8006cc8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006b9e:	4849      	ldr	r0, [pc, #292]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006ba0:	f00a faea 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006ba4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	2301      	movs	r3, #1
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2264      	movs	r2, #100	; 0x64
 8006bb2:	2150      	movs	r1, #80	; 0x50
 8006bb4:	4843      	ldr	r0, [pc, #268]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006bb6:	f7fa ffb5 	bl	8001b24 <EF_PutString>
 8006bba:	e078      	b.n	8006cae <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	2be8      	cmp	r3, #232	; 0xe8
 8006bc0:	d930      	bls.n	8006c24 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006bc8:	d22c      	bcs.n	8006c24 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006bca:	4b40      	ldr	r3, [pc, #256]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b3a      	cmp	r3, #58	; 0x3a
 8006bd0:	d806      	bhi.n	8006be0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006bd2:	4b3e      	ldr	r3, [pc, #248]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	4b3c      	ldr	r3, [pc, #240]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e002      	b.n	8006be6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006be0:	4b3a      	ldr	r3, [pc, #232]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006be6:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b09      	cmp	r3, #9
 8006bec:	d907      	bls.n	8006bfe <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006bee:	4b37      	ldr	r3, [pc, #220]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4932      	ldr	r1, [pc, #200]	; (8006cc0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006bf6:	4833      	ldr	r0, [pc, #204]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006bf8:	f00a fabe 	bl	8011178 <siprintf>
 8006bfc:	e006      	b.n	8006c0c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006bfe:	4b33      	ldr	r3, [pc, #204]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	4930      	ldr	r1, [pc, #192]	; (8006cc8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006c06:	482f      	ldr	r0, [pc, #188]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c08:	f00a fab6 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c0c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	2301      	movs	r3, #1
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	2264      	movs	r2, #100	; 0x64
 8006c1a:	218a      	movs	r1, #138	; 0x8a
 8006c1c:	4829      	ldr	r0, [pc, #164]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c1e:	f7fa ff81 	bl	8001b24 <EF_PutString>
 8006c22:	e044      	b.n	8006cae <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006c2a:	d940      	bls.n	8006cae <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006c32:	d23c      	bcs.n	8006cae <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006c34:	4b25      	ldr	r3, [pc, #148]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	d806      	bhi.n	8006c4a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006c3c:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	330a      	adds	r3, #10
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e012      	b.n	8006c70 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006c4a:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f103 020a 	add.w	r2, r3, #10
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006c54:	fb83 1302 	smull	r1, r3, r3, r2
 8006c58:	4413      	add	r3, r2
 8006c5a:	1159      	asrs	r1, r3, #5
 8006c5c:	17d3      	asrs	r3, r2, #31
 8006c5e:	1ac9      	subs	r1, r1, r3
 8006c60:	460b      	mov	r3, r1
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	1a5b      	subs	r3, r3, r1
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	1ad1      	subs	r1, r2, r3
 8006c6a:	b2ca      	uxtb	r2, r1
 8006c6c:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c6e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006c70:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b09      	cmp	r3, #9
 8006c76:	d907      	bls.n	8006c88 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006c78:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4910      	ldr	r1, [pc, #64]	; (8006cc0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006c80:	4810      	ldr	r0, [pc, #64]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c82:	f00a fa79 	bl	8011178 <siprintf>
 8006c86:	e006      	b.n	8006c96 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006c88:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	490e      	ldr	r1, [pc, #56]	; (8006cc8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006c90:	480c      	ldr	r0, [pc, #48]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c92:	f00a fa71 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c96:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2264      	movs	r2, #100	; 0x64
 8006ca4:	218a      	movs	r1, #138	; 0x8a
 8006ca6:	4807      	ldr	r0, [pc, #28]	; (8006cc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006ca8:	f7fa ff3c 	bl	8001b24 <EF_PutString>
	}
}
 8006cac:	e7ff      	b.n	8006cae <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	080180dc 	.word	0x080180dc
 8006cbc:	20000281 	.word	0x20000281
 8006cc0:	08015310 	.word	0x08015310
 8006cc4:	200002fc 	.word	0x200002fc
 8006cc8:	08015318 	.word	0x08015318
 8006ccc:	20000283 	.word	0x20000283
 8006cd0:	88888889 	.word	0x88888889

08006cd4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	4603      	mov	r3, r0
 8006cdc:	460a      	mov	r2, r1
 8006cde:	80fb      	strh	r3, [r7, #6]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006ce4:	4859      	ldr	r0, [pc, #356]	; (8006e4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006ce6:	f7fa fd03 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2bba      	cmp	r3, #186	; 0xba
 8006cee:	d92f      	bls.n	8006d50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	2bdd      	cmp	r3, #221	; 0xdd
 8006cf4:	d82c      	bhi.n	8006d50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006cf6:	4b56      	ldr	r3, [pc, #344]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b17      	cmp	r3, #23
 8006cfc:	d806      	bhi.n	8006d0c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006cfe:	4b54      	ldr	r3, [pc, #336]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	4b52      	ldr	r3, [pc, #328]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	e002      	b.n	8006d12 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006d0c:	4b50      	ldr	r3, [pc, #320]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006d12:	4b4f      	ldr	r3, [pc, #316]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b09      	cmp	r3, #9
 8006d18:	d907      	bls.n	8006d2a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006d1a:	4b4d      	ldr	r3, [pc, #308]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	494c      	ldr	r1, [pc, #304]	; (8006e54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006d22:	484d      	ldr	r0, [pc, #308]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d24:	f00a fa28 	bl	8011178 <siprintf>
 8006d28:	e006      	b.n	8006d38 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006d2a:	4b49      	ldr	r3, [pc, #292]	; (8006e50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	494a      	ldr	r1, [pc, #296]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006d32:	4849      	ldr	r0, [pc, #292]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d34:	f00a fa20 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d38:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	2287      	movs	r2, #135	; 0x87
 8006d46:	214e      	movs	r1, #78	; 0x4e
 8006d48:	4843      	ldr	r0, [pc, #268]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d4a:	f7fa feeb 	bl	8001b24 <EF_PutString>
 8006d4e:	e078      	b.n	8006e42 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d50:	88fb      	ldrh	r3, [r7, #6]
 8006d52:	2be8      	cmp	r3, #232	; 0xe8
 8006d54:	d930      	bls.n	8006db8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006d5c:	d22c      	bcs.n	8006db8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006d5e:	4b40      	ldr	r3, [pc, #256]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b3a      	cmp	r3, #58	; 0x3a
 8006d64:	d806      	bhi.n	8006d74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006d66:	4b3e      	ldr	r3, [pc, #248]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	4b3c      	ldr	r3, [pc, #240]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006d74:	4b3a      	ldr	r3, [pc, #232]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006d7a:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b09      	cmp	r3, #9
 8006d80:	d907      	bls.n	8006d92 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006d82:	4b37      	ldr	r3, [pc, #220]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	4932      	ldr	r1, [pc, #200]	; (8006e54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006d8a:	4833      	ldr	r0, [pc, #204]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d8c:	f00a f9f4 	bl	8011178 <siprintf>
 8006d90:	e006      	b.n	8006da0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006d92:	4b33      	ldr	r3, [pc, #204]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	4930      	ldr	r1, [pc, #192]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006d9a:	482f      	ldr	r0, [pc, #188]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d9c:	f00a f9ec 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006da0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	2301      	movs	r3, #1
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	2287      	movs	r2, #135	; 0x87
 8006dae:	218a      	movs	r1, #138	; 0x8a
 8006db0:	4829      	ldr	r0, [pc, #164]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006db2:	f7fa feb7 	bl	8001b24 <EF_PutString>
 8006db6:	e044      	b.n	8006e42 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006dbe:	d940      	bls.n	8006e42 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006dc6:	d23c      	bcs.n	8006e42 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006dc8:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b30      	cmp	r3, #48	; 0x30
 8006dce:	d806      	bhi.n	8006dde <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006dd0:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	330a      	adds	r3, #10
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	4b21      	ldr	r3, [pc, #132]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e012      	b.n	8006e04 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006dde:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f103 020a 	add.w	r2, r3, #10
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006de8:	fb83 1302 	smull	r1, r3, r3, r2
 8006dec:	4413      	add	r3, r2
 8006dee:	1159      	asrs	r1, r3, #5
 8006df0:	17d3      	asrs	r3, r2, #31
 8006df2:	1ac9      	subs	r1, r1, r3
 8006df4:	460b      	mov	r3, r1
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	1a5b      	subs	r3, r3, r1
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	1ad1      	subs	r1, r2, r3
 8006dfe:	b2ca      	uxtb	r2, r1
 8006e00:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e02:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006e04:	4b16      	ldr	r3, [pc, #88]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b09      	cmp	r3, #9
 8006e0a:	d907      	bls.n	8006e1c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006e0c:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4910      	ldr	r1, [pc, #64]	; (8006e54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006e14:	4810      	ldr	r0, [pc, #64]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e16:	f00a f9af 	bl	8011178 <siprintf>
 8006e1a:	e006      	b.n	8006e2a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	490e      	ldr	r1, [pc, #56]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006e24:	480c      	ldr	r0, [pc, #48]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e26:	f00a f9a7 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e2a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	2301      	movs	r3, #1
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	2287      	movs	r2, #135	; 0x87
 8006e38:	218a      	movs	r1, #138	; 0x8a
 8006e3a:	4807      	ldr	r0, [pc, #28]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e3c:	f7fa fe72 	bl	8001b24 <EF_PutString>
	}
}
 8006e40:	e7ff      	b.n	8006e42 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	080180dc 	.word	0x080180dc
 8006e50:	20000282 	.word	0x20000282
 8006e54:	08015310 	.word	0x08015310
 8006e58:	200002fc 	.word	0x200002fc
 8006e5c:	08015318 	.word	0x08015318
 8006e60:	20000284 	.word	0x20000284
 8006e64:	88888889 	.word	0x88888889

08006e68 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	460a      	mov	r2, r1
 8006e72:	80fb      	strh	r3, [r7, #6]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006e78:	88fb      	ldrh	r3, [r7, #6]
 8006e7a:	2b3b      	cmp	r3, #59	; 0x3b
 8006e7c:	d91a      	bls.n	8006eb4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	2b50      	cmp	r3, #80	; 0x50
 8006e82:	d817      	bhi.n	8006eb4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006e84:	4b68      	ldr	r3, [pc, #416]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f7ff fc5e 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006e94:	e003      	b.n	8006e9e <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006e96:	2101      	movs	r1, #1
 8006e98:	2001      	movs	r0, #1
 8006e9a:	f7ff fc59 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006e9e:	4b62      	ldr	r3, [pc, #392]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf0c      	ite	eq
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	2300      	movne	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b5e      	ldr	r3, [pc, #376]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e0b4      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	2b59      	cmp	r3, #89	; 0x59
 8006eb8:	d91a      	bls.n	8006ef0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	2b6e      	cmp	r3, #110	; 0x6e
 8006ebe:	d817      	bhi.n	8006ef0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006ec0:	4b59      	ldr	r3, [pc, #356]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8006ec8:	2100      	movs	r1, #0
 8006eca:	2002      	movs	r0, #2
 8006ecc:	f7ff fc40 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006ed0:	e003      	b.n	8006eda <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	2002      	movs	r0, #2
 8006ed6:	f7ff fc3b 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8006eda:	4b53      	ldr	r3, [pc, #332]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006edc:	785b      	ldrb	r3, [r3, #1]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf0c      	ite	eq
 8006ee2:	2301      	moveq	r3, #1
 8006ee4:	2300      	movne	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4b4f      	ldr	r3, [pc, #316]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006eec:	705a      	strb	r2, [r3, #1]
 8006eee:	e096      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	2b77      	cmp	r3, #119	; 0x77
 8006ef4:	d91a      	bls.n	8006f2c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b8c      	cmp	r3, #140	; 0x8c
 8006efa:	d817      	bhi.n	8006f2c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006efc:	4b4a      	ldr	r3, [pc, #296]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006efe:	789b      	ldrb	r3, [r3, #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8006f04:	2100      	movs	r1, #0
 8006f06:	2003      	movs	r0, #3
 8006f08:	f7ff fc22 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006f0c:	e003      	b.n	8006f16 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006f0e:	2101      	movs	r1, #1
 8006f10:	2003      	movs	r0, #3
 8006f12:	f7ff fc1d 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8006f16:	4b44      	ldr	r3, [pc, #272]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f18:	789b      	ldrb	r3, [r3, #2]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bf0c      	ite	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	2300      	movne	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b40      	ldr	r3, [pc, #256]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f28:	709a      	strb	r2, [r3, #2]
 8006f2a:	e078      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	2b95      	cmp	r3, #149	; 0x95
 8006f30:	d91a      	bls.n	8006f68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2baa      	cmp	r3, #170	; 0xaa
 8006f36:	d817      	bhi.n	8006f68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006f38:	4b3b      	ldr	r3, [pc, #236]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f3a:	78db      	ldrb	r3, [r3, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8006f40:	2100      	movs	r1, #0
 8006f42:	2004      	movs	r0, #4
 8006f44:	f7ff fc04 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006f48:	e003      	b.n	8006f52 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	2004      	movs	r0, #4
 8006f4e:	f7ff fbff 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8006f52:	4b35      	ldr	r3, [pc, #212]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f54:	78db      	ldrb	r3, [r3, #3]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	4b31      	ldr	r3, [pc, #196]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f64:	70da      	strb	r2, [r3, #3]
 8006f66:	e05a      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	2bb3      	cmp	r3, #179	; 0xb3
 8006f6c:	d91a      	bls.n	8006fa4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2bc8      	cmp	r3, #200	; 0xc8
 8006f72:	d817      	bhi.n	8006fa4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006f74:	4b2c      	ldr	r3, [pc, #176]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f76:	791b      	ldrb	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	2005      	movs	r0, #5
 8006f80:	f7ff fbe6 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006f84:	e003      	b.n	8006f8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006f86:	2101      	movs	r1, #1
 8006f88:	2005      	movs	r0, #5
 8006f8a:	f7ff fbe1 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8006f8e:	4b26      	ldr	r3, [pc, #152]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f90:	791b      	ldrb	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf0c      	ite	eq
 8006f96:	2301      	moveq	r3, #1
 8006f98:	2300      	movne	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b22      	ldr	r3, [pc, #136]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fa0:	711a      	strb	r2, [r3, #4]
 8006fa2:	e03c      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	2bd1      	cmp	r3, #209	; 0xd1
 8006fa8:	d91a      	bls.n	8006fe0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	2be6      	cmp	r3, #230	; 0xe6
 8006fae:	d817      	bhi.n	8006fe0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fb2:	795b      	ldrb	r3, [r3, #5]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d004      	beq.n	8006fc2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8006fb8:	2100      	movs	r1, #0
 8006fba:	2006      	movs	r0, #6
 8006fbc:	f7ff fbc8 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006fc0:	e003      	b.n	8006fca <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	2006      	movs	r0, #6
 8006fc6:	f7ff fbc3 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8006fca:	4b17      	ldr	r3, [pc, #92]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fcc:	795b      	ldrb	r3, [r3, #5]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fdc:	715a      	strb	r2, [r3, #5]
 8006fde:	e01e      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2bef      	cmp	r3, #239	; 0xef
 8006fe4:	d91b      	bls.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fec:	d817      	bhi.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ff0:	799b      	ldrb	r3, [r3, #6]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	2007      	movs	r0, #7
 8006ffa:	f7ff fba9 	bl	8006750 <changeTFTScheduleDayOfWeek>
 8006ffe:	e003      	b.n	8007008 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007000:	2101      	movs	r1, #1
 8007002:	2007      	movs	r0, #7
 8007004:	f7ff fba4 	bl	8006750 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007008:	4b07      	ldr	r3, [pc, #28]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800700a:	799b      	ldrb	r3, [r3, #6]
 800700c:	2b00      	cmp	r3, #0
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	4b03      	ldr	r3, [pc, #12]	; (8007028 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800701a:	719a      	strb	r2, [r3, #6]
	}
}
 800701c:	e7ff      	b.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000270 	.word	0x20000270

0800702c <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af02      	add	r7, sp, #8
 8007032:	4603      	mov	r3, r0
 8007034:	460a      	mov	r2, r1
 8007036:	80fb      	strh	r3, [r7, #6]
 8007038:	4613      	mov	r3, r2
 800703a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 800703c:	4859      	ldr	r0, [pc, #356]	; (80071a4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 800703e:	f7fa fb57 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	2bba      	cmp	r3, #186	; 0xba
 8007046:	d92f      	bls.n	80070a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	2bdd      	cmp	r3, #221	; 0xdd
 800704c:	d82c      	bhi.n	80070a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 800704e:	4b56      	ldr	r3, [pc, #344]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b17      	cmp	r3, #23
 8007054:	d806      	bhi.n	8007064 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 8007056:	4b54      	ldr	r3, [pc, #336]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	b2da      	uxtb	r2, r3
 800705e:	4b52      	ldr	r3, [pc, #328]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e002      	b.n	800706a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007064:	4b50      	ldr	r3, [pc, #320]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007066:	2201      	movs	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 800706a:	4b4f      	ldr	r3, [pc, #316]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b09      	cmp	r3, #9
 8007070:	d907      	bls.n	8007082 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 8007072:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	494c      	ldr	r1, [pc, #304]	; (80071ac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800707a:	484d      	ldr	r0, [pc, #308]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800707c:	f00a f87c 	bl	8011178 <siprintf>
 8007080:	e006      	b.n	8007090 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007082:	4b49      	ldr	r3, [pc, #292]	; (80071a8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	494a      	ldr	r1, [pc, #296]	; (80071b4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800708a:	4849      	ldr	r0, [pc, #292]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800708c:	f00a f874 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007090:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	2301      	movs	r3, #1
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	2264      	movs	r2, #100	; 0x64
 800709e:	214e      	movs	r1, #78	; 0x4e
 80070a0:	4843      	ldr	r0, [pc, #268]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070a2:	f7fa fd3f 	bl	8001b24 <EF_PutString>
 80070a6:	e078      	b.n	800719a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	2be8      	cmp	r3, #232	; 0xe8
 80070ac:	d930      	bls.n	8007110 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80070b4:	d22c      	bcs.n	8007110 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 80070b6:	4b40      	ldr	r3, [pc, #256]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b3a      	cmp	r3, #58	; 0x3a
 80070bc:	d806      	bhi.n	80070cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 80070be:	4b3e      	ldr	r3, [pc, #248]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 80070cc:	4b3a      	ldr	r3, [pc, #232]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80070d2:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b09      	cmp	r3, #9
 80070d8:	d907      	bls.n	80070ea <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 80070da:	4b37      	ldr	r3, [pc, #220]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	4932      	ldr	r1, [pc, #200]	; (80071ac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80070e2:	4833      	ldr	r0, [pc, #204]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070e4:	f00a f848 	bl	8011178 <siprintf>
 80070e8:	e006      	b.n	80070f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80070ea:	4b33      	ldr	r3, [pc, #204]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	4930      	ldr	r1, [pc, #192]	; (80071b4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80070f2:	482f      	ldr	r0, [pc, #188]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070f4:	f00a f840 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80070f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	2301      	movs	r3, #1
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	2264      	movs	r2, #100	; 0x64
 8007106:	218a      	movs	r1, #138	; 0x8a
 8007108:	4829      	ldr	r0, [pc, #164]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800710a:	f7fa fd0b 	bl	8001b24 <EF_PutString>
 800710e:	e044      	b.n	800719a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007116:	d940      	bls.n	800719a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800711e:	d23c      	bcs.n	800719a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b30      	cmp	r3, #48	; 0x30
 8007126:	d806      	bhi.n	8007136 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007128:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	330a      	adds	r3, #10
 800712e:	b2da      	uxtb	r2, r3
 8007130:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e012      	b.n	800715c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f103 020a 	add.w	r2, r3, #10
 800713e:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 8007140:	fb83 1302 	smull	r1, r3, r3, r2
 8007144:	4413      	add	r3, r2
 8007146:	1159      	asrs	r1, r3, #5
 8007148:	17d3      	asrs	r3, r2, #31
 800714a:	1ac9      	subs	r1, r1, r3
 800714c:	460b      	mov	r3, r1
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	1a5b      	subs	r3, r3, r1
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	1ad1      	subs	r1, r2, r3
 8007156:	b2ca      	uxtb	r2, r1
 8007158:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800715a:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b09      	cmp	r3, #9
 8007162:	d907      	bls.n	8007174 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007164:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	4910      	ldr	r1, [pc, #64]	; (80071ac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800716c:	4810      	ldr	r0, [pc, #64]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800716e:	f00a f803 	bl	8011178 <siprintf>
 8007172:	e006      	b.n	8007182 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	490e      	ldr	r1, [pc, #56]	; (80071b4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800717c:	480c      	ldr	r0, [pc, #48]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800717e:	f009 fffb 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007182:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	2301      	movs	r3, #1
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	2264      	movs	r2, #100	; 0x64
 8007190:	218a      	movs	r1, #138	; 0x8a
 8007192:	4807      	ldr	r0, [pc, #28]	; (80071b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007194:	f7fa fcc6 	bl	8001b24 <EF_PutString>
	}
}
 8007198:	e7ff      	b.n	800719a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	080180dc 	.word	0x080180dc
 80071a8:	20000285 	.word	0x20000285
 80071ac:	08015310 	.word	0x08015310
 80071b0:	200002fc 	.word	0x200002fc
 80071b4:	08015318 	.word	0x08015318
 80071b8:	20000287 	.word	0x20000287
 80071bc:	88888889 	.word	0x88888889

080071c0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	4603      	mov	r3, r0
 80071c8:	460a      	mov	r2, r1
 80071ca:	80fb      	strh	r3, [r7, #6]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80071d0:	4859      	ldr	r0, [pc, #356]	; (8007338 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 80071d2:	f7fa fa8d 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	2bba      	cmp	r3, #186	; 0xba
 80071da:	d92f      	bls.n	800723c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	2bdd      	cmp	r3, #221	; 0xdd
 80071e0:	d82c      	bhi.n	800723c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 80071e2:	4b56      	ldr	r3, [pc, #344]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b17      	cmp	r3, #23
 80071e8:	d806      	bhi.n	80071f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 80071ea:	4b54      	ldr	r3, [pc, #336]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	4b52      	ldr	r3, [pc, #328]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	e002      	b.n	80071fe <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 80071f8:	4b50      	ldr	r3, [pc, #320]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 80071fe:	4b4f      	ldr	r3, [pc, #316]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b09      	cmp	r3, #9
 8007204:	d907      	bls.n	8007216 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 8007206:	4b4d      	ldr	r3, [pc, #308]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	494c      	ldr	r1, [pc, #304]	; (8007340 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800720e:	484d      	ldr	r0, [pc, #308]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007210:	f009 ffb2 	bl	8011178 <siprintf>
 8007214:	e006      	b.n	8007224 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007216:	4b49      	ldr	r3, [pc, #292]	; (800733c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	494a      	ldr	r1, [pc, #296]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 800721e:	4849      	ldr	r0, [pc, #292]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007220:	f009 ffaa 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007224:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	2301      	movs	r3, #1
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	2300      	movs	r3, #0
 8007230:	2287      	movs	r2, #135	; 0x87
 8007232:	2150      	movs	r1, #80	; 0x50
 8007234:	4843      	ldr	r0, [pc, #268]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007236:	f7fa fc75 	bl	8001b24 <EF_PutString>
 800723a:	e078      	b.n	800732e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	2be8      	cmp	r3, #232	; 0xe8
 8007240:	d930      	bls.n	80072a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007248:	d22c      	bcs.n	80072a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 800724a:	4b40      	ldr	r3, [pc, #256]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b3a      	cmp	r3, #58	; 0x3a
 8007250:	d806      	bhi.n	8007260 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 8007252:	4b3e      	ldr	r3, [pc, #248]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	3301      	adds	r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	4b3c      	ldr	r3, [pc, #240]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e002      	b.n	8007266 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 8007260:	4b3a      	ldr	r3, [pc, #232]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007266:	4b39      	ldr	r3, [pc, #228]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b09      	cmp	r3, #9
 800726c:	d907      	bls.n	800727e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	4932      	ldr	r1, [pc, #200]	; (8007340 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007276:	4833      	ldr	r0, [pc, #204]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007278:	f009 ff7e 	bl	8011178 <siprintf>
 800727c:	e006      	b.n	800728c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 800727e:	4b33      	ldr	r3, [pc, #204]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	4930      	ldr	r1, [pc, #192]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007286:	482f      	ldr	r0, [pc, #188]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007288:	f009 ff76 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800728c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	2301      	movs	r3, #1
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	2300      	movs	r3, #0
 8007298:	2287      	movs	r2, #135	; 0x87
 800729a:	218a      	movs	r1, #138	; 0x8a
 800729c:	4829      	ldr	r0, [pc, #164]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800729e:	f7fa fc41 	bl	8001b24 <EF_PutString>
 80072a2:	e044      	b.n	800732e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80072aa:	d940      	bls.n	800732e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80072b2:	d23c      	bcs.n	800732e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 80072b4:	4b25      	ldr	r3, [pc, #148]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b30      	cmp	r3, #48	; 0x30
 80072ba:	d806      	bhi.n	80072ca <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 80072bc:	4b23      	ldr	r3, [pc, #140]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	330a      	adds	r3, #10
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	4b21      	ldr	r3, [pc, #132]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	e012      	b.n	80072f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 80072ca:	4b20      	ldr	r3, [pc, #128]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f103 020a 	add.w	r2, r3, #10
 80072d2:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 80072d4:	fb83 1302 	smull	r1, r3, r3, r2
 80072d8:	4413      	add	r3, r2
 80072da:	1159      	asrs	r1, r3, #5
 80072dc:	17d3      	asrs	r3, r2, #31
 80072de:	1ac9      	subs	r1, r1, r3
 80072e0:	460b      	mov	r3, r1
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	1a5b      	subs	r3, r3, r1
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	1ad1      	subs	r1, r2, r3
 80072ea:	b2ca      	uxtb	r2, r1
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072ee:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80072f0:	4b16      	ldr	r3, [pc, #88]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	d907      	bls.n	8007308 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 80072f8:	4b14      	ldr	r3, [pc, #80]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	4910      	ldr	r1, [pc, #64]	; (8007340 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007300:	4810      	ldr	r0, [pc, #64]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007302:	f009 ff39 	bl	8011178 <siprintf>
 8007306:	e006      	b.n	8007316 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007308:	4b10      	ldr	r3, [pc, #64]	; (800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	490e      	ldr	r1, [pc, #56]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007310:	480c      	ldr	r0, [pc, #48]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007312:	f009 ff31 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007316:	f24c 6318 	movw	r3, #50712	; 0xc618
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	2301      	movs	r3, #1
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	2300      	movs	r3, #0
 8007322:	2287      	movs	r2, #135	; 0x87
 8007324:	218a      	movs	r1, #138	; 0x8a
 8007326:	4807      	ldr	r0, [pc, #28]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007328:	f7fa fbfc 	bl	8001b24 <EF_PutString>
	}
}
 800732c:	e7ff      	b.n	800732e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	080180dc 	.word	0x080180dc
 800733c:	20000286 	.word	0x20000286
 8007340:	08015310 	.word	0x08015310
 8007344:	200002fc 	.word	0x200002fc
 8007348:	08015318 	.word	0x08015318
 800734c:	20000288 	.word	0x20000288
 8007350:	88888889 	.word	0x88888889

08007354 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	460a      	mov	r2, r1
 800735e:	80fb      	strh	r3, [r7, #6]
 8007360:	4613      	mov	r3, r2
 8007362:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	2b14      	cmp	r3, #20
 8007368:	d919      	bls.n	800739e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	2b29      	cmp	r3, #41	; 0x29
 800736e:	d816      	bhi.n	800739e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007370:	4b82      	ldr	r3, [pc, #520]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007378:	2100      	movs	r1, #0
 800737a:	2001      	movs	r0, #1
 800737c:	f7ff fac5 	bl	800690a <changeTFTScheduleRelayLights>
 8007380:	e003      	b.n	800738a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007382:	2101      	movs	r1, #1
 8007384:	2001      	movs	r0, #1
 8007386:	f7ff fac0 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800738a:	4b7c      	ldr	r3, [pc, #496]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bf0c      	ite	eq
 8007392:	2301      	moveq	r3, #1
 8007394:	2300      	movne	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	4b78      	ldr	r3, [pc, #480]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800739c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b34      	cmp	r3, #52	; 0x34
 80073a2:	d919      	bls.n	80073d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	2b49      	cmp	r3, #73	; 0x49
 80073a8:	d816      	bhi.n	80073d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 80073aa:	4b74      	ldr	r3, [pc, #464]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 80073b2:	2100      	movs	r1, #0
 80073b4:	2002      	movs	r0, #2
 80073b6:	f7ff faa8 	bl	800690a <changeTFTScheduleRelayLights>
 80073ba:	e003      	b.n	80073c4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 80073bc:	2101      	movs	r1, #1
 80073be:	2002      	movs	r0, #2
 80073c0:	f7ff faa3 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80073c4:	4b6d      	ldr	r3, [pc, #436]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bf0c      	ite	eq
 80073cc:	2301      	moveq	r3, #1
 80073ce:	2300      	movne	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	4b69      	ldr	r3, [pc, #420]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073d6:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	2b54      	cmp	r3, #84	; 0x54
 80073dc:	d919      	bls.n	8007412 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	2b69      	cmp	r3, #105	; 0x69
 80073e2:	d816      	bhi.n	8007412 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80073e4:	4b65      	ldr	r3, [pc, #404]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 80073ec:	2100      	movs	r1, #0
 80073ee:	2003      	movs	r0, #3
 80073f0:	f7ff fa8b 	bl	800690a <changeTFTScheduleRelayLights>
 80073f4:	e003      	b.n	80073fe <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80073f6:	2101      	movs	r1, #1
 80073f8:	2003      	movs	r0, #3
 80073fa:	f7ff fa86 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80073fe:	4b5f      	ldr	r3, [pc, #380]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007400:	789b      	ldrb	r3, [r3, #2]
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	4b5b      	ldr	r3, [pc, #364]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007410:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b74      	cmp	r3, #116	; 0x74
 8007416:	d919      	bls.n	800744c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	2b89      	cmp	r3, #137	; 0x89
 800741c:	d816      	bhi.n	800744c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800741e:	4b57      	ldr	r3, [pc, #348]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007420:	78db      	ldrb	r3, [r3, #3]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007426:	2100      	movs	r1, #0
 8007428:	2004      	movs	r0, #4
 800742a:	f7ff fa6e 	bl	800690a <changeTFTScheduleRelayLights>
 800742e:	e003      	b.n	8007438 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007430:	2101      	movs	r1, #1
 8007432:	2004      	movs	r0, #4
 8007434:	f7ff fa69 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007438:	4b50      	ldr	r3, [pc, #320]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800743a:	78db      	ldrb	r3, [r3, #3]
 800743c:	2b00      	cmp	r3, #0
 800743e:	bf0c      	ite	eq
 8007440:	2301      	moveq	r3, #1
 8007442:	2300      	movne	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	4b4c      	ldr	r3, [pc, #304]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800744a:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	2b94      	cmp	r3, #148	; 0x94
 8007450:	d919      	bls.n	8007486 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	2ba9      	cmp	r3, #169	; 0xa9
 8007456:	d816      	bhi.n	8007486 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007458:	4b48      	ldr	r3, [pc, #288]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800745a:	791b      	ldrb	r3, [r3, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8007460:	2100      	movs	r1, #0
 8007462:	2005      	movs	r0, #5
 8007464:	f7ff fa51 	bl	800690a <changeTFTScheduleRelayLights>
 8007468:	e003      	b.n	8007472 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800746a:	2101      	movs	r1, #1
 800746c:	2005      	movs	r0, #5
 800746e:	f7ff fa4c 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007472:	4b42      	ldr	r3, [pc, #264]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007474:	791b      	ldrb	r3, [r3, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bf0c      	ite	eq
 800747a:	2301      	moveq	r3, #1
 800747c:	2300      	movne	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	4b3e      	ldr	r3, [pc, #248]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007484:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	2bb4      	cmp	r3, #180	; 0xb4
 800748a:	d919      	bls.n	80074c0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	2bc9      	cmp	r3, #201	; 0xc9
 8007490:	d816      	bhi.n	80074c0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007492:	4b3a      	ldr	r3, [pc, #232]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007494:	795b      	ldrb	r3, [r3, #5]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d004      	beq.n	80074a4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800749a:	2100      	movs	r1, #0
 800749c:	2006      	movs	r0, #6
 800749e:	f7ff fa34 	bl	800690a <changeTFTScheduleRelayLights>
 80074a2:	e003      	b.n	80074ac <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80074a4:	2101      	movs	r1, #1
 80074a6:	2006      	movs	r0, #6
 80074a8:	f7ff fa2f 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 80074ac:	4b33      	ldr	r3, [pc, #204]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074ae:	795b      	ldrb	r3, [r3, #5]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bf0c      	ite	eq
 80074b4:	2301      	moveq	r3, #1
 80074b6:	2300      	movne	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	4b2f      	ldr	r3, [pc, #188]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074be:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	2bd4      	cmp	r3, #212	; 0xd4
 80074c4:	d919      	bls.n	80074fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	2be9      	cmp	r3, #233	; 0xe9
 80074ca:	d816      	bhi.n	80074fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80074cc:	4b2b      	ldr	r3, [pc, #172]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074ce:	799b      	ldrb	r3, [r3, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 80074d4:	2100      	movs	r1, #0
 80074d6:	2007      	movs	r0, #7
 80074d8:	f7ff fa17 	bl	800690a <changeTFTScheduleRelayLights>
 80074dc:	e003      	b.n	80074e6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80074de:	2101      	movs	r1, #1
 80074e0:	2007      	movs	r0, #7
 80074e2:	f7ff fa12 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80074e6:	4b25      	ldr	r3, [pc, #148]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074e8:	799b      	ldrb	r3, [r3, #6]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf0c      	ite	eq
 80074ee:	2301      	moveq	r3, #1
 80074f0:	2300      	movne	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	4b21      	ldr	r3, [pc, #132]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074f8:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	2bf4      	cmp	r3, #244	; 0xf4
 80074fe:	d91a      	bls.n	8007536 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007506:	d216      	bcs.n	8007536 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007508:	4b1c      	ldr	r3, [pc, #112]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800750a:	79db      	ldrb	r3, [r3, #7]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007510:	2100      	movs	r1, #0
 8007512:	2008      	movs	r0, #8
 8007514:	f7ff f9f9 	bl	800690a <changeTFTScheduleRelayLights>
 8007518:	e003      	b.n	8007522 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 800751a:	2101      	movs	r1, #1
 800751c:	2008      	movs	r0, #8
 800751e:	f7ff f9f4 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007522:	4b16      	ldr	r3, [pc, #88]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007524:	79db      	ldrb	r3, [r3, #7]
 8007526:	2b00      	cmp	r3, #0
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007534:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800753c:	d91a      	bls.n	8007574 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007544:	d216      	bcs.n	8007574 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007548:	7a1b      	ldrb	r3, [r3, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d004      	beq.n	8007558 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 800754e:	2100      	movs	r1, #0
 8007550:	2009      	movs	r0, #9
 8007552:	f7ff f9da 	bl	800690a <changeTFTScheduleRelayLights>
 8007556:	e003      	b.n	8007560 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007558:	2101      	movs	r1, #1
 800755a:	2009      	movs	r0, #9
 800755c:	f7ff f9d5 	bl	800690a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007562:	7a1b      	ldrb	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007572:	721a      	strb	r2, [r3, #8]
	}

}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000264 	.word	0x20000264

08007580 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	460a      	mov	r2, r1
 800758a:	80fb      	strh	r3, [r7, #6]
 800758c:	4613      	mov	r3, r2
 800758e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	2b14      	cmp	r3, #20
 8007594:	d919      	bls.n	80075ca <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	2b29      	cmp	r3, #41	; 0x29
 800759a:	d816      	bhi.n	80075ca <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800759c:	4b82      	ldr	r3, [pc, #520]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 80075a4:	2100      	movs	r1, #0
 80075a6:	2001      	movs	r0, #1
 80075a8:	f7ff f9af 	bl	800690a <changeTFTScheduleRelayLights>
 80075ac:	e003      	b.n	80075b6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 80075ae:	2101      	movs	r1, #1
 80075b0:	2001      	movs	r0, #1
 80075b2:	f7ff f9aa 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 80075b6:	4b7c      	ldr	r3, [pc, #496]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	4b78      	ldr	r3, [pc, #480]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80075c8:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	2b34      	cmp	r3, #52	; 0x34
 80075ce:	d919      	bls.n	8007604 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	2b49      	cmp	r3, #73	; 0x49
 80075d4:	d816      	bhi.n	8007604 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 80075d6:	4b74      	ldr	r3, [pc, #464]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d004      	beq.n	80075e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 80075de:	2100      	movs	r1, #0
 80075e0:	2002      	movs	r0, #2
 80075e2:	f7ff f992 	bl	800690a <changeTFTScheduleRelayLights>
 80075e6:	e003      	b.n	80075f0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 80075e8:	2101      	movs	r1, #1
 80075ea:	2002      	movs	r0, #2
 80075ec:	f7ff f98d 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80075f0:	4b6d      	ldr	r3, [pc, #436]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bf0c      	ite	eq
 80075f8:	2301      	moveq	r3, #1
 80075fa:	2300      	movne	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	4b69      	ldr	r3, [pc, #420]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007602:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	2b54      	cmp	r3, #84	; 0x54
 8007608:	d919      	bls.n	800763e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b69      	cmp	r3, #105	; 0x69
 800760e:	d816      	bhi.n	800763e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007610:	4b65      	ldr	r3, [pc, #404]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007612:	789b      	ldrb	r3, [r3, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007618:	2100      	movs	r1, #0
 800761a:	2003      	movs	r0, #3
 800761c:	f7ff f975 	bl	800690a <changeTFTScheduleRelayLights>
 8007620:	e003      	b.n	800762a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007622:	2101      	movs	r1, #1
 8007624:	2003      	movs	r0, #3
 8007626:	f7ff f970 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800762a:	4b5f      	ldr	r3, [pc, #380]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800762c:	789b      	ldrb	r3, [r3, #2]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bf0c      	ite	eq
 8007632:	2301      	moveq	r3, #1
 8007634:	2300      	movne	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	4b5b      	ldr	r3, [pc, #364]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800763c:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	2b74      	cmp	r3, #116	; 0x74
 8007642:	d919      	bls.n	8007678 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	2b89      	cmp	r3, #137	; 0x89
 8007648:	d816      	bhi.n	8007678 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800764a:	4b57      	ldr	r3, [pc, #348]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800764c:	78db      	ldrb	r3, [r3, #3]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 8007652:	2100      	movs	r1, #0
 8007654:	2004      	movs	r0, #4
 8007656:	f7ff f958 	bl	800690a <changeTFTScheduleRelayLights>
 800765a:	e003      	b.n	8007664 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 800765c:	2101      	movs	r1, #1
 800765e:	2004      	movs	r0, #4
 8007660:	f7ff f953 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007664:	4b50      	ldr	r3, [pc, #320]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007666:	78db      	ldrb	r3, [r3, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	bf0c      	ite	eq
 800766c:	2301      	moveq	r3, #1
 800766e:	2300      	movne	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	4b4c      	ldr	r3, [pc, #304]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007676:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	2b94      	cmp	r3, #148	; 0x94
 800767c:	d919      	bls.n	80076b2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	2ba9      	cmp	r3, #169	; 0xa9
 8007682:	d816      	bhi.n	80076b2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007684:	4b48      	ldr	r3, [pc, #288]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007686:	791b      	ldrb	r3, [r3, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 800768c:	2100      	movs	r1, #0
 800768e:	2005      	movs	r0, #5
 8007690:	f7ff f93b 	bl	800690a <changeTFTScheduleRelayLights>
 8007694:	e003      	b.n	800769e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007696:	2101      	movs	r1, #1
 8007698:	2005      	movs	r0, #5
 800769a:	f7ff f936 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800769e:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076a0:	791b      	ldrb	r3, [r3, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076b0:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	2bb4      	cmp	r3, #180	; 0xb4
 80076b6:	d919      	bls.n	80076ec <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2bc9      	cmp	r3, #201	; 0xc9
 80076bc:	d816      	bhi.n	80076ec <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 80076be:	4b3a      	ldr	r3, [pc, #232]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076c0:	795b      	ldrb	r3, [r3, #5]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 80076c6:	2100      	movs	r1, #0
 80076c8:	2006      	movs	r0, #6
 80076ca:	f7ff f91e 	bl	800690a <changeTFTScheduleRelayLights>
 80076ce:	e003      	b.n	80076d8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80076d0:	2101      	movs	r1, #1
 80076d2:	2006      	movs	r0, #6
 80076d4:	f7ff f919 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 80076d8:	4b33      	ldr	r3, [pc, #204]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076da:	795b      	ldrb	r3, [r3, #5]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	4b2f      	ldr	r3, [pc, #188]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076ea:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	2bd4      	cmp	r3, #212	; 0xd4
 80076f0:	d919      	bls.n	8007726 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2be9      	cmp	r3, #233	; 0xe9
 80076f6:	d816      	bhi.n	8007726 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076fa:	799b      	ldrb	r3, [r3, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8007700:	2100      	movs	r1, #0
 8007702:	2007      	movs	r0, #7
 8007704:	f7ff f901 	bl	800690a <changeTFTScheduleRelayLights>
 8007708:	e003      	b.n	8007712 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800770a:	2101      	movs	r1, #1
 800770c:	2007      	movs	r0, #7
 800770e:	f7ff f8fc 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007712:	4b25      	ldr	r3, [pc, #148]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007714:	799b      	ldrb	r3, [r3, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	bf0c      	ite	eq
 800771a:	2301      	moveq	r3, #1
 800771c:	2300      	movne	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	4b21      	ldr	r3, [pc, #132]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007724:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	2bf4      	cmp	r3, #244	; 0xf4
 800772a:	d91a      	bls.n	8007762 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007732:	d216      	bcs.n	8007762 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007734:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007736:	79db      	ldrb	r3, [r3, #7]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 800773c:	2100      	movs	r1, #0
 800773e:	2008      	movs	r0, #8
 8007740:	f7ff f8e3 	bl	800690a <changeTFTScheduleRelayLights>
 8007744:	e003      	b.n	800774e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007746:	2101      	movs	r1, #1
 8007748:	2008      	movs	r0, #8
 800774a:	f7ff f8de 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800774e:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007750:	79db      	ldrb	r3, [r3, #7]
 8007752:	2b00      	cmp	r3, #0
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007760:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007768:	d91a      	bls.n	80077a0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007770:	d216      	bcs.n	80077a0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007774:	7a1b      	ldrb	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 800777a:	2100      	movs	r1, #0
 800777c:	2009      	movs	r0, #9
 800777e:	f7ff f8c4 	bl	800690a <changeTFTScheduleRelayLights>
 8007782:	e003      	b.n	800778c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007784:	2101      	movs	r1, #1
 8007786:	2009      	movs	r0, #9
 8007788:	f7ff f8bf 	bl	800690a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800778e:	7a1b      	ldrb	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	461a      	mov	r2, r3
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800779e:	721a      	strb	r2, [r3, #8]
	}
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000278 	.word	0x20000278

080077ac <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d118      	bne.n	80077ee <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 80077bc:	491b      	ldr	r1, [pc, #108]	; (800782c <updateAllSchedulesInfo+0x80>)
 80077be:	2001      	movs	r0, #1
 80077c0:	f7fb fb7d 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 80077c4:	491a      	ldr	r1, [pc, #104]	; (8007830 <updateAllSchedulesInfo+0x84>)
 80077c6:	2001      	movs	r0, #1
 80077c8:	f7fb fb9d 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 80077cc:	4919      	ldr	r1, [pc, #100]	; (8007834 <updateAllSchedulesInfo+0x88>)
 80077ce:	2001      	movs	r0, #1
 80077d0:	f7fb fbbd 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 80077d4:	4918      	ldr	r1, [pc, #96]	; (8007838 <updateAllSchedulesInfo+0x8c>)
 80077d6:	2001      	movs	r0, #1
 80077d8:	f7fb fbdd 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80077dc:	4917      	ldr	r1, [pc, #92]	; (800783c <updateAllSchedulesInfo+0x90>)
 80077de:	2001      	movs	r0, #1
 80077e0:	f7fb fa1c 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80077e4:	4916      	ldr	r1, [pc, #88]	; (8007840 <updateAllSchedulesInfo+0x94>)
 80077e6:	2001      	movs	r0, #1
 80077e8:	f7fb fa94 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 80077ec:	e01a      	b.n	8007824 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d117      	bne.n	8007824 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 80077f4:	4913      	ldr	r1, [pc, #76]	; (8007844 <updateAllSchedulesInfo+0x98>)
 80077f6:	2002      	movs	r0, #2
 80077f8:	f7fb fb61 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 80077fc:	4912      	ldr	r1, [pc, #72]	; (8007848 <updateAllSchedulesInfo+0x9c>)
 80077fe:	2002      	movs	r0, #2
 8007800:	f7fb fb81 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007804:	4911      	ldr	r1, [pc, #68]	; (800784c <updateAllSchedulesInfo+0xa0>)
 8007806:	2002      	movs	r0, #2
 8007808:	f7fb fba1 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 800780c:	4910      	ldr	r1, [pc, #64]	; (8007850 <updateAllSchedulesInfo+0xa4>)
 800780e:	2002      	movs	r0, #2
 8007810:	f7fb fbc1 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007814:	4909      	ldr	r1, [pc, #36]	; (800783c <updateAllSchedulesInfo+0x90>)
 8007816:	2002      	movs	r0, #2
 8007818:	f7fb fa00 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 800781c:	4908      	ldr	r1, [pc, #32]	; (8007840 <updateAllSchedulesInfo+0x94>)
 800781e:	2002      	movs	r0, #2
 8007820:	f7fb fa78 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000281 	.word	0x20000281
 8007830:	20000283 	.word	0x20000283
 8007834:	20000282 	.word	0x20000282
 8007838:	20000284 	.word	0x20000284
 800783c:	2000025c 	.word	0x2000025c
 8007840:	20000264 	.word	0x20000264
 8007844:	20000285 	.word	0x20000285
 8007848:	20000287 	.word	0x20000287
 800784c:	20000286 	.word	0x20000286
 8007850:	20000288 	.word	0x20000288

08007854 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af02      	add	r7, sp, #8
 800785a:	4603      	mov	r3, r0
 800785c:	460a      	mov	r2, r1
 800785e:	80fb      	strh	r3, [r7, #6]
 8007860:	4613      	mov	r3, r2
 8007862:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007864:	88bb      	ldrh	r3, [r7, #4]
 8007866:	2b4a      	cmp	r3, #74	; 0x4a
 8007868:	d923      	bls.n	80078b2 <clockIncreaseOneHourAndMinute+0x5e>
 800786a:	88bb      	ldrh	r3, [r7, #4]
 800786c:	2b60      	cmp	r3, #96	; 0x60
 800786e:	d820      	bhi.n	80078b2 <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 8007870:	4b39      	ldr	r3, [pc, #228]	; (8007958 <clockIncreaseOneHourAndMinute+0x104>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b17      	cmp	r3, #23
 8007876:	d806      	bhi.n	8007886 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 8007878:	4b37      	ldr	r3, [pc, #220]	; (8007958 <clockIncreaseOneHourAndMinute+0x104>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	4b35      	ldr	r3, [pc, #212]	; (8007958 <clockIncreaseOneHourAndMinute+0x104>)
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e002      	b.n	800788c <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 8007886:	4b34      	ldr	r3, [pc, #208]	; (8007958 <clockIncreaseOneHourAndMinute+0x104>)
 8007888:	2201      	movs	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 800788c:	4b32      	ldr	r3, [pc, #200]	; (8007958 <clockIncreaseOneHourAndMinute+0x104>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	4932      	ldr	r1, [pc, #200]	; (800795c <clockIncreaseOneHourAndMinute+0x108>)
 8007894:	4832      	ldr	r0, [pc, #200]	; (8007960 <clockIncreaseOneHourAndMinute+0x10c>)
 8007896:	f009 fc6f 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800789a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	2301      	movs	r3, #1
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	2246      	movs	r2, #70	; 0x46
 80078a8:	21a0      	movs	r1, #160	; 0xa0
 80078aa:	482d      	ldr	r0, [pc, #180]	; (8007960 <clockIncreaseOneHourAndMinute+0x10c>)
 80078ac:	f7fa f93a 	bl	8001b24 <EF_PutString>
 80078b0:	e04d      	b.n	800794e <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 80078b2:	88bb      	ldrh	r3, [r7, #4]
 80078b4:	2b72      	cmp	r3, #114	; 0x72
 80078b6:	d923      	bls.n	8007900 <clockIncreaseOneHourAndMinute+0xac>
 80078b8:	88bb      	ldrh	r3, [r7, #4]
 80078ba:	2b88      	cmp	r3, #136	; 0x88
 80078bc:	d820      	bhi.n	8007900 <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 80078be:	4b29      	ldr	r3, [pc, #164]	; (8007964 <clockIncreaseOneHourAndMinute+0x110>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b3a      	cmp	r3, #58	; 0x3a
 80078c4:	d806      	bhi.n	80078d4 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 80078c6:	4b27      	ldr	r3, [pc, #156]	; (8007964 <clockIncreaseOneHourAndMinute+0x110>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	4b25      	ldr	r3, [pc, #148]	; (8007964 <clockIncreaseOneHourAndMinute+0x110>)
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e002      	b.n	80078da <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 80078d4:	4b23      	ldr	r3, [pc, #140]	; (8007964 <clockIncreaseOneHourAndMinute+0x110>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 80078da:	4b22      	ldr	r3, [pc, #136]	; (8007964 <clockIncreaseOneHourAndMinute+0x110>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	491e      	ldr	r1, [pc, #120]	; (800795c <clockIncreaseOneHourAndMinute+0x108>)
 80078e2:	481f      	ldr	r0, [pc, #124]	; (8007960 <clockIncreaseOneHourAndMinute+0x10c>)
 80078e4:	f009 fc48 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80078e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	2301      	movs	r3, #1
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2300      	movs	r3, #0
 80078f4:	226e      	movs	r2, #110	; 0x6e
 80078f6:	21a0      	movs	r1, #160	; 0xa0
 80078f8:	4819      	ldr	r0, [pc, #100]	; (8007960 <clockIncreaseOneHourAndMinute+0x10c>)
 80078fa:	f7fa f913 	bl	8001b24 <EF_PutString>
 80078fe:	e026      	b.n	800794e <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007900:	88bb      	ldrh	r3, [r7, #4]
 8007902:	2b9a      	cmp	r3, #154	; 0x9a
 8007904:	d923      	bls.n	800794e <clockIncreaseOneHourAndMinute+0xfa>
 8007906:	88bb      	ldrh	r3, [r7, #4]
 8007908:	2bb0      	cmp	r3, #176	; 0xb0
 800790a:	d820      	bhi.n	800794e <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 800790c:	4b16      	ldr	r3, [pc, #88]	; (8007968 <clockIncreaseOneHourAndMinute+0x114>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b06      	cmp	r3, #6
 8007912:	d806      	bhi.n	8007922 <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007914:	4b14      	ldr	r3, [pc, #80]	; (8007968 <clockIncreaseOneHourAndMinute+0x114>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	b2da      	uxtb	r2, r3
 800791c:	4b12      	ldr	r3, [pc, #72]	; (8007968 <clockIncreaseOneHourAndMinute+0x114>)
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e002      	b.n	8007928 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 8007922:	4b11      	ldr	r3, [pc, #68]	; (8007968 <clockIncreaseOneHourAndMinute+0x114>)
 8007924:	2201      	movs	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <clockIncreaseOneHourAndMinute+0x114>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	490f      	ldr	r1, [pc, #60]	; (800796c <clockIncreaseOneHourAndMinute+0x118>)
 8007930:	480b      	ldr	r0, [pc, #44]	; (8007960 <clockIncreaseOneHourAndMinute+0x10c>)
 8007932:	f009 fc21 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007936:	f24c 6318 	movw	r3, #50712	; 0xc618
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	2301      	movs	r3, #1
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2300      	movs	r3, #0
 8007942:	2296      	movs	r2, #150	; 0x96
 8007944:	2114      	movs	r1, #20
 8007946:	4806      	ldr	r0, [pc, #24]	; (8007960 <clockIncreaseOneHourAndMinute+0x10c>)
 8007948:	f7fa f8ec 	bl	8001b24 <EF_PutString>
	}
}
 800794c:	e7ff      	b.n	800794e <clockIncreaseOneHourAndMinute+0xfa>
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000031 	.word	0x20000031
 800795c:	08015320 	.word	0x08015320
 8007960:	200002fc 	.word	0x200002fc
 8007964:	20000032 	.word	0x20000032
 8007968:	20000030 	.word	0x20000030
 800796c:	08015328 	.word	0x08015328

08007970 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af02      	add	r7, sp, #8
 8007976:	4603      	mov	r3, r0
 8007978:	460a      	mov	r2, r1
 800797a:	80fb      	strh	r3, [r7, #6]
 800797c:	4613      	mov	r3, r2
 800797e:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8007980:	88bb      	ldrh	r3, [r7, #4]
 8007982:	2b4a      	cmp	r3, #74	; 0x4a
 8007984:	d923      	bls.n	80079ce <clockIncreaseSixHoursTenMinutes+0x5e>
 8007986:	88bb      	ldrh	r3, [r7, #4]
 8007988:	2b60      	cmp	r3, #96	; 0x60
 800798a:	d820      	bhi.n	80079ce <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 800798c:	4b2e      	ldr	r3, [pc, #184]	; (8007a48 <clockIncreaseSixHoursTenMinutes+0xd8>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b12      	cmp	r3, #18
 8007992:	d806      	bhi.n	80079a2 <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007994:	4b2c      	ldr	r3, [pc, #176]	; (8007a48 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	3306      	adds	r3, #6
 800799a:	b2da      	uxtb	r2, r3
 800799c:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <clockIncreaseSixHoursTenMinutes+0xd8>)
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e002      	b.n	80079a8 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 80079a2:	4b29      	ldr	r3, [pc, #164]	; (8007a48 <clockIncreaseSixHoursTenMinutes+0xd8>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 80079a8:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <clockIncreaseSixHoursTenMinutes+0xd8>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	4927      	ldr	r1, [pc, #156]	; (8007a4c <clockIncreaseSixHoursTenMinutes+0xdc>)
 80079b0:	4827      	ldr	r0, [pc, #156]	; (8007a50 <clockIncreaseSixHoursTenMinutes+0xe0>)
 80079b2:	f009 fbe1 	bl	8011178 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	2301      	movs	r3, #1
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2300      	movs	r3, #0
 80079c2:	2246      	movs	r2, #70	; 0x46
 80079c4:	219d      	movs	r1, #157	; 0x9d
 80079c6:	4822      	ldr	r0, [pc, #136]	; (8007a50 <clockIncreaseSixHoursTenMinutes+0xe0>)
 80079c8:	f7fa f8ac 	bl	8001b24 <EF_PutString>
 80079cc:	e035      	b.n	8007a3a <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80079ce:	88bb      	ldrh	r3, [r7, #4]
 80079d0:	2b72      	cmp	r3, #114	; 0x72
 80079d2:	d932      	bls.n	8007a3a <clockIncreaseSixHoursTenMinutes+0xca>
 80079d4:	88bb      	ldrh	r3, [r7, #4]
 80079d6:	2b88      	cmp	r3, #136	; 0x88
 80079d8:	d82f      	bhi.n	8007a3a <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 80079da:	4b1e      	ldr	r3, [pc, #120]	; (8007a54 <clockIncreaseSixHoursTenMinutes+0xe4>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b30      	cmp	r3, #48	; 0x30
 80079e0:	d806      	bhi.n	80079f0 <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <clockIncreaseSixHoursTenMinutes+0xe4>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	330a      	adds	r3, #10
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <clockIncreaseSixHoursTenMinutes+0xe4>)
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e012      	b.n	8007a16 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 80079f0:	4b18      	ldr	r3, [pc, #96]	; (8007a54 <clockIncreaseSixHoursTenMinutes+0xe4>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f103 020a 	add.w	r2, r3, #10
 80079f8:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80079fa:	fb83 1302 	smull	r1, r3, r3, r2
 80079fe:	4413      	add	r3, r2
 8007a00:	1159      	asrs	r1, r3, #5
 8007a02:	17d3      	asrs	r3, r2, #31
 8007a04:	1ac9      	subs	r1, r1, r3
 8007a06:	460b      	mov	r3, r1
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	1a5b      	subs	r3, r3, r1
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	1ad1      	subs	r1, r2, r3
 8007a10:	b2ca      	uxtb	r2, r1
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a14:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	490b      	ldr	r1, [pc, #44]	; (8007a4c <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007a1e:	480c      	ldr	r0, [pc, #48]	; (8007a50 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a20:	f009 fbaa 	bl	8011178 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	226e      	movs	r2, #110	; 0x6e
 8007a32:	219c      	movs	r1, #156	; 0x9c
 8007a34:	4806      	ldr	r0, [pc, #24]	; (8007a50 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a36:	f7fa f875 	bl	8001b24 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007a3a:	4808      	ldr	r0, [pc, #32]	; (8007a5c <clockIncreaseSixHoursTenMinutes+0xec>)
 8007a3c:	f7f9 fe58 	bl	80016f0 <EF_SetFont>
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000031 	.word	0x20000031
 8007a4c:	08015320 	.word	0x08015320
 8007a50:	200002fc 	.word	0x200002fc
 8007a54:	20000032 	.word	0x20000032
 8007a58:	88888889 	.word	0x88888889
 8007a5c:	080180dc 	.word	0x080180dc

08007a60 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d954      	bls.n	8007b1a <changeSwitchStatusTouch+0xba>
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b56      	cmp	r3, #86	; 0x56
 8007a74:	d851      	bhi.n	8007b1a <changeSwitchStatusTouch+0xba>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007a76:	4bb0      	ldr	r3, [pc, #704]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d026      	beq.n	8007acc <changeSwitchStatusTouch+0x6c>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8007a7e:	2006      	movs	r0, #6
 8007a80:	f000 ffac 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007a84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2305      	movs	r3, #5
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2315      	movs	r3, #21
 8007a90:	2221      	movs	r2, #33	; 0x21
 8007a92:	2141      	movs	r1, #65	; 0x41
 8007a94:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007a98:	f7f9 fdd9 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007a9c:	49a7      	ldr	r1, [pc, #668]	; (8007d3c <changeSwitchStatusTouch+0x2dc>)
 8007a9e:	48a8      	ldr	r0, [pc, #672]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007aa0:	f009 fb6a 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007aa4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2243      	movs	r2, #67	; 0x43
 8007ab2:	f240 1111 	movw	r1, #273	; 0x111
 8007ab6:	48a2      	ldr	r0, [pc, #648]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007ab8:	f7fa f834 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 0;
 8007abc:	4b9e      	ldr	r3, [pc, #632]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 0);
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	f7fa ff59 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007aca:	e12d      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8007acc:	2005      	movs	r0, #5
 8007ace:	f000 ff85 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007ad2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	2305      	movs	r3, #5
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2315      	movs	r3, #21
 8007ade:	2221      	movs	r2, #33	; 0x21
 8007ae0:	2141      	movs	r1, #65	; 0x41
 8007ae2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007ae6:	f7f9 fdb2 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007aea:	4996      	ldr	r1, [pc, #600]	; (8007d44 <changeSwitchStatusTouch+0x2e4>)
 8007aec:	4894      	ldr	r0, [pc, #592]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007aee:	f009 fb43 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007af2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	2300      	movs	r3, #0
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2300      	movs	r3, #0
 8007afe:	2243      	movs	r2, #67	; 0x43
 8007b00:	f240 1111 	movw	r1, #273	; 0x111
 8007b04:	488e      	ldr	r0, [pc, #568]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007b06:	f7fa f80d 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 1;
 8007b0a:	4b8b      	ldr	r3, [pc, #556]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 1);
 8007b10:	2101      	movs	r1, #1
 8007b12:	2001      	movs	r0, #1
 8007b14:	f7fa ff32 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b18:	e106      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}

	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	2b5e      	cmp	r3, #94	; 0x5e
 8007b1e:	d954      	bls.n	8007bca <changeSwitchStatusTouch+0x16a>
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b74      	cmp	r3, #116	; 0x74
 8007b24:	d851      	bhi.n	8007bca <changeSwitchStatusTouch+0x16a>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007b26:	4b84      	ldr	r3, [pc, #528]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d026      	beq.n	8007b7c <changeSwitchStatusTouch+0x11c>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8007b2e:	2008      	movs	r0, #8
 8007b30:	f000 ff54 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007b34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	2305      	movs	r3, #5
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	2315      	movs	r3, #21
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	215f      	movs	r1, #95	; 0x5f
 8007b44:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007b48:	f7f9 fd81 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007b4c:	497b      	ldr	r1, [pc, #492]	; (8007d3c <changeSwitchStatusTouch+0x2dc>)
 8007b4e:	487c      	ldr	r0, [pc, #496]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007b50:	f009 fb12 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007b54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2261      	movs	r2, #97	; 0x61
 8007b62:	f240 1111 	movw	r1, #273	; 0x111
 8007b66:	4876      	ldr	r0, [pc, #472]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007b68:	f7f9 ffdc 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 0;
 8007b6c:	4b72      	ldr	r3, [pc, #456]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 0);
 8007b72:	2100      	movs	r1, #0
 8007b74:	2002      	movs	r0, #2
 8007b76:	f7fa ff01 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007b7a:	e0d5      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8007b7c:	2007      	movs	r0, #7
 8007b7e:	f000 ff2d 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007b82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	2305      	movs	r3, #5
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2315      	movs	r3, #21
 8007b8e:	2221      	movs	r2, #33	; 0x21
 8007b90:	215f      	movs	r1, #95	; 0x5f
 8007b92:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007b96:	f7f9 fd5a 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007b9a:	496a      	ldr	r1, [pc, #424]	; (8007d44 <changeSwitchStatusTouch+0x2e4>)
 8007b9c:	4868      	ldr	r0, [pc, #416]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007b9e:	f009 faeb 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007ba2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	2261      	movs	r2, #97	; 0x61
 8007bb0:	f240 1111 	movw	r1, #273	; 0x111
 8007bb4:	4862      	ldr	r0, [pc, #392]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007bb6:	f7f9 ffb5 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 1;
 8007bba:	4b5f      	ldr	r3, [pc, #380]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 1);
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	2002      	movs	r0, #2
 8007bc4:	f7fa feda 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007bc8:	e0ae      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	2b7c      	cmp	r3, #124	; 0x7c
 8007bce:	d954      	bls.n	8007c7a <changeSwitchStatusTouch+0x21a>
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b92      	cmp	r3, #146	; 0x92
 8007bd4:	d851      	bhi.n	8007c7a <changeSwitchStatusTouch+0x21a>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007bd6:	4b58      	ldr	r3, [pc, #352]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007bd8:	789b      	ldrb	r3, [r3, #2]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d026      	beq.n	8007c2c <changeSwitchStatusTouch+0x1cc>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8007bde:	200a      	movs	r0, #10
 8007be0:	f000 fefc 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007be4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	2305      	movs	r3, #5
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2315      	movs	r3, #21
 8007bf0:	2221      	movs	r2, #33	; 0x21
 8007bf2:	217d      	movs	r1, #125	; 0x7d
 8007bf4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007bf8:	f7f9 fd29 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007bfc:	494f      	ldr	r1, [pc, #316]	; (8007d3c <changeSwitchStatusTouch+0x2dc>)
 8007bfe:	4850      	ldr	r0, [pc, #320]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007c00:	f009 faba 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007c04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	227f      	movs	r2, #127	; 0x7f
 8007c12:	f240 1111 	movw	r1, #273	; 0x111
 8007c16:	484a      	ldr	r0, [pc, #296]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007c18:	f7f9 ff84 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 0;
 8007c1c:	4b46      	ldr	r3, [pc, #280]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 0);
 8007c22:	2100      	movs	r1, #0
 8007c24:	2003      	movs	r0, #3
 8007c26:	f7fa fea9 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c2a:	e07d      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8007c2c:	2009      	movs	r0, #9
 8007c2e:	f000 fed5 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007c32:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	2305      	movs	r3, #5
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	2315      	movs	r3, #21
 8007c3e:	2221      	movs	r2, #33	; 0x21
 8007c40:	217d      	movs	r1, #125	; 0x7d
 8007c42:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c46:	f7f9 fd02 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007c4a:	493e      	ldr	r1, [pc, #248]	; (8007d44 <changeSwitchStatusTouch+0x2e4>)
 8007c4c:	483c      	ldr	r0, [pc, #240]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007c4e:	f009 fa93 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007c52:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	227f      	movs	r2, #127	; 0x7f
 8007c60:	f240 1111 	movw	r1, #273	; 0x111
 8007c64:	4836      	ldr	r0, [pc, #216]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007c66:	f7f9 ff5d 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 1;
 8007c6a:	4b33      	ldr	r3, [pc, #204]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 1);
 8007c70:	2101      	movs	r1, #1
 8007c72:	2003      	movs	r0, #3
 8007c74:	f7fa fe82 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c78:	e056      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b9a      	cmp	r3, #154	; 0x9a
 8007c7e:	d953      	bls.n	8007d28 <changeSwitchStatusTouch+0x2c8>
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	2bb0      	cmp	r3, #176	; 0xb0
 8007c84:	d850      	bhi.n	8007d28 <changeSwitchStatusTouch+0x2c8>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007c86:	4b2c      	ldr	r3, [pc, #176]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007c88:	78db      	ldrb	r3, [r3, #3]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d026      	beq.n	8007cdc <changeSwitchStatusTouch+0x27c>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8007c8e:	200c      	movs	r0, #12
 8007c90:	f000 fea4 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007c94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	2305      	movs	r3, #5
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	2315      	movs	r3, #21
 8007ca0:	2221      	movs	r2, #33	; 0x21
 8007ca2:	219b      	movs	r1, #155	; 0x9b
 8007ca4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007ca8:	f7f9 fcd1 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007cac:	4923      	ldr	r1, [pc, #140]	; (8007d3c <changeSwitchStatusTouch+0x2dc>)
 8007cae:	4824      	ldr	r0, [pc, #144]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007cb0:	f009 fa62 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007cb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	229d      	movs	r2, #157	; 0x9d
 8007cc2:	f240 1111 	movw	r1, #273	; 0x111
 8007cc6:	481e      	ldr	r0, [pc, #120]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007cc8:	f7f9 ff2c 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 0;
 8007ccc:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 0);
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	2004      	movs	r0, #4
 8007cd6:	f7fa fe51 	bl	800297c <EEPROM_RelayStateUpdate>
 8007cda:	e025      	b.n	8007d28 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8007cdc:	200b      	movs	r0, #11
 8007cde:	f000 fe7d 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007ce2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	2305      	movs	r3, #5
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2315      	movs	r3, #21
 8007cee:	2221      	movs	r2, #33	; 0x21
 8007cf0:	219b      	movs	r1, #155	; 0x9b
 8007cf2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007cf6:	f7f9 fcaa 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007cfa:	4912      	ldr	r1, [pc, #72]	; (8007d44 <changeSwitchStatusTouch+0x2e4>)
 8007cfc:	4810      	ldr	r0, [pc, #64]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007cfe:	f009 fa3b 	bl	8011178 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007d02:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	229d      	movs	r2, #157	; 0x9d
 8007d10:	f240 1111 	movw	r1, #273	; 0x111
 8007d14:	480a      	ldr	r0, [pc, #40]	; (8007d40 <changeSwitchStatusTouch+0x2e0>)
 8007d16:	f7f9 ff05 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 1;
 8007d1a:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <changeSwitchStatusTouch+0x2d8>)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 1);
 8007d20:	2101      	movs	r1, #1
 8007d22:	2004      	movs	r0, #4
 8007d24:	f7fa fe2a 	bl	800297c <EEPROM_RelayStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007d28:	4807      	ldr	r0, [pc, #28]	; (8007d48 <changeSwitchStatusTouch+0x2e8>)
 8007d2a:	f7f9 fce1 	bl	80016f0 <EF_SetFont>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200002a8 	.word	0x200002a8
 8007d3c:	0801533c 	.word	0x0801533c
 8007d40:	200002fc 	.word	0x200002fc
 8007d44:	08015340 	.word	0x08015340
 8007d48:	080180dc 	.word	0x080180dc

08007d4c <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d950      	bls.n	8007dfe <changeLightsStatusTouch+0xb2>
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b56      	cmp	r3, #86	; 0x56
 8007d60:	d84d      	bhi.n	8007dfe <changeLightsStatusTouch+0xb2>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007d62:	4ba8      	ldr	r3, [pc, #672]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d024      	beq.n	8007db4 <changeLightsStatusTouch+0x68>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8007d6a:	200e      	movs	r0, #14
 8007d6c:	f000 fe36 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007d70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	2305      	movs	r3, #5
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2315      	movs	r3, #21
 8007d7c:	2221      	movs	r2, #33	; 0x21
 8007d7e:	2141      	movs	r1, #65	; 0x41
 8007d80:	20c8      	movs	r0, #200	; 0xc8
 8007d82:	f7f9 fc64 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007d86:	49a0      	ldr	r1, [pc, #640]	; (8008008 <changeLightsStatusTouch+0x2bc>)
 8007d88:	48a0      	ldr	r0, [pc, #640]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007d8a:	f009 f9f5 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007d8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	2300      	movs	r3, #0
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2243      	movs	r2, #67	; 0x43
 8007d9c:	21cb      	movs	r1, #203	; 0xcb
 8007d9e:	489b      	ldr	r0, [pc, #620]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007da0:	f7f9 fec0 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 0;
 8007da4:	4b97      	ldr	r3, [pc, #604]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 0);
 8007daa:	2100      	movs	r1, #0
 8007dac:	2001      	movs	r0, #1
 8007dae:	f7fa fe1e 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007db2:	e11f      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8007db4:	200d      	movs	r0, #13
 8007db6:	f000 fe11 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007dba:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	2305      	movs	r3, #5
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2315      	movs	r3, #21
 8007dc6:	2221      	movs	r2, #33	; 0x21
 8007dc8:	2141      	movs	r1, #65	; 0x41
 8007dca:	20c8      	movs	r0, #200	; 0xc8
 8007dcc:	f7f9 fc3f 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007dd0:	498f      	ldr	r1, [pc, #572]	; (8008010 <changeLightsStatusTouch+0x2c4>)
 8007dd2:	488e      	ldr	r0, [pc, #568]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007dd4:	f009 f9d0 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007dd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	2300      	movs	r3, #0
 8007de4:	2243      	movs	r2, #67	; 0x43
 8007de6:	21cb      	movs	r1, #203	; 0xcb
 8007de8:	4888      	ldr	r0, [pc, #544]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007dea:	f7f9 fe9b 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 1;
 8007dee:	4b85      	ldr	r3, [pc, #532]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 1);
 8007df4:	2101      	movs	r1, #1
 8007df6:	2001      	movs	r0, #1
 8007df8:	f7fa fdf9 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007dfc:	e0fa      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	2b5e      	cmp	r3, #94	; 0x5e
 8007e02:	d950      	bls.n	8007ea6 <changeLightsStatusTouch+0x15a>
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	2b74      	cmp	r3, #116	; 0x74
 8007e08:	d84d      	bhi.n	8007ea6 <changeLightsStatusTouch+0x15a>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007e0a:	4b7e      	ldr	r3, [pc, #504]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d024      	beq.n	8007e5c <changeLightsStatusTouch+0x110>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8007e12:	2010      	movs	r0, #16
 8007e14:	f000 fde2 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	2305      	movs	r3, #5
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	2315      	movs	r3, #21
 8007e24:	2221      	movs	r2, #33	; 0x21
 8007e26:	215f      	movs	r1, #95	; 0x5f
 8007e28:	20c8      	movs	r0, #200	; 0xc8
 8007e2a:	f7f9 fc10 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007e2e:	4976      	ldr	r1, [pc, #472]	; (8008008 <changeLightsStatusTouch+0x2bc>)
 8007e30:	4876      	ldr	r0, [pc, #472]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007e32:	f009 f9a1 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2300      	movs	r3, #0
 8007e42:	2261      	movs	r2, #97	; 0x61
 8007e44:	21cb      	movs	r1, #203	; 0xcb
 8007e46:	4871      	ldr	r0, [pc, #452]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007e48:	f7f9 fe6c 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 0;
 8007e4c:	4b6d      	ldr	r3, [pc, #436]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 0);
 8007e52:	2100      	movs	r1, #0
 8007e54:	2002      	movs	r0, #2
 8007e56:	f7fa fdca 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007e5a:	e0cb      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8007e5c:	200f      	movs	r0, #15
 8007e5e:	f000 fdbd 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007e62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	2305      	movs	r3, #5
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2315      	movs	r3, #21
 8007e6e:	2221      	movs	r2, #33	; 0x21
 8007e70:	215f      	movs	r1, #95	; 0x5f
 8007e72:	20c8      	movs	r0, #200	; 0xc8
 8007e74:	f7f9 fbeb 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007e78:	4965      	ldr	r1, [pc, #404]	; (8008010 <changeLightsStatusTouch+0x2c4>)
 8007e7a:	4864      	ldr	r0, [pc, #400]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007e7c:	f009 f97c 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2261      	movs	r2, #97	; 0x61
 8007e8e:	21cb      	movs	r1, #203	; 0xcb
 8007e90:	485e      	ldr	r0, [pc, #376]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007e92:	f7f9 fe47 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 1;
 8007e96:	4b5b      	ldr	r3, [pc, #364]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 1);
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	2002      	movs	r0, #2
 8007ea0:	f7fa fda5 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007ea4:	e0a6      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	2b7c      	cmp	r3, #124	; 0x7c
 8007eaa:	d950      	bls.n	8007f4e <changeLightsStatusTouch+0x202>
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b92      	cmp	r3, #146	; 0x92
 8007eb0:	d84d      	bhi.n	8007f4e <changeLightsStatusTouch+0x202>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8007eb2:	4b54      	ldr	r3, [pc, #336]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007eb4:	789b      	ldrb	r3, [r3, #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d024      	beq.n	8007f04 <changeLightsStatusTouch+0x1b8>
		{
			SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8007eba:	2012      	movs	r0, #18
 8007ebc:	f000 fd8e 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ec0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2305      	movs	r3, #5
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2315      	movs	r3, #21
 8007ecc:	2221      	movs	r2, #33	; 0x21
 8007ece:	217d      	movs	r1, #125	; 0x7d
 8007ed0:	20c8      	movs	r0, #200	; 0xc8
 8007ed2:	f7f9 fbbc 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007ed6:	494c      	ldr	r1, [pc, #304]	; (8008008 <changeLightsStatusTouch+0x2bc>)
 8007ed8:	484c      	ldr	r0, [pc, #304]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007eda:	f009 f94d 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007ede:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	227f      	movs	r2, #127	; 0x7f
 8007eec:	21cb      	movs	r1, #203	; 0xcb
 8007eee:	4847      	ldr	r0, [pc, #284]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007ef0:	f7f9 fe18 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 0;
 8007ef4:	4b43      	ldr	r3, [pc, #268]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 0);
 8007efa:	2100      	movs	r1, #0
 8007efc:	2003      	movs	r0, #3
 8007efe:	f7fa fd76 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007f02:	e077      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8007f04:	2011      	movs	r0, #17
 8007f06:	f000 fd69 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007f0a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	2305      	movs	r3, #5
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	2315      	movs	r3, #21
 8007f16:	2221      	movs	r2, #33	; 0x21
 8007f18:	217d      	movs	r1, #125	; 0x7d
 8007f1a:	20c8      	movs	r0, #200	; 0xc8
 8007f1c:	f7f9 fb97 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007f20:	493b      	ldr	r1, [pc, #236]	; (8008010 <changeLightsStatusTouch+0x2c4>)
 8007f22:	483a      	ldr	r0, [pc, #232]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007f24:	f009 f928 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	227f      	movs	r2, #127	; 0x7f
 8007f36:	21cb      	movs	r1, #203	; 0xcb
 8007f38:	4834      	ldr	r0, [pc, #208]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007f3a:	f7f9 fdf3 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 1;
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 1);
 8007f44:	2101      	movs	r1, #1
 8007f46:	2003      	movs	r0, #3
 8007f48:	f7fa fd51 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007f4c:	e052      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	2b9a      	cmp	r3, #154	; 0x9a
 8007f52:	d94f      	bls.n	8007ff4 <changeLightsStatusTouch+0x2a8>
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2bb0      	cmp	r3, #176	; 0xb0
 8007f58:	d84c      	bhi.n	8007ff4 <changeLightsStatusTouch+0x2a8>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8007f5a:	4b2a      	ldr	r3, [pc, #168]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d024      	beq.n	8007fac <changeLightsStatusTouch+0x260>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8007f62:	2014      	movs	r0, #20
 8007f64:	f000 fd3a 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	2305      	movs	r3, #5
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	2315      	movs	r3, #21
 8007f74:	2221      	movs	r2, #33	; 0x21
 8007f76:	219b      	movs	r1, #155	; 0x9b
 8007f78:	20c8      	movs	r0, #200	; 0xc8
 8007f7a:	f7f9 fb68 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007f7e:	4922      	ldr	r1, [pc, #136]	; (8008008 <changeLightsStatusTouch+0x2bc>)
 8007f80:	4822      	ldr	r0, [pc, #136]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007f82:	f009 f8f9 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	2300      	movs	r3, #0
 8007f92:	229d      	movs	r2, #157	; 0x9d
 8007f94:	21cb      	movs	r1, #203	; 0xcb
 8007f96:	481d      	ldr	r0, [pc, #116]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007f98:	f7f9 fdc4 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 0;
 8007f9c:	4b19      	ldr	r3, [pc, #100]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 0);
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	2004      	movs	r0, #4
 8007fa6:	f7fa fd22 	bl	80029ee <EEPROM_LightStateUpdate>
 8007faa:	e023      	b.n	8007ff4 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8007fac:	2013      	movs	r0, #19
 8007fae:	f000 fd15 	bl	80089dc <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007fb2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	2305      	movs	r3, #5
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2315      	movs	r3, #21
 8007fbe:	2221      	movs	r2, #33	; 0x21
 8007fc0:	219b      	movs	r1, #155	; 0x9b
 8007fc2:	20c8      	movs	r0, #200	; 0xc8
 8007fc4:	f7f9 fb43 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007fc8:	4911      	ldr	r1, [pc, #68]	; (8008010 <changeLightsStatusTouch+0x2c4>)
 8007fca:	4810      	ldr	r0, [pc, #64]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007fcc:	f009 f8d4 	bl	8011178 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007fd0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	229d      	movs	r2, #157	; 0x9d
 8007fde:	21cb      	movs	r1, #203	; 0xcb
 8007fe0:	480a      	ldr	r0, [pc, #40]	; (800800c <changeLightsStatusTouch+0x2c0>)
 8007fe2:	f7f9 fd9f 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 1;
 8007fe6:	4b07      	ldr	r3, [pc, #28]	; (8008004 <changeLightsStatusTouch+0x2b8>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 1);
 8007fec:	2101      	movs	r1, #1
 8007fee:	2004      	movs	r0, #4
 8007ff0:	f7fa fcfd 	bl	80029ee <EEPROM_LightStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007ff4:	4807      	ldr	r0, [pc, #28]	; (8008014 <changeLightsStatusTouch+0x2c8>)
 8007ff6:	f7f9 fb7b 	bl	80016f0 <EF_SetFont>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200002ac 	.word	0x200002ac
 8008008:	0801533c 	.word	0x0801533c
 800800c:	200002fc 	.word	0x200002fc
 8008010:	08015340 	.word	0x08015340
 8008014:	080180dc 	.word	0x080180dc

08008018 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af02      	add	r7, sp, #8
 800801e:	4603      	mov	r3, r0
 8008020:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	2b3b      	cmp	r3, #59	; 0x3b
 8008026:	d966      	bls.n	80080f6 <predefinedActivityTouchAction+0xde>
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	2b64      	cmp	r3, #100	; 0x64
 800802c:	d863      	bhi.n	80080f6 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 800802e:	4b69      	ldr	r3, [pc, #420]	; (80081d4 <predefinedActivityTouchAction+0x1bc>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d02f      	beq.n	8008096 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 8008036:	4b67      	ldr	r3, [pc, #412]	; (80081d4 <predefinedActivityTouchAction+0x1bc>)
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800803c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	230a      	movs	r3, #10
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2328      	movs	r3, #40	; 0x28
 8008048:	2278      	movs	r2, #120	; 0x78
 800804a:	213c      	movs	r1, #60	; 0x3c
 800804c:	2064      	movs	r0, #100	; 0x64
 800804e:	f7f9 fafe 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8008052:	4961      	ldr	r1, [pc, #388]	; (80081d8 <predefinedActivityTouchAction+0x1c0>)
 8008054:	4861      	ldr	r0, [pc, #388]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 8008056:	f009 f88f 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800805a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	223e      	movs	r2, #62	; 0x3e
 8008068:	2177      	movs	r1, #119	; 0x77
 800806a:	485c      	ldr	r0, [pc, #368]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 800806c:	f7f9 fd5a 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008070:	495b      	ldr	r1, [pc, #364]	; (80081e0 <predefinedActivityTouchAction+0x1c8>)
 8008072:	485a      	ldr	r0, [pc, #360]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 8008074:	f009 f880 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008078:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	2300      	movs	r3, #0
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	2300      	movs	r3, #0
 8008084:	2250      	movs	r2, #80	; 0x50
 8008086:	2193      	movs	r1, #147	; 0x93
 8008088:	4854      	ldr	r0, [pc, #336]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 800808a:	f7f9 fd4b 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 800808e:	2000      	movs	r0, #0
 8008090:	f7fc fe58 	bl	8004d44 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008094:	e099      	b.n	80081ca <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008096:	4b4f      	ldr	r3, [pc, #316]	; (80081d4 <predefinedActivityTouchAction+0x1bc>)
 8008098:	2201      	movs	r2, #1
 800809a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800809c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	230a      	movs	r3, #10
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	2328      	movs	r3, #40	; 0x28
 80080a8:	2278      	movs	r2, #120	; 0x78
 80080aa:	213c      	movs	r1, #60	; 0x3c
 80080ac:	2064      	movs	r0, #100	; 0x64
 80080ae:	f7f9 face 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80080b2:	4949      	ldr	r1, [pc, #292]	; (80081d8 <predefinedActivityTouchAction+0x1c0>)
 80080b4:	4849      	ldr	r0, [pc, #292]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80080b6:	f009 f85f 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80080ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	2300      	movs	r3, #0
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	223e      	movs	r2, #62	; 0x3e
 80080c8:	2177      	movs	r1, #119	; 0x77
 80080ca:	4844      	ldr	r0, [pc, #272]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80080cc:	f7f9 fd2a 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80080d0:	4944      	ldr	r1, [pc, #272]	; (80081e4 <predefinedActivityTouchAction+0x1cc>)
 80080d2:	4842      	ldr	r0, [pc, #264]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80080d4:	f009 f850 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80080d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	2300      	movs	r3, #0
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	2300      	movs	r3, #0
 80080e4:	2250      	movs	r2, #80	; 0x50
 80080e6:	2193      	movs	r1, #147	; 0x93
 80080e8:	483c      	ldr	r0, [pc, #240]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80080ea:	f7f9 fd1b 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(1);
 80080ee:	2001      	movs	r0, #1
 80080f0:	f7fc fe28 	bl	8004d44 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80080f4:	e069      	b.n	80081ca <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	2b77      	cmp	r3, #119	; 0x77
 80080fa:	d966      	bls.n	80081ca <predefinedActivityTouchAction+0x1b2>
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2ba0      	cmp	r3, #160	; 0xa0
 8008100:	d863      	bhi.n	80081ca <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 8008102:	4b34      	ldr	r3, [pc, #208]	; (80081d4 <predefinedActivityTouchAction+0x1bc>)
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d02f      	beq.n	800816a <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 800810a:	4b32      	ldr	r3, [pc, #200]	; (80081d4 <predefinedActivityTouchAction+0x1bc>)
 800810c:	2200      	movs	r2, #0
 800810e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008110:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	230a      	movs	r3, #10
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2328      	movs	r3, #40	; 0x28
 800811c:	2278      	movs	r2, #120	; 0x78
 800811e:	2178      	movs	r1, #120	; 0x78
 8008120:	2064      	movs	r0, #100	; 0x64
 8008122:	f7f9 fa94 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008126:	4930      	ldr	r1, [pc, #192]	; (80081e8 <predefinedActivityTouchAction+0x1d0>)
 8008128:	482c      	ldr	r0, [pc, #176]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 800812a:	f009 f825 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800812e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	2300      	movs	r3, #0
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	2300      	movs	r3, #0
 800813a:	227a      	movs	r2, #122	; 0x7a
 800813c:	2169      	movs	r1, #105	; 0x69
 800813e:	4827      	ldr	r0, [pc, #156]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 8008140:	f7f9 fcf0 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008144:	4926      	ldr	r1, [pc, #152]	; (80081e0 <predefinedActivityTouchAction+0x1c8>)
 8008146:	4825      	ldr	r0, [pc, #148]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 8008148:	f009 f816 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800814c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	2300      	movs	r3, #0
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	2300      	movs	r3, #0
 8008158:	228c      	movs	r2, #140	; 0x8c
 800815a:	2193      	movs	r1, #147	; 0x93
 800815c:	481f      	ldr	r0, [pc, #124]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 800815e:	f7f9 fce1 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008162:	2000      	movs	r0, #0
 8008164:	f7fc fdd4 	bl	8004d10 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008168:	e02f      	b.n	80081ca <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 800816a:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <predefinedActivityTouchAction+0x1bc>)
 800816c:	2201      	movs	r2, #1
 800816e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008170:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	230a      	movs	r3, #10
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	2328      	movs	r3, #40	; 0x28
 800817c:	2278      	movs	r2, #120	; 0x78
 800817e:	2178      	movs	r1, #120	; 0x78
 8008180:	2064      	movs	r0, #100	; 0x64
 8008182:	f7f9 fa64 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008186:	4918      	ldr	r1, [pc, #96]	; (80081e8 <predefinedActivityTouchAction+0x1d0>)
 8008188:	4814      	ldr	r0, [pc, #80]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 800818a:	f008 fff5 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800818e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	2300      	movs	r3, #0
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	2300      	movs	r3, #0
 800819a:	227a      	movs	r2, #122	; 0x7a
 800819c:	2169      	movs	r1, #105	; 0x69
 800819e:	480f      	ldr	r0, [pc, #60]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80081a0:	f7f9 fcc0 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80081a4:	490f      	ldr	r1, [pc, #60]	; (80081e4 <predefinedActivityTouchAction+0x1cc>)
 80081a6:	480d      	ldr	r0, [pc, #52]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80081a8:	f008 ffe6 	bl	8011178 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80081ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	2300      	movs	r3, #0
 80081b8:	228c      	movs	r2, #140	; 0x8c
 80081ba:	2193      	movs	r1, #147	; 0x93
 80081bc:	4807      	ldr	r0, [pc, #28]	; (80081dc <predefinedActivityTouchAction+0x1c4>)
 80081be:	f7f9 fcb1 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 80081c2:	2001      	movs	r0, #1
 80081c4:	f7fc fda4 	bl	8004d10 <predefinedActivityCzyszczenie>
}
 80081c8:	e7ff      	b.n	80081ca <predefinedActivityTouchAction+0x1b2>
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200002b0 	.word	0x200002b0
 80081d8:	08015344 	.word	0x08015344
 80081dc:	200002fc 	.word	0x200002fc
 80081e0:	0801533c 	.word	0x0801533c
 80081e4:	08015340 	.word	0x08015340
 80081e8:	08015350 	.word	0x08015350

080081ec <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	4603      	mov	r3, r0
 80081f4:	460a      	mov	r2, r1
 80081f6:	71fb      	strb	r3, [r7, #7]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	2bd8      	cmp	r3, #216	; 0xd8
 8008200:	d92f      	bls.n	8008262 <increaseNumberOfWSLedOnTFT+0x76>
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2bf7      	cmp	r3, #247	; 0xf7
 8008206:	d82c      	bhi.n	8008262 <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8008208:	4b38      	ldr	r3, [pc, #224]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b61      	cmp	r3, #97	; 0x61
 800820e:	d806      	bhi.n	800821e <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 8008210:	4b36      	ldr	r3, [pc, #216]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	4b34      	ldr	r3, [pc, #208]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e002      	b.n	8008224 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 800821e:	4b33      	ldr	r3, [pc, #204]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008224:	4b31      	ldr	r3, [pc, #196]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b09      	cmp	r3, #9
 800822a:	d807      	bhi.n	800823c <increaseNumberOfWSLedOnTFT+0x50>
 800822c:	4b2f      	ldr	r3, [pc, #188]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	492f      	ldr	r1, [pc, #188]	; (80082f0 <increaseNumberOfWSLedOnTFT+0x104>)
 8008234:	482f      	ldr	r0, [pc, #188]	; (80082f4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008236:	f008 ff9f 	bl	8011178 <siprintf>
 800823a:	e006      	b.n	800824a <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 800823c:	4b2b      	ldr	r3, [pc, #172]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	492d      	ldr	r1, [pc, #180]	; (80082f8 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008244:	482b      	ldr	r0, [pc, #172]	; (80082f4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008246:	f008 ff97 	bl	8011178 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800824a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	2301      	movs	r3, #1
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	223c      	movs	r2, #60	; 0x3c
 8008258:	21ac      	movs	r1, #172	; 0xac
 800825a:	4826      	ldr	r0, [pc, #152]	; (80082f4 <increaseNumberOfWSLedOnTFT+0x108>)
 800825c:	f7f9 fc62 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008260:	e03f      	b.n	80082e2 <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	2bfb      	cmp	r3, #251	; 0xfb
 8008266:	d93c      	bls.n	80082e2 <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 8008268:	4b20      	ldr	r3, [pc, #128]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b59      	cmp	r3, #89	; 0x59
 800826e:	d806      	bhi.n	800827e <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 8008270:	4b1e      	ldr	r3, [pc, #120]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	330a      	adds	r3, #10
 8008276:	b2da      	uxtb	r2, r3
 8008278:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e013      	b.n	80082a6 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 800827e:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f103 020a 	add.w	r2, r3, #10
 8008286:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <increaseNumberOfWSLedOnTFT+0x110>)
 8008288:	fb83 1302 	smull	r1, r3, r3, r2
 800828c:	4413      	add	r3, r2
 800828e:	1199      	asrs	r1, r3, #6
 8008290:	17d3      	asrs	r3, r2, #31
 8008292:	1ac9      	subs	r1, r1, r3
 8008294:	460b      	mov	r3, r1
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	440b      	add	r3, r1
 800829a:	0159      	lsls	r1, r3, #5
 800829c:	440b      	add	r3, r1
 800829e:	1ad1      	subs	r1, r2, r3
 80082a0:	b2ca      	uxtb	r2, r1
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 80082a4:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80082a6:	4b11      	ldr	r3, [pc, #68]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b09      	cmp	r3, #9
 80082ac:	d807      	bhi.n	80082be <increaseNumberOfWSLedOnTFT+0xd2>
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	490e      	ldr	r1, [pc, #56]	; (80082f0 <increaseNumberOfWSLedOnTFT+0x104>)
 80082b6:	480f      	ldr	r0, [pc, #60]	; (80082f4 <increaseNumberOfWSLedOnTFT+0x108>)
 80082b8:	f008 ff5e 	bl	8011178 <siprintf>
 80082bc:	e006      	b.n	80082cc <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 80082be:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <increaseNumberOfWSLedOnTFT+0x100>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	490c      	ldr	r1, [pc, #48]	; (80082f8 <increaseNumberOfWSLedOnTFT+0x10c>)
 80082c6:	480b      	ldr	r0, [pc, #44]	; (80082f4 <increaseNumberOfWSLedOnTFT+0x108>)
 80082c8:	f008 ff56 	bl	8011178 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80082cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2301      	movs	r3, #1
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	223c      	movs	r2, #60	; 0x3c
 80082da:	21ac      	movs	r1, #172	; 0xac
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <increaseNumberOfWSLedOnTFT+0x108>)
 80082de:	f7f9 fc21 	bl	8001b24 <EF_PutString>
}
 80082e2:	bf00      	nop
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000033 	.word	0x20000033
 80082f0:	0801535c 	.word	0x0801535c
 80082f4:	200002fc 	.word	0x200002fc
 80082f8:	08015364 	.word	0x08015364
 80082fc:	a57eb503 	.word	0xa57eb503

08008300 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	460a      	mov	r2, r1
 800830a:	71fb      	strb	r3, [r7, #7]
 800830c:	4613      	mov	r3, r2
 800830e:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008310:	79bb      	ldrb	r3, [r7, #6]
 8008312:	2b5e      	cmp	r3, #94	; 0x5e
 8008314:	d91e      	bls.n	8008354 <changeTypeOfWSLights+0x54>
 8008316:	79bb      	ldrb	r3, [r7, #6]
 8008318:	2b74      	cmp	r3, #116	; 0x74
 800831a:	d81b      	bhi.n	8008354 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	2b95      	cmp	r3, #149	; 0x95
 8008320:	d906      	bls.n	8008330 <changeTypeOfWSLights+0x30>
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2bbe      	cmp	r3, #190	; 0xbe
 8008326:	d803      	bhi.n	8008330 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008328:	201d      	movs	r0, #29
 800832a:	f000 fb57 	bl	80089dc <SendComand>
 800832e:	e010      	b.n	8008352 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2bc9      	cmp	r3, #201	; 0xc9
 8008334:	d906      	bls.n	8008344 <changeTypeOfWSLights+0x44>
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2bf2      	cmp	r3, #242	; 0xf2
 800833a:	d803      	bhi.n	8008344 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 800833c:	201e      	movs	r0, #30
 800833e:	f000 fb4d 	bl	80089dc <SendComand>
 8008342:	e006      	b.n	8008352 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2bfd      	cmp	r3, #253	; 0xfd
 8008348:	d962      	bls.n	8008410 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 800834a:	201f      	movs	r0, #31
 800834c:	f000 fb46 	bl	80089dc <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008350:	e05e      	b.n	8008410 <changeTypeOfWSLights+0x110>
 8008352:	e05d      	b.n	8008410 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008354:	79bb      	ldrb	r3, [r7, #6]
 8008356:	2b7c      	cmp	r3, #124	; 0x7c
 8008358:	d91e      	bls.n	8008398 <changeTypeOfWSLights+0x98>
 800835a:	79bb      	ldrb	r3, [r7, #6]
 800835c:	2b92      	cmp	r3, #146	; 0x92
 800835e:	d81b      	bhi.n	8008398 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	2b95      	cmp	r3, #149	; 0x95
 8008364:	d906      	bls.n	8008374 <changeTypeOfWSLights+0x74>
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	2bbe      	cmp	r3, #190	; 0xbe
 800836a:	d803      	bhi.n	8008374 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 800836c:	2020      	movs	r0, #32
 800836e:	f000 fb35 	bl	80089dc <SendComand>
 8008372:	e010      	b.n	8008396 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2bc9      	cmp	r3, #201	; 0xc9
 8008378:	d906      	bls.n	8008388 <changeTypeOfWSLights+0x88>
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	2bf2      	cmp	r3, #242	; 0xf2
 800837e:	d803      	bhi.n	8008388 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008380:	2021      	movs	r0, #33	; 0x21
 8008382:	f000 fb2b 	bl	80089dc <SendComand>
 8008386:	e006      	b.n	8008396 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2bfd      	cmp	r3, #253	; 0xfd
 800838c:	d942      	bls.n	8008414 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 800838e:	2022      	movs	r0, #34	; 0x22
 8008390:	f000 fb24 	bl	80089dc <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008394:	e03e      	b.n	8008414 <changeTypeOfWSLights+0x114>
 8008396:	e03d      	b.n	8008414 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008398:	79bb      	ldrb	r3, [r7, #6]
 800839a:	2b9b      	cmp	r3, #155	; 0x9b
 800839c:	d91e      	bls.n	80083dc <changeTypeOfWSLights+0xdc>
 800839e:	79bb      	ldrb	r3, [r7, #6]
 80083a0:	2bb1      	cmp	r3, #177	; 0xb1
 80083a2:	d81b      	bhi.n	80083dc <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	2b13      	cmp	r3, #19
 80083a8:	d906      	bls.n	80083b8 <changeTypeOfWSLights+0xb8>
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b64      	cmp	r3, #100	; 0x64
 80083ae:	d803      	bhi.n	80083b8 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 80083b0:	2023      	movs	r0, #35	; 0x23
 80083b2:	f000 fb13 	bl	80089dc <SendComand>
 80083b6:	e010      	b.n	80083da <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b77      	cmp	r3, #119	; 0x77
 80083bc:	d906      	bls.n	80083cc <changeTypeOfWSLights+0xcc>
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	2bc8      	cmp	r3, #200	; 0xc8
 80083c2:	d803      	bhi.n	80083cc <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 80083c4:	201c      	movs	r0, #28
 80083c6:	f000 fb09 	bl	80089dc <SendComand>
 80083ca:	e006      	b.n	80083da <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2bdb      	cmp	r3, #219	; 0xdb
 80083d0:	d922      	bls.n	8008418 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 80083d2:	2024      	movs	r0, #36	; 0x24
 80083d4:	f000 fb02 	bl	80089dc <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80083d8:	e01e      	b.n	8008418 <changeTypeOfWSLights+0x118>
 80083da:	e01d      	b.n	8008418 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 80083dc:	79bb      	ldrb	r3, [r7, #6]
 80083de:	2bba      	cmp	r3, #186	; 0xba
 80083e0:	d91b      	bls.n	800841a <changeTypeOfWSLights+0x11a>
 80083e2:	79bb      	ldrb	r3, [r7, #6]
 80083e4:	2bd0      	cmp	r3, #208	; 0xd0
 80083e6:	d818      	bhi.n	800841a <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b45      	cmp	r3, #69	; 0x45
 80083ec:	d906      	bls.n	80083fc <changeTypeOfWSLights+0xfc>
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	2b96      	cmp	r3, #150	; 0x96
 80083f2:	d803      	bhi.n	80083fc <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 80083f4:	2026      	movs	r0, #38	; 0x26
 80083f6:	f000 faf1 	bl	80089dc <SendComand>
 80083fa:	e00e      	b.n	800841a <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2ba9      	cmp	r3, #169	; 0xa9
 8008400:	d90b      	bls.n	800841a <changeTypeOfWSLights+0x11a>
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	2bfa      	cmp	r3, #250	; 0xfa
 8008406:	d808      	bhi.n	800841a <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008408:	2027      	movs	r0, #39	; 0x27
 800840a:	f000 fae7 	bl	80089dc <SendComand>
		}
	}
}
 800840e:	e004      	b.n	800841a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008418:	bf00      	nop
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b094      	sub	sp, #80	; 0x50
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 800842c:	f107 0308 	add.w	r3, r7, #8
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 f87f 	bl	8009536 <UARTDMA_GetLineFromReceiveBuffer>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d15f      	bne.n	80084fe <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 800843e:	f107 0308 	add.w	r3, r7, #8
 8008442:	4931      	ldr	r1, [pc, #196]	; (8008508 <UART_ParseLine+0xe4>)
 8008444:	4618      	mov	r0, r3
 8008446:	f009 fcef 	bl	8011e28 <strtok>
 800844a:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 800844c:	492f      	ldr	r1, [pc, #188]	; (800850c <UART_ParseLine+0xe8>)
 800844e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008450:	f7f7 fec6 	bl	80001e0 <strcmp>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 800845a:	f000 f869 	bl	8008530 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 800845e:	e04e      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8008460:	492b      	ldr	r1, [pc, #172]	; (8008510 <UART_ParseLine+0xec>)
 8008462:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008464:	f7f7 febc 	bl	80001e0 <strcmp>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d102      	bne.n	8008474 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 800846e:	f000 f8ad 	bl	80085cc <UART_ParseAnswStatus>
}
 8008472:	e044      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8008474:	4927      	ldr	r1, [pc, #156]	; (8008514 <UART_ParseLine+0xf0>)
 8008476:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008478:	f7f7 feb2 	bl	80001e0 <strcmp>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8008482:	f000 f8ab 	bl	80085dc <UART_ParseAnswTemp>
}
 8008486:	e03a      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8008488:	4923      	ldr	r1, [pc, #140]	; (8008518 <UART_ParseLine+0xf4>)
 800848a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800848c:	f7f7 fea8 	bl	80001e0 <strcmp>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8008496:	f000 f945 	bl	8008724 <UART_ParseAnswPres>
}
 800849a:	e030      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 800849c:	491f      	ldr	r1, [pc, #124]	; (800851c <UART_ParseLine+0xf8>)
 800849e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084a0:	f7f7 fe9e 	bl	80001e0 <strcmp>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d102      	bne.n	80084b0 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 80084aa:	f000 f9bd 	bl	8008828 <UART_ParseAnswChangeRelayState>
}
 80084ae:	e026      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80084b0:	491b      	ldr	r1, [pc, #108]	; (8008520 <UART_ParseLine+0xfc>)
 80084b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084b4:	f7f7 fe94 	bl	80001e0 <strcmp>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80084be:	f000 f9ba 	bl	8008836 <UART_ParseAnswChangeLightState>
}
 80084c2:	e01c      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 80084c4:	4917      	ldr	r1, [pc, #92]	; (8008524 <UART_ParseLine+0x100>)
 80084c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084c8:	f7f7 fe8a 	bl	80001e0 <strcmp>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d102      	bne.n	80084d8 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 80084d2:	f000 f9b7 	bl	8008844 <UART_ParseAnswRelayStateStatus>
}
 80084d6:	e012      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 80084d8:	4913      	ldr	r1, [pc, #76]	; (8008528 <UART_ParseLine+0x104>)
 80084da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084dc:	f7f7 fe80 	bl	80001e0 <strcmp>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 80084e6:	f000 fa13 	bl	8008910 <UART_ParseAnswLightsStateStatus>
}
 80084ea:	e008      	b.n	80084fe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 80084ec:	490f      	ldr	r1, [pc, #60]	; (800852c <UART_ParseLine+0x108>)
 80084ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084f0:	f7f7 fe76 	bl	80001e0 <strcmp>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 80084fa:	f000 f959 	bl	80087b0 <UART_ParseAnswDist>
}
 80084fe:	bf00      	nop
 8008500:	3750      	adds	r7, #80	; 0x50
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	08015368 	.word	0x08015368
 800850c:	0801536c 	.word	0x0801536c
 8008510:	08015370 	.word	0x08015370
 8008514:	08015378 	.word	0x08015378
 8008518:	08015380 	.word	0x08015380
 800851c:	08015388 	.word	0x08015388
 8008520:	08015394 	.word	0x08015394
 8008524:	080153a0 	.word	0x080153a0
 8008528:	080153ac 	.word	0x080153ac
 800852c:	080153b8 	.word	0x080153b8

08008530 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008536:	491f      	ldr	r1, [pc, #124]	; (80085b4 <UART_ParseLED+0x84>)
 8008538:	2000      	movs	r0, #0
 800853a:	f009 fc75 	bl	8011e28 <strtok>
 800853e:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d031      	beq.n	80085ac <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b2f      	cmp	r3, #47	; 0x2f
 800854e:	d903      	bls.n	8008558 <UART_ParseLED+0x28>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b39      	cmp	r3, #57	; 0x39
 8008556:	d904      	bls.n	8008562 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8008558:	4917      	ldr	r1, [pc, #92]	; (80085b8 <UART_ParseLED+0x88>)
 800855a:	4818      	ldr	r0, [pc, #96]	; (80085bc <UART_ParseLED+0x8c>)
 800855c:	f001 f81c 	bl	8009598 <UARTDMA_Print>
			return;	// And exit parsing
 8008560:	e024      	b.n	80085ac <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f007 ff51 	bl	801040a <atoi>
 8008568:	4603      	mov	r3, r0
 800856a:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d10a      	bne.n	8008588 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8008572:	2200      	movs	r2, #0
 8008574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008578:	4811      	ldr	r0, [pc, #68]	; (80085c0 <UART_ParseLED+0x90>)
 800857a:	f002 f9b1 	bl	800a8e0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 800857e:	4911      	ldr	r1, [pc, #68]	; (80085c4 <UART_ParseLED+0x94>)
 8008580:	480e      	ldr	r0, [pc, #56]	; (80085bc <UART_ParseLED+0x8c>)
 8008582:	f001 f809 	bl	8009598 <UARTDMA_Print>
 8008586:	e011      	b.n	80085ac <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 800858e:	2201      	movs	r2, #1
 8008590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008594:	480a      	ldr	r0, [pc, #40]	; (80085c0 <UART_ParseLED+0x90>)
 8008596:	f002 f9a3 	bl	800a8e0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800859a:	490b      	ldr	r1, [pc, #44]	; (80085c8 <UART_ParseLED+0x98>)
 800859c:	4807      	ldr	r0, [pc, #28]	; (80085bc <UART_ParseLED+0x8c>)
 800859e:	f000 fffb 	bl	8009598 <UARTDMA_Print>
 80085a2:	e003      	b.n	80085ac <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 80085a4:	4904      	ldr	r1, [pc, #16]	; (80085b8 <UART_ParseLED+0x88>)
 80085a6:	4805      	ldr	r0, [pc, #20]	; (80085bc <UART_ParseLED+0x8c>)
 80085a8:	f000 fff6 	bl	8009598 <UARTDMA_Print>
		}
	}
}
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	080153c0 	.word	0x080153c0
 80085b8:	080153c4 	.word	0x080153c4
 80085bc:	200004a4 	.word	0x200004a4
 80085c0:	40020800 	.word	0x40020800
 80085c4:	080153d4 	.word	0x080153d4
 80085c8:	080153e0 	.word	0x080153e0

080085cc <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 80085d0:	bf00      	nop
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 80085e6:	4947      	ldr	r1, [pc, #284]	; (8008704 <UART_ParseAnswTemp+0x128>)
 80085e8:	2000      	movs	r0, #0
 80085ea:	f009 fc1d 	bl	8011e28 <strtok>
 80085ee:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8081 	beq.w	80086fc <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 80085fa:	68b8      	ldr	r0, [r7, #8]
 80085fc:	f007 ff05 	bl	801040a <atoi>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d010      	beq.n	800862e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800860c:	493d      	ldr	r1, [pc, #244]	; (8008704 <UART_ParseAnswTemp+0x128>)
 800860e:	2000      	movs	r0, #0
 8008610:	f009 fc0a 	bl	8011e28 <strtok>
 8008614:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f007 fef4 	bl	8010404 <atof>
 800861c:	ec53 2b10 	vmov	r2, r3, d0
 8008620:	4610      	mov	r0, r2
 8008622:	4619      	mov	r1, r3
 8008624:	f7f8 faf8 	bl	8000c18 <__aeabi_d2f>
 8008628:	4603      	mov	r3, r0
 800862a:	4a37      	ldr	r2, [pc, #220]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 800862c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 800862e:	4b37      	ldr	r3, [pc, #220]	; (800870c <UART_ParseAnswTemp+0x130>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d162      	bne.n	80086fc <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d119      	bne.n	8008670 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 800863c:	4834      	ldr	r0, [pc, #208]	; (8008710 <UART_ParseAnswTemp+0x134>)
 800863e:	f7f9 f857 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8008642:	4b31      	ldr	r3, [pc, #196]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f7f7 ff96 	bl	8000578 <__aeabi_f2d>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4930      	ldr	r1, [pc, #192]	; (8008714 <UART_ParseAnswTemp+0x138>)
 8008652:	4831      	ldr	r0, [pc, #196]	; (8008718 <UART_ParseAnswTemp+0x13c>)
 8008654:	f008 fd90 	bl	8011178 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008658:	f24c 6318 	movw	r3, #50712	; 0xc618
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	2301      	movs	r3, #1
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	2250      	movs	r2, #80	; 0x50
 8008666:	2114      	movs	r1, #20
 8008668:	482b      	ldr	r0, [pc, #172]	; (8008718 <UART_ParseAnswTemp+0x13c>)
 800866a:	f7f9 fa5b 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 800866e:	e045      	b.n	80086fc <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d142      	bne.n	80086fc <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8008676:	4b24      	ldr	r3, [pc, #144]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 8008678:	edd3 7a00 	vldr	s15, [r3]
 800867c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008684:	d11d      	bne.n	80086c2 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8008686:	4b25      	ldr	r3, [pc, #148]	; (800871c <UART_ParseAnswTemp+0x140>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1f      	ldr	r2, [pc, #124]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 800868c:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 800868e:	4820      	ldr	r0, [pc, #128]	; (8008710 <UART_ParseAnswTemp+0x134>)
 8008690:	f7f9 f82e 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008694:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f7f7 ff6d 	bl	8000578 <__aeabi_f2d>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	491f      	ldr	r1, [pc, #124]	; (8008720 <UART_ParseAnswTemp+0x144>)
 80086a4:	481c      	ldr	r0, [pc, #112]	; (8008718 <UART_ParseAnswTemp+0x13c>)
 80086a6:	f008 fd67 	bl	8011178 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	2301      	movs	r3, #1
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2300      	movs	r3, #0
 80086b6:	226e      	movs	r2, #110	; 0x6e
 80086b8:	2114      	movs	r1, #20
 80086ba:	4817      	ldr	r0, [pc, #92]	; (8008718 <UART_ParseAnswTemp+0x13c>)
 80086bc:	f7f9 fa32 	bl	8001b24 <EF_PutString>
	}
 80086c0:	e01c      	b.n	80086fc <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 80086c2:	4813      	ldr	r0, [pc, #76]	; (8008710 <UART_ParseAnswTemp+0x134>)
 80086c4:	f7f9 f814 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7f7 ff53 	bl	8000578 <__aeabi_f2d>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4912      	ldr	r1, [pc, #72]	; (8008720 <UART_ParseAnswTemp+0x144>)
 80086d8:	480f      	ldr	r0, [pc, #60]	; (8008718 <UART_ParseAnswTemp+0x13c>)
 80086da:	f008 fd4d 	bl	8011178 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	2301      	movs	r3, #1
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	226e      	movs	r2, #110	; 0x6e
 80086ec:	2114      	movs	r1, #20
 80086ee:	480a      	ldr	r0, [pc, #40]	; (8008718 <UART_ParseAnswTemp+0x13c>)
 80086f0:	f7f9 fa18 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <UART_ParseAnswTemp+0x12c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a08      	ldr	r2, [pc, #32]	; (800871c <UART_ParseAnswTemp+0x140>)
 80086fa:	6013      	str	r3, [r2, #0]
	}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	080153c0 	.word	0x080153c0
 8008708:	20000294 	.word	0x20000294
 800870c:	20000290 	.word	0x20000290
 8008710:	080180dc 	.word	0x080180dc
 8008714:	080153ec 	.word	0x080153ec
 8008718:	200002fc 	.word	0x200002fc
 800871c:	20000298 	.word	0x20000298
 8008720:	08015400 	.word	0x08015400

08008724 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800872a:	491b      	ldr	r1, [pc, #108]	; (8008798 <UART_ParseAnswPres+0x74>)
 800872c:	2000      	movs	r0, #0
 800872e:	f009 fb7b 	bl	8011e28 <strtok>
 8008732:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d028      	beq.n	800878e <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f007 fe61 	bl	8010404 <atof>
 8008742:	ec53 2b10 	vmov	r2, r3, d0
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	f7f8 fa65 	bl	8000c18 <__aeabi_d2f>
 800874e:	4603      	mov	r3, r0
 8008750:	4a12      	ldr	r2, [pc, #72]	; (800879c <UART_ParseAnswPres+0x78>)
 8008752:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <UART_ParseAnswPres+0x7c>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d118      	bne.n	800878e <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800875c:	4811      	ldr	r0, [pc, #68]	; (80087a4 <UART_ParseAnswPres+0x80>)
 800875e:	f7f8 ffc7 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8008762:	4b0e      	ldr	r3, [pc, #56]	; (800879c <UART_ParseAnswPres+0x78>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f7f7 ff06 	bl	8000578 <__aeabi_f2d>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	490d      	ldr	r1, [pc, #52]	; (80087a8 <UART_ParseAnswPres+0x84>)
 8008772:	480e      	ldr	r0, [pc, #56]	; (80087ac <UART_ParseAnswPres+0x88>)
 8008774:	f008 fd00 	bl	8011178 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008778:	f24c 6318 	movw	r3, #50712	; 0xc618
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	2301      	movs	r3, #1
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	22aa      	movs	r2, #170	; 0xaa
 8008786:	2114      	movs	r1, #20
 8008788:	4808      	ldr	r0, [pc, #32]	; (80087ac <UART_ParseAnswPres+0x88>)
 800878a:	f7f9 f9cb 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	080153c0 	.word	0x080153c0
 800879c:	2000029c 	.word	0x2000029c
 80087a0:	20000290 	.word	0x20000290
 80087a4:	080180dc 	.word	0x080180dc
 80087a8:	08015414 	.word	0x08015414
 80087ac:	200002fc 	.word	0x200002fc

080087b0 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80087b6:	4916      	ldr	r1, [pc, #88]	; (8008810 <UART_ParseAnswDist+0x60>)
 80087b8:	2000      	movs	r0, #0
 80087ba:	f009 fb35 	bl	8011e28 <strtok>
 80087be:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01f      	beq.n	8008808 <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f007 fe1e 	bl	801040a <atoi>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b10      	ldr	r3, [pc, #64]	; (8008814 <UART_ParseAnswDist+0x64>)
 80087d4:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <UART_ParseAnswDist+0x68>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d114      	bne.n	8008808 <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80087de:	480f      	ldr	r0, [pc, #60]	; (800881c <UART_ParseAnswDist+0x6c>)
 80087e0:	f7f8 ff86 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 80087e4:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <UART_ParseAnswDist+0x64>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	490d      	ldr	r1, [pc, #52]	; (8008820 <UART_ParseAnswDist+0x70>)
 80087ec:	480d      	ldr	r0, [pc, #52]	; (8008824 <UART_ParseAnswDist+0x74>)
 80087ee:	f008 fcc3 	bl	8011178 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80087f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	2301      	movs	r3, #1
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	2300      	movs	r3, #0
 80087fe:	228c      	movs	r2, #140	; 0x8c
 8008800:	21ad      	movs	r1, #173	; 0xad
 8008802:	4808      	ldr	r0, [pc, #32]	; (8008824 <UART_ParseAnswDist+0x74>)
 8008804:	f7f9 f98e 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	080153c0 	.word	0x080153c0
 8008814:	200002a4 	.word	0x200002a4
 8008818:	20000290 	.word	0x20000290
 800881c:	080180dc 	.word	0x080180dc
 8008820:	0801542c 	.word	0x0801542c
 8008824:	200002fc 	.word	0x200002fc

08008828 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
	//TODO!
}
 800882c:	bf00      	nop
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8008836:	b480      	push	{r7}
 8008838:	af00      	add	r7, sp, #0
	//TODO!
}
 800883a:	bf00      	nop
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800884a:	2300      	movs	r3, #0
 800884c:	71fb      	strb	r3, [r7, #7]
 800884e:	e04a      	b.n	80088e6 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008850:	4928      	ldr	r1, [pc, #160]	; (80088f4 <UART_ParseAnswRelayStateStatus+0xb0>)
 8008852:	2000      	movs	r0, #0
 8008854:	f009 fae8 	bl	8011e28 <strtok>
 8008858:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02f      	beq.n	80088c2 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008862:	2300      	movs	r3, #0
 8008864:	71bb      	strb	r3, [r7, #6]
 8008866:	e025      	b.n	80088b4 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008868:	79bb      	ldrb	r3, [r7, #6]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4413      	add	r3, r2
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b2f      	cmp	r3, #47	; 0x2f
 8008872:	d905      	bls.n	8008880 <UART_ParseAnswRelayStateStatus+0x3c>
 8008874:	79bb      	ldrb	r3, [r7, #6]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4413      	add	r3, r2
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b39      	cmp	r3, #57	; 0x39
 800887e:	d90e      	bls.n	800889e <UART_ParseAnswRelayStateStatus+0x5a>
 8008880:	79bb      	ldrb	r3, [r7, #6]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4413      	add	r3, r2
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b2e      	cmp	r3, #46	; 0x2e
 800888a:	d008      	beq.n	800889e <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800888c:	491a      	ldr	r1, [pc, #104]	; (80088f8 <UART_ParseAnswRelayStateStatus+0xb4>)
 800888e:	481b      	ldr	r0, [pc, #108]	; (80088fc <UART_ParseAnswRelayStateStatus+0xb8>)
 8008890:	f008 fc72 	bl	8011178 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008894:	4919      	ldr	r1, [pc, #100]	; (80088fc <UART_ParseAnswRelayStateStatus+0xb8>)
 8008896:	481a      	ldr	r0, [pc, #104]	; (8008900 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008898:	f000 fe7e 	bl	8009598 <UARTDMA_Print>
					return;	// And exit parsing
 800889c:	e026      	b.n	80088ec <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800889e:	6838      	ldr	r0, [r7, #0]
 80088a0:	f007 fdb3 	bl	801040a <atoi>
 80088a4:	4602      	mov	r2, r0
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	b2d1      	uxtb	r1, r2
 80088aa:	4a16      	ldr	r2, [pc, #88]	; (8008904 <UART_ParseAnswRelayStateStatus+0xc0>)
 80088ac:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80088ae:	79bb      	ldrb	r3, [r7, #6]
 80088b0:	3301      	adds	r3, #1
 80088b2:	71bb      	strb	r3, [r7, #6]
 80088b4:	79bb      	ldrb	r3, [r7, #6]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	4413      	add	r3, r2
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1d3      	bne.n	8008868 <UART_ParseAnswRelayStateStatus+0x24>
 80088c0:	e008      	b.n	80088d4 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80088c2:	4911      	ldr	r1, [pc, #68]	; (8008908 <UART_ParseAnswRelayStateStatus+0xc4>)
 80088c4:	480d      	ldr	r0, [pc, #52]	; (80088fc <UART_ParseAnswRelayStateStatus+0xb8>)
 80088c6:	f008 fc57 	bl	8011178 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80088ca:	490c      	ldr	r1, [pc, #48]	; (80088fc <UART_ParseAnswRelayStateStatus+0xb8>)
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <UART_ParseAnswRelayStateStatus+0xbc>)
 80088ce:	f000 fe63 	bl	8009598 <UARTDMA_Print>
			return;	// And exit parsing
 80088d2:	e00b      	b.n	80088ec <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <UART_ParseAnswRelayStateStatus+0xc8>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d101      	bne.n	80088e0 <UART_ParseAnswRelayStateStatus+0x9c>
 80088dc:	f7fc fa80 	bl	8004de0 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	3301      	adds	r3, #1
 80088e4:	71fb      	strb	r3, [r7, #7]
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d9b1      	bls.n	8008850 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	080153c0 	.word	0x080153c0
 80088f8:	08015438 	.word	0x08015438
 80088fc:	20000674 	.word	0x20000674
 8008900:	200004a4 	.word	0x200004a4
 8008904:	200002a8 	.word	0x200002a8
 8008908:	0801544c 	.word	0x0801544c
 800890c:	20000290 	.word	0x20000290

08008910 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008916:	2300      	movs	r3, #0
 8008918:	71fb      	strb	r3, [r7, #7]
 800891a:	e04a      	b.n	80089b2 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800891c:	4928      	ldr	r1, [pc, #160]	; (80089c0 <UART_ParseAnswLightsStateStatus+0xb0>)
 800891e:	2000      	movs	r0, #0
 8008920:	f009 fa82 	bl	8011e28 <strtok>
 8008924:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d02f      	beq.n	800898e <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800892e:	2300      	movs	r3, #0
 8008930:	71bb      	strb	r3, [r7, #6]
 8008932:	e025      	b.n	8008980 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008934:	79bb      	ldrb	r3, [r7, #6]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	4413      	add	r3, r2
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b2f      	cmp	r3, #47	; 0x2f
 800893e:	d905      	bls.n	800894c <UART_ParseAnswLightsStateStatus+0x3c>
 8008940:	79bb      	ldrb	r3, [r7, #6]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	4413      	add	r3, r2
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b39      	cmp	r3, #57	; 0x39
 800894a:	d90e      	bls.n	800896a <UART_ParseAnswLightsStateStatus+0x5a>
 800894c:	79bb      	ldrb	r3, [r7, #6]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	4413      	add	r3, r2
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b2e      	cmp	r3, #46	; 0x2e
 8008956:	d008      	beq.n	800896a <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008958:	491a      	ldr	r1, [pc, #104]	; (80089c4 <UART_ParseAnswLightsStateStatus+0xb4>)
 800895a:	481b      	ldr	r0, [pc, #108]	; (80089c8 <UART_ParseAnswLightsStateStatus+0xb8>)
 800895c:	f008 fc0c 	bl	8011178 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008960:	4919      	ldr	r1, [pc, #100]	; (80089c8 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008962:	481a      	ldr	r0, [pc, #104]	; (80089cc <UART_ParseAnswLightsStateStatus+0xbc>)
 8008964:	f000 fe18 	bl	8009598 <UARTDMA_Print>
					return;	// And exit parsing
 8008968:	e026      	b.n	80089b8 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800896a:	6838      	ldr	r0, [r7, #0]
 800896c:	f007 fd4d 	bl	801040a <atoi>
 8008970:	4602      	mov	r2, r0
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	b2d1      	uxtb	r1, r2
 8008976:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <UART_ParseAnswLightsStateStatus+0xc0>)
 8008978:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800897a:	79bb      	ldrb	r3, [r7, #6]
 800897c:	3301      	adds	r3, #1
 800897e:	71bb      	strb	r3, [r7, #6]
 8008980:	79bb      	ldrb	r3, [r7, #6]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4413      	add	r3, r2
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1d3      	bne.n	8008934 <UART_ParseAnswLightsStateStatus+0x24>
 800898c:	e008      	b.n	80089a0 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800898e:	4911      	ldr	r1, [pc, #68]	; (80089d4 <UART_ParseAnswLightsStateStatus+0xc4>)
 8008990:	480d      	ldr	r0, [pc, #52]	; (80089c8 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008992:	f008 fbf1 	bl	8011178 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008996:	490c      	ldr	r1, [pc, #48]	; (80089c8 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008998:	480c      	ldr	r0, [pc, #48]	; (80089cc <UART_ParseAnswLightsStateStatus+0xbc>)
 800899a:	f000 fdfd 	bl	8009598 <UARTDMA_Print>
			return;	// And exit parsing
 800899e:	e00b      	b.n	80089b8 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <UART_ParseAnswLightsStateStatus+0xc8>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d101      	bne.n	80089ac <UART_ParseAnswLightsStateStatus+0x9c>
 80089a8:	f7fc fb22 	bl	8004ff0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	3301      	adds	r3, #1
 80089b0:	71fb      	strb	r3, [r7, #7]
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d9b1      	bls.n	800891c <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	080153c0 	.word	0x080153c0
 80089c4:	08015438 	.word	0x08015438
 80089c8:	20000674 	.word	0x20000674
 80089cc:	200004a4 	.word	0x200004a4
 80089d0:	200002ac 	.word	0x200002ac
 80089d4:	0801544c 	.word	0x0801544c
 80089d8:	20000290 	.word	0x20000290

080089dc <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b27      	cmp	r3, #39	; 0x27
 80089ee:	f200 8129 	bhi.w	8008c44 <SendComand+0x268>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <SendComand+0x1c>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a99 	.word	0x08008a99
 80089fc:	08008aa3 	.word	0x08008aa3
 8008a00:	08008aad 	.word	0x08008aad
 8008a04:	08008ab7 	.word	0x08008ab7
 8008a08:	08008acb 	.word	0x08008acb
 8008a0c:	08008ad5 	.word	0x08008ad5
 8008a10:	08008adf 	.word	0x08008adf
 8008a14:	08008ae9 	.word	0x08008ae9
 8008a18:	08008af3 	.word	0x08008af3
 8008a1c:	08008afd 	.word	0x08008afd
 8008a20:	08008b07 	.word	0x08008b07
 8008a24:	08008b11 	.word	0x08008b11
 8008a28:	08008b1b 	.word	0x08008b1b
 8008a2c:	08008b43 	.word	0x08008b43
 8008a30:	08008b4d 	.word	0x08008b4d
 8008a34:	08008b57 	.word	0x08008b57
 8008a38:	08008b61 	.word	0x08008b61
 8008a3c:	08008b6b 	.word	0x08008b6b
 8008a40:	08008b75 	.word	0x08008b75
 8008a44:	08008b7f 	.word	0x08008b7f
 8008a48:	08008b89 	.word	0x08008b89
 8008a4c:	08008b39 	.word	0x08008b39
 8008a50:	08008ba7 	.word	0x08008ba7
 8008a54:	08008b25 	.word	0x08008b25
 8008a58:	08008b2f 	.word	0x08008b2f
 8008a5c:	08008b93 	.word	0x08008b93
 8008a60:	08008b9d 	.word	0x08008b9d
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008bb1 	.word	0x08008bb1
 8008a6c:	08008bbb 	.word	0x08008bbb
 8008a70:	08008bc5 	.word	0x08008bc5
 8008a74:	08008bcf 	.word	0x08008bcf
 8008a78:	08008bd9 	.word	0x08008bd9
 8008a7c:	08008be3 	.word	0x08008be3
 8008a80:	08008bed 	.word	0x08008bed
 8008a84:	08008bf7 	.word	0x08008bf7
 8008a88:	08008c01 	.word	0x08008c01
 8008a8c:	08008c0b 	.word	0x08008c0b
 8008a90:	08008c31 	.word	0x08008c31
 8008a94:	08008c3b 	.word	0x08008c3b
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008a98:	496d      	ldr	r1, [pc, #436]	; (8008c50 <SendComand+0x274>)
 8008a9a:	486e      	ldr	r0, [pc, #440]	; (8008c54 <SendComand+0x278>)
 8008a9c:	f000 fd7c 	bl	8009598 <UARTDMA_Print>
			break;
 8008aa0:	e0d0      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008aa2:	496d      	ldr	r1, [pc, #436]	; (8008c58 <SendComand+0x27c>)
 8008aa4:	486b      	ldr	r0, [pc, #428]	; (8008c54 <SendComand+0x278>)
 8008aa6:	f000 fd77 	bl	8009598 <UARTDMA_Print>
			break;
 8008aaa:	e0cb      	b.n	8008c44 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008aac:	496b      	ldr	r1, [pc, #428]	; (8008c5c <SendComand+0x280>)
 8008aae:	4869      	ldr	r0, [pc, #420]	; (8008c54 <SendComand+0x278>)
 8008ab0:	f000 fd72 	bl	8009598 <UARTDMA_Print>
			break;
 8008ab4:	e0c6      	b.n	8008c44 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008ab6:	496a      	ldr	r1, [pc, #424]	; (8008c60 <SendComand+0x284>)
 8008ab8:	4866      	ldr	r0, [pc, #408]	; (8008c54 <SendComand+0x278>)
 8008aba:	f000 fd6d 	bl	8009598 <UARTDMA_Print>
			break;
 8008abe:	e0c1      	b.n	8008c44 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008ac0:	4968      	ldr	r1, [pc, #416]	; (8008c64 <SendComand+0x288>)
 8008ac2:	4864      	ldr	r0, [pc, #400]	; (8008c54 <SendComand+0x278>)
 8008ac4:	f000 fd68 	bl	8009598 <UARTDMA_Print>
			break;
 8008ac8:	e0bc      	b.n	8008c44 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008aca:	4967      	ldr	r1, [pc, #412]	; (8008c68 <SendComand+0x28c>)
 8008acc:	4861      	ldr	r0, [pc, #388]	; (8008c54 <SendComand+0x278>)
 8008ace:	f000 fd63 	bl	8009598 <UARTDMA_Print>
			break;
 8008ad2:	e0b7      	b.n	8008c44 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008ad4:	4965      	ldr	r1, [pc, #404]	; (8008c6c <SendComand+0x290>)
 8008ad6:	485f      	ldr	r0, [pc, #380]	; (8008c54 <SendComand+0x278>)
 8008ad8:	f000 fd5e 	bl	8009598 <UARTDMA_Print>
			break;
 8008adc:	e0b2      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008ade:	4964      	ldr	r1, [pc, #400]	; (8008c70 <SendComand+0x294>)
 8008ae0:	485c      	ldr	r0, [pc, #368]	; (8008c54 <SendComand+0x278>)
 8008ae2:	f000 fd59 	bl	8009598 <UARTDMA_Print>
			break;
 8008ae6:	e0ad      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008ae8:	4962      	ldr	r1, [pc, #392]	; (8008c74 <SendComand+0x298>)
 8008aea:	485a      	ldr	r0, [pc, #360]	; (8008c54 <SendComand+0x278>)
 8008aec:	f000 fd54 	bl	8009598 <UARTDMA_Print>
			break;
 8008af0:	e0a8      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008af2:	4961      	ldr	r1, [pc, #388]	; (8008c78 <SendComand+0x29c>)
 8008af4:	4857      	ldr	r0, [pc, #348]	; (8008c54 <SendComand+0x278>)
 8008af6:	f000 fd4f 	bl	8009598 <UARTDMA_Print>
			break;
 8008afa:	e0a3      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008afc:	495f      	ldr	r1, [pc, #380]	; (8008c7c <SendComand+0x2a0>)
 8008afe:	4855      	ldr	r0, [pc, #340]	; (8008c54 <SendComand+0x278>)
 8008b00:	f000 fd4a 	bl	8009598 <UARTDMA_Print>
			break;
 8008b04:	e09e      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008b06:	495e      	ldr	r1, [pc, #376]	; (8008c80 <SendComand+0x2a4>)
 8008b08:	4852      	ldr	r0, [pc, #328]	; (8008c54 <SendComand+0x278>)
 8008b0a:	f000 fd45 	bl	8009598 <UARTDMA_Print>
			break;
 8008b0e:	e099      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008b10:	495c      	ldr	r1, [pc, #368]	; (8008c84 <SendComand+0x2a8>)
 8008b12:	4850      	ldr	r0, [pc, #320]	; (8008c54 <SendComand+0x278>)
 8008b14:	f000 fd40 	bl	8009598 <UARTDMA_Print>
			break;
 8008b18:	e094      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008b1a:	495b      	ldr	r1, [pc, #364]	; (8008c88 <SendComand+0x2ac>)
 8008b1c:	484d      	ldr	r0, [pc, #308]	; (8008c54 <SendComand+0x278>)
 8008b1e:	f000 fd3b 	bl	8009598 <UARTDMA_Print>
			break;
 8008b22:	e08f      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008b24:	4959      	ldr	r1, [pc, #356]	; (8008c8c <SendComand+0x2b0>)
 8008b26:	484b      	ldr	r0, [pc, #300]	; (8008c54 <SendComand+0x278>)
 8008b28:	f000 fd36 	bl	8009598 <UARTDMA_Print>
			break;
 8008b2c:	e08a      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008b2e:	4958      	ldr	r1, [pc, #352]	; (8008c90 <SendComand+0x2b4>)
 8008b30:	4848      	ldr	r0, [pc, #288]	; (8008c54 <SendComand+0x278>)
 8008b32:	f000 fd31 	bl	8009598 <UARTDMA_Print>
			break;
 8008b36:	e085      	b.n	8008c44 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008b38:	4956      	ldr	r1, [pc, #344]	; (8008c94 <SendComand+0x2b8>)
 8008b3a:	4846      	ldr	r0, [pc, #280]	; (8008c54 <SendComand+0x278>)
 8008b3c:	f000 fd2c 	bl	8009598 <UARTDMA_Print>
			break;
 8008b40:	e080      	b.n	8008c44 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008b42:	4955      	ldr	r1, [pc, #340]	; (8008c98 <SendComand+0x2bc>)
 8008b44:	4843      	ldr	r0, [pc, #268]	; (8008c54 <SendComand+0x278>)
 8008b46:	f000 fd27 	bl	8009598 <UARTDMA_Print>
			break;
 8008b4a:	e07b      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008b4c:	4953      	ldr	r1, [pc, #332]	; (8008c9c <SendComand+0x2c0>)
 8008b4e:	4841      	ldr	r0, [pc, #260]	; (8008c54 <SendComand+0x278>)
 8008b50:	f000 fd22 	bl	8009598 <UARTDMA_Print>
			break;
 8008b54:	e076      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008b56:	4952      	ldr	r1, [pc, #328]	; (8008ca0 <SendComand+0x2c4>)
 8008b58:	483e      	ldr	r0, [pc, #248]	; (8008c54 <SendComand+0x278>)
 8008b5a:	f000 fd1d 	bl	8009598 <UARTDMA_Print>
			break;
 8008b5e:	e071      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008b60:	4950      	ldr	r1, [pc, #320]	; (8008ca4 <SendComand+0x2c8>)
 8008b62:	483c      	ldr	r0, [pc, #240]	; (8008c54 <SendComand+0x278>)
 8008b64:	f000 fd18 	bl	8009598 <UARTDMA_Print>
			break;
 8008b68:	e06c      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008b6a:	494f      	ldr	r1, [pc, #316]	; (8008ca8 <SendComand+0x2cc>)
 8008b6c:	4839      	ldr	r0, [pc, #228]	; (8008c54 <SendComand+0x278>)
 8008b6e:	f000 fd13 	bl	8009598 <UARTDMA_Print>
			break;
 8008b72:	e067      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008b74:	494d      	ldr	r1, [pc, #308]	; (8008cac <SendComand+0x2d0>)
 8008b76:	4837      	ldr	r0, [pc, #220]	; (8008c54 <SendComand+0x278>)
 8008b78:	f000 fd0e 	bl	8009598 <UARTDMA_Print>
			break;
 8008b7c:	e062      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008b7e:	494c      	ldr	r1, [pc, #304]	; (8008cb0 <SendComand+0x2d4>)
 8008b80:	4834      	ldr	r0, [pc, #208]	; (8008c54 <SendComand+0x278>)
 8008b82:	f000 fd09 	bl	8009598 <UARTDMA_Print>
			break;
 8008b86:	e05d      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008b88:	494a      	ldr	r1, [pc, #296]	; (8008cb4 <SendComand+0x2d8>)
 8008b8a:	4832      	ldr	r0, [pc, #200]	; (8008c54 <SendComand+0x278>)
 8008b8c:	f000 fd04 	bl	8009598 <UARTDMA_Print>
			break;
 8008b90:	e058      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008b92:	4949      	ldr	r1, [pc, #292]	; (8008cb8 <SendComand+0x2dc>)
 8008b94:	482f      	ldr	r0, [pc, #188]	; (8008c54 <SendComand+0x278>)
 8008b96:	f000 fcff 	bl	8009598 <UARTDMA_Print>
			break;
 8008b9a:	e053      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008b9c:	4947      	ldr	r1, [pc, #284]	; (8008cbc <SendComand+0x2e0>)
 8008b9e:	482d      	ldr	r0, [pc, #180]	; (8008c54 <SendComand+0x278>)
 8008ba0:	f000 fcfa 	bl	8009598 <UARTDMA_Print>
			break;
 8008ba4:	e04e      	b.n	8008c44 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008ba6:	4946      	ldr	r1, [pc, #280]	; (8008cc0 <SendComand+0x2e4>)
 8008ba8:	482a      	ldr	r0, [pc, #168]	; (8008c54 <SendComand+0x278>)
 8008baa:	f000 fcf5 	bl	8009598 <UARTDMA_Print>
			break;
 8008bae:	e049      	b.n	8008c44 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008bb0:	4944      	ldr	r1, [pc, #272]	; (8008cc4 <SendComand+0x2e8>)
 8008bb2:	4828      	ldr	r0, [pc, #160]	; (8008c54 <SendComand+0x278>)
 8008bb4:	f000 fcf0 	bl	8009598 <UARTDMA_Print>
			break;
 8008bb8:	e044      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008bba:	4943      	ldr	r1, [pc, #268]	; (8008cc8 <SendComand+0x2ec>)
 8008bbc:	4825      	ldr	r0, [pc, #148]	; (8008c54 <SendComand+0x278>)
 8008bbe:	f000 fceb 	bl	8009598 <UARTDMA_Print>
			break;
 8008bc2:	e03f      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008bc4:	4941      	ldr	r1, [pc, #260]	; (8008ccc <SendComand+0x2f0>)
 8008bc6:	4823      	ldr	r0, [pc, #140]	; (8008c54 <SendComand+0x278>)
 8008bc8:	f000 fce6 	bl	8009598 <UARTDMA_Print>
			break;
 8008bcc:	e03a      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008bce:	4940      	ldr	r1, [pc, #256]	; (8008cd0 <SendComand+0x2f4>)
 8008bd0:	4820      	ldr	r0, [pc, #128]	; (8008c54 <SendComand+0x278>)
 8008bd2:	f000 fce1 	bl	8009598 <UARTDMA_Print>
			break;
 8008bd6:	e035      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008bd8:	493e      	ldr	r1, [pc, #248]	; (8008cd4 <SendComand+0x2f8>)
 8008bda:	481e      	ldr	r0, [pc, #120]	; (8008c54 <SendComand+0x278>)
 8008bdc:	f000 fcdc 	bl	8009598 <UARTDMA_Print>
			break;
 8008be0:	e030      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008be2:	493d      	ldr	r1, [pc, #244]	; (8008cd8 <SendComand+0x2fc>)
 8008be4:	481b      	ldr	r0, [pc, #108]	; (8008c54 <SendComand+0x278>)
 8008be6:	f000 fcd7 	bl	8009598 <UARTDMA_Print>
			break;
 8008bea:	e02b      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008bec:	493b      	ldr	r1, [pc, #236]	; (8008cdc <SendComand+0x300>)
 8008bee:	4819      	ldr	r0, [pc, #100]	; (8008c54 <SendComand+0x278>)
 8008bf0:	f000 fcd2 	bl	8009598 <UARTDMA_Print>
			break;
 8008bf4:	e026      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008bf6:	493a      	ldr	r1, [pc, #232]	; (8008ce0 <SendComand+0x304>)
 8008bf8:	4816      	ldr	r0, [pc, #88]	; (8008c54 <SendComand+0x278>)
 8008bfa:	f000 fccd 	bl	8009598 <UARTDMA_Print>
			break;
 8008bfe:	e021      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008c00:	4938      	ldr	r1, [pc, #224]	; (8008ce4 <SendComand+0x308>)
 8008c02:	4814      	ldr	r0, [pc, #80]	; (8008c54 <SendComand+0x278>)
 8008c04:	f000 fcc8 	bl	8009598 <UARTDMA_Print>
			break;
 8008c08:	e01c      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008c0a:	4b37      	ldr	r3, [pc, #220]	; (8008ce8 <SendComand+0x30c>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d802      	bhi.n	8008c18 <SendComand+0x23c>
 8008c12:	4b35      	ldr	r3, [pc, #212]	; (8008ce8 <SendComand+0x30c>)
 8008c14:	2209      	movs	r2, #9
 8008c16:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008c18:	4b33      	ldr	r3, [pc, #204]	; (8008ce8 <SendComand+0x30c>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4933      	ldr	r1, [pc, #204]	; (8008cec <SendComand+0x310>)
 8008c20:	4833      	ldr	r0, [pc, #204]	; (8008cf0 <SendComand+0x314>)
 8008c22:	f008 faa9 	bl	8011178 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008c26:	4932      	ldr	r1, [pc, #200]	; (8008cf0 <SendComand+0x314>)
 8008c28:	480a      	ldr	r0, [pc, #40]	; (8008c54 <SendComand+0x278>)
 8008c2a:	f000 fcb5 	bl	8009598 <UARTDMA_Print>
			break;
 8008c2e:	e009      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008c30:	4930      	ldr	r1, [pc, #192]	; (8008cf4 <SendComand+0x318>)
 8008c32:	4808      	ldr	r0, [pc, #32]	; (8008c54 <SendComand+0x278>)
 8008c34:	f000 fcb0 	bl	8009598 <UARTDMA_Print>
			break;
 8008c38:	e004      	b.n	8008c44 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008c3a:	492f      	ldr	r1, [pc, #188]	; (8008cf8 <SendComand+0x31c>)
 8008c3c:	4805      	ldr	r0, [pc, #20]	; (8008c54 <SendComand+0x278>)
 8008c3e:	f000 fcab 	bl	8009598 <UARTDMA_Print>
			break;
 8008c42:	bf00      	nop
		}
	return 1;
 8008c44:	2301      	movs	r3, #1
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	08015468 	.word	0x08015468
 8008c54:	200004a4 	.word	0x200004a4
 8008c58:	08015470 	.word	0x08015470
 8008c5c:	08015478 	.word	0x08015478
 8008c60:	08015484 	.word	0x08015484
 8008c64:	0801548c 	.word	0x0801548c
 8008c68:	08015494 	.word	0x08015494
 8008c6c:	0801549c 	.word	0x0801549c
 8008c70:	080154ac 	.word	0x080154ac
 8008c74:	080154bc 	.word	0x080154bc
 8008c78:	080154cc 	.word	0x080154cc
 8008c7c:	080154dc 	.word	0x080154dc
 8008c80:	080154ec 	.word	0x080154ec
 8008c84:	080154fc 	.word	0x080154fc
 8008c88:	0801550c 	.word	0x0801550c
 8008c8c:	0801551c 	.word	0x0801551c
 8008c90:	0801552c 	.word	0x0801552c
 8008c94:	0801553c 	.word	0x0801553c
 8008c98:	0801554c 	.word	0x0801554c
 8008c9c:	0801555c 	.word	0x0801555c
 8008ca0:	0801556c 	.word	0x0801556c
 8008ca4:	0801557c 	.word	0x0801557c
 8008ca8:	0801558c 	.word	0x0801558c
 8008cac:	0801559c 	.word	0x0801559c
 8008cb0:	080155ac 	.word	0x080155ac
 8008cb4:	080155bc 	.word	0x080155bc
 8008cb8:	080155cc 	.word	0x080155cc
 8008cbc:	080155dc 	.word	0x080155dc
 8008cc0:	080155ec 	.word	0x080155ec
 8008cc4:	080155fc 	.word	0x080155fc
 8008cc8:	0801560c 	.word	0x0801560c
 8008ccc:	0801561c 	.word	0x0801561c
 8008cd0:	0801562c 	.word	0x0801562c
 8008cd4:	0801563c 	.word	0x0801563c
 8008cd8:	0801564c 	.word	0x0801564c
 8008cdc:	0801565c 	.word	0x0801565c
 8008ce0:	0801566c 	.word	0x0801566c
 8008ce4:	0801567c 	.word	0x0801567c
 8008ce8:	20000033 	.word	0x20000033
 8008cec:	0801568c 	.word	0x0801568c
 8008cf0:	20000674 	.word	0x20000674
 8008cf4:	0801569c 	.word	0x0801569c
 8008cf8:	080156ac 	.word	0x080156ac

08008cfc <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d101      	bne.n	8008d16 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008d12:	2301      	movs	r3, #1
 8008d14:	e015      	b.n	8008d42 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	789a      	ldrb	r2, [r3, #2]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	425a      	negs	r2, r3
 8008d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d36:	bf58      	it	pl
 8008d38:	4253      	negpl	r3, r2
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b085      	sub	sp, #20
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	425a      	negs	r2, r3
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d6a:	bf58      	it	pl
 8008d6c:	4253      	negpl	r3, r2
 8008d6e:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	7bfa      	ldrb	r2, [r7, #15]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d101      	bne.n	8008d7e <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e00a      	b.n	8008d94 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7bfa      	ldrb	r2, [r7, #15]
 8008d90:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008da4:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008da6:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <MX_SPI1_Init+0x68>)
 8008da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008daa:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008db8:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dd4:	2210      	movs	r2, #16
 8008dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de4:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008dec:	220a      	movs	r2, #10
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008df0:	4804      	ldr	r0, [pc, #16]	; (8008e04 <MX_SPI1_Init+0x64>)
 8008df2:	f005 fb0d 	bl	800e410 <HAL_SPI_Init>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008dfc:	f7fc fe2c 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008e00:	bf00      	nop
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20000710 	.word	0x20000710
 8008e08:	40013000 	.word	0x40013000

08008e0c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008e10:	4b17      	ldr	r3, [pc, #92]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e12:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <MX_SPI3_Init+0x68>)
 8008e14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008e16:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008e1e:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e3c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e40:	2220      	movs	r2, #32
 8008e42:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e58:	220a      	movs	r2, #10
 8008e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008e5c:	4804      	ldr	r0, [pc, #16]	; (8008e70 <MX_SPI3_Init+0x64>)
 8008e5e:	f005 fad7 	bl	800e410 <HAL_SPI_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008e68:	f7fc fdf6 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200006b8 	.word	0x200006b8
 8008e74:	40003c00 	.word	0x40003c00

08008e78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	; 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e80:	f107 031c 	add.w	r3, r7, #28
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	609a      	str	r2, [r3, #8]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a32      	ldr	r2, [pc, #200]	; (8008f60 <HAL_SPI_MspInit+0xe8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d12c      	bne.n	8008ef4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61bb      	str	r3, [r7, #24]
 8008e9e:	4b31      	ldr	r3, [pc, #196]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea2:	4a30      	ldr	r2, [pc, #192]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8008eaa:	4b2e      	ldr	r3, [pc, #184]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	4b2a      	ldr	r3, [pc, #168]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	4a29      	ldr	r2, [pc, #164]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ec6:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008ed2:	23e0      	movs	r3, #224	; 0xe0
 8008ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008ee2:	2305      	movs	r3, #5
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee6:	f107 031c 	add.w	r3, r7, #28
 8008eea:	4619      	mov	r1, r3
 8008eec:	481e      	ldr	r0, [pc, #120]	; (8008f68 <HAL_SPI_MspInit+0xf0>)
 8008eee:	f001 fb5b 	bl	800a5a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008ef2:	e030      	b.n	8008f56 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a1c      	ldr	r2, [pc, #112]	; (8008f6c <HAL_SPI_MspInit+0xf4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d12b      	bne.n	8008f56 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	4a17      	ldr	r2, [pc, #92]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	4a10      	ldr	r2, [pc, #64]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008f24:	f043 0302 	orr.w	r3, r3, #2
 8008f28:	6313      	str	r3, [r2, #48]	; 0x30
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <HAL_SPI_MspInit+0xec>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008f36:	2338      	movs	r3, #56	; 0x38
 8008f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f42:	2303      	movs	r3, #3
 8008f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008f46:	2306      	movs	r3, #6
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f4a:	f107 031c 	add.w	r3, r7, #28
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4807      	ldr	r0, [pc, #28]	; (8008f70 <HAL_SPI_MspInit+0xf8>)
 8008f52:	f001 fb29 	bl	800a5a8 <HAL_GPIO_Init>
}
 8008f56:	bf00      	nop
 8008f58:	3730      	adds	r7, #48	; 0x30
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40013000 	.word	0x40013000
 8008f64:	40023800 	.word	0x40023800
 8008f68:	40020000 	.word	0x40020000
 8008f6c:	40003c00 	.word	0x40003c00
 8008f70:	40020400 	.word	0x40020400

08008f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <HAL_MspInit+0x4c>)
 8008f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f82:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <HAL_MspInit+0x4c>)
 8008f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f88:	6453      	str	r3, [r2, #68]	; 0x44
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <HAL_MspInit+0x4c>)
 8008f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f96:	2300      	movs	r3, #0
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <HAL_MspInit+0x4c>)
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	4a08      	ldr	r2, [pc, #32]	; (8008fc0 <HAL_MspInit+0x4c>)
 8008fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fa6:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <HAL_MspInit+0x4c>)
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40023800 	.word	0x40023800

08008fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008fc8:	e7fe      	b.n	8008fc8 <NMI_Handler+0x4>

08008fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fce:	e7fe      	b.n	8008fce <HardFault_Handler+0x4>

08008fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fd4:	e7fe      	b.n	8008fd4 <MemManage_Handler+0x4>

08008fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fda:	e7fe      	b.n	8008fda <BusFault_Handler+0x4>

08008fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fe0:	e7fe      	b.n	8008fe0 <UsageFault_Handler+0x4>

08008fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fe6:	bf00      	nop
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ffe:	b480      	push	{r7}
 8009000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009002:	bf00      	nop
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009010:	f000 fcd6 	bl	80099c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009014:	bf00      	nop
 8009016:	bd80      	pop	{r7, pc}

08009018 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 800901c:	2010      	movs	r0, #16
 800901e:	f001 fc93 	bl	800a948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800902c:	4802      	ldr	r0, [pc, #8]	; (8009038 <DMA1_Stream0_IRQHandler+0x10>)
 800902e:	f001 f843 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000444 	.word	0x20000444

0800903c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009040:	4802      	ldr	r0, [pc, #8]	; (800904c <DMA1_Stream1_IRQHandler+0x10>)
 8009042:	f001 f839 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009046:	bf00      	nop
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000390 	.word	0x20000390

08009050 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8009054:	4802      	ldr	r0, [pc, #8]	; (8009060 <DMA1_Stream5_IRQHandler+0x10>)
 8009056:	f000 f9e9 	bl	800942c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800905a:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200004a4 	.word	0x200004a4

08009064 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009068:	4802      	ldr	r0, [pc, #8]	; (8009074 <DMA1_Stream6_IRQHandler+0x10>)
 800906a:	f001 f825 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000858 	.word	0x20000858

08009078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800907c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009080:	f001 fc62 	bl	800a948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009084:	bf00      	nop
 8009086:	bd80      	pop	{r7, pc}

08009088 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800908c:	4802      	ldr	r0, [pc, #8]	; (8009098 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800908e:	f005 feb4 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009092:	bf00      	nop
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000768 	.word	0x20000768

0800909c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80090a0:	4802      	ldr	r0, [pc, #8]	; (80090ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80090a2:	f005 feaa 	bl	800edfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80090a6:	bf00      	nop
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	200007b0 	.word	0x200007b0

080090b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80090b4:	4802      	ldr	r0, [pc, #8]	; (80090c0 <I2C1_EV_IRQHandler+0x10>)
 80090b6:	f002 fbe7 	bl	800b888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80090ba:	bf00      	nop
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	200003f0 	.word	0x200003f0

080090c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80090c8:	4802      	ldr	r0, [pc, #8]	; (80090d4 <I2C1_ER_IRQHandler+0x10>)
 80090ca:	f002 fd4e 	bl	800bb6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80090ce:	bf00      	nop
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	200003f0 	.word	0x200003f0

080090d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80090dc:	4803      	ldr	r0, [pc, #12]	; (80090ec <USART2_IRQHandler+0x14>)
 80090de:	f000 f97b 	bl	80093d8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80090e2:	4803      	ldr	r0, [pc, #12]	; (80090f0 <USART2_IRQHandler+0x18>)
 80090e4:	f006 f94a 	bl	800f37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200004a4 	.word	0x200004a4
 80090f0:	200008b8 	.word	0x200008b8

080090f4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80090f8:	4802      	ldr	r0, [pc, #8]	; (8009104 <SPI3_IRQHandler+0x10>)
 80090fa:	f005 fbb5 	bl	800e868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80090fe:	bf00      	nop
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200006b8 	.word	0x200006b8

08009108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
	return 1;
 800910c:	2301      	movs	r3, #1
}
 800910e:	4618      	mov	r0, r3
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <_kill>:

int _kill(int pid, int sig)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009122:	f007 f977 	bl	8010414 <__errno>
 8009126:	4603      	mov	r3, r0
 8009128:	2216      	movs	r2, #22
 800912a:	601a      	str	r2, [r3, #0]
	return -1;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <_exit>:

void _exit (int status)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009140:	f04f 31ff 	mov.w	r1, #4294967295
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ffe7 	bl	8009118 <_kill>
	while (1) {}		/* Make sure we hang here */
 800914a:	e7fe      	b.n	800914a <_exit+0x12>

0800914c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e00a      	b.n	8009174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800915e:	f3af 8000 	nop.w
 8009162:	4601      	mov	r1, r0
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	60ba      	str	r2, [r7, #8]
 800916a:	b2ca      	uxtb	r2, r1
 800916c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	3301      	adds	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	dbf0      	blt.n	800915e <_read+0x12>
	}

return len;
 800917c:	687b      	ldr	r3, [r7, #4]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
 8009196:	e009      	b.n	80091ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	60ba      	str	r2, [r7, #8]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	3301      	adds	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	dbf1      	blt.n	8009198 <_write+0x12>
	}
	return len;
 80091b4:	687b      	ldr	r3, [r7, #4]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <_close>:

int _close(int file)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
	return -1;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091e6:	605a      	str	r2, [r3, #4]
	return 0;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <_isatty>:

int _isatty(int file)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
	return 1;
 80091fe:	2301      	movs	r3, #1
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
	return 0;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009230:	4a14      	ldr	r2, [pc, #80]	; (8009284 <_sbrk+0x5c>)
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <_sbrk+0x60>)
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800923c:	4b13      	ldr	r3, [pc, #76]	; (800928c <_sbrk+0x64>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <_sbrk+0x64>)
 8009246:	4a12      	ldr	r2, [pc, #72]	; (8009290 <_sbrk+0x68>)
 8009248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <_sbrk+0x64>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4413      	add	r3, r2
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	d207      	bcs.n	8009268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009258:	f007 f8dc 	bl	8010414 <__errno>
 800925c:	4603      	mov	r3, r0
 800925e:	220c      	movs	r2, #12
 8009260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009262:	f04f 33ff 	mov.w	r3, #4294967295
 8009266:	e009      	b.n	800927c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009268:	4b08      	ldr	r3, [pc, #32]	; (800928c <_sbrk+0x64>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <_sbrk+0x64>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	4a05      	ldr	r2, [pc, #20]	; (800928c <_sbrk+0x64>)
 8009278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800927a:	68fb      	ldr	r3, [r7, #12]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20020000 	.word	0x20020000
 8009288:	00000400 	.word	0x00000400
 800928c:	200002b4 	.word	0x200002b4
 8009290:	20000910 	.word	0x20000910

08009294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <SystemInit+0x20>)
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <SystemInit+0x20>)
 80092a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	e000ed00 	.word	0xe000ed00

080092b8 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80092bc:	4b0e      	ldr	r3, [pc, #56]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092be:	4a0f      	ldr	r2, [pc, #60]	; (80092fc <MX_TIM10_Init+0x44>)
 80092c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80092c8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092ca:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80092d0:	4b09      	ldr	r3, [pc, #36]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80092d6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092da:	2200      	movs	r2, #0
 80092dc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092de:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80092e4:	4804      	ldr	r0, [pc, #16]	; (80092f8 <MX_TIM10_Init+0x40>)
 80092e6:	f005 fca7 	bl	800ec38 <HAL_TIM_Base_Init>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80092f0:	f7fc fbb2 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80092f4:	bf00      	nop
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000768 	.word	0x20000768
 80092fc:	40014400 	.word	0x40014400

08009300 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <MX_TIM11_Init+0x44>)
 8009306:	4a10      	ldr	r2, [pc, #64]	; (8009348 <MX_TIM11_Init+0x48>)
 8009308:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <MX_TIM11_Init+0x44>)
 800930c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009310:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009312:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <MX_TIM11_Init+0x44>)
 8009314:	2200      	movs	r2, #0
 8009316:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <MX_TIM11_Init+0x44>)
 800931a:	f247 522f 	movw	r2, #29999	; 0x752f
 800931e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8009320:	4b08      	ldr	r3, [pc, #32]	; (8009344 <MX_TIM11_Init+0x44>)
 8009322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009326:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009328:	4b06      	ldr	r3, [pc, #24]	; (8009344 <MX_TIM11_Init+0x44>)
 800932a:	2200      	movs	r2, #0
 800932c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800932e:	4805      	ldr	r0, [pc, #20]	; (8009344 <MX_TIM11_Init+0x44>)
 8009330:	f005 fc82 	bl	800ec38 <HAL_TIM_Base_Init>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800933a:	f7fc fb8d 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800933e:	bf00      	nop
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	200007b0 	.word	0x200007b0
 8009348:	40014800 	.word	0x40014800

0800934c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1c      	ldr	r2, [pc, #112]	; (80093cc <HAL_TIM_Base_MspInit+0x80>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d116      	bne.n	800938c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	4b1b      	ldr	r3, [pc, #108]	; (80093d0 <HAL_TIM_Base_MspInit+0x84>)
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	4a1a      	ldr	r2, [pc, #104]	; (80093d0 <HAL_TIM_Base_MspInit+0x84>)
 8009368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800936c:	6453      	str	r3, [r2, #68]	; 0x44
 800936e:	4b18      	ldr	r3, [pc, #96]	; (80093d0 <HAL_TIM_Base_MspInit+0x84>)
 8009370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800937a:	2200      	movs	r2, #0
 800937c:	2100      	movs	r1, #0
 800937e:	2019      	movs	r0, #25
 8009380:	f000 fca1 	bl	8009cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009384:	2019      	movs	r0, #25
 8009386:	f000 fcba 	bl	8009cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800938a:	e01a      	b.n	80093c2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <HAL_TIM_Base_MspInit+0x88>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d115      	bne.n	80093c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <HAL_TIM_Base_MspInit+0x84>)
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	4a0c      	ldr	r2, [pc, #48]	; (80093d0 <HAL_TIM_Base_MspInit+0x84>)
 80093a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093a4:	6453      	str	r3, [r2, #68]	; 0x44
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <HAL_TIM_Base_MspInit+0x84>)
 80093a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	201a      	movs	r0, #26
 80093b8:	f000 fc85 	bl	8009cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80093bc:	201a      	movs	r0, #26
 80093be:	f000 fc9e 	bl	8009cfe <HAL_NVIC_EnableIRQ>
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	40014400 	.word	0x40014400
 80093d0:	40023800 	.word	0x40023800
 80093d4:	40014800 	.word	0x40014800

080093d8 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0310 	and.w	r3, r3, #16
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d017      	beq.n	8009420 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	60fb      	str	r3, [r7, #12]
	}
}
 8009420:	bf00      	nop
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	d056      	beq.n	80094fe <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009458:	2220      	movs	r2, #32
 800945a:	409a      	lsls	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009470:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3304      	adds	r3, #4
 8009476:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009478:	2300      	movs	r3, #0
 800947a:	82fb      	strh	r3, [r7, #22]
 800947c:	e01a      	b.n	80094b4 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009484:	8afb      	ldrh	r3, [r7, #22]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	4413      	add	r3, r2
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	4619      	mov	r1, r3
 800948e:	f7ff fc5e 	bl	8008d4e <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8009492:	8afb      	ldrh	r3, [r7, #22]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	4413      	add	r3, r2
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b0a      	cmp	r3, #10
 800949c:	d107      	bne.n	80094ae <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80094a4:	3301      	adds	r3, #1
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80094ae:	8afb      	ldrh	r3, [r7, #22]
 80094b0:	3301      	adds	r3, #1
 80094b2:	82fb      	strh	r3, [r7, #22]
 80094b4:	8afa      	ldrh	r2, [r7, #22]
 80094b6:	89fb      	ldrh	r3, [r7, #14]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d3e0      	bcc.n	800947e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c4:	223f      	movs	r2, #63	; 0x3f
 80094c6:	409a      	lsls	r2, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2240      	movs	r2, #64	; 0x40
 80094e4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0201 	orr.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
	}
}
 80094fe:	bf00      	nop
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fc16 	bl	8008d4e <RB_Write>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800954a:	2b00      	cmp	r3, #0
 800954c:	d01f      	beq.n	800958e <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800954e:	e013      	b.n	8009578 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b0a      	cmp	r3, #10
 8009556:	d10c      	bne.n	8009572 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009564:	3b01      	subs	r3, #1
 8009566:	b2da      	uxtb	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800956e:	2300      	movs	r3, #0
 8009570:	e00e      	b.n	8009590 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3344      	adds	r3, #68	; 0x44
 800957c:	68f9      	ldr	r1, [r7, #12]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fbbc 	bl	8008cfc <RB_Read>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0e2      	beq.n	8009550 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800958a:	2300      	movs	r3, #0
 800958c:	e000      	b.n	8009590 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800958e:	2301      	movs	r3, #1
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80095a6:	e012      	b.n	80095ce <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff ffaa 	bl	8009506 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3301      	adds	r3, #1
 80095b6:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	2b0a      	cmp	r3, #10
 80095bc:	d107      	bne.n	80095ce <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80095c4:	3301      	adds	r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	72fb      	strb	r3, [r7, #11]
 80095d4:	7afb      	ldrb	r3, [r7, #11]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e6      	bne.n	80095a8 <UARTDMA_Print+0x10>
		}
	}
}
 80095da:	bf00      	nop
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80095f6:	2301      	movs	r3, #1
 80095f8:	e000      	b.n	80095fc <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009610:	2300      	movs	r3, #0
 8009612:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d028      	beq.n	8009676 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009624:	e013      	b.n	800964e <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8009626:	7b7b      	ldrb	r3, [r7, #13]
 8009628:	2b0a      	cmp	r3, #10
 800962a:	d107      	bne.n	800963c <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009632:	3b01      	subs	r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800963c:	89fb      	ldrh	r3, [r7, #14]
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	81fa      	strh	r2, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	7b7a      	ldrb	r2, [r7, #13]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	440b      	add	r3, r1
 800964a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009654:	f107 020d 	add.w	r2, r7, #13
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fb4e 	bl	8008cfc <RB_Read>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0df      	beq.n	8009626 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	33c7      	adds	r3, #199	; 0xc7
 800966e:	89fa      	ldrh	r2, [r7, #14]
 8009670:	4619      	mov	r1, r3
 8009672:	f005 fdd5 	bl	800f220 <HAL_UART_Transmit_DMA>
	}
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0210 	orr.w	r2, r2, #16
 80096a0:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0210 	orr.w	r2, r2, #16
 80096b8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0210 	orr.w	r2, r2, #16
 80096d0:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3304      	adds	r3, #4
 80096da:	2240      	movs	r2, #64	; 0x40
 80096dc:	4619      	mov	r1, r3
 80096de:	f005 fe1d 	bl	800f31c <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 0208 	bic.w	r2, r2, #8
 80096f8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0208 	bic.w	r2, r2, #8
 8009710:	601a      	str	r2, [r3, #0]
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009720:	4b11      	ldr	r3, [pc, #68]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009722:	4a12      	ldr	r2, [pc, #72]	; (800976c <MX_USART2_UART_Init+0x50>)
 8009724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009726:	4b10      	ldr	r3, [pc, #64]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800972c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009730:	2200      	movs	r2, #0
 8009732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009736:	2200      	movs	r2, #0
 8009738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800973a:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 800973c:	2200      	movs	r2, #0
 800973e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009742:	220c      	movs	r2, #12
 8009744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009746:	4b08      	ldr	r3, [pc, #32]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009748:	2200      	movs	r2, #0
 800974a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 800974e:	2200      	movs	r2, #0
 8009750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009752:	4805      	ldr	r0, [pc, #20]	; (8009768 <MX_USART2_UART_Init+0x4c>)
 8009754:	f005 fd16 	bl	800f184 <HAL_UART_Init>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800975e:	f7fc f97b 	bl	8005a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	200008b8 	.word	0x200008b8
 800976c:	40004400 	.word	0x40004400

08009770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08a      	sub	sp, #40	; 0x28
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009778:	f107 0314 	add.w	r3, r7, #20
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	605a      	str	r2, [r3, #4]
 8009782:	609a      	str	r2, [r3, #8]
 8009784:	60da      	str	r2, [r3, #12]
 8009786:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a47      	ldr	r2, [pc, #284]	; (80098ac <HAL_UART_MspInit+0x13c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	f040 8088 	bne.w	80098a4 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009794:	2300      	movs	r3, #0
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <HAL_UART_MspInit+0x140>)
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	4a44      	ldr	r2, [pc, #272]	; (80098b0 <HAL_UART_MspInit+0x140>)
 800979e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097a2:	6413      	str	r3, [r2, #64]	; 0x40
 80097a4:	4b42      	ldr	r3, [pc, #264]	; (80098b0 <HAL_UART_MspInit+0x140>)
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	4b3e      	ldr	r3, [pc, #248]	; (80098b0 <HAL_UART_MspInit+0x140>)
 80097b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b8:	4a3d      	ldr	r2, [pc, #244]	; (80098b0 <HAL_UART_MspInit+0x140>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6313      	str	r3, [r2, #48]	; 0x30
 80097c0:	4b3b      	ldr	r3, [pc, #236]	; (80098b0 <HAL_UART_MspInit+0x140>)
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80097cc:	230c      	movs	r3, #12
 80097ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d0:	2302      	movs	r3, #2
 80097d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d8:	2303      	movs	r3, #3
 80097da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80097dc:	2307      	movs	r3, #7
 80097de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097e0:	f107 0314 	add.w	r3, r7, #20
 80097e4:	4619      	mov	r1, r3
 80097e6:	4833      	ldr	r0, [pc, #204]	; (80098b4 <HAL_UART_MspInit+0x144>)
 80097e8:	f000 fede 	bl	800a5a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80097ec:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <HAL_UART_MspInit+0x148>)
 80097ee:	4a33      	ldr	r2, [pc, #204]	; (80098bc <HAL_UART_MspInit+0x14c>)
 80097f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80097f2:	4b31      	ldr	r3, [pc, #196]	; (80098b8 <HAL_UART_MspInit+0x148>)
 80097f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80097f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <HAL_UART_MspInit+0x148>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009800:	4b2d      	ldr	r3, [pc, #180]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009802:	2200      	movs	r2, #0
 8009804:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009806:	4b2c      	ldr	r3, [pc, #176]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800980c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800980e:	4b2a      	ldr	r3, [pc, #168]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009810:	2200      	movs	r2, #0
 8009812:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009814:	4b28      	ldr	r3, [pc, #160]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009816:	2200      	movs	r2, #0
 8009818:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800981a:	4b27      	ldr	r3, [pc, #156]	; (80098b8 <HAL_UART_MspInit+0x148>)
 800981c:	2200      	movs	r2, #0
 800981e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009820:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009822:	2200      	movs	r2, #0
 8009824:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009826:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009828:	2200      	movs	r2, #0
 800982a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800982c:	4822      	ldr	r0, [pc, #136]	; (80098b8 <HAL_UART_MspInit+0x148>)
 800982e:	f000 faab 	bl	8009d88 <HAL_DMA_Init>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8009838:	f7fc f90e 	bl	8005a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a1e      	ldr	r2, [pc, #120]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009840:	639a      	str	r2, [r3, #56]	; 0x38
 8009842:	4a1d      	ldr	r2, [pc, #116]	; (80098b8 <HAL_UART_MspInit+0x148>)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8009848:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <HAL_UART_MspInit+0x150>)
 800984a:	4a1e      	ldr	r2, [pc, #120]	; (80098c4 <HAL_UART_MspInit+0x154>)
 800984c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800984e:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <HAL_UART_MspInit+0x150>)
 8009850:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009854:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009856:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <HAL_UART_MspInit+0x150>)
 8009858:	2240      	movs	r2, #64	; 0x40
 800985a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800985c:	4b18      	ldr	r3, [pc, #96]	; (80098c0 <HAL_UART_MspInit+0x150>)
 800985e:	2200      	movs	r2, #0
 8009860:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009862:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <HAL_UART_MspInit+0x150>)
 8009864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009868:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800986a:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <HAL_UART_MspInit+0x150>)
 800986c:	2200      	movs	r2, #0
 800986e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009870:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <HAL_UART_MspInit+0x150>)
 8009872:	2200      	movs	r2, #0
 8009874:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009876:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <HAL_UART_MspInit+0x150>)
 8009878:	2200      	movs	r2, #0
 800987a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800987c:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <HAL_UART_MspInit+0x150>)
 800987e:	2200      	movs	r2, #0
 8009880:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009882:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <HAL_UART_MspInit+0x150>)
 8009884:	2200      	movs	r2, #0
 8009886:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009888:	480d      	ldr	r0, [pc, #52]	; (80098c0 <HAL_UART_MspInit+0x150>)
 800988a:	f000 fa7d 	bl	8009d88 <HAL_DMA_Init>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8009894:	f7fc f8e0 	bl	8005a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a09      	ldr	r2, [pc, #36]	; (80098c0 <HAL_UART_MspInit+0x150>)
 800989c:	635a      	str	r2, [r3, #52]	; 0x34
 800989e:	4a08      	ldr	r2, [pc, #32]	; (80098c0 <HAL_UART_MspInit+0x150>)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80098a4:	bf00      	nop
 80098a6:	3728      	adds	r7, #40	; 0x28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	40004400 	.word	0x40004400
 80098b0:	40023800 	.word	0x40023800
 80098b4:	40020000 	.word	0x40020000
 80098b8:	200007f8 	.word	0x200007f8
 80098bc:	40026088 	.word	0x40026088
 80098c0:	20000858 	.word	0x20000858
 80098c4:	400260a0 	.word	0x400260a0

080098c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80098c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80098cc:	480d      	ldr	r0, [pc, #52]	; (8009904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80098ce:	490e      	ldr	r1, [pc, #56]	; (8009908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80098d0:	4a0e      	ldr	r2, [pc, #56]	; (800990c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80098d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80098d4:	e002      	b.n	80098dc <LoopCopyDataInit>

080098d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80098d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80098d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80098da:	3304      	adds	r3, #4

080098dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80098dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80098de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80098e0:	d3f9      	bcc.n	80098d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80098e2:	4a0b      	ldr	r2, [pc, #44]	; (8009910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80098e4:	4c0b      	ldr	r4, [pc, #44]	; (8009914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80098e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80098e8:	e001      	b.n	80098ee <LoopFillZerobss>

080098ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80098ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80098ec:	3204      	adds	r2, #4

080098ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80098ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80098f0:	d3fb      	bcc.n	80098ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80098f2:	f7ff fccf 	bl	8009294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80098f6:	f006 fd93 	bl	8010420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80098fa:	f7fb ff71 	bl	80057e0 <main>
  bx  lr    
 80098fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009908:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800990c:	08028d28 	.word	0x08028d28
  ldr r2, =_sbss
 8009910:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009914:	20000910 	.word	0x20000910

08009918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009918:	e7fe      	b.n	8009918 <ADC_IRQHandler>
	...

0800991c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009920:	4b0e      	ldr	r3, [pc, #56]	; (800995c <HAL_Init+0x40>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a0d      	ldr	r2, [pc, #52]	; (800995c <HAL_Init+0x40>)
 8009926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800992a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <HAL_Init+0x40>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a0a      	ldr	r2, [pc, #40]	; (800995c <HAL_Init+0x40>)
 8009932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009938:	4b08      	ldr	r3, [pc, #32]	; (800995c <HAL_Init+0x40>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a07      	ldr	r2, [pc, #28]	; (800995c <HAL_Init+0x40>)
 800993e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009944:	2003      	movs	r0, #3
 8009946:	f000 f9b3 	bl	8009cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800994a:	2000      	movs	r0, #0
 800994c:	f000 f808 	bl	8009960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009950:	f7ff fb10 	bl	8008f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	40023c00 	.word	0x40023c00

08009960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009968:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <HAL_InitTick+0x54>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <HAL_InitTick+0x58>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	4619      	mov	r1, r3
 8009972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009976:	fbb3 f3f1 	udiv	r3, r3, r1
 800997a:	fbb2 f3f3 	udiv	r3, r2, r3
 800997e:	4618      	mov	r0, r3
 8009980:	f000 f9d9 	bl	8009d36 <HAL_SYSTICK_Config>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e00e      	b.n	80099ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b0f      	cmp	r3, #15
 8009992:	d80a      	bhi.n	80099aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009994:	2200      	movs	r2, #0
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	f000 f993 	bl	8009cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80099a0:	4a06      	ldr	r2, [pc, #24]	; (80099bc <HAL_InitTick+0x5c>)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e000      	b.n	80099ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000034 	.word	0x20000034
 80099b8:	2000003c 	.word	0x2000003c
 80099bc:	20000038 	.word	0x20000038

080099c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <HAL_IncTick+0x20>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <HAL_IncTick+0x24>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4413      	add	r3, r2
 80099d0:	4a04      	ldr	r2, [pc, #16]	; (80099e4 <HAL_IncTick+0x24>)
 80099d2:	6013      	str	r3, [r2, #0]
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	2000003c 	.word	0x2000003c
 80099e4:	200008fc 	.word	0x200008fc

080099e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  return uwTick;
 80099ec:	4b03      	ldr	r3, [pc, #12]	; (80099fc <HAL_GetTick+0x14>)
 80099ee:	681b      	ldr	r3, [r3, #0]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	200008fc 	.word	0x200008fc

08009a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a08:	f7ff ffee 	bl	80099e8 <HAL_GetTick>
 8009a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a18:	d005      	beq.n	8009a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <HAL_Delay+0x44>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009a26:	bf00      	nop
 8009a28:	f7ff ffde 	bl	80099e8 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d8f7      	bhi.n	8009a28 <HAL_Delay+0x28>
  {
  }
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	2000003c 	.word	0x2000003c

08009a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a58:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <__NVIC_SetPriorityGrouping+0x44>)
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a64:	4013      	ands	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a7a:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <__NVIC_SetPriorityGrouping+0x44>)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	60d3      	str	r3, [r2, #12]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	e000ed00 	.word	0xe000ed00

08009a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	0a1b      	lsrs	r3, r3, #8
 8009a9a:	f003 0307 	and.w	r3, r3, #7
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	e000ed00 	.word	0xe000ed00

08009aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	db0b      	blt.n	8009ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	f003 021f 	and.w	r2, r3, #31
 8009ac4:	4907      	ldr	r1, [pc, #28]	; (8009ae4 <__NVIC_EnableIRQ+0x38>)
 8009ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aca:	095b      	lsrs	r3, r3, #5
 8009acc:	2001      	movs	r0, #1
 8009ace:	fa00 f202 	lsl.w	r2, r0, r2
 8009ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	e000e100 	.word	0xe000e100

08009ae8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	db12      	blt.n	8009b20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	f003 021f 	and.w	r2, r3, #31
 8009b00:	490a      	ldr	r1, [pc, #40]	; (8009b2c <__NVIC_DisableIRQ+0x44>)
 8009b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	2001      	movs	r0, #1
 8009b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b0e:	3320      	adds	r3, #32
 8009b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009b14:	f3bf 8f4f 	dsb	sy
}
 8009b18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b1a:	f3bf 8f6f 	isb	sy
}
 8009b1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	e000e100 	.word	0xe000e100

08009b30 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	db0e      	blt.n	8009b60 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009b42:	4a0b      	ldr	r2, [pc, #44]	; (8009b70 <__NVIC_GetPendingIRQ+0x40>)
 8009b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b48:	095b      	lsrs	r3, r3, #5
 8009b4a:	3340      	adds	r3, #64	; 0x40
 8009b4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	f003 031f 	and.w	r3, r3, #31
 8009b56:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	e000      	b.n	8009b62 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8009b60:	2300      	movs	r3, #0
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	e000e100 	.word	0xe000e100

08009b74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	db0c      	blt.n	8009ba0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	f003 021f 	and.w	r2, r3, #31
 8009b8c:	4907      	ldr	r1, [pc, #28]	; (8009bac <__NVIC_ClearPendingIRQ+0x38>)
 8009b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	2001      	movs	r0, #1
 8009b96:	fa00 f202 	lsl.w	r2, r0, r2
 8009b9a:	3360      	adds	r3, #96	; 0x60
 8009b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	e000e100 	.word	0xe000e100

08009bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db0a      	blt.n	8009bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	490c      	ldr	r1, [pc, #48]	; (8009bfc <__NVIC_SetPriority+0x4c>)
 8009bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bce:	0112      	lsls	r2, r2, #4
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009bd8:	e00a      	b.n	8009bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	4908      	ldr	r1, [pc, #32]	; (8009c00 <__NVIC_SetPriority+0x50>)
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	f003 030f 	and.w	r3, r3, #15
 8009be6:	3b04      	subs	r3, #4
 8009be8:	0112      	lsls	r2, r2, #4
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	440b      	add	r3, r1
 8009bee:	761a      	strb	r2, [r3, #24]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	e000e100 	.word	0xe000e100
 8009c00:	e000ed00 	.word	0xe000ed00

08009c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b089      	sub	sp, #36	; 0x24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f1c3 0307 	rsb	r3, r3, #7
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	bf28      	it	cs
 8009c22:	2304      	movcs	r3, #4
 8009c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	2b06      	cmp	r3, #6
 8009c2c:	d902      	bls.n	8009c34 <NVIC_EncodePriority+0x30>
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	3b03      	subs	r3, #3
 8009c32:	e000      	b.n	8009c36 <NVIC_EncodePriority+0x32>
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	43da      	mvns	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	401a      	ands	r2, r3
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	fa01 f303 	lsl.w	r3, r1, r3
 8009c56:	43d9      	mvns	r1, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c5c:	4313      	orrs	r3, r2
         );
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3724      	adds	r7, #36	; 0x24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c7c:	d301      	bcc.n	8009c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e00f      	b.n	8009ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c82:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <SysTick_Config+0x40>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c8a:	210f      	movs	r1, #15
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	f7ff ff8e 	bl	8009bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <SysTick_Config+0x40>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c9a:	4b04      	ldr	r3, [pc, #16]	; (8009cac <SysTick_Config+0x40>)
 8009c9c:	2207      	movs	r2, #7
 8009c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	e000e010 	.word	0xe000e010

08009cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fec5 	bl	8009a48 <__NVIC_SetPriorityGrouping>
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b086      	sub	sp, #24
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	4603      	mov	r3, r0
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	607a      	str	r2, [r7, #4]
 8009cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009cd8:	f7ff feda 	bl	8009a90 <__NVIC_GetPriorityGrouping>
 8009cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	6978      	ldr	r0, [r7, #20]
 8009ce4:	f7ff ff8e 	bl	8009c04 <NVIC_EncodePriority>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff ff5d 	bl	8009bb0 <__NVIC_SetPriority>
}
 8009cf6:	bf00      	nop
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	4603      	mov	r3, r0
 8009d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff fecd 	bl	8009aac <__NVIC_EnableIRQ>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	4603      	mov	r3, r0
 8009d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff fedd 	bl	8009ae8 <__NVIC_DisableIRQ>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff ff94 	bl	8009c6c <SysTick_Config>
 8009d44:	4603      	mov	r3, r0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	4603      	mov	r3, r0
 8009d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8009d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff fee7 	bl	8009b30 <__NVIC_GetPendingIRQ>
 8009d62:	4603      	mov	r3, r0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff fefa 	bl	8009b74 <__NVIC_ClearPendingIRQ>
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009d94:	f7ff fe28 	bl	80099e8 <HAL_GetTick>
 8009d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e099      	b.n	8009ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009dc4:	e00f      	b.n	8009de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009dc6:	f7ff fe0f 	bl	80099e8 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	d908      	bls.n	8009de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e078      	b.n	8009ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e8      	bne.n	8009dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4b38      	ldr	r3, [pc, #224]	; (8009ee0 <HAL_DMA_Init+0x158>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d107      	bne.n	8009e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f023 0307 	bic.w	r3, r3, #7
 8009e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d117      	bne.n	8009eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00e      	beq.n	8009eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fb0f 	bl	800a4b0 <DMA_CheckFifoParam>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d008      	beq.n	8009eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2240      	movs	r2, #64	; 0x40
 8009e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e016      	b.n	8009ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fac6 	bl	800a444 <DMA_CalcBaseAndBitshift>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec0:	223f      	movs	r2, #63	; 0x3f
 8009ec2:	409a      	lsls	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	f010803f 	.word	0xf010803f

08009ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d101      	bne.n	8009f0a <HAL_DMA_Start_IT+0x26>
 8009f06:	2302      	movs	r3, #2
 8009f08:	e040      	b.n	8009f8c <HAL_DMA_Start_IT+0xa8>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d12f      	bne.n	8009f7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2202      	movs	r2, #2
 8009f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fa58 	bl	800a3e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f3c:	223f      	movs	r2, #63	; 0x3f
 8009f3e:	409a      	lsls	r2, r3
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0216 	orr.w	r2, r2, #22
 8009f52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0208 	orr.w	r2, r2, #8
 8009f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e005      	b.n	8009f8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009f86:	2302      	movs	r3, #2
 8009f88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009fa2:	f7ff fd21 	bl	80099e8 <HAL_GetTick>
 8009fa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d008      	beq.n	8009fc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2280      	movs	r2, #128	; 0x80
 8009fb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e052      	b.n	800a06c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0216 	bic.w	r2, r2, #22
 8009fd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695a      	ldr	r2, [r3, #20]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fe4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <HAL_DMA_Abort+0x62>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0208 	bic.w	r2, r2, #8
 800a004:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a016:	e013      	b.n	800a040 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a018:	f7ff fce6 	bl	80099e8 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b05      	cmp	r3, #5
 800a024:	d90c      	bls.n	800a040 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2203      	movs	r2, #3
 800a030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e015      	b.n	800a06c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e4      	bne.n	800a018 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a052:	223f      	movs	r2, #63	; 0x3f
 800a054:	409a      	lsls	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b02      	cmp	r3, #2
 800a086:	d004      	beq.n	800a092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2280      	movs	r2, #128	; 0x80
 800a08c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e00c      	b.n	800a0ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2205      	movs	r2, #5
 800a096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0c4:	4b92      	ldr	r3, [pc, #584]	; (800a310 <HAL_DMA_IRQHandler+0x258>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a92      	ldr	r2, [pc, #584]	; (800a314 <HAL_DMA_IRQHandler+0x25c>)
 800a0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ce:	0a9b      	lsrs	r3, r3, #10
 800a0d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01a      	beq.n	800a124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d013      	beq.n	800a124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0204 	bic.w	r2, r2, #4
 800a10a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a110:	2208      	movs	r2, #8
 800a112:	409a      	lsls	r2, r3
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11c:	f043 0201 	orr.w	r2, r3, #1
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a128:	2201      	movs	r2, #1
 800a12a:	409a      	lsls	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d012      	beq.n	800a15a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00b      	beq.n	800a15a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a146:	2201      	movs	r2, #1
 800a148:	409a      	lsls	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a152:	f043 0202 	orr.w	r2, r3, #2
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15e:	2204      	movs	r2, #4
 800a160:	409a      	lsls	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4013      	ands	r3, r2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d012      	beq.n	800a190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17c:	2204      	movs	r2, #4
 800a17e:	409a      	lsls	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a188:	f043 0204 	orr.w	r2, r3, #4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a194:	2210      	movs	r2, #16
 800a196:	409a      	lsls	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d043      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d03c      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b2:	2210      	movs	r2, #16
 800a1b4:	409a      	lsls	r2, r3
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d018      	beq.n	800a1fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d108      	bne.n	800a1e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d024      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	4798      	blx	r3
 800a1e6:	e01f      	b.n	800a228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01b      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	4798      	blx	r3
 800a1f8:	e016      	b.n	800a228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a204:	2b00      	cmp	r3, #0
 800a206:	d107      	bne.n	800a218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0208 	bic.w	r2, r2, #8
 800a216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22c:	2220      	movs	r2, #32
 800a22e:	409a      	lsls	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4013      	ands	r3, r2
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 808e 	beq.w	800a356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 8086 	beq.w	800a356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a24e:	2220      	movs	r2, #32
 800a250:	409a      	lsls	r2, r3
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b05      	cmp	r3, #5
 800a260:	d136      	bne.n	800a2d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 0216 	bic.w	r2, r2, #22
 800a270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695a      	ldr	r2, [r3, #20]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	2b00      	cmp	r3, #0
 800a288:	d103      	bne.n	800a292 <HAL_DMA_IRQHandler+0x1da>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0208 	bic.w	r2, r2, #8
 800a2a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a6:	223f      	movs	r2, #63	; 0x3f
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d07d      	beq.n	800a3c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
        }
        return;
 800a2ce:	e078      	b.n	800a3c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01c      	beq.n	800a318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d108      	bne.n	800a2fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d030      	beq.n	800a356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	4798      	blx	r3
 800a2fc:	e02b      	b.n	800a356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d027      	beq.n	800a356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
 800a30e:	e022      	b.n	800a356 <HAL_DMA_IRQHandler+0x29e>
 800a310:	20000034 	.word	0x20000034
 800a314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10f      	bne.n	800a346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0210 	bic.w	r2, r2, #16
 800a334:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d032      	beq.n	800a3c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d022      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2205      	movs	r2, #5
 800a36e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0201 	bic.w	r2, r2, #1
 800a380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	3301      	adds	r3, #1
 800a386:	60bb      	str	r3, [r7, #8]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d307      	bcc.n	800a39e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f2      	bne.n	800a382 <HAL_DMA_IRQHandler+0x2ca>
 800a39c:	e000      	b.n	800a3a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a39e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
 800a3c0:	e000      	b.n	800a3c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a3c2:	bf00      	nop
    }
  }
}
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop

0800a3cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3da:	b2db      	uxtb	r3, r3
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	2b40      	cmp	r3, #64	; 0x40
 800a414:	d108      	bne.n	800a428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a426:	e007      	b.n	800a438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	60da      	str	r2, [r3, #12]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	3b10      	subs	r3, #16
 800a454:	4a14      	ldr	r2, [pc, #80]	; (800a4a8 <DMA_CalcBaseAndBitshift+0x64>)
 800a456:	fba2 2303 	umull	r2, r3, r2, r3
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a45e:	4a13      	ldr	r2, [pc, #76]	; (800a4ac <DMA_CalcBaseAndBitshift+0x68>)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d909      	bls.n	800a486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	1d1a      	adds	r2, r3, #4
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	659a      	str	r2, [r3, #88]	; 0x58
 800a484:	e007      	b.n	800a496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	aaaaaaab 	.word	0xaaaaaaab
 800a4ac:	08028800 	.word	0x08028800

0800a4b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d11f      	bne.n	800a50a <DMA_CheckFifoParam+0x5a>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d856      	bhi.n	800a57e <DMA_CheckFifoParam+0xce>
 800a4d0:	a201      	add	r2, pc, #4	; (adr r2, 800a4d8 <DMA_CheckFifoParam+0x28>)
 800a4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d6:	bf00      	nop
 800a4d8:	0800a4e9 	.word	0x0800a4e9
 800a4dc:	0800a4fb 	.word	0x0800a4fb
 800a4e0:	0800a4e9 	.word	0x0800a4e9
 800a4e4:	0800a57f 	.word	0x0800a57f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d046      	beq.n	800a582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4f8:	e043      	b.n	800a582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a502:	d140      	bne.n	800a586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a508:	e03d      	b.n	800a586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a512:	d121      	bne.n	800a558 <DMA_CheckFifoParam+0xa8>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b03      	cmp	r3, #3
 800a518:	d837      	bhi.n	800a58a <DMA_CheckFifoParam+0xda>
 800a51a:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <DMA_CheckFifoParam+0x70>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a531 	.word	0x0800a531
 800a524:	0800a537 	.word	0x0800a537
 800a528:	0800a531 	.word	0x0800a531
 800a52c:	0800a549 	.word	0x0800a549
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
      break;
 800a534:	e030      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d025      	beq.n	800a58e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a546:	e022      	b.n	800a58e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a550:	d11f      	bne.n	800a592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a556:	e01c      	b.n	800a592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d903      	bls.n	800a566 <DMA_CheckFifoParam+0xb6>
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b03      	cmp	r3, #3
 800a562:	d003      	beq.n	800a56c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a564:	e018      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	73fb      	strb	r3, [r7, #15]
      break;
 800a56a:	e015      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00e      	beq.n	800a596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	73fb      	strb	r3, [r7, #15]
      break;
 800a57c:	e00b      	b.n	800a596 <DMA_CheckFifoParam+0xe6>
      break;
 800a57e:	bf00      	nop
 800a580:	e00a      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      break;
 800a582:	bf00      	nop
 800a584:	e008      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      break;
 800a586:	bf00      	nop
 800a588:	e006      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      break;
 800a58a:	bf00      	nop
 800a58c:	e004      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      break;
 800a58e:	bf00      	nop
 800a590:	e002      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      break;   
 800a592:	bf00      	nop
 800a594:	e000      	b.n	800a598 <DMA_CheckFifoParam+0xe8>
      break;
 800a596:	bf00      	nop
    }
  } 
  
  return status; 
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop

0800a5a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b089      	sub	sp, #36	; 0x24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61fb      	str	r3, [r7, #28]
 800a5c2:	e159      	b.n	800a878 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	f040 8148 	bne.w	800a872 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f003 0303 	and.w	r3, r3, #3
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d005      	beq.n	800a5fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d130      	bne.n	800a65c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	2203      	movs	r2, #3
 800a606:	fa02 f303 	lsl.w	r3, r2, r3
 800a60a:	43db      	mvns	r3, r3
 800a60c:	69ba      	ldr	r2, [r7, #24]
 800a60e:	4013      	ands	r3, r2
 800a610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	fa02 f303 	lsl.w	r3, r2, r3
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	4313      	orrs	r3, r2
 800a622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	69ba      	ldr	r2, [r7, #24]
 800a628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a630:	2201      	movs	r2, #1
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	fa02 f303 	lsl.w	r3, r2, r3
 800a638:	43db      	mvns	r3, r3
 800a63a:	69ba      	ldr	r2, [r7, #24]
 800a63c:	4013      	ands	r3, r2
 800a63e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	091b      	lsrs	r3, r3, #4
 800a646:	f003 0201 	and.w	r2, r3, #1
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	fa02 f303 	lsl.w	r3, r2, r3
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	4313      	orrs	r3, r2
 800a654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f003 0303 	and.w	r3, r3, #3
 800a664:	2b03      	cmp	r3, #3
 800a666:	d017      	beq.n	800a698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	2203      	movs	r2, #3
 800a674:	fa02 f303 	lsl.w	r3, r2, r3
 800a678:	43db      	mvns	r3, r3
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	4013      	ands	r3, r2
 800a67e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	fa02 f303 	lsl.w	r3, r2, r3
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	4313      	orrs	r3, r2
 800a690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d123      	bne.n	800a6ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	08da      	lsrs	r2, r3, #3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3208      	adds	r2, #8
 800a6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	f003 0307 	and.w	r3, r3, #7
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	220f      	movs	r2, #15
 800a6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	691a      	ldr	r2, [r3, #16]
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	08da      	lsrs	r2, r3, #3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3208      	adds	r2, #8
 800a6e6:	69b9      	ldr	r1, [r7, #24]
 800a6e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	2203      	movs	r2, #3
 800a6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fc:	43db      	mvns	r3, r3
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	4013      	ands	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f003 0203 	and.w	r2, r3, #3
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	fa02 f303 	lsl.w	r3, r2, r3
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	4313      	orrs	r3, r2
 800a718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 80a2 	beq.w	800a872 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	4b57      	ldr	r3, [pc, #348]	; (800a890 <HAL_GPIO_Init+0x2e8>)
 800a734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a736:	4a56      	ldr	r2, [pc, #344]	; (800a890 <HAL_GPIO_Init+0x2e8>)
 800a738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a73c:	6453      	str	r3, [r2, #68]	; 0x44
 800a73e:	4b54      	ldr	r3, [pc, #336]	; (800a890 <HAL_GPIO_Init+0x2e8>)
 800a740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a74a:	4a52      	ldr	r2, [pc, #328]	; (800a894 <HAL_GPIO_Init+0x2ec>)
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	089b      	lsrs	r3, r3, #2
 800a750:	3302      	adds	r3, #2
 800a752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	220f      	movs	r2, #15
 800a762:	fa02 f303 	lsl.w	r3, r2, r3
 800a766:	43db      	mvns	r3, r3
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	4013      	ands	r3, r2
 800a76c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a49      	ldr	r2, [pc, #292]	; (800a898 <HAL_GPIO_Init+0x2f0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d019      	beq.n	800a7aa <HAL_GPIO_Init+0x202>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a48      	ldr	r2, [pc, #288]	; (800a89c <HAL_GPIO_Init+0x2f4>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d013      	beq.n	800a7a6 <HAL_GPIO_Init+0x1fe>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a47      	ldr	r2, [pc, #284]	; (800a8a0 <HAL_GPIO_Init+0x2f8>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d00d      	beq.n	800a7a2 <HAL_GPIO_Init+0x1fa>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a46      	ldr	r2, [pc, #280]	; (800a8a4 <HAL_GPIO_Init+0x2fc>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d007      	beq.n	800a79e <HAL_GPIO_Init+0x1f6>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a45      	ldr	r2, [pc, #276]	; (800a8a8 <HAL_GPIO_Init+0x300>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d101      	bne.n	800a79a <HAL_GPIO_Init+0x1f2>
 800a796:	2304      	movs	r3, #4
 800a798:	e008      	b.n	800a7ac <HAL_GPIO_Init+0x204>
 800a79a:	2307      	movs	r3, #7
 800a79c:	e006      	b.n	800a7ac <HAL_GPIO_Init+0x204>
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e004      	b.n	800a7ac <HAL_GPIO_Init+0x204>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e002      	b.n	800a7ac <HAL_GPIO_Init+0x204>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <HAL_GPIO_Init+0x204>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	f002 0203 	and.w	r2, r2, #3
 800a7b2:	0092      	lsls	r2, r2, #2
 800a7b4:	4093      	lsls	r3, r2
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7bc:	4935      	ldr	r1, [pc, #212]	; (800a894 <HAL_GPIO_Init+0x2ec>)
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	089b      	lsrs	r3, r3, #2
 800a7c2:	3302      	adds	r3, #2
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a7ca:	4b38      	ldr	r3, [pc, #224]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	43db      	mvns	r3, r3
 800a7d4:	69ba      	ldr	r2, [r7, #24]
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a7e6:	69ba      	ldr	r2, [r7, #24]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a7ee:	4a2f      	ldr	r2, [pc, #188]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a7f4:	4b2d      	ldr	r3, [pc, #180]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	4013      	ands	r3, r2
 800a802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d003      	beq.n	800a818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a810:	69ba      	ldr	r2, [r7, #24]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	4313      	orrs	r3, r2
 800a816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a818:	4a24      	ldr	r2, [pc, #144]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a81e:	4b23      	ldr	r3, [pc, #140]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	43db      	mvns	r3, r3
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	4013      	ands	r3, r2
 800a82c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	4313      	orrs	r3, r2
 800a840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a842:	4a1a      	ldr	r2, [pc, #104]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a848:	4b18      	ldr	r3, [pc, #96]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	43db      	mvns	r3, r3
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	4013      	ands	r3, r2
 800a856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	4313      	orrs	r3, r2
 800a86a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a86c:	4a0f      	ldr	r2, [pc, #60]	; (800a8ac <HAL_GPIO_Init+0x304>)
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	3301      	adds	r3, #1
 800a876:	61fb      	str	r3, [r7, #28]
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	2b0f      	cmp	r3, #15
 800a87c:	f67f aea2 	bls.w	800a5c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	3724      	adds	r7, #36	; 0x24
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	40023800 	.word	0x40023800
 800a894:	40013800 	.word	0x40013800
 800a898:	40020000 	.word	0x40020000
 800a89c:	40020400 	.word	0x40020400
 800a8a0:	40020800 	.word	0x40020800
 800a8a4:	40020c00 	.word	0x40020c00
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	40013c00 	.word	0x40013c00

0800a8b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691a      	ldr	r2, [r3, #16]
 800a8c0:	887b      	ldrh	r3, [r7, #2]
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	73fb      	strb	r3, [r7, #15]
 800a8cc:	e001      	b.n	800a8d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	807b      	strh	r3, [r7, #2]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a8f0:	787b      	ldrb	r3, [r7, #1]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8f6:	887a      	ldrh	r2, [r7, #2]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a8fc:	e003      	b.n	800a906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a8fe:	887b      	ldrh	r3, [r7, #2]
 800a900:	041a      	lsls	r2, r3, #16
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	619a      	str	r2, [r3, #24]
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a912:	b480      	push	{r7}
 800a914:	b085      	sub	sp, #20
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a924:	887a      	ldrh	r2, [r7, #2]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4013      	ands	r3, r2
 800a92a:	041a      	lsls	r2, r3, #16
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	43d9      	mvns	r1, r3
 800a930:	887b      	ldrh	r3, [r7, #2]
 800a932:	400b      	ands	r3, r1
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	619a      	str	r2, [r3, #24]
}
 800a93a:	bf00      	nop
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
	...

0800a948 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a952:	4b08      	ldr	r3, [pc, #32]	; (800a974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a954:	695a      	ldr	r2, [r3, #20]
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	4013      	ands	r3, r2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d006      	beq.n	800a96c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a95e:	4a05      	ldr	r2, [pc, #20]	; (800a974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a964:	88fb      	ldrh	r3, [r7, #6]
 800a966:	4618      	mov	r0, r3
 800a968:	f7fb f862 	bl	8005a30 <HAL_GPIO_EXTI_Callback>
  }
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	40013c00 	.word	0x40013c00

0800a978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e12b      	b.n	800abe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fa fe14 	bl	80055cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2224      	movs	r2, #36	; 0x24
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f022 0201 	bic.w	r2, r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a9dc:	f003 fcf0 	bl	800e3c0 <HAL_RCC_GetPCLK1Freq>
 800a9e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	4a81      	ldr	r2, [pc, #516]	; (800abec <HAL_I2C_Init+0x274>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d807      	bhi.n	800a9fc <HAL_I2C_Init+0x84>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4a80      	ldr	r2, [pc, #512]	; (800abf0 <HAL_I2C_Init+0x278>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	bf94      	ite	ls
 800a9f4:	2301      	movls	r3, #1
 800a9f6:	2300      	movhi	r3, #0
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	e006      	b.n	800aa0a <HAL_I2C_Init+0x92>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4a7d      	ldr	r2, [pc, #500]	; (800abf4 <HAL_I2C_Init+0x27c>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	bf94      	ite	ls
 800aa04:	2301      	movls	r3, #1
 800aa06:	2300      	movhi	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e0e7      	b.n	800abe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4a78      	ldr	r2, [pc, #480]	; (800abf8 <HAL_I2C_Init+0x280>)
 800aa16:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1a:	0c9b      	lsrs	r3, r3, #18
 800aa1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	4a6a      	ldr	r2, [pc, #424]	; (800abec <HAL_I2C_Init+0x274>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d802      	bhi.n	800aa4c <HAL_I2C_Init+0xd4>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	e009      	b.n	800aa60 <HAL_I2C_Init+0xe8>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa52:	fb02 f303 	mul.w	r3, r2, r3
 800aa56:	4a69      	ldr	r2, [pc, #420]	; (800abfc <HAL_I2C_Init+0x284>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	099b      	lsrs	r3, r3, #6
 800aa5e:	3301      	adds	r3, #1
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	430b      	orrs	r3, r1
 800aa66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aa72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	495c      	ldr	r1, [pc, #368]	; (800abec <HAL_I2C_Init+0x274>)
 800aa7c:	428b      	cmp	r3, r1
 800aa7e:	d819      	bhi.n	800aab4 <HAL_I2C_Init+0x13c>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	1e59      	subs	r1, r3, #1
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa8e:	1c59      	adds	r1, r3, #1
 800aa90:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aa94:	400b      	ands	r3, r1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <HAL_I2C_Init+0x138>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1e59      	subs	r1, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	fbb1 f3f3 	udiv	r3, r1, r3
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaae:	e051      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800aab0:	2304      	movs	r3, #4
 800aab2:	e04f      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d111      	bne.n	800aae0 <HAL_I2C_Init+0x168>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	1e58      	subs	r0, r3, #1
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6859      	ldr	r1, [r3, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	440b      	add	r3, r1
 800aaca:	fbb0 f3f3 	udiv	r3, r0, r3
 800aace:	3301      	adds	r3, #1
 800aad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bf0c      	ite	eq
 800aad8:	2301      	moveq	r3, #1
 800aada:	2300      	movne	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	e012      	b.n	800ab06 <HAL_I2C_Init+0x18e>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	1e58      	subs	r0, r3, #1
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6859      	ldr	r1, [r3, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	440b      	add	r3, r1
 800aaee:	0099      	lsls	r1, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bf0c      	ite	eq
 800ab00:	2301      	moveq	r3, #1
 800ab02:	2300      	movne	r3, #0
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <HAL_I2C_Init+0x196>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e022      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10e      	bne.n	800ab34 <HAL_I2C_Init+0x1bc>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	1e58      	subs	r0, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6859      	ldr	r1, [r3, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	440b      	add	r3, r1
 800ab24:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab28:	3301      	adds	r3, #1
 800ab2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab32:	e00f      	b.n	800ab54 <HAL_I2C_Init+0x1dc>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	1e58      	subs	r0, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6859      	ldr	r1, [r3, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	0099      	lsls	r1, r3, #2
 800ab44:	440b      	add	r3, r1
 800ab46:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	6809      	ldr	r1, [r1, #0]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69da      	ldr	r2, [r3, #28]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ab82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	6911      	ldr	r1, [r2, #16]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68d2      	ldr	r2, [r2, #12]
 800ab8e:	4311      	orrs	r1, r2
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	430b      	orrs	r3, r1
 800ab96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695a      	ldr	r2, [r3, #20]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	431a      	orrs	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	430a      	orrs	r2, r1
 800abb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0201 	orr.w	r2, r2, #1
 800abc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	000186a0 	.word	0x000186a0
 800abf0:	001e847f 	.word	0x001e847f
 800abf4:	003d08ff 	.word	0x003d08ff
 800abf8:	431bde83 	.word	0x431bde83
 800abfc:	10624dd3 	.word	0x10624dd3

0800ac00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	817b      	strh	r3, [r7, #10]
 800ac10:	4613      	mov	r3, r2
 800ac12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac14:	f7fe fee8 	bl	80099e8 <HAL_GetTick>
 800ac18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b20      	cmp	r3, #32
 800ac24:	f040 80e0 	bne.w	800ade8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	2319      	movs	r3, #25
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4970      	ldr	r1, [pc, #448]	; (800adf4 <HAL_I2C_Master_Transmit+0x1f4>)
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f002 fd7a 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e0d3      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_I2C_Master_Transmit+0x50>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e0cc      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ea>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d007      	beq.n	800ac76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f042 0201 	orr.w	r2, r2, #1
 800ac74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2221      	movs	r2, #33	; 0x21
 800ac8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2210      	movs	r2, #16
 800ac92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	893a      	ldrh	r2, [r7, #8]
 800aca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acac:	b29a      	uxth	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	4a50      	ldr	r2, [pc, #320]	; (800adf8 <HAL_I2C_Master_Transmit+0x1f8>)
 800acb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800acb8:	8979      	ldrh	r1, [r7, #10]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	6a3a      	ldr	r2, [r7, #32]
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f002 f9be 	bl	800d040 <I2C_MasterRequestWrite>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e08d      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acce:	2300      	movs	r3, #0
 800acd0:	613b      	str	r3, [r7, #16]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	613b      	str	r3, [r7, #16]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ace4:	e066      	b.n	800adb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	6a39      	ldr	r1, [r7, #32]
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f002 fdf4 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00d      	beq.n	800ad12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d107      	bne.n	800ad0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e06b      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	781a      	ldrb	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b04      	cmp	r3, #4
 800ad4e:	d11b      	bne.n	800ad88 <HAL_I2C_Master_Transmit+0x188>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d017      	beq.n	800ad88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	3b01      	subs	r3, #1
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	6a39      	ldr	r1, [r7, #32]
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f002 fde4 	bl	800d95a <I2C_WaitOnBTFFlagUntilTimeout>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00d      	beq.n	800adb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d107      	bne.n	800adb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e01a      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d194      	bne.n	800ace6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2220      	movs	r2, #32
 800add0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	e000      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ade8:	2302      	movs	r3, #2
  }
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	00100002 	.word	0x00100002
 800adf8:	ffff0000 	.word	0xffff0000

0800adfc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08c      	sub	sp, #48	; 0x30
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	607a      	str	r2, [r7, #4]
 800ae06:	461a      	mov	r2, r3
 800ae08:	460b      	mov	r3, r1
 800ae0a:	817b      	strh	r3, [r7, #10]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae10:	f7fe fdea 	bl	80099e8 <HAL_GetTick>
 800ae14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	f040 820b 	bne.w	800b23a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	2319      	movs	r3, #25
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	497c      	ldr	r1, [pc, #496]	; (800b020 <HAL_I2C_Master_Receive+0x224>)
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f002 fc7c 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e1fe      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d101      	bne.n	800ae4c <HAL_I2C_Master_Receive+0x50>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e1f7      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d007      	beq.n	800ae72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f042 0201 	orr.w	r2, r2, #1
 800ae70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2222      	movs	r2, #34	; 0x22
 800ae86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2210      	movs	r2, #16
 800ae8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	893a      	ldrh	r2, [r7, #8]
 800aea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4a5c      	ldr	r2, [pc, #368]	; (800b024 <HAL_I2C_Master_Receive+0x228>)
 800aeb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800aeb4:	8979      	ldrh	r1, [r7, #10]
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f002 f942 	bl	800d144 <I2C_MasterRequestRead>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e1b8      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d113      	bne.n	800aefa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aed2:	2300      	movs	r3, #0
 800aed4:	623b      	str	r3, [r7, #32]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	623b      	str	r3, [r7, #32]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	623b      	str	r3, [r7, #32]
 800aee6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	e18c      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d11b      	bne.n	800af3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af12:	2300      	movs	r3, #0
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	61fb      	str	r3, [r7, #28]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e16c      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d11b      	bne.n	800af7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af62:	2300      	movs	r3, #0
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	61bb      	str	r3, [r7, #24]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	e14c      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	617b      	str	r3, [r7, #20]
 800af9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800afa0:	e138      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	f200 80f1 	bhi.w	800b18e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d123      	bne.n	800affc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f002 fd41 	bl	800da40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e139      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	691a      	ldr	r2, [r3, #16]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	b2d2      	uxtb	r2, r2
 800afd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afe4:	3b01      	subs	r3, #1
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	3b01      	subs	r3, #1
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800affa:	e10b      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b000:	2b02      	cmp	r3, #2
 800b002:	d14e      	bne.n	800b0a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	2200      	movs	r2, #0
 800b00c:	4906      	ldr	r1, [pc, #24]	; (800b028 <HAL_I2C_Master_Receive+0x22c>)
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f002 fb8c 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d008      	beq.n	800b02c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e10e      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
 800b01e:	bf00      	nop
 800b020:	00100002 	.word	0x00100002
 800b024:	ffff0000 	.word	0xffff0000
 800b028:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b03a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	b2d2      	uxtb	r2, r2
 800b048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b058:	3b01      	subs	r3, #1
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	691a      	ldr	r2, [r3, #16]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	b2d2      	uxtb	r2, r2
 800b07a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b096:	b29b      	uxth	r3, r3
 800b098:	3b01      	subs	r3, #1
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b0a0:	e0b8      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	4966      	ldr	r1, [pc, #408]	; (800b244 <HAL_I2C_Master_Receive+0x448>)
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f002 fb3d 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e0bf      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691a      	ldr	r2, [r3, #16]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	2200      	movs	r2, #0
 800b106:	494f      	ldr	r1, [pc, #316]	; (800b244 <HAL_I2C_Master_Receive+0x448>)
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f002 fb0f 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e091      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b144:	3b01      	subs	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b150:	b29b      	uxth	r3, r3
 800b152:	3b01      	subs	r3, #1
 800b154:	b29a      	uxth	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	691a      	ldr	r2, [r3, #16]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b176:	3b01      	subs	r3, #1
 800b178:	b29a      	uxth	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b182:	b29b      	uxth	r3, r3
 800b184:	3b01      	subs	r3, #1
 800b186:	b29a      	uxth	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b18c:	e042      	b.n	800b214 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f002 fc54 	bl	800da40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e04c      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	f003 0304 	and.w	r3, r3, #4
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d118      	bne.n	800b214 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1fe:	3b01      	subs	r3, #1
 800b200:	b29a      	uxth	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	3b01      	subs	r3, #1
 800b20e:	b29a      	uxth	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f47f aec2 	bne.w	800afa2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2220      	movs	r2, #32
 800b222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	e000      	b.n	800b23c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b23a:	2302      	movs	r3, #2
  }
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3728      	adds	r7, #40	; 0x28
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	00010004 	.word	0x00010004

0800b248 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	4608      	mov	r0, r1
 800b252:	4611      	mov	r1, r2
 800b254:	461a      	mov	r2, r3
 800b256:	4603      	mov	r3, r0
 800b258:	817b      	strh	r3, [r7, #10]
 800b25a:	460b      	mov	r3, r1
 800b25c:	813b      	strh	r3, [r7, #8]
 800b25e:	4613      	mov	r3, r2
 800b260:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b262:	f7fe fbc1 	bl	80099e8 <HAL_GetTick>
 800b266:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b20      	cmp	r3, #32
 800b272:	f040 80d9 	bne.w	800b428 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	2319      	movs	r3, #25
 800b27c:	2201      	movs	r2, #1
 800b27e:	496d      	ldr	r1, [pc, #436]	; (800b434 <HAL_I2C_Mem_Write+0x1ec>)
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f002 fa53 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b28c:	2302      	movs	r3, #2
 800b28e:	e0cc      	b.n	800b42a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b296:	2b01      	cmp	r3, #1
 800b298:	d101      	bne.n	800b29e <HAL_I2C_Mem_Write+0x56>
 800b29a:	2302      	movs	r3, #2
 800b29c:	e0c5      	b.n	800b42a <HAL_I2C_Mem_Write+0x1e2>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d007      	beq.n	800b2c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f042 0201 	orr.w	r2, r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2221      	movs	r2, #33	; 0x21
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2240      	movs	r2, #64	; 0x40
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a3a      	ldr	r2, [r7, #32]
 800b2ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4a4d      	ldr	r2, [pc, #308]	; (800b438 <HAL_I2C_Mem_Write+0x1f0>)
 800b304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b306:	88f8      	ldrh	r0, [r7, #6]
 800b308:	893a      	ldrh	r2, [r7, #8]
 800b30a:	8979      	ldrh	r1, [r7, #10]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	4603      	mov	r3, r0
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f001 ffe2 	bl	800d2e0 <I2C_RequestMemoryWrite>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d052      	beq.n	800b3c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e081      	b.n	800b42a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f002 fad4 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00d      	beq.n	800b352 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d107      	bne.n	800b34e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b34c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e06b      	b.n	800b42a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	781a      	ldrb	r2, [r3, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b36c:	3b01      	subs	r3, #1
 800b36e:	b29a      	uxth	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	d11b      	bne.n	800b3c8 <HAL_I2C_Mem_Write+0x180>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b394:	2b00      	cmp	r3, #0
 800b396:	d017      	beq.n	800b3c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1aa      	bne.n	800b326 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f002 fac0 	bl	800d95a <I2C_WaitOnBTFFlagUntilTimeout>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00d      	beq.n	800b3fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d107      	bne.n	800b3f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e016      	b.n	800b42a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b40a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2220      	movs	r2, #32
 800b410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	e000      	b.n	800b42a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b428:	2302      	movs	r3, #2
  }
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	00100002 	.word	0x00100002
 800b438:	ffff0000 	.word	0xffff0000

0800b43c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08c      	sub	sp, #48	; 0x30
 800b440:	af02      	add	r7, sp, #8
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	4608      	mov	r0, r1
 800b446:	4611      	mov	r1, r2
 800b448:	461a      	mov	r2, r3
 800b44a:	4603      	mov	r3, r0
 800b44c:	817b      	strh	r3, [r7, #10]
 800b44e:	460b      	mov	r3, r1
 800b450:	813b      	strh	r3, [r7, #8]
 800b452:	4613      	mov	r3, r2
 800b454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b456:	f7fe fac7 	bl	80099e8 <HAL_GetTick>
 800b45a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b462:	b2db      	uxtb	r3, r3
 800b464:	2b20      	cmp	r3, #32
 800b466:	f040 8208 	bne.w	800b87a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	2319      	movs	r3, #25
 800b470:	2201      	movs	r2, #1
 800b472:	497b      	ldr	r1, [pc, #492]	; (800b660 <HAL_I2C_Mem_Read+0x224>)
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f002 f959 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b480:	2302      	movs	r3, #2
 800b482:	e1fb      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <HAL_I2C_Mem_Read+0x56>
 800b48e:	2302      	movs	r3, #2
 800b490:	e1f4      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d007      	beq.n	800b4b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f042 0201 	orr.w	r2, r2, #1
 800b4b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2222      	movs	r2, #34	; 0x22
 800b4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2240      	movs	r2, #64	; 0x40
 800b4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b4e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4a5b      	ldr	r2, [pc, #364]	; (800b664 <HAL_I2C_Mem_Read+0x228>)
 800b4f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b4fa:	88f8      	ldrh	r0, [r7, #6]
 800b4fc:	893a      	ldrh	r2, [r7, #8]
 800b4fe:	8979      	ldrh	r1, [r7, #10]
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	4603      	mov	r3, r0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f001 ff7e 	bl	800d40c <I2C_RequestMemoryRead>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e1b0      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d113      	bne.n	800b54a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b522:	2300      	movs	r3, #0
 800b524:	623b      	str	r3, [r7, #32]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	623b      	str	r3, [r7, #32]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	623b      	str	r3, [r7, #32]
 800b536:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	e184      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d11b      	bne.n	800b58a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b562:	2300      	movs	r3, #0
 800b564:	61fb      	str	r3, [r7, #28]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	61fb      	str	r3, [r7, #28]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	61fb      	str	r3, [r7, #28]
 800b576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	e164      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d11b      	bne.n	800b5ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	61bb      	str	r3, [r7, #24]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	61bb      	str	r3, [r7, #24]
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	e144      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	617b      	str	r3, [r7, #20]
 800b5de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b5e0:	e138      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	f200 80f1 	bhi.w	800b7ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d123      	bne.n	800b63c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f002 fa21 	bl	800da40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e139      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	691a      	ldr	r2, [r3, #16]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b624:	3b01      	subs	r3, #1
 800b626:	b29a      	uxth	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b630:	b29b      	uxth	r3, r3
 800b632:	3b01      	subs	r3, #1
 800b634:	b29a      	uxth	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b63a:	e10b      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b640:	2b02      	cmp	r3, #2
 800b642:	d14e      	bne.n	800b6e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	2200      	movs	r2, #0
 800b64c:	4906      	ldr	r1, [pc, #24]	; (800b668 <HAL_I2C_Mem_Read+0x22c>)
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f002 f86c 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d008      	beq.n	800b66c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e10e      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
 800b65e:	bf00      	nop
 800b660:	00100002 	.word	0x00100002
 800b664:	ffff0000 	.word	0xffff0000
 800b668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b67a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	691a      	ldr	r2, [r3, #16]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b698:	3b01      	subs	r3, #1
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	691a      	ldr	r2, [r3, #16]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6e0:	e0b8      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4966      	ldr	r1, [pc, #408]	; (800b884 <HAL_I2C_Mem_Read+0x448>)
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f002 f81d 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e0bf      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b70a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	691a      	ldr	r2, [r3, #16]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b716:	b2d2      	uxtb	r2, r2
 800b718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b728:	3b01      	subs	r3, #1
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b734:	b29b      	uxth	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	2200      	movs	r2, #0
 800b746:	494f      	ldr	r1, [pc, #316]	; (800b884 <HAL_I2C_Mem_Read+0x448>)
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f001 ffef 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e091      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691a      	ldr	r2, [r3, #16]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	b2d2      	uxtb	r2, r2
 800b774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b784:	3b01      	subs	r3, #1
 800b786:	b29a      	uxth	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b790:	b29b      	uxth	r3, r3
 800b792:	3b01      	subs	r3, #1
 800b794:	b29a      	uxth	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	691a      	ldr	r2, [r3, #16]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7cc:	e042      	b.n	800b854 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f002 f934 	bl	800da40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e04c      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	691a      	ldr	r2, [r3, #16]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ec:	b2d2      	uxtb	r2, r2
 800b7ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fe:	3b01      	subs	r3, #1
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	3b01      	subs	r3, #1
 800b80e:	b29a      	uxth	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d118      	bne.n	800b854 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83e:	3b01      	subs	r3, #1
 800b840:	b29a      	uxth	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f47f aec2 	bne.w	800b5e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2220      	movs	r2, #32
 800b862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	e000      	b.n	800b87c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b87a:	2302      	movs	r3, #2
  }
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3728      	adds	r7, #40	; 0x28
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	00010004 	.word	0x00010004

0800b888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800b890:	2300      	movs	r3, #0
 800b892:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	2b10      	cmp	r3, #16
 800b8b6:	d003      	beq.n	800b8c0 <HAL_I2C_EV_IRQHandler+0x38>
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	2b40      	cmp	r3, #64	; 0x40
 800b8bc:	f040 80c1 	bne.w	800ba42 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10d      	bne.n	800b8f6 <HAL_I2C_EV_IRQHandler+0x6e>
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b8e0:	d003      	beq.n	800b8ea <HAL_I2C_EV_IRQHandler+0x62>
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b8e8:	d101      	bne.n	800b8ee <HAL_I2C_EV_IRQHandler+0x66>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e000      	b.n	800b8f0 <HAL_I2C_EV_IRQHandler+0x68>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	f000 8132 	beq.w	800bb5a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00c      	beq.n	800b91a <HAL_I2C_EV_IRQHandler+0x92>
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	0a5b      	lsrs	r3, r3, #9
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f002 f91c 	bl	800db4a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fd79 	bl	800c40a <I2C_Master_SB>
 800b918:	e092      	b.n	800ba40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	08db      	lsrs	r3, r3, #3
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	2b00      	cmp	r3, #0
 800b924:	d009      	beq.n	800b93a <HAL_I2C_EV_IRQHandler+0xb2>
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	0a5b      	lsrs	r3, r3, #9
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fdef 	bl	800c516 <I2C_Master_ADD10>
 800b938:	e082      	b.n	800ba40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	085b      	lsrs	r3, r3, #1
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d009      	beq.n	800b95a <HAL_I2C_EV_IRQHandler+0xd2>
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	0a5b      	lsrs	r3, r3, #9
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fe09 	bl	800c56a <I2C_Master_ADDR>
 800b958:	e072      	b.n	800ba40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	089b      	lsrs	r3, r3, #2
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	d03b      	beq.n	800b9de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b974:	f000 80f3 	beq.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	09db      	lsrs	r3, r3, #7
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00f      	beq.n	800b9a4 <HAL_I2C_EV_IRQHandler+0x11c>
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	0a9b      	lsrs	r3, r3, #10
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d009      	beq.n	800b9a4 <HAL_I2C_EV_IRQHandler+0x11c>
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	089b      	lsrs	r3, r3, #2
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d103      	bne.n	800b9a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f9f3 	bl	800bd88 <I2C_MasterTransmit_TXE>
 800b9a2:	e04d      	b.n	800ba40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	089b      	lsrs	r3, r3, #2
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80d6 	beq.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	0a5b      	lsrs	r3, r3, #9
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 80cf 	beq.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	2b21      	cmp	r3, #33	; 0x21
 800b9c4:	d103      	bne.n	800b9ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fa7a 	bl	800bec0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b9cc:	e0c7      	b.n	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	2b40      	cmp	r3, #64	; 0x40
 800b9d2:	f040 80c4 	bne.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fae8 	bl	800bfac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b9dc:	e0bf      	b.n	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ec:	f000 80b7 	beq.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	099b      	lsrs	r3, r3, #6
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00f      	beq.n	800ba1c <HAL_I2C_EV_IRQHandler+0x194>
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	0a9b      	lsrs	r3, r3, #10
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <HAL_I2C_EV_IRQHandler+0x194>
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	089b      	lsrs	r3, r3, #2
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fb5d 	bl	800c0d4 <I2C_MasterReceive_RXNE>
 800ba1a:	e011      	b.n	800ba40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	089b      	lsrs	r3, r3, #2
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 809a 	beq.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	0a5b      	lsrs	r3, r3, #9
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 8093 	beq.w	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fbfc 	bl	800c236 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ba3e:	e08e      	b.n	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
 800ba40:	e08d      	b.n	800bb5e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d004      	beq.n	800ba54 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	61fb      	str	r3, [r7, #28]
 800ba52:	e007      	b.n	800ba64 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d012      	beq.n	800ba96 <HAL_I2C_EV_IRQHandler+0x20e>
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	0a5b      	lsrs	r3, r3, #9
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00c      	beq.n	800ba96 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ba8c:	69b9      	ldr	r1, [r7, #24]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 ffba 	bl	800ca08 <I2C_Slave_ADDR>
 800ba94:	e066      	b.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	091b      	lsrs	r3, r3, #4
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d009      	beq.n	800bab6 <HAL_I2C_EV_IRQHandler+0x22e>
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	0a5b      	lsrs	r3, r3, #9
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fff4 	bl	800ca9c <I2C_Slave_STOPF>
 800bab4:	e056      	b.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b21      	cmp	r3, #33	; 0x21
 800baba:	d002      	beq.n	800bac2 <HAL_I2C_EV_IRQHandler+0x23a>
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	2b29      	cmp	r3, #41	; 0x29
 800bac0:	d125      	bne.n	800bb0e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	09db      	lsrs	r3, r3, #7
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00f      	beq.n	800baee <HAL_I2C_EV_IRQHandler+0x266>
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	0a9b      	lsrs	r3, r3, #10
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d009      	beq.n	800baee <HAL_I2C_EV_IRQHandler+0x266>
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	089b      	lsrs	r3, r3, #2
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d103      	bne.n	800baee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fed0 	bl	800c88c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800baec:	e039      	b.n	800bb62 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	089b      	lsrs	r3, r3, #2
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d033      	beq.n	800bb62 <HAL_I2C_EV_IRQHandler+0x2da>
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	0a5b      	lsrs	r3, r3, #9
 800bafe:	f003 0301 	and.w	r3, r3, #1
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d02d      	beq.n	800bb62 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fefd 	bl	800c906 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bb0c:	e029      	b.n	800bb62 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	099b      	lsrs	r3, r3, #6
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00f      	beq.n	800bb3a <HAL_I2C_EV_IRQHandler+0x2b2>
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	0a9b      	lsrs	r3, r3, #10
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <HAL_I2C_EV_IRQHandler+0x2b2>
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	089b      	lsrs	r3, r3, #2
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d103      	bne.n	800bb3a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 ff08 	bl	800c948 <I2C_SlaveReceive_RXNE>
 800bb38:	e014      	b.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	089b      	lsrs	r3, r3, #2
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00e      	beq.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	0a5b      	lsrs	r3, r3, #9
 800bb4a:	f003 0301 	and.w	r3, r3, #1
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d008      	beq.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 ff36 	bl	800c9c4 <I2C_SlaveReceive_BTF>
 800bb58:	e004      	b.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800bb5a:	bf00      	nop
 800bb5c:	e002      	b.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bb5e:	bf00      	nop
 800bb60:	e000      	b.n	800bb64 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bb62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b08a      	sub	sp, #40	; 0x28
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb8c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	0a1b      	lsrs	r3, r3, #8
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00e      	beq.n	800bbb8 <HAL_I2C_ER_IRQHandler+0x4e>
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	0a1b      	lsrs	r3, r3, #8
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d008      	beq.n	800bbb8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	f043 0301 	orr.w	r3, r3, #1
 800bbac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbb6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	0a5b      	lsrs	r3, r3, #9
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00e      	beq.n	800bbe2 <HAL_I2C_ER_IRQHandler+0x78>
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	0a1b      	lsrs	r3, r3, #8
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d008      	beq.n	800bbe2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	f043 0302 	orr.w	r3, r3, #2
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800bbe0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	0a9b      	lsrs	r3, r3, #10
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d03f      	beq.n	800bc6e <HAL_I2C_ER_IRQHandler+0x104>
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	0a1b      	lsrs	r3, r3, #8
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d039      	beq.n	800bc6e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800bbfa:	7efb      	ldrb	r3, [r7, #27]
 800bbfc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc0c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc12:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800bc14:	7ebb      	ldrb	r3, [r7, #26]
 800bc16:	2b20      	cmp	r3, #32
 800bc18:	d112      	bne.n	800bc40 <HAL_I2C_ER_IRQHandler+0xd6>
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10f      	bne.n	800bc40 <HAL_I2C_ER_IRQHandler+0xd6>
 800bc20:	7cfb      	ldrb	r3, [r7, #19]
 800bc22:	2b21      	cmp	r3, #33	; 0x21
 800bc24:	d008      	beq.n	800bc38 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800bc26:	7cfb      	ldrb	r3, [r7, #19]
 800bc28:	2b29      	cmp	r3, #41	; 0x29
 800bc2a:	d005      	beq.n	800bc38 <HAL_I2C_ER_IRQHandler+0xce>
 800bc2c:	7cfb      	ldrb	r3, [r7, #19]
 800bc2e:	2b28      	cmp	r3, #40	; 0x28
 800bc30:	d106      	bne.n	800bc40 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b21      	cmp	r3, #33	; 0x21
 800bc36:	d103      	bne.n	800bc40 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f001 f85f 	bl	800ccfc <I2C_Slave_AF>
 800bc3e:	e016      	b.n	800bc6e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bc48:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	f043 0304 	orr.w	r3, r3, #4
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bc52:	7efb      	ldrb	r3, [r7, #27]
 800bc54:	2b10      	cmp	r3, #16
 800bc56:	d002      	beq.n	800bc5e <HAL_I2C_ER_IRQHandler+0xf4>
 800bc58:	7efb      	ldrb	r3, [r7, #27]
 800bc5a:	2b40      	cmp	r3, #64	; 0x40
 800bc5c:	d107      	bne.n	800bc6e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc6c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	0adb      	lsrs	r3, r3, #11
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00e      	beq.n	800bc98 <HAL_I2C_ER_IRQHandler+0x12e>
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	0a1b      	lsrs	r3, r3, #8
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d008      	beq.n	800bc98 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	f043 0308 	orr.w	r3, r3, #8
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800bc96:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d008      	beq.n	800bcb0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca4:	431a      	orrs	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f001 f896 	bl	800cddc <I2C_ITError>
  }
}
 800bcb0:	bf00      	nop
 800bcb2:	3728      	adds	r7, #40	; 0x28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
 800bd14:	4613      	mov	r3, r2
 800bd16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d150      	bne.n	800be50 <I2C_MasterTransmit_TXE+0xc8>
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	2b21      	cmp	r3, #33	; 0x21
 800bdb2:	d14d      	bne.n	800be50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b08      	cmp	r3, #8
 800bdb8:	d01d      	beq.n	800bdf6 <I2C_MasterTransmit_TXE+0x6e>
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b20      	cmp	r3, #32
 800bdbe:	d01a      	beq.n	800bdf6 <I2C_MasterTransmit_TXE+0x6e>
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bdc6:	d016      	beq.n	800bdf6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bdd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2211      	movs	r2, #17
 800bddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2220      	movs	r2, #32
 800bdea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff ff62 	bl	800bcb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bdf4:	e060      	b.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800be04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b40      	cmp	r3, #64	; 0x40
 800be2e:	d107      	bne.n	800be40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ff7d 	bl	800bd38 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800be3e:	e03b      	b.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff ff35 	bl	800bcb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800be4e:	e033      	b.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	2b21      	cmp	r3, #33	; 0x21
 800be54:	d005      	beq.n	800be62 <I2C_MasterTransmit_TXE+0xda>
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	2b40      	cmp	r3, #64	; 0x40
 800be5a:	d12d      	bne.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	2b22      	cmp	r3, #34	; 0x22
 800be60:	d12a      	bne.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be66:	b29b      	uxth	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d108      	bne.n	800be7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800be7c:	e01c      	b.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b40      	cmp	r3, #64	; 0x40
 800be88:	d103      	bne.n	800be92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f88e 	bl	800bfac <I2C_MemoryTransmit_TXE_BTF>
}
 800be90:	e012      	b.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	781a      	ldrb	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beac:	b29b      	uxth	r3, r3
 800beae:	3b01      	subs	r3, #1
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800beb6:	e7ff      	b.n	800beb8 <I2C_MasterTransmit_TXE+0x130>
 800beb8:	bf00      	nop
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b21      	cmp	r3, #33	; 0x21
 800bed8:	d164      	bne.n	800bfa4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d012      	beq.n	800bf0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800befe:	b29b      	uxth	r3, r3
 800bf00:	3b01      	subs	r3, #1
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800bf08:	e04c      	b.n	800bfa4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d01d      	beq.n	800bf4c <I2C_MasterTransmit_BTF+0x8c>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b20      	cmp	r3, #32
 800bf14:	d01a      	beq.n	800bf4c <I2C_MasterTransmit_BTF+0x8c>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf1c:	d016      	beq.n	800bf4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bf2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2211      	movs	r2, #17
 800bf32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7ff feb7 	bl	800bcb8 <HAL_I2C_MasterTxCpltCallback>
}
 800bf4a:	e02b      	b.n	800bfa4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bf5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2220      	movs	r2, #32
 800bf76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b40      	cmp	r3, #64	; 0x40
 800bf84:	d107      	bne.n	800bf96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff fed2 	bl	800bd38 <HAL_I2C_MemTxCpltCallback>
}
 800bf94:	e006      	b.n	800bfa4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe8a 	bl	800bcb8 <HAL_I2C_MasterTxCpltCallback>
}
 800bfa4:	bf00      	nop
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d11d      	bne.n	800c000 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d10b      	bne.n	800bfe4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfdc:	1c9a      	adds	r2, r3, #2
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800bfe2:	e073      	b.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	121b      	asrs	r3, r3, #8
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bffe:	e065      	b.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c004:	2b01      	cmp	r3, #1
 800c006:	d10b      	bne.n	800c020 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c01e:	e055      	b.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c024:	2b02      	cmp	r3, #2
 800c026:	d151      	bne.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	2b22      	cmp	r3, #34	; 0x22
 800c02c:	d10d      	bne.n	800c04a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c03c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c048:	e040      	b.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c04e:	b29b      	uxth	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d015      	beq.n	800c080 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	2b21      	cmp	r3, #33	; 0x21
 800c058:	d112      	bne.n	800c080 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c074:	b29b      	uxth	r3, r3
 800c076:	3b01      	subs	r3, #1
 800c078:	b29a      	uxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c07e:	e025      	b.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c084:	b29b      	uxth	r3, r3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d120      	bne.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	2b21      	cmp	r3, #33	; 0x21
 800c08e:	d11d      	bne.n	800c0cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	685a      	ldr	r2, [r3, #4]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c09e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fe36 	bl	800bd38 <HAL_I2C_MemTxCpltCallback>
}
 800c0cc:	bf00      	nop
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b22      	cmp	r3, #34	; 0x22
 800c0e6:	f040 80a2 	bne.w	800c22e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d921      	bls.n	800c13c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	691a      	ldr	r2, [r3, #16]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c102:	b2d2      	uxtb	r2, r2
 800c104:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c114:	b29b      	uxth	r3, r3
 800c116:	3b01      	subs	r3, #1
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c122:	b29b      	uxth	r3, r3
 800c124:	2b03      	cmp	r3, #3
 800c126:	f040 8082 	bne.w	800c22e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c138:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c13a:	e078      	b.n	800c22e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	2b02      	cmp	r3, #2
 800c142:	d074      	beq.n	800c22e <I2C_MasterReceive_RXNE+0x15a>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d002      	beq.n	800c150 <I2C_MasterReceive_RXNE+0x7c>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d16e      	bne.n	800c22e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 fc43 	bl	800d9dc <I2C_WaitOnSTOPRequestThroughIT>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d142      	bne.n	800c1e2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c16a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c17a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	691a      	ldr	r2, [r3, #16]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c186:	b2d2      	uxtb	r2, r2
 800c188:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c198:	b29b      	uxth	r3, r3
 800c19a:	3b01      	subs	r3, #1
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2220      	movs	r2, #32
 800c1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b40      	cmp	r3, #64	; 0x40
 800c1b4:	d10a      	bne.n	800c1cc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff fdc1 	bl	800bd4c <HAL_I2C_MemRxCpltCallback>
}
 800c1ca:	e030      	b.n	800c22e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2212      	movs	r2, #18
 800c1d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff fd76 	bl	800bccc <HAL_I2C_MasterRxCpltCallback>
}
 800c1e0:	e025      	b.n	800c22e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c1f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	691a      	ldr	r2, [r3, #16]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	b2d2      	uxtb	r2, r2
 800c1fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	3b01      	subs	r3, #1
 800c212:	b29a      	uxth	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2220      	movs	r2, #32
 800c21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fd99 	bl	800bd60 <HAL_I2C_ErrorCallback>
}
 800c22e:	bf00      	nop
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c242:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c248:	b29b      	uxth	r3, r3
 800c24a:	2b04      	cmp	r3, #4
 800c24c:	d11b      	bne.n	800c286 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c25c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691a      	ldr	r2, [r3, #16]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	b2d2      	uxtb	r2, r2
 800c26a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	3b01      	subs	r3, #1
 800c27e:	b29a      	uxth	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c284:	e0bd      	b.n	800c402 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d129      	bne.n	800c2e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685a      	ldr	r2, [r3, #4]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c29e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b04      	cmp	r3, #4
 800c2a4:	d00a      	beq.n	800c2bc <I2C_MasterReceive_BTF+0x86>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d007      	beq.n	800c2bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	691a      	ldr	r2, [r3, #16]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	b2d2      	uxtb	r2, r2
 800c2c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c2e2:	e08e      	b.n	800c402 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d176      	bne.n	800c3dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d002      	beq.n	800c2fa <I2C_MasterReceive_BTF+0xc4>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b10      	cmp	r3, #16
 800c2f8:	d108      	bne.n	800c30c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	e019      	b.n	800c340 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d002      	beq.n	800c318 <I2C_MasterReceive_BTF+0xe2>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d108      	bne.n	800c32a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	e00a      	b.n	800c340 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b10      	cmp	r3, #16
 800c32e:	d007      	beq.n	800c340 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c33e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	691a      	ldr	r2, [r3, #16]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3b01      	subs	r3, #1
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	691a      	ldr	r2, [r3, #16]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c378:	1c5a      	adds	r2, r3, #1
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c382:	b29b      	uxth	r3, r3
 800c384:	3b01      	subs	r3, #1
 800c386:	b29a      	uxth	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685a      	ldr	r2, [r3, #4]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c39a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b40      	cmp	r3, #64	; 0x40
 800c3ae:	d10a      	bne.n	800c3c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff fcc4 	bl	800bd4c <HAL_I2C_MemRxCpltCallback>
}
 800c3c4:	e01d      	b.n	800c402 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2212      	movs	r2, #18
 800c3d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff fc79 	bl	800bccc <HAL_I2C_MasterRxCpltCallback>
}
 800c3da:	e012      	b.n	800c402 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	691a      	ldr	r2, [r3, #16]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e6:	b2d2      	uxtb	r2, r2
 800c3e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c402:	bf00      	nop
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b083      	sub	sp, #12
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b40      	cmp	r3, #64	; 0x40
 800c41c:	d117      	bne.n	800c44e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c422:	2b00      	cmp	r3, #0
 800c424:	d109      	bne.n	800c43a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	461a      	mov	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c436:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c438:	e067      	b.n	800c50a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f043 0301 	orr.w	r3, r3, #1
 800c444:	b2da      	uxtb	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	611a      	str	r2, [r3, #16]
}
 800c44c:	e05d      	b.n	800c50a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c456:	d133      	bne.n	800c4c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b21      	cmp	r3, #33	; 0x21
 800c462:	d109      	bne.n	800c478 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c474:	611a      	str	r2, [r3, #16]
 800c476:	e008      	b.n	800c48a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	f043 0301 	orr.w	r3, r3, #1
 800c482:	b2da      	uxtb	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d004      	beq.n	800c49c <I2C_Master_SB+0x92>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d108      	bne.n	800c4ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d032      	beq.n	800c50a <I2C_Master_SB+0x100>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d02d      	beq.n	800c50a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4bc:	605a      	str	r2, [r3, #4]
}
 800c4be:	e024      	b.n	800c50a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10e      	bne.n	800c4e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	11db      	asrs	r3, r3, #7
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	f003 0306 	and.w	r3, r3, #6
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f063 030f 	orn	r3, r3, #15
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	611a      	str	r2, [r3, #16]
}
 800c4e4:	e011      	b.n	800c50a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d10d      	bne.n	800c50a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	11db      	asrs	r3, r3, #7
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 0306 	and.w	r3, r3, #6
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	f063 030e 	orn	r3, r3, #14
 800c502:	b2da      	uxtb	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	611a      	str	r2, [r3, #16]
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c522:	b2da      	uxtb	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d004      	beq.n	800c53c <I2C_Master_ADD10+0x26>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d108      	bne.n	800c54e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00c      	beq.n	800c55e <I2C_Master_ADD10+0x48>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c55c:	605a      	str	r2, [r3, #4]
  }
}
 800c55e:	bf00      	nop
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b091      	sub	sp, #68	; 0x44
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c586:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	2b22      	cmp	r3, #34	; 0x22
 800c592:	f040 8169 	bne.w	800c868 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10f      	bne.n	800c5be <I2C_Master_ADDR+0x54>
 800c59e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5a2:	2b40      	cmp	r3, #64	; 0x40
 800c5a4:	d10b      	bne.n	800c5be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	633b      	str	r3, [r7, #48]	; 0x30
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	633b      	str	r3, [r7, #48]	; 0x30
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	633b      	str	r3, [r7, #48]	; 0x30
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	e160      	b.n	800c880 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d11d      	bne.n	800c602 <I2C_Master_ADDR+0x98>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c5ce:	d118      	bne.n	800c602 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	651a      	str	r2, [r3, #80]	; 0x50
 800c600:	e13e      	b.n	800c880 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c606:	b29b      	uxth	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d113      	bne.n	800c634 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c60c:	2300      	movs	r3, #0
 800c60e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	e115      	b.n	800c860 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c638:	b29b      	uxth	r3, r3
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	f040 808a 	bne.w	800c754 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c646:	d137      	bne.n	800c6b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c656:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c666:	d113      	bne.n	800c690 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c676:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c678:	2300      	movs	r3, #0
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	e0e7      	b.n	800c860 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c690:	2300      	movs	r3, #0
 800c692:	623b      	str	r3, [r7, #32]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	623b      	str	r3, [r7, #32]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	623b      	str	r3, [r7, #32]
 800c6a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	e0d3      	b.n	800c860 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	2b08      	cmp	r3, #8
 800c6bc:	d02e      	beq.n	800c71c <I2C_Master_ADDR+0x1b2>
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	2b20      	cmp	r3, #32
 800c6c2:	d02b      	beq.n	800c71c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c6:	2b12      	cmp	r3, #18
 800c6c8:	d102      	bne.n	800c6d0 <I2C_Master_ADDR+0x166>
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d125      	bne.n	800c71c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d00e      	beq.n	800c6f4 <I2C_Master_ADDR+0x18a>
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d00b      	beq.n	800c6f4 <I2C_Master_ADDR+0x18a>
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	2b10      	cmp	r3, #16
 800c6e0:	d008      	beq.n	800c6f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	e007      	b.n	800c704 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c702:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c704:	2300      	movs	r3, #0
 800c706:	61fb      	str	r3, [r7, #28]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	61fb      	str	r3, [r7, #28]
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	e0a1      	b.n	800c860 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c72a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c72c:	2300      	movs	r3, #0
 800c72e:	61bb      	str	r3, [r7, #24]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	61bb      	str	r3, [r7, #24]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	61bb      	str	r3, [r7, #24]
 800c740:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	e085      	b.n	800c860 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c758:	b29b      	uxth	r3, r3
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d14d      	bne.n	800c7fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	2b04      	cmp	r3, #4
 800c762:	d016      	beq.n	800c792 <I2C_Master_ADDR+0x228>
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	2b02      	cmp	r3, #2
 800c768:	d013      	beq.n	800c792 <I2C_Master_ADDR+0x228>
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	2b10      	cmp	r3, #16
 800c76e:	d010      	beq.n	800c792 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c77e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	e007      	b.n	800c7a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7b0:	d117      	bne.n	800c7e2 <I2C_Master_ADDR+0x278>
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c7b8:	d00b      	beq.n	800c7d2 <I2C_Master_ADDR+0x268>
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d008      	beq.n	800c7d2 <I2C_Master_ADDR+0x268>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	2b08      	cmp	r3, #8
 800c7c4:	d005      	beq.n	800c7d2 <I2C_Master_ADDR+0x268>
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	2b10      	cmp	r3, #16
 800c7ca:	d002      	beq.n	800c7d2 <I2C_Master_ADDR+0x268>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	d107      	bne.n	800c7e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	617b      	str	r3, [r7, #20]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	699b      	ldr	r3, [r3, #24]
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	e032      	b.n	800c860 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c808:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c818:	d117      	bne.n	800c84a <I2C_Master_ADDR+0x2e0>
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c820:	d00b      	beq.n	800c83a <I2C_Master_ADDR+0x2d0>
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	2b01      	cmp	r3, #1
 800c826:	d008      	beq.n	800c83a <I2C_Master_ADDR+0x2d0>
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	2b08      	cmp	r3, #8
 800c82c:	d005      	beq.n	800c83a <I2C_Master_ADDR+0x2d0>
 800c82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c830:	2b10      	cmp	r3, #16
 800c832:	d002      	beq.n	800c83a <I2C_Master_ADDR+0x2d0>
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	2b20      	cmp	r3, #32
 800c838:	d107      	bne.n	800c84a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c848:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c84a:	2300      	movs	r3, #0
 800c84c:	613b      	str	r3, [r7, #16]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	613b      	str	r3, [r7, #16]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	613b      	str	r3, [r7, #16]
 800c85e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800c866:	e00b      	b.n	800c880 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c868:	2300      	movs	r3, #0
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
}
 800c87e:	e7ff      	b.n	800c880 <I2C_Master_ADDR+0x316>
 800c880:	bf00      	nop
 800c882:	3744      	adds	r7, #68	; 0x44
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c89a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d02b      	beq.n	800c8fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8aa:	781a      	ldrb	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d114      	bne.n	800c8fe <I2C_SlaveTransmit_TXE+0x72>
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	2b29      	cmp	r3, #41	; 0x29
 800c8d8:	d111      	bne.n	800c8fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2221      	movs	r2, #33	; 0x21
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2228      	movs	r2, #40	; 0x28
 800c8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff f9f1 	bl	800bce0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c8fe:	bf00      	nop
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c912:	b29b      	uxth	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d011      	beq.n	800c93c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c932:	b29b      	uxth	r3, r3
 800c934:	3b01      	subs	r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c956:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d02c      	beq.n	800c9bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	691a      	ldr	r2, [r3, #16]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96c:	b2d2      	uxtb	r2, r2
 800c96e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c97e:	b29b      	uxth	r3, r3
 800c980:	3b01      	subs	r3, #1
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d114      	bne.n	800c9bc <I2C_SlaveReceive_RXNE+0x74>
 800c992:	7bfb      	ldrb	r3, [r7, #15]
 800c994:	2b2a      	cmp	r3, #42	; 0x2a
 800c996:	d111      	bne.n	800c9bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2222      	movs	r2, #34	; 0x22
 800c9ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2228      	movs	r2, #40	; 0x28
 800c9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff f99c 	bl	800bcf4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c9bc:	bf00      	nop
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d012      	beq.n	800c9fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	691a      	ldr	r2, [r3, #16]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e0:	b2d2      	uxtb	r2, r2
 800c9e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	1c5a      	adds	r2, r3, #1
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c9fc:	bf00      	nop
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ca22:	2b28      	cmp	r3, #40	; 0x28
 800ca24:	d127      	bne.n	800ca76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	089b      	lsrs	r3, r3, #2
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d101      	bne.n	800ca46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800ca42:	2301      	movs	r3, #1
 800ca44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	09db      	lsrs	r3, r3, #7
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d103      	bne.n	800ca5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	81bb      	strh	r3, [r7, #12]
 800ca58:	e002      	b.n	800ca60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800ca68:	89ba      	ldrh	r2, [r7, #12]
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff f94a 	bl	800bd08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ca74:	e00e      	b.n	800ca94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca76:	2300      	movs	r3, #0
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	60bb      	str	r3, [r7, #8]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	60bb      	str	r3, [r7, #8]
 800ca8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caaa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800caba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800cabc:	2300      	movs	r3, #0
 800cabe:	60bb      	str	r3, [r7, #8]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	695b      	ldr	r3, [r3, #20]
 800cac6:	60bb      	str	r3, [r7, #8]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f042 0201 	orr.w	r2, r2, #1
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cae8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800caf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caf8:	d172      	bne.n	800cbe0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
 800cafc:	2b22      	cmp	r3, #34	; 0x22
 800cafe:	d002      	beq.n	800cb06 <I2C_Slave_STOPF+0x6a>
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	2b2a      	cmp	r3, #42	; 0x2a
 800cb04:	d135      	bne.n	800cb72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d005      	beq.n	800cb2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb22:	f043 0204 	orr.w	r2, r3, #4
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fd fc44 	bl	800a3cc <HAL_DMA_GetState>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d049      	beq.n	800cbde <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4e:	4a69      	ldr	r2, [pc, #420]	; (800ccf4 <I2C_Slave_STOPF+0x258>)
 800cb50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fd fa8c 	bl	800a074 <HAL_DMA_Abort_IT>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d03d      	beq.n	800cbde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cb70:	e035      	b.n	800cbde <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	f043 0204 	orr.w	r2, r3, #4
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cba4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fd fc0e 	bl	800a3cc <HAL_DMA_GetState>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d014      	beq.n	800cbe0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbba:	4a4e      	ldr	r2, [pc, #312]	; (800ccf4 <I2C_Slave_STOPF+0x258>)
 800cbbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fd fa56 	bl	800a074 <HAL_DMA_Abort_IT>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d008      	beq.n	800cbe0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cbd8:	4610      	mov	r0, r2
 800cbda:	4798      	blx	r3
 800cbdc:	e000      	b.n	800cbe0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cbde:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d03e      	beq.n	800cc68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	695b      	ldr	r3, [r3, #20]
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d112      	bne.n	800cc1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	691a      	ldr	r2, [r3, #16]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	3b01      	subs	r3, #1
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc28:	2b40      	cmp	r3, #64	; 0x40
 800cc2a:	d112      	bne.n	800cc52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	691a      	ldr	r2, [r3, #16]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	b2d2      	uxtb	r2, r2
 800cc38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	1c5a      	adds	r2, r3, #1
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc60:	f043 0204 	orr.w	r2, r3, #4
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f8b3 	bl	800cddc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800cc76:	e039      	b.n	800ccec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc7c:	d109      	bne.n	800cc92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2228      	movs	r2, #40	; 0x28
 800cc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7ff f831 	bl	800bcf4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b28      	cmp	r3, #40	; 0x28
 800cc9c:	d111      	bne.n	800ccc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <I2C_Slave_STOPF+0x25c>)
 800cca2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2220      	movs	r2, #32
 800ccae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff f832 	bl	800bd24 <HAL_I2C_ListenCpltCallback>
}
 800ccc0:	e014      	b.n	800ccec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc6:	2b22      	cmp	r3, #34	; 0x22
 800ccc8:	d002      	beq.n	800ccd0 <I2C_Slave_STOPF+0x234>
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	2b22      	cmp	r3, #34	; 0x22
 800ccce:	d10d      	bne.n	800ccec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2220      	movs	r2, #32
 800ccda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff f804 	bl	800bcf4 <HAL_I2C_SlaveRxCpltCallback>
}
 800ccec:	bf00      	nop
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	0800d5dd 	.word	0x0800d5dd
 800ccf8:	ffff0000 	.word	0xffff0000

0800ccfc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd0a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2b08      	cmp	r3, #8
 800cd16:	d002      	beq.n	800cd1e <I2C_Slave_AF+0x22>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b20      	cmp	r3, #32
 800cd1c:	d129      	bne.n	800cd72 <I2C_Slave_AF+0x76>
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	2b28      	cmp	r3, #40	; 0x28
 800cd22:	d126      	bne.n	800cd72 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a2c      	ldr	r2, [pc, #176]	; (800cdd8 <I2C_Slave_AF+0xdc>)
 800cd28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	685a      	ldr	r2, [r3, #4]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cd38:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cd42:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd52:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2220      	movs	r2, #32
 800cd5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7fe ffda 	bl	800bd24 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800cd70:	e02e      	b.n	800cdd0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	2b21      	cmp	r3, #33	; 0x21
 800cd76:	d126      	bne.n	800cdc6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a17      	ldr	r2, [pc, #92]	; (800cdd8 <I2C_Slave_AF+0xdc>)
 800cd7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2221      	movs	r2, #33	; 0x21
 800cd82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2220      	movs	r2, #32
 800cd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cda2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cdac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdbc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7fe ff8e 	bl	800bce0 <HAL_I2C_SlaveTxCpltCallback>
}
 800cdc4:	e004      	b.n	800cdd0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cdce:	615a      	str	r2, [r3, #20]
}
 800cdd0:	bf00      	nop
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	ffff0000 	.word	0xffff0000

0800cddc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cdf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	2b10      	cmp	r3, #16
 800cdf8:	d002      	beq.n	800ce00 <I2C_ITError+0x24>
 800cdfa:	7bbb      	ldrb	r3, [r7, #14]
 800cdfc:	2b40      	cmp	r3, #64	; 0x40
 800cdfe:	d10a      	bne.n	800ce16 <I2C_ITError+0x3a>
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	2b22      	cmp	r3, #34	; 0x22
 800ce04:	d107      	bne.n	800ce16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ce14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ce1c:	2b28      	cmp	r3, #40	; 0x28
 800ce1e:	d107      	bne.n	800ce30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2228      	movs	r2, #40	; 0x28
 800ce2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ce2e:	e015      	b.n	800ce5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce3e:	d00a      	beq.n	800ce56 <I2C_ITError+0x7a>
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
 800ce42:	2b60      	cmp	r3, #96	; 0x60
 800ce44:	d007      	beq.n	800ce56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2220      	movs	r2, #32
 800ce4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce6a:	d162      	bne.n	800cf32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ce7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d020      	beq.n	800cecc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8e:	4a6a      	ldr	r2, [pc, #424]	; (800d038 <I2C_ITError+0x25c>)
 800ce90:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fd f8ec 	bl	800a074 <HAL_DMA_Abort_IT>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 8089 	beq.w	800cfb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f022 0201 	bic.w	r2, r2, #1
 800ceb2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cec6:	4610      	mov	r0, r2
 800cec8:	4798      	blx	r3
 800ceca:	e074      	b.n	800cfb6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced0:	4a59      	ldr	r2, [pc, #356]	; (800d038 <I2C_ITError+0x25c>)
 800ced2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fd f8cb 	bl	800a074 <HAL_DMA_Abort_IT>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d068      	beq.n	800cfb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceee:	2b40      	cmp	r3, #64	; 0x40
 800cef0:	d10b      	bne.n	800cf0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	691a      	ldr	r2, [r3, #16]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefc:	b2d2      	uxtb	r2, r2
 800cefe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f022 0201 	bic.w	r2, r2, #1
 800cf18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf2c:	4610      	mov	r0, r2
 800cf2e:	4798      	blx	r3
 800cf30:	e041      	b.n	800cfb6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b60      	cmp	r3, #96	; 0x60
 800cf3c:	d125      	bne.n	800cf8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2220      	movs	r2, #32
 800cf42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf56:	2b40      	cmp	r3, #64	; 0x40
 800cf58:	d10b      	bne.n	800cf72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	691a      	ldr	r2, [r3, #16]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	b2d2      	uxtb	r2, r2
 800cf66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f022 0201 	bic.w	r2, r2, #1
 800cf80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7fe fef6 	bl	800bd74 <HAL_I2C_AbortCpltCallback>
 800cf88:	e015      	b.n	800cfb6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf94:	2b40      	cmp	r3, #64	; 0x40
 800cf96:	d10b      	bne.n	800cfb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	691a      	ldr	r2, [r3, #16]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa2:	b2d2      	uxtb	r2, r2
 800cfa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7fe fed5 	bl	800bd60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10e      	bne.n	800cfe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d104      	bne.n	800cfe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cff2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cffa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b04      	cmp	r3, #4
 800d006:	d113      	bne.n	800d030 <I2C_ITError+0x254>
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	2b28      	cmp	r3, #40	; 0x28
 800d00c:	d110      	bne.n	800d030 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <I2C_ITError+0x260>)
 800d012:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7fe fe7a 	bl	800bd24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d030:	bf00      	nop
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	0800d5dd 	.word	0x0800d5dd
 800d03c:	ffff0000 	.word	0xffff0000

0800d040 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	607a      	str	r2, [r7, #4]
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	460b      	mov	r3, r1
 800d04e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d054:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	2b08      	cmp	r3, #8
 800d05a:	d006      	beq.n	800d06a <I2C_MasterRequestWrite+0x2a>
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d003      	beq.n	800d06a <I2C_MasterRequestWrite+0x2a>
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d068:	d108      	bne.n	800d07c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	e00b      	b.n	800d094 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d080:	2b12      	cmp	r3, #18
 800d082:	d107      	bne.n	800d094 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 fb43 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00d      	beq.n	800d0c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0ba:	d103      	bne.n	800d0c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e035      	b.n	800d134 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0d0:	d108      	bne.n	800d0e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d0d2:	897b      	ldrh	r3, [r7, #10]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d0e0:	611a      	str	r2, [r3, #16]
 800d0e2:	e01b      	b.n	800d11c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d0e4:	897b      	ldrh	r3, [r7, #10]
 800d0e6:	11db      	asrs	r3, r3, #7
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	f003 0306 	and.w	r3, r3, #6
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	f063 030f 	orn	r3, r3, #15
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	490e      	ldr	r1, [pc, #56]	; (800d13c <I2C_MasterRequestWrite+0xfc>)
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f000 fb69 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d001      	beq.n	800d112 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e010      	b.n	800d134 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d112:	897b      	ldrh	r3, [r7, #10]
 800d114:	b2da      	uxtb	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	4907      	ldr	r1, [pc, #28]	; (800d140 <I2C_MasterRequestWrite+0x100>)
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 fb59 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e000      	b.n	800d134 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	00010008 	.word	0x00010008
 800d140:	00010002 	.word	0x00010002

0800d144 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b088      	sub	sp, #32
 800d148:	af02      	add	r7, sp, #8
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	607a      	str	r2, [r7, #4]
 800d14e:	603b      	str	r3, [r7, #0]
 800d150:	460b      	mov	r3, r1
 800d152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d158:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d168:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	2b08      	cmp	r3, #8
 800d16e:	d006      	beq.n	800d17e <I2C_MasterRequestRead+0x3a>
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d003      	beq.n	800d17e <I2C_MasterRequestRead+0x3a>
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d17c:	d108      	bne.n	800d190 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	e00b      	b.n	800d1a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d194:	2b11      	cmp	r3, #17
 800d196:	d107      	bne.n	800d1a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d1a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f000 fab9 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00d      	beq.n	800d1dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ce:	d103      	bne.n	800d1d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	e079      	b.n	800d2d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1e4:	d108      	bne.n	800d1f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d1e6:	897b      	ldrh	r3, [r7, #10]
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f043 0301 	orr.w	r3, r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	611a      	str	r2, [r3, #16]
 800d1f6:	e05f      	b.n	800d2b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d1f8:	897b      	ldrh	r3, [r7, #10]
 800d1fa:	11db      	asrs	r3, r3, #7
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 0306 	and.w	r3, r3, #6
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f063 030f 	orn	r3, r3, #15
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	4930      	ldr	r1, [pc, #192]	; (800d2d8 <I2C_MasterRequestRead+0x194>)
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f000 fadf 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e054      	b.n	800d2d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d226:	897b      	ldrh	r3, [r7, #10]
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	4929      	ldr	r1, [pc, #164]	; (800d2dc <I2C_MasterRequestRead+0x198>)
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 facf 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e044      	b.n	800d2d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d246:	2300      	movs	r3, #0
 800d248:	613b      	str	r3, [r7, #16]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	613b      	str	r3, [r7, #16]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	613b      	str	r3, [r7, #16]
 800d25a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d26a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 fa57 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00d      	beq.n	800d2a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d28e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d292:	d103      	bne.n	800d29c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d29a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e017      	b.n	800d2d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d2a0:	897b      	ldrh	r3, [r7, #10]
 800d2a2:	11db      	asrs	r3, r3, #7
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	f003 0306 	and.w	r3, r3, #6
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	f063 030e 	orn	r3, r3, #14
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	4907      	ldr	r1, [pc, #28]	; (800d2dc <I2C_MasterRequestRead+0x198>)
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f000 fa8b 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e000      	b.n	800d2d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	00010008 	.word	0x00010008
 800d2dc:	00010002 	.word	0x00010002

0800d2e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	817b      	strh	r3, [r7, #10]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	813b      	strh	r3, [r7, #8]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	2200      	movs	r2, #0
 800d312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f000 fa08 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00d      	beq.n	800d33e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d330:	d103      	bne.n	800d33a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d33a:	2303      	movs	r3, #3
 800d33c:	e05f      	b.n	800d3fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d33e:	897b      	ldrh	r3, [r7, #10]
 800d340:	b2db      	uxtb	r3, r3
 800d342:	461a      	mov	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d34c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d350:	6a3a      	ldr	r2, [r7, #32]
 800d352:	492d      	ldr	r1, [pc, #180]	; (800d408 <I2C_RequestMemoryWrite+0x128>)
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 fa40 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	e04c      	b.n	800d3fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d364:	2300      	movs	r3, #0
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	617b      	str	r3, [r7, #20]
 800d378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37c:	6a39      	ldr	r1, [r7, #32]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 faaa 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00d      	beq.n	800d3a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	2b04      	cmp	r3, #4
 800d390:	d107      	bne.n	800d3a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e02b      	b.n	800d3fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d3a6:	88fb      	ldrh	r3, [r7, #6]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d105      	bne.n	800d3b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d3ac:	893b      	ldrh	r3, [r7, #8]
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	611a      	str	r2, [r3, #16]
 800d3b6:	e021      	b.n	800d3fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d3b8:	893b      	ldrh	r3, [r7, #8]
 800d3ba:	0a1b      	lsrs	r3, r3, #8
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c8:	6a39      	ldr	r1, [r7, #32]
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f000 fa84 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00d      	beq.n	800d3f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d107      	bne.n	800d3ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e005      	b.n	800d3fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d3f2:	893b      	ldrh	r3, [r7, #8]
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	00010002 	.word	0x00010002

0800d40c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b088      	sub	sp, #32
 800d410:	af02      	add	r7, sp, #8
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	4608      	mov	r0, r1
 800d416:	4611      	mov	r1, r2
 800d418:	461a      	mov	r2, r3
 800d41a:	4603      	mov	r3, r0
 800d41c:	817b      	strh	r3, [r7, #10]
 800d41e:	460b      	mov	r3, r1
 800d420:	813b      	strh	r3, [r7, #8]
 800d422:	4613      	mov	r3, r2
 800d424:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d434:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f000 f96a 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00d      	beq.n	800d47a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d46c:	d103      	bne.n	800d476 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d476:	2303      	movs	r3, #3
 800d478:	e0aa      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d47a:	897b      	ldrh	r3, [r7, #10]
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	461a      	mov	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	6a3a      	ldr	r2, [r7, #32]
 800d48e:	4952      	ldr	r1, [pc, #328]	; (800d5d8 <I2C_RequestMemoryRead+0x1cc>)
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 f9a2 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	e097      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	617b      	str	r3, [r7, #20]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	617b      	str	r3, [r7, #20]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	617b      	str	r3, [r7, #20]
 800d4b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b8:	6a39      	ldr	r1, [r7, #32]
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 fa0c 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00d      	beq.n	800d4e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ca:	2b04      	cmp	r3, #4
 800d4cc:	d107      	bne.n	800d4de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e076      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d4e2:	88fb      	ldrh	r3, [r7, #6]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d105      	bne.n	800d4f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d4e8:	893b      	ldrh	r3, [r7, #8]
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	611a      	str	r2, [r3, #16]
 800d4f2:	e021      	b.n	800d538 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d4f4:	893b      	ldrh	r3, [r7, #8]
 800d4f6:	0a1b      	lsrs	r3, r3, #8
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d504:	6a39      	ldr	r1, [r7, #32]
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 f9e6 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00d      	beq.n	800d52e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d516:	2b04      	cmp	r3, #4
 800d518:	d107      	bne.n	800d52a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e050      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d52e:	893b      	ldrh	r3, [r7, #8]
 800d530:	b2da      	uxtb	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d53a:	6a39      	ldr	r1, [r7, #32]
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f000 f9cb 	bl	800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00d      	beq.n	800d564 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	d107      	bne.n	800d560 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d55e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e035      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d572:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f000 f8d3 	bl	800d72c <I2C_WaitOnFlagUntilTimeout>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00d      	beq.n	800d5a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d59a:	d103      	bne.n	800d5a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e013      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d5a8:	897b      	ldrh	r3, [r7, #10]
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	f043 0301 	orr.w	r3, r3, #1
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	6a3a      	ldr	r2, [r7, #32]
 800d5bc:	4906      	ldr	r1, [pc, #24]	; (800d5d8 <I2C_RequestMemoryRead+0x1cc>)
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f000 f90b 	bl	800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e000      	b.n	800d5d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3718      	adds	r7, #24
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	00010002 	.word	0x00010002

0800d5dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d5f6:	4b4b      	ldr	r3, [pc, #300]	; (800d724 <I2C_DMAAbort+0x148>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	08db      	lsrs	r3, r3, #3
 800d5fc:	4a4a      	ldr	r2, [pc, #296]	; (800d728 <I2C_DMAAbort+0x14c>)
 800d5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d602:	0a1a      	lsrs	r2, r3, #8
 800d604:	4613      	mov	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	00da      	lsls	r2, r3, #3
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61a:	f043 0220 	orr.w	r2, r3, #32
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800d622:	e00a      	b.n	800d63a <I2C_DMAAbort+0x5e>
    }
    count--;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	3b01      	subs	r3, #1
 800d628:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d638:	d0ea      	beq.n	800d610 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d646:	2200      	movs	r2, #0
 800d648:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d003      	beq.n	800d65a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d656:	2200      	movs	r2, #0
 800d658:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d668:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2200      	movs	r2, #0
 800d66e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67c:	2200      	movs	r2, #0
 800d67e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d684:	2b00      	cmp	r3, #0
 800d686:	d003      	beq.n	800d690 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68c:	2200      	movs	r2, #0
 800d68e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f022 0201 	bic.w	r2, r2, #1
 800d69e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b60      	cmp	r3, #96	; 0x60
 800d6aa:	d10e      	bne.n	800d6ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d6c2:	6978      	ldr	r0, [r7, #20]
 800d6c4:	f7fe fb56 	bl	800bd74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d6c8:	e027      	b.n	800d71a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6ca:	7cfb      	ldrb	r3, [r7, #19]
 800d6cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6d0:	2b28      	cmp	r3, #40	; 0x28
 800d6d2:	d117      	bne.n	800d704 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f042 0201 	orr.w	r2, r2, #1
 800d6e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2228      	movs	r2, #40	; 0x28
 800d6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d702:	e007      	b.n	800d714 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2220      	movs	r2, #32
 800d708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d714:	6978      	ldr	r0, [r7, #20]
 800d716:	f7fe fb23 	bl	800bd60 <HAL_I2C_ErrorCallback>
}
 800d71a:	bf00      	nop
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000034 	.word	0x20000034
 800d728:	14f8b589 	.word	0x14f8b589

0800d72c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	4613      	mov	r3, r2
 800d73a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d73c:	e025      	b.n	800d78a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d744:	d021      	beq.n	800d78a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d746:	f7fc f94f 	bl	80099e8 <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	429a      	cmp	r2, r3
 800d754:	d302      	bcc.n	800d75c <I2C_WaitOnFlagUntilTimeout+0x30>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d116      	bne.n	800d78a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2200      	movs	r2, #0
 800d760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2220      	movs	r2, #32
 800d766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d776:	f043 0220 	orr.w	r2, r3, #32
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e023      	b.n	800d7d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	0c1b      	lsrs	r3, r3, #16
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b01      	cmp	r3, #1
 800d792:	d10d      	bne.n	800d7b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	43da      	mvns	r2, r3
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	4013      	ands	r3, r2
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	bf0c      	ite	eq
 800d7a6:	2301      	moveq	r3, #1
 800d7a8:	2300      	movne	r3, #0
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	e00c      	b.n	800d7ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	699b      	ldr	r3, [r3, #24]
 800d7b6:	43da      	mvns	r2, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	bf0c      	ite	eq
 800d7c2:	2301      	moveq	r3, #1
 800d7c4:	2300      	movne	r3, #0
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d0b6      	beq.n	800d73e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	60f8      	str	r0, [r7, #12]
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	607a      	str	r2, [r7, #4]
 800d7e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d7e8:	e051      	b.n	800d88e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	695b      	ldr	r3, [r3, #20]
 800d7f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7f8:	d123      	bne.n	800d842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d808:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d812:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2220      	movs	r2, #32
 800d81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82e:	f043 0204 	orr.w	r2, r3, #4
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	e046      	b.n	800d8d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d848:	d021      	beq.n	800d88e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d84a:	f7fc f8cd 	bl	80099e8 <HAL_GetTick>
 800d84e:	4602      	mov	r2, r0
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	429a      	cmp	r2, r3
 800d858:	d302      	bcc.n	800d860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d116      	bne.n	800d88e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2220      	movs	r2, #32
 800d86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	f043 0220 	orr.w	r2, r3, #32
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e020      	b.n	800d8d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	0c1b      	lsrs	r3, r3, #16
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b01      	cmp	r3, #1
 800d896:	d10c      	bne.n	800d8b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	43da      	mvns	r2, r3
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bf14      	ite	ne
 800d8aa:	2301      	movne	r3, #1
 800d8ac:	2300      	moveq	r3, #0
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	e00b      	b.n	800d8ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	43da      	mvns	r2, r3
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	4013      	ands	r3, r2
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d18d      	bne.n	800d7ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d8e4:	e02d      	b.n	800d942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f000 f900 	bl	800daec <I2C_IsAcknowledgeFailed>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e02d      	b.n	800d952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fc:	d021      	beq.n	800d942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8fe:	f7fc f873 	bl	80099e8 <HAL_GetTick>
 800d902:	4602      	mov	r2, r0
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	1ad3      	subs	r3, r2, r3
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d302      	bcc.n	800d914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d116      	bne.n	800d942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92e:	f043 0220 	orr.w	r2, r3, #32
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e007      	b.n	800d952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	695b      	ldr	r3, [r3, #20]
 800d948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d94c:	2b80      	cmp	r3, #128	; 0x80
 800d94e:	d1ca      	bne.n	800d8e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d966:	e02d      	b.n	800d9c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f000 f8bf 	bl	800daec <I2C_IsAcknowledgeFailed>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d001      	beq.n	800d978 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	e02d      	b.n	800d9d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97e:	d021      	beq.n	800d9c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d980:	f7fc f832 	bl	80099e8 <HAL_GetTick>
 800d984:	4602      	mov	r2, r0
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d302      	bcc.n	800d996 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d116      	bne.n	800d9c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b0:	f043 0220 	orr.w	r2, r3, #32
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e007      	b.n	800d9d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	f003 0304 	and.w	r3, r3, #4
 800d9ce:	2b04      	cmp	r3, #4
 800d9d0:	d1ca      	bne.n	800d968 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800d9e8:	4b13      	ldr	r3, [pc, #76]	; (800da38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	08db      	lsrs	r3, r3, #3
 800d9ee:	4a13      	ldr	r2, [pc, #76]	; (800da3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800d9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9f4:	0a1a      	lsrs	r2, r3, #8
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4413      	add	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3b01      	subs	r3, #1
 800da02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d107      	bne.n	800da1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0e:	f043 0220 	orr.w	r2, r3, #32
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	e008      	b.n	800da2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da28:	d0e9      	beq.n	800d9fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3714      	adds	r7, #20
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr
 800da38:	20000034 	.word	0x20000034
 800da3c:	14f8b589 	.word	0x14f8b589

0800da40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800da4c:	e042      	b.n	800dad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	695b      	ldr	r3, [r3, #20]
 800da54:	f003 0310 	and.w	r3, r3, #16
 800da58:	2b10      	cmp	r3, #16
 800da5a:	d119      	bne.n	800da90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f06f 0210 	mvn.w	r2, #16
 800da64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2200      	movs	r2, #0
 800da6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2220      	movs	r2, #32
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e029      	b.n	800dae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da90:	f7fb ffaa 	bl	80099e8 <HAL_GetTick>
 800da94:	4602      	mov	r2, r0
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d302      	bcc.n	800daa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d116      	bne.n	800dad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2220      	movs	r2, #32
 800dab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac0:	f043 0220 	orr.w	r2, r3, #32
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dad0:	2301      	movs	r3, #1
 800dad2:	e007      	b.n	800dae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dade:	2b40      	cmp	r3, #64	; 0x40
 800dae0:	d1b5      	bne.n	800da4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dafe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db02:	d11b      	bne.n	800db3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800db0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2220      	movs	r2, #32
 800db18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db28:	f043 0204 	orr.w	r2, r3, #4
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e000      	b.n	800db3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db56:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800db5a:	d103      	bne.n	800db64 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800db62:	e007      	b.n	800db74 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800db6c:	d102      	bne.n	800db74 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2208      	movs	r2, #8
 800db72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	e264      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d075      	beq.n	800dc8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800db9e:	4ba3      	ldr	r3, [pc, #652]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f003 030c 	and.w	r3, r3, #12
 800dba6:	2b04      	cmp	r3, #4
 800dba8:	d00c      	beq.n	800dbc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dbaa:	4ba0      	ldr	r3, [pc, #640]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dbb2:	2b08      	cmp	r3, #8
 800dbb4:	d112      	bne.n	800dbdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dbb6:	4b9d      	ldr	r3, [pc, #628]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbc2:	d10b      	bne.n	800dbdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbc4:	4b99      	ldr	r3, [pc, #612]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d05b      	beq.n	800dc88 <HAL_RCC_OscConfig+0x108>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d157      	bne.n	800dc88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	e23f      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbe4:	d106      	bne.n	800dbf4 <HAL_RCC_OscConfig+0x74>
 800dbe6:	4b91      	ldr	r3, [pc, #580]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a90      	ldr	r2, [pc, #576]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dbec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbf0:	6013      	str	r3, [r2, #0]
 800dbf2:	e01d      	b.n	800dc30 <HAL_RCC_OscConfig+0xb0>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dbfc:	d10c      	bne.n	800dc18 <HAL_RCC_OscConfig+0x98>
 800dbfe:	4b8b      	ldr	r3, [pc, #556]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a8a      	ldr	r2, [pc, #552]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dc08:	6013      	str	r3, [r2, #0]
 800dc0a:	4b88      	ldr	r3, [pc, #544]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a87      	ldr	r2, [pc, #540]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc14:	6013      	str	r3, [r2, #0]
 800dc16:	e00b      	b.n	800dc30 <HAL_RCC_OscConfig+0xb0>
 800dc18:	4b84      	ldr	r3, [pc, #528]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a83      	ldr	r2, [pc, #524]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	4b81      	ldr	r3, [pc, #516]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a80      	ldr	r2, [pc, #512]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d013      	beq.n	800dc60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc38:	f7fb fed6 	bl	80099e8 <HAL_GetTick>
 800dc3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc3e:	e008      	b.n	800dc52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dc40:	f7fb fed2 	bl	80099e8 <HAL_GetTick>
 800dc44:	4602      	mov	r2, r0
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	2b64      	cmp	r3, #100	; 0x64
 800dc4c:	d901      	bls.n	800dc52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	e204      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc52:	4b76      	ldr	r3, [pc, #472]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f0      	beq.n	800dc40 <HAL_RCC_OscConfig+0xc0>
 800dc5e:	e014      	b.n	800dc8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc60:	f7fb fec2 	bl	80099e8 <HAL_GetTick>
 800dc64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dc66:	e008      	b.n	800dc7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dc68:	f7fb febe 	bl	80099e8 <HAL_GetTick>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	2b64      	cmp	r3, #100	; 0x64
 800dc74:	d901      	bls.n	800dc7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e1f0      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dc7a:	4b6c      	ldr	r3, [pc, #432]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1f0      	bne.n	800dc68 <HAL_RCC_OscConfig+0xe8>
 800dc86:	e000      	b.n	800dc8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d063      	beq.n	800dd5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dc96:	4b65      	ldr	r3, [pc, #404]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	f003 030c 	and.w	r3, r3, #12
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00b      	beq.n	800dcba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dca2:	4b62      	ldr	r3, [pc, #392]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dcaa:	2b08      	cmp	r3, #8
 800dcac:	d11c      	bne.n	800dce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dcae:	4b5f      	ldr	r3, [pc, #380]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d116      	bne.n	800dce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dcba:	4b5c      	ldr	r3, [pc, #368]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f003 0302 	and.w	r3, r3, #2
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d005      	beq.n	800dcd2 <HAL_RCC_OscConfig+0x152>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d001      	beq.n	800dcd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e1c4      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcd2:	4b56      	ldr	r3, [pc, #344]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	4952      	ldr	r1, [pc, #328]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dce2:	4313      	orrs	r3, r2
 800dce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dce6:	e03a      	b.n	800dd5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d020      	beq.n	800dd32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dcf0:	4b4f      	ldr	r3, [pc, #316]	; (800de30 <HAL_RCC_OscConfig+0x2b0>)
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf6:	f7fb fe77 	bl	80099e8 <HAL_GetTick>
 800dcfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcfc:	e008      	b.n	800dd10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dcfe:	f7fb fe73 	bl	80099e8 <HAL_GetTick>
 800dd02:	4602      	mov	r2, r0
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d901      	bls.n	800dd10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	e1a5      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd10:	4b46      	ldr	r3, [pc, #280]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 0302 	and.w	r3, r3, #2
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0f0      	beq.n	800dcfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd1c:	4b43      	ldr	r3, [pc, #268]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	691b      	ldr	r3, [r3, #16]
 800dd28:	00db      	lsls	r3, r3, #3
 800dd2a:	4940      	ldr	r1, [pc, #256]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	600b      	str	r3, [r1, #0]
 800dd30:	e015      	b.n	800dd5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dd32:	4b3f      	ldr	r3, [pc, #252]	; (800de30 <HAL_RCC_OscConfig+0x2b0>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd38:	f7fb fe56 	bl	80099e8 <HAL_GetTick>
 800dd3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dd3e:	e008      	b.n	800dd52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dd40:	f7fb fe52 	bl	80099e8 <HAL_GetTick>
 800dd44:	4602      	mov	r2, r0
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d901      	bls.n	800dd52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	e184      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dd52:	4b36      	ldr	r3, [pc, #216]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 0302 	and.w	r3, r3, #2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1f0      	bne.n	800dd40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 0308 	and.w	r3, r3, #8
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d030      	beq.n	800ddcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	695b      	ldr	r3, [r3, #20]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d016      	beq.n	800dda0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd72:	4b30      	ldr	r3, [pc, #192]	; (800de34 <HAL_RCC_OscConfig+0x2b4>)
 800dd74:	2201      	movs	r2, #1
 800dd76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd78:	f7fb fe36 	bl	80099e8 <HAL_GetTick>
 800dd7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd7e:	e008      	b.n	800dd92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dd80:	f7fb fe32 	bl	80099e8 <HAL_GetTick>
 800dd84:	4602      	mov	r2, r0
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d901      	bls.n	800dd92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e164      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd92:	4b26      	ldr	r3, [pc, #152]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dd94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0f0      	beq.n	800dd80 <HAL_RCC_OscConfig+0x200>
 800dd9e:	e015      	b.n	800ddcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dda0:	4b24      	ldr	r3, [pc, #144]	; (800de34 <HAL_RCC_OscConfig+0x2b4>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dda6:	f7fb fe1f 	bl	80099e8 <HAL_GetTick>
 800ddaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ddac:	e008      	b.n	800ddc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ddae:	f7fb fe1b 	bl	80099e8 <HAL_GetTick>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d901      	bls.n	800ddc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e14d      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ddc0:	4b1a      	ldr	r3, [pc, #104]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800ddc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc4:	f003 0302 	and.w	r3, r3, #2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1f0      	bne.n	800ddae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 0304 	and.w	r3, r3, #4
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 80a0 	beq.w	800df1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ddda:	2300      	movs	r3, #0
 800dddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ddde:	4b13      	ldr	r3, [pc, #76]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800dde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10f      	bne.n	800de0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ddea:	2300      	movs	r3, #0
 800ddec:	60bb      	str	r3, [r7, #8]
 800ddee:	4b0f      	ldr	r3, [pc, #60]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800ddf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf2:	4a0e      	ldr	r2, [pc, #56]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800ddf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddf8:	6413      	str	r3, [r2, #64]	; 0x40
 800ddfa:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <HAL_RCC_OscConfig+0x2ac>)
 800ddfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de02:	60bb      	str	r3, [r7, #8]
 800de04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800de06:	2301      	movs	r3, #1
 800de08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de0a:	4b0b      	ldr	r3, [pc, #44]	; (800de38 <HAL_RCC_OscConfig+0x2b8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de12:	2b00      	cmp	r3, #0
 800de14:	d121      	bne.n	800de5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800de16:	4b08      	ldr	r3, [pc, #32]	; (800de38 <HAL_RCC_OscConfig+0x2b8>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a07      	ldr	r2, [pc, #28]	; (800de38 <HAL_RCC_OscConfig+0x2b8>)
 800de1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800de22:	f7fb fde1 	bl	80099e8 <HAL_GetTick>
 800de26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de28:	e011      	b.n	800de4e <HAL_RCC_OscConfig+0x2ce>
 800de2a:	bf00      	nop
 800de2c:	40023800 	.word	0x40023800
 800de30:	42470000 	.word	0x42470000
 800de34:	42470e80 	.word	0x42470e80
 800de38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de3c:	f7fb fdd4 	bl	80099e8 <HAL_GetTick>
 800de40:	4602      	mov	r2, r0
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b02      	cmp	r3, #2
 800de48:	d901      	bls.n	800de4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e106      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de4e:	4b85      	ldr	r3, [pc, #532]	; (800e064 <HAL_RCC_OscConfig+0x4e4>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0f0      	beq.n	800de3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d106      	bne.n	800de70 <HAL_RCC_OscConfig+0x2f0>
 800de62:	4b81      	ldr	r3, [pc, #516]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de66:	4a80      	ldr	r2, [pc, #512]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de68:	f043 0301 	orr.w	r3, r3, #1
 800de6c:	6713      	str	r3, [r2, #112]	; 0x70
 800de6e:	e01c      	b.n	800deaa <HAL_RCC_OscConfig+0x32a>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	2b05      	cmp	r3, #5
 800de76:	d10c      	bne.n	800de92 <HAL_RCC_OscConfig+0x312>
 800de78:	4b7b      	ldr	r3, [pc, #492]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7c:	4a7a      	ldr	r2, [pc, #488]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de7e:	f043 0304 	orr.w	r3, r3, #4
 800de82:	6713      	str	r3, [r2, #112]	; 0x70
 800de84:	4b78      	ldr	r3, [pc, #480]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de88:	4a77      	ldr	r2, [pc, #476]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de8a:	f043 0301 	orr.w	r3, r3, #1
 800de8e:	6713      	str	r3, [r2, #112]	; 0x70
 800de90:	e00b      	b.n	800deaa <HAL_RCC_OscConfig+0x32a>
 800de92:	4b75      	ldr	r3, [pc, #468]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de96:	4a74      	ldr	r2, [pc, #464]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800de98:	f023 0301 	bic.w	r3, r3, #1
 800de9c:	6713      	str	r3, [r2, #112]	; 0x70
 800de9e:	4b72      	ldr	r3, [pc, #456]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800dea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea2:	4a71      	ldr	r2, [pc, #452]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800dea4:	f023 0304 	bic.w	r3, r3, #4
 800dea8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d015      	beq.n	800dede <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800deb2:	f7fb fd99 	bl	80099e8 <HAL_GetTick>
 800deb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800deb8:	e00a      	b.n	800ded0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800deba:	f7fb fd95 	bl	80099e8 <HAL_GetTick>
 800debe:	4602      	mov	r2, r0
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec8:	4293      	cmp	r3, r2
 800deca:	d901      	bls.n	800ded0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800decc:	2303      	movs	r3, #3
 800dece:	e0c5      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ded0:	4b65      	ldr	r3, [pc, #404]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800ded2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded4:	f003 0302 	and.w	r3, r3, #2
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0ee      	beq.n	800deba <HAL_RCC_OscConfig+0x33a>
 800dedc:	e014      	b.n	800df08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dede:	f7fb fd83 	bl	80099e8 <HAL_GetTick>
 800dee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dee4:	e00a      	b.n	800defc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dee6:	f7fb fd7f 	bl	80099e8 <HAL_GetTick>
 800deea:	4602      	mov	r2, r0
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	f241 3288 	movw	r2, #5000	; 0x1388
 800def4:	4293      	cmp	r3, r2
 800def6:	d901      	bls.n	800defc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800def8:	2303      	movs	r3, #3
 800defa:	e0af      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800defc:	4b5a      	ldr	r3, [pc, #360]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800defe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df00:	f003 0302 	and.w	r3, r3, #2
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1ee      	bne.n	800dee6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800df08:	7dfb      	ldrb	r3, [r7, #23]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d105      	bne.n	800df1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800df0e:	4b56      	ldr	r3, [pc, #344]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800df10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df12:	4a55      	ldr	r2, [pc, #340]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800df14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	699b      	ldr	r3, [r3, #24]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f000 809b 	beq.w	800e05a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800df24:	4b50      	ldr	r3, [pc, #320]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	f003 030c 	and.w	r3, r3, #12
 800df2c:	2b08      	cmp	r3, #8
 800df2e:	d05c      	beq.n	800dfea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d141      	bne.n	800dfbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df38:	4b4c      	ldr	r3, [pc, #304]	; (800e06c <HAL_RCC_OscConfig+0x4ec>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df3e:	f7fb fd53 	bl	80099e8 <HAL_GetTick>
 800df42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df44:	e008      	b.n	800df58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df46:	f7fb fd4f 	bl	80099e8 <HAL_GetTick>
 800df4a:	4602      	mov	r2, r0
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	2b02      	cmp	r3, #2
 800df52:	d901      	bls.n	800df58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800df54:	2303      	movs	r3, #3
 800df56:	e081      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df58:	4b43      	ldr	r3, [pc, #268]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1f0      	bne.n	800df46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	69da      	ldr	r2, [r3, #28]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
 800df6c:	431a      	orrs	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df72:	019b      	lsls	r3, r3, #6
 800df74:	431a      	orrs	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7a:	085b      	lsrs	r3, r3, #1
 800df7c:	3b01      	subs	r3, #1
 800df7e:	041b      	lsls	r3, r3, #16
 800df80:	431a      	orrs	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df86:	061b      	lsls	r3, r3, #24
 800df88:	4937      	ldr	r1, [pc, #220]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800df8a:	4313      	orrs	r3, r2
 800df8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df8e:	4b37      	ldr	r3, [pc, #220]	; (800e06c <HAL_RCC_OscConfig+0x4ec>)
 800df90:	2201      	movs	r2, #1
 800df92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df94:	f7fb fd28 	bl	80099e8 <HAL_GetTick>
 800df98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df9a:	e008      	b.n	800dfae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df9c:	f7fb fd24 	bl	80099e8 <HAL_GetTick>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d901      	bls.n	800dfae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	e056      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfae:	4b2e      	ldr	r3, [pc, #184]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d0f0      	beq.n	800df9c <HAL_RCC_OscConfig+0x41c>
 800dfba:	e04e      	b.n	800e05a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dfbc:	4b2b      	ldr	r3, [pc, #172]	; (800e06c <HAL_RCC_OscConfig+0x4ec>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dfc2:	f7fb fd11 	bl	80099e8 <HAL_GetTick>
 800dfc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dfc8:	e008      	b.n	800dfdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dfca:	f7fb fd0d 	bl	80099e8 <HAL_GetTick>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d901      	bls.n	800dfdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e03f      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dfdc:	4b22      	ldr	r3, [pc, #136]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1f0      	bne.n	800dfca <HAL_RCC_OscConfig+0x44a>
 800dfe8:	e037      	b.n	800e05a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d101      	bne.n	800dff6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e032      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dff6:	4b1c      	ldr	r3, [pc, #112]	; (800e068 <HAL_RCC_OscConfig+0x4e8>)
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d028      	beq.n	800e056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e00e:	429a      	cmp	r2, r3
 800e010:	d121      	bne.n	800e056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d11a      	bne.n	800e056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e026:	4013      	ands	r3, r2
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e02c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e02e:	4293      	cmp	r3, r2
 800e030:	d111      	bne.n	800e056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03c:	085b      	lsrs	r3, r3, #1
 800e03e:	3b01      	subs	r3, #1
 800e040:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e042:	429a      	cmp	r2, r3
 800e044:	d107      	bne.n	800e056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e050:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e052:	429a      	cmp	r2, r3
 800e054:	d001      	beq.n	800e05a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e000      	b.n	800e05c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	40007000 	.word	0x40007000
 800e068:	40023800 	.word	0x40023800
 800e06c:	42470060 	.word	0x42470060

0800e070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	e0cc      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e084:	4b68      	ldr	r3, [pc, #416]	; (800e228 <HAL_RCC_ClockConfig+0x1b8>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	683a      	ldr	r2, [r7, #0]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d90c      	bls.n	800e0ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e092:	4b65      	ldr	r3, [pc, #404]	; (800e228 <HAL_RCC_ClockConfig+0x1b8>)
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e09a:	4b63      	ldr	r3, [pc, #396]	; (800e228 <HAL_RCC_ClockConfig+0x1b8>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f003 0307 	and.w	r3, r3, #7
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d001      	beq.n	800e0ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e0b8      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f003 0302 	and.w	r3, r3, #2
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d020      	beq.n	800e0fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 0304 	and.w	r3, r3, #4
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e0c4:	4b59      	ldr	r3, [pc, #356]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	4a58      	ldr	r2, [pc, #352]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e0ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e0ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0308 	and.w	r3, r3, #8
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d005      	beq.n	800e0e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e0dc:	4b53      	ldr	r3, [pc, #332]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	4a52      	ldr	r2, [pc, #328]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e0e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e0e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e0e8:	4b50      	ldr	r3, [pc, #320]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	689b      	ldr	r3, [r3, #8]
 800e0f4:	494d      	ldr	r1, [pc, #308]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	2b00      	cmp	r3, #0
 800e104:	d044      	beq.n	800e190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d107      	bne.n	800e11e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e10e:	4b47      	ldr	r3, [pc, #284]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d119      	bne.n	800e14e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e11a:	2301      	movs	r3, #1
 800e11c:	e07f      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	2b02      	cmp	r3, #2
 800e124:	d003      	beq.n	800e12e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d107      	bne.n	800e13e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e12e:	4b3f      	ldr	r3, [pc, #252]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e136:	2b00      	cmp	r3, #0
 800e138:	d109      	bne.n	800e14e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e06f      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e13e:	4b3b      	ldr	r3, [pc, #236]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0302 	and.w	r3, r3, #2
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e067      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e14e:	4b37      	ldr	r3, [pc, #220]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	f023 0203 	bic.w	r2, r3, #3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	4934      	ldr	r1, [pc, #208]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e15c:	4313      	orrs	r3, r2
 800e15e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e160:	f7fb fc42 	bl	80099e8 <HAL_GetTick>
 800e164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e166:	e00a      	b.n	800e17e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e168:	f7fb fc3e 	bl	80099e8 <HAL_GetTick>
 800e16c:	4602      	mov	r2, r0
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	f241 3288 	movw	r2, #5000	; 0x1388
 800e176:	4293      	cmp	r3, r2
 800e178:	d901      	bls.n	800e17e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e17a:	2303      	movs	r3, #3
 800e17c:	e04f      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e17e:	4b2b      	ldr	r3, [pc, #172]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	f003 020c 	and.w	r2, r3, #12
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d1eb      	bne.n	800e168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e190:	4b25      	ldr	r3, [pc, #148]	; (800e228 <HAL_RCC_ClockConfig+0x1b8>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 0307 	and.w	r3, r3, #7
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d20c      	bcs.n	800e1b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e19e:	4b22      	ldr	r3, [pc, #136]	; (800e228 <HAL_RCC_ClockConfig+0x1b8>)
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	b2d2      	uxtb	r2, r2
 800e1a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1a6:	4b20      	ldr	r3, [pc, #128]	; (800e228 <HAL_RCC_ClockConfig+0x1b8>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 0307 	and.w	r3, r3, #7
 800e1ae:	683a      	ldr	r2, [r7, #0]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d001      	beq.n	800e1b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e032      	b.n	800e21e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d008      	beq.n	800e1d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e1c4:	4b19      	ldr	r3, [pc, #100]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	4916      	ldr	r1, [pc, #88]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f003 0308 	and.w	r3, r3, #8
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d009      	beq.n	800e1f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e1e2:	4b12      	ldr	r3, [pc, #72]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	490e      	ldr	r1, [pc, #56]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e1f6:	f000 f821 	bl	800e23c <HAL_RCC_GetSysClockFreq>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	4b0b      	ldr	r3, [pc, #44]	; (800e22c <HAL_RCC_ClockConfig+0x1bc>)
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	091b      	lsrs	r3, r3, #4
 800e202:	f003 030f 	and.w	r3, r3, #15
 800e206:	490a      	ldr	r1, [pc, #40]	; (800e230 <HAL_RCC_ClockConfig+0x1c0>)
 800e208:	5ccb      	ldrb	r3, [r1, r3]
 800e20a:	fa22 f303 	lsr.w	r3, r2, r3
 800e20e:	4a09      	ldr	r2, [pc, #36]	; (800e234 <HAL_RCC_ClockConfig+0x1c4>)
 800e210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e212:	4b09      	ldr	r3, [pc, #36]	; (800e238 <HAL_RCC_ClockConfig+0x1c8>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4618      	mov	r0, r3
 800e218:	f7fb fba2 	bl	8009960 <HAL_InitTick>

  return HAL_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	40023c00 	.word	0x40023c00
 800e22c:	40023800 	.word	0x40023800
 800e230:	080287e8 	.word	0x080287e8
 800e234:	20000034 	.word	0x20000034
 800e238:	20000038 	.word	0x20000038

0800e23c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e23c:	b5b0      	push	{r4, r5, r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e242:	2100      	movs	r1, #0
 800e244:	6079      	str	r1, [r7, #4]
 800e246:	2100      	movs	r1, #0
 800e248:	60f9      	str	r1, [r7, #12]
 800e24a:	2100      	movs	r1, #0
 800e24c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e24e:	2100      	movs	r1, #0
 800e250:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e252:	4952      	ldr	r1, [pc, #328]	; (800e39c <HAL_RCC_GetSysClockFreq+0x160>)
 800e254:	6889      	ldr	r1, [r1, #8]
 800e256:	f001 010c 	and.w	r1, r1, #12
 800e25a:	2908      	cmp	r1, #8
 800e25c:	d00d      	beq.n	800e27a <HAL_RCC_GetSysClockFreq+0x3e>
 800e25e:	2908      	cmp	r1, #8
 800e260:	f200 8094 	bhi.w	800e38c <HAL_RCC_GetSysClockFreq+0x150>
 800e264:	2900      	cmp	r1, #0
 800e266:	d002      	beq.n	800e26e <HAL_RCC_GetSysClockFreq+0x32>
 800e268:	2904      	cmp	r1, #4
 800e26a:	d003      	beq.n	800e274 <HAL_RCC_GetSysClockFreq+0x38>
 800e26c:	e08e      	b.n	800e38c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e26e:	4b4c      	ldr	r3, [pc, #304]	; (800e3a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800e270:	60bb      	str	r3, [r7, #8]
       break;
 800e272:	e08e      	b.n	800e392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e274:	4b4b      	ldr	r3, [pc, #300]	; (800e3a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800e276:	60bb      	str	r3, [r7, #8]
      break;
 800e278:	e08b      	b.n	800e392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e27a:	4948      	ldr	r1, [pc, #288]	; (800e39c <HAL_RCC_GetSysClockFreq+0x160>)
 800e27c:	6849      	ldr	r1, [r1, #4]
 800e27e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e282:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e284:	4945      	ldr	r1, [pc, #276]	; (800e39c <HAL_RCC_GetSysClockFreq+0x160>)
 800e286:	6849      	ldr	r1, [r1, #4]
 800e288:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e28c:	2900      	cmp	r1, #0
 800e28e:	d024      	beq.n	800e2da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e290:	4942      	ldr	r1, [pc, #264]	; (800e39c <HAL_RCC_GetSysClockFreq+0x160>)
 800e292:	6849      	ldr	r1, [r1, #4]
 800e294:	0989      	lsrs	r1, r1, #6
 800e296:	4608      	mov	r0, r1
 800e298:	f04f 0100 	mov.w	r1, #0
 800e29c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e2a0:	f04f 0500 	mov.w	r5, #0
 800e2a4:	ea00 0204 	and.w	r2, r0, r4
 800e2a8:	ea01 0305 	and.w	r3, r1, r5
 800e2ac:	493d      	ldr	r1, [pc, #244]	; (800e3a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800e2ae:	fb01 f003 	mul.w	r0, r1, r3
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	fb01 f102 	mul.w	r1, r1, r2
 800e2b8:	1844      	adds	r4, r0, r1
 800e2ba:	493a      	ldr	r1, [pc, #232]	; (800e3a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800e2bc:	fba2 0101 	umull	r0, r1, r2, r1
 800e2c0:	1863      	adds	r3, r4, r1
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f04f 0300 	mov.w	r3, #0
 800e2cc:	f7f2 fcf4 	bl	8000cb8 <__aeabi_uldivmod>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	e04a      	b.n	800e370 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e2da:	4b30      	ldr	r3, [pc, #192]	; (800e39c <HAL_RCC_GetSysClockFreq+0x160>)
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	099b      	lsrs	r3, r3, #6
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f04f 0300 	mov.w	r3, #0
 800e2e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e2ea:	f04f 0100 	mov.w	r1, #0
 800e2ee:	ea02 0400 	and.w	r4, r2, r0
 800e2f2:	ea03 0501 	and.w	r5, r3, r1
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f04f 0200 	mov.w	r2, #0
 800e2fe:	f04f 0300 	mov.w	r3, #0
 800e302:	014b      	lsls	r3, r1, #5
 800e304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e308:	0142      	lsls	r2, r0, #5
 800e30a:	4610      	mov	r0, r2
 800e30c:	4619      	mov	r1, r3
 800e30e:	1b00      	subs	r0, r0, r4
 800e310:	eb61 0105 	sbc.w	r1, r1, r5
 800e314:	f04f 0200 	mov.w	r2, #0
 800e318:	f04f 0300 	mov.w	r3, #0
 800e31c:	018b      	lsls	r3, r1, #6
 800e31e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e322:	0182      	lsls	r2, r0, #6
 800e324:	1a12      	subs	r2, r2, r0
 800e326:	eb63 0301 	sbc.w	r3, r3, r1
 800e32a:	f04f 0000 	mov.w	r0, #0
 800e32e:	f04f 0100 	mov.w	r1, #0
 800e332:	00d9      	lsls	r1, r3, #3
 800e334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e338:	00d0      	lsls	r0, r2, #3
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	1912      	adds	r2, r2, r4
 800e340:	eb45 0303 	adc.w	r3, r5, r3
 800e344:	f04f 0000 	mov.w	r0, #0
 800e348:	f04f 0100 	mov.w	r1, #0
 800e34c:	0299      	lsls	r1, r3, #10
 800e34e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e352:	0290      	lsls	r0, r2, #10
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4610      	mov	r0, r2
 800e35a:	4619      	mov	r1, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	461a      	mov	r2, r3
 800e360:	f04f 0300 	mov.w	r3, #0
 800e364:	f7f2 fca8 	bl	8000cb8 <__aeabi_uldivmod>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	4613      	mov	r3, r2
 800e36e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e370:	4b0a      	ldr	r3, [pc, #40]	; (800e39c <HAL_RCC_GetSysClockFreq+0x160>)
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	0c1b      	lsrs	r3, r3, #16
 800e376:	f003 0303 	and.w	r3, r3, #3
 800e37a:	3301      	adds	r3, #1
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	fbb2 f3f3 	udiv	r3, r2, r3
 800e388:	60bb      	str	r3, [r7, #8]
      break;
 800e38a:	e002      	b.n	800e392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e38c:	4b04      	ldr	r3, [pc, #16]	; (800e3a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800e38e:	60bb      	str	r3, [r7, #8]
      break;
 800e390:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e392:	68bb      	ldr	r3, [r7, #8]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bdb0      	pop	{r4, r5, r7, pc}
 800e39c:	40023800 	.word	0x40023800
 800e3a0:	00f42400 	.word	0x00f42400
 800e3a4:	017d7840 	.word	0x017d7840

0800e3a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e3ac:	4b03      	ldr	r3, [pc, #12]	; (800e3bc <HAL_RCC_GetHCLKFreq+0x14>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	20000034 	.word	0x20000034

0800e3c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e3c4:	f7ff fff0 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	0a9b      	lsrs	r3, r3, #10
 800e3d0:	f003 0307 	and.w	r3, r3, #7
 800e3d4:	4903      	ldr	r1, [pc, #12]	; (800e3e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e3d6:	5ccb      	ldrb	r3, [r1, r3]
 800e3d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	40023800 	.word	0x40023800
 800e3e4:	080287f8 	.word	0x080287f8

0800e3e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e3ec:	f7ff ffdc 	bl	800e3a8 <HAL_RCC_GetHCLKFreq>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	4b05      	ldr	r3, [pc, #20]	; (800e408 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	0b5b      	lsrs	r3, r3, #13
 800e3f8:	f003 0307 	and.w	r3, r3, #7
 800e3fc:	4903      	ldr	r1, [pc, #12]	; (800e40c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e3fe:	5ccb      	ldrb	r3, [r1, r3]
 800e400:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e404:	4618      	mov	r0, r3
 800e406:	bd80      	pop	{r7, pc}
 800e408:	40023800 	.word	0x40023800
 800e40c:	080287f8 	.word	0x080287f8

0800e410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	e07b      	b.n	800e51a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e426:	2b00      	cmp	r3, #0
 800e428:	d108      	bne.n	800e43c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e432:	d009      	beq.n	800e448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	61da      	str	r2, [r3, #28]
 800e43a:	e005      	b.n	800e448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fa fd08 	bl	8008e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2202      	movs	r2, #2
 800e46c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e47e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e490:	431a      	orrs	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e49a:	431a      	orrs	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	f003 0302 	and.w	r3, r3, #2
 800e4a4:	431a      	orrs	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	695b      	ldr	r3, [r3, #20]
 800e4aa:	f003 0301 	and.w	r3, r3, #1
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	699b      	ldr	r3, [r3, #24]
 800e4b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	69db      	ldr	r3, [r3, #28]
 800e4be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a1b      	ldr	r3, [r3, #32]
 800e4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4cc:	ea42 0103 	orr.w	r1, r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	430a      	orrs	r2, r1
 800e4de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	0c1b      	lsrs	r3, r3, #16
 800e4e6:	f003 0104 	and.w	r1, r3, #4
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ee:	f003 0210 	and.w	r2, r3, #16
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	430a      	orrs	r2, r1
 800e4f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	69da      	ldr	r2, [r3, #28]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e518:	2300      	movs	r3, #0
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b08c      	sub	sp, #48	; 0x30
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	60b9      	str	r1, [r7, #8]
 800e52c:	607a      	str	r2, [r7, #4]
 800e52e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e530:	2301      	movs	r3, #1
 800e532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e540:	2b01      	cmp	r3, #1
 800e542:	d101      	bne.n	800e548 <HAL_SPI_TransmitReceive+0x26>
 800e544:	2302      	movs	r3, #2
 800e546:	e18a      	b.n	800e85e <HAL_SPI_TransmitReceive+0x33c>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e550:	f7fb fa4a 	bl	80099e8 <HAL_GetTick>
 800e554:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e55c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e566:	887b      	ldrh	r3, [r7, #2]
 800e568:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e56a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d00f      	beq.n	800e592 <HAL_SPI_TransmitReceive+0x70>
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e578:	d107      	bne.n	800e58a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d103      	bne.n	800e58a <HAL_SPI_TransmitReceive+0x68>
 800e582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e586:	2b04      	cmp	r3, #4
 800e588:	d003      	beq.n	800e592 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e58a:	2302      	movs	r3, #2
 800e58c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e590:	e15b      	b.n	800e84a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d005      	beq.n	800e5a4 <HAL_SPI_TransmitReceive+0x82>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <HAL_SPI_TransmitReceive+0x82>
 800e59e:	887b      	ldrh	r3, [r7, #2]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d103      	bne.n	800e5ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e5aa:	e14e      	b.n	800e84a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	2b04      	cmp	r3, #4
 800e5b6:	d003      	beq.n	800e5c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2205      	movs	r2, #5
 800e5bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	887a      	ldrh	r2, [r7, #2]
 800e5d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	887a      	ldrh	r2, [r7, #2]
 800e5d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68ba      	ldr	r2, [r7, #8]
 800e5dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	887a      	ldrh	r2, [r7, #2]
 800e5e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	887a      	ldrh	r2, [r7, #2]
 800e5e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e600:	2b40      	cmp	r3, #64	; 0x40
 800e602:	d007      	beq.n	800e614 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e61c:	d178      	bne.n	800e710 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <HAL_SPI_TransmitReceive+0x10a>
 800e626:	8b7b      	ldrh	r3, [r7, #26]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d166      	bne.n	800e6fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e630:	881a      	ldrh	r2, [r3, #0]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e63c:	1c9a      	adds	r2, r3, #2
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e646:	b29b      	uxth	r3, r3
 800e648:	3b01      	subs	r3, #1
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e650:	e053      	b.n	800e6fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	f003 0302 	and.w	r3, r3, #2
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	d11b      	bne.n	800e698 <HAL_SPI_TransmitReceive+0x176>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e664:	b29b      	uxth	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d016      	beq.n	800e698 <HAL_SPI_TransmitReceive+0x176>
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d113      	bne.n	800e698 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e674:	881a      	ldrh	r2, [r3, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e680:	1c9a      	adds	r2, r3, #2
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	3b01      	subs	r3, #1
 800e68e:	b29a      	uxth	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e694:	2300      	movs	r3, #0
 800e696:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	f003 0301 	and.w	r3, r3, #1
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d119      	bne.n	800e6da <HAL_SPI_TransmitReceive+0x1b8>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d014      	beq.n	800e6da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68da      	ldr	r2, [r3, #12]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ba:	b292      	uxth	r2, r2
 800e6bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c2:	1c9a      	adds	r2, r3, #2
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e6da:	f7fb f985 	bl	80099e8 <HAL_GetTick>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d807      	bhi.n	800e6fa <HAL_SPI_TransmitReceive+0x1d8>
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f0:	d003      	beq.n	800e6fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e6f8:	e0a7      	b.n	800e84a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1a6      	bne.n	800e652 <HAL_SPI_TransmitReceive+0x130>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e708:	b29b      	uxth	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1a1      	bne.n	800e652 <HAL_SPI_TransmitReceive+0x130>
 800e70e:	e07c      	b.n	800e80a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <HAL_SPI_TransmitReceive+0x1fc>
 800e718:	8b7b      	ldrh	r3, [r7, #26]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d16b      	bne.n	800e7f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	330c      	adds	r3, #12
 800e728:	7812      	ldrb	r2, [r2, #0]
 800e72a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	3b01      	subs	r3, #1
 800e73e:	b29a      	uxth	r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e744:	e057      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f003 0302 	and.w	r3, r3, #2
 800e750:	2b02      	cmp	r3, #2
 800e752:	d11c      	bne.n	800e78e <HAL_SPI_TransmitReceive+0x26c>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e758:	b29b      	uxth	r3, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d017      	beq.n	800e78e <HAL_SPI_TransmitReceive+0x26c>
 800e75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e760:	2b01      	cmp	r3, #1
 800e762:	d114      	bne.n	800e78e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	330c      	adds	r3, #12
 800e76e:	7812      	ldrb	r2, [r2, #0]
 800e770:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e780:	b29b      	uxth	r3, r3
 800e782:	3b01      	subs	r3, #1
 800e784:	b29a      	uxth	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e78a:	2300      	movs	r3, #0
 800e78c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	f003 0301 	and.w	r3, r3, #1
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d119      	bne.n	800e7d0 <HAL_SPI_TransmitReceive+0x2ae>
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d014      	beq.n	800e7d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68da      	ldr	r2, [r3, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b0:	b2d2      	uxtb	r2, r2
 800e7b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b8:	1c5a      	adds	r2, r3, #1
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e7d0:	f7fb f90a 	bl	80099e8 <HAL_GetTick>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d803      	bhi.n	800e7e8 <HAL_SPI_TransmitReceive+0x2c6>
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e6:	d102      	bne.n	800e7ee <HAL_SPI_TransmitReceive+0x2cc>
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d103      	bne.n	800e7f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e7f4:	e029      	b.n	800e84a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1a2      	bne.n	800e746 <HAL_SPI_TransmitReceive+0x224>
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d19d      	bne.n	800e746 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e80c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 f9d0 	bl	800ebb4 <SPI_EndRxTxTransaction>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d006      	beq.n	800e828 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2220      	movs	r2, #32
 800e824:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e826:	e010      	b.n	800e84a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10b      	bne.n	800e848 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e830:	2300      	movs	r3, #0
 800e832:	617b      	str	r3, [r7, #20]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	617b      	str	r3, [r7, #20]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	e000      	b.n	800e84a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e848:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2200      	movs	r2, #0
 800e856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e85a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3730      	adds	r7, #48	; 0x30
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	099b      	lsrs	r3, r3, #6
 800e884:	f003 0301 	and.w	r3, r3, #1
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10f      	bne.n	800e8ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00a      	beq.n	800e8ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	099b      	lsrs	r3, r3, #6
 800e89a:	f003 0301 	and.w	r3, r3, #1
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d004      	beq.n	800e8ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	4798      	blx	r3
    return;
 800e8aa:	e0d7      	b.n	800ea5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	085b      	lsrs	r3, r3, #1
 800e8b0:	f003 0301 	and.w	r3, r3, #1
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00a      	beq.n	800e8ce <HAL_SPI_IRQHandler+0x66>
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	09db      	lsrs	r3, r3, #7
 800e8bc:	f003 0301 	and.w	r3, r3, #1
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	4798      	blx	r3
    return;
 800e8cc:	e0c6      	b.n	800ea5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	095b      	lsrs	r3, r3, #5
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10c      	bne.n	800e8f4 <HAL_SPI_IRQHandler+0x8c>
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	099b      	lsrs	r3, r3, #6
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	0a1b      	lsrs	r3, r3, #8
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 80b4 	beq.w	800ea5c <HAL_SPI_IRQHandler+0x1f4>
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	095b      	lsrs	r3, r3, #5
 800e8f8:	f003 0301 	and.w	r3, r3, #1
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f000 80ad 	beq.w	800ea5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	099b      	lsrs	r3, r3, #6
 800e906:	f003 0301 	and.w	r3, r3, #1
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d023      	beq.n	800e956 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e914:	b2db      	uxtb	r3, r3
 800e916:	2b03      	cmp	r3, #3
 800e918:	d011      	beq.n	800e93e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e91e:	f043 0204 	orr.w	r2, r3, #4
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e926:	2300      	movs	r3, #0
 800e928:	617b      	str	r3, [r7, #20]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	617b      	str	r3, [r7, #20]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	e00b      	b.n	800e956 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e93e:	2300      	movs	r3, #0
 800e940:	613b      	str	r3, [r7, #16]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	613b      	str	r3, [r7, #16]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	613b      	str	r3, [r7, #16]
 800e952:	693b      	ldr	r3, [r7, #16]
        return;
 800e954:	e082      	b.n	800ea5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	095b      	lsrs	r3, r3, #5
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d014      	beq.n	800e98c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e966:	f043 0201 	orr.w	r2, r3, #1
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e96e:	2300      	movs	r3, #0
 800e970:	60fb      	str	r3, [r7, #12]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	60fb      	str	r3, [r7, #12]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	0a1b      	lsrs	r3, r3, #8
 800e990:	f003 0301 	and.w	r3, r3, #1
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00c      	beq.n	800e9b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e99c:	f043 0208 	orr.w	r2, r3, #8
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	60bb      	str	r3, [r7, #8]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	60bb      	str	r3, [r7, #8]
 800e9b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d04f      	beq.n	800ea5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	685a      	ldr	r2, [r3, #4]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e9c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	f003 0302 	and.w	r3, r3, #2
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d104      	bne.n	800e9e6 <HAL_SPI_IRQHandler+0x17e>
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	f003 0301 	and.w	r3, r3, #1
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d034      	beq.n	800ea50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	685a      	ldr	r2, [r3, #4]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f022 0203 	bic.w	r2, r2, #3
 800e9f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d011      	beq.n	800ea22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea02:	4a18      	ldr	r2, [pc, #96]	; (800ea64 <HAL_SPI_IRQHandler+0x1fc>)
 800ea04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fb fb32 	bl	800a074 <HAL_DMA_Abort_IT>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d016      	beq.n	800ea58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea2e:	4a0d      	ldr	r2, [pc, #52]	; (800ea64 <HAL_SPI_IRQHandler+0x1fc>)
 800ea30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb fb1c 	bl	800a074 <HAL_DMA_Abort_IT>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00a      	beq.n	800ea58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800ea4e:	e003      	b.n	800ea58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f809 	bl	800ea68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ea56:	e000      	b.n	800ea5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ea58:	bf00      	nop
    return;
 800ea5a:	bf00      	nop
  }
}
 800ea5c:	3720      	adds	r7, #32
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	0800ea7d 	.word	0x0800ea7d

0800ea68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ea70:	bf00      	nop
 800ea72:	370c      	adds	r7, #12
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr

0800ea7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2200      	movs	r2, #0
 800ea94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff ffe6 	bl	800ea68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea9c:	bf00      	nop
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b088      	sub	sp, #32
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	603b      	str	r3, [r7, #0]
 800eab0:	4613      	mov	r3, r2
 800eab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eab4:	f7fa ff98 	bl	80099e8 <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabc:	1a9b      	subs	r3, r3, r2
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	4413      	add	r3, r2
 800eac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eac4:	f7fa ff90 	bl	80099e8 <HAL_GetTick>
 800eac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eaca:	4b39      	ldr	r3, [pc, #228]	; (800ebb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	015b      	lsls	r3, r3, #5
 800ead0:	0d1b      	lsrs	r3, r3, #20
 800ead2:	69fa      	ldr	r2, [r7, #28]
 800ead4:	fb02 f303 	mul.w	r3, r2, r3
 800ead8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eada:	e054      	b.n	800eb86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae2:	d050      	beq.n	800eb86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eae4:	f7fa ff80 	bl	80099e8 <HAL_GetTick>
 800eae8:	4602      	mov	r2, r0
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	69fa      	ldr	r2, [r7, #28]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d902      	bls.n	800eafa <SPI_WaitFlagStateUntilTimeout+0x56>
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d13d      	bne.n	800eb76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eb08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb12:	d111      	bne.n	800eb38 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb1c:	d004      	beq.n	800eb28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb26:	d107      	bne.n	800eb38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb40:	d10f      	bne.n	800eb62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800eb72:	2303      	movs	r3, #3
 800eb74:	e017      	b.n	800eba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	689a      	ldr	r2, [r3, #8]
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	4013      	ands	r3, r2
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	bf0c      	ite	eq
 800eb96:	2301      	moveq	r3, #1
 800eb98:	2300      	movne	r3, #0
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d19b      	bne.n	800eadc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3720      	adds	r7, #32
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20000034 	.word	0x20000034

0800ebb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af02      	add	r7, sp, #8
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ebc0:	4b1b      	ldr	r3, [pc, #108]	; (800ec30 <SPI_EndRxTxTransaction+0x7c>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a1b      	ldr	r2, [pc, #108]	; (800ec34 <SPI_EndRxTxTransaction+0x80>)
 800ebc6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebca:	0d5b      	lsrs	r3, r3, #21
 800ebcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ebd0:	fb02 f303 	mul.w	r3, r2, r3
 800ebd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebde:	d112      	bne.n	800ec06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2180      	movs	r1, #128	; 0x80
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f7ff ff5a 	bl	800eaa4 <SPI_WaitFlagStateUntilTimeout>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d016      	beq.n	800ec24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebfa:	f043 0220 	orr.w	r2, r3, #32
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ec02:	2303      	movs	r3, #3
 800ec04:	e00f      	b.n	800ec26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00a      	beq.n	800ec22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec1c:	2b80      	cmp	r3, #128	; 0x80
 800ec1e:	d0f2      	beq.n	800ec06 <SPI_EndRxTxTransaction+0x52>
 800ec20:	e000      	b.n	800ec24 <SPI_EndRxTxTransaction+0x70>
        break;
 800ec22:	bf00      	nop
  }

  return HAL_OK;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20000034 	.word	0x20000034
 800ec34:	165e9f81 	.word	0x165e9f81

0800ec38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d101      	bne.n	800ec4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec46:	2301      	movs	r3, #1
 800ec48:	e041      	b.n	800ecce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d106      	bne.n	800ec64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7fa fb74 	bl	800934c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2202      	movs	r2, #2
 800ec68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4619      	mov	r1, r3
 800ec76:	4610      	mov	r0, r2
 800ec78:	f000 f9f0 	bl	800f05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d001      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ecec:	2301      	movs	r3, #1
 800ecee:	e044      	b.n	800ed7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	68da      	ldr	r2, [r3, #12]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f042 0201 	orr.w	r2, r2, #1
 800ed06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a1e      	ldr	r2, [pc, #120]	; (800ed88 <HAL_TIM_Base_Start_IT+0xb0>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d018      	beq.n	800ed44 <HAL_TIM_Base_Start_IT+0x6c>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed1a:	d013      	beq.n	800ed44 <HAL_TIM_Base_Start_IT+0x6c>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a1a      	ldr	r2, [pc, #104]	; (800ed8c <HAL_TIM_Base_Start_IT+0xb4>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d00e      	beq.n	800ed44 <HAL_TIM_Base_Start_IT+0x6c>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a19      	ldr	r2, [pc, #100]	; (800ed90 <HAL_TIM_Base_Start_IT+0xb8>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d009      	beq.n	800ed44 <HAL_TIM_Base_Start_IT+0x6c>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a17      	ldr	r2, [pc, #92]	; (800ed94 <HAL_TIM_Base_Start_IT+0xbc>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d004      	beq.n	800ed44 <HAL_TIM_Base_Start_IT+0x6c>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a16      	ldr	r2, [pc, #88]	; (800ed98 <HAL_TIM_Base_Start_IT+0xc0>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d111      	bne.n	800ed68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	f003 0307 	and.w	r3, r3, #7
 800ed4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2b06      	cmp	r3, #6
 800ed54:	d010      	beq.n	800ed78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f042 0201 	orr.w	r2, r2, #1
 800ed64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed66:	e007      	b.n	800ed78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f042 0201 	orr.w	r2, r2, #1
 800ed76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3714      	adds	r7, #20
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	40010000 	.word	0x40010000
 800ed8c:	40000400 	.word	0x40000400
 800ed90:	40000800 	.word	0x40000800
 800ed94:	40000c00 	.word	0x40000c00
 800ed98:	40014000 	.word	0x40014000

0800ed9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68da      	ldr	r2, [r3, #12]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f022 0201 	bic.w	r2, r2, #1
 800edb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6a1a      	ldr	r2, [r3, #32]
 800edba:	f241 1311 	movw	r3, #4369	; 0x1111
 800edbe:	4013      	ands	r3, r2
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10f      	bne.n	800ede4 <HAL_TIM_Base_Stop_IT+0x48>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6a1a      	ldr	r2, [r3, #32]
 800edca:	f240 4344 	movw	r3, #1092	; 0x444
 800edce:	4013      	ands	r3, r2
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d107      	bne.n	800ede4 <HAL_TIM_Base_Stop_IT+0x48>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 0201 	bic.w	r2, r2, #1
 800ede2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	f003 0302 	and.w	r3, r3, #2
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d122      	bne.n	800ee56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	f003 0302 	and.w	r3, r3, #2
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d11b      	bne.n	800ee56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f06f 0202 	mvn.w	r2, #2
 800ee26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	f003 0303 	and.w	r3, r3, #3
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 f8ee 	bl	800f01e <HAL_TIM_IC_CaptureCallback>
 800ee42:	e005      	b.n	800ee50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f8e0 	bl	800f00a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f8f1 	bl	800f032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	f003 0304 	and.w	r3, r3, #4
 800ee60:	2b04      	cmp	r3, #4
 800ee62:	d122      	bne.n	800eeaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	2b04      	cmp	r3, #4
 800ee70:	d11b      	bne.n	800eeaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f06f 0204 	mvn.w	r2, #4
 800ee7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d003      	beq.n	800ee98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 f8c4 	bl	800f01e <HAL_TIM_IC_CaptureCallback>
 800ee96:	e005      	b.n	800eea4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 f8b6 	bl	800f00a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f8c7 	bl	800f032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	f003 0308 	and.w	r3, r3, #8
 800eeb4:	2b08      	cmp	r3, #8
 800eeb6:	d122      	bne.n	800eefe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	f003 0308 	and.w	r3, r3, #8
 800eec2:	2b08      	cmp	r3, #8
 800eec4:	d11b      	bne.n	800eefe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f06f 0208 	mvn.w	r2, #8
 800eece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2204      	movs	r2, #4
 800eed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	f003 0303 	and.w	r3, r3, #3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d003      	beq.n	800eeec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 f89a 	bl	800f01e <HAL_TIM_IC_CaptureCallback>
 800eeea:	e005      	b.n	800eef8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 f88c 	bl	800f00a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 f89d 	bl	800f032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	f003 0310 	and.w	r3, r3, #16
 800ef08:	2b10      	cmp	r3, #16
 800ef0a:	d122      	bne.n	800ef52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	f003 0310 	and.w	r3, r3, #16
 800ef16:	2b10      	cmp	r3, #16
 800ef18:	d11b      	bne.n	800ef52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f06f 0210 	mvn.w	r2, #16
 800ef22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2208      	movs	r2, #8
 800ef28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	69db      	ldr	r3, [r3, #28]
 800ef30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d003      	beq.n	800ef40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f870 	bl	800f01e <HAL_TIM_IC_CaptureCallback>
 800ef3e:	e005      	b.n	800ef4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f862 	bl	800f00a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 f873 	bl	800f032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d10e      	bne.n	800ef7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d107      	bne.n	800ef7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f06f 0201 	mvn.w	r2, #1
 800ef76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7f6 fd23 	bl	80059c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef88:	2b80      	cmp	r3, #128	; 0x80
 800ef8a:	d10e      	bne.n	800efaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef96:	2b80      	cmp	r3, #128	; 0x80
 800ef98:	d107      	bne.n	800efaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800efa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 f8e3 	bl	800f170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efb4:	2b40      	cmp	r3, #64	; 0x40
 800efb6:	d10e      	bne.n	800efd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc2:	2b40      	cmp	r3, #64	; 0x40
 800efc4:	d107      	bne.n	800efd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 f838 	bl	800f046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	f003 0320 	and.w	r3, r3, #32
 800efe0:	2b20      	cmp	r3, #32
 800efe2:	d10e      	bne.n	800f002 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	f003 0320 	and.w	r3, r3, #32
 800efee:	2b20      	cmp	r3, #32
 800eff0:	d107      	bne.n	800f002 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f06f 0220 	mvn.w	r2, #32
 800effa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 f8ad 	bl	800f15c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f002:	bf00      	nop
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f012:	bf00      	nop
 800f014:	370c      	adds	r7, #12
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr

0800f01e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f01e:	b480      	push	{r7}
 800f020:	b083      	sub	sp, #12
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f026:	bf00      	nop
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f032:	b480      	push	{r7}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f03a:	bf00      	nop
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f046:	b480      	push	{r7}
 800f048:	b083      	sub	sp, #12
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f04e:	bf00      	nop
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
	...

0800f05c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a34      	ldr	r2, [pc, #208]	; (800f140 <TIM_Base_SetConfig+0xe4>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d00f      	beq.n	800f094 <TIM_Base_SetConfig+0x38>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f07a:	d00b      	beq.n	800f094 <TIM_Base_SetConfig+0x38>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a31      	ldr	r2, [pc, #196]	; (800f144 <TIM_Base_SetConfig+0xe8>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d007      	beq.n	800f094 <TIM_Base_SetConfig+0x38>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a30      	ldr	r2, [pc, #192]	; (800f148 <TIM_Base_SetConfig+0xec>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d003      	beq.n	800f094 <TIM_Base_SetConfig+0x38>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a2f      	ldr	r2, [pc, #188]	; (800f14c <TIM_Base_SetConfig+0xf0>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d108      	bne.n	800f0a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a25      	ldr	r2, [pc, #148]	; (800f140 <TIM_Base_SetConfig+0xe4>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d01b      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0b4:	d017      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a22      	ldr	r2, [pc, #136]	; (800f144 <TIM_Base_SetConfig+0xe8>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d013      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a21      	ldr	r2, [pc, #132]	; (800f148 <TIM_Base_SetConfig+0xec>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d00f      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a20      	ldr	r2, [pc, #128]	; (800f14c <TIM_Base_SetConfig+0xf0>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00b      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a1f      	ldr	r2, [pc, #124]	; (800f150 <TIM_Base_SetConfig+0xf4>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d007      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a1e      	ldr	r2, [pc, #120]	; (800f154 <TIM_Base_SetConfig+0xf8>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d003      	beq.n	800f0e6 <TIM_Base_SetConfig+0x8a>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a1d      	ldr	r2, [pc, #116]	; (800f158 <TIM_Base_SetConfig+0xfc>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d108      	bne.n	800f0f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	689a      	ldr	r2, [r3, #8]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a08      	ldr	r2, [pc, #32]	; (800f140 <TIM_Base_SetConfig+0xe4>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d103      	bne.n	800f12c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	691a      	ldr	r2, [r3, #16]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	615a      	str	r2, [r3, #20]
}
 800f132:	bf00      	nop
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	40010000 	.word	0x40010000
 800f144:	40000400 	.word	0x40000400
 800f148:	40000800 	.word	0x40000800
 800f14c:	40000c00 	.word	0x40000c00
 800f150:	40014000 	.word	0x40014000
 800f154:	40014400 	.word	0x40014400
 800f158:	40014800 	.word	0x40014800

0800f15c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	e03f      	b.n	800f216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d106      	bne.n	800f1b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7fa fae0 	bl	8009770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2224      	movs	r2, #36	; 0x24
 800f1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	68da      	ldr	r2, [r3, #12]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f1c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 ff53 	bl	8010074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	691a      	ldr	r2, [r3, #16]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f1dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	695a      	ldr	r2, [r3, #20]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f1ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2220      	movs	r2, #32
 800f208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2220      	movs	r2, #32
 800f210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
	...

0800f220 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b08c      	sub	sp, #48	; 0x30
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f234:	b2db      	uxtb	r3, r3
 800f236:	2b20      	cmp	r3, #32
 800f238:	d165      	bne.n	800f306 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <HAL_UART_Transmit_DMA+0x26>
 800f240:	88fb      	ldrh	r3, [r7, #6]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	e05e      	b.n	800f308 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f250:	2b01      	cmp	r3, #1
 800f252:	d101      	bne.n	800f258 <HAL_UART_Transmit_DMA+0x38>
 800f254:	2302      	movs	r3, #2
 800f256:	e057      	b.n	800f308 <HAL_UART_Transmit_DMA+0xe8>
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2201      	movs	r2, #1
 800f25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	88fa      	ldrh	r2, [r7, #6]
 800f26a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	88fa      	ldrh	r2, [r7, #6]
 800f270:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2221      	movs	r2, #33	; 0x21
 800f27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f284:	4a22      	ldr	r2, [pc, #136]	; (800f310 <HAL_UART_Transmit_DMA+0xf0>)
 800f286:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f28c:	4a21      	ldr	r2, [pc, #132]	; (800f314 <HAL_UART_Transmit_DMA+0xf4>)
 800f28e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f294:	4a20      	ldr	r2, [pc, #128]	; (800f318 <HAL_UART_Transmit_DMA+0xf8>)
 800f296:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f29c:	2200      	movs	r2, #0
 800f29e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800f2a0:	f107 0308 	add.w	r3, r7, #8
 800f2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	6819      	ldr	r1, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	88fb      	ldrh	r3, [r7, #6]
 800f2b8:	f7fa fe14 	bl	8009ee4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f2c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	3314      	adds	r3, #20
 800f2d4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	e853 3f00 	ldrex	r3, [r3]
 800f2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	3314      	adds	r3, #20
 800f2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2ee:	627a      	str	r2, [r7, #36]	; 0x24
 800f2f0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f2:	6a39      	ldr	r1, [r7, #32]
 800f2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2f6:	e841 2300 	strex	r3, r2, [r1]
 800f2fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1e5      	bne.n	800f2ce <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	e000      	b.n	800f308 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f306:	2302      	movs	r3, #2
  }
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3730      	adds	r7, #48	; 0x30
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	0800f915 	.word	0x0800f915
 800f314:	0800f9af 	.word	0x0800f9af
 800f318:	0800fb27 	.word	0x0800fb27

0800f31c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	4613      	mov	r3, r2
 800f328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b20      	cmp	r3, #32
 800f334:	d11d      	bne.n	800f372 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <HAL_UART_Receive_DMA+0x26>
 800f33c:	88fb      	ldrh	r3, [r7, #6]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e016      	b.n	800f374 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d101      	bne.n	800f354 <HAL_UART_Receive_DMA+0x38>
 800f350:	2302      	movs	r3, #2
 800f352:	e00f      	b.n	800f374 <HAL_UART_Receive_DMA+0x58>
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2200      	movs	r2, #0
 800f360:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f362:	88fb      	ldrh	r3, [r7, #6]
 800f364:	461a      	mov	r2, r3
 800f366:	68b9      	ldr	r1, [r7, #8]
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f000 fc27 	bl	800fbbc <UART_Start_Receive_DMA>
 800f36e:	4603      	mov	r3, r0
 800f370:	e000      	b.n	800f374 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f372:	2302      	movs	r3, #2
  }
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b0ba      	sub	sp, #232	; 0xe8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	695b      	ldr	r3, [r3, #20]
 800f39e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3b2:	f003 030f 	and.w	r3, r3, #15
 800f3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f3ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d10f      	bne.n	800f3e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3c6:	f003 0320 	and.w	r3, r3, #32
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d009      	beq.n	800f3e2 <HAL_UART_IRQHandler+0x66>
 800f3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3d2:	f003 0320 	and.w	r3, r3, #32
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d003      	beq.n	800f3e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fd8f 	bl	800fefe <UART_Receive_IT>
      return;
 800f3e0:	e256      	b.n	800f890 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f3e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f000 80de 	beq.w	800f5a8 <HAL_UART_IRQHandler+0x22c>
 800f3ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3f0:	f003 0301 	and.w	r3, r3, #1
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d106      	bne.n	800f406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f400:	2b00      	cmp	r3, #0
 800f402:	f000 80d1 	beq.w	800f5a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00b      	beq.n	800f42a <HAL_UART_IRQHandler+0xae>
 800f412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d005      	beq.n	800f42a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f422:	f043 0201 	orr.w	r2, r3, #1
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f42e:	f003 0304 	and.w	r3, r3, #4
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00b      	beq.n	800f44e <HAL_UART_IRQHandler+0xd2>
 800f436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f43a:	f003 0301 	and.w	r3, r3, #1
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d005      	beq.n	800f44e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f446:	f043 0202 	orr.w	r2, r3, #2
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00b      	beq.n	800f472 <HAL_UART_IRQHandler+0xf6>
 800f45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f45e:	f003 0301 	and.w	r3, r3, #1
 800f462:	2b00      	cmp	r3, #0
 800f464:	d005      	beq.n	800f472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46a:	f043 0204 	orr.w	r2, r3, #4
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f476:	f003 0308 	and.w	r3, r3, #8
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d011      	beq.n	800f4a2 <HAL_UART_IRQHandler+0x126>
 800f47e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f482:	f003 0320 	and.w	r3, r3, #32
 800f486:	2b00      	cmp	r3, #0
 800f488:	d105      	bne.n	800f496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f48a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b00      	cmp	r3, #0
 800f494:	d005      	beq.n	800f4a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49a:	f043 0208 	orr.w	r2, r3, #8
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 81ed 	beq.w	800f886 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d008      	beq.n	800f4ca <HAL_UART_IRQHandler+0x14e>
 800f4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4bc:	f003 0320 	and.w	r3, r3, #32
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fd1a 	bl	800fefe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4d4:	2b40      	cmp	r3, #64	; 0x40
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2301      	moveq	r3, #1
 800f4da:	2300      	movne	r3, #0
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e6:	f003 0308 	and.w	r3, r3, #8
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d103      	bne.n	800f4f6 <HAL_UART_IRQHandler+0x17a>
 800f4ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d04f      	beq.n	800f596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fc22 	bl	800fd40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f506:	2b40      	cmp	r3, #64	; 0x40
 800f508:	d141      	bne.n	800f58e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	3314      	adds	r3, #20
 800f510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f518:	e853 3f00 	ldrex	r3, [r3]
 800f51c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	3314      	adds	r3, #20
 800f532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f53a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f546:	e841 2300 	strex	r3, r2, [r1]
 800f54a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f54e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1d9      	bne.n	800f50a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d013      	beq.n	800f586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f562:	4a7d      	ldr	r2, [pc, #500]	; (800f758 <HAL_UART_IRQHandler+0x3dc>)
 800f564:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fa fd82 	bl	800a074 <HAL_DMA_Abort_IT>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d016      	beq.n	800f5a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f580:	4610      	mov	r0, r2
 800f582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f584:	e00e      	b.n	800f5a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f9ae 	bl	800f8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f58c:	e00a      	b.n	800f5a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 f9aa 	bl	800f8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f594:	e006      	b.n	800f5a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f9a6 	bl	800f8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800f5a2:	e170      	b.n	800f886 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5a4:	bf00      	nop
    return;
 800f5a6:	e16e      	b.n	800f886 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	f040 814a 	bne.w	800f846 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5b6:	f003 0310 	and.w	r3, r3, #16
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 8143 	beq.w	800f846 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5c4:	f003 0310 	and.w	r3, r3, #16
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 813c 	beq.w	800f846 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	60bb      	str	r3, [r7, #8]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	60bb      	str	r3, [r7, #8]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	60bb      	str	r3, [r7, #8]
 800f5e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ee:	2b40      	cmp	r3, #64	; 0x40
 800f5f0:	f040 80b4 	bne.w	800f75c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f604:	2b00      	cmp	r3, #0
 800f606:	f000 8140 	beq.w	800f88a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f60e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f612:	429a      	cmp	r2, r3
 800f614:	f080 8139 	bcs.w	800f88a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f61e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f624:	69db      	ldr	r3, [r3, #28]
 800f626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f62a:	f000 8088 	beq.w	800f73e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	330c      	adds	r3, #12
 800f634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f63c:	e853 3f00 	ldrex	r3, [r3]
 800f640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f64c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	330c      	adds	r3, #12
 800f656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f65a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f65e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f662:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f66a:	e841 2300 	strex	r3, r2, [r1]
 800f66e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1d9      	bne.n	800f62e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	3314      	adds	r3, #20
 800f680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f684:	e853 3f00 	ldrex	r3, [r3]
 800f688:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f68a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f68c:	f023 0301 	bic.w	r3, r3, #1
 800f690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3314      	adds	r3, #20
 800f69a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f69e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f6a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f6a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6aa:	e841 2300 	strex	r3, r2, [r1]
 800f6ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f6b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1e1      	bne.n	800f67a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3314      	adds	r3, #20
 800f6bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6c0:	e853 3f00 	ldrex	r3, [r3]
 800f6c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f6c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3314      	adds	r3, #20
 800f6d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f6da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f6dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f6e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f6e2:	e841 2300 	strex	r3, r2, [r1]
 800f6e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f6e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1e3      	bne.n	800f6b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	330c      	adds	r3, #12
 800f702:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f706:	e853 3f00 	ldrex	r3, [r3]
 800f70a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f70e:	f023 0310 	bic.w	r3, r3, #16
 800f712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	330c      	adds	r3, #12
 800f71c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f720:	65ba      	str	r2, [r7, #88]	; 0x58
 800f722:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f728:	e841 2300 	strex	r3, r2, [r1]
 800f72c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1e3      	bne.n	800f6fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fa fc2b 	bl	8009f94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f746:	b29b      	uxth	r3, r3
 800f748:	1ad3      	subs	r3, r2, r3
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	4619      	mov	r1, r3
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f8d4 	bl	800f8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f754:	e099      	b.n	800f88a <HAL_UART_IRQHandler+0x50e>
 800f756:	bf00      	nop
 800f758:	0800fe07 	.word	0x0800fe07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f764:	b29b      	uxth	r3, r3
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f770:	b29b      	uxth	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	f000 808b 	beq.w	800f88e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800f778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f000 8086 	beq.w	800f88e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	330c      	adds	r3, #12
 800f788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78c:	e853 3f00 	ldrex	r3, [r3]
 800f790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	330c      	adds	r3, #12
 800f7a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f7a6:	647a      	str	r2, [r7, #68]	; 0x44
 800f7a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7ae:	e841 2300 	strex	r3, r2, [r1]
 800f7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1e3      	bne.n	800f782 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3314      	adds	r3, #20
 800f7c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	e853 3f00 	ldrex	r3, [r3]
 800f7c8:	623b      	str	r3, [r7, #32]
   return(result);
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	f023 0301 	bic.w	r3, r3, #1
 800f7d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3314      	adds	r3, #20
 800f7da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f7de:	633a      	str	r2, [r7, #48]	; 0x30
 800f7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7e6:	e841 2300 	strex	r3, r2, [r1]
 800f7ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1e3      	bne.n	800f7ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2220      	movs	r2, #32
 800f7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	330c      	adds	r3, #12
 800f806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	e853 3f00 	ldrex	r3, [r3]
 800f80e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 0310 	bic.w	r3, r3, #16
 800f816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	330c      	adds	r3, #12
 800f820:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f824:	61fa      	str	r2, [r7, #28]
 800f826:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f828:	69b9      	ldr	r1, [r7, #24]
 800f82a:	69fa      	ldr	r2, [r7, #28]
 800f82c:	e841 2300 	strex	r3, r2, [r1]
 800f830:	617b      	str	r3, [r7, #20]
   return(result);
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1e3      	bne.n	800f800 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f85c 	bl	800f8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f844:	e023      	b.n	800f88e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d009      	beq.n	800f866 <HAL_UART_IRQHandler+0x4ea>
 800f852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d003      	beq.n	800f866 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fae5 	bl	800fe2e <UART_Transmit_IT>
    return;
 800f864:	e014      	b.n	800f890 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00e      	beq.n	800f890 <HAL_UART_IRQHandler+0x514>
 800f872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d008      	beq.n	800f890 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 fb25 	bl	800fece <UART_EndTransmit_IT>
    return;
 800f884:	e004      	b.n	800f890 <HAL_UART_IRQHandler+0x514>
    return;
 800f886:	bf00      	nop
 800f888:	e002      	b.n	800f890 <HAL_UART_IRQHandler+0x514>
      return;
 800f88a:	bf00      	nop
 800f88c:	e000      	b.n	800f890 <HAL_UART_IRQHandler+0x514>
      return;
 800f88e:	bf00      	nop
  }
}
 800f890:	37e8      	adds	r7, #232	; 0xe8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop

0800f898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	460b      	mov	r3, r1
 800f906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f908:	bf00      	nop
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b090      	sub	sp, #64	; 0x40
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f920:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d137      	bne.n	800f9a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f932:	2200      	movs	r2, #0
 800f934:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	3314      	adds	r3, #20
 800f93c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	e853 3f00 	ldrex	r3, [r3]
 800f944:	623b      	str	r3, [r7, #32]
   return(result);
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f94c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3314      	adds	r3, #20
 800f954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f956:	633a      	str	r2, [r7, #48]	; 0x30
 800f958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f95a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f95e:	e841 2300 	strex	r3, r2, [r1]
 800f962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f966:	2b00      	cmp	r3, #0
 800f968:	d1e5      	bne.n	800f936 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	330c      	adds	r3, #12
 800f970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	e853 3f00 	ldrex	r3, [r3]
 800f978:	60fb      	str	r3, [r7, #12]
   return(result);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
 800f982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	330c      	adds	r3, #12
 800f988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f98a:	61fa      	str	r2, [r7, #28]
 800f98c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98e:	69b9      	ldr	r1, [r7, #24]
 800f990:	69fa      	ldr	r2, [r7, #28]
 800f992:	e841 2300 	strex	r3, r2, [r1]
 800f996:	617b      	str	r3, [r7, #20]
   return(result);
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1e5      	bne.n	800f96a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f99e:	e002      	b.n	800f9a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f9a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f9a2:	f7ff ff79 	bl	800f898 <HAL_UART_TxCpltCallback>
}
 800f9a6:	bf00      	nop
 800f9a8:	3740      	adds	r7, #64	; 0x40
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b084      	sub	sp, #16
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7ff ff75 	bl	800f8ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b09c      	sub	sp, #112	; 0x70
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d172      	bne.n	800facc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	330c      	adds	r3, #12
 800f9f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9f6:	e853 3f00 	ldrex	r3, [r3]
 800f9fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa02:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	330c      	adds	r3, #12
 800fa0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa0c:	65ba      	str	r2, [r7, #88]	; 0x58
 800fa0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa14:	e841 2300 	strex	r3, r2, [r1]
 800fa18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1e5      	bne.n	800f9ec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	3314      	adds	r3, #20
 800fa26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2a:	e853 3f00 	ldrex	r3, [r3]
 800fa2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa32:	f023 0301 	bic.w	r3, r3, #1
 800fa36:	667b      	str	r3, [r7, #100]	; 0x64
 800fa38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	3314      	adds	r3, #20
 800fa3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa40:	647a      	str	r2, [r7, #68]	; 0x44
 800fa42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa48:	e841 2300 	strex	r3, r2, [r1]
 800fa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1e5      	bne.n	800fa20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	3314      	adds	r3, #20
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	e853 3f00 	ldrex	r3, [r3]
 800fa62:	623b      	str	r3, [r7, #32]
   return(result);
 800fa64:	6a3b      	ldr	r3, [r7, #32]
 800fa66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa6a:	663b      	str	r3, [r7, #96]	; 0x60
 800fa6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	3314      	adds	r3, #20
 800fa72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa74:	633a      	str	r2, [r7, #48]	; 0x30
 800fa76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa7c:	e841 2300 	strex	r3, r2, [r1]
 800fa80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1e5      	bne.n	800fa54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa8a:	2220      	movs	r2, #32
 800fa8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d119      	bne.n	800facc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	330c      	adds	r3, #12
 800fa9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	e853 3f00 	ldrex	r3, [r3]
 800faa6:	60fb      	str	r3, [r7, #12]
   return(result);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f023 0310 	bic.w	r3, r3, #16
 800faae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	330c      	adds	r3, #12
 800fab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fab8:	61fa      	str	r2, [r7, #28]
 800faba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabc:	69b9      	ldr	r1, [r7, #24]
 800fabe:	69fa      	ldr	r2, [r7, #28]
 800fac0:	e841 2300 	strex	r3, r2, [r1]
 800fac4:	617b      	str	r3, [r7, #20]
   return(result);
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1e5      	bne.n	800fa98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800facc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800face:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d106      	bne.n	800fae2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fad6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fad8:	4619      	mov	r1, r3
 800fada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fadc:	f7ff ff0e 	bl	800f8fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fae0:	e002      	b.n	800fae8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800fae2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fae4:	f7ff feec 	bl	800f8c0 <HAL_UART_RxCpltCallback>
}
 800fae8:	bf00      	nop
 800faea:	3770      	adds	r7, #112	; 0x70
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d108      	bne.n	800fb18 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fb0a:	085b      	lsrs	r3, r3, #1
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	4619      	mov	r1, r3
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff fef3 	bl	800f8fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb16:	e002      	b.n	800fb1e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7ff fedb 	bl	800f8d4 <HAL_UART_RxHalfCpltCallback>
}
 800fb1e:	bf00      	nop
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b084      	sub	sp, #16
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb42:	2b80      	cmp	r3, #128	; 0x80
 800fb44:	bf0c      	ite	eq
 800fb46:	2301      	moveq	r3, #1
 800fb48:	2300      	movne	r3, #0
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	2b21      	cmp	r3, #33	; 0x21
 800fb58:	d108      	bne.n	800fb6c <UART_DMAError+0x46>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d005      	beq.n	800fb6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	2200      	movs	r2, #0
 800fb64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800fb66:	68b8      	ldr	r0, [r7, #8]
 800fb68:	f000 f8c2 	bl	800fcf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb76:	2b40      	cmp	r3, #64	; 0x40
 800fb78:	bf0c      	ite	eq
 800fb7a:	2301      	moveq	r3, #1
 800fb7c:	2300      	movne	r3, #0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b22      	cmp	r3, #34	; 0x22
 800fb8c:	d108      	bne.n	800fba0 <UART_DMAError+0x7a>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d005      	beq.n	800fba0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	2200      	movs	r2, #0
 800fb98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fb9a:	68b8      	ldr	r0, [r7, #8]
 800fb9c:	f000 f8d0 	bl	800fd40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba4:	f043 0210 	orr.w	r2, r3, #16
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fbac:	68b8      	ldr	r0, [r7, #8]
 800fbae:	f7ff fe9b 	bl	800f8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbb2:	bf00      	nop
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
	...

0800fbbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b098      	sub	sp, #96	; 0x60
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	60b9      	str	r1, [r7, #8]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	88fa      	ldrh	r2, [r7, #6]
 800fbd4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2222      	movs	r2, #34	; 0x22
 800fbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe8:	4a3e      	ldr	r2, [pc, #248]	; (800fce4 <UART_Start_Receive_DMA+0x128>)
 800fbea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf0:	4a3d      	ldr	r2, [pc, #244]	; (800fce8 <UART_Start_Receive_DMA+0x12c>)
 800fbf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf8:	4a3c      	ldr	r2, [pc, #240]	; (800fcec <UART_Start_Receive_DMA+0x130>)
 800fbfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc00:	2200      	movs	r2, #0
 800fc02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fc04:	f107 0308 	add.w	r3, r7, #8
 800fc08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	3304      	adds	r3, #4
 800fc14:	4619      	mov	r1, r3
 800fc16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	88fb      	ldrh	r3, [r7, #6]
 800fc1c:	f7fa f962 	bl	8009ee4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fc20:	2300      	movs	r3, #0
 800fc22:	613b      	str	r3, [r7, #16]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	613b      	str	r3, [r7, #16]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	613b      	str	r3, [r7, #16]
 800fc34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	330c      	adds	r3, #12
 800fc44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc48:	e853 3f00 	ldrex	r3, [r3]
 800fc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc54:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	330c      	adds	r3, #12
 800fc5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fc60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc66:	e841 2300 	strex	r3, r2, [r1]
 800fc6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fc6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d1e5      	bne.n	800fc3e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3314      	adds	r3, #20
 800fc78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7c:	e853 3f00 	ldrex	r3, [r3]
 800fc80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc84:	f043 0301 	orr.w	r3, r3, #1
 800fc88:	657b      	str	r3, [r7, #84]	; 0x54
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3314      	adds	r3, #20
 800fc90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc92:	63ba      	str	r2, [r7, #56]	; 0x38
 800fc94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc9a:	e841 2300 	strex	r3, r2, [r1]
 800fc9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1e5      	bne.n	800fc72 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	3314      	adds	r3, #20
 800fcac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	e853 3f00 	ldrex	r3, [r3]
 800fcb4:	617b      	str	r3, [r7, #20]
   return(result);
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcbc:	653b      	str	r3, [r7, #80]	; 0x50
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3314      	adds	r3, #20
 800fcc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcc6:	627a      	str	r2, [r7, #36]	; 0x24
 800fcc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcca:	6a39      	ldr	r1, [r7, #32]
 800fccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcce:	e841 2300 	strex	r3, r2, [r1]
 800fcd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e5      	bne.n	800fca6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3760      	adds	r7, #96	; 0x60
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	0800f9cb 	.word	0x0800f9cb
 800fce8:	0800faf1 	.word	0x0800faf1
 800fcec:	0800fb27 	.word	0x0800fb27

0800fcf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b089      	sub	sp, #36	; 0x24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	330c      	adds	r3, #12
 800fcfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	e853 3f00 	ldrex	r3, [r3]
 800fd06:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fd0e:	61fb      	str	r3, [r7, #28]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	330c      	adds	r3, #12
 800fd16:	69fa      	ldr	r2, [r7, #28]
 800fd18:	61ba      	str	r2, [r7, #24]
 800fd1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd1c:	6979      	ldr	r1, [r7, #20]
 800fd1e:	69ba      	ldr	r2, [r7, #24]
 800fd20:	e841 2300 	strex	r3, r2, [r1]
 800fd24:	613b      	str	r3, [r7, #16]
   return(result);
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1e5      	bne.n	800fcf8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2220      	movs	r2, #32
 800fd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800fd34:	bf00      	nop
 800fd36:	3724      	adds	r7, #36	; 0x24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b095      	sub	sp, #84	; 0x54
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	330c      	adds	r3, #12
 800fd4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd52:	e853 3f00 	ldrex	r3, [r3]
 800fd56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	330c      	adds	r3, #12
 800fd66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd68:	643a      	str	r2, [r7, #64]	; 0x40
 800fd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd70:	e841 2300 	strex	r3, r2, [r1]
 800fd74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1e5      	bne.n	800fd48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	3314      	adds	r3, #20
 800fd82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd84:	6a3b      	ldr	r3, [r7, #32]
 800fd86:	e853 3f00 	ldrex	r3, [r3]
 800fd8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	f023 0301 	bic.w	r3, r3, #1
 800fd92:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	3314      	adds	r3, #20
 800fd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda4:	e841 2300 	strex	r3, r2, [r1]
 800fda8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d1e5      	bne.n	800fd7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d119      	bne.n	800fdec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	330c      	adds	r3, #12
 800fdbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	e853 3f00 	ldrex	r3, [r3]
 800fdc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	f023 0310 	bic.w	r3, r3, #16
 800fdce:	647b      	str	r3, [r7, #68]	; 0x44
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	330c      	adds	r3, #12
 800fdd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdd8:	61ba      	str	r2, [r7, #24]
 800fdda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fddc:	6979      	ldr	r1, [r7, #20]
 800fdde:	69ba      	ldr	r2, [r7, #24]
 800fde0:	e841 2300 	strex	r3, r2, [r1]
 800fde4:	613b      	str	r3, [r7, #16]
   return(result);
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1e5      	bne.n	800fdb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fdfa:	bf00      	nop
 800fdfc:	3754      	adds	r7, #84	; 0x54
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f7ff fd61 	bl	800f8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe26:	bf00      	nop
 800fe28:	3710      	adds	r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b085      	sub	sp, #20
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	2b21      	cmp	r3, #33	; 0x21
 800fe40:	d13e      	bne.n	800fec0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe4a:	d114      	bne.n	800fe76 <UART_Transmit_IT+0x48>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	691b      	ldr	r3, [r3, #16]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d110      	bne.n	800fe76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6a1b      	ldr	r3, [r3, #32]
 800fe58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	1c9a      	adds	r2, r3, #2
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	621a      	str	r2, [r3, #32]
 800fe74:	e008      	b.n	800fe88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6a1b      	ldr	r3, [r3, #32]
 800fe7a:	1c59      	adds	r1, r3, #1
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	6211      	str	r1, [r2, #32]
 800fe80:	781a      	ldrb	r2, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	3b01      	subs	r3, #1
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	4619      	mov	r1, r3
 800fe96:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10f      	bne.n	800febc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68da      	ldr	r2, [r3, #12]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800feaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68da      	ldr	r2, [r3, #12]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800feba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800febc:	2300      	movs	r3, #0
 800febe:	e000      	b.n	800fec2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fec0:	2302      	movs	r3, #2
  }
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b082      	sub	sp, #8
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	68da      	ldr	r2, [r3, #12]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fee4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2220      	movs	r2, #32
 800feea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7ff fcd2 	bl	800f898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3708      	adds	r7, #8
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}

0800fefe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b08c      	sub	sp, #48	; 0x30
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	2b22      	cmp	r3, #34	; 0x22
 800ff10:	f040 80ab 	bne.w	801006a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff1c:	d117      	bne.n	800ff4e <UART_Receive_IT+0x50>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d113      	bne.n	800ff4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff46:	1c9a      	adds	r2, r3, #2
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	629a      	str	r2, [r3, #40]	; 0x28
 800ff4c:	e026      	b.n	800ff9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ff54:	2300      	movs	r3, #0
 800ff56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff60:	d007      	beq.n	800ff72 <UART_Receive_IT+0x74>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <UART_Receive_IT+0x82>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d106      	bne.n	800ff80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7c:	701a      	strb	r2, [r3, #0]
 800ff7e:	e008      	b.n	800ff92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff8c:	b2da      	uxtb	r2, r3
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff96:	1c5a      	adds	r2, r3, #1
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d15a      	bne.n	8010066 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68da      	ldr	r2, [r3, #12]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f022 0220 	bic.w	r2, r2, #32
 800ffbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68da      	ldr	r2, [r3, #12]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ffce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	695a      	ldr	r2, [r3, #20]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f022 0201 	bic.w	r2, r2, #1
 800ffde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2220      	movs	r2, #32
 800ffe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d135      	bne.n	801005c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	330c      	adds	r3, #12
 800fffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	e853 3f00 	ldrex	r3, [r3]
 8010004:	613b      	str	r3, [r7, #16]
   return(result);
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	f023 0310 	bic.w	r3, r3, #16
 801000c:	627b      	str	r3, [r7, #36]	; 0x24
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	330c      	adds	r3, #12
 8010014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010016:	623a      	str	r2, [r7, #32]
 8010018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801001a:	69f9      	ldr	r1, [r7, #28]
 801001c:	6a3a      	ldr	r2, [r7, #32]
 801001e:	e841 2300 	strex	r3, r2, [r1]
 8010022:	61bb      	str	r3, [r7, #24]
   return(result);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1e5      	bne.n	800fff6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f003 0310 	and.w	r3, r3, #16
 8010034:	2b10      	cmp	r3, #16
 8010036:	d10a      	bne.n	801004e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010038:	2300      	movs	r3, #0
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	60fb      	str	r3, [r7, #12]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	60fb      	str	r3, [r7, #12]
 801004c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010052:	4619      	mov	r1, r3
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7ff fc51 	bl	800f8fc <HAL_UARTEx_RxEventCallback>
 801005a:	e002      	b.n	8010062 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff fc2f 	bl	800f8c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010062:	2300      	movs	r3, #0
 8010064:	e002      	b.n	801006c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010066:	2300      	movs	r3, #0
 8010068:	e000      	b.n	801006c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801006a:	2302      	movs	r3, #2
  }
}
 801006c:	4618      	mov	r0, r3
 801006e:	3730      	adds	r7, #48	; 0x30
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010078:	b09f      	sub	sp, #124	; 0x7c
 801007a:	af00      	add	r7, sp, #0
 801007c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801007e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801008a:	68d9      	ldr	r1, [r3, #12]
 801008c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	ea40 0301 	orr.w	r3, r0, r1
 8010094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010098:	689a      	ldr	r2, [r3, #8]
 801009a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	431a      	orrs	r2, r3
 80100a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100a2:	695b      	ldr	r3, [r3, #20]
 80100a4:	431a      	orrs	r2, r3
 80100a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80100ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80100b8:	f021 010c 	bic.w	r1, r1, #12
 80100bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100c2:	430b      	orrs	r3, r1
 80100c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80100c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	695b      	ldr	r3, [r3, #20]
 80100cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80100d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100d2:	6999      	ldr	r1, [r3, #24]
 80100d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	ea40 0301 	orr.w	r3, r0, r1
 80100dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80100de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	4bc5      	ldr	r3, [pc, #788]	; (80103f8 <UART_SetConfig+0x384>)
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d004      	beq.n	80100f2 <UART_SetConfig+0x7e>
 80100e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	4bc3      	ldr	r3, [pc, #780]	; (80103fc <UART_SetConfig+0x388>)
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d103      	bne.n	80100fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80100f2:	f7fe f979 	bl	800e3e8 <HAL_RCC_GetPCLK2Freq>
 80100f6:	6778      	str	r0, [r7, #116]	; 0x74
 80100f8:	e002      	b.n	8010100 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80100fa:	f7fe f961 	bl	800e3c0 <HAL_RCC_GetPCLK1Freq>
 80100fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010102:	69db      	ldr	r3, [r3, #28]
 8010104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010108:	f040 80b6 	bne.w	8010278 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801010c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801010e:	461c      	mov	r4, r3
 8010110:	f04f 0500 	mov.w	r5, #0
 8010114:	4622      	mov	r2, r4
 8010116:	462b      	mov	r3, r5
 8010118:	1891      	adds	r1, r2, r2
 801011a:	6439      	str	r1, [r7, #64]	; 0x40
 801011c:	415b      	adcs	r3, r3
 801011e:	647b      	str	r3, [r7, #68]	; 0x44
 8010120:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010124:	1912      	adds	r2, r2, r4
 8010126:	eb45 0303 	adc.w	r3, r5, r3
 801012a:	f04f 0000 	mov.w	r0, #0
 801012e:	f04f 0100 	mov.w	r1, #0
 8010132:	00d9      	lsls	r1, r3, #3
 8010134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010138:	00d0      	lsls	r0, r2, #3
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	1911      	adds	r1, r2, r4
 8010140:	6639      	str	r1, [r7, #96]	; 0x60
 8010142:	416b      	adcs	r3, r5
 8010144:	667b      	str	r3, [r7, #100]	; 0x64
 8010146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	461a      	mov	r2, r3
 801014c:	f04f 0300 	mov.w	r3, #0
 8010150:	1891      	adds	r1, r2, r2
 8010152:	63b9      	str	r1, [r7, #56]	; 0x38
 8010154:	415b      	adcs	r3, r3
 8010156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801015c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010160:	f7f0 fdaa 	bl	8000cb8 <__aeabi_uldivmod>
 8010164:	4602      	mov	r2, r0
 8010166:	460b      	mov	r3, r1
 8010168:	4ba5      	ldr	r3, [pc, #660]	; (8010400 <UART_SetConfig+0x38c>)
 801016a:	fba3 2302 	umull	r2, r3, r3, r2
 801016e:	095b      	lsrs	r3, r3, #5
 8010170:	011e      	lsls	r6, r3, #4
 8010172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010174:	461c      	mov	r4, r3
 8010176:	f04f 0500 	mov.w	r5, #0
 801017a:	4622      	mov	r2, r4
 801017c:	462b      	mov	r3, r5
 801017e:	1891      	adds	r1, r2, r2
 8010180:	6339      	str	r1, [r7, #48]	; 0x30
 8010182:	415b      	adcs	r3, r3
 8010184:	637b      	str	r3, [r7, #52]	; 0x34
 8010186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801018a:	1912      	adds	r2, r2, r4
 801018c:	eb45 0303 	adc.w	r3, r5, r3
 8010190:	f04f 0000 	mov.w	r0, #0
 8010194:	f04f 0100 	mov.w	r1, #0
 8010198:	00d9      	lsls	r1, r3, #3
 801019a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801019e:	00d0      	lsls	r0, r2, #3
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	1911      	adds	r1, r2, r4
 80101a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80101a8:	416b      	adcs	r3, r5
 80101aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	461a      	mov	r2, r3
 80101b2:	f04f 0300 	mov.w	r3, #0
 80101b6:	1891      	adds	r1, r2, r2
 80101b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80101ba:	415b      	adcs	r3, r3
 80101bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80101c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80101c6:	f7f0 fd77 	bl	8000cb8 <__aeabi_uldivmod>
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	4b8c      	ldr	r3, [pc, #560]	; (8010400 <UART_SetConfig+0x38c>)
 80101d0:	fba3 1302 	umull	r1, r3, r3, r2
 80101d4:	095b      	lsrs	r3, r3, #5
 80101d6:	2164      	movs	r1, #100	; 0x64
 80101d8:	fb01 f303 	mul.w	r3, r1, r3
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	3332      	adds	r3, #50	; 0x32
 80101e2:	4a87      	ldr	r2, [pc, #540]	; (8010400 <UART_SetConfig+0x38c>)
 80101e4:	fba2 2303 	umull	r2, r3, r2, r3
 80101e8:	095b      	lsrs	r3, r3, #5
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80101f0:	441e      	add	r6, r3
 80101f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101f4:	4618      	mov	r0, r3
 80101f6:	f04f 0100 	mov.w	r1, #0
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	1894      	adds	r4, r2, r2
 8010200:	623c      	str	r4, [r7, #32]
 8010202:	415b      	adcs	r3, r3
 8010204:	627b      	str	r3, [r7, #36]	; 0x24
 8010206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801020a:	1812      	adds	r2, r2, r0
 801020c:	eb41 0303 	adc.w	r3, r1, r3
 8010210:	f04f 0400 	mov.w	r4, #0
 8010214:	f04f 0500 	mov.w	r5, #0
 8010218:	00dd      	lsls	r5, r3, #3
 801021a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801021e:	00d4      	lsls	r4, r2, #3
 8010220:	4622      	mov	r2, r4
 8010222:	462b      	mov	r3, r5
 8010224:	1814      	adds	r4, r2, r0
 8010226:	653c      	str	r4, [r7, #80]	; 0x50
 8010228:	414b      	adcs	r3, r1
 801022a:	657b      	str	r3, [r7, #84]	; 0x54
 801022c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	461a      	mov	r2, r3
 8010232:	f04f 0300 	mov.w	r3, #0
 8010236:	1891      	adds	r1, r2, r2
 8010238:	61b9      	str	r1, [r7, #24]
 801023a:	415b      	adcs	r3, r3
 801023c:	61fb      	str	r3, [r7, #28]
 801023e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010242:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010246:	f7f0 fd37 	bl	8000cb8 <__aeabi_uldivmod>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	4b6c      	ldr	r3, [pc, #432]	; (8010400 <UART_SetConfig+0x38c>)
 8010250:	fba3 1302 	umull	r1, r3, r3, r2
 8010254:	095b      	lsrs	r3, r3, #5
 8010256:	2164      	movs	r1, #100	; 0x64
 8010258:	fb01 f303 	mul.w	r3, r1, r3
 801025c:	1ad3      	subs	r3, r2, r3
 801025e:	00db      	lsls	r3, r3, #3
 8010260:	3332      	adds	r3, #50	; 0x32
 8010262:	4a67      	ldr	r2, [pc, #412]	; (8010400 <UART_SetConfig+0x38c>)
 8010264:	fba2 2303 	umull	r2, r3, r2, r3
 8010268:	095b      	lsrs	r3, r3, #5
 801026a:	f003 0207 	and.w	r2, r3, #7
 801026e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4432      	add	r2, r6
 8010274:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010276:	e0b9      	b.n	80103ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801027a:	461c      	mov	r4, r3
 801027c:	f04f 0500 	mov.w	r5, #0
 8010280:	4622      	mov	r2, r4
 8010282:	462b      	mov	r3, r5
 8010284:	1891      	adds	r1, r2, r2
 8010286:	6139      	str	r1, [r7, #16]
 8010288:	415b      	adcs	r3, r3
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010290:	1912      	adds	r2, r2, r4
 8010292:	eb45 0303 	adc.w	r3, r5, r3
 8010296:	f04f 0000 	mov.w	r0, #0
 801029a:	f04f 0100 	mov.w	r1, #0
 801029e:	00d9      	lsls	r1, r3, #3
 80102a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80102a4:	00d0      	lsls	r0, r2, #3
 80102a6:	4602      	mov	r2, r0
 80102a8:	460b      	mov	r3, r1
 80102aa:	eb12 0804 	adds.w	r8, r2, r4
 80102ae:	eb43 0905 	adc.w	r9, r3, r5
 80102b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f04f 0100 	mov.w	r1, #0
 80102bc:	f04f 0200 	mov.w	r2, #0
 80102c0:	f04f 0300 	mov.w	r3, #0
 80102c4:	008b      	lsls	r3, r1, #2
 80102c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80102ca:	0082      	lsls	r2, r0, #2
 80102cc:	4640      	mov	r0, r8
 80102ce:	4649      	mov	r1, r9
 80102d0:	f7f0 fcf2 	bl	8000cb8 <__aeabi_uldivmod>
 80102d4:	4602      	mov	r2, r0
 80102d6:	460b      	mov	r3, r1
 80102d8:	4b49      	ldr	r3, [pc, #292]	; (8010400 <UART_SetConfig+0x38c>)
 80102da:	fba3 2302 	umull	r2, r3, r3, r2
 80102de:	095b      	lsrs	r3, r3, #5
 80102e0:	011e      	lsls	r6, r3, #4
 80102e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102e4:	4618      	mov	r0, r3
 80102e6:	f04f 0100 	mov.w	r1, #0
 80102ea:	4602      	mov	r2, r0
 80102ec:	460b      	mov	r3, r1
 80102ee:	1894      	adds	r4, r2, r2
 80102f0:	60bc      	str	r4, [r7, #8]
 80102f2:	415b      	adcs	r3, r3
 80102f4:	60fb      	str	r3, [r7, #12]
 80102f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80102fa:	1812      	adds	r2, r2, r0
 80102fc:	eb41 0303 	adc.w	r3, r1, r3
 8010300:	f04f 0400 	mov.w	r4, #0
 8010304:	f04f 0500 	mov.w	r5, #0
 8010308:	00dd      	lsls	r5, r3, #3
 801030a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801030e:	00d4      	lsls	r4, r2, #3
 8010310:	4622      	mov	r2, r4
 8010312:	462b      	mov	r3, r5
 8010314:	1814      	adds	r4, r2, r0
 8010316:	64bc      	str	r4, [r7, #72]	; 0x48
 8010318:	414b      	adcs	r3, r1
 801031a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801031c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	4618      	mov	r0, r3
 8010322:	f04f 0100 	mov.w	r1, #0
 8010326:	f04f 0200 	mov.w	r2, #0
 801032a:	f04f 0300 	mov.w	r3, #0
 801032e:	008b      	lsls	r3, r1, #2
 8010330:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010334:	0082      	lsls	r2, r0, #2
 8010336:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801033a:	f7f0 fcbd 	bl	8000cb8 <__aeabi_uldivmod>
 801033e:	4602      	mov	r2, r0
 8010340:	460b      	mov	r3, r1
 8010342:	4b2f      	ldr	r3, [pc, #188]	; (8010400 <UART_SetConfig+0x38c>)
 8010344:	fba3 1302 	umull	r1, r3, r3, r2
 8010348:	095b      	lsrs	r3, r3, #5
 801034a:	2164      	movs	r1, #100	; 0x64
 801034c:	fb01 f303 	mul.w	r3, r1, r3
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	011b      	lsls	r3, r3, #4
 8010354:	3332      	adds	r3, #50	; 0x32
 8010356:	4a2a      	ldr	r2, [pc, #168]	; (8010400 <UART_SetConfig+0x38c>)
 8010358:	fba2 2303 	umull	r2, r3, r2, r3
 801035c:	095b      	lsrs	r3, r3, #5
 801035e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010362:	441e      	add	r6, r3
 8010364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010366:	4618      	mov	r0, r3
 8010368:	f04f 0100 	mov.w	r1, #0
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	1894      	adds	r4, r2, r2
 8010372:	603c      	str	r4, [r7, #0]
 8010374:	415b      	adcs	r3, r3
 8010376:	607b      	str	r3, [r7, #4]
 8010378:	e9d7 2300 	ldrd	r2, r3, [r7]
 801037c:	1812      	adds	r2, r2, r0
 801037e:	eb41 0303 	adc.w	r3, r1, r3
 8010382:	f04f 0400 	mov.w	r4, #0
 8010386:	f04f 0500 	mov.w	r5, #0
 801038a:	00dd      	lsls	r5, r3, #3
 801038c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010390:	00d4      	lsls	r4, r2, #3
 8010392:	4622      	mov	r2, r4
 8010394:	462b      	mov	r3, r5
 8010396:	eb12 0a00 	adds.w	sl, r2, r0
 801039a:	eb43 0b01 	adc.w	fp, r3, r1
 801039e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	f04f 0100 	mov.w	r1, #0
 80103a8:	f04f 0200 	mov.w	r2, #0
 80103ac:	f04f 0300 	mov.w	r3, #0
 80103b0:	008b      	lsls	r3, r1, #2
 80103b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80103b6:	0082      	lsls	r2, r0, #2
 80103b8:	4650      	mov	r0, sl
 80103ba:	4659      	mov	r1, fp
 80103bc:	f7f0 fc7c 	bl	8000cb8 <__aeabi_uldivmod>
 80103c0:	4602      	mov	r2, r0
 80103c2:	460b      	mov	r3, r1
 80103c4:	4b0e      	ldr	r3, [pc, #56]	; (8010400 <UART_SetConfig+0x38c>)
 80103c6:	fba3 1302 	umull	r1, r3, r3, r2
 80103ca:	095b      	lsrs	r3, r3, #5
 80103cc:	2164      	movs	r1, #100	; 0x64
 80103ce:	fb01 f303 	mul.w	r3, r1, r3
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	3332      	adds	r3, #50	; 0x32
 80103d8:	4a09      	ldr	r2, [pc, #36]	; (8010400 <UART_SetConfig+0x38c>)
 80103da:	fba2 2303 	umull	r2, r3, r2, r3
 80103de:	095b      	lsrs	r3, r3, #5
 80103e0:	f003 020f 	and.w	r2, r3, #15
 80103e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4432      	add	r2, r6
 80103ea:	609a      	str	r2, [r3, #8]
}
 80103ec:	bf00      	nop
 80103ee:	377c      	adds	r7, #124	; 0x7c
 80103f0:	46bd      	mov	sp, r7
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	bf00      	nop
 80103f8:	40011000 	.word	0x40011000
 80103fc:	40011400 	.word	0x40011400
 8010400:	51eb851f 	.word	0x51eb851f

08010404 <atof>:
 8010404:	2100      	movs	r1, #0
 8010406:	f001 bd03 	b.w	8011e10 <strtod>

0801040a <atoi>:
 801040a:	220a      	movs	r2, #10
 801040c:	2100      	movs	r1, #0
 801040e:	f001 bded 	b.w	8011fec <strtol>
	...

08010414 <__errno>:
 8010414:	4b01      	ldr	r3, [pc, #4]	; (801041c <__errno+0x8>)
 8010416:	6818      	ldr	r0, [r3, #0]
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	20000040 	.word	0x20000040

08010420 <__libc_init_array>:
 8010420:	b570      	push	{r4, r5, r6, lr}
 8010422:	4d0d      	ldr	r5, [pc, #52]	; (8010458 <__libc_init_array+0x38>)
 8010424:	4c0d      	ldr	r4, [pc, #52]	; (801045c <__libc_init_array+0x3c>)
 8010426:	1b64      	subs	r4, r4, r5
 8010428:	10a4      	asrs	r4, r4, #2
 801042a:	2600      	movs	r6, #0
 801042c:	42a6      	cmp	r6, r4
 801042e:	d109      	bne.n	8010444 <__libc_init_array+0x24>
 8010430:	4d0b      	ldr	r5, [pc, #44]	; (8010460 <__libc_init_array+0x40>)
 8010432:	4c0c      	ldr	r4, [pc, #48]	; (8010464 <__libc_init_array+0x44>)
 8010434:	f004 fcb6 	bl	8014da4 <_init>
 8010438:	1b64      	subs	r4, r4, r5
 801043a:	10a4      	asrs	r4, r4, #2
 801043c:	2600      	movs	r6, #0
 801043e:	42a6      	cmp	r6, r4
 8010440:	d105      	bne.n	801044e <__libc_init_array+0x2e>
 8010442:	bd70      	pop	{r4, r5, r6, pc}
 8010444:	f855 3b04 	ldr.w	r3, [r5], #4
 8010448:	4798      	blx	r3
 801044a:	3601      	adds	r6, #1
 801044c:	e7ee      	b.n	801042c <__libc_init_array+0xc>
 801044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010452:	4798      	blx	r3
 8010454:	3601      	adds	r6, #1
 8010456:	e7f2      	b.n	801043e <__libc_init_array+0x1e>
 8010458:	08028d20 	.word	0x08028d20
 801045c:	08028d20 	.word	0x08028d20
 8010460:	08028d20 	.word	0x08028d20
 8010464:	08028d24 	.word	0x08028d24

08010468 <memset>:
 8010468:	4402      	add	r2, r0
 801046a:	4603      	mov	r3, r0
 801046c:	4293      	cmp	r3, r2
 801046e:	d100      	bne.n	8010472 <memset+0xa>
 8010470:	4770      	bx	lr
 8010472:	f803 1b01 	strb.w	r1, [r3], #1
 8010476:	e7f9      	b.n	801046c <memset+0x4>

08010478 <__cvt>:
 8010478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801047c:	ec55 4b10 	vmov	r4, r5, d0
 8010480:	2d00      	cmp	r5, #0
 8010482:	460e      	mov	r6, r1
 8010484:	4619      	mov	r1, r3
 8010486:	462b      	mov	r3, r5
 8010488:	bfbb      	ittet	lt
 801048a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801048e:	461d      	movlt	r5, r3
 8010490:	2300      	movge	r3, #0
 8010492:	232d      	movlt	r3, #45	; 0x2d
 8010494:	700b      	strb	r3, [r1, #0]
 8010496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010498:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801049c:	4691      	mov	r9, r2
 801049e:	f023 0820 	bic.w	r8, r3, #32
 80104a2:	bfbc      	itt	lt
 80104a4:	4622      	movlt	r2, r4
 80104a6:	4614      	movlt	r4, r2
 80104a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80104ac:	d005      	beq.n	80104ba <__cvt+0x42>
 80104ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80104b2:	d100      	bne.n	80104b6 <__cvt+0x3e>
 80104b4:	3601      	adds	r6, #1
 80104b6:	2102      	movs	r1, #2
 80104b8:	e000      	b.n	80104bc <__cvt+0x44>
 80104ba:	2103      	movs	r1, #3
 80104bc:	ab03      	add	r3, sp, #12
 80104be:	9301      	str	r3, [sp, #4]
 80104c0:	ab02      	add	r3, sp, #8
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	ec45 4b10 	vmov	d0, r4, r5
 80104c8:	4653      	mov	r3, sl
 80104ca:	4632      	mov	r2, r6
 80104cc:	f001 fe44 	bl	8012158 <_dtoa_r>
 80104d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80104d4:	4607      	mov	r7, r0
 80104d6:	d102      	bne.n	80104de <__cvt+0x66>
 80104d8:	f019 0f01 	tst.w	r9, #1
 80104dc:	d022      	beq.n	8010524 <__cvt+0xac>
 80104de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80104e2:	eb07 0906 	add.w	r9, r7, r6
 80104e6:	d110      	bne.n	801050a <__cvt+0x92>
 80104e8:	783b      	ldrb	r3, [r7, #0]
 80104ea:	2b30      	cmp	r3, #48	; 0x30
 80104ec:	d10a      	bne.n	8010504 <__cvt+0x8c>
 80104ee:	2200      	movs	r2, #0
 80104f0:	2300      	movs	r3, #0
 80104f2:	4620      	mov	r0, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7f0 faff 	bl	8000af8 <__aeabi_dcmpeq>
 80104fa:	b918      	cbnz	r0, 8010504 <__cvt+0x8c>
 80104fc:	f1c6 0601 	rsb	r6, r6, #1
 8010500:	f8ca 6000 	str.w	r6, [sl]
 8010504:	f8da 3000 	ldr.w	r3, [sl]
 8010508:	4499      	add	r9, r3
 801050a:	2200      	movs	r2, #0
 801050c:	2300      	movs	r3, #0
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	f7f0 faf1 	bl	8000af8 <__aeabi_dcmpeq>
 8010516:	b108      	cbz	r0, 801051c <__cvt+0xa4>
 8010518:	f8cd 900c 	str.w	r9, [sp, #12]
 801051c:	2230      	movs	r2, #48	; 0x30
 801051e:	9b03      	ldr	r3, [sp, #12]
 8010520:	454b      	cmp	r3, r9
 8010522:	d307      	bcc.n	8010534 <__cvt+0xbc>
 8010524:	9b03      	ldr	r3, [sp, #12]
 8010526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010528:	1bdb      	subs	r3, r3, r7
 801052a:	4638      	mov	r0, r7
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	b004      	add	sp, #16
 8010530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010534:	1c59      	adds	r1, r3, #1
 8010536:	9103      	str	r1, [sp, #12]
 8010538:	701a      	strb	r2, [r3, #0]
 801053a:	e7f0      	b.n	801051e <__cvt+0xa6>

0801053c <__exponent>:
 801053c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801053e:	4603      	mov	r3, r0
 8010540:	2900      	cmp	r1, #0
 8010542:	bfb8      	it	lt
 8010544:	4249      	neglt	r1, r1
 8010546:	f803 2b02 	strb.w	r2, [r3], #2
 801054a:	bfb4      	ite	lt
 801054c:	222d      	movlt	r2, #45	; 0x2d
 801054e:	222b      	movge	r2, #43	; 0x2b
 8010550:	2909      	cmp	r1, #9
 8010552:	7042      	strb	r2, [r0, #1]
 8010554:	dd2a      	ble.n	80105ac <__exponent+0x70>
 8010556:	f10d 0407 	add.w	r4, sp, #7
 801055a:	46a4      	mov	ip, r4
 801055c:	270a      	movs	r7, #10
 801055e:	46a6      	mov	lr, r4
 8010560:	460a      	mov	r2, r1
 8010562:	fb91 f6f7 	sdiv	r6, r1, r7
 8010566:	fb07 1516 	mls	r5, r7, r6, r1
 801056a:	3530      	adds	r5, #48	; 0x30
 801056c:	2a63      	cmp	r2, #99	; 0x63
 801056e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010572:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010576:	4631      	mov	r1, r6
 8010578:	dcf1      	bgt.n	801055e <__exponent+0x22>
 801057a:	3130      	adds	r1, #48	; 0x30
 801057c:	f1ae 0502 	sub.w	r5, lr, #2
 8010580:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010584:	1c44      	adds	r4, r0, #1
 8010586:	4629      	mov	r1, r5
 8010588:	4561      	cmp	r1, ip
 801058a:	d30a      	bcc.n	80105a2 <__exponent+0x66>
 801058c:	f10d 0209 	add.w	r2, sp, #9
 8010590:	eba2 020e 	sub.w	r2, r2, lr
 8010594:	4565      	cmp	r5, ip
 8010596:	bf88      	it	hi
 8010598:	2200      	movhi	r2, #0
 801059a:	4413      	add	r3, r2
 801059c:	1a18      	subs	r0, r3, r0
 801059e:	b003      	add	sp, #12
 80105a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80105aa:	e7ed      	b.n	8010588 <__exponent+0x4c>
 80105ac:	2330      	movs	r3, #48	; 0x30
 80105ae:	3130      	adds	r1, #48	; 0x30
 80105b0:	7083      	strb	r3, [r0, #2]
 80105b2:	70c1      	strb	r1, [r0, #3]
 80105b4:	1d03      	adds	r3, r0, #4
 80105b6:	e7f1      	b.n	801059c <__exponent+0x60>

080105b8 <_printf_float>:
 80105b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105bc:	ed2d 8b02 	vpush	{d8}
 80105c0:	b08d      	sub	sp, #52	; 0x34
 80105c2:	460c      	mov	r4, r1
 80105c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80105c8:	4616      	mov	r6, r2
 80105ca:	461f      	mov	r7, r3
 80105cc:	4605      	mov	r5, r0
 80105ce:	f002 ff31 	bl	8013434 <_localeconv_r>
 80105d2:	f8d0 a000 	ldr.w	sl, [r0]
 80105d6:	4650      	mov	r0, sl
 80105d8:	f7ef fe0c 	bl	80001f4 <strlen>
 80105dc:	2300      	movs	r3, #0
 80105de:	930a      	str	r3, [sp, #40]	; 0x28
 80105e0:	6823      	ldr	r3, [r4, #0]
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	f8d8 3000 	ldr.w	r3, [r8]
 80105e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80105ec:	3307      	adds	r3, #7
 80105ee:	f023 0307 	bic.w	r3, r3, #7
 80105f2:	f103 0208 	add.w	r2, r3, #8
 80105f6:	f8c8 2000 	str.w	r2, [r8]
 80105fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010602:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801060a:	9307      	str	r3, [sp, #28]
 801060c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010610:	ee08 0a10 	vmov	s16, r0
 8010614:	4b9f      	ldr	r3, [pc, #636]	; (8010894 <_printf_float+0x2dc>)
 8010616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801061a:	f04f 32ff 	mov.w	r2, #4294967295
 801061e:	f7f0 fa9d 	bl	8000b5c <__aeabi_dcmpun>
 8010622:	bb88      	cbnz	r0, 8010688 <_printf_float+0xd0>
 8010624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010628:	4b9a      	ldr	r3, [pc, #616]	; (8010894 <_printf_float+0x2dc>)
 801062a:	f04f 32ff 	mov.w	r2, #4294967295
 801062e:	f7f0 fa77 	bl	8000b20 <__aeabi_dcmple>
 8010632:	bb48      	cbnz	r0, 8010688 <_printf_float+0xd0>
 8010634:	2200      	movs	r2, #0
 8010636:	2300      	movs	r3, #0
 8010638:	4640      	mov	r0, r8
 801063a:	4649      	mov	r1, r9
 801063c:	f7f0 fa66 	bl	8000b0c <__aeabi_dcmplt>
 8010640:	b110      	cbz	r0, 8010648 <_printf_float+0x90>
 8010642:	232d      	movs	r3, #45	; 0x2d
 8010644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010648:	4b93      	ldr	r3, [pc, #588]	; (8010898 <_printf_float+0x2e0>)
 801064a:	4894      	ldr	r0, [pc, #592]	; (801089c <_printf_float+0x2e4>)
 801064c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010650:	bf94      	ite	ls
 8010652:	4698      	movls	r8, r3
 8010654:	4680      	movhi	r8, r0
 8010656:	2303      	movs	r3, #3
 8010658:	6123      	str	r3, [r4, #16]
 801065a:	9b05      	ldr	r3, [sp, #20]
 801065c:	f023 0204 	bic.w	r2, r3, #4
 8010660:	6022      	str	r2, [r4, #0]
 8010662:	f04f 0900 	mov.w	r9, #0
 8010666:	9700      	str	r7, [sp, #0]
 8010668:	4633      	mov	r3, r6
 801066a:	aa0b      	add	r2, sp, #44	; 0x2c
 801066c:	4621      	mov	r1, r4
 801066e:	4628      	mov	r0, r5
 8010670:	f000 f9d8 	bl	8010a24 <_printf_common>
 8010674:	3001      	adds	r0, #1
 8010676:	f040 8090 	bne.w	801079a <_printf_float+0x1e2>
 801067a:	f04f 30ff 	mov.w	r0, #4294967295
 801067e:	b00d      	add	sp, #52	; 0x34
 8010680:	ecbd 8b02 	vpop	{d8}
 8010684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010688:	4642      	mov	r2, r8
 801068a:	464b      	mov	r3, r9
 801068c:	4640      	mov	r0, r8
 801068e:	4649      	mov	r1, r9
 8010690:	f7f0 fa64 	bl	8000b5c <__aeabi_dcmpun>
 8010694:	b140      	cbz	r0, 80106a8 <_printf_float+0xf0>
 8010696:	464b      	mov	r3, r9
 8010698:	2b00      	cmp	r3, #0
 801069a:	bfbc      	itt	lt
 801069c:	232d      	movlt	r3, #45	; 0x2d
 801069e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80106a2:	487f      	ldr	r0, [pc, #508]	; (80108a0 <_printf_float+0x2e8>)
 80106a4:	4b7f      	ldr	r3, [pc, #508]	; (80108a4 <_printf_float+0x2ec>)
 80106a6:	e7d1      	b.n	801064c <_printf_float+0x94>
 80106a8:	6863      	ldr	r3, [r4, #4]
 80106aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80106ae:	9206      	str	r2, [sp, #24]
 80106b0:	1c5a      	adds	r2, r3, #1
 80106b2:	d13f      	bne.n	8010734 <_printf_float+0x17c>
 80106b4:	2306      	movs	r3, #6
 80106b6:	6063      	str	r3, [r4, #4]
 80106b8:	9b05      	ldr	r3, [sp, #20]
 80106ba:	6861      	ldr	r1, [r4, #4]
 80106bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80106c0:	2300      	movs	r3, #0
 80106c2:	9303      	str	r3, [sp, #12]
 80106c4:	ab0a      	add	r3, sp, #40	; 0x28
 80106c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80106ca:	ab09      	add	r3, sp, #36	; 0x24
 80106cc:	ec49 8b10 	vmov	d0, r8, r9
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	6022      	str	r2, [r4, #0]
 80106d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80106d8:	4628      	mov	r0, r5
 80106da:	f7ff fecd 	bl	8010478 <__cvt>
 80106de:	9b06      	ldr	r3, [sp, #24]
 80106e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106e2:	2b47      	cmp	r3, #71	; 0x47
 80106e4:	4680      	mov	r8, r0
 80106e6:	d108      	bne.n	80106fa <_printf_float+0x142>
 80106e8:	1cc8      	adds	r0, r1, #3
 80106ea:	db02      	blt.n	80106f2 <_printf_float+0x13a>
 80106ec:	6863      	ldr	r3, [r4, #4]
 80106ee:	4299      	cmp	r1, r3
 80106f0:	dd41      	ble.n	8010776 <_printf_float+0x1be>
 80106f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80106f6:	fa5f fb8b 	uxtb.w	fp, fp
 80106fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80106fe:	d820      	bhi.n	8010742 <_printf_float+0x18a>
 8010700:	3901      	subs	r1, #1
 8010702:	465a      	mov	r2, fp
 8010704:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010708:	9109      	str	r1, [sp, #36]	; 0x24
 801070a:	f7ff ff17 	bl	801053c <__exponent>
 801070e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010710:	1813      	adds	r3, r2, r0
 8010712:	2a01      	cmp	r2, #1
 8010714:	4681      	mov	r9, r0
 8010716:	6123      	str	r3, [r4, #16]
 8010718:	dc02      	bgt.n	8010720 <_printf_float+0x168>
 801071a:	6822      	ldr	r2, [r4, #0]
 801071c:	07d2      	lsls	r2, r2, #31
 801071e:	d501      	bpl.n	8010724 <_printf_float+0x16c>
 8010720:	3301      	adds	r3, #1
 8010722:	6123      	str	r3, [r4, #16]
 8010724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010728:	2b00      	cmp	r3, #0
 801072a:	d09c      	beq.n	8010666 <_printf_float+0xae>
 801072c:	232d      	movs	r3, #45	; 0x2d
 801072e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010732:	e798      	b.n	8010666 <_printf_float+0xae>
 8010734:	9a06      	ldr	r2, [sp, #24]
 8010736:	2a47      	cmp	r2, #71	; 0x47
 8010738:	d1be      	bne.n	80106b8 <_printf_float+0x100>
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1bc      	bne.n	80106b8 <_printf_float+0x100>
 801073e:	2301      	movs	r3, #1
 8010740:	e7b9      	b.n	80106b6 <_printf_float+0xfe>
 8010742:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010746:	d118      	bne.n	801077a <_printf_float+0x1c2>
 8010748:	2900      	cmp	r1, #0
 801074a:	6863      	ldr	r3, [r4, #4]
 801074c:	dd0b      	ble.n	8010766 <_printf_float+0x1ae>
 801074e:	6121      	str	r1, [r4, #16]
 8010750:	b913      	cbnz	r3, 8010758 <_printf_float+0x1a0>
 8010752:	6822      	ldr	r2, [r4, #0]
 8010754:	07d0      	lsls	r0, r2, #31
 8010756:	d502      	bpl.n	801075e <_printf_float+0x1a6>
 8010758:	3301      	adds	r3, #1
 801075a:	440b      	add	r3, r1
 801075c:	6123      	str	r3, [r4, #16]
 801075e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010760:	f04f 0900 	mov.w	r9, #0
 8010764:	e7de      	b.n	8010724 <_printf_float+0x16c>
 8010766:	b913      	cbnz	r3, 801076e <_printf_float+0x1b6>
 8010768:	6822      	ldr	r2, [r4, #0]
 801076a:	07d2      	lsls	r2, r2, #31
 801076c:	d501      	bpl.n	8010772 <_printf_float+0x1ba>
 801076e:	3302      	adds	r3, #2
 8010770:	e7f4      	b.n	801075c <_printf_float+0x1a4>
 8010772:	2301      	movs	r3, #1
 8010774:	e7f2      	b.n	801075c <_printf_float+0x1a4>
 8010776:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801077a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801077c:	4299      	cmp	r1, r3
 801077e:	db05      	blt.n	801078c <_printf_float+0x1d4>
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	6121      	str	r1, [r4, #16]
 8010784:	07d8      	lsls	r0, r3, #31
 8010786:	d5ea      	bpl.n	801075e <_printf_float+0x1a6>
 8010788:	1c4b      	adds	r3, r1, #1
 801078a:	e7e7      	b.n	801075c <_printf_float+0x1a4>
 801078c:	2900      	cmp	r1, #0
 801078e:	bfd4      	ite	le
 8010790:	f1c1 0202 	rsble	r2, r1, #2
 8010794:	2201      	movgt	r2, #1
 8010796:	4413      	add	r3, r2
 8010798:	e7e0      	b.n	801075c <_printf_float+0x1a4>
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	055a      	lsls	r2, r3, #21
 801079e:	d407      	bmi.n	80107b0 <_printf_float+0x1f8>
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	4642      	mov	r2, r8
 80107a4:	4631      	mov	r1, r6
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b8      	blx	r7
 80107aa:	3001      	adds	r0, #1
 80107ac:	d12c      	bne.n	8010808 <_printf_float+0x250>
 80107ae:	e764      	b.n	801067a <_printf_float+0xc2>
 80107b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80107b4:	f240 80e0 	bls.w	8010978 <_printf_float+0x3c0>
 80107b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80107bc:	2200      	movs	r2, #0
 80107be:	2300      	movs	r3, #0
 80107c0:	f7f0 f99a 	bl	8000af8 <__aeabi_dcmpeq>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d034      	beq.n	8010832 <_printf_float+0x27a>
 80107c8:	4a37      	ldr	r2, [pc, #220]	; (80108a8 <_printf_float+0x2f0>)
 80107ca:	2301      	movs	r3, #1
 80107cc:	4631      	mov	r1, r6
 80107ce:	4628      	mov	r0, r5
 80107d0:	47b8      	blx	r7
 80107d2:	3001      	adds	r0, #1
 80107d4:	f43f af51 	beq.w	801067a <_printf_float+0xc2>
 80107d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107dc:	429a      	cmp	r2, r3
 80107de:	db02      	blt.n	80107e6 <_printf_float+0x22e>
 80107e0:	6823      	ldr	r3, [r4, #0]
 80107e2:	07d8      	lsls	r0, r3, #31
 80107e4:	d510      	bpl.n	8010808 <_printf_float+0x250>
 80107e6:	ee18 3a10 	vmov	r3, s16
 80107ea:	4652      	mov	r2, sl
 80107ec:	4631      	mov	r1, r6
 80107ee:	4628      	mov	r0, r5
 80107f0:	47b8      	blx	r7
 80107f2:	3001      	adds	r0, #1
 80107f4:	f43f af41 	beq.w	801067a <_printf_float+0xc2>
 80107f8:	f04f 0800 	mov.w	r8, #0
 80107fc:	f104 091a 	add.w	r9, r4, #26
 8010800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010802:	3b01      	subs	r3, #1
 8010804:	4543      	cmp	r3, r8
 8010806:	dc09      	bgt.n	801081c <_printf_float+0x264>
 8010808:	6823      	ldr	r3, [r4, #0]
 801080a:	079b      	lsls	r3, r3, #30
 801080c:	f100 8105 	bmi.w	8010a1a <_printf_float+0x462>
 8010810:	68e0      	ldr	r0, [r4, #12]
 8010812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010814:	4298      	cmp	r0, r3
 8010816:	bfb8      	it	lt
 8010818:	4618      	movlt	r0, r3
 801081a:	e730      	b.n	801067e <_printf_float+0xc6>
 801081c:	2301      	movs	r3, #1
 801081e:	464a      	mov	r2, r9
 8010820:	4631      	mov	r1, r6
 8010822:	4628      	mov	r0, r5
 8010824:	47b8      	blx	r7
 8010826:	3001      	adds	r0, #1
 8010828:	f43f af27 	beq.w	801067a <_printf_float+0xc2>
 801082c:	f108 0801 	add.w	r8, r8, #1
 8010830:	e7e6      	b.n	8010800 <_printf_float+0x248>
 8010832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010834:	2b00      	cmp	r3, #0
 8010836:	dc39      	bgt.n	80108ac <_printf_float+0x2f4>
 8010838:	4a1b      	ldr	r2, [pc, #108]	; (80108a8 <_printf_float+0x2f0>)
 801083a:	2301      	movs	r3, #1
 801083c:	4631      	mov	r1, r6
 801083e:	4628      	mov	r0, r5
 8010840:	47b8      	blx	r7
 8010842:	3001      	adds	r0, #1
 8010844:	f43f af19 	beq.w	801067a <_printf_float+0xc2>
 8010848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801084c:	4313      	orrs	r3, r2
 801084e:	d102      	bne.n	8010856 <_printf_float+0x29e>
 8010850:	6823      	ldr	r3, [r4, #0]
 8010852:	07d9      	lsls	r1, r3, #31
 8010854:	d5d8      	bpl.n	8010808 <_printf_float+0x250>
 8010856:	ee18 3a10 	vmov	r3, s16
 801085a:	4652      	mov	r2, sl
 801085c:	4631      	mov	r1, r6
 801085e:	4628      	mov	r0, r5
 8010860:	47b8      	blx	r7
 8010862:	3001      	adds	r0, #1
 8010864:	f43f af09 	beq.w	801067a <_printf_float+0xc2>
 8010868:	f04f 0900 	mov.w	r9, #0
 801086c:	f104 0a1a 	add.w	sl, r4, #26
 8010870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010872:	425b      	negs	r3, r3
 8010874:	454b      	cmp	r3, r9
 8010876:	dc01      	bgt.n	801087c <_printf_float+0x2c4>
 8010878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801087a:	e792      	b.n	80107a2 <_printf_float+0x1ea>
 801087c:	2301      	movs	r3, #1
 801087e:	4652      	mov	r2, sl
 8010880:	4631      	mov	r1, r6
 8010882:	4628      	mov	r0, r5
 8010884:	47b8      	blx	r7
 8010886:	3001      	adds	r0, #1
 8010888:	f43f aef7 	beq.w	801067a <_printf_float+0xc2>
 801088c:	f109 0901 	add.w	r9, r9, #1
 8010890:	e7ee      	b.n	8010870 <_printf_float+0x2b8>
 8010892:	bf00      	nop
 8010894:	7fefffff 	.word	0x7fefffff
 8010898:	0802880c 	.word	0x0802880c
 801089c:	08028810 	.word	0x08028810
 80108a0:	08028818 	.word	0x08028818
 80108a4:	08028814 	.word	0x08028814
 80108a8:	0802881c 	.word	0x0802881c
 80108ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80108b0:	429a      	cmp	r2, r3
 80108b2:	bfa8      	it	ge
 80108b4:	461a      	movge	r2, r3
 80108b6:	2a00      	cmp	r2, #0
 80108b8:	4691      	mov	r9, r2
 80108ba:	dc37      	bgt.n	801092c <_printf_float+0x374>
 80108bc:	f04f 0b00 	mov.w	fp, #0
 80108c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108c4:	f104 021a 	add.w	r2, r4, #26
 80108c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80108ca:	9305      	str	r3, [sp, #20]
 80108cc:	eba3 0309 	sub.w	r3, r3, r9
 80108d0:	455b      	cmp	r3, fp
 80108d2:	dc33      	bgt.n	801093c <_printf_float+0x384>
 80108d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108d8:	429a      	cmp	r2, r3
 80108da:	db3b      	blt.n	8010954 <_printf_float+0x39c>
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	07da      	lsls	r2, r3, #31
 80108e0:	d438      	bmi.n	8010954 <_printf_float+0x39c>
 80108e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108e4:	9b05      	ldr	r3, [sp, #20]
 80108e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	eba2 0901 	sub.w	r9, r2, r1
 80108ee:	4599      	cmp	r9, r3
 80108f0:	bfa8      	it	ge
 80108f2:	4699      	movge	r9, r3
 80108f4:	f1b9 0f00 	cmp.w	r9, #0
 80108f8:	dc35      	bgt.n	8010966 <_printf_float+0x3ae>
 80108fa:	f04f 0800 	mov.w	r8, #0
 80108fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010902:	f104 0a1a 	add.w	sl, r4, #26
 8010906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801090a:	1a9b      	subs	r3, r3, r2
 801090c:	eba3 0309 	sub.w	r3, r3, r9
 8010910:	4543      	cmp	r3, r8
 8010912:	f77f af79 	ble.w	8010808 <_printf_float+0x250>
 8010916:	2301      	movs	r3, #1
 8010918:	4652      	mov	r2, sl
 801091a:	4631      	mov	r1, r6
 801091c:	4628      	mov	r0, r5
 801091e:	47b8      	blx	r7
 8010920:	3001      	adds	r0, #1
 8010922:	f43f aeaa 	beq.w	801067a <_printf_float+0xc2>
 8010926:	f108 0801 	add.w	r8, r8, #1
 801092a:	e7ec      	b.n	8010906 <_printf_float+0x34e>
 801092c:	4613      	mov	r3, r2
 801092e:	4631      	mov	r1, r6
 8010930:	4642      	mov	r2, r8
 8010932:	4628      	mov	r0, r5
 8010934:	47b8      	blx	r7
 8010936:	3001      	adds	r0, #1
 8010938:	d1c0      	bne.n	80108bc <_printf_float+0x304>
 801093a:	e69e      	b.n	801067a <_printf_float+0xc2>
 801093c:	2301      	movs	r3, #1
 801093e:	4631      	mov	r1, r6
 8010940:	4628      	mov	r0, r5
 8010942:	9205      	str	r2, [sp, #20]
 8010944:	47b8      	blx	r7
 8010946:	3001      	adds	r0, #1
 8010948:	f43f ae97 	beq.w	801067a <_printf_float+0xc2>
 801094c:	9a05      	ldr	r2, [sp, #20]
 801094e:	f10b 0b01 	add.w	fp, fp, #1
 8010952:	e7b9      	b.n	80108c8 <_printf_float+0x310>
 8010954:	ee18 3a10 	vmov	r3, s16
 8010958:	4652      	mov	r2, sl
 801095a:	4631      	mov	r1, r6
 801095c:	4628      	mov	r0, r5
 801095e:	47b8      	blx	r7
 8010960:	3001      	adds	r0, #1
 8010962:	d1be      	bne.n	80108e2 <_printf_float+0x32a>
 8010964:	e689      	b.n	801067a <_printf_float+0xc2>
 8010966:	9a05      	ldr	r2, [sp, #20]
 8010968:	464b      	mov	r3, r9
 801096a:	4442      	add	r2, r8
 801096c:	4631      	mov	r1, r6
 801096e:	4628      	mov	r0, r5
 8010970:	47b8      	blx	r7
 8010972:	3001      	adds	r0, #1
 8010974:	d1c1      	bne.n	80108fa <_printf_float+0x342>
 8010976:	e680      	b.n	801067a <_printf_float+0xc2>
 8010978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801097a:	2a01      	cmp	r2, #1
 801097c:	dc01      	bgt.n	8010982 <_printf_float+0x3ca>
 801097e:	07db      	lsls	r3, r3, #31
 8010980:	d538      	bpl.n	80109f4 <_printf_float+0x43c>
 8010982:	2301      	movs	r3, #1
 8010984:	4642      	mov	r2, r8
 8010986:	4631      	mov	r1, r6
 8010988:	4628      	mov	r0, r5
 801098a:	47b8      	blx	r7
 801098c:	3001      	adds	r0, #1
 801098e:	f43f ae74 	beq.w	801067a <_printf_float+0xc2>
 8010992:	ee18 3a10 	vmov	r3, s16
 8010996:	4652      	mov	r2, sl
 8010998:	4631      	mov	r1, r6
 801099a:	4628      	mov	r0, r5
 801099c:	47b8      	blx	r7
 801099e:	3001      	adds	r0, #1
 80109a0:	f43f ae6b 	beq.w	801067a <_printf_float+0xc2>
 80109a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80109a8:	2200      	movs	r2, #0
 80109aa:	2300      	movs	r3, #0
 80109ac:	f7f0 f8a4 	bl	8000af8 <__aeabi_dcmpeq>
 80109b0:	b9d8      	cbnz	r0, 80109ea <_printf_float+0x432>
 80109b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109b4:	f108 0201 	add.w	r2, r8, #1
 80109b8:	3b01      	subs	r3, #1
 80109ba:	4631      	mov	r1, r6
 80109bc:	4628      	mov	r0, r5
 80109be:	47b8      	blx	r7
 80109c0:	3001      	adds	r0, #1
 80109c2:	d10e      	bne.n	80109e2 <_printf_float+0x42a>
 80109c4:	e659      	b.n	801067a <_printf_float+0xc2>
 80109c6:	2301      	movs	r3, #1
 80109c8:	4652      	mov	r2, sl
 80109ca:	4631      	mov	r1, r6
 80109cc:	4628      	mov	r0, r5
 80109ce:	47b8      	blx	r7
 80109d0:	3001      	adds	r0, #1
 80109d2:	f43f ae52 	beq.w	801067a <_printf_float+0xc2>
 80109d6:	f108 0801 	add.w	r8, r8, #1
 80109da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109dc:	3b01      	subs	r3, #1
 80109de:	4543      	cmp	r3, r8
 80109e0:	dcf1      	bgt.n	80109c6 <_printf_float+0x40e>
 80109e2:	464b      	mov	r3, r9
 80109e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80109e8:	e6dc      	b.n	80107a4 <_printf_float+0x1ec>
 80109ea:	f04f 0800 	mov.w	r8, #0
 80109ee:	f104 0a1a 	add.w	sl, r4, #26
 80109f2:	e7f2      	b.n	80109da <_printf_float+0x422>
 80109f4:	2301      	movs	r3, #1
 80109f6:	4642      	mov	r2, r8
 80109f8:	e7df      	b.n	80109ba <_printf_float+0x402>
 80109fa:	2301      	movs	r3, #1
 80109fc:	464a      	mov	r2, r9
 80109fe:	4631      	mov	r1, r6
 8010a00:	4628      	mov	r0, r5
 8010a02:	47b8      	blx	r7
 8010a04:	3001      	adds	r0, #1
 8010a06:	f43f ae38 	beq.w	801067a <_printf_float+0xc2>
 8010a0a:	f108 0801 	add.w	r8, r8, #1
 8010a0e:	68e3      	ldr	r3, [r4, #12]
 8010a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a12:	1a5b      	subs	r3, r3, r1
 8010a14:	4543      	cmp	r3, r8
 8010a16:	dcf0      	bgt.n	80109fa <_printf_float+0x442>
 8010a18:	e6fa      	b.n	8010810 <_printf_float+0x258>
 8010a1a:	f04f 0800 	mov.w	r8, #0
 8010a1e:	f104 0919 	add.w	r9, r4, #25
 8010a22:	e7f4      	b.n	8010a0e <_printf_float+0x456>

08010a24 <_printf_common>:
 8010a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a28:	4616      	mov	r6, r2
 8010a2a:	4699      	mov	r9, r3
 8010a2c:	688a      	ldr	r2, [r1, #8]
 8010a2e:	690b      	ldr	r3, [r1, #16]
 8010a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a34:	4293      	cmp	r3, r2
 8010a36:	bfb8      	it	lt
 8010a38:	4613      	movlt	r3, r2
 8010a3a:	6033      	str	r3, [r6, #0]
 8010a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a40:	4607      	mov	r7, r0
 8010a42:	460c      	mov	r4, r1
 8010a44:	b10a      	cbz	r2, 8010a4a <_printf_common+0x26>
 8010a46:	3301      	adds	r3, #1
 8010a48:	6033      	str	r3, [r6, #0]
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	0699      	lsls	r1, r3, #26
 8010a4e:	bf42      	ittt	mi
 8010a50:	6833      	ldrmi	r3, [r6, #0]
 8010a52:	3302      	addmi	r3, #2
 8010a54:	6033      	strmi	r3, [r6, #0]
 8010a56:	6825      	ldr	r5, [r4, #0]
 8010a58:	f015 0506 	ands.w	r5, r5, #6
 8010a5c:	d106      	bne.n	8010a6c <_printf_common+0x48>
 8010a5e:	f104 0a19 	add.w	sl, r4, #25
 8010a62:	68e3      	ldr	r3, [r4, #12]
 8010a64:	6832      	ldr	r2, [r6, #0]
 8010a66:	1a9b      	subs	r3, r3, r2
 8010a68:	42ab      	cmp	r3, r5
 8010a6a:	dc26      	bgt.n	8010aba <_printf_common+0x96>
 8010a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a70:	1e13      	subs	r3, r2, #0
 8010a72:	6822      	ldr	r2, [r4, #0]
 8010a74:	bf18      	it	ne
 8010a76:	2301      	movne	r3, #1
 8010a78:	0692      	lsls	r2, r2, #26
 8010a7a:	d42b      	bmi.n	8010ad4 <_printf_common+0xb0>
 8010a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a80:	4649      	mov	r1, r9
 8010a82:	4638      	mov	r0, r7
 8010a84:	47c0      	blx	r8
 8010a86:	3001      	adds	r0, #1
 8010a88:	d01e      	beq.n	8010ac8 <_printf_common+0xa4>
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	68e5      	ldr	r5, [r4, #12]
 8010a8e:	6832      	ldr	r2, [r6, #0]
 8010a90:	f003 0306 	and.w	r3, r3, #6
 8010a94:	2b04      	cmp	r3, #4
 8010a96:	bf08      	it	eq
 8010a98:	1aad      	subeq	r5, r5, r2
 8010a9a:	68a3      	ldr	r3, [r4, #8]
 8010a9c:	6922      	ldr	r2, [r4, #16]
 8010a9e:	bf0c      	ite	eq
 8010aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010aa4:	2500      	movne	r5, #0
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	bfc4      	itt	gt
 8010aaa:	1a9b      	subgt	r3, r3, r2
 8010aac:	18ed      	addgt	r5, r5, r3
 8010aae:	2600      	movs	r6, #0
 8010ab0:	341a      	adds	r4, #26
 8010ab2:	42b5      	cmp	r5, r6
 8010ab4:	d11a      	bne.n	8010aec <_printf_common+0xc8>
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	e008      	b.n	8010acc <_printf_common+0xa8>
 8010aba:	2301      	movs	r3, #1
 8010abc:	4652      	mov	r2, sl
 8010abe:	4649      	mov	r1, r9
 8010ac0:	4638      	mov	r0, r7
 8010ac2:	47c0      	blx	r8
 8010ac4:	3001      	adds	r0, #1
 8010ac6:	d103      	bne.n	8010ad0 <_printf_common+0xac>
 8010ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8010acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ad0:	3501      	adds	r5, #1
 8010ad2:	e7c6      	b.n	8010a62 <_printf_common+0x3e>
 8010ad4:	18e1      	adds	r1, r4, r3
 8010ad6:	1c5a      	adds	r2, r3, #1
 8010ad8:	2030      	movs	r0, #48	; 0x30
 8010ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ade:	4422      	add	r2, r4
 8010ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ae8:	3302      	adds	r3, #2
 8010aea:	e7c7      	b.n	8010a7c <_printf_common+0x58>
 8010aec:	2301      	movs	r3, #1
 8010aee:	4622      	mov	r2, r4
 8010af0:	4649      	mov	r1, r9
 8010af2:	4638      	mov	r0, r7
 8010af4:	47c0      	blx	r8
 8010af6:	3001      	adds	r0, #1
 8010af8:	d0e6      	beq.n	8010ac8 <_printf_common+0xa4>
 8010afa:	3601      	adds	r6, #1
 8010afc:	e7d9      	b.n	8010ab2 <_printf_common+0x8e>
	...

08010b00 <_printf_i>:
 8010b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b04:	460c      	mov	r4, r1
 8010b06:	4691      	mov	r9, r2
 8010b08:	7e27      	ldrb	r7, [r4, #24]
 8010b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b0c:	2f78      	cmp	r7, #120	; 0x78
 8010b0e:	4680      	mov	r8, r0
 8010b10:	469a      	mov	sl, r3
 8010b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b16:	d807      	bhi.n	8010b28 <_printf_i+0x28>
 8010b18:	2f62      	cmp	r7, #98	; 0x62
 8010b1a:	d80a      	bhi.n	8010b32 <_printf_i+0x32>
 8010b1c:	2f00      	cmp	r7, #0
 8010b1e:	f000 80d8 	beq.w	8010cd2 <_printf_i+0x1d2>
 8010b22:	2f58      	cmp	r7, #88	; 0x58
 8010b24:	f000 80a3 	beq.w	8010c6e <_printf_i+0x16e>
 8010b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b30:	e03a      	b.n	8010ba8 <_printf_i+0xa8>
 8010b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b36:	2b15      	cmp	r3, #21
 8010b38:	d8f6      	bhi.n	8010b28 <_printf_i+0x28>
 8010b3a:	a001      	add	r0, pc, #4	; (adr r0, 8010b40 <_printf_i+0x40>)
 8010b3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010b40:	08010b99 	.word	0x08010b99
 8010b44:	08010bad 	.word	0x08010bad
 8010b48:	08010b29 	.word	0x08010b29
 8010b4c:	08010b29 	.word	0x08010b29
 8010b50:	08010b29 	.word	0x08010b29
 8010b54:	08010b29 	.word	0x08010b29
 8010b58:	08010bad 	.word	0x08010bad
 8010b5c:	08010b29 	.word	0x08010b29
 8010b60:	08010b29 	.word	0x08010b29
 8010b64:	08010b29 	.word	0x08010b29
 8010b68:	08010b29 	.word	0x08010b29
 8010b6c:	08010cb9 	.word	0x08010cb9
 8010b70:	08010bdd 	.word	0x08010bdd
 8010b74:	08010c9b 	.word	0x08010c9b
 8010b78:	08010b29 	.word	0x08010b29
 8010b7c:	08010b29 	.word	0x08010b29
 8010b80:	08010cdb 	.word	0x08010cdb
 8010b84:	08010b29 	.word	0x08010b29
 8010b88:	08010bdd 	.word	0x08010bdd
 8010b8c:	08010b29 	.word	0x08010b29
 8010b90:	08010b29 	.word	0x08010b29
 8010b94:	08010ca3 	.word	0x08010ca3
 8010b98:	680b      	ldr	r3, [r1, #0]
 8010b9a:	1d1a      	adds	r2, r3, #4
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	600a      	str	r2, [r1, #0]
 8010ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ba8:	2301      	movs	r3, #1
 8010baa:	e0a3      	b.n	8010cf4 <_printf_i+0x1f4>
 8010bac:	6825      	ldr	r5, [r4, #0]
 8010bae:	6808      	ldr	r0, [r1, #0]
 8010bb0:	062e      	lsls	r6, r5, #24
 8010bb2:	f100 0304 	add.w	r3, r0, #4
 8010bb6:	d50a      	bpl.n	8010bce <_printf_i+0xce>
 8010bb8:	6805      	ldr	r5, [r0, #0]
 8010bba:	600b      	str	r3, [r1, #0]
 8010bbc:	2d00      	cmp	r5, #0
 8010bbe:	da03      	bge.n	8010bc8 <_printf_i+0xc8>
 8010bc0:	232d      	movs	r3, #45	; 0x2d
 8010bc2:	426d      	negs	r5, r5
 8010bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bc8:	485e      	ldr	r0, [pc, #376]	; (8010d44 <_printf_i+0x244>)
 8010bca:	230a      	movs	r3, #10
 8010bcc:	e019      	b.n	8010c02 <_printf_i+0x102>
 8010bce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010bd2:	6805      	ldr	r5, [r0, #0]
 8010bd4:	600b      	str	r3, [r1, #0]
 8010bd6:	bf18      	it	ne
 8010bd8:	b22d      	sxthne	r5, r5
 8010bda:	e7ef      	b.n	8010bbc <_printf_i+0xbc>
 8010bdc:	680b      	ldr	r3, [r1, #0]
 8010bde:	6825      	ldr	r5, [r4, #0]
 8010be0:	1d18      	adds	r0, r3, #4
 8010be2:	6008      	str	r0, [r1, #0]
 8010be4:	0628      	lsls	r0, r5, #24
 8010be6:	d501      	bpl.n	8010bec <_printf_i+0xec>
 8010be8:	681d      	ldr	r5, [r3, #0]
 8010bea:	e002      	b.n	8010bf2 <_printf_i+0xf2>
 8010bec:	0669      	lsls	r1, r5, #25
 8010bee:	d5fb      	bpl.n	8010be8 <_printf_i+0xe8>
 8010bf0:	881d      	ldrh	r5, [r3, #0]
 8010bf2:	4854      	ldr	r0, [pc, #336]	; (8010d44 <_printf_i+0x244>)
 8010bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8010bf6:	bf0c      	ite	eq
 8010bf8:	2308      	moveq	r3, #8
 8010bfa:	230a      	movne	r3, #10
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c02:	6866      	ldr	r6, [r4, #4]
 8010c04:	60a6      	str	r6, [r4, #8]
 8010c06:	2e00      	cmp	r6, #0
 8010c08:	bfa2      	ittt	ge
 8010c0a:	6821      	ldrge	r1, [r4, #0]
 8010c0c:	f021 0104 	bicge.w	r1, r1, #4
 8010c10:	6021      	strge	r1, [r4, #0]
 8010c12:	b90d      	cbnz	r5, 8010c18 <_printf_i+0x118>
 8010c14:	2e00      	cmp	r6, #0
 8010c16:	d04d      	beq.n	8010cb4 <_printf_i+0x1b4>
 8010c18:	4616      	mov	r6, r2
 8010c1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c1e:	fb03 5711 	mls	r7, r3, r1, r5
 8010c22:	5dc7      	ldrb	r7, [r0, r7]
 8010c24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c28:	462f      	mov	r7, r5
 8010c2a:	42bb      	cmp	r3, r7
 8010c2c:	460d      	mov	r5, r1
 8010c2e:	d9f4      	bls.n	8010c1a <_printf_i+0x11a>
 8010c30:	2b08      	cmp	r3, #8
 8010c32:	d10b      	bne.n	8010c4c <_printf_i+0x14c>
 8010c34:	6823      	ldr	r3, [r4, #0]
 8010c36:	07df      	lsls	r7, r3, #31
 8010c38:	d508      	bpl.n	8010c4c <_printf_i+0x14c>
 8010c3a:	6923      	ldr	r3, [r4, #16]
 8010c3c:	6861      	ldr	r1, [r4, #4]
 8010c3e:	4299      	cmp	r1, r3
 8010c40:	bfde      	ittt	le
 8010c42:	2330      	movle	r3, #48	; 0x30
 8010c44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c4c:	1b92      	subs	r2, r2, r6
 8010c4e:	6122      	str	r2, [r4, #16]
 8010c50:	f8cd a000 	str.w	sl, [sp]
 8010c54:	464b      	mov	r3, r9
 8010c56:	aa03      	add	r2, sp, #12
 8010c58:	4621      	mov	r1, r4
 8010c5a:	4640      	mov	r0, r8
 8010c5c:	f7ff fee2 	bl	8010a24 <_printf_common>
 8010c60:	3001      	adds	r0, #1
 8010c62:	d14c      	bne.n	8010cfe <_printf_i+0x1fe>
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	b004      	add	sp, #16
 8010c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c6e:	4835      	ldr	r0, [pc, #212]	; (8010d44 <_printf_i+0x244>)
 8010c70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010c74:	6823      	ldr	r3, [r4, #0]
 8010c76:	680e      	ldr	r6, [r1, #0]
 8010c78:	061f      	lsls	r7, r3, #24
 8010c7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8010c7e:	600e      	str	r6, [r1, #0]
 8010c80:	d514      	bpl.n	8010cac <_printf_i+0x1ac>
 8010c82:	07d9      	lsls	r1, r3, #31
 8010c84:	bf44      	itt	mi
 8010c86:	f043 0320 	orrmi.w	r3, r3, #32
 8010c8a:	6023      	strmi	r3, [r4, #0]
 8010c8c:	b91d      	cbnz	r5, 8010c96 <_printf_i+0x196>
 8010c8e:	6823      	ldr	r3, [r4, #0]
 8010c90:	f023 0320 	bic.w	r3, r3, #32
 8010c94:	6023      	str	r3, [r4, #0]
 8010c96:	2310      	movs	r3, #16
 8010c98:	e7b0      	b.n	8010bfc <_printf_i+0xfc>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	f043 0320 	orr.w	r3, r3, #32
 8010ca0:	6023      	str	r3, [r4, #0]
 8010ca2:	2378      	movs	r3, #120	; 0x78
 8010ca4:	4828      	ldr	r0, [pc, #160]	; (8010d48 <_printf_i+0x248>)
 8010ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010caa:	e7e3      	b.n	8010c74 <_printf_i+0x174>
 8010cac:	065e      	lsls	r6, r3, #25
 8010cae:	bf48      	it	mi
 8010cb0:	b2ad      	uxthmi	r5, r5
 8010cb2:	e7e6      	b.n	8010c82 <_printf_i+0x182>
 8010cb4:	4616      	mov	r6, r2
 8010cb6:	e7bb      	b.n	8010c30 <_printf_i+0x130>
 8010cb8:	680b      	ldr	r3, [r1, #0]
 8010cba:	6826      	ldr	r6, [r4, #0]
 8010cbc:	6960      	ldr	r0, [r4, #20]
 8010cbe:	1d1d      	adds	r5, r3, #4
 8010cc0:	600d      	str	r5, [r1, #0]
 8010cc2:	0635      	lsls	r5, r6, #24
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	d501      	bpl.n	8010ccc <_printf_i+0x1cc>
 8010cc8:	6018      	str	r0, [r3, #0]
 8010cca:	e002      	b.n	8010cd2 <_printf_i+0x1d2>
 8010ccc:	0671      	lsls	r1, r6, #25
 8010cce:	d5fb      	bpl.n	8010cc8 <_printf_i+0x1c8>
 8010cd0:	8018      	strh	r0, [r3, #0]
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	4616      	mov	r6, r2
 8010cd8:	e7ba      	b.n	8010c50 <_printf_i+0x150>
 8010cda:	680b      	ldr	r3, [r1, #0]
 8010cdc:	1d1a      	adds	r2, r3, #4
 8010cde:	600a      	str	r2, [r1, #0]
 8010ce0:	681e      	ldr	r6, [r3, #0]
 8010ce2:	6862      	ldr	r2, [r4, #4]
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7ef fa92 	bl	8000210 <memchr>
 8010cec:	b108      	cbz	r0, 8010cf2 <_printf_i+0x1f2>
 8010cee:	1b80      	subs	r0, r0, r6
 8010cf0:	6060      	str	r0, [r4, #4]
 8010cf2:	6863      	ldr	r3, [r4, #4]
 8010cf4:	6123      	str	r3, [r4, #16]
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cfc:	e7a8      	b.n	8010c50 <_printf_i+0x150>
 8010cfe:	6923      	ldr	r3, [r4, #16]
 8010d00:	4632      	mov	r2, r6
 8010d02:	4649      	mov	r1, r9
 8010d04:	4640      	mov	r0, r8
 8010d06:	47d0      	blx	sl
 8010d08:	3001      	adds	r0, #1
 8010d0a:	d0ab      	beq.n	8010c64 <_printf_i+0x164>
 8010d0c:	6823      	ldr	r3, [r4, #0]
 8010d0e:	079b      	lsls	r3, r3, #30
 8010d10:	d413      	bmi.n	8010d3a <_printf_i+0x23a>
 8010d12:	68e0      	ldr	r0, [r4, #12]
 8010d14:	9b03      	ldr	r3, [sp, #12]
 8010d16:	4298      	cmp	r0, r3
 8010d18:	bfb8      	it	lt
 8010d1a:	4618      	movlt	r0, r3
 8010d1c:	e7a4      	b.n	8010c68 <_printf_i+0x168>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	4632      	mov	r2, r6
 8010d22:	4649      	mov	r1, r9
 8010d24:	4640      	mov	r0, r8
 8010d26:	47d0      	blx	sl
 8010d28:	3001      	adds	r0, #1
 8010d2a:	d09b      	beq.n	8010c64 <_printf_i+0x164>
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	68e3      	ldr	r3, [r4, #12]
 8010d30:	9903      	ldr	r1, [sp, #12]
 8010d32:	1a5b      	subs	r3, r3, r1
 8010d34:	42ab      	cmp	r3, r5
 8010d36:	dcf2      	bgt.n	8010d1e <_printf_i+0x21e>
 8010d38:	e7eb      	b.n	8010d12 <_printf_i+0x212>
 8010d3a:	2500      	movs	r5, #0
 8010d3c:	f104 0619 	add.w	r6, r4, #25
 8010d40:	e7f5      	b.n	8010d2e <_printf_i+0x22e>
 8010d42:	bf00      	nop
 8010d44:	0802881e 	.word	0x0802881e
 8010d48:	0802882f 	.word	0x0802882f

08010d4c <_scanf_float>:
 8010d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d50:	b087      	sub	sp, #28
 8010d52:	4617      	mov	r7, r2
 8010d54:	9303      	str	r3, [sp, #12]
 8010d56:	688b      	ldr	r3, [r1, #8]
 8010d58:	1e5a      	subs	r2, r3, #1
 8010d5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010d5e:	bf83      	ittte	hi
 8010d60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010d64:	195b      	addhi	r3, r3, r5
 8010d66:	9302      	strhi	r3, [sp, #8]
 8010d68:	2300      	movls	r3, #0
 8010d6a:	bf86      	itte	hi
 8010d6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010d70:	608b      	strhi	r3, [r1, #8]
 8010d72:	9302      	strls	r3, [sp, #8]
 8010d74:	680b      	ldr	r3, [r1, #0]
 8010d76:	468b      	mov	fp, r1
 8010d78:	2500      	movs	r5, #0
 8010d7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010d7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010d82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010d86:	4680      	mov	r8, r0
 8010d88:	460c      	mov	r4, r1
 8010d8a:	465e      	mov	r6, fp
 8010d8c:	46aa      	mov	sl, r5
 8010d8e:	46a9      	mov	r9, r5
 8010d90:	9501      	str	r5, [sp, #4]
 8010d92:	68a2      	ldr	r2, [r4, #8]
 8010d94:	b152      	cbz	r2, 8010dac <_scanf_float+0x60>
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	2b4e      	cmp	r3, #78	; 0x4e
 8010d9c:	d864      	bhi.n	8010e68 <_scanf_float+0x11c>
 8010d9e:	2b40      	cmp	r3, #64	; 0x40
 8010da0:	d83c      	bhi.n	8010e1c <_scanf_float+0xd0>
 8010da2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010da6:	b2c8      	uxtb	r0, r1
 8010da8:	280e      	cmp	r0, #14
 8010daa:	d93a      	bls.n	8010e22 <_scanf_float+0xd6>
 8010dac:	f1b9 0f00 	cmp.w	r9, #0
 8010db0:	d003      	beq.n	8010dba <_scanf_float+0x6e>
 8010db2:	6823      	ldr	r3, [r4, #0]
 8010db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010db8:	6023      	str	r3, [r4, #0]
 8010dba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010dbe:	f1ba 0f01 	cmp.w	sl, #1
 8010dc2:	f200 8113 	bhi.w	8010fec <_scanf_float+0x2a0>
 8010dc6:	455e      	cmp	r6, fp
 8010dc8:	f200 8105 	bhi.w	8010fd6 <_scanf_float+0x28a>
 8010dcc:	2501      	movs	r5, #1
 8010dce:	4628      	mov	r0, r5
 8010dd0:	b007      	add	sp, #28
 8010dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010dda:	2a0d      	cmp	r2, #13
 8010ddc:	d8e6      	bhi.n	8010dac <_scanf_float+0x60>
 8010dde:	a101      	add	r1, pc, #4	; (adr r1, 8010de4 <_scanf_float+0x98>)
 8010de0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010de4:	08010f23 	.word	0x08010f23
 8010de8:	08010dad 	.word	0x08010dad
 8010dec:	08010dad 	.word	0x08010dad
 8010df0:	08010dad 	.word	0x08010dad
 8010df4:	08010f83 	.word	0x08010f83
 8010df8:	08010f5b 	.word	0x08010f5b
 8010dfc:	08010dad 	.word	0x08010dad
 8010e00:	08010dad 	.word	0x08010dad
 8010e04:	08010f31 	.word	0x08010f31
 8010e08:	08010dad 	.word	0x08010dad
 8010e0c:	08010dad 	.word	0x08010dad
 8010e10:	08010dad 	.word	0x08010dad
 8010e14:	08010dad 	.word	0x08010dad
 8010e18:	08010ee9 	.word	0x08010ee9
 8010e1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010e20:	e7db      	b.n	8010dda <_scanf_float+0x8e>
 8010e22:	290e      	cmp	r1, #14
 8010e24:	d8c2      	bhi.n	8010dac <_scanf_float+0x60>
 8010e26:	a001      	add	r0, pc, #4	; (adr r0, 8010e2c <_scanf_float+0xe0>)
 8010e28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010e2c:	08010edb 	.word	0x08010edb
 8010e30:	08010dad 	.word	0x08010dad
 8010e34:	08010edb 	.word	0x08010edb
 8010e38:	08010f6f 	.word	0x08010f6f
 8010e3c:	08010dad 	.word	0x08010dad
 8010e40:	08010e89 	.word	0x08010e89
 8010e44:	08010ec5 	.word	0x08010ec5
 8010e48:	08010ec5 	.word	0x08010ec5
 8010e4c:	08010ec5 	.word	0x08010ec5
 8010e50:	08010ec5 	.word	0x08010ec5
 8010e54:	08010ec5 	.word	0x08010ec5
 8010e58:	08010ec5 	.word	0x08010ec5
 8010e5c:	08010ec5 	.word	0x08010ec5
 8010e60:	08010ec5 	.word	0x08010ec5
 8010e64:	08010ec5 	.word	0x08010ec5
 8010e68:	2b6e      	cmp	r3, #110	; 0x6e
 8010e6a:	d809      	bhi.n	8010e80 <_scanf_float+0x134>
 8010e6c:	2b60      	cmp	r3, #96	; 0x60
 8010e6e:	d8b2      	bhi.n	8010dd6 <_scanf_float+0x8a>
 8010e70:	2b54      	cmp	r3, #84	; 0x54
 8010e72:	d077      	beq.n	8010f64 <_scanf_float+0x218>
 8010e74:	2b59      	cmp	r3, #89	; 0x59
 8010e76:	d199      	bne.n	8010dac <_scanf_float+0x60>
 8010e78:	2d07      	cmp	r5, #7
 8010e7a:	d197      	bne.n	8010dac <_scanf_float+0x60>
 8010e7c:	2508      	movs	r5, #8
 8010e7e:	e029      	b.n	8010ed4 <_scanf_float+0x188>
 8010e80:	2b74      	cmp	r3, #116	; 0x74
 8010e82:	d06f      	beq.n	8010f64 <_scanf_float+0x218>
 8010e84:	2b79      	cmp	r3, #121	; 0x79
 8010e86:	e7f6      	b.n	8010e76 <_scanf_float+0x12a>
 8010e88:	6821      	ldr	r1, [r4, #0]
 8010e8a:	05c8      	lsls	r0, r1, #23
 8010e8c:	d51a      	bpl.n	8010ec4 <_scanf_float+0x178>
 8010e8e:	9b02      	ldr	r3, [sp, #8]
 8010e90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010e94:	6021      	str	r1, [r4, #0]
 8010e96:	f109 0901 	add.w	r9, r9, #1
 8010e9a:	b11b      	cbz	r3, 8010ea4 <_scanf_float+0x158>
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	3201      	adds	r2, #1
 8010ea0:	9302      	str	r3, [sp, #8]
 8010ea2:	60a2      	str	r2, [r4, #8]
 8010ea4:	68a3      	ldr	r3, [r4, #8]
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	60a3      	str	r3, [r4, #8]
 8010eaa:	6923      	ldr	r3, [r4, #16]
 8010eac:	3301      	adds	r3, #1
 8010eae:	6123      	str	r3, [r4, #16]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	3b01      	subs	r3, #1
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	607b      	str	r3, [r7, #4]
 8010eb8:	f340 8084 	ble.w	8010fc4 <_scanf_float+0x278>
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	603b      	str	r3, [r7, #0]
 8010ec2:	e766      	b.n	8010d92 <_scanf_float+0x46>
 8010ec4:	eb1a 0f05 	cmn.w	sl, r5
 8010ec8:	f47f af70 	bne.w	8010dac <_scanf_float+0x60>
 8010ecc:	6822      	ldr	r2, [r4, #0]
 8010ece:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010ed2:	6022      	str	r2, [r4, #0]
 8010ed4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ed8:	e7e4      	b.n	8010ea4 <_scanf_float+0x158>
 8010eda:	6822      	ldr	r2, [r4, #0]
 8010edc:	0610      	lsls	r0, r2, #24
 8010ede:	f57f af65 	bpl.w	8010dac <_scanf_float+0x60>
 8010ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ee6:	e7f4      	b.n	8010ed2 <_scanf_float+0x186>
 8010ee8:	f1ba 0f00 	cmp.w	sl, #0
 8010eec:	d10e      	bne.n	8010f0c <_scanf_float+0x1c0>
 8010eee:	f1b9 0f00 	cmp.w	r9, #0
 8010ef2:	d10e      	bne.n	8010f12 <_scanf_float+0x1c6>
 8010ef4:	6822      	ldr	r2, [r4, #0]
 8010ef6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010efa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010efe:	d108      	bne.n	8010f12 <_scanf_float+0x1c6>
 8010f00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010f04:	6022      	str	r2, [r4, #0]
 8010f06:	f04f 0a01 	mov.w	sl, #1
 8010f0a:	e7e3      	b.n	8010ed4 <_scanf_float+0x188>
 8010f0c:	f1ba 0f02 	cmp.w	sl, #2
 8010f10:	d055      	beq.n	8010fbe <_scanf_float+0x272>
 8010f12:	2d01      	cmp	r5, #1
 8010f14:	d002      	beq.n	8010f1c <_scanf_float+0x1d0>
 8010f16:	2d04      	cmp	r5, #4
 8010f18:	f47f af48 	bne.w	8010dac <_scanf_float+0x60>
 8010f1c:	3501      	adds	r5, #1
 8010f1e:	b2ed      	uxtb	r5, r5
 8010f20:	e7d8      	b.n	8010ed4 <_scanf_float+0x188>
 8010f22:	f1ba 0f01 	cmp.w	sl, #1
 8010f26:	f47f af41 	bne.w	8010dac <_scanf_float+0x60>
 8010f2a:	f04f 0a02 	mov.w	sl, #2
 8010f2e:	e7d1      	b.n	8010ed4 <_scanf_float+0x188>
 8010f30:	b97d      	cbnz	r5, 8010f52 <_scanf_float+0x206>
 8010f32:	f1b9 0f00 	cmp.w	r9, #0
 8010f36:	f47f af3c 	bne.w	8010db2 <_scanf_float+0x66>
 8010f3a:	6822      	ldr	r2, [r4, #0]
 8010f3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010f40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010f44:	f47f af39 	bne.w	8010dba <_scanf_float+0x6e>
 8010f48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010f4c:	6022      	str	r2, [r4, #0]
 8010f4e:	2501      	movs	r5, #1
 8010f50:	e7c0      	b.n	8010ed4 <_scanf_float+0x188>
 8010f52:	2d03      	cmp	r5, #3
 8010f54:	d0e2      	beq.n	8010f1c <_scanf_float+0x1d0>
 8010f56:	2d05      	cmp	r5, #5
 8010f58:	e7de      	b.n	8010f18 <_scanf_float+0x1cc>
 8010f5a:	2d02      	cmp	r5, #2
 8010f5c:	f47f af26 	bne.w	8010dac <_scanf_float+0x60>
 8010f60:	2503      	movs	r5, #3
 8010f62:	e7b7      	b.n	8010ed4 <_scanf_float+0x188>
 8010f64:	2d06      	cmp	r5, #6
 8010f66:	f47f af21 	bne.w	8010dac <_scanf_float+0x60>
 8010f6a:	2507      	movs	r5, #7
 8010f6c:	e7b2      	b.n	8010ed4 <_scanf_float+0x188>
 8010f6e:	6822      	ldr	r2, [r4, #0]
 8010f70:	0591      	lsls	r1, r2, #22
 8010f72:	f57f af1b 	bpl.w	8010dac <_scanf_float+0x60>
 8010f76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010f7a:	6022      	str	r2, [r4, #0]
 8010f7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010f80:	e7a8      	b.n	8010ed4 <_scanf_float+0x188>
 8010f82:	6822      	ldr	r2, [r4, #0]
 8010f84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010f88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010f8c:	d006      	beq.n	8010f9c <_scanf_float+0x250>
 8010f8e:	0550      	lsls	r0, r2, #21
 8010f90:	f57f af0c 	bpl.w	8010dac <_scanf_float+0x60>
 8010f94:	f1b9 0f00 	cmp.w	r9, #0
 8010f98:	f43f af0f 	beq.w	8010dba <_scanf_float+0x6e>
 8010f9c:	0591      	lsls	r1, r2, #22
 8010f9e:	bf58      	it	pl
 8010fa0:	9901      	ldrpl	r1, [sp, #4]
 8010fa2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010fa6:	bf58      	it	pl
 8010fa8:	eba9 0101 	subpl.w	r1, r9, r1
 8010fac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010fb0:	bf58      	it	pl
 8010fb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010fb6:	6022      	str	r2, [r4, #0]
 8010fb8:	f04f 0900 	mov.w	r9, #0
 8010fbc:	e78a      	b.n	8010ed4 <_scanf_float+0x188>
 8010fbe:	f04f 0a03 	mov.w	sl, #3
 8010fc2:	e787      	b.n	8010ed4 <_scanf_float+0x188>
 8010fc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010fc8:	4639      	mov	r1, r7
 8010fca:	4640      	mov	r0, r8
 8010fcc:	4798      	blx	r3
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	f43f aedf 	beq.w	8010d92 <_scanf_float+0x46>
 8010fd4:	e6ea      	b.n	8010dac <_scanf_float+0x60>
 8010fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010fde:	463a      	mov	r2, r7
 8010fe0:	4640      	mov	r0, r8
 8010fe2:	4798      	blx	r3
 8010fe4:	6923      	ldr	r3, [r4, #16]
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	6123      	str	r3, [r4, #16]
 8010fea:	e6ec      	b.n	8010dc6 <_scanf_float+0x7a>
 8010fec:	1e6b      	subs	r3, r5, #1
 8010fee:	2b06      	cmp	r3, #6
 8010ff0:	d825      	bhi.n	801103e <_scanf_float+0x2f2>
 8010ff2:	2d02      	cmp	r5, #2
 8010ff4:	d836      	bhi.n	8011064 <_scanf_float+0x318>
 8010ff6:	455e      	cmp	r6, fp
 8010ff8:	f67f aee8 	bls.w	8010dcc <_scanf_float+0x80>
 8010ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011000:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011004:	463a      	mov	r2, r7
 8011006:	4640      	mov	r0, r8
 8011008:	4798      	blx	r3
 801100a:	6923      	ldr	r3, [r4, #16]
 801100c:	3b01      	subs	r3, #1
 801100e:	6123      	str	r3, [r4, #16]
 8011010:	e7f1      	b.n	8010ff6 <_scanf_float+0x2aa>
 8011012:	9802      	ldr	r0, [sp, #8]
 8011014:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011018:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801101c:	9002      	str	r0, [sp, #8]
 801101e:	463a      	mov	r2, r7
 8011020:	4640      	mov	r0, r8
 8011022:	4798      	blx	r3
 8011024:	6923      	ldr	r3, [r4, #16]
 8011026:	3b01      	subs	r3, #1
 8011028:	6123      	str	r3, [r4, #16]
 801102a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801102e:	fa5f fa8a 	uxtb.w	sl, sl
 8011032:	f1ba 0f02 	cmp.w	sl, #2
 8011036:	d1ec      	bne.n	8011012 <_scanf_float+0x2c6>
 8011038:	3d03      	subs	r5, #3
 801103a:	b2ed      	uxtb	r5, r5
 801103c:	1b76      	subs	r6, r6, r5
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	05da      	lsls	r2, r3, #23
 8011042:	d52f      	bpl.n	80110a4 <_scanf_float+0x358>
 8011044:	055b      	lsls	r3, r3, #21
 8011046:	d510      	bpl.n	801106a <_scanf_float+0x31e>
 8011048:	455e      	cmp	r6, fp
 801104a:	f67f aebf 	bls.w	8010dcc <_scanf_float+0x80>
 801104e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011052:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011056:	463a      	mov	r2, r7
 8011058:	4640      	mov	r0, r8
 801105a:	4798      	blx	r3
 801105c:	6923      	ldr	r3, [r4, #16]
 801105e:	3b01      	subs	r3, #1
 8011060:	6123      	str	r3, [r4, #16]
 8011062:	e7f1      	b.n	8011048 <_scanf_float+0x2fc>
 8011064:	46aa      	mov	sl, r5
 8011066:	9602      	str	r6, [sp, #8]
 8011068:	e7df      	b.n	801102a <_scanf_float+0x2de>
 801106a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801106e:	6923      	ldr	r3, [r4, #16]
 8011070:	2965      	cmp	r1, #101	; 0x65
 8011072:	f103 33ff 	add.w	r3, r3, #4294967295
 8011076:	f106 35ff 	add.w	r5, r6, #4294967295
 801107a:	6123      	str	r3, [r4, #16]
 801107c:	d00c      	beq.n	8011098 <_scanf_float+0x34c>
 801107e:	2945      	cmp	r1, #69	; 0x45
 8011080:	d00a      	beq.n	8011098 <_scanf_float+0x34c>
 8011082:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011086:	463a      	mov	r2, r7
 8011088:	4640      	mov	r0, r8
 801108a:	4798      	blx	r3
 801108c:	6923      	ldr	r3, [r4, #16]
 801108e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011092:	3b01      	subs	r3, #1
 8011094:	1eb5      	subs	r5, r6, #2
 8011096:	6123      	str	r3, [r4, #16]
 8011098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801109c:	463a      	mov	r2, r7
 801109e:	4640      	mov	r0, r8
 80110a0:	4798      	blx	r3
 80110a2:	462e      	mov	r6, r5
 80110a4:	6825      	ldr	r5, [r4, #0]
 80110a6:	f015 0510 	ands.w	r5, r5, #16
 80110aa:	d158      	bne.n	801115e <_scanf_float+0x412>
 80110ac:	7035      	strb	r5, [r6, #0]
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80110b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110b8:	d11c      	bne.n	80110f4 <_scanf_float+0x3a8>
 80110ba:	9b01      	ldr	r3, [sp, #4]
 80110bc:	454b      	cmp	r3, r9
 80110be:	eba3 0209 	sub.w	r2, r3, r9
 80110c2:	d124      	bne.n	801110e <_scanf_float+0x3c2>
 80110c4:	2200      	movs	r2, #0
 80110c6:	4659      	mov	r1, fp
 80110c8:	4640      	mov	r0, r8
 80110ca:	f000 fe9b 	bl	8011e04 <_strtod_r>
 80110ce:	9b03      	ldr	r3, [sp, #12]
 80110d0:	6821      	ldr	r1, [r4, #0]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f011 0f02 	tst.w	r1, #2
 80110d8:	ec57 6b10 	vmov	r6, r7, d0
 80110dc:	f103 0204 	add.w	r2, r3, #4
 80110e0:	d020      	beq.n	8011124 <_scanf_float+0x3d8>
 80110e2:	9903      	ldr	r1, [sp, #12]
 80110e4:	600a      	str	r2, [r1, #0]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	e9c3 6700 	strd	r6, r7, [r3]
 80110ec:	68e3      	ldr	r3, [r4, #12]
 80110ee:	3301      	adds	r3, #1
 80110f0:	60e3      	str	r3, [r4, #12]
 80110f2:	e66c      	b.n	8010dce <_scanf_float+0x82>
 80110f4:	9b04      	ldr	r3, [sp, #16]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d0e4      	beq.n	80110c4 <_scanf_float+0x378>
 80110fa:	9905      	ldr	r1, [sp, #20]
 80110fc:	230a      	movs	r3, #10
 80110fe:	462a      	mov	r2, r5
 8011100:	3101      	adds	r1, #1
 8011102:	4640      	mov	r0, r8
 8011104:	f000 ff70 	bl	8011fe8 <_strtol_r>
 8011108:	9b04      	ldr	r3, [sp, #16]
 801110a:	9e05      	ldr	r6, [sp, #20]
 801110c:	1ac2      	subs	r2, r0, r3
 801110e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011112:	429e      	cmp	r6, r3
 8011114:	bf28      	it	cs
 8011116:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801111a:	4912      	ldr	r1, [pc, #72]	; (8011164 <_scanf_float+0x418>)
 801111c:	4630      	mov	r0, r6
 801111e:	f000 f82b 	bl	8011178 <siprintf>
 8011122:	e7cf      	b.n	80110c4 <_scanf_float+0x378>
 8011124:	f011 0f04 	tst.w	r1, #4
 8011128:	9903      	ldr	r1, [sp, #12]
 801112a:	600a      	str	r2, [r1, #0]
 801112c:	d1db      	bne.n	80110e6 <_scanf_float+0x39a>
 801112e:	f8d3 8000 	ldr.w	r8, [r3]
 8011132:	ee10 2a10 	vmov	r2, s0
 8011136:	ee10 0a10 	vmov	r0, s0
 801113a:	463b      	mov	r3, r7
 801113c:	4639      	mov	r1, r7
 801113e:	f7ef fd0d 	bl	8000b5c <__aeabi_dcmpun>
 8011142:	b128      	cbz	r0, 8011150 <_scanf_float+0x404>
 8011144:	4808      	ldr	r0, [pc, #32]	; (8011168 <_scanf_float+0x41c>)
 8011146:	f000 f811 	bl	801116c <nanf>
 801114a:	ed88 0a00 	vstr	s0, [r8]
 801114e:	e7cd      	b.n	80110ec <_scanf_float+0x3a0>
 8011150:	4630      	mov	r0, r6
 8011152:	4639      	mov	r1, r7
 8011154:	f7ef fd60 	bl	8000c18 <__aeabi_d2f>
 8011158:	f8c8 0000 	str.w	r0, [r8]
 801115c:	e7c6      	b.n	80110ec <_scanf_float+0x3a0>
 801115e:	2500      	movs	r5, #0
 8011160:	e635      	b.n	8010dce <_scanf_float+0x82>
 8011162:	bf00      	nop
 8011164:	08028840 	.word	0x08028840
 8011168:	0802894b 	.word	0x0802894b

0801116c <nanf>:
 801116c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011174 <nanf+0x8>
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	7fc00000 	.word	0x7fc00000

08011178 <siprintf>:
 8011178:	b40e      	push	{r1, r2, r3}
 801117a:	b500      	push	{lr}
 801117c:	b09c      	sub	sp, #112	; 0x70
 801117e:	ab1d      	add	r3, sp, #116	; 0x74
 8011180:	9002      	str	r0, [sp, #8]
 8011182:	9006      	str	r0, [sp, #24]
 8011184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011188:	4809      	ldr	r0, [pc, #36]	; (80111b0 <siprintf+0x38>)
 801118a:	9107      	str	r1, [sp, #28]
 801118c:	9104      	str	r1, [sp, #16]
 801118e:	4909      	ldr	r1, [pc, #36]	; (80111b4 <siprintf+0x3c>)
 8011190:	f853 2b04 	ldr.w	r2, [r3], #4
 8011194:	9105      	str	r1, [sp, #20]
 8011196:	6800      	ldr	r0, [r0, #0]
 8011198:	9301      	str	r3, [sp, #4]
 801119a:	a902      	add	r1, sp, #8
 801119c:	f002 ff46 	bl	801402c <_svfiprintf_r>
 80111a0:	9b02      	ldr	r3, [sp, #8]
 80111a2:	2200      	movs	r2, #0
 80111a4:	701a      	strb	r2, [r3, #0]
 80111a6:	b01c      	add	sp, #112	; 0x70
 80111a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80111ac:	b003      	add	sp, #12
 80111ae:	4770      	bx	lr
 80111b0:	20000040 	.word	0x20000040
 80111b4:	ffff0208 	.word	0xffff0208

080111b8 <sulp>:
 80111b8:	b570      	push	{r4, r5, r6, lr}
 80111ba:	4604      	mov	r4, r0
 80111bc:	460d      	mov	r5, r1
 80111be:	ec45 4b10 	vmov	d0, r4, r5
 80111c2:	4616      	mov	r6, r2
 80111c4:	f002 fcce 	bl	8013b64 <__ulp>
 80111c8:	ec51 0b10 	vmov	r0, r1, d0
 80111cc:	b17e      	cbz	r6, 80111ee <sulp+0x36>
 80111ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80111d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	dd09      	ble.n	80111ee <sulp+0x36>
 80111da:	051b      	lsls	r3, r3, #20
 80111dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80111e0:	2400      	movs	r4, #0
 80111e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80111e6:	4622      	mov	r2, r4
 80111e8:	462b      	mov	r3, r5
 80111ea:	f7ef fa1d 	bl	8000628 <__aeabi_dmul>
 80111ee:	bd70      	pop	{r4, r5, r6, pc}

080111f0 <_strtod_l>:
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	b0a3      	sub	sp, #140	; 0x8c
 80111f6:	461f      	mov	r7, r3
 80111f8:	2300      	movs	r3, #0
 80111fa:	931e      	str	r3, [sp, #120]	; 0x78
 80111fc:	4ba4      	ldr	r3, [pc, #656]	; (8011490 <_strtod_l+0x2a0>)
 80111fe:	9219      	str	r2, [sp, #100]	; 0x64
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	9307      	str	r3, [sp, #28]
 8011204:	4604      	mov	r4, r0
 8011206:	4618      	mov	r0, r3
 8011208:	4688      	mov	r8, r1
 801120a:	f7ee fff3 	bl	80001f4 <strlen>
 801120e:	f04f 0a00 	mov.w	sl, #0
 8011212:	4605      	mov	r5, r0
 8011214:	f04f 0b00 	mov.w	fp, #0
 8011218:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801121c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801121e:	781a      	ldrb	r2, [r3, #0]
 8011220:	2a2b      	cmp	r2, #43	; 0x2b
 8011222:	d04c      	beq.n	80112be <_strtod_l+0xce>
 8011224:	d839      	bhi.n	801129a <_strtod_l+0xaa>
 8011226:	2a0d      	cmp	r2, #13
 8011228:	d832      	bhi.n	8011290 <_strtod_l+0xa0>
 801122a:	2a08      	cmp	r2, #8
 801122c:	d832      	bhi.n	8011294 <_strtod_l+0xa4>
 801122e:	2a00      	cmp	r2, #0
 8011230:	d03c      	beq.n	80112ac <_strtod_l+0xbc>
 8011232:	2300      	movs	r3, #0
 8011234:	930e      	str	r3, [sp, #56]	; 0x38
 8011236:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011238:	7833      	ldrb	r3, [r6, #0]
 801123a:	2b30      	cmp	r3, #48	; 0x30
 801123c:	f040 80b4 	bne.w	80113a8 <_strtod_l+0x1b8>
 8011240:	7873      	ldrb	r3, [r6, #1]
 8011242:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011246:	2b58      	cmp	r3, #88	; 0x58
 8011248:	d16c      	bne.n	8011324 <_strtod_l+0x134>
 801124a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801124c:	9301      	str	r3, [sp, #4]
 801124e:	ab1e      	add	r3, sp, #120	; 0x78
 8011250:	9702      	str	r7, [sp, #8]
 8011252:	9300      	str	r3, [sp, #0]
 8011254:	4a8f      	ldr	r2, [pc, #572]	; (8011494 <_strtod_l+0x2a4>)
 8011256:	ab1f      	add	r3, sp, #124	; 0x7c
 8011258:	a91d      	add	r1, sp, #116	; 0x74
 801125a:	4620      	mov	r0, r4
 801125c:	f001 fde2 	bl	8012e24 <__gethex>
 8011260:	f010 0707 	ands.w	r7, r0, #7
 8011264:	4605      	mov	r5, r0
 8011266:	d005      	beq.n	8011274 <_strtod_l+0x84>
 8011268:	2f06      	cmp	r7, #6
 801126a:	d12a      	bne.n	80112c2 <_strtod_l+0xd2>
 801126c:	3601      	adds	r6, #1
 801126e:	2300      	movs	r3, #0
 8011270:	961d      	str	r6, [sp, #116]	; 0x74
 8011272:	930e      	str	r3, [sp, #56]	; 0x38
 8011274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011276:	2b00      	cmp	r3, #0
 8011278:	f040 8596 	bne.w	8011da8 <_strtod_l+0xbb8>
 801127c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801127e:	b1db      	cbz	r3, 80112b8 <_strtod_l+0xc8>
 8011280:	4652      	mov	r2, sl
 8011282:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011286:	ec43 2b10 	vmov	d0, r2, r3
 801128a:	b023      	add	sp, #140	; 0x8c
 801128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011290:	2a20      	cmp	r2, #32
 8011292:	d1ce      	bne.n	8011232 <_strtod_l+0x42>
 8011294:	3301      	adds	r3, #1
 8011296:	931d      	str	r3, [sp, #116]	; 0x74
 8011298:	e7c0      	b.n	801121c <_strtod_l+0x2c>
 801129a:	2a2d      	cmp	r2, #45	; 0x2d
 801129c:	d1c9      	bne.n	8011232 <_strtod_l+0x42>
 801129e:	2201      	movs	r2, #1
 80112a0:	920e      	str	r2, [sp, #56]	; 0x38
 80112a2:	1c5a      	adds	r2, r3, #1
 80112a4:	921d      	str	r2, [sp, #116]	; 0x74
 80112a6:	785b      	ldrb	r3, [r3, #1]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1c4      	bne.n	8011236 <_strtod_l+0x46>
 80112ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80112ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f040 8576 	bne.w	8011da4 <_strtod_l+0xbb4>
 80112b8:	4652      	mov	r2, sl
 80112ba:	465b      	mov	r3, fp
 80112bc:	e7e3      	b.n	8011286 <_strtod_l+0x96>
 80112be:	2200      	movs	r2, #0
 80112c0:	e7ee      	b.n	80112a0 <_strtod_l+0xb0>
 80112c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80112c4:	b13a      	cbz	r2, 80112d6 <_strtod_l+0xe6>
 80112c6:	2135      	movs	r1, #53	; 0x35
 80112c8:	a820      	add	r0, sp, #128	; 0x80
 80112ca:	f002 fd56 	bl	8013d7a <__copybits>
 80112ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80112d0:	4620      	mov	r0, r4
 80112d2:	f002 f91b 	bl	801350c <_Bfree>
 80112d6:	3f01      	subs	r7, #1
 80112d8:	2f05      	cmp	r7, #5
 80112da:	d807      	bhi.n	80112ec <_strtod_l+0xfc>
 80112dc:	e8df f007 	tbb	[pc, r7]
 80112e0:	1d180b0e 	.word	0x1d180b0e
 80112e4:	030e      	.short	0x030e
 80112e6:	f04f 0b00 	mov.w	fp, #0
 80112ea:	46da      	mov	sl, fp
 80112ec:	0728      	lsls	r0, r5, #28
 80112ee:	d5c1      	bpl.n	8011274 <_strtod_l+0x84>
 80112f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80112f4:	e7be      	b.n	8011274 <_strtod_l+0x84>
 80112f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80112fa:	e7f7      	b.n	80112ec <_strtod_l+0xfc>
 80112fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011300:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011306:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801130a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801130e:	e7ed      	b.n	80112ec <_strtod_l+0xfc>
 8011310:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011498 <_strtod_l+0x2a8>
 8011314:	f04f 0a00 	mov.w	sl, #0
 8011318:	e7e8      	b.n	80112ec <_strtod_l+0xfc>
 801131a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801131e:	f04f 3aff 	mov.w	sl, #4294967295
 8011322:	e7e3      	b.n	80112ec <_strtod_l+0xfc>
 8011324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	921d      	str	r2, [sp, #116]	; 0x74
 801132a:	785b      	ldrb	r3, [r3, #1]
 801132c:	2b30      	cmp	r3, #48	; 0x30
 801132e:	d0f9      	beq.n	8011324 <_strtod_l+0x134>
 8011330:	2b00      	cmp	r3, #0
 8011332:	d09f      	beq.n	8011274 <_strtod_l+0x84>
 8011334:	2301      	movs	r3, #1
 8011336:	f04f 0900 	mov.w	r9, #0
 801133a:	9304      	str	r3, [sp, #16]
 801133c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801133e:	930a      	str	r3, [sp, #40]	; 0x28
 8011340:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011344:	464f      	mov	r7, r9
 8011346:	220a      	movs	r2, #10
 8011348:	981d      	ldr	r0, [sp, #116]	; 0x74
 801134a:	7806      	ldrb	r6, [r0, #0]
 801134c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011350:	b2d9      	uxtb	r1, r3
 8011352:	2909      	cmp	r1, #9
 8011354:	d92a      	bls.n	80113ac <_strtod_l+0x1bc>
 8011356:	9907      	ldr	r1, [sp, #28]
 8011358:	462a      	mov	r2, r5
 801135a:	f003 f8d9 	bl	8014510 <strncmp>
 801135e:	b398      	cbz	r0, 80113c8 <_strtod_l+0x1d8>
 8011360:	2000      	movs	r0, #0
 8011362:	4633      	mov	r3, r6
 8011364:	463d      	mov	r5, r7
 8011366:	9007      	str	r0, [sp, #28]
 8011368:	4602      	mov	r2, r0
 801136a:	2b65      	cmp	r3, #101	; 0x65
 801136c:	d001      	beq.n	8011372 <_strtod_l+0x182>
 801136e:	2b45      	cmp	r3, #69	; 0x45
 8011370:	d118      	bne.n	80113a4 <_strtod_l+0x1b4>
 8011372:	b91d      	cbnz	r5, 801137c <_strtod_l+0x18c>
 8011374:	9b04      	ldr	r3, [sp, #16]
 8011376:	4303      	orrs	r3, r0
 8011378:	d098      	beq.n	80112ac <_strtod_l+0xbc>
 801137a:	2500      	movs	r5, #0
 801137c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011380:	f108 0301 	add.w	r3, r8, #1
 8011384:	931d      	str	r3, [sp, #116]	; 0x74
 8011386:	f898 3001 	ldrb.w	r3, [r8, #1]
 801138a:	2b2b      	cmp	r3, #43	; 0x2b
 801138c:	d075      	beq.n	801147a <_strtod_l+0x28a>
 801138e:	2b2d      	cmp	r3, #45	; 0x2d
 8011390:	d07b      	beq.n	801148a <_strtod_l+0x29a>
 8011392:	f04f 0c00 	mov.w	ip, #0
 8011396:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801139a:	2909      	cmp	r1, #9
 801139c:	f240 8082 	bls.w	80114a4 <_strtod_l+0x2b4>
 80113a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80113a4:	2600      	movs	r6, #0
 80113a6:	e09d      	b.n	80114e4 <_strtod_l+0x2f4>
 80113a8:	2300      	movs	r3, #0
 80113aa:	e7c4      	b.n	8011336 <_strtod_l+0x146>
 80113ac:	2f08      	cmp	r7, #8
 80113ae:	bfd8      	it	le
 80113b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80113b2:	f100 0001 	add.w	r0, r0, #1
 80113b6:	bfda      	itte	le
 80113b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80113bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80113be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80113c2:	3701      	adds	r7, #1
 80113c4:	901d      	str	r0, [sp, #116]	; 0x74
 80113c6:	e7bf      	b.n	8011348 <_strtod_l+0x158>
 80113c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113ca:	195a      	adds	r2, r3, r5
 80113cc:	921d      	str	r2, [sp, #116]	; 0x74
 80113ce:	5d5b      	ldrb	r3, [r3, r5]
 80113d0:	2f00      	cmp	r7, #0
 80113d2:	d037      	beq.n	8011444 <_strtod_l+0x254>
 80113d4:	9007      	str	r0, [sp, #28]
 80113d6:	463d      	mov	r5, r7
 80113d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80113dc:	2a09      	cmp	r2, #9
 80113de:	d912      	bls.n	8011406 <_strtod_l+0x216>
 80113e0:	2201      	movs	r2, #1
 80113e2:	e7c2      	b.n	801136a <_strtod_l+0x17a>
 80113e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113e6:	1c5a      	adds	r2, r3, #1
 80113e8:	921d      	str	r2, [sp, #116]	; 0x74
 80113ea:	785b      	ldrb	r3, [r3, #1]
 80113ec:	3001      	adds	r0, #1
 80113ee:	2b30      	cmp	r3, #48	; 0x30
 80113f0:	d0f8      	beq.n	80113e4 <_strtod_l+0x1f4>
 80113f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80113f6:	2a08      	cmp	r2, #8
 80113f8:	f200 84db 	bhi.w	8011db2 <_strtod_l+0xbc2>
 80113fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80113fe:	9007      	str	r0, [sp, #28]
 8011400:	2000      	movs	r0, #0
 8011402:	920a      	str	r2, [sp, #40]	; 0x28
 8011404:	4605      	mov	r5, r0
 8011406:	3b30      	subs	r3, #48	; 0x30
 8011408:	f100 0201 	add.w	r2, r0, #1
 801140c:	d014      	beq.n	8011438 <_strtod_l+0x248>
 801140e:	9907      	ldr	r1, [sp, #28]
 8011410:	4411      	add	r1, r2
 8011412:	9107      	str	r1, [sp, #28]
 8011414:	462a      	mov	r2, r5
 8011416:	eb00 0e05 	add.w	lr, r0, r5
 801141a:	210a      	movs	r1, #10
 801141c:	4572      	cmp	r2, lr
 801141e:	d113      	bne.n	8011448 <_strtod_l+0x258>
 8011420:	182a      	adds	r2, r5, r0
 8011422:	2a08      	cmp	r2, #8
 8011424:	f105 0501 	add.w	r5, r5, #1
 8011428:	4405      	add	r5, r0
 801142a:	dc1c      	bgt.n	8011466 <_strtod_l+0x276>
 801142c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801142e:	220a      	movs	r2, #10
 8011430:	fb02 3301 	mla	r3, r2, r1, r3
 8011434:	9309      	str	r3, [sp, #36]	; 0x24
 8011436:	2200      	movs	r2, #0
 8011438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801143a:	1c59      	adds	r1, r3, #1
 801143c:	911d      	str	r1, [sp, #116]	; 0x74
 801143e:	785b      	ldrb	r3, [r3, #1]
 8011440:	4610      	mov	r0, r2
 8011442:	e7c9      	b.n	80113d8 <_strtod_l+0x1e8>
 8011444:	4638      	mov	r0, r7
 8011446:	e7d2      	b.n	80113ee <_strtod_l+0x1fe>
 8011448:	2a08      	cmp	r2, #8
 801144a:	dc04      	bgt.n	8011456 <_strtod_l+0x266>
 801144c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801144e:	434e      	muls	r6, r1
 8011450:	9609      	str	r6, [sp, #36]	; 0x24
 8011452:	3201      	adds	r2, #1
 8011454:	e7e2      	b.n	801141c <_strtod_l+0x22c>
 8011456:	f102 0c01 	add.w	ip, r2, #1
 801145a:	f1bc 0f10 	cmp.w	ip, #16
 801145e:	bfd8      	it	le
 8011460:	fb01 f909 	mulle.w	r9, r1, r9
 8011464:	e7f5      	b.n	8011452 <_strtod_l+0x262>
 8011466:	2d10      	cmp	r5, #16
 8011468:	bfdc      	itt	le
 801146a:	220a      	movle	r2, #10
 801146c:	fb02 3909 	mlale	r9, r2, r9, r3
 8011470:	e7e1      	b.n	8011436 <_strtod_l+0x246>
 8011472:	2300      	movs	r3, #0
 8011474:	9307      	str	r3, [sp, #28]
 8011476:	2201      	movs	r2, #1
 8011478:	e77c      	b.n	8011374 <_strtod_l+0x184>
 801147a:	f04f 0c00 	mov.w	ip, #0
 801147e:	f108 0302 	add.w	r3, r8, #2
 8011482:	931d      	str	r3, [sp, #116]	; 0x74
 8011484:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011488:	e785      	b.n	8011396 <_strtod_l+0x1a6>
 801148a:	f04f 0c01 	mov.w	ip, #1
 801148e:	e7f6      	b.n	801147e <_strtod_l+0x28e>
 8011490:	08028b34 	.word	0x08028b34
 8011494:	08028848 	.word	0x08028848
 8011498:	7ff00000 	.word	0x7ff00000
 801149c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801149e:	1c59      	adds	r1, r3, #1
 80114a0:	911d      	str	r1, [sp, #116]	; 0x74
 80114a2:	785b      	ldrb	r3, [r3, #1]
 80114a4:	2b30      	cmp	r3, #48	; 0x30
 80114a6:	d0f9      	beq.n	801149c <_strtod_l+0x2ac>
 80114a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80114ac:	2908      	cmp	r1, #8
 80114ae:	f63f af79 	bhi.w	80113a4 <_strtod_l+0x1b4>
 80114b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80114b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80114b8:	9308      	str	r3, [sp, #32]
 80114ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80114bc:	1c59      	adds	r1, r3, #1
 80114be:	911d      	str	r1, [sp, #116]	; 0x74
 80114c0:	785b      	ldrb	r3, [r3, #1]
 80114c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80114c6:	2e09      	cmp	r6, #9
 80114c8:	d937      	bls.n	801153a <_strtod_l+0x34a>
 80114ca:	9e08      	ldr	r6, [sp, #32]
 80114cc:	1b89      	subs	r1, r1, r6
 80114ce:	2908      	cmp	r1, #8
 80114d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80114d4:	dc02      	bgt.n	80114dc <_strtod_l+0x2ec>
 80114d6:	4576      	cmp	r6, lr
 80114d8:	bfa8      	it	ge
 80114da:	4676      	movge	r6, lr
 80114dc:	f1bc 0f00 	cmp.w	ip, #0
 80114e0:	d000      	beq.n	80114e4 <_strtod_l+0x2f4>
 80114e2:	4276      	negs	r6, r6
 80114e4:	2d00      	cmp	r5, #0
 80114e6:	d14f      	bne.n	8011588 <_strtod_l+0x398>
 80114e8:	9904      	ldr	r1, [sp, #16]
 80114ea:	4301      	orrs	r1, r0
 80114ec:	f47f aec2 	bne.w	8011274 <_strtod_l+0x84>
 80114f0:	2a00      	cmp	r2, #0
 80114f2:	f47f aedb 	bne.w	80112ac <_strtod_l+0xbc>
 80114f6:	2b69      	cmp	r3, #105	; 0x69
 80114f8:	d027      	beq.n	801154a <_strtod_l+0x35a>
 80114fa:	dc24      	bgt.n	8011546 <_strtod_l+0x356>
 80114fc:	2b49      	cmp	r3, #73	; 0x49
 80114fe:	d024      	beq.n	801154a <_strtod_l+0x35a>
 8011500:	2b4e      	cmp	r3, #78	; 0x4e
 8011502:	f47f aed3 	bne.w	80112ac <_strtod_l+0xbc>
 8011506:	499e      	ldr	r1, [pc, #632]	; (8011780 <_strtod_l+0x590>)
 8011508:	a81d      	add	r0, sp, #116	; 0x74
 801150a:	f001 fee3 	bl	80132d4 <__match>
 801150e:	2800      	cmp	r0, #0
 8011510:	f43f aecc 	beq.w	80112ac <_strtod_l+0xbc>
 8011514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	2b28      	cmp	r3, #40	; 0x28
 801151a:	d12d      	bne.n	8011578 <_strtod_l+0x388>
 801151c:	4999      	ldr	r1, [pc, #612]	; (8011784 <_strtod_l+0x594>)
 801151e:	aa20      	add	r2, sp, #128	; 0x80
 8011520:	a81d      	add	r0, sp, #116	; 0x74
 8011522:	f001 feeb 	bl	80132fc <__hexnan>
 8011526:	2805      	cmp	r0, #5
 8011528:	d126      	bne.n	8011578 <_strtod_l+0x388>
 801152a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801152c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011530:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011534:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011538:	e69c      	b.n	8011274 <_strtod_l+0x84>
 801153a:	210a      	movs	r1, #10
 801153c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011540:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011544:	e7b9      	b.n	80114ba <_strtod_l+0x2ca>
 8011546:	2b6e      	cmp	r3, #110	; 0x6e
 8011548:	e7db      	b.n	8011502 <_strtod_l+0x312>
 801154a:	498f      	ldr	r1, [pc, #572]	; (8011788 <_strtod_l+0x598>)
 801154c:	a81d      	add	r0, sp, #116	; 0x74
 801154e:	f001 fec1 	bl	80132d4 <__match>
 8011552:	2800      	cmp	r0, #0
 8011554:	f43f aeaa 	beq.w	80112ac <_strtod_l+0xbc>
 8011558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801155a:	498c      	ldr	r1, [pc, #560]	; (801178c <_strtod_l+0x59c>)
 801155c:	3b01      	subs	r3, #1
 801155e:	a81d      	add	r0, sp, #116	; 0x74
 8011560:	931d      	str	r3, [sp, #116]	; 0x74
 8011562:	f001 feb7 	bl	80132d4 <__match>
 8011566:	b910      	cbnz	r0, 801156e <_strtod_l+0x37e>
 8011568:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801156a:	3301      	adds	r3, #1
 801156c:	931d      	str	r3, [sp, #116]	; 0x74
 801156e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801179c <_strtod_l+0x5ac>
 8011572:	f04f 0a00 	mov.w	sl, #0
 8011576:	e67d      	b.n	8011274 <_strtod_l+0x84>
 8011578:	4885      	ldr	r0, [pc, #532]	; (8011790 <_strtod_l+0x5a0>)
 801157a:	f002 ffb1 	bl	80144e0 <nan>
 801157e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011582:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011586:	e675      	b.n	8011274 <_strtod_l+0x84>
 8011588:	9b07      	ldr	r3, [sp, #28]
 801158a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801158c:	1af3      	subs	r3, r6, r3
 801158e:	2f00      	cmp	r7, #0
 8011590:	bf08      	it	eq
 8011592:	462f      	moveq	r7, r5
 8011594:	2d10      	cmp	r5, #16
 8011596:	9308      	str	r3, [sp, #32]
 8011598:	46a8      	mov	r8, r5
 801159a:	bfa8      	it	ge
 801159c:	f04f 0810 	movge.w	r8, #16
 80115a0:	f7ee ffc8 	bl	8000534 <__aeabi_ui2d>
 80115a4:	2d09      	cmp	r5, #9
 80115a6:	4682      	mov	sl, r0
 80115a8:	468b      	mov	fp, r1
 80115aa:	dd13      	ble.n	80115d4 <_strtod_l+0x3e4>
 80115ac:	4b79      	ldr	r3, [pc, #484]	; (8011794 <_strtod_l+0x5a4>)
 80115ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80115b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80115b6:	f7ef f837 	bl	8000628 <__aeabi_dmul>
 80115ba:	4682      	mov	sl, r0
 80115bc:	4648      	mov	r0, r9
 80115be:	468b      	mov	fp, r1
 80115c0:	f7ee ffb8 	bl	8000534 <__aeabi_ui2d>
 80115c4:	4602      	mov	r2, r0
 80115c6:	460b      	mov	r3, r1
 80115c8:	4650      	mov	r0, sl
 80115ca:	4659      	mov	r1, fp
 80115cc:	f7ee fe76 	bl	80002bc <__adddf3>
 80115d0:	4682      	mov	sl, r0
 80115d2:	468b      	mov	fp, r1
 80115d4:	2d0f      	cmp	r5, #15
 80115d6:	dc38      	bgt.n	801164a <_strtod_l+0x45a>
 80115d8:	9b08      	ldr	r3, [sp, #32]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f43f ae4a 	beq.w	8011274 <_strtod_l+0x84>
 80115e0:	dd24      	ble.n	801162c <_strtod_l+0x43c>
 80115e2:	2b16      	cmp	r3, #22
 80115e4:	dc0b      	bgt.n	80115fe <_strtod_l+0x40e>
 80115e6:	4d6b      	ldr	r5, [pc, #428]	; (8011794 <_strtod_l+0x5a4>)
 80115e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80115ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80115f0:	4652      	mov	r2, sl
 80115f2:	465b      	mov	r3, fp
 80115f4:	f7ef f818 	bl	8000628 <__aeabi_dmul>
 80115f8:	4682      	mov	sl, r0
 80115fa:	468b      	mov	fp, r1
 80115fc:	e63a      	b.n	8011274 <_strtod_l+0x84>
 80115fe:	9a08      	ldr	r2, [sp, #32]
 8011600:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011604:	4293      	cmp	r3, r2
 8011606:	db20      	blt.n	801164a <_strtod_l+0x45a>
 8011608:	4c62      	ldr	r4, [pc, #392]	; (8011794 <_strtod_l+0x5a4>)
 801160a:	f1c5 050f 	rsb	r5, r5, #15
 801160e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011612:	4652      	mov	r2, sl
 8011614:	465b      	mov	r3, fp
 8011616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801161a:	f7ef f805 	bl	8000628 <__aeabi_dmul>
 801161e:	9b08      	ldr	r3, [sp, #32]
 8011620:	1b5d      	subs	r5, r3, r5
 8011622:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011626:	e9d4 2300 	ldrd	r2, r3, [r4]
 801162a:	e7e3      	b.n	80115f4 <_strtod_l+0x404>
 801162c:	9b08      	ldr	r3, [sp, #32]
 801162e:	3316      	adds	r3, #22
 8011630:	db0b      	blt.n	801164a <_strtod_l+0x45a>
 8011632:	9b07      	ldr	r3, [sp, #28]
 8011634:	4a57      	ldr	r2, [pc, #348]	; (8011794 <_strtod_l+0x5a4>)
 8011636:	1b9e      	subs	r6, r3, r6
 8011638:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801163c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011640:	4650      	mov	r0, sl
 8011642:	4659      	mov	r1, fp
 8011644:	f7ef f91a 	bl	800087c <__aeabi_ddiv>
 8011648:	e7d6      	b.n	80115f8 <_strtod_l+0x408>
 801164a:	9b08      	ldr	r3, [sp, #32]
 801164c:	eba5 0808 	sub.w	r8, r5, r8
 8011650:	4498      	add	r8, r3
 8011652:	f1b8 0f00 	cmp.w	r8, #0
 8011656:	dd71      	ble.n	801173c <_strtod_l+0x54c>
 8011658:	f018 030f 	ands.w	r3, r8, #15
 801165c:	d00a      	beq.n	8011674 <_strtod_l+0x484>
 801165e:	494d      	ldr	r1, [pc, #308]	; (8011794 <_strtod_l+0x5a4>)
 8011660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011664:	4652      	mov	r2, sl
 8011666:	465b      	mov	r3, fp
 8011668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801166c:	f7ee ffdc 	bl	8000628 <__aeabi_dmul>
 8011670:	4682      	mov	sl, r0
 8011672:	468b      	mov	fp, r1
 8011674:	f038 080f 	bics.w	r8, r8, #15
 8011678:	d04d      	beq.n	8011716 <_strtod_l+0x526>
 801167a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801167e:	dd22      	ble.n	80116c6 <_strtod_l+0x4d6>
 8011680:	2500      	movs	r5, #0
 8011682:	462e      	mov	r6, r5
 8011684:	9509      	str	r5, [sp, #36]	; 0x24
 8011686:	9507      	str	r5, [sp, #28]
 8011688:	2322      	movs	r3, #34	; 0x22
 801168a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801179c <_strtod_l+0x5ac>
 801168e:	6023      	str	r3, [r4, #0]
 8011690:	f04f 0a00 	mov.w	sl, #0
 8011694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011696:	2b00      	cmp	r3, #0
 8011698:	f43f adec 	beq.w	8011274 <_strtod_l+0x84>
 801169c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801169e:	4620      	mov	r0, r4
 80116a0:	f001 ff34 	bl	801350c <_Bfree>
 80116a4:	9907      	ldr	r1, [sp, #28]
 80116a6:	4620      	mov	r0, r4
 80116a8:	f001 ff30 	bl	801350c <_Bfree>
 80116ac:	4631      	mov	r1, r6
 80116ae:	4620      	mov	r0, r4
 80116b0:	f001 ff2c 	bl	801350c <_Bfree>
 80116b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116b6:	4620      	mov	r0, r4
 80116b8:	f001 ff28 	bl	801350c <_Bfree>
 80116bc:	4629      	mov	r1, r5
 80116be:	4620      	mov	r0, r4
 80116c0:	f001 ff24 	bl	801350c <_Bfree>
 80116c4:	e5d6      	b.n	8011274 <_strtod_l+0x84>
 80116c6:	2300      	movs	r3, #0
 80116c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80116cc:	4650      	mov	r0, sl
 80116ce:	4659      	mov	r1, fp
 80116d0:	4699      	mov	r9, r3
 80116d2:	f1b8 0f01 	cmp.w	r8, #1
 80116d6:	dc21      	bgt.n	801171c <_strtod_l+0x52c>
 80116d8:	b10b      	cbz	r3, 80116de <_strtod_l+0x4ee>
 80116da:	4682      	mov	sl, r0
 80116dc:	468b      	mov	fp, r1
 80116de:	4b2e      	ldr	r3, [pc, #184]	; (8011798 <_strtod_l+0x5a8>)
 80116e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80116e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80116e8:	4652      	mov	r2, sl
 80116ea:	465b      	mov	r3, fp
 80116ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 80116f0:	f7ee ff9a 	bl	8000628 <__aeabi_dmul>
 80116f4:	4b29      	ldr	r3, [pc, #164]	; (801179c <_strtod_l+0x5ac>)
 80116f6:	460a      	mov	r2, r1
 80116f8:	400b      	ands	r3, r1
 80116fa:	4929      	ldr	r1, [pc, #164]	; (80117a0 <_strtod_l+0x5b0>)
 80116fc:	428b      	cmp	r3, r1
 80116fe:	4682      	mov	sl, r0
 8011700:	d8be      	bhi.n	8011680 <_strtod_l+0x490>
 8011702:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011706:	428b      	cmp	r3, r1
 8011708:	bf86      	itte	hi
 801170a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80117a4 <_strtod_l+0x5b4>
 801170e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011712:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011716:	2300      	movs	r3, #0
 8011718:	9304      	str	r3, [sp, #16]
 801171a:	e081      	b.n	8011820 <_strtod_l+0x630>
 801171c:	f018 0f01 	tst.w	r8, #1
 8011720:	d007      	beq.n	8011732 <_strtod_l+0x542>
 8011722:	4b1d      	ldr	r3, [pc, #116]	; (8011798 <_strtod_l+0x5a8>)
 8011724:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172c:	f7ee ff7c 	bl	8000628 <__aeabi_dmul>
 8011730:	2301      	movs	r3, #1
 8011732:	f109 0901 	add.w	r9, r9, #1
 8011736:	ea4f 0868 	mov.w	r8, r8, asr #1
 801173a:	e7ca      	b.n	80116d2 <_strtod_l+0x4e2>
 801173c:	d0eb      	beq.n	8011716 <_strtod_l+0x526>
 801173e:	f1c8 0800 	rsb	r8, r8, #0
 8011742:	f018 020f 	ands.w	r2, r8, #15
 8011746:	d00a      	beq.n	801175e <_strtod_l+0x56e>
 8011748:	4b12      	ldr	r3, [pc, #72]	; (8011794 <_strtod_l+0x5a4>)
 801174a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801174e:	4650      	mov	r0, sl
 8011750:	4659      	mov	r1, fp
 8011752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011756:	f7ef f891 	bl	800087c <__aeabi_ddiv>
 801175a:	4682      	mov	sl, r0
 801175c:	468b      	mov	fp, r1
 801175e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011762:	d0d8      	beq.n	8011716 <_strtod_l+0x526>
 8011764:	f1b8 0f1f 	cmp.w	r8, #31
 8011768:	dd1e      	ble.n	80117a8 <_strtod_l+0x5b8>
 801176a:	2500      	movs	r5, #0
 801176c:	462e      	mov	r6, r5
 801176e:	9509      	str	r5, [sp, #36]	; 0x24
 8011770:	9507      	str	r5, [sp, #28]
 8011772:	2322      	movs	r3, #34	; 0x22
 8011774:	f04f 0a00 	mov.w	sl, #0
 8011778:	f04f 0b00 	mov.w	fp, #0
 801177c:	6023      	str	r3, [r4, #0]
 801177e:	e789      	b.n	8011694 <_strtod_l+0x4a4>
 8011780:	08028819 	.word	0x08028819
 8011784:	0802885c 	.word	0x0802885c
 8011788:	08028811 	.word	0x08028811
 801178c:	08028a50 	.word	0x08028a50
 8011790:	0802894b 	.word	0x0802894b
 8011794:	08028bd0 	.word	0x08028bd0
 8011798:	08028ba8 	.word	0x08028ba8
 801179c:	7ff00000 	.word	0x7ff00000
 80117a0:	7ca00000 	.word	0x7ca00000
 80117a4:	7fefffff 	.word	0x7fefffff
 80117a8:	f018 0310 	ands.w	r3, r8, #16
 80117ac:	bf18      	it	ne
 80117ae:	236a      	movne	r3, #106	; 0x6a
 80117b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011b68 <_strtod_l+0x978>
 80117b4:	9304      	str	r3, [sp, #16]
 80117b6:	4650      	mov	r0, sl
 80117b8:	4659      	mov	r1, fp
 80117ba:	2300      	movs	r3, #0
 80117bc:	f018 0f01 	tst.w	r8, #1
 80117c0:	d004      	beq.n	80117cc <_strtod_l+0x5dc>
 80117c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80117c6:	f7ee ff2f 	bl	8000628 <__aeabi_dmul>
 80117ca:	2301      	movs	r3, #1
 80117cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80117d0:	f109 0908 	add.w	r9, r9, #8
 80117d4:	d1f2      	bne.n	80117bc <_strtod_l+0x5cc>
 80117d6:	b10b      	cbz	r3, 80117dc <_strtod_l+0x5ec>
 80117d8:	4682      	mov	sl, r0
 80117da:	468b      	mov	fp, r1
 80117dc:	9b04      	ldr	r3, [sp, #16]
 80117de:	b1bb      	cbz	r3, 8011810 <_strtod_l+0x620>
 80117e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80117e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	4659      	mov	r1, fp
 80117ec:	dd10      	ble.n	8011810 <_strtod_l+0x620>
 80117ee:	2b1f      	cmp	r3, #31
 80117f0:	f340 8128 	ble.w	8011a44 <_strtod_l+0x854>
 80117f4:	2b34      	cmp	r3, #52	; 0x34
 80117f6:	bfde      	ittt	le
 80117f8:	3b20      	suble	r3, #32
 80117fa:	f04f 32ff 	movle.w	r2, #4294967295
 80117fe:	fa02 f303 	lslle.w	r3, r2, r3
 8011802:	f04f 0a00 	mov.w	sl, #0
 8011806:	bfcc      	ite	gt
 8011808:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801180c:	ea03 0b01 	andle.w	fp, r3, r1
 8011810:	2200      	movs	r2, #0
 8011812:	2300      	movs	r3, #0
 8011814:	4650      	mov	r0, sl
 8011816:	4659      	mov	r1, fp
 8011818:	f7ef f96e 	bl	8000af8 <__aeabi_dcmpeq>
 801181c:	2800      	cmp	r0, #0
 801181e:	d1a4      	bne.n	801176a <_strtod_l+0x57a>
 8011820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011826:	462b      	mov	r3, r5
 8011828:	463a      	mov	r2, r7
 801182a:	4620      	mov	r0, r4
 801182c:	f001 feda 	bl	80135e4 <__s2b>
 8011830:	9009      	str	r0, [sp, #36]	; 0x24
 8011832:	2800      	cmp	r0, #0
 8011834:	f43f af24 	beq.w	8011680 <_strtod_l+0x490>
 8011838:	9b07      	ldr	r3, [sp, #28]
 801183a:	1b9e      	subs	r6, r3, r6
 801183c:	9b08      	ldr	r3, [sp, #32]
 801183e:	2b00      	cmp	r3, #0
 8011840:	bfb4      	ite	lt
 8011842:	4633      	movlt	r3, r6
 8011844:	2300      	movge	r3, #0
 8011846:	9310      	str	r3, [sp, #64]	; 0x40
 8011848:	9b08      	ldr	r3, [sp, #32]
 801184a:	2500      	movs	r5, #0
 801184c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011850:	9318      	str	r3, [sp, #96]	; 0x60
 8011852:	462e      	mov	r6, r5
 8011854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011856:	4620      	mov	r0, r4
 8011858:	6859      	ldr	r1, [r3, #4]
 801185a:	f001 fe17 	bl	801348c <_Balloc>
 801185e:	9007      	str	r0, [sp, #28]
 8011860:	2800      	cmp	r0, #0
 8011862:	f43f af11 	beq.w	8011688 <_strtod_l+0x498>
 8011866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011868:	691a      	ldr	r2, [r3, #16]
 801186a:	3202      	adds	r2, #2
 801186c:	f103 010c 	add.w	r1, r3, #12
 8011870:	0092      	lsls	r2, r2, #2
 8011872:	300c      	adds	r0, #12
 8011874:	f001 fdfc 	bl	8013470 <memcpy>
 8011878:	ec4b ab10 	vmov	d0, sl, fp
 801187c:	aa20      	add	r2, sp, #128	; 0x80
 801187e:	a91f      	add	r1, sp, #124	; 0x7c
 8011880:	4620      	mov	r0, r4
 8011882:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011886:	f002 f9e9 	bl	8013c5c <__d2b>
 801188a:	901e      	str	r0, [sp, #120]	; 0x78
 801188c:	2800      	cmp	r0, #0
 801188e:	f43f aefb 	beq.w	8011688 <_strtod_l+0x498>
 8011892:	2101      	movs	r1, #1
 8011894:	4620      	mov	r0, r4
 8011896:	f001 ff3f 	bl	8013718 <__i2b>
 801189a:	4606      	mov	r6, r0
 801189c:	2800      	cmp	r0, #0
 801189e:	f43f aef3 	beq.w	8011688 <_strtod_l+0x498>
 80118a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80118a4:	9904      	ldr	r1, [sp, #16]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	bfab      	itete	ge
 80118aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80118ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80118ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80118b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80118b4:	bfac      	ite	ge
 80118b6:	eb03 0902 	addge.w	r9, r3, r2
 80118ba:	1ad7      	sublt	r7, r2, r3
 80118bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80118be:	eba3 0801 	sub.w	r8, r3, r1
 80118c2:	4490      	add	r8, r2
 80118c4:	4ba3      	ldr	r3, [pc, #652]	; (8011b54 <_strtod_l+0x964>)
 80118c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80118ca:	4598      	cmp	r8, r3
 80118cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80118d0:	f280 80cc 	bge.w	8011a6c <_strtod_l+0x87c>
 80118d4:	eba3 0308 	sub.w	r3, r3, r8
 80118d8:	2b1f      	cmp	r3, #31
 80118da:	eba2 0203 	sub.w	r2, r2, r3
 80118de:	f04f 0101 	mov.w	r1, #1
 80118e2:	f300 80b6 	bgt.w	8011a52 <_strtod_l+0x862>
 80118e6:	fa01 f303 	lsl.w	r3, r1, r3
 80118ea:	9311      	str	r3, [sp, #68]	; 0x44
 80118ec:	2300      	movs	r3, #0
 80118ee:	930c      	str	r3, [sp, #48]	; 0x30
 80118f0:	eb09 0802 	add.w	r8, r9, r2
 80118f4:	9b04      	ldr	r3, [sp, #16]
 80118f6:	45c1      	cmp	r9, r8
 80118f8:	4417      	add	r7, r2
 80118fa:	441f      	add	r7, r3
 80118fc:	464b      	mov	r3, r9
 80118fe:	bfa8      	it	ge
 8011900:	4643      	movge	r3, r8
 8011902:	42bb      	cmp	r3, r7
 8011904:	bfa8      	it	ge
 8011906:	463b      	movge	r3, r7
 8011908:	2b00      	cmp	r3, #0
 801190a:	bfc2      	ittt	gt
 801190c:	eba8 0803 	subgt.w	r8, r8, r3
 8011910:	1aff      	subgt	r7, r7, r3
 8011912:	eba9 0903 	subgt.w	r9, r9, r3
 8011916:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011918:	2b00      	cmp	r3, #0
 801191a:	dd17      	ble.n	801194c <_strtod_l+0x75c>
 801191c:	4631      	mov	r1, r6
 801191e:	461a      	mov	r2, r3
 8011920:	4620      	mov	r0, r4
 8011922:	f001 ffb5 	bl	8013890 <__pow5mult>
 8011926:	4606      	mov	r6, r0
 8011928:	2800      	cmp	r0, #0
 801192a:	f43f aead 	beq.w	8011688 <_strtod_l+0x498>
 801192e:	4601      	mov	r1, r0
 8011930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011932:	4620      	mov	r0, r4
 8011934:	f001 ff06 	bl	8013744 <__multiply>
 8011938:	900f      	str	r0, [sp, #60]	; 0x3c
 801193a:	2800      	cmp	r0, #0
 801193c:	f43f aea4 	beq.w	8011688 <_strtod_l+0x498>
 8011940:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011942:	4620      	mov	r0, r4
 8011944:	f001 fde2 	bl	801350c <_Bfree>
 8011948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801194a:	931e      	str	r3, [sp, #120]	; 0x78
 801194c:	f1b8 0f00 	cmp.w	r8, #0
 8011950:	f300 8091 	bgt.w	8011a76 <_strtod_l+0x886>
 8011954:	9b08      	ldr	r3, [sp, #32]
 8011956:	2b00      	cmp	r3, #0
 8011958:	dd08      	ble.n	801196c <_strtod_l+0x77c>
 801195a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801195c:	9907      	ldr	r1, [sp, #28]
 801195e:	4620      	mov	r0, r4
 8011960:	f001 ff96 	bl	8013890 <__pow5mult>
 8011964:	9007      	str	r0, [sp, #28]
 8011966:	2800      	cmp	r0, #0
 8011968:	f43f ae8e 	beq.w	8011688 <_strtod_l+0x498>
 801196c:	2f00      	cmp	r7, #0
 801196e:	dd08      	ble.n	8011982 <_strtod_l+0x792>
 8011970:	9907      	ldr	r1, [sp, #28]
 8011972:	463a      	mov	r2, r7
 8011974:	4620      	mov	r0, r4
 8011976:	f001 ffe5 	bl	8013944 <__lshift>
 801197a:	9007      	str	r0, [sp, #28]
 801197c:	2800      	cmp	r0, #0
 801197e:	f43f ae83 	beq.w	8011688 <_strtod_l+0x498>
 8011982:	f1b9 0f00 	cmp.w	r9, #0
 8011986:	dd08      	ble.n	801199a <_strtod_l+0x7aa>
 8011988:	4631      	mov	r1, r6
 801198a:	464a      	mov	r2, r9
 801198c:	4620      	mov	r0, r4
 801198e:	f001 ffd9 	bl	8013944 <__lshift>
 8011992:	4606      	mov	r6, r0
 8011994:	2800      	cmp	r0, #0
 8011996:	f43f ae77 	beq.w	8011688 <_strtod_l+0x498>
 801199a:	9a07      	ldr	r2, [sp, #28]
 801199c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801199e:	4620      	mov	r0, r4
 80119a0:	f002 f858 	bl	8013a54 <__mdiff>
 80119a4:	4605      	mov	r5, r0
 80119a6:	2800      	cmp	r0, #0
 80119a8:	f43f ae6e 	beq.w	8011688 <_strtod_l+0x498>
 80119ac:	68c3      	ldr	r3, [r0, #12]
 80119ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80119b0:	2300      	movs	r3, #0
 80119b2:	60c3      	str	r3, [r0, #12]
 80119b4:	4631      	mov	r1, r6
 80119b6:	f002 f831 	bl	8013a1c <__mcmp>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	da65      	bge.n	8011a8a <_strtod_l+0x89a>
 80119be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119c0:	ea53 030a 	orrs.w	r3, r3, sl
 80119c4:	f040 8087 	bne.w	8011ad6 <_strtod_l+0x8e6>
 80119c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f040 8082 	bne.w	8011ad6 <_strtod_l+0x8e6>
 80119d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80119d6:	0d1b      	lsrs	r3, r3, #20
 80119d8:	051b      	lsls	r3, r3, #20
 80119da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80119de:	d97a      	bls.n	8011ad6 <_strtod_l+0x8e6>
 80119e0:	696b      	ldr	r3, [r5, #20]
 80119e2:	b913      	cbnz	r3, 80119ea <_strtod_l+0x7fa>
 80119e4:	692b      	ldr	r3, [r5, #16]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	dd75      	ble.n	8011ad6 <_strtod_l+0x8e6>
 80119ea:	4629      	mov	r1, r5
 80119ec:	2201      	movs	r2, #1
 80119ee:	4620      	mov	r0, r4
 80119f0:	f001 ffa8 	bl	8013944 <__lshift>
 80119f4:	4631      	mov	r1, r6
 80119f6:	4605      	mov	r5, r0
 80119f8:	f002 f810 	bl	8013a1c <__mcmp>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	dd6a      	ble.n	8011ad6 <_strtod_l+0x8e6>
 8011a00:	9904      	ldr	r1, [sp, #16]
 8011a02:	4a55      	ldr	r2, [pc, #340]	; (8011b58 <_strtod_l+0x968>)
 8011a04:	465b      	mov	r3, fp
 8011a06:	2900      	cmp	r1, #0
 8011a08:	f000 8085 	beq.w	8011b16 <_strtod_l+0x926>
 8011a0c:	ea02 010b 	and.w	r1, r2, fp
 8011a10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011a14:	dc7f      	bgt.n	8011b16 <_strtod_l+0x926>
 8011a16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011a1a:	f77f aeaa 	ble.w	8011772 <_strtod_l+0x582>
 8011a1e:	4a4f      	ldr	r2, [pc, #316]	; (8011b5c <_strtod_l+0x96c>)
 8011a20:	2300      	movs	r3, #0
 8011a22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011a26:	4650      	mov	r0, sl
 8011a28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011a2c:	4659      	mov	r1, fp
 8011a2e:	f7ee fdfb 	bl	8000628 <__aeabi_dmul>
 8011a32:	460b      	mov	r3, r1
 8011a34:	4303      	orrs	r3, r0
 8011a36:	bf08      	it	eq
 8011a38:	2322      	moveq	r3, #34	; 0x22
 8011a3a:	4682      	mov	sl, r0
 8011a3c:	468b      	mov	fp, r1
 8011a3e:	bf08      	it	eq
 8011a40:	6023      	streq	r3, [r4, #0]
 8011a42:	e62b      	b.n	801169c <_strtod_l+0x4ac>
 8011a44:	f04f 32ff 	mov.w	r2, #4294967295
 8011a48:	fa02 f303 	lsl.w	r3, r2, r3
 8011a4c:	ea03 0a0a 	and.w	sl, r3, sl
 8011a50:	e6de      	b.n	8011810 <_strtod_l+0x620>
 8011a52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011a56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011a5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011a5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011a62:	fa01 f308 	lsl.w	r3, r1, r8
 8011a66:	930c      	str	r3, [sp, #48]	; 0x30
 8011a68:	9111      	str	r1, [sp, #68]	; 0x44
 8011a6a:	e741      	b.n	80118f0 <_strtod_l+0x700>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8011a70:	2301      	movs	r3, #1
 8011a72:	9311      	str	r3, [sp, #68]	; 0x44
 8011a74:	e73c      	b.n	80118f0 <_strtod_l+0x700>
 8011a76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a78:	4642      	mov	r2, r8
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f001 ff62 	bl	8013944 <__lshift>
 8011a80:	901e      	str	r0, [sp, #120]	; 0x78
 8011a82:	2800      	cmp	r0, #0
 8011a84:	f47f af66 	bne.w	8011954 <_strtod_l+0x764>
 8011a88:	e5fe      	b.n	8011688 <_strtod_l+0x498>
 8011a8a:	465f      	mov	r7, fp
 8011a8c:	d16e      	bne.n	8011b6c <_strtod_l+0x97c>
 8011a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a94:	b342      	cbz	r2, 8011ae8 <_strtod_l+0x8f8>
 8011a96:	4a32      	ldr	r2, [pc, #200]	; (8011b60 <_strtod_l+0x970>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d128      	bne.n	8011aee <_strtod_l+0x8fe>
 8011a9c:	9b04      	ldr	r3, [sp, #16]
 8011a9e:	4650      	mov	r0, sl
 8011aa0:	b1eb      	cbz	r3, 8011ade <_strtod_l+0x8ee>
 8011aa2:	4a2d      	ldr	r2, [pc, #180]	; (8011b58 <_strtod_l+0x968>)
 8011aa4:	403a      	ands	r2, r7
 8011aa6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8011aae:	d819      	bhi.n	8011ae4 <_strtod_l+0x8f4>
 8011ab0:	0d12      	lsrs	r2, r2, #20
 8011ab2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8011aba:	4298      	cmp	r0, r3
 8011abc:	d117      	bne.n	8011aee <_strtod_l+0x8fe>
 8011abe:	4b29      	ldr	r3, [pc, #164]	; (8011b64 <_strtod_l+0x974>)
 8011ac0:	429f      	cmp	r7, r3
 8011ac2:	d102      	bne.n	8011aca <_strtod_l+0x8da>
 8011ac4:	3001      	adds	r0, #1
 8011ac6:	f43f addf 	beq.w	8011688 <_strtod_l+0x498>
 8011aca:	4b23      	ldr	r3, [pc, #140]	; (8011b58 <_strtod_l+0x968>)
 8011acc:	403b      	ands	r3, r7
 8011ace:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011ad2:	f04f 0a00 	mov.w	sl, #0
 8011ad6:	9b04      	ldr	r3, [sp, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1a0      	bne.n	8011a1e <_strtod_l+0x82e>
 8011adc:	e5de      	b.n	801169c <_strtod_l+0x4ac>
 8011ade:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae2:	e7ea      	b.n	8011aba <_strtod_l+0x8ca>
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	e7e8      	b.n	8011aba <_strtod_l+0x8ca>
 8011ae8:	ea53 030a 	orrs.w	r3, r3, sl
 8011aec:	d088      	beq.n	8011a00 <_strtod_l+0x810>
 8011aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011af0:	b1db      	cbz	r3, 8011b2a <_strtod_l+0x93a>
 8011af2:	423b      	tst	r3, r7
 8011af4:	d0ef      	beq.n	8011ad6 <_strtod_l+0x8e6>
 8011af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011af8:	9a04      	ldr	r2, [sp, #16]
 8011afa:	4650      	mov	r0, sl
 8011afc:	4659      	mov	r1, fp
 8011afe:	b1c3      	cbz	r3, 8011b32 <_strtod_l+0x942>
 8011b00:	f7ff fb5a 	bl	80111b8 <sulp>
 8011b04:	4602      	mov	r2, r0
 8011b06:	460b      	mov	r3, r1
 8011b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b0c:	f7ee fbd6 	bl	80002bc <__adddf3>
 8011b10:	4682      	mov	sl, r0
 8011b12:	468b      	mov	fp, r1
 8011b14:	e7df      	b.n	8011ad6 <_strtod_l+0x8e6>
 8011b16:	4013      	ands	r3, r2
 8011b18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011b1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011b20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011b24:	f04f 3aff 	mov.w	sl, #4294967295
 8011b28:	e7d5      	b.n	8011ad6 <_strtod_l+0x8e6>
 8011b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b2c:	ea13 0f0a 	tst.w	r3, sl
 8011b30:	e7e0      	b.n	8011af4 <_strtod_l+0x904>
 8011b32:	f7ff fb41 	bl	80111b8 <sulp>
 8011b36:	4602      	mov	r2, r0
 8011b38:	460b      	mov	r3, r1
 8011b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b3e:	f7ee fbbb 	bl	80002b8 <__aeabi_dsub>
 8011b42:	2200      	movs	r2, #0
 8011b44:	2300      	movs	r3, #0
 8011b46:	4682      	mov	sl, r0
 8011b48:	468b      	mov	fp, r1
 8011b4a:	f7ee ffd5 	bl	8000af8 <__aeabi_dcmpeq>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d0c1      	beq.n	8011ad6 <_strtod_l+0x8e6>
 8011b52:	e60e      	b.n	8011772 <_strtod_l+0x582>
 8011b54:	fffffc02 	.word	0xfffffc02
 8011b58:	7ff00000 	.word	0x7ff00000
 8011b5c:	39500000 	.word	0x39500000
 8011b60:	000fffff 	.word	0x000fffff
 8011b64:	7fefffff 	.word	0x7fefffff
 8011b68:	08028870 	.word	0x08028870
 8011b6c:	4631      	mov	r1, r6
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f002 f8d0 	bl	8013d14 <__ratio>
 8011b74:	ec59 8b10 	vmov	r8, r9, d0
 8011b78:	ee10 0a10 	vmov	r0, s0
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b82:	4649      	mov	r1, r9
 8011b84:	f7ee ffcc 	bl	8000b20 <__aeabi_dcmple>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d07c      	beq.n	8011c86 <_strtod_l+0xa96>
 8011b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d04c      	beq.n	8011c2c <_strtod_l+0xa3c>
 8011b92:	4b95      	ldr	r3, [pc, #596]	; (8011de8 <_strtod_l+0xbf8>)
 8011b94:	2200      	movs	r2, #0
 8011b96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011b9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011de8 <_strtod_l+0xbf8>
 8011b9e:	f04f 0800 	mov.w	r8, #0
 8011ba2:	4b92      	ldr	r3, [pc, #584]	; (8011dec <_strtod_l+0xbfc>)
 8011ba4:	403b      	ands	r3, r7
 8011ba6:	9311      	str	r3, [sp, #68]	; 0x44
 8011ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011baa:	4b91      	ldr	r3, [pc, #580]	; (8011df0 <_strtod_l+0xc00>)
 8011bac:	429a      	cmp	r2, r3
 8011bae:	f040 80b2 	bne.w	8011d16 <_strtod_l+0xb26>
 8011bb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011bbe:	ec4b ab10 	vmov	d0, sl, fp
 8011bc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011bc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011bca:	f001 ffcb 	bl	8013b64 <__ulp>
 8011bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bd2:	ec53 2b10 	vmov	r2, r3, d0
 8011bd6:	f7ee fd27 	bl	8000628 <__aeabi_dmul>
 8011bda:	4652      	mov	r2, sl
 8011bdc:	465b      	mov	r3, fp
 8011bde:	f7ee fb6d 	bl	80002bc <__adddf3>
 8011be2:	460b      	mov	r3, r1
 8011be4:	4981      	ldr	r1, [pc, #516]	; (8011dec <_strtod_l+0xbfc>)
 8011be6:	4a83      	ldr	r2, [pc, #524]	; (8011df4 <_strtod_l+0xc04>)
 8011be8:	4019      	ands	r1, r3
 8011bea:	4291      	cmp	r1, r2
 8011bec:	4682      	mov	sl, r0
 8011bee:	d95e      	bls.n	8011cae <_strtod_l+0xabe>
 8011bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bf2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	d103      	bne.n	8011c02 <_strtod_l+0xa12>
 8011bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	f43f ad43 	beq.w	8011688 <_strtod_l+0x498>
 8011c02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011e00 <_strtod_l+0xc10>
 8011c06:	f04f 3aff 	mov.w	sl, #4294967295
 8011c0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f001 fc7d 	bl	801350c <_Bfree>
 8011c12:	9907      	ldr	r1, [sp, #28]
 8011c14:	4620      	mov	r0, r4
 8011c16:	f001 fc79 	bl	801350c <_Bfree>
 8011c1a:	4631      	mov	r1, r6
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	f001 fc75 	bl	801350c <_Bfree>
 8011c22:	4629      	mov	r1, r5
 8011c24:	4620      	mov	r0, r4
 8011c26:	f001 fc71 	bl	801350c <_Bfree>
 8011c2a:	e613      	b.n	8011854 <_strtod_l+0x664>
 8011c2c:	f1ba 0f00 	cmp.w	sl, #0
 8011c30:	d11b      	bne.n	8011c6a <_strtod_l+0xa7a>
 8011c32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c36:	b9f3      	cbnz	r3, 8011c76 <_strtod_l+0xa86>
 8011c38:	4b6b      	ldr	r3, [pc, #428]	; (8011de8 <_strtod_l+0xbf8>)
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	4640      	mov	r0, r8
 8011c3e:	4649      	mov	r1, r9
 8011c40:	f7ee ff64 	bl	8000b0c <__aeabi_dcmplt>
 8011c44:	b9d0      	cbnz	r0, 8011c7c <_strtod_l+0xa8c>
 8011c46:	4640      	mov	r0, r8
 8011c48:	4649      	mov	r1, r9
 8011c4a:	4b6b      	ldr	r3, [pc, #428]	; (8011df8 <_strtod_l+0xc08>)
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f7ee fceb 	bl	8000628 <__aeabi_dmul>
 8011c52:	4680      	mov	r8, r0
 8011c54:	4689      	mov	r9, r1
 8011c56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011c5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011c5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011c60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011c64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011c68:	e79b      	b.n	8011ba2 <_strtod_l+0x9b2>
 8011c6a:	f1ba 0f01 	cmp.w	sl, #1
 8011c6e:	d102      	bne.n	8011c76 <_strtod_l+0xa86>
 8011c70:	2f00      	cmp	r7, #0
 8011c72:	f43f ad7e 	beq.w	8011772 <_strtod_l+0x582>
 8011c76:	4b61      	ldr	r3, [pc, #388]	; (8011dfc <_strtod_l+0xc0c>)
 8011c78:	2200      	movs	r2, #0
 8011c7a:	e78c      	b.n	8011b96 <_strtod_l+0x9a6>
 8011c7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011df8 <_strtod_l+0xc08>
 8011c80:	f04f 0800 	mov.w	r8, #0
 8011c84:	e7e7      	b.n	8011c56 <_strtod_l+0xa66>
 8011c86:	4b5c      	ldr	r3, [pc, #368]	; (8011df8 <_strtod_l+0xc08>)
 8011c88:	4640      	mov	r0, r8
 8011c8a:	4649      	mov	r1, r9
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f7ee fccb 	bl	8000628 <__aeabi_dmul>
 8011c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c94:	4680      	mov	r8, r0
 8011c96:	4689      	mov	r9, r1
 8011c98:	b933      	cbnz	r3, 8011ca8 <_strtod_l+0xab8>
 8011c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c9e:	9012      	str	r0, [sp, #72]	; 0x48
 8011ca0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011ca2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011ca6:	e7dd      	b.n	8011c64 <_strtod_l+0xa74>
 8011ca8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011cac:	e7f9      	b.n	8011ca2 <_strtod_l+0xab2>
 8011cae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011cb2:	9b04      	ldr	r3, [sp, #16]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d1a8      	bne.n	8011c0a <_strtod_l+0xa1a>
 8011cb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011cbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011cbe:	0d1b      	lsrs	r3, r3, #20
 8011cc0:	051b      	lsls	r3, r3, #20
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d1a1      	bne.n	8011c0a <_strtod_l+0xa1a>
 8011cc6:	4640      	mov	r0, r8
 8011cc8:	4649      	mov	r1, r9
 8011cca:	f7ef f80d 	bl	8000ce8 <__aeabi_d2lz>
 8011cce:	f7ee fc7d 	bl	80005cc <__aeabi_l2d>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	4649      	mov	r1, r9
 8011cda:	f7ee faed 	bl	80002b8 <__aeabi_dsub>
 8011cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ce4:	ea43 030a 	orr.w	r3, r3, sl
 8011ce8:	4313      	orrs	r3, r2
 8011cea:	4680      	mov	r8, r0
 8011cec:	4689      	mov	r9, r1
 8011cee:	d053      	beq.n	8011d98 <_strtod_l+0xba8>
 8011cf0:	a335      	add	r3, pc, #212	; (adr r3, 8011dc8 <_strtod_l+0xbd8>)
 8011cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf6:	f7ee ff09 	bl	8000b0c <__aeabi_dcmplt>
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	f47f acce 	bne.w	801169c <_strtod_l+0x4ac>
 8011d00:	a333      	add	r3, pc, #204	; (adr r3, 8011dd0 <_strtod_l+0xbe0>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	4640      	mov	r0, r8
 8011d08:	4649      	mov	r1, r9
 8011d0a:	f7ee ff1d 	bl	8000b48 <__aeabi_dcmpgt>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	f43f af7b 	beq.w	8011c0a <_strtod_l+0xa1a>
 8011d14:	e4c2      	b.n	801169c <_strtod_l+0x4ac>
 8011d16:	9b04      	ldr	r3, [sp, #16]
 8011d18:	b333      	cbz	r3, 8011d68 <_strtod_l+0xb78>
 8011d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011d20:	d822      	bhi.n	8011d68 <_strtod_l+0xb78>
 8011d22:	a32d      	add	r3, pc, #180	; (adr r3, 8011dd8 <_strtod_l+0xbe8>)
 8011d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d28:	4640      	mov	r0, r8
 8011d2a:	4649      	mov	r1, r9
 8011d2c:	f7ee fef8 	bl	8000b20 <__aeabi_dcmple>
 8011d30:	b1a0      	cbz	r0, 8011d5c <_strtod_l+0xb6c>
 8011d32:	4649      	mov	r1, r9
 8011d34:	4640      	mov	r0, r8
 8011d36:	f7ee ff4f 	bl	8000bd8 <__aeabi_d2uiz>
 8011d3a:	2801      	cmp	r0, #1
 8011d3c:	bf38      	it	cc
 8011d3e:	2001      	movcc	r0, #1
 8011d40:	f7ee fbf8 	bl	8000534 <__aeabi_ui2d>
 8011d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d46:	4680      	mov	r8, r0
 8011d48:	4689      	mov	r9, r1
 8011d4a:	bb13      	cbnz	r3, 8011d92 <_strtod_l+0xba2>
 8011d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d50:	9014      	str	r0, [sp, #80]	; 0x50
 8011d52:	9315      	str	r3, [sp, #84]	; 0x54
 8011d54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011d58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011d60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011d64:	1a9b      	subs	r3, r3, r2
 8011d66:	930d      	str	r3, [sp, #52]	; 0x34
 8011d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011d74:	f001 fef6 	bl	8013b64 <__ulp>
 8011d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d7c:	ec53 2b10 	vmov	r2, r3, d0
 8011d80:	f7ee fc52 	bl	8000628 <__aeabi_dmul>
 8011d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011d88:	f7ee fa98 	bl	80002bc <__adddf3>
 8011d8c:	4682      	mov	sl, r0
 8011d8e:	468b      	mov	fp, r1
 8011d90:	e78f      	b.n	8011cb2 <_strtod_l+0xac2>
 8011d92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011d96:	e7dd      	b.n	8011d54 <_strtod_l+0xb64>
 8011d98:	a311      	add	r3, pc, #68	; (adr r3, 8011de0 <_strtod_l+0xbf0>)
 8011d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9e:	f7ee feb5 	bl	8000b0c <__aeabi_dcmplt>
 8011da2:	e7b4      	b.n	8011d0e <_strtod_l+0xb1e>
 8011da4:	2300      	movs	r3, #0
 8011da6:	930e      	str	r3, [sp, #56]	; 0x38
 8011da8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dac:	6013      	str	r3, [r2, #0]
 8011dae:	f7ff ba65 	b.w	801127c <_strtod_l+0x8c>
 8011db2:	2b65      	cmp	r3, #101	; 0x65
 8011db4:	f43f ab5d 	beq.w	8011472 <_strtod_l+0x282>
 8011db8:	2b45      	cmp	r3, #69	; 0x45
 8011dba:	f43f ab5a 	beq.w	8011472 <_strtod_l+0x282>
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f7ff bb92 	b.w	80114e8 <_strtod_l+0x2f8>
 8011dc4:	f3af 8000 	nop.w
 8011dc8:	94a03595 	.word	0x94a03595
 8011dcc:	3fdfffff 	.word	0x3fdfffff
 8011dd0:	35afe535 	.word	0x35afe535
 8011dd4:	3fe00000 	.word	0x3fe00000
 8011dd8:	ffc00000 	.word	0xffc00000
 8011ddc:	41dfffff 	.word	0x41dfffff
 8011de0:	94a03595 	.word	0x94a03595
 8011de4:	3fcfffff 	.word	0x3fcfffff
 8011de8:	3ff00000 	.word	0x3ff00000
 8011dec:	7ff00000 	.word	0x7ff00000
 8011df0:	7fe00000 	.word	0x7fe00000
 8011df4:	7c9fffff 	.word	0x7c9fffff
 8011df8:	3fe00000 	.word	0x3fe00000
 8011dfc:	bff00000 	.word	0xbff00000
 8011e00:	7fefffff 	.word	0x7fefffff

08011e04 <_strtod_r>:
 8011e04:	4b01      	ldr	r3, [pc, #4]	; (8011e0c <_strtod_r+0x8>)
 8011e06:	f7ff b9f3 	b.w	80111f0 <_strtod_l>
 8011e0a:	bf00      	nop
 8011e0c:	200000a8 	.word	0x200000a8

08011e10 <strtod>:
 8011e10:	460a      	mov	r2, r1
 8011e12:	4601      	mov	r1, r0
 8011e14:	4802      	ldr	r0, [pc, #8]	; (8011e20 <strtod+0x10>)
 8011e16:	4b03      	ldr	r3, [pc, #12]	; (8011e24 <strtod+0x14>)
 8011e18:	6800      	ldr	r0, [r0, #0]
 8011e1a:	f7ff b9e9 	b.w	80111f0 <_strtod_l>
 8011e1e:	bf00      	nop
 8011e20:	20000040 	.word	0x20000040
 8011e24:	200000a8 	.word	0x200000a8

08011e28 <strtok>:
 8011e28:	4b16      	ldr	r3, [pc, #88]	; (8011e84 <strtok+0x5c>)
 8011e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e2c:	681e      	ldr	r6, [r3, #0]
 8011e2e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011e30:	4605      	mov	r5, r0
 8011e32:	b9fc      	cbnz	r4, 8011e74 <strtok+0x4c>
 8011e34:	2050      	movs	r0, #80	; 0x50
 8011e36:	9101      	str	r1, [sp, #4]
 8011e38:	f001 fb00 	bl	801343c <malloc>
 8011e3c:	9901      	ldr	r1, [sp, #4]
 8011e3e:	65b0      	str	r0, [r6, #88]	; 0x58
 8011e40:	4602      	mov	r2, r0
 8011e42:	b920      	cbnz	r0, 8011e4e <strtok+0x26>
 8011e44:	4b10      	ldr	r3, [pc, #64]	; (8011e88 <strtok+0x60>)
 8011e46:	4811      	ldr	r0, [pc, #68]	; (8011e8c <strtok+0x64>)
 8011e48:	2157      	movs	r1, #87	; 0x57
 8011e4a:	f000 f8d9 	bl	8012000 <__assert_func>
 8011e4e:	e9c0 4400 	strd	r4, r4, [r0]
 8011e52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011e56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011e5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011e5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011e62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011e66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011e6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011e6e:	6184      	str	r4, [r0, #24]
 8011e70:	7704      	strb	r4, [r0, #28]
 8011e72:	6244      	str	r4, [r0, #36]	; 0x24
 8011e74:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011e76:	2301      	movs	r3, #1
 8011e78:	4628      	mov	r0, r5
 8011e7a:	b002      	add	sp, #8
 8011e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e80:	f000 b806 	b.w	8011e90 <__strtok_r>
 8011e84:	20000040 	.word	0x20000040
 8011e88:	08028898 	.word	0x08028898
 8011e8c:	080288af 	.word	0x080288af

08011e90 <__strtok_r>:
 8011e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e92:	b908      	cbnz	r0, 8011e98 <__strtok_r+0x8>
 8011e94:	6810      	ldr	r0, [r2, #0]
 8011e96:	b188      	cbz	r0, 8011ebc <__strtok_r+0x2c>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011ea0:	460f      	mov	r7, r1
 8011ea2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011ea6:	b91e      	cbnz	r6, 8011eb0 <__strtok_r+0x20>
 8011ea8:	b965      	cbnz	r5, 8011ec4 <__strtok_r+0x34>
 8011eaa:	6015      	str	r5, [r2, #0]
 8011eac:	4628      	mov	r0, r5
 8011eae:	e005      	b.n	8011ebc <__strtok_r+0x2c>
 8011eb0:	42b5      	cmp	r5, r6
 8011eb2:	d1f6      	bne.n	8011ea2 <__strtok_r+0x12>
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1f0      	bne.n	8011e9a <__strtok_r+0xa>
 8011eb8:	6014      	str	r4, [r2, #0]
 8011eba:	7003      	strb	r3, [r0, #0]
 8011ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ebe:	461c      	mov	r4, r3
 8011ec0:	e00c      	b.n	8011edc <__strtok_r+0x4c>
 8011ec2:	b915      	cbnz	r5, 8011eca <__strtok_r+0x3a>
 8011ec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ec8:	460e      	mov	r6, r1
 8011eca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011ece:	42ab      	cmp	r3, r5
 8011ed0:	d1f7      	bne.n	8011ec2 <__strtok_r+0x32>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d0f3      	beq.n	8011ebe <__strtok_r+0x2e>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011edc:	6014      	str	r4, [r2, #0]
 8011ede:	e7ed      	b.n	8011ebc <__strtok_r+0x2c>

08011ee0 <_strtol_l.isra.0>:
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ee6:	d001      	beq.n	8011eec <_strtol_l.isra.0+0xc>
 8011ee8:	2b24      	cmp	r3, #36	; 0x24
 8011eea:	d906      	bls.n	8011efa <_strtol_l.isra.0+0x1a>
 8011eec:	f7fe fa92 	bl	8010414 <__errno>
 8011ef0:	2316      	movs	r3, #22
 8011ef2:	6003      	str	r3, [r0, #0]
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011efa:	4f3a      	ldr	r7, [pc, #232]	; (8011fe4 <_strtol_l.isra.0+0x104>)
 8011efc:	468e      	mov	lr, r1
 8011efe:	4676      	mov	r6, lr
 8011f00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011f04:	5de5      	ldrb	r5, [r4, r7]
 8011f06:	f015 0508 	ands.w	r5, r5, #8
 8011f0a:	d1f8      	bne.n	8011efe <_strtol_l.isra.0+0x1e>
 8011f0c:	2c2d      	cmp	r4, #45	; 0x2d
 8011f0e:	d134      	bne.n	8011f7a <_strtol_l.isra.0+0x9a>
 8011f10:	f89e 4000 	ldrb.w	r4, [lr]
 8011f14:	f04f 0801 	mov.w	r8, #1
 8011f18:	f106 0e02 	add.w	lr, r6, #2
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d05c      	beq.n	8011fda <_strtol_l.isra.0+0xfa>
 8011f20:	2b10      	cmp	r3, #16
 8011f22:	d10c      	bne.n	8011f3e <_strtol_l.isra.0+0x5e>
 8011f24:	2c30      	cmp	r4, #48	; 0x30
 8011f26:	d10a      	bne.n	8011f3e <_strtol_l.isra.0+0x5e>
 8011f28:	f89e 4000 	ldrb.w	r4, [lr]
 8011f2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011f30:	2c58      	cmp	r4, #88	; 0x58
 8011f32:	d14d      	bne.n	8011fd0 <_strtol_l.isra.0+0xf0>
 8011f34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011f38:	2310      	movs	r3, #16
 8011f3a:	f10e 0e02 	add.w	lr, lr, #2
 8011f3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011f42:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011f46:	2600      	movs	r6, #0
 8011f48:	fbbc f9f3 	udiv	r9, ip, r3
 8011f4c:	4635      	mov	r5, r6
 8011f4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8011f52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011f56:	2f09      	cmp	r7, #9
 8011f58:	d818      	bhi.n	8011f8c <_strtol_l.isra.0+0xac>
 8011f5a:	463c      	mov	r4, r7
 8011f5c:	42a3      	cmp	r3, r4
 8011f5e:	dd24      	ble.n	8011faa <_strtol_l.isra.0+0xca>
 8011f60:	2e00      	cmp	r6, #0
 8011f62:	db1f      	blt.n	8011fa4 <_strtol_l.isra.0+0xc4>
 8011f64:	45a9      	cmp	r9, r5
 8011f66:	d31d      	bcc.n	8011fa4 <_strtol_l.isra.0+0xc4>
 8011f68:	d101      	bne.n	8011f6e <_strtol_l.isra.0+0x8e>
 8011f6a:	45a2      	cmp	sl, r4
 8011f6c:	db1a      	blt.n	8011fa4 <_strtol_l.isra.0+0xc4>
 8011f6e:	fb05 4503 	mla	r5, r5, r3, r4
 8011f72:	2601      	movs	r6, #1
 8011f74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011f78:	e7eb      	b.n	8011f52 <_strtol_l.isra.0+0x72>
 8011f7a:	2c2b      	cmp	r4, #43	; 0x2b
 8011f7c:	bf08      	it	eq
 8011f7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011f82:	46a8      	mov	r8, r5
 8011f84:	bf08      	it	eq
 8011f86:	f106 0e02 	addeq.w	lr, r6, #2
 8011f8a:	e7c7      	b.n	8011f1c <_strtol_l.isra.0+0x3c>
 8011f8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011f90:	2f19      	cmp	r7, #25
 8011f92:	d801      	bhi.n	8011f98 <_strtol_l.isra.0+0xb8>
 8011f94:	3c37      	subs	r4, #55	; 0x37
 8011f96:	e7e1      	b.n	8011f5c <_strtol_l.isra.0+0x7c>
 8011f98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011f9c:	2f19      	cmp	r7, #25
 8011f9e:	d804      	bhi.n	8011faa <_strtol_l.isra.0+0xca>
 8011fa0:	3c57      	subs	r4, #87	; 0x57
 8011fa2:	e7db      	b.n	8011f5c <_strtol_l.isra.0+0x7c>
 8011fa4:	f04f 36ff 	mov.w	r6, #4294967295
 8011fa8:	e7e4      	b.n	8011f74 <_strtol_l.isra.0+0x94>
 8011faa:	2e00      	cmp	r6, #0
 8011fac:	da05      	bge.n	8011fba <_strtol_l.isra.0+0xda>
 8011fae:	2322      	movs	r3, #34	; 0x22
 8011fb0:	6003      	str	r3, [r0, #0]
 8011fb2:	4665      	mov	r5, ip
 8011fb4:	b942      	cbnz	r2, 8011fc8 <_strtol_l.isra.0+0xe8>
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	e79d      	b.n	8011ef6 <_strtol_l.isra.0+0x16>
 8011fba:	f1b8 0f00 	cmp.w	r8, #0
 8011fbe:	d000      	beq.n	8011fc2 <_strtol_l.isra.0+0xe2>
 8011fc0:	426d      	negs	r5, r5
 8011fc2:	2a00      	cmp	r2, #0
 8011fc4:	d0f7      	beq.n	8011fb6 <_strtol_l.isra.0+0xd6>
 8011fc6:	b10e      	cbz	r6, 8011fcc <_strtol_l.isra.0+0xec>
 8011fc8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011fcc:	6011      	str	r1, [r2, #0]
 8011fce:	e7f2      	b.n	8011fb6 <_strtol_l.isra.0+0xd6>
 8011fd0:	2430      	movs	r4, #48	; 0x30
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1b3      	bne.n	8011f3e <_strtol_l.isra.0+0x5e>
 8011fd6:	2308      	movs	r3, #8
 8011fd8:	e7b1      	b.n	8011f3e <_strtol_l.isra.0+0x5e>
 8011fda:	2c30      	cmp	r4, #48	; 0x30
 8011fdc:	d0a4      	beq.n	8011f28 <_strtol_l.isra.0+0x48>
 8011fde:	230a      	movs	r3, #10
 8011fe0:	e7ad      	b.n	8011f3e <_strtol_l.isra.0+0x5e>
 8011fe2:	bf00      	nop
 8011fe4:	0802894d 	.word	0x0802894d

08011fe8 <_strtol_r>:
 8011fe8:	f7ff bf7a 	b.w	8011ee0 <_strtol_l.isra.0>

08011fec <strtol>:
 8011fec:	4613      	mov	r3, r2
 8011fee:	460a      	mov	r2, r1
 8011ff0:	4601      	mov	r1, r0
 8011ff2:	4802      	ldr	r0, [pc, #8]	; (8011ffc <strtol+0x10>)
 8011ff4:	6800      	ldr	r0, [r0, #0]
 8011ff6:	f7ff bf73 	b.w	8011ee0 <_strtol_l.isra.0>
 8011ffa:	bf00      	nop
 8011ffc:	20000040 	.word	0x20000040

08012000 <__assert_func>:
 8012000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012002:	4614      	mov	r4, r2
 8012004:	461a      	mov	r2, r3
 8012006:	4b09      	ldr	r3, [pc, #36]	; (801202c <__assert_func+0x2c>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4605      	mov	r5, r0
 801200c:	68d8      	ldr	r0, [r3, #12]
 801200e:	b14c      	cbz	r4, 8012024 <__assert_func+0x24>
 8012010:	4b07      	ldr	r3, [pc, #28]	; (8012030 <__assert_func+0x30>)
 8012012:	9100      	str	r1, [sp, #0]
 8012014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012018:	4906      	ldr	r1, [pc, #24]	; (8012034 <__assert_func+0x34>)
 801201a:	462b      	mov	r3, r5
 801201c:	f000 fe88 	bl	8012d30 <fiprintf>
 8012020:	f002 fb56 	bl	80146d0 <abort>
 8012024:	4b04      	ldr	r3, [pc, #16]	; (8012038 <__assert_func+0x38>)
 8012026:	461c      	mov	r4, r3
 8012028:	e7f3      	b.n	8012012 <__assert_func+0x12>
 801202a:	bf00      	nop
 801202c:	20000040 	.word	0x20000040
 8012030:	08028910 	.word	0x08028910
 8012034:	0802891d 	.word	0x0802891d
 8012038:	0802894b 	.word	0x0802894b

0801203c <quorem>:
 801203c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012040:	6903      	ldr	r3, [r0, #16]
 8012042:	690c      	ldr	r4, [r1, #16]
 8012044:	42a3      	cmp	r3, r4
 8012046:	4607      	mov	r7, r0
 8012048:	f2c0 8081 	blt.w	801214e <quorem+0x112>
 801204c:	3c01      	subs	r4, #1
 801204e:	f101 0814 	add.w	r8, r1, #20
 8012052:	f100 0514 	add.w	r5, r0, #20
 8012056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801205a:	9301      	str	r3, [sp, #4]
 801205c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012064:	3301      	adds	r3, #1
 8012066:	429a      	cmp	r2, r3
 8012068:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801206c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012070:	fbb2 f6f3 	udiv	r6, r2, r3
 8012074:	d331      	bcc.n	80120da <quorem+0x9e>
 8012076:	f04f 0e00 	mov.w	lr, #0
 801207a:	4640      	mov	r0, r8
 801207c:	46ac      	mov	ip, r5
 801207e:	46f2      	mov	sl, lr
 8012080:	f850 2b04 	ldr.w	r2, [r0], #4
 8012084:	b293      	uxth	r3, r2
 8012086:	fb06 e303 	mla	r3, r6, r3, lr
 801208a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801208e:	b29b      	uxth	r3, r3
 8012090:	ebaa 0303 	sub.w	r3, sl, r3
 8012094:	0c12      	lsrs	r2, r2, #16
 8012096:	f8dc a000 	ldr.w	sl, [ip]
 801209a:	fb06 e202 	mla	r2, r6, r2, lr
 801209e:	fa13 f38a 	uxtah	r3, r3, sl
 80120a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80120a6:	fa1f fa82 	uxth.w	sl, r2
 80120aa:	f8dc 2000 	ldr.w	r2, [ip]
 80120ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80120b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120bc:	4581      	cmp	r9, r0
 80120be:	f84c 3b04 	str.w	r3, [ip], #4
 80120c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80120c6:	d2db      	bcs.n	8012080 <quorem+0x44>
 80120c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80120cc:	b92b      	cbnz	r3, 80120da <quorem+0x9e>
 80120ce:	9b01      	ldr	r3, [sp, #4]
 80120d0:	3b04      	subs	r3, #4
 80120d2:	429d      	cmp	r5, r3
 80120d4:	461a      	mov	r2, r3
 80120d6:	d32e      	bcc.n	8012136 <quorem+0xfa>
 80120d8:	613c      	str	r4, [r7, #16]
 80120da:	4638      	mov	r0, r7
 80120dc:	f001 fc9e 	bl	8013a1c <__mcmp>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	db24      	blt.n	801212e <quorem+0xf2>
 80120e4:	3601      	adds	r6, #1
 80120e6:	4628      	mov	r0, r5
 80120e8:	f04f 0c00 	mov.w	ip, #0
 80120ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80120f0:	f8d0 e000 	ldr.w	lr, [r0]
 80120f4:	b293      	uxth	r3, r2
 80120f6:	ebac 0303 	sub.w	r3, ip, r3
 80120fa:	0c12      	lsrs	r2, r2, #16
 80120fc:	fa13 f38e 	uxtah	r3, r3, lr
 8012100:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012108:	b29b      	uxth	r3, r3
 801210a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801210e:	45c1      	cmp	r9, r8
 8012110:	f840 3b04 	str.w	r3, [r0], #4
 8012114:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012118:	d2e8      	bcs.n	80120ec <quorem+0xb0>
 801211a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801211e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012122:	b922      	cbnz	r2, 801212e <quorem+0xf2>
 8012124:	3b04      	subs	r3, #4
 8012126:	429d      	cmp	r5, r3
 8012128:	461a      	mov	r2, r3
 801212a:	d30a      	bcc.n	8012142 <quorem+0x106>
 801212c:	613c      	str	r4, [r7, #16]
 801212e:	4630      	mov	r0, r6
 8012130:	b003      	add	sp, #12
 8012132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012136:	6812      	ldr	r2, [r2, #0]
 8012138:	3b04      	subs	r3, #4
 801213a:	2a00      	cmp	r2, #0
 801213c:	d1cc      	bne.n	80120d8 <quorem+0x9c>
 801213e:	3c01      	subs	r4, #1
 8012140:	e7c7      	b.n	80120d2 <quorem+0x96>
 8012142:	6812      	ldr	r2, [r2, #0]
 8012144:	3b04      	subs	r3, #4
 8012146:	2a00      	cmp	r2, #0
 8012148:	d1f0      	bne.n	801212c <quorem+0xf0>
 801214a:	3c01      	subs	r4, #1
 801214c:	e7eb      	b.n	8012126 <quorem+0xea>
 801214e:	2000      	movs	r0, #0
 8012150:	e7ee      	b.n	8012130 <quorem+0xf4>
 8012152:	0000      	movs	r0, r0
 8012154:	0000      	movs	r0, r0
	...

08012158 <_dtoa_r>:
 8012158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801215c:	ed2d 8b02 	vpush	{d8}
 8012160:	ec57 6b10 	vmov	r6, r7, d0
 8012164:	b095      	sub	sp, #84	; 0x54
 8012166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801216c:	9105      	str	r1, [sp, #20]
 801216e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012172:	4604      	mov	r4, r0
 8012174:	9209      	str	r2, [sp, #36]	; 0x24
 8012176:	930f      	str	r3, [sp, #60]	; 0x3c
 8012178:	b975      	cbnz	r5, 8012198 <_dtoa_r+0x40>
 801217a:	2010      	movs	r0, #16
 801217c:	f001 f95e 	bl	801343c <malloc>
 8012180:	4602      	mov	r2, r0
 8012182:	6260      	str	r0, [r4, #36]	; 0x24
 8012184:	b920      	cbnz	r0, 8012190 <_dtoa_r+0x38>
 8012186:	4bb2      	ldr	r3, [pc, #712]	; (8012450 <_dtoa_r+0x2f8>)
 8012188:	21ea      	movs	r1, #234	; 0xea
 801218a:	48b2      	ldr	r0, [pc, #712]	; (8012454 <_dtoa_r+0x2fc>)
 801218c:	f7ff ff38 	bl	8012000 <__assert_func>
 8012190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012194:	6005      	str	r5, [r0, #0]
 8012196:	60c5      	str	r5, [r0, #12]
 8012198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801219a:	6819      	ldr	r1, [r3, #0]
 801219c:	b151      	cbz	r1, 80121b4 <_dtoa_r+0x5c>
 801219e:	685a      	ldr	r2, [r3, #4]
 80121a0:	604a      	str	r2, [r1, #4]
 80121a2:	2301      	movs	r3, #1
 80121a4:	4093      	lsls	r3, r2
 80121a6:	608b      	str	r3, [r1, #8]
 80121a8:	4620      	mov	r0, r4
 80121aa:	f001 f9af 	bl	801350c <_Bfree>
 80121ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121b0:	2200      	movs	r2, #0
 80121b2:	601a      	str	r2, [r3, #0]
 80121b4:	1e3b      	subs	r3, r7, #0
 80121b6:	bfb9      	ittee	lt
 80121b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80121bc:	9303      	strlt	r3, [sp, #12]
 80121be:	2300      	movge	r3, #0
 80121c0:	f8c8 3000 	strge.w	r3, [r8]
 80121c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80121c8:	4ba3      	ldr	r3, [pc, #652]	; (8012458 <_dtoa_r+0x300>)
 80121ca:	bfbc      	itt	lt
 80121cc:	2201      	movlt	r2, #1
 80121ce:	f8c8 2000 	strlt.w	r2, [r8]
 80121d2:	ea33 0309 	bics.w	r3, r3, r9
 80121d6:	d11b      	bne.n	8012210 <_dtoa_r+0xb8>
 80121d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121da:	f242 730f 	movw	r3, #9999	; 0x270f
 80121de:	6013      	str	r3, [r2, #0]
 80121e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80121e4:	4333      	orrs	r3, r6
 80121e6:	f000 857a 	beq.w	8012cde <_dtoa_r+0xb86>
 80121ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121ec:	b963      	cbnz	r3, 8012208 <_dtoa_r+0xb0>
 80121ee:	4b9b      	ldr	r3, [pc, #620]	; (801245c <_dtoa_r+0x304>)
 80121f0:	e024      	b.n	801223c <_dtoa_r+0xe4>
 80121f2:	4b9b      	ldr	r3, [pc, #620]	; (8012460 <_dtoa_r+0x308>)
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	3308      	adds	r3, #8
 80121f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80121fa:	6013      	str	r3, [r2, #0]
 80121fc:	9800      	ldr	r0, [sp, #0]
 80121fe:	b015      	add	sp, #84	; 0x54
 8012200:	ecbd 8b02 	vpop	{d8}
 8012204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012208:	4b94      	ldr	r3, [pc, #592]	; (801245c <_dtoa_r+0x304>)
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	3303      	adds	r3, #3
 801220e:	e7f3      	b.n	80121f8 <_dtoa_r+0xa0>
 8012210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012214:	2200      	movs	r2, #0
 8012216:	ec51 0b17 	vmov	r0, r1, d7
 801221a:	2300      	movs	r3, #0
 801221c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012220:	f7ee fc6a 	bl	8000af8 <__aeabi_dcmpeq>
 8012224:	4680      	mov	r8, r0
 8012226:	b158      	cbz	r0, 8012240 <_dtoa_r+0xe8>
 8012228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801222a:	2301      	movs	r3, #1
 801222c:	6013      	str	r3, [r2, #0]
 801222e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 8551 	beq.w	8012cd8 <_dtoa_r+0xb80>
 8012236:	488b      	ldr	r0, [pc, #556]	; (8012464 <_dtoa_r+0x30c>)
 8012238:	6018      	str	r0, [r3, #0]
 801223a:	1e43      	subs	r3, r0, #1
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	e7dd      	b.n	80121fc <_dtoa_r+0xa4>
 8012240:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012244:	aa12      	add	r2, sp, #72	; 0x48
 8012246:	a913      	add	r1, sp, #76	; 0x4c
 8012248:	4620      	mov	r0, r4
 801224a:	f001 fd07 	bl	8013c5c <__d2b>
 801224e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012252:	4683      	mov	fp, r0
 8012254:	2d00      	cmp	r5, #0
 8012256:	d07c      	beq.n	8012352 <_dtoa_r+0x1fa>
 8012258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801225a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801225e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012262:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012266:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801226a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801226e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012272:	4b7d      	ldr	r3, [pc, #500]	; (8012468 <_dtoa_r+0x310>)
 8012274:	2200      	movs	r2, #0
 8012276:	4630      	mov	r0, r6
 8012278:	4639      	mov	r1, r7
 801227a:	f7ee f81d 	bl	80002b8 <__aeabi_dsub>
 801227e:	a36e      	add	r3, pc, #440	; (adr r3, 8012438 <_dtoa_r+0x2e0>)
 8012280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012284:	f7ee f9d0 	bl	8000628 <__aeabi_dmul>
 8012288:	a36d      	add	r3, pc, #436	; (adr r3, 8012440 <_dtoa_r+0x2e8>)
 801228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228e:	f7ee f815 	bl	80002bc <__adddf3>
 8012292:	4606      	mov	r6, r0
 8012294:	4628      	mov	r0, r5
 8012296:	460f      	mov	r7, r1
 8012298:	f7ee f95c 	bl	8000554 <__aeabi_i2d>
 801229c:	a36a      	add	r3, pc, #424	; (adr r3, 8012448 <_dtoa_r+0x2f0>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f7ee f9c1 	bl	8000628 <__aeabi_dmul>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4630      	mov	r0, r6
 80122ac:	4639      	mov	r1, r7
 80122ae:	f7ee f805 	bl	80002bc <__adddf3>
 80122b2:	4606      	mov	r6, r0
 80122b4:	460f      	mov	r7, r1
 80122b6:	f7ee fc67 	bl	8000b88 <__aeabi_d2iz>
 80122ba:	2200      	movs	r2, #0
 80122bc:	4682      	mov	sl, r0
 80122be:	2300      	movs	r3, #0
 80122c0:	4630      	mov	r0, r6
 80122c2:	4639      	mov	r1, r7
 80122c4:	f7ee fc22 	bl	8000b0c <__aeabi_dcmplt>
 80122c8:	b148      	cbz	r0, 80122de <_dtoa_r+0x186>
 80122ca:	4650      	mov	r0, sl
 80122cc:	f7ee f942 	bl	8000554 <__aeabi_i2d>
 80122d0:	4632      	mov	r2, r6
 80122d2:	463b      	mov	r3, r7
 80122d4:	f7ee fc10 	bl	8000af8 <__aeabi_dcmpeq>
 80122d8:	b908      	cbnz	r0, 80122de <_dtoa_r+0x186>
 80122da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80122de:	f1ba 0f16 	cmp.w	sl, #22
 80122e2:	d854      	bhi.n	801238e <_dtoa_r+0x236>
 80122e4:	4b61      	ldr	r3, [pc, #388]	; (801246c <_dtoa_r+0x314>)
 80122e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122f2:	f7ee fc0b 	bl	8000b0c <__aeabi_dcmplt>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d04b      	beq.n	8012392 <_dtoa_r+0x23a>
 80122fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80122fe:	2300      	movs	r3, #0
 8012300:	930e      	str	r3, [sp, #56]	; 0x38
 8012302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012304:	1b5d      	subs	r5, r3, r5
 8012306:	1e6b      	subs	r3, r5, #1
 8012308:	9304      	str	r3, [sp, #16]
 801230a:	bf43      	ittte	mi
 801230c:	2300      	movmi	r3, #0
 801230e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012312:	9304      	strmi	r3, [sp, #16]
 8012314:	f04f 0800 	movpl.w	r8, #0
 8012318:	f1ba 0f00 	cmp.w	sl, #0
 801231c:	db3b      	blt.n	8012396 <_dtoa_r+0x23e>
 801231e:	9b04      	ldr	r3, [sp, #16]
 8012320:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012324:	4453      	add	r3, sl
 8012326:	9304      	str	r3, [sp, #16]
 8012328:	2300      	movs	r3, #0
 801232a:	9306      	str	r3, [sp, #24]
 801232c:	9b05      	ldr	r3, [sp, #20]
 801232e:	2b09      	cmp	r3, #9
 8012330:	d869      	bhi.n	8012406 <_dtoa_r+0x2ae>
 8012332:	2b05      	cmp	r3, #5
 8012334:	bfc4      	itt	gt
 8012336:	3b04      	subgt	r3, #4
 8012338:	9305      	strgt	r3, [sp, #20]
 801233a:	9b05      	ldr	r3, [sp, #20]
 801233c:	f1a3 0302 	sub.w	r3, r3, #2
 8012340:	bfcc      	ite	gt
 8012342:	2500      	movgt	r5, #0
 8012344:	2501      	movle	r5, #1
 8012346:	2b03      	cmp	r3, #3
 8012348:	d869      	bhi.n	801241e <_dtoa_r+0x2c6>
 801234a:	e8df f003 	tbb	[pc, r3]
 801234e:	4e2c      	.short	0x4e2c
 8012350:	5a4c      	.short	0x5a4c
 8012352:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012356:	441d      	add	r5, r3
 8012358:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801235c:	2b20      	cmp	r3, #32
 801235e:	bfc1      	itttt	gt
 8012360:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012364:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012368:	fa09 f303 	lslgt.w	r3, r9, r3
 801236c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012370:	bfda      	itte	le
 8012372:	f1c3 0320 	rsble	r3, r3, #32
 8012376:	fa06 f003 	lslle.w	r0, r6, r3
 801237a:	4318      	orrgt	r0, r3
 801237c:	f7ee f8da 	bl	8000534 <__aeabi_ui2d>
 8012380:	2301      	movs	r3, #1
 8012382:	4606      	mov	r6, r0
 8012384:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012388:	3d01      	subs	r5, #1
 801238a:	9310      	str	r3, [sp, #64]	; 0x40
 801238c:	e771      	b.n	8012272 <_dtoa_r+0x11a>
 801238e:	2301      	movs	r3, #1
 8012390:	e7b6      	b.n	8012300 <_dtoa_r+0x1a8>
 8012392:	900e      	str	r0, [sp, #56]	; 0x38
 8012394:	e7b5      	b.n	8012302 <_dtoa_r+0x1aa>
 8012396:	f1ca 0300 	rsb	r3, sl, #0
 801239a:	9306      	str	r3, [sp, #24]
 801239c:	2300      	movs	r3, #0
 801239e:	eba8 080a 	sub.w	r8, r8, sl
 80123a2:	930d      	str	r3, [sp, #52]	; 0x34
 80123a4:	e7c2      	b.n	801232c <_dtoa_r+0x1d4>
 80123a6:	2300      	movs	r3, #0
 80123a8:	9308      	str	r3, [sp, #32]
 80123aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	dc39      	bgt.n	8012424 <_dtoa_r+0x2cc>
 80123b0:	f04f 0901 	mov.w	r9, #1
 80123b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80123b8:	464b      	mov	r3, r9
 80123ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80123be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80123c0:	2200      	movs	r2, #0
 80123c2:	6042      	str	r2, [r0, #4]
 80123c4:	2204      	movs	r2, #4
 80123c6:	f102 0614 	add.w	r6, r2, #20
 80123ca:	429e      	cmp	r6, r3
 80123cc:	6841      	ldr	r1, [r0, #4]
 80123ce:	d92f      	bls.n	8012430 <_dtoa_r+0x2d8>
 80123d0:	4620      	mov	r0, r4
 80123d2:	f001 f85b 	bl	801348c <_Balloc>
 80123d6:	9000      	str	r0, [sp, #0]
 80123d8:	2800      	cmp	r0, #0
 80123da:	d14b      	bne.n	8012474 <_dtoa_r+0x31c>
 80123dc:	4b24      	ldr	r3, [pc, #144]	; (8012470 <_dtoa_r+0x318>)
 80123de:	4602      	mov	r2, r0
 80123e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80123e4:	e6d1      	b.n	801218a <_dtoa_r+0x32>
 80123e6:	2301      	movs	r3, #1
 80123e8:	e7de      	b.n	80123a8 <_dtoa_r+0x250>
 80123ea:	2300      	movs	r3, #0
 80123ec:	9308      	str	r3, [sp, #32]
 80123ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123f0:	eb0a 0903 	add.w	r9, sl, r3
 80123f4:	f109 0301 	add.w	r3, r9, #1
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	bfb8      	it	lt
 80123fe:	2301      	movlt	r3, #1
 8012400:	e7dd      	b.n	80123be <_dtoa_r+0x266>
 8012402:	2301      	movs	r3, #1
 8012404:	e7f2      	b.n	80123ec <_dtoa_r+0x294>
 8012406:	2501      	movs	r5, #1
 8012408:	2300      	movs	r3, #0
 801240a:	9305      	str	r3, [sp, #20]
 801240c:	9508      	str	r5, [sp, #32]
 801240e:	f04f 39ff 	mov.w	r9, #4294967295
 8012412:	2200      	movs	r2, #0
 8012414:	f8cd 9004 	str.w	r9, [sp, #4]
 8012418:	2312      	movs	r3, #18
 801241a:	9209      	str	r2, [sp, #36]	; 0x24
 801241c:	e7cf      	b.n	80123be <_dtoa_r+0x266>
 801241e:	2301      	movs	r3, #1
 8012420:	9308      	str	r3, [sp, #32]
 8012422:	e7f4      	b.n	801240e <_dtoa_r+0x2b6>
 8012424:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012428:	f8cd 9004 	str.w	r9, [sp, #4]
 801242c:	464b      	mov	r3, r9
 801242e:	e7c6      	b.n	80123be <_dtoa_r+0x266>
 8012430:	3101      	adds	r1, #1
 8012432:	6041      	str	r1, [r0, #4]
 8012434:	0052      	lsls	r2, r2, #1
 8012436:	e7c6      	b.n	80123c6 <_dtoa_r+0x26e>
 8012438:	636f4361 	.word	0x636f4361
 801243c:	3fd287a7 	.word	0x3fd287a7
 8012440:	8b60c8b3 	.word	0x8b60c8b3
 8012444:	3fc68a28 	.word	0x3fc68a28
 8012448:	509f79fb 	.word	0x509f79fb
 801244c:	3fd34413 	.word	0x3fd34413
 8012450:	08028898 	.word	0x08028898
 8012454:	08028a5a 	.word	0x08028a5a
 8012458:	7ff00000 	.word	0x7ff00000
 801245c:	08028a56 	.word	0x08028a56
 8012460:	08028a4d 	.word	0x08028a4d
 8012464:	0802881d 	.word	0x0802881d
 8012468:	3ff80000 	.word	0x3ff80000
 801246c:	08028bd0 	.word	0x08028bd0
 8012470:	08028ab9 	.word	0x08028ab9
 8012474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012476:	9a00      	ldr	r2, [sp, #0]
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	9b01      	ldr	r3, [sp, #4]
 801247c:	2b0e      	cmp	r3, #14
 801247e:	f200 80ad 	bhi.w	80125dc <_dtoa_r+0x484>
 8012482:	2d00      	cmp	r5, #0
 8012484:	f000 80aa 	beq.w	80125dc <_dtoa_r+0x484>
 8012488:	f1ba 0f00 	cmp.w	sl, #0
 801248c:	dd36      	ble.n	80124fc <_dtoa_r+0x3a4>
 801248e:	4ac3      	ldr	r2, [pc, #780]	; (801279c <_dtoa_r+0x644>)
 8012490:	f00a 030f 	and.w	r3, sl, #15
 8012494:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012498:	ed93 7b00 	vldr	d7, [r3]
 801249c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80124a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80124a4:	eeb0 8a47 	vmov.f32	s16, s14
 80124a8:	eef0 8a67 	vmov.f32	s17, s15
 80124ac:	d016      	beq.n	80124dc <_dtoa_r+0x384>
 80124ae:	4bbc      	ldr	r3, [pc, #752]	; (80127a0 <_dtoa_r+0x648>)
 80124b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80124b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80124b8:	f7ee f9e0 	bl	800087c <__aeabi_ddiv>
 80124bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124c0:	f007 070f 	and.w	r7, r7, #15
 80124c4:	2503      	movs	r5, #3
 80124c6:	4eb6      	ldr	r6, [pc, #728]	; (80127a0 <_dtoa_r+0x648>)
 80124c8:	b957      	cbnz	r7, 80124e0 <_dtoa_r+0x388>
 80124ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124ce:	ec53 2b18 	vmov	r2, r3, d8
 80124d2:	f7ee f9d3 	bl	800087c <__aeabi_ddiv>
 80124d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124da:	e029      	b.n	8012530 <_dtoa_r+0x3d8>
 80124dc:	2502      	movs	r5, #2
 80124de:	e7f2      	b.n	80124c6 <_dtoa_r+0x36e>
 80124e0:	07f9      	lsls	r1, r7, #31
 80124e2:	d508      	bpl.n	80124f6 <_dtoa_r+0x39e>
 80124e4:	ec51 0b18 	vmov	r0, r1, d8
 80124e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80124ec:	f7ee f89c 	bl	8000628 <__aeabi_dmul>
 80124f0:	ec41 0b18 	vmov	d8, r0, r1
 80124f4:	3501      	adds	r5, #1
 80124f6:	107f      	asrs	r7, r7, #1
 80124f8:	3608      	adds	r6, #8
 80124fa:	e7e5      	b.n	80124c8 <_dtoa_r+0x370>
 80124fc:	f000 80a6 	beq.w	801264c <_dtoa_r+0x4f4>
 8012500:	f1ca 0600 	rsb	r6, sl, #0
 8012504:	4ba5      	ldr	r3, [pc, #660]	; (801279c <_dtoa_r+0x644>)
 8012506:	4fa6      	ldr	r7, [pc, #664]	; (80127a0 <_dtoa_r+0x648>)
 8012508:	f006 020f 	and.w	r2, r6, #15
 801250c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012514:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012518:	f7ee f886 	bl	8000628 <__aeabi_dmul>
 801251c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012520:	1136      	asrs	r6, r6, #4
 8012522:	2300      	movs	r3, #0
 8012524:	2502      	movs	r5, #2
 8012526:	2e00      	cmp	r6, #0
 8012528:	f040 8085 	bne.w	8012636 <_dtoa_r+0x4de>
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1d2      	bne.n	80124d6 <_dtoa_r+0x37e>
 8012530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012532:	2b00      	cmp	r3, #0
 8012534:	f000 808c 	beq.w	8012650 <_dtoa_r+0x4f8>
 8012538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801253c:	4b99      	ldr	r3, [pc, #612]	; (80127a4 <_dtoa_r+0x64c>)
 801253e:	2200      	movs	r2, #0
 8012540:	4630      	mov	r0, r6
 8012542:	4639      	mov	r1, r7
 8012544:	f7ee fae2 	bl	8000b0c <__aeabi_dcmplt>
 8012548:	2800      	cmp	r0, #0
 801254a:	f000 8081 	beq.w	8012650 <_dtoa_r+0x4f8>
 801254e:	9b01      	ldr	r3, [sp, #4]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d07d      	beq.n	8012650 <_dtoa_r+0x4f8>
 8012554:	f1b9 0f00 	cmp.w	r9, #0
 8012558:	dd3c      	ble.n	80125d4 <_dtoa_r+0x47c>
 801255a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801255e:	9307      	str	r3, [sp, #28]
 8012560:	2200      	movs	r2, #0
 8012562:	4b91      	ldr	r3, [pc, #580]	; (80127a8 <_dtoa_r+0x650>)
 8012564:	4630      	mov	r0, r6
 8012566:	4639      	mov	r1, r7
 8012568:	f7ee f85e 	bl	8000628 <__aeabi_dmul>
 801256c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012570:	3501      	adds	r5, #1
 8012572:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012576:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801257a:	4628      	mov	r0, r5
 801257c:	f7ed ffea 	bl	8000554 <__aeabi_i2d>
 8012580:	4632      	mov	r2, r6
 8012582:	463b      	mov	r3, r7
 8012584:	f7ee f850 	bl	8000628 <__aeabi_dmul>
 8012588:	4b88      	ldr	r3, [pc, #544]	; (80127ac <_dtoa_r+0x654>)
 801258a:	2200      	movs	r2, #0
 801258c:	f7ed fe96 	bl	80002bc <__adddf3>
 8012590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012598:	9303      	str	r3, [sp, #12]
 801259a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801259c:	2b00      	cmp	r3, #0
 801259e:	d15c      	bne.n	801265a <_dtoa_r+0x502>
 80125a0:	4b83      	ldr	r3, [pc, #524]	; (80127b0 <_dtoa_r+0x658>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	4630      	mov	r0, r6
 80125a6:	4639      	mov	r1, r7
 80125a8:	f7ed fe86 	bl	80002b8 <__aeabi_dsub>
 80125ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125b0:	4606      	mov	r6, r0
 80125b2:	460f      	mov	r7, r1
 80125b4:	f7ee fac8 	bl	8000b48 <__aeabi_dcmpgt>
 80125b8:	2800      	cmp	r0, #0
 80125ba:	f040 8296 	bne.w	8012aea <_dtoa_r+0x992>
 80125be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80125c2:	4630      	mov	r0, r6
 80125c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125c8:	4639      	mov	r1, r7
 80125ca:	f7ee fa9f 	bl	8000b0c <__aeabi_dcmplt>
 80125ce:	2800      	cmp	r0, #0
 80125d0:	f040 8288 	bne.w	8012ae4 <_dtoa_r+0x98c>
 80125d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80125d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80125dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f2c0 8158 	blt.w	8012894 <_dtoa_r+0x73c>
 80125e4:	f1ba 0f0e 	cmp.w	sl, #14
 80125e8:	f300 8154 	bgt.w	8012894 <_dtoa_r+0x73c>
 80125ec:	4b6b      	ldr	r3, [pc, #428]	; (801279c <_dtoa_r+0x644>)
 80125ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80125f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f280 80e3 	bge.w	80127c4 <_dtoa_r+0x66c>
 80125fe:	9b01      	ldr	r3, [sp, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	f300 80df 	bgt.w	80127c4 <_dtoa_r+0x66c>
 8012606:	f040 826d 	bne.w	8012ae4 <_dtoa_r+0x98c>
 801260a:	4b69      	ldr	r3, [pc, #420]	; (80127b0 <_dtoa_r+0x658>)
 801260c:	2200      	movs	r2, #0
 801260e:	4640      	mov	r0, r8
 8012610:	4649      	mov	r1, r9
 8012612:	f7ee f809 	bl	8000628 <__aeabi_dmul>
 8012616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801261a:	f7ee fa8b 	bl	8000b34 <__aeabi_dcmpge>
 801261e:	9e01      	ldr	r6, [sp, #4]
 8012620:	4637      	mov	r7, r6
 8012622:	2800      	cmp	r0, #0
 8012624:	f040 8243 	bne.w	8012aae <_dtoa_r+0x956>
 8012628:	9d00      	ldr	r5, [sp, #0]
 801262a:	2331      	movs	r3, #49	; 0x31
 801262c:	f805 3b01 	strb.w	r3, [r5], #1
 8012630:	f10a 0a01 	add.w	sl, sl, #1
 8012634:	e23f      	b.n	8012ab6 <_dtoa_r+0x95e>
 8012636:	07f2      	lsls	r2, r6, #31
 8012638:	d505      	bpl.n	8012646 <_dtoa_r+0x4ee>
 801263a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801263e:	f7ed fff3 	bl	8000628 <__aeabi_dmul>
 8012642:	3501      	adds	r5, #1
 8012644:	2301      	movs	r3, #1
 8012646:	1076      	asrs	r6, r6, #1
 8012648:	3708      	adds	r7, #8
 801264a:	e76c      	b.n	8012526 <_dtoa_r+0x3ce>
 801264c:	2502      	movs	r5, #2
 801264e:	e76f      	b.n	8012530 <_dtoa_r+0x3d8>
 8012650:	9b01      	ldr	r3, [sp, #4]
 8012652:	f8cd a01c 	str.w	sl, [sp, #28]
 8012656:	930c      	str	r3, [sp, #48]	; 0x30
 8012658:	e78d      	b.n	8012576 <_dtoa_r+0x41e>
 801265a:	9900      	ldr	r1, [sp, #0]
 801265c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801265e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012660:	4b4e      	ldr	r3, [pc, #312]	; (801279c <_dtoa_r+0x644>)
 8012662:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012666:	4401      	add	r1, r0
 8012668:	9102      	str	r1, [sp, #8]
 801266a:	9908      	ldr	r1, [sp, #32]
 801266c:	eeb0 8a47 	vmov.f32	s16, s14
 8012670:	eef0 8a67 	vmov.f32	s17, s15
 8012674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801267c:	2900      	cmp	r1, #0
 801267e:	d045      	beq.n	801270c <_dtoa_r+0x5b4>
 8012680:	494c      	ldr	r1, [pc, #304]	; (80127b4 <_dtoa_r+0x65c>)
 8012682:	2000      	movs	r0, #0
 8012684:	f7ee f8fa 	bl	800087c <__aeabi_ddiv>
 8012688:	ec53 2b18 	vmov	r2, r3, d8
 801268c:	f7ed fe14 	bl	80002b8 <__aeabi_dsub>
 8012690:	9d00      	ldr	r5, [sp, #0]
 8012692:	ec41 0b18 	vmov	d8, r0, r1
 8012696:	4639      	mov	r1, r7
 8012698:	4630      	mov	r0, r6
 801269a:	f7ee fa75 	bl	8000b88 <__aeabi_d2iz>
 801269e:	900c      	str	r0, [sp, #48]	; 0x30
 80126a0:	f7ed ff58 	bl	8000554 <__aeabi_i2d>
 80126a4:	4602      	mov	r2, r0
 80126a6:	460b      	mov	r3, r1
 80126a8:	4630      	mov	r0, r6
 80126aa:	4639      	mov	r1, r7
 80126ac:	f7ed fe04 	bl	80002b8 <__aeabi_dsub>
 80126b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126b2:	3330      	adds	r3, #48	; 0x30
 80126b4:	f805 3b01 	strb.w	r3, [r5], #1
 80126b8:	ec53 2b18 	vmov	r2, r3, d8
 80126bc:	4606      	mov	r6, r0
 80126be:	460f      	mov	r7, r1
 80126c0:	f7ee fa24 	bl	8000b0c <__aeabi_dcmplt>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d165      	bne.n	8012794 <_dtoa_r+0x63c>
 80126c8:	4632      	mov	r2, r6
 80126ca:	463b      	mov	r3, r7
 80126cc:	4935      	ldr	r1, [pc, #212]	; (80127a4 <_dtoa_r+0x64c>)
 80126ce:	2000      	movs	r0, #0
 80126d0:	f7ed fdf2 	bl	80002b8 <__aeabi_dsub>
 80126d4:	ec53 2b18 	vmov	r2, r3, d8
 80126d8:	f7ee fa18 	bl	8000b0c <__aeabi_dcmplt>
 80126dc:	2800      	cmp	r0, #0
 80126de:	f040 80b9 	bne.w	8012854 <_dtoa_r+0x6fc>
 80126e2:	9b02      	ldr	r3, [sp, #8]
 80126e4:	429d      	cmp	r5, r3
 80126e6:	f43f af75 	beq.w	80125d4 <_dtoa_r+0x47c>
 80126ea:	4b2f      	ldr	r3, [pc, #188]	; (80127a8 <_dtoa_r+0x650>)
 80126ec:	ec51 0b18 	vmov	r0, r1, d8
 80126f0:	2200      	movs	r2, #0
 80126f2:	f7ed ff99 	bl	8000628 <__aeabi_dmul>
 80126f6:	4b2c      	ldr	r3, [pc, #176]	; (80127a8 <_dtoa_r+0x650>)
 80126f8:	ec41 0b18 	vmov	d8, r0, r1
 80126fc:	2200      	movs	r2, #0
 80126fe:	4630      	mov	r0, r6
 8012700:	4639      	mov	r1, r7
 8012702:	f7ed ff91 	bl	8000628 <__aeabi_dmul>
 8012706:	4606      	mov	r6, r0
 8012708:	460f      	mov	r7, r1
 801270a:	e7c4      	b.n	8012696 <_dtoa_r+0x53e>
 801270c:	ec51 0b17 	vmov	r0, r1, d7
 8012710:	f7ed ff8a 	bl	8000628 <__aeabi_dmul>
 8012714:	9b02      	ldr	r3, [sp, #8]
 8012716:	9d00      	ldr	r5, [sp, #0]
 8012718:	930c      	str	r3, [sp, #48]	; 0x30
 801271a:	ec41 0b18 	vmov	d8, r0, r1
 801271e:	4639      	mov	r1, r7
 8012720:	4630      	mov	r0, r6
 8012722:	f7ee fa31 	bl	8000b88 <__aeabi_d2iz>
 8012726:	9011      	str	r0, [sp, #68]	; 0x44
 8012728:	f7ed ff14 	bl	8000554 <__aeabi_i2d>
 801272c:	4602      	mov	r2, r0
 801272e:	460b      	mov	r3, r1
 8012730:	4630      	mov	r0, r6
 8012732:	4639      	mov	r1, r7
 8012734:	f7ed fdc0 	bl	80002b8 <__aeabi_dsub>
 8012738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801273a:	3330      	adds	r3, #48	; 0x30
 801273c:	f805 3b01 	strb.w	r3, [r5], #1
 8012740:	9b02      	ldr	r3, [sp, #8]
 8012742:	429d      	cmp	r5, r3
 8012744:	4606      	mov	r6, r0
 8012746:	460f      	mov	r7, r1
 8012748:	f04f 0200 	mov.w	r2, #0
 801274c:	d134      	bne.n	80127b8 <_dtoa_r+0x660>
 801274e:	4b19      	ldr	r3, [pc, #100]	; (80127b4 <_dtoa_r+0x65c>)
 8012750:	ec51 0b18 	vmov	r0, r1, d8
 8012754:	f7ed fdb2 	bl	80002bc <__adddf3>
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	4630      	mov	r0, r6
 801275e:	4639      	mov	r1, r7
 8012760:	f7ee f9f2 	bl	8000b48 <__aeabi_dcmpgt>
 8012764:	2800      	cmp	r0, #0
 8012766:	d175      	bne.n	8012854 <_dtoa_r+0x6fc>
 8012768:	ec53 2b18 	vmov	r2, r3, d8
 801276c:	4911      	ldr	r1, [pc, #68]	; (80127b4 <_dtoa_r+0x65c>)
 801276e:	2000      	movs	r0, #0
 8012770:	f7ed fda2 	bl	80002b8 <__aeabi_dsub>
 8012774:	4602      	mov	r2, r0
 8012776:	460b      	mov	r3, r1
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	f7ee f9c6 	bl	8000b0c <__aeabi_dcmplt>
 8012780:	2800      	cmp	r0, #0
 8012782:	f43f af27 	beq.w	80125d4 <_dtoa_r+0x47c>
 8012786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012788:	1e6b      	subs	r3, r5, #1
 801278a:	930c      	str	r3, [sp, #48]	; 0x30
 801278c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012790:	2b30      	cmp	r3, #48	; 0x30
 8012792:	d0f8      	beq.n	8012786 <_dtoa_r+0x62e>
 8012794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012798:	e04a      	b.n	8012830 <_dtoa_r+0x6d8>
 801279a:	bf00      	nop
 801279c:	08028bd0 	.word	0x08028bd0
 80127a0:	08028ba8 	.word	0x08028ba8
 80127a4:	3ff00000 	.word	0x3ff00000
 80127a8:	40240000 	.word	0x40240000
 80127ac:	401c0000 	.word	0x401c0000
 80127b0:	40140000 	.word	0x40140000
 80127b4:	3fe00000 	.word	0x3fe00000
 80127b8:	4baf      	ldr	r3, [pc, #700]	; (8012a78 <_dtoa_r+0x920>)
 80127ba:	f7ed ff35 	bl	8000628 <__aeabi_dmul>
 80127be:	4606      	mov	r6, r0
 80127c0:	460f      	mov	r7, r1
 80127c2:	e7ac      	b.n	801271e <_dtoa_r+0x5c6>
 80127c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80127c8:	9d00      	ldr	r5, [sp, #0]
 80127ca:	4642      	mov	r2, r8
 80127cc:	464b      	mov	r3, r9
 80127ce:	4630      	mov	r0, r6
 80127d0:	4639      	mov	r1, r7
 80127d2:	f7ee f853 	bl	800087c <__aeabi_ddiv>
 80127d6:	f7ee f9d7 	bl	8000b88 <__aeabi_d2iz>
 80127da:	9002      	str	r0, [sp, #8]
 80127dc:	f7ed feba 	bl	8000554 <__aeabi_i2d>
 80127e0:	4642      	mov	r2, r8
 80127e2:	464b      	mov	r3, r9
 80127e4:	f7ed ff20 	bl	8000628 <__aeabi_dmul>
 80127e8:	4602      	mov	r2, r0
 80127ea:	460b      	mov	r3, r1
 80127ec:	4630      	mov	r0, r6
 80127ee:	4639      	mov	r1, r7
 80127f0:	f7ed fd62 	bl	80002b8 <__aeabi_dsub>
 80127f4:	9e02      	ldr	r6, [sp, #8]
 80127f6:	9f01      	ldr	r7, [sp, #4]
 80127f8:	3630      	adds	r6, #48	; 0x30
 80127fa:	f805 6b01 	strb.w	r6, [r5], #1
 80127fe:	9e00      	ldr	r6, [sp, #0]
 8012800:	1bae      	subs	r6, r5, r6
 8012802:	42b7      	cmp	r7, r6
 8012804:	4602      	mov	r2, r0
 8012806:	460b      	mov	r3, r1
 8012808:	d137      	bne.n	801287a <_dtoa_r+0x722>
 801280a:	f7ed fd57 	bl	80002bc <__adddf3>
 801280e:	4642      	mov	r2, r8
 8012810:	464b      	mov	r3, r9
 8012812:	4606      	mov	r6, r0
 8012814:	460f      	mov	r7, r1
 8012816:	f7ee f997 	bl	8000b48 <__aeabi_dcmpgt>
 801281a:	b9c8      	cbnz	r0, 8012850 <_dtoa_r+0x6f8>
 801281c:	4642      	mov	r2, r8
 801281e:	464b      	mov	r3, r9
 8012820:	4630      	mov	r0, r6
 8012822:	4639      	mov	r1, r7
 8012824:	f7ee f968 	bl	8000af8 <__aeabi_dcmpeq>
 8012828:	b110      	cbz	r0, 8012830 <_dtoa_r+0x6d8>
 801282a:	9b02      	ldr	r3, [sp, #8]
 801282c:	07d9      	lsls	r1, r3, #31
 801282e:	d40f      	bmi.n	8012850 <_dtoa_r+0x6f8>
 8012830:	4620      	mov	r0, r4
 8012832:	4659      	mov	r1, fp
 8012834:	f000 fe6a 	bl	801350c <_Bfree>
 8012838:	2300      	movs	r3, #0
 801283a:	702b      	strb	r3, [r5, #0]
 801283c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801283e:	f10a 0001 	add.w	r0, sl, #1
 8012842:	6018      	str	r0, [r3, #0]
 8012844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012846:	2b00      	cmp	r3, #0
 8012848:	f43f acd8 	beq.w	80121fc <_dtoa_r+0xa4>
 801284c:	601d      	str	r5, [r3, #0]
 801284e:	e4d5      	b.n	80121fc <_dtoa_r+0xa4>
 8012850:	f8cd a01c 	str.w	sl, [sp, #28]
 8012854:	462b      	mov	r3, r5
 8012856:	461d      	mov	r5, r3
 8012858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801285c:	2a39      	cmp	r2, #57	; 0x39
 801285e:	d108      	bne.n	8012872 <_dtoa_r+0x71a>
 8012860:	9a00      	ldr	r2, [sp, #0]
 8012862:	429a      	cmp	r2, r3
 8012864:	d1f7      	bne.n	8012856 <_dtoa_r+0x6fe>
 8012866:	9a07      	ldr	r2, [sp, #28]
 8012868:	9900      	ldr	r1, [sp, #0]
 801286a:	3201      	adds	r2, #1
 801286c:	9207      	str	r2, [sp, #28]
 801286e:	2230      	movs	r2, #48	; 0x30
 8012870:	700a      	strb	r2, [r1, #0]
 8012872:	781a      	ldrb	r2, [r3, #0]
 8012874:	3201      	adds	r2, #1
 8012876:	701a      	strb	r2, [r3, #0]
 8012878:	e78c      	b.n	8012794 <_dtoa_r+0x63c>
 801287a:	4b7f      	ldr	r3, [pc, #508]	; (8012a78 <_dtoa_r+0x920>)
 801287c:	2200      	movs	r2, #0
 801287e:	f7ed fed3 	bl	8000628 <__aeabi_dmul>
 8012882:	2200      	movs	r2, #0
 8012884:	2300      	movs	r3, #0
 8012886:	4606      	mov	r6, r0
 8012888:	460f      	mov	r7, r1
 801288a:	f7ee f935 	bl	8000af8 <__aeabi_dcmpeq>
 801288e:	2800      	cmp	r0, #0
 8012890:	d09b      	beq.n	80127ca <_dtoa_r+0x672>
 8012892:	e7cd      	b.n	8012830 <_dtoa_r+0x6d8>
 8012894:	9a08      	ldr	r2, [sp, #32]
 8012896:	2a00      	cmp	r2, #0
 8012898:	f000 80c4 	beq.w	8012a24 <_dtoa_r+0x8cc>
 801289c:	9a05      	ldr	r2, [sp, #20]
 801289e:	2a01      	cmp	r2, #1
 80128a0:	f300 80a8 	bgt.w	80129f4 <_dtoa_r+0x89c>
 80128a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128a6:	2a00      	cmp	r2, #0
 80128a8:	f000 80a0 	beq.w	80129ec <_dtoa_r+0x894>
 80128ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80128b0:	9e06      	ldr	r6, [sp, #24]
 80128b2:	4645      	mov	r5, r8
 80128b4:	9a04      	ldr	r2, [sp, #16]
 80128b6:	2101      	movs	r1, #1
 80128b8:	441a      	add	r2, r3
 80128ba:	4620      	mov	r0, r4
 80128bc:	4498      	add	r8, r3
 80128be:	9204      	str	r2, [sp, #16]
 80128c0:	f000 ff2a 	bl	8013718 <__i2b>
 80128c4:	4607      	mov	r7, r0
 80128c6:	2d00      	cmp	r5, #0
 80128c8:	dd0b      	ble.n	80128e2 <_dtoa_r+0x78a>
 80128ca:	9b04      	ldr	r3, [sp, #16]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	dd08      	ble.n	80128e2 <_dtoa_r+0x78a>
 80128d0:	42ab      	cmp	r3, r5
 80128d2:	9a04      	ldr	r2, [sp, #16]
 80128d4:	bfa8      	it	ge
 80128d6:	462b      	movge	r3, r5
 80128d8:	eba8 0803 	sub.w	r8, r8, r3
 80128dc:	1aed      	subs	r5, r5, r3
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	9304      	str	r3, [sp, #16]
 80128e2:	9b06      	ldr	r3, [sp, #24]
 80128e4:	b1fb      	cbz	r3, 8012926 <_dtoa_r+0x7ce>
 80128e6:	9b08      	ldr	r3, [sp, #32]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 809f 	beq.w	8012a2c <_dtoa_r+0x8d4>
 80128ee:	2e00      	cmp	r6, #0
 80128f0:	dd11      	ble.n	8012916 <_dtoa_r+0x7be>
 80128f2:	4639      	mov	r1, r7
 80128f4:	4632      	mov	r2, r6
 80128f6:	4620      	mov	r0, r4
 80128f8:	f000 ffca 	bl	8013890 <__pow5mult>
 80128fc:	465a      	mov	r2, fp
 80128fe:	4601      	mov	r1, r0
 8012900:	4607      	mov	r7, r0
 8012902:	4620      	mov	r0, r4
 8012904:	f000 ff1e 	bl	8013744 <__multiply>
 8012908:	4659      	mov	r1, fp
 801290a:	9007      	str	r0, [sp, #28]
 801290c:	4620      	mov	r0, r4
 801290e:	f000 fdfd 	bl	801350c <_Bfree>
 8012912:	9b07      	ldr	r3, [sp, #28]
 8012914:	469b      	mov	fp, r3
 8012916:	9b06      	ldr	r3, [sp, #24]
 8012918:	1b9a      	subs	r2, r3, r6
 801291a:	d004      	beq.n	8012926 <_dtoa_r+0x7ce>
 801291c:	4659      	mov	r1, fp
 801291e:	4620      	mov	r0, r4
 8012920:	f000 ffb6 	bl	8013890 <__pow5mult>
 8012924:	4683      	mov	fp, r0
 8012926:	2101      	movs	r1, #1
 8012928:	4620      	mov	r0, r4
 801292a:	f000 fef5 	bl	8013718 <__i2b>
 801292e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012930:	2b00      	cmp	r3, #0
 8012932:	4606      	mov	r6, r0
 8012934:	dd7c      	ble.n	8012a30 <_dtoa_r+0x8d8>
 8012936:	461a      	mov	r2, r3
 8012938:	4601      	mov	r1, r0
 801293a:	4620      	mov	r0, r4
 801293c:	f000 ffa8 	bl	8013890 <__pow5mult>
 8012940:	9b05      	ldr	r3, [sp, #20]
 8012942:	2b01      	cmp	r3, #1
 8012944:	4606      	mov	r6, r0
 8012946:	dd76      	ble.n	8012a36 <_dtoa_r+0x8de>
 8012948:	2300      	movs	r3, #0
 801294a:	9306      	str	r3, [sp, #24]
 801294c:	6933      	ldr	r3, [r6, #16]
 801294e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012952:	6918      	ldr	r0, [r3, #16]
 8012954:	f000 fe90 	bl	8013678 <__hi0bits>
 8012958:	f1c0 0020 	rsb	r0, r0, #32
 801295c:	9b04      	ldr	r3, [sp, #16]
 801295e:	4418      	add	r0, r3
 8012960:	f010 001f 	ands.w	r0, r0, #31
 8012964:	f000 8086 	beq.w	8012a74 <_dtoa_r+0x91c>
 8012968:	f1c0 0320 	rsb	r3, r0, #32
 801296c:	2b04      	cmp	r3, #4
 801296e:	dd7f      	ble.n	8012a70 <_dtoa_r+0x918>
 8012970:	f1c0 001c 	rsb	r0, r0, #28
 8012974:	9b04      	ldr	r3, [sp, #16]
 8012976:	4403      	add	r3, r0
 8012978:	4480      	add	r8, r0
 801297a:	4405      	add	r5, r0
 801297c:	9304      	str	r3, [sp, #16]
 801297e:	f1b8 0f00 	cmp.w	r8, #0
 8012982:	dd05      	ble.n	8012990 <_dtoa_r+0x838>
 8012984:	4659      	mov	r1, fp
 8012986:	4642      	mov	r2, r8
 8012988:	4620      	mov	r0, r4
 801298a:	f000 ffdb 	bl	8013944 <__lshift>
 801298e:	4683      	mov	fp, r0
 8012990:	9b04      	ldr	r3, [sp, #16]
 8012992:	2b00      	cmp	r3, #0
 8012994:	dd05      	ble.n	80129a2 <_dtoa_r+0x84a>
 8012996:	4631      	mov	r1, r6
 8012998:	461a      	mov	r2, r3
 801299a:	4620      	mov	r0, r4
 801299c:	f000 ffd2 	bl	8013944 <__lshift>
 80129a0:	4606      	mov	r6, r0
 80129a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d069      	beq.n	8012a7c <_dtoa_r+0x924>
 80129a8:	4631      	mov	r1, r6
 80129aa:	4658      	mov	r0, fp
 80129ac:	f001 f836 	bl	8013a1c <__mcmp>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	da63      	bge.n	8012a7c <_dtoa_r+0x924>
 80129b4:	2300      	movs	r3, #0
 80129b6:	4659      	mov	r1, fp
 80129b8:	220a      	movs	r2, #10
 80129ba:	4620      	mov	r0, r4
 80129bc:	f000 fdc8 	bl	8013550 <__multadd>
 80129c0:	9b08      	ldr	r3, [sp, #32]
 80129c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80129c6:	4683      	mov	fp, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f000 818f 	beq.w	8012cec <_dtoa_r+0xb94>
 80129ce:	4639      	mov	r1, r7
 80129d0:	2300      	movs	r3, #0
 80129d2:	220a      	movs	r2, #10
 80129d4:	4620      	mov	r0, r4
 80129d6:	f000 fdbb 	bl	8013550 <__multadd>
 80129da:	f1b9 0f00 	cmp.w	r9, #0
 80129de:	4607      	mov	r7, r0
 80129e0:	f300 808e 	bgt.w	8012b00 <_dtoa_r+0x9a8>
 80129e4:	9b05      	ldr	r3, [sp, #20]
 80129e6:	2b02      	cmp	r3, #2
 80129e8:	dc50      	bgt.n	8012a8c <_dtoa_r+0x934>
 80129ea:	e089      	b.n	8012b00 <_dtoa_r+0x9a8>
 80129ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80129f2:	e75d      	b.n	80128b0 <_dtoa_r+0x758>
 80129f4:	9b01      	ldr	r3, [sp, #4]
 80129f6:	1e5e      	subs	r6, r3, #1
 80129f8:	9b06      	ldr	r3, [sp, #24]
 80129fa:	42b3      	cmp	r3, r6
 80129fc:	bfbf      	itttt	lt
 80129fe:	9b06      	ldrlt	r3, [sp, #24]
 8012a00:	9606      	strlt	r6, [sp, #24]
 8012a02:	1af2      	sublt	r2, r6, r3
 8012a04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012a06:	bfb6      	itet	lt
 8012a08:	189b      	addlt	r3, r3, r2
 8012a0a:	1b9e      	subge	r6, r3, r6
 8012a0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012a0e:	9b01      	ldr	r3, [sp, #4]
 8012a10:	bfb8      	it	lt
 8012a12:	2600      	movlt	r6, #0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	bfb5      	itete	lt
 8012a18:	eba8 0503 	sublt.w	r5, r8, r3
 8012a1c:	9b01      	ldrge	r3, [sp, #4]
 8012a1e:	2300      	movlt	r3, #0
 8012a20:	4645      	movge	r5, r8
 8012a22:	e747      	b.n	80128b4 <_dtoa_r+0x75c>
 8012a24:	9e06      	ldr	r6, [sp, #24]
 8012a26:	9f08      	ldr	r7, [sp, #32]
 8012a28:	4645      	mov	r5, r8
 8012a2a:	e74c      	b.n	80128c6 <_dtoa_r+0x76e>
 8012a2c:	9a06      	ldr	r2, [sp, #24]
 8012a2e:	e775      	b.n	801291c <_dtoa_r+0x7c4>
 8012a30:	9b05      	ldr	r3, [sp, #20]
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	dc18      	bgt.n	8012a68 <_dtoa_r+0x910>
 8012a36:	9b02      	ldr	r3, [sp, #8]
 8012a38:	b9b3      	cbnz	r3, 8012a68 <_dtoa_r+0x910>
 8012a3a:	9b03      	ldr	r3, [sp, #12]
 8012a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a40:	b9a3      	cbnz	r3, 8012a6c <_dtoa_r+0x914>
 8012a42:	9b03      	ldr	r3, [sp, #12]
 8012a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a48:	0d1b      	lsrs	r3, r3, #20
 8012a4a:	051b      	lsls	r3, r3, #20
 8012a4c:	b12b      	cbz	r3, 8012a5a <_dtoa_r+0x902>
 8012a4e:	9b04      	ldr	r3, [sp, #16]
 8012a50:	3301      	adds	r3, #1
 8012a52:	9304      	str	r3, [sp, #16]
 8012a54:	f108 0801 	add.w	r8, r8, #1
 8012a58:	2301      	movs	r3, #1
 8012a5a:	9306      	str	r3, [sp, #24]
 8012a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f47f af74 	bne.w	801294c <_dtoa_r+0x7f4>
 8012a64:	2001      	movs	r0, #1
 8012a66:	e779      	b.n	801295c <_dtoa_r+0x804>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	e7f6      	b.n	8012a5a <_dtoa_r+0x902>
 8012a6c:	9b02      	ldr	r3, [sp, #8]
 8012a6e:	e7f4      	b.n	8012a5a <_dtoa_r+0x902>
 8012a70:	d085      	beq.n	801297e <_dtoa_r+0x826>
 8012a72:	4618      	mov	r0, r3
 8012a74:	301c      	adds	r0, #28
 8012a76:	e77d      	b.n	8012974 <_dtoa_r+0x81c>
 8012a78:	40240000 	.word	0x40240000
 8012a7c:	9b01      	ldr	r3, [sp, #4]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	dc38      	bgt.n	8012af4 <_dtoa_r+0x99c>
 8012a82:	9b05      	ldr	r3, [sp, #20]
 8012a84:	2b02      	cmp	r3, #2
 8012a86:	dd35      	ble.n	8012af4 <_dtoa_r+0x99c>
 8012a88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a8c:	f1b9 0f00 	cmp.w	r9, #0
 8012a90:	d10d      	bne.n	8012aae <_dtoa_r+0x956>
 8012a92:	4631      	mov	r1, r6
 8012a94:	464b      	mov	r3, r9
 8012a96:	2205      	movs	r2, #5
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f000 fd59 	bl	8013550 <__multadd>
 8012a9e:	4601      	mov	r1, r0
 8012aa0:	4606      	mov	r6, r0
 8012aa2:	4658      	mov	r0, fp
 8012aa4:	f000 ffba 	bl	8013a1c <__mcmp>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	f73f adbd 	bgt.w	8012628 <_dtoa_r+0x4d0>
 8012aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ab0:	9d00      	ldr	r5, [sp, #0]
 8012ab2:	ea6f 0a03 	mvn.w	sl, r3
 8012ab6:	f04f 0800 	mov.w	r8, #0
 8012aba:	4631      	mov	r1, r6
 8012abc:	4620      	mov	r0, r4
 8012abe:	f000 fd25 	bl	801350c <_Bfree>
 8012ac2:	2f00      	cmp	r7, #0
 8012ac4:	f43f aeb4 	beq.w	8012830 <_dtoa_r+0x6d8>
 8012ac8:	f1b8 0f00 	cmp.w	r8, #0
 8012acc:	d005      	beq.n	8012ada <_dtoa_r+0x982>
 8012ace:	45b8      	cmp	r8, r7
 8012ad0:	d003      	beq.n	8012ada <_dtoa_r+0x982>
 8012ad2:	4641      	mov	r1, r8
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	f000 fd19 	bl	801350c <_Bfree>
 8012ada:	4639      	mov	r1, r7
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fd15 	bl	801350c <_Bfree>
 8012ae2:	e6a5      	b.n	8012830 <_dtoa_r+0x6d8>
 8012ae4:	2600      	movs	r6, #0
 8012ae6:	4637      	mov	r7, r6
 8012ae8:	e7e1      	b.n	8012aae <_dtoa_r+0x956>
 8012aea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012aec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012af0:	4637      	mov	r7, r6
 8012af2:	e599      	b.n	8012628 <_dtoa_r+0x4d0>
 8012af4:	9b08      	ldr	r3, [sp, #32]
 8012af6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f000 80fd 	beq.w	8012cfa <_dtoa_r+0xba2>
 8012b00:	2d00      	cmp	r5, #0
 8012b02:	dd05      	ble.n	8012b10 <_dtoa_r+0x9b8>
 8012b04:	4639      	mov	r1, r7
 8012b06:	462a      	mov	r2, r5
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f000 ff1b 	bl	8013944 <__lshift>
 8012b0e:	4607      	mov	r7, r0
 8012b10:	9b06      	ldr	r3, [sp, #24]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d05c      	beq.n	8012bd0 <_dtoa_r+0xa78>
 8012b16:	6879      	ldr	r1, [r7, #4]
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f000 fcb7 	bl	801348c <_Balloc>
 8012b1e:	4605      	mov	r5, r0
 8012b20:	b928      	cbnz	r0, 8012b2e <_dtoa_r+0x9d6>
 8012b22:	4b80      	ldr	r3, [pc, #512]	; (8012d24 <_dtoa_r+0xbcc>)
 8012b24:	4602      	mov	r2, r0
 8012b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012b2a:	f7ff bb2e 	b.w	801218a <_dtoa_r+0x32>
 8012b2e:	693a      	ldr	r2, [r7, #16]
 8012b30:	3202      	adds	r2, #2
 8012b32:	0092      	lsls	r2, r2, #2
 8012b34:	f107 010c 	add.w	r1, r7, #12
 8012b38:	300c      	adds	r0, #12
 8012b3a:	f000 fc99 	bl	8013470 <memcpy>
 8012b3e:	2201      	movs	r2, #1
 8012b40:	4629      	mov	r1, r5
 8012b42:	4620      	mov	r0, r4
 8012b44:	f000 fefe 	bl	8013944 <__lshift>
 8012b48:	9b00      	ldr	r3, [sp, #0]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	9301      	str	r3, [sp, #4]
 8012b4e:	9b00      	ldr	r3, [sp, #0]
 8012b50:	444b      	add	r3, r9
 8012b52:	9307      	str	r3, [sp, #28]
 8012b54:	9b02      	ldr	r3, [sp, #8]
 8012b56:	f003 0301 	and.w	r3, r3, #1
 8012b5a:	46b8      	mov	r8, r7
 8012b5c:	9306      	str	r3, [sp, #24]
 8012b5e:	4607      	mov	r7, r0
 8012b60:	9b01      	ldr	r3, [sp, #4]
 8012b62:	4631      	mov	r1, r6
 8012b64:	3b01      	subs	r3, #1
 8012b66:	4658      	mov	r0, fp
 8012b68:	9302      	str	r3, [sp, #8]
 8012b6a:	f7ff fa67 	bl	801203c <quorem>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	3330      	adds	r3, #48	; 0x30
 8012b72:	9004      	str	r0, [sp, #16]
 8012b74:	4641      	mov	r1, r8
 8012b76:	4658      	mov	r0, fp
 8012b78:	9308      	str	r3, [sp, #32]
 8012b7a:	f000 ff4f 	bl	8013a1c <__mcmp>
 8012b7e:	463a      	mov	r2, r7
 8012b80:	4681      	mov	r9, r0
 8012b82:	4631      	mov	r1, r6
 8012b84:	4620      	mov	r0, r4
 8012b86:	f000 ff65 	bl	8013a54 <__mdiff>
 8012b8a:	68c2      	ldr	r2, [r0, #12]
 8012b8c:	9b08      	ldr	r3, [sp, #32]
 8012b8e:	4605      	mov	r5, r0
 8012b90:	bb02      	cbnz	r2, 8012bd4 <_dtoa_r+0xa7c>
 8012b92:	4601      	mov	r1, r0
 8012b94:	4658      	mov	r0, fp
 8012b96:	f000 ff41 	bl	8013a1c <__mcmp>
 8012b9a:	9b08      	ldr	r3, [sp, #32]
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	4629      	mov	r1, r5
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012ba6:	f000 fcb1 	bl	801350c <_Bfree>
 8012baa:	9b05      	ldr	r3, [sp, #20]
 8012bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bae:	9d01      	ldr	r5, [sp, #4]
 8012bb0:	ea43 0102 	orr.w	r1, r3, r2
 8012bb4:	9b06      	ldr	r3, [sp, #24]
 8012bb6:	430b      	orrs	r3, r1
 8012bb8:	9b08      	ldr	r3, [sp, #32]
 8012bba:	d10d      	bne.n	8012bd8 <_dtoa_r+0xa80>
 8012bbc:	2b39      	cmp	r3, #57	; 0x39
 8012bbe:	d029      	beq.n	8012c14 <_dtoa_r+0xabc>
 8012bc0:	f1b9 0f00 	cmp.w	r9, #0
 8012bc4:	dd01      	ble.n	8012bca <_dtoa_r+0xa72>
 8012bc6:	9b04      	ldr	r3, [sp, #16]
 8012bc8:	3331      	adds	r3, #49	; 0x31
 8012bca:	9a02      	ldr	r2, [sp, #8]
 8012bcc:	7013      	strb	r3, [r2, #0]
 8012bce:	e774      	b.n	8012aba <_dtoa_r+0x962>
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	e7b9      	b.n	8012b48 <_dtoa_r+0x9f0>
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	e7e2      	b.n	8012b9e <_dtoa_r+0xa46>
 8012bd8:	f1b9 0f00 	cmp.w	r9, #0
 8012bdc:	db06      	blt.n	8012bec <_dtoa_r+0xa94>
 8012bde:	9905      	ldr	r1, [sp, #20]
 8012be0:	ea41 0909 	orr.w	r9, r1, r9
 8012be4:	9906      	ldr	r1, [sp, #24]
 8012be6:	ea59 0101 	orrs.w	r1, r9, r1
 8012bea:	d120      	bne.n	8012c2e <_dtoa_r+0xad6>
 8012bec:	2a00      	cmp	r2, #0
 8012bee:	ddec      	ble.n	8012bca <_dtoa_r+0xa72>
 8012bf0:	4659      	mov	r1, fp
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	9301      	str	r3, [sp, #4]
 8012bf8:	f000 fea4 	bl	8013944 <__lshift>
 8012bfc:	4631      	mov	r1, r6
 8012bfe:	4683      	mov	fp, r0
 8012c00:	f000 ff0c 	bl	8013a1c <__mcmp>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	9b01      	ldr	r3, [sp, #4]
 8012c08:	dc02      	bgt.n	8012c10 <_dtoa_r+0xab8>
 8012c0a:	d1de      	bne.n	8012bca <_dtoa_r+0xa72>
 8012c0c:	07da      	lsls	r2, r3, #31
 8012c0e:	d5dc      	bpl.n	8012bca <_dtoa_r+0xa72>
 8012c10:	2b39      	cmp	r3, #57	; 0x39
 8012c12:	d1d8      	bne.n	8012bc6 <_dtoa_r+0xa6e>
 8012c14:	9a02      	ldr	r2, [sp, #8]
 8012c16:	2339      	movs	r3, #57	; 0x39
 8012c18:	7013      	strb	r3, [r2, #0]
 8012c1a:	462b      	mov	r3, r5
 8012c1c:	461d      	mov	r5, r3
 8012c1e:	3b01      	subs	r3, #1
 8012c20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012c24:	2a39      	cmp	r2, #57	; 0x39
 8012c26:	d050      	beq.n	8012cca <_dtoa_r+0xb72>
 8012c28:	3201      	adds	r2, #1
 8012c2a:	701a      	strb	r2, [r3, #0]
 8012c2c:	e745      	b.n	8012aba <_dtoa_r+0x962>
 8012c2e:	2a00      	cmp	r2, #0
 8012c30:	dd03      	ble.n	8012c3a <_dtoa_r+0xae2>
 8012c32:	2b39      	cmp	r3, #57	; 0x39
 8012c34:	d0ee      	beq.n	8012c14 <_dtoa_r+0xabc>
 8012c36:	3301      	adds	r3, #1
 8012c38:	e7c7      	b.n	8012bca <_dtoa_r+0xa72>
 8012c3a:	9a01      	ldr	r2, [sp, #4]
 8012c3c:	9907      	ldr	r1, [sp, #28]
 8012c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012c42:	428a      	cmp	r2, r1
 8012c44:	d02a      	beq.n	8012c9c <_dtoa_r+0xb44>
 8012c46:	4659      	mov	r1, fp
 8012c48:	2300      	movs	r3, #0
 8012c4a:	220a      	movs	r2, #10
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f000 fc7f 	bl	8013550 <__multadd>
 8012c52:	45b8      	cmp	r8, r7
 8012c54:	4683      	mov	fp, r0
 8012c56:	f04f 0300 	mov.w	r3, #0
 8012c5a:	f04f 020a 	mov.w	r2, #10
 8012c5e:	4641      	mov	r1, r8
 8012c60:	4620      	mov	r0, r4
 8012c62:	d107      	bne.n	8012c74 <_dtoa_r+0xb1c>
 8012c64:	f000 fc74 	bl	8013550 <__multadd>
 8012c68:	4680      	mov	r8, r0
 8012c6a:	4607      	mov	r7, r0
 8012c6c:	9b01      	ldr	r3, [sp, #4]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	9301      	str	r3, [sp, #4]
 8012c72:	e775      	b.n	8012b60 <_dtoa_r+0xa08>
 8012c74:	f000 fc6c 	bl	8013550 <__multadd>
 8012c78:	4639      	mov	r1, r7
 8012c7a:	4680      	mov	r8, r0
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	220a      	movs	r2, #10
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 fc65 	bl	8013550 <__multadd>
 8012c86:	4607      	mov	r7, r0
 8012c88:	e7f0      	b.n	8012c6c <_dtoa_r+0xb14>
 8012c8a:	f1b9 0f00 	cmp.w	r9, #0
 8012c8e:	9a00      	ldr	r2, [sp, #0]
 8012c90:	bfcc      	ite	gt
 8012c92:	464d      	movgt	r5, r9
 8012c94:	2501      	movle	r5, #1
 8012c96:	4415      	add	r5, r2
 8012c98:	f04f 0800 	mov.w	r8, #0
 8012c9c:	4659      	mov	r1, fp
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	9301      	str	r3, [sp, #4]
 8012ca4:	f000 fe4e 	bl	8013944 <__lshift>
 8012ca8:	4631      	mov	r1, r6
 8012caa:	4683      	mov	fp, r0
 8012cac:	f000 feb6 	bl	8013a1c <__mcmp>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	dcb2      	bgt.n	8012c1a <_dtoa_r+0xac2>
 8012cb4:	d102      	bne.n	8012cbc <_dtoa_r+0xb64>
 8012cb6:	9b01      	ldr	r3, [sp, #4]
 8012cb8:	07db      	lsls	r3, r3, #31
 8012cba:	d4ae      	bmi.n	8012c1a <_dtoa_r+0xac2>
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	461d      	mov	r5, r3
 8012cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cc4:	2a30      	cmp	r2, #48	; 0x30
 8012cc6:	d0fa      	beq.n	8012cbe <_dtoa_r+0xb66>
 8012cc8:	e6f7      	b.n	8012aba <_dtoa_r+0x962>
 8012cca:	9a00      	ldr	r2, [sp, #0]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d1a5      	bne.n	8012c1c <_dtoa_r+0xac4>
 8012cd0:	f10a 0a01 	add.w	sl, sl, #1
 8012cd4:	2331      	movs	r3, #49	; 0x31
 8012cd6:	e779      	b.n	8012bcc <_dtoa_r+0xa74>
 8012cd8:	4b13      	ldr	r3, [pc, #76]	; (8012d28 <_dtoa_r+0xbd0>)
 8012cda:	f7ff baaf 	b.w	801223c <_dtoa_r+0xe4>
 8012cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f47f aa86 	bne.w	80121f2 <_dtoa_r+0x9a>
 8012ce6:	4b11      	ldr	r3, [pc, #68]	; (8012d2c <_dtoa_r+0xbd4>)
 8012ce8:	f7ff baa8 	b.w	801223c <_dtoa_r+0xe4>
 8012cec:	f1b9 0f00 	cmp.w	r9, #0
 8012cf0:	dc03      	bgt.n	8012cfa <_dtoa_r+0xba2>
 8012cf2:	9b05      	ldr	r3, [sp, #20]
 8012cf4:	2b02      	cmp	r3, #2
 8012cf6:	f73f aec9 	bgt.w	8012a8c <_dtoa_r+0x934>
 8012cfa:	9d00      	ldr	r5, [sp, #0]
 8012cfc:	4631      	mov	r1, r6
 8012cfe:	4658      	mov	r0, fp
 8012d00:	f7ff f99c 	bl	801203c <quorem>
 8012d04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012d08:	f805 3b01 	strb.w	r3, [r5], #1
 8012d0c:	9a00      	ldr	r2, [sp, #0]
 8012d0e:	1aaa      	subs	r2, r5, r2
 8012d10:	4591      	cmp	r9, r2
 8012d12:	ddba      	ble.n	8012c8a <_dtoa_r+0xb32>
 8012d14:	4659      	mov	r1, fp
 8012d16:	2300      	movs	r3, #0
 8012d18:	220a      	movs	r2, #10
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f000 fc18 	bl	8013550 <__multadd>
 8012d20:	4683      	mov	fp, r0
 8012d22:	e7eb      	b.n	8012cfc <_dtoa_r+0xba4>
 8012d24:	08028ab9 	.word	0x08028ab9
 8012d28:	0802881c 	.word	0x0802881c
 8012d2c:	08028a4d 	.word	0x08028a4d

08012d30 <fiprintf>:
 8012d30:	b40e      	push	{r1, r2, r3}
 8012d32:	b503      	push	{r0, r1, lr}
 8012d34:	4601      	mov	r1, r0
 8012d36:	ab03      	add	r3, sp, #12
 8012d38:	4805      	ldr	r0, [pc, #20]	; (8012d50 <fiprintf+0x20>)
 8012d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d3e:	6800      	ldr	r0, [r0, #0]
 8012d40:	9301      	str	r3, [sp, #4]
 8012d42:	f001 fa9d 	bl	8014280 <_vfiprintf_r>
 8012d46:	b002      	add	sp, #8
 8012d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d4c:	b003      	add	sp, #12
 8012d4e:	4770      	bx	lr
 8012d50:	20000040 	.word	0x20000040

08012d54 <rshift>:
 8012d54:	6903      	ldr	r3, [r0, #16]
 8012d56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012d5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012d62:	f100 0414 	add.w	r4, r0, #20
 8012d66:	dd45      	ble.n	8012df4 <rshift+0xa0>
 8012d68:	f011 011f 	ands.w	r1, r1, #31
 8012d6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012d70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012d74:	d10c      	bne.n	8012d90 <rshift+0x3c>
 8012d76:	f100 0710 	add.w	r7, r0, #16
 8012d7a:	4629      	mov	r1, r5
 8012d7c:	42b1      	cmp	r1, r6
 8012d7e:	d334      	bcc.n	8012dea <rshift+0x96>
 8012d80:	1a9b      	subs	r3, r3, r2
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	1eea      	subs	r2, r5, #3
 8012d86:	4296      	cmp	r6, r2
 8012d88:	bf38      	it	cc
 8012d8a:	2300      	movcc	r3, #0
 8012d8c:	4423      	add	r3, r4
 8012d8e:	e015      	b.n	8012dbc <rshift+0x68>
 8012d90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012d94:	f1c1 0820 	rsb	r8, r1, #32
 8012d98:	40cf      	lsrs	r7, r1
 8012d9a:	f105 0e04 	add.w	lr, r5, #4
 8012d9e:	46a1      	mov	r9, r4
 8012da0:	4576      	cmp	r6, lr
 8012da2:	46f4      	mov	ip, lr
 8012da4:	d815      	bhi.n	8012dd2 <rshift+0x7e>
 8012da6:	1a9b      	subs	r3, r3, r2
 8012da8:	009a      	lsls	r2, r3, #2
 8012daa:	3a04      	subs	r2, #4
 8012dac:	3501      	adds	r5, #1
 8012dae:	42ae      	cmp	r6, r5
 8012db0:	bf38      	it	cc
 8012db2:	2200      	movcc	r2, #0
 8012db4:	18a3      	adds	r3, r4, r2
 8012db6:	50a7      	str	r7, [r4, r2]
 8012db8:	b107      	cbz	r7, 8012dbc <rshift+0x68>
 8012dba:	3304      	adds	r3, #4
 8012dbc:	1b1a      	subs	r2, r3, r4
 8012dbe:	42a3      	cmp	r3, r4
 8012dc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012dc4:	bf08      	it	eq
 8012dc6:	2300      	moveq	r3, #0
 8012dc8:	6102      	str	r2, [r0, #16]
 8012dca:	bf08      	it	eq
 8012dcc:	6143      	streq	r3, [r0, #20]
 8012dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dd2:	f8dc c000 	ldr.w	ip, [ip]
 8012dd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8012dda:	ea4c 0707 	orr.w	r7, ip, r7
 8012dde:	f849 7b04 	str.w	r7, [r9], #4
 8012de2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012de6:	40cf      	lsrs	r7, r1
 8012de8:	e7da      	b.n	8012da0 <rshift+0x4c>
 8012dea:	f851 cb04 	ldr.w	ip, [r1], #4
 8012dee:	f847 cf04 	str.w	ip, [r7, #4]!
 8012df2:	e7c3      	b.n	8012d7c <rshift+0x28>
 8012df4:	4623      	mov	r3, r4
 8012df6:	e7e1      	b.n	8012dbc <rshift+0x68>

08012df8 <__hexdig_fun>:
 8012df8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012dfc:	2b09      	cmp	r3, #9
 8012dfe:	d802      	bhi.n	8012e06 <__hexdig_fun+0xe>
 8012e00:	3820      	subs	r0, #32
 8012e02:	b2c0      	uxtb	r0, r0
 8012e04:	4770      	bx	lr
 8012e06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012e0a:	2b05      	cmp	r3, #5
 8012e0c:	d801      	bhi.n	8012e12 <__hexdig_fun+0x1a>
 8012e0e:	3847      	subs	r0, #71	; 0x47
 8012e10:	e7f7      	b.n	8012e02 <__hexdig_fun+0xa>
 8012e12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012e16:	2b05      	cmp	r3, #5
 8012e18:	d801      	bhi.n	8012e1e <__hexdig_fun+0x26>
 8012e1a:	3827      	subs	r0, #39	; 0x27
 8012e1c:	e7f1      	b.n	8012e02 <__hexdig_fun+0xa>
 8012e1e:	2000      	movs	r0, #0
 8012e20:	4770      	bx	lr
	...

08012e24 <__gethex>:
 8012e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e28:	ed2d 8b02 	vpush	{d8}
 8012e2c:	b089      	sub	sp, #36	; 0x24
 8012e2e:	ee08 0a10 	vmov	s16, r0
 8012e32:	9304      	str	r3, [sp, #16]
 8012e34:	4bbc      	ldr	r3, [pc, #752]	; (8013128 <__gethex+0x304>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	9301      	str	r3, [sp, #4]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	468b      	mov	fp, r1
 8012e3e:	4690      	mov	r8, r2
 8012e40:	f7ed f9d8 	bl	80001f4 <strlen>
 8012e44:	9b01      	ldr	r3, [sp, #4]
 8012e46:	f8db 2000 	ldr.w	r2, [fp]
 8012e4a:	4403      	add	r3, r0
 8012e4c:	4682      	mov	sl, r0
 8012e4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012e52:	9305      	str	r3, [sp, #20]
 8012e54:	1c93      	adds	r3, r2, #2
 8012e56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012e5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012e5e:	32fe      	adds	r2, #254	; 0xfe
 8012e60:	18d1      	adds	r1, r2, r3
 8012e62:	461f      	mov	r7, r3
 8012e64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e68:	9100      	str	r1, [sp, #0]
 8012e6a:	2830      	cmp	r0, #48	; 0x30
 8012e6c:	d0f8      	beq.n	8012e60 <__gethex+0x3c>
 8012e6e:	f7ff ffc3 	bl	8012df8 <__hexdig_fun>
 8012e72:	4604      	mov	r4, r0
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d13a      	bne.n	8012eee <__gethex+0xca>
 8012e78:	9901      	ldr	r1, [sp, #4]
 8012e7a:	4652      	mov	r2, sl
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f001 fb47 	bl	8014510 <strncmp>
 8012e82:	4605      	mov	r5, r0
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d168      	bne.n	8012f5a <__gethex+0x136>
 8012e88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012e8c:	eb07 060a 	add.w	r6, r7, sl
 8012e90:	f7ff ffb2 	bl	8012df8 <__hexdig_fun>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	d062      	beq.n	8012f5e <__gethex+0x13a>
 8012e98:	4633      	mov	r3, r6
 8012e9a:	7818      	ldrb	r0, [r3, #0]
 8012e9c:	2830      	cmp	r0, #48	; 0x30
 8012e9e:	461f      	mov	r7, r3
 8012ea0:	f103 0301 	add.w	r3, r3, #1
 8012ea4:	d0f9      	beq.n	8012e9a <__gethex+0x76>
 8012ea6:	f7ff ffa7 	bl	8012df8 <__hexdig_fun>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	fab0 f480 	clz	r4, r0
 8012eb0:	0964      	lsrs	r4, r4, #5
 8012eb2:	4635      	mov	r5, r6
 8012eb4:	9300      	str	r3, [sp, #0]
 8012eb6:	463a      	mov	r2, r7
 8012eb8:	4616      	mov	r6, r2
 8012eba:	3201      	adds	r2, #1
 8012ebc:	7830      	ldrb	r0, [r6, #0]
 8012ebe:	f7ff ff9b 	bl	8012df8 <__hexdig_fun>
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d1f8      	bne.n	8012eb8 <__gethex+0x94>
 8012ec6:	9901      	ldr	r1, [sp, #4]
 8012ec8:	4652      	mov	r2, sl
 8012eca:	4630      	mov	r0, r6
 8012ecc:	f001 fb20 	bl	8014510 <strncmp>
 8012ed0:	b980      	cbnz	r0, 8012ef4 <__gethex+0xd0>
 8012ed2:	b94d      	cbnz	r5, 8012ee8 <__gethex+0xc4>
 8012ed4:	eb06 050a 	add.w	r5, r6, sl
 8012ed8:	462a      	mov	r2, r5
 8012eda:	4616      	mov	r6, r2
 8012edc:	3201      	adds	r2, #1
 8012ede:	7830      	ldrb	r0, [r6, #0]
 8012ee0:	f7ff ff8a 	bl	8012df8 <__hexdig_fun>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d1f8      	bne.n	8012eda <__gethex+0xb6>
 8012ee8:	1bad      	subs	r5, r5, r6
 8012eea:	00ad      	lsls	r5, r5, #2
 8012eec:	e004      	b.n	8012ef8 <__gethex+0xd4>
 8012eee:	2400      	movs	r4, #0
 8012ef0:	4625      	mov	r5, r4
 8012ef2:	e7e0      	b.n	8012eb6 <__gethex+0x92>
 8012ef4:	2d00      	cmp	r5, #0
 8012ef6:	d1f7      	bne.n	8012ee8 <__gethex+0xc4>
 8012ef8:	7833      	ldrb	r3, [r6, #0]
 8012efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012efe:	2b50      	cmp	r3, #80	; 0x50
 8012f00:	d13b      	bne.n	8012f7a <__gethex+0x156>
 8012f02:	7873      	ldrb	r3, [r6, #1]
 8012f04:	2b2b      	cmp	r3, #43	; 0x2b
 8012f06:	d02c      	beq.n	8012f62 <__gethex+0x13e>
 8012f08:	2b2d      	cmp	r3, #45	; 0x2d
 8012f0a:	d02e      	beq.n	8012f6a <__gethex+0x146>
 8012f0c:	1c71      	adds	r1, r6, #1
 8012f0e:	f04f 0900 	mov.w	r9, #0
 8012f12:	7808      	ldrb	r0, [r1, #0]
 8012f14:	f7ff ff70 	bl	8012df8 <__hexdig_fun>
 8012f18:	1e43      	subs	r3, r0, #1
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	2b18      	cmp	r3, #24
 8012f1e:	d82c      	bhi.n	8012f7a <__gethex+0x156>
 8012f20:	f1a0 0210 	sub.w	r2, r0, #16
 8012f24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012f28:	f7ff ff66 	bl	8012df8 <__hexdig_fun>
 8012f2c:	1e43      	subs	r3, r0, #1
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	2b18      	cmp	r3, #24
 8012f32:	d91d      	bls.n	8012f70 <__gethex+0x14c>
 8012f34:	f1b9 0f00 	cmp.w	r9, #0
 8012f38:	d000      	beq.n	8012f3c <__gethex+0x118>
 8012f3a:	4252      	negs	r2, r2
 8012f3c:	4415      	add	r5, r2
 8012f3e:	f8cb 1000 	str.w	r1, [fp]
 8012f42:	b1e4      	cbz	r4, 8012f7e <__gethex+0x15a>
 8012f44:	9b00      	ldr	r3, [sp, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	bf14      	ite	ne
 8012f4a:	2700      	movne	r7, #0
 8012f4c:	2706      	moveq	r7, #6
 8012f4e:	4638      	mov	r0, r7
 8012f50:	b009      	add	sp, #36	; 0x24
 8012f52:	ecbd 8b02 	vpop	{d8}
 8012f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5a:	463e      	mov	r6, r7
 8012f5c:	4625      	mov	r5, r4
 8012f5e:	2401      	movs	r4, #1
 8012f60:	e7ca      	b.n	8012ef8 <__gethex+0xd4>
 8012f62:	f04f 0900 	mov.w	r9, #0
 8012f66:	1cb1      	adds	r1, r6, #2
 8012f68:	e7d3      	b.n	8012f12 <__gethex+0xee>
 8012f6a:	f04f 0901 	mov.w	r9, #1
 8012f6e:	e7fa      	b.n	8012f66 <__gethex+0x142>
 8012f70:	230a      	movs	r3, #10
 8012f72:	fb03 0202 	mla	r2, r3, r2, r0
 8012f76:	3a10      	subs	r2, #16
 8012f78:	e7d4      	b.n	8012f24 <__gethex+0x100>
 8012f7a:	4631      	mov	r1, r6
 8012f7c:	e7df      	b.n	8012f3e <__gethex+0x11a>
 8012f7e:	1bf3      	subs	r3, r6, r7
 8012f80:	3b01      	subs	r3, #1
 8012f82:	4621      	mov	r1, r4
 8012f84:	2b07      	cmp	r3, #7
 8012f86:	dc0b      	bgt.n	8012fa0 <__gethex+0x17c>
 8012f88:	ee18 0a10 	vmov	r0, s16
 8012f8c:	f000 fa7e 	bl	801348c <_Balloc>
 8012f90:	4604      	mov	r4, r0
 8012f92:	b940      	cbnz	r0, 8012fa6 <__gethex+0x182>
 8012f94:	4b65      	ldr	r3, [pc, #404]	; (801312c <__gethex+0x308>)
 8012f96:	4602      	mov	r2, r0
 8012f98:	21de      	movs	r1, #222	; 0xde
 8012f9a:	4865      	ldr	r0, [pc, #404]	; (8013130 <__gethex+0x30c>)
 8012f9c:	f7ff f830 	bl	8012000 <__assert_func>
 8012fa0:	3101      	adds	r1, #1
 8012fa2:	105b      	asrs	r3, r3, #1
 8012fa4:	e7ee      	b.n	8012f84 <__gethex+0x160>
 8012fa6:	f100 0914 	add.w	r9, r0, #20
 8012faa:	f04f 0b00 	mov.w	fp, #0
 8012fae:	f1ca 0301 	rsb	r3, sl, #1
 8012fb2:	f8cd 9008 	str.w	r9, [sp, #8]
 8012fb6:	f8cd b000 	str.w	fp, [sp]
 8012fba:	9306      	str	r3, [sp, #24]
 8012fbc:	42b7      	cmp	r7, r6
 8012fbe:	d340      	bcc.n	8013042 <__gethex+0x21e>
 8012fc0:	9802      	ldr	r0, [sp, #8]
 8012fc2:	9b00      	ldr	r3, [sp, #0]
 8012fc4:	f840 3b04 	str.w	r3, [r0], #4
 8012fc8:	eba0 0009 	sub.w	r0, r0, r9
 8012fcc:	1080      	asrs	r0, r0, #2
 8012fce:	0146      	lsls	r6, r0, #5
 8012fd0:	6120      	str	r0, [r4, #16]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 fb50 	bl	8013678 <__hi0bits>
 8012fd8:	1a30      	subs	r0, r6, r0
 8012fda:	f8d8 6000 	ldr.w	r6, [r8]
 8012fde:	42b0      	cmp	r0, r6
 8012fe0:	dd63      	ble.n	80130aa <__gethex+0x286>
 8012fe2:	1b87      	subs	r7, r0, r6
 8012fe4:	4639      	mov	r1, r7
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f000 feea 	bl	8013dc0 <__any_on>
 8012fec:	4682      	mov	sl, r0
 8012fee:	b1a8      	cbz	r0, 801301c <__gethex+0x1f8>
 8012ff0:	1e7b      	subs	r3, r7, #1
 8012ff2:	1159      	asrs	r1, r3, #5
 8012ff4:	f003 021f 	and.w	r2, r3, #31
 8012ff8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012ffc:	f04f 0a01 	mov.w	sl, #1
 8013000:	fa0a f202 	lsl.w	r2, sl, r2
 8013004:	420a      	tst	r2, r1
 8013006:	d009      	beq.n	801301c <__gethex+0x1f8>
 8013008:	4553      	cmp	r3, sl
 801300a:	dd05      	ble.n	8013018 <__gethex+0x1f4>
 801300c:	1eb9      	subs	r1, r7, #2
 801300e:	4620      	mov	r0, r4
 8013010:	f000 fed6 	bl	8013dc0 <__any_on>
 8013014:	2800      	cmp	r0, #0
 8013016:	d145      	bne.n	80130a4 <__gethex+0x280>
 8013018:	f04f 0a02 	mov.w	sl, #2
 801301c:	4639      	mov	r1, r7
 801301e:	4620      	mov	r0, r4
 8013020:	f7ff fe98 	bl	8012d54 <rshift>
 8013024:	443d      	add	r5, r7
 8013026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801302a:	42ab      	cmp	r3, r5
 801302c:	da4c      	bge.n	80130c8 <__gethex+0x2a4>
 801302e:	ee18 0a10 	vmov	r0, s16
 8013032:	4621      	mov	r1, r4
 8013034:	f000 fa6a 	bl	801350c <_Bfree>
 8013038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801303a:	2300      	movs	r3, #0
 801303c:	6013      	str	r3, [r2, #0]
 801303e:	27a3      	movs	r7, #163	; 0xa3
 8013040:	e785      	b.n	8012f4e <__gethex+0x12a>
 8013042:	1e73      	subs	r3, r6, #1
 8013044:	9a05      	ldr	r2, [sp, #20]
 8013046:	9303      	str	r3, [sp, #12]
 8013048:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801304c:	4293      	cmp	r3, r2
 801304e:	d019      	beq.n	8013084 <__gethex+0x260>
 8013050:	f1bb 0f20 	cmp.w	fp, #32
 8013054:	d107      	bne.n	8013066 <__gethex+0x242>
 8013056:	9b02      	ldr	r3, [sp, #8]
 8013058:	9a00      	ldr	r2, [sp, #0]
 801305a:	f843 2b04 	str.w	r2, [r3], #4
 801305e:	9302      	str	r3, [sp, #8]
 8013060:	2300      	movs	r3, #0
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	469b      	mov	fp, r3
 8013066:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801306a:	f7ff fec5 	bl	8012df8 <__hexdig_fun>
 801306e:	9b00      	ldr	r3, [sp, #0]
 8013070:	f000 000f 	and.w	r0, r0, #15
 8013074:	fa00 f00b 	lsl.w	r0, r0, fp
 8013078:	4303      	orrs	r3, r0
 801307a:	9300      	str	r3, [sp, #0]
 801307c:	f10b 0b04 	add.w	fp, fp, #4
 8013080:	9b03      	ldr	r3, [sp, #12]
 8013082:	e00d      	b.n	80130a0 <__gethex+0x27c>
 8013084:	9b03      	ldr	r3, [sp, #12]
 8013086:	9a06      	ldr	r2, [sp, #24]
 8013088:	4413      	add	r3, r2
 801308a:	42bb      	cmp	r3, r7
 801308c:	d3e0      	bcc.n	8013050 <__gethex+0x22c>
 801308e:	4618      	mov	r0, r3
 8013090:	9901      	ldr	r1, [sp, #4]
 8013092:	9307      	str	r3, [sp, #28]
 8013094:	4652      	mov	r2, sl
 8013096:	f001 fa3b 	bl	8014510 <strncmp>
 801309a:	9b07      	ldr	r3, [sp, #28]
 801309c:	2800      	cmp	r0, #0
 801309e:	d1d7      	bne.n	8013050 <__gethex+0x22c>
 80130a0:	461e      	mov	r6, r3
 80130a2:	e78b      	b.n	8012fbc <__gethex+0x198>
 80130a4:	f04f 0a03 	mov.w	sl, #3
 80130a8:	e7b8      	b.n	801301c <__gethex+0x1f8>
 80130aa:	da0a      	bge.n	80130c2 <__gethex+0x29e>
 80130ac:	1a37      	subs	r7, r6, r0
 80130ae:	4621      	mov	r1, r4
 80130b0:	ee18 0a10 	vmov	r0, s16
 80130b4:	463a      	mov	r2, r7
 80130b6:	f000 fc45 	bl	8013944 <__lshift>
 80130ba:	1bed      	subs	r5, r5, r7
 80130bc:	4604      	mov	r4, r0
 80130be:	f100 0914 	add.w	r9, r0, #20
 80130c2:	f04f 0a00 	mov.w	sl, #0
 80130c6:	e7ae      	b.n	8013026 <__gethex+0x202>
 80130c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80130cc:	42a8      	cmp	r0, r5
 80130ce:	dd72      	ble.n	80131b6 <__gethex+0x392>
 80130d0:	1b45      	subs	r5, r0, r5
 80130d2:	42ae      	cmp	r6, r5
 80130d4:	dc36      	bgt.n	8013144 <__gethex+0x320>
 80130d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130da:	2b02      	cmp	r3, #2
 80130dc:	d02a      	beq.n	8013134 <__gethex+0x310>
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d02c      	beq.n	801313c <__gethex+0x318>
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d115      	bne.n	8013112 <__gethex+0x2ee>
 80130e6:	42ae      	cmp	r6, r5
 80130e8:	d113      	bne.n	8013112 <__gethex+0x2ee>
 80130ea:	2e01      	cmp	r6, #1
 80130ec:	d10b      	bne.n	8013106 <__gethex+0x2e2>
 80130ee:	9a04      	ldr	r2, [sp, #16]
 80130f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80130f4:	6013      	str	r3, [r2, #0]
 80130f6:	2301      	movs	r3, #1
 80130f8:	6123      	str	r3, [r4, #16]
 80130fa:	f8c9 3000 	str.w	r3, [r9]
 80130fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013100:	2762      	movs	r7, #98	; 0x62
 8013102:	601c      	str	r4, [r3, #0]
 8013104:	e723      	b.n	8012f4e <__gethex+0x12a>
 8013106:	1e71      	subs	r1, r6, #1
 8013108:	4620      	mov	r0, r4
 801310a:	f000 fe59 	bl	8013dc0 <__any_on>
 801310e:	2800      	cmp	r0, #0
 8013110:	d1ed      	bne.n	80130ee <__gethex+0x2ca>
 8013112:	ee18 0a10 	vmov	r0, s16
 8013116:	4621      	mov	r1, r4
 8013118:	f000 f9f8 	bl	801350c <_Bfree>
 801311c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801311e:	2300      	movs	r3, #0
 8013120:	6013      	str	r3, [r2, #0]
 8013122:	2750      	movs	r7, #80	; 0x50
 8013124:	e713      	b.n	8012f4e <__gethex+0x12a>
 8013126:	bf00      	nop
 8013128:	08028b34 	.word	0x08028b34
 801312c:	08028ab9 	.word	0x08028ab9
 8013130:	08028aca 	.word	0x08028aca
 8013134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013136:	2b00      	cmp	r3, #0
 8013138:	d1eb      	bne.n	8013112 <__gethex+0x2ee>
 801313a:	e7d8      	b.n	80130ee <__gethex+0x2ca>
 801313c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1d5      	bne.n	80130ee <__gethex+0x2ca>
 8013142:	e7e6      	b.n	8013112 <__gethex+0x2ee>
 8013144:	1e6f      	subs	r7, r5, #1
 8013146:	f1ba 0f00 	cmp.w	sl, #0
 801314a:	d131      	bne.n	80131b0 <__gethex+0x38c>
 801314c:	b127      	cbz	r7, 8013158 <__gethex+0x334>
 801314e:	4639      	mov	r1, r7
 8013150:	4620      	mov	r0, r4
 8013152:	f000 fe35 	bl	8013dc0 <__any_on>
 8013156:	4682      	mov	sl, r0
 8013158:	117b      	asrs	r3, r7, #5
 801315a:	2101      	movs	r1, #1
 801315c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013160:	f007 071f 	and.w	r7, r7, #31
 8013164:	fa01 f707 	lsl.w	r7, r1, r7
 8013168:	421f      	tst	r7, r3
 801316a:	4629      	mov	r1, r5
 801316c:	4620      	mov	r0, r4
 801316e:	bf18      	it	ne
 8013170:	f04a 0a02 	orrne.w	sl, sl, #2
 8013174:	1b76      	subs	r6, r6, r5
 8013176:	f7ff fded 	bl	8012d54 <rshift>
 801317a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801317e:	2702      	movs	r7, #2
 8013180:	f1ba 0f00 	cmp.w	sl, #0
 8013184:	d048      	beq.n	8013218 <__gethex+0x3f4>
 8013186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801318a:	2b02      	cmp	r3, #2
 801318c:	d015      	beq.n	80131ba <__gethex+0x396>
 801318e:	2b03      	cmp	r3, #3
 8013190:	d017      	beq.n	80131c2 <__gethex+0x39e>
 8013192:	2b01      	cmp	r3, #1
 8013194:	d109      	bne.n	80131aa <__gethex+0x386>
 8013196:	f01a 0f02 	tst.w	sl, #2
 801319a:	d006      	beq.n	80131aa <__gethex+0x386>
 801319c:	f8d9 0000 	ldr.w	r0, [r9]
 80131a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80131a4:	f01a 0f01 	tst.w	sl, #1
 80131a8:	d10e      	bne.n	80131c8 <__gethex+0x3a4>
 80131aa:	f047 0710 	orr.w	r7, r7, #16
 80131ae:	e033      	b.n	8013218 <__gethex+0x3f4>
 80131b0:	f04f 0a01 	mov.w	sl, #1
 80131b4:	e7d0      	b.n	8013158 <__gethex+0x334>
 80131b6:	2701      	movs	r7, #1
 80131b8:	e7e2      	b.n	8013180 <__gethex+0x35c>
 80131ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131bc:	f1c3 0301 	rsb	r3, r3, #1
 80131c0:	9315      	str	r3, [sp, #84]	; 0x54
 80131c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d0f0      	beq.n	80131aa <__gethex+0x386>
 80131c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80131cc:	f104 0314 	add.w	r3, r4, #20
 80131d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80131d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80131d8:	f04f 0c00 	mov.w	ip, #0
 80131dc:	4618      	mov	r0, r3
 80131de:	f853 2b04 	ldr.w	r2, [r3], #4
 80131e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80131e6:	d01c      	beq.n	8013222 <__gethex+0x3fe>
 80131e8:	3201      	adds	r2, #1
 80131ea:	6002      	str	r2, [r0, #0]
 80131ec:	2f02      	cmp	r7, #2
 80131ee:	f104 0314 	add.w	r3, r4, #20
 80131f2:	d13f      	bne.n	8013274 <__gethex+0x450>
 80131f4:	f8d8 2000 	ldr.w	r2, [r8]
 80131f8:	3a01      	subs	r2, #1
 80131fa:	42b2      	cmp	r2, r6
 80131fc:	d10a      	bne.n	8013214 <__gethex+0x3f0>
 80131fe:	1171      	asrs	r1, r6, #5
 8013200:	2201      	movs	r2, #1
 8013202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013206:	f006 061f 	and.w	r6, r6, #31
 801320a:	fa02 f606 	lsl.w	r6, r2, r6
 801320e:	421e      	tst	r6, r3
 8013210:	bf18      	it	ne
 8013212:	4617      	movne	r7, r2
 8013214:	f047 0720 	orr.w	r7, r7, #32
 8013218:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801321a:	601c      	str	r4, [r3, #0]
 801321c:	9b04      	ldr	r3, [sp, #16]
 801321e:	601d      	str	r5, [r3, #0]
 8013220:	e695      	b.n	8012f4e <__gethex+0x12a>
 8013222:	4299      	cmp	r1, r3
 8013224:	f843 cc04 	str.w	ip, [r3, #-4]
 8013228:	d8d8      	bhi.n	80131dc <__gethex+0x3b8>
 801322a:	68a3      	ldr	r3, [r4, #8]
 801322c:	459b      	cmp	fp, r3
 801322e:	db19      	blt.n	8013264 <__gethex+0x440>
 8013230:	6861      	ldr	r1, [r4, #4]
 8013232:	ee18 0a10 	vmov	r0, s16
 8013236:	3101      	adds	r1, #1
 8013238:	f000 f928 	bl	801348c <_Balloc>
 801323c:	4681      	mov	r9, r0
 801323e:	b918      	cbnz	r0, 8013248 <__gethex+0x424>
 8013240:	4b1a      	ldr	r3, [pc, #104]	; (80132ac <__gethex+0x488>)
 8013242:	4602      	mov	r2, r0
 8013244:	2184      	movs	r1, #132	; 0x84
 8013246:	e6a8      	b.n	8012f9a <__gethex+0x176>
 8013248:	6922      	ldr	r2, [r4, #16]
 801324a:	3202      	adds	r2, #2
 801324c:	f104 010c 	add.w	r1, r4, #12
 8013250:	0092      	lsls	r2, r2, #2
 8013252:	300c      	adds	r0, #12
 8013254:	f000 f90c 	bl	8013470 <memcpy>
 8013258:	4621      	mov	r1, r4
 801325a:	ee18 0a10 	vmov	r0, s16
 801325e:	f000 f955 	bl	801350c <_Bfree>
 8013262:	464c      	mov	r4, r9
 8013264:	6923      	ldr	r3, [r4, #16]
 8013266:	1c5a      	adds	r2, r3, #1
 8013268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801326c:	6122      	str	r2, [r4, #16]
 801326e:	2201      	movs	r2, #1
 8013270:	615a      	str	r2, [r3, #20]
 8013272:	e7bb      	b.n	80131ec <__gethex+0x3c8>
 8013274:	6922      	ldr	r2, [r4, #16]
 8013276:	455a      	cmp	r2, fp
 8013278:	dd0b      	ble.n	8013292 <__gethex+0x46e>
 801327a:	2101      	movs	r1, #1
 801327c:	4620      	mov	r0, r4
 801327e:	f7ff fd69 	bl	8012d54 <rshift>
 8013282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013286:	3501      	adds	r5, #1
 8013288:	42ab      	cmp	r3, r5
 801328a:	f6ff aed0 	blt.w	801302e <__gethex+0x20a>
 801328e:	2701      	movs	r7, #1
 8013290:	e7c0      	b.n	8013214 <__gethex+0x3f0>
 8013292:	f016 061f 	ands.w	r6, r6, #31
 8013296:	d0fa      	beq.n	801328e <__gethex+0x46a>
 8013298:	449a      	add	sl, r3
 801329a:	f1c6 0620 	rsb	r6, r6, #32
 801329e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80132a2:	f000 f9e9 	bl	8013678 <__hi0bits>
 80132a6:	42b0      	cmp	r0, r6
 80132a8:	dbe7      	blt.n	801327a <__gethex+0x456>
 80132aa:	e7f0      	b.n	801328e <__gethex+0x46a>
 80132ac:	08028ab9 	.word	0x08028ab9

080132b0 <L_shift>:
 80132b0:	f1c2 0208 	rsb	r2, r2, #8
 80132b4:	0092      	lsls	r2, r2, #2
 80132b6:	b570      	push	{r4, r5, r6, lr}
 80132b8:	f1c2 0620 	rsb	r6, r2, #32
 80132bc:	6843      	ldr	r3, [r0, #4]
 80132be:	6804      	ldr	r4, [r0, #0]
 80132c0:	fa03 f506 	lsl.w	r5, r3, r6
 80132c4:	432c      	orrs	r4, r5
 80132c6:	40d3      	lsrs	r3, r2
 80132c8:	6004      	str	r4, [r0, #0]
 80132ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80132ce:	4288      	cmp	r0, r1
 80132d0:	d3f4      	bcc.n	80132bc <L_shift+0xc>
 80132d2:	bd70      	pop	{r4, r5, r6, pc}

080132d4 <__match>:
 80132d4:	b530      	push	{r4, r5, lr}
 80132d6:	6803      	ldr	r3, [r0, #0]
 80132d8:	3301      	adds	r3, #1
 80132da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132de:	b914      	cbnz	r4, 80132e6 <__match+0x12>
 80132e0:	6003      	str	r3, [r0, #0]
 80132e2:	2001      	movs	r0, #1
 80132e4:	bd30      	pop	{r4, r5, pc}
 80132e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80132ee:	2d19      	cmp	r5, #25
 80132f0:	bf98      	it	ls
 80132f2:	3220      	addls	r2, #32
 80132f4:	42a2      	cmp	r2, r4
 80132f6:	d0f0      	beq.n	80132da <__match+0x6>
 80132f8:	2000      	movs	r0, #0
 80132fa:	e7f3      	b.n	80132e4 <__match+0x10>

080132fc <__hexnan>:
 80132fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013300:	680b      	ldr	r3, [r1, #0]
 8013302:	6801      	ldr	r1, [r0, #0]
 8013304:	115e      	asrs	r6, r3, #5
 8013306:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801330a:	f013 031f 	ands.w	r3, r3, #31
 801330e:	b087      	sub	sp, #28
 8013310:	bf18      	it	ne
 8013312:	3604      	addne	r6, #4
 8013314:	2500      	movs	r5, #0
 8013316:	1f37      	subs	r7, r6, #4
 8013318:	4682      	mov	sl, r0
 801331a:	4690      	mov	r8, r2
 801331c:	9301      	str	r3, [sp, #4]
 801331e:	f846 5c04 	str.w	r5, [r6, #-4]
 8013322:	46b9      	mov	r9, r7
 8013324:	463c      	mov	r4, r7
 8013326:	9502      	str	r5, [sp, #8]
 8013328:	46ab      	mov	fp, r5
 801332a:	784a      	ldrb	r2, [r1, #1]
 801332c:	1c4b      	adds	r3, r1, #1
 801332e:	9303      	str	r3, [sp, #12]
 8013330:	b342      	cbz	r2, 8013384 <__hexnan+0x88>
 8013332:	4610      	mov	r0, r2
 8013334:	9105      	str	r1, [sp, #20]
 8013336:	9204      	str	r2, [sp, #16]
 8013338:	f7ff fd5e 	bl	8012df8 <__hexdig_fun>
 801333c:	2800      	cmp	r0, #0
 801333e:	d14f      	bne.n	80133e0 <__hexnan+0xe4>
 8013340:	9a04      	ldr	r2, [sp, #16]
 8013342:	9905      	ldr	r1, [sp, #20]
 8013344:	2a20      	cmp	r2, #32
 8013346:	d818      	bhi.n	801337a <__hexnan+0x7e>
 8013348:	9b02      	ldr	r3, [sp, #8]
 801334a:	459b      	cmp	fp, r3
 801334c:	dd13      	ble.n	8013376 <__hexnan+0x7a>
 801334e:	454c      	cmp	r4, r9
 8013350:	d206      	bcs.n	8013360 <__hexnan+0x64>
 8013352:	2d07      	cmp	r5, #7
 8013354:	dc04      	bgt.n	8013360 <__hexnan+0x64>
 8013356:	462a      	mov	r2, r5
 8013358:	4649      	mov	r1, r9
 801335a:	4620      	mov	r0, r4
 801335c:	f7ff ffa8 	bl	80132b0 <L_shift>
 8013360:	4544      	cmp	r4, r8
 8013362:	d950      	bls.n	8013406 <__hexnan+0x10a>
 8013364:	2300      	movs	r3, #0
 8013366:	f1a4 0904 	sub.w	r9, r4, #4
 801336a:	f844 3c04 	str.w	r3, [r4, #-4]
 801336e:	f8cd b008 	str.w	fp, [sp, #8]
 8013372:	464c      	mov	r4, r9
 8013374:	461d      	mov	r5, r3
 8013376:	9903      	ldr	r1, [sp, #12]
 8013378:	e7d7      	b.n	801332a <__hexnan+0x2e>
 801337a:	2a29      	cmp	r2, #41	; 0x29
 801337c:	d156      	bne.n	801342c <__hexnan+0x130>
 801337e:	3102      	adds	r1, #2
 8013380:	f8ca 1000 	str.w	r1, [sl]
 8013384:	f1bb 0f00 	cmp.w	fp, #0
 8013388:	d050      	beq.n	801342c <__hexnan+0x130>
 801338a:	454c      	cmp	r4, r9
 801338c:	d206      	bcs.n	801339c <__hexnan+0xa0>
 801338e:	2d07      	cmp	r5, #7
 8013390:	dc04      	bgt.n	801339c <__hexnan+0xa0>
 8013392:	462a      	mov	r2, r5
 8013394:	4649      	mov	r1, r9
 8013396:	4620      	mov	r0, r4
 8013398:	f7ff ff8a 	bl	80132b0 <L_shift>
 801339c:	4544      	cmp	r4, r8
 801339e:	d934      	bls.n	801340a <__hexnan+0x10e>
 80133a0:	f1a8 0204 	sub.w	r2, r8, #4
 80133a4:	4623      	mov	r3, r4
 80133a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80133aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80133ae:	429f      	cmp	r7, r3
 80133b0:	d2f9      	bcs.n	80133a6 <__hexnan+0xaa>
 80133b2:	1b3b      	subs	r3, r7, r4
 80133b4:	f023 0303 	bic.w	r3, r3, #3
 80133b8:	3304      	adds	r3, #4
 80133ba:	3401      	adds	r4, #1
 80133bc:	3e03      	subs	r6, #3
 80133be:	42b4      	cmp	r4, r6
 80133c0:	bf88      	it	hi
 80133c2:	2304      	movhi	r3, #4
 80133c4:	4443      	add	r3, r8
 80133c6:	2200      	movs	r2, #0
 80133c8:	f843 2b04 	str.w	r2, [r3], #4
 80133cc:	429f      	cmp	r7, r3
 80133ce:	d2fb      	bcs.n	80133c8 <__hexnan+0xcc>
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	b91b      	cbnz	r3, 80133dc <__hexnan+0xe0>
 80133d4:	4547      	cmp	r7, r8
 80133d6:	d127      	bne.n	8013428 <__hexnan+0x12c>
 80133d8:	2301      	movs	r3, #1
 80133da:	603b      	str	r3, [r7, #0]
 80133dc:	2005      	movs	r0, #5
 80133de:	e026      	b.n	801342e <__hexnan+0x132>
 80133e0:	3501      	adds	r5, #1
 80133e2:	2d08      	cmp	r5, #8
 80133e4:	f10b 0b01 	add.w	fp, fp, #1
 80133e8:	dd06      	ble.n	80133f8 <__hexnan+0xfc>
 80133ea:	4544      	cmp	r4, r8
 80133ec:	d9c3      	bls.n	8013376 <__hexnan+0x7a>
 80133ee:	2300      	movs	r3, #0
 80133f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80133f4:	2501      	movs	r5, #1
 80133f6:	3c04      	subs	r4, #4
 80133f8:	6822      	ldr	r2, [r4, #0]
 80133fa:	f000 000f 	and.w	r0, r0, #15
 80133fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013402:	6022      	str	r2, [r4, #0]
 8013404:	e7b7      	b.n	8013376 <__hexnan+0x7a>
 8013406:	2508      	movs	r5, #8
 8013408:	e7b5      	b.n	8013376 <__hexnan+0x7a>
 801340a:	9b01      	ldr	r3, [sp, #4]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d0df      	beq.n	80133d0 <__hexnan+0xd4>
 8013410:	f04f 32ff 	mov.w	r2, #4294967295
 8013414:	f1c3 0320 	rsb	r3, r3, #32
 8013418:	fa22 f303 	lsr.w	r3, r2, r3
 801341c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013420:	401a      	ands	r2, r3
 8013422:	f846 2c04 	str.w	r2, [r6, #-4]
 8013426:	e7d3      	b.n	80133d0 <__hexnan+0xd4>
 8013428:	3f04      	subs	r7, #4
 801342a:	e7d1      	b.n	80133d0 <__hexnan+0xd4>
 801342c:	2004      	movs	r0, #4
 801342e:	b007      	add	sp, #28
 8013430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013434 <_localeconv_r>:
 8013434:	4800      	ldr	r0, [pc, #0]	; (8013438 <_localeconv_r+0x4>)
 8013436:	4770      	bx	lr
 8013438:	20000198 	.word	0x20000198

0801343c <malloc>:
 801343c:	4b02      	ldr	r3, [pc, #8]	; (8013448 <malloc+0xc>)
 801343e:	4601      	mov	r1, r0
 8013440:	6818      	ldr	r0, [r3, #0]
 8013442:	f000 bd3d 	b.w	8013ec0 <_malloc_r>
 8013446:	bf00      	nop
 8013448:	20000040 	.word	0x20000040

0801344c <__ascii_mbtowc>:
 801344c:	b082      	sub	sp, #8
 801344e:	b901      	cbnz	r1, 8013452 <__ascii_mbtowc+0x6>
 8013450:	a901      	add	r1, sp, #4
 8013452:	b142      	cbz	r2, 8013466 <__ascii_mbtowc+0x1a>
 8013454:	b14b      	cbz	r3, 801346a <__ascii_mbtowc+0x1e>
 8013456:	7813      	ldrb	r3, [r2, #0]
 8013458:	600b      	str	r3, [r1, #0]
 801345a:	7812      	ldrb	r2, [r2, #0]
 801345c:	1e10      	subs	r0, r2, #0
 801345e:	bf18      	it	ne
 8013460:	2001      	movne	r0, #1
 8013462:	b002      	add	sp, #8
 8013464:	4770      	bx	lr
 8013466:	4610      	mov	r0, r2
 8013468:	e7fb      	b.n	8013462 <__ascii_mbtowc+0x16>
 801346a:	f06f 0001 	mvn.w	r0, #1
 801346e:	e7f8      	b.n	8013462 <__ascii_mbtowc+0x16>

08013470 <memcpy>:
 8013470:	440a      	add	r2, r1
 8013472:	4291      	cmp	r1, r2
 8013474:	f100 33ff 	add.w	r3, r0, #4294967295
 8013478:	d100      	bne.n	801347c <memcpy+0xc>
 801347a:	4770      	bx	lr
 801347c:	b510      	push	{r4, lr}
 801347e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013486:	4291      	cmp	r1, r2
 8013488:	d1f9      	bne.n	801347e <memcpy+0xe>
 801348a:	bd10      	pop	{r4, pc}

0801348c <_Balloc>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013490:	4604      	mov	r4, r0
 8013492:	460d      	mov	r5, r1
 8013494:	b976      	cbnz	r6, 80134b4 <_Balloc+0x28>
 8013496:	2010      	movs	r0, #16
 8013498:	f7ff ffd0 	bl	801343c <malloc>
 801349c:	4602      	mov	r2, r0
 801349e:	6260      	str	r0, [r4, #36]	; 0x24
 80134a0:	b920      	cbnz	r0, 80134ac <_Balloc+0x20>
 80134a2:	4b18      	ldr	r3, [pc, #96]	; (8013504 <_Balloc+0x78>)
 80134a4:	4818      	ldr	r0, [pc, #96]	; (8013508 <_Balloc+0x7c>)
 80134a6:	2166      	movs	r1, #102	; 0x66
 80134a8:	f7fe fdaa 	bl	8012000 <__assert_func>
 80134ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80134b0:	6006      	str	r6, [r0, #0]
 80134b2:	60c6      	str	r6, [r0, #12]
 80134b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80134b6:	68f3      	ldr	r3, [r6, #12]
 80134b8:	b183      	cbz	r3, 80134dc <_Balloc+0x50>
 80134ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134bc:	68db      	ldr	r3, [r3, #12]
 80134be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80134c2:	b9b8      	cbnz	r0, 80134f4 <_Balloc+0x68>
 80134c4:	2101      	movs	r1, #1
 80134c6:	fa01 f605 	lsl.w	r6, r1, r5
 80134ca:	1d72      	adds	r2, r6, #5
 80134cc:	0092      	lsls	r2, r2, #2
 80134ce:	4620      	mov	r0, r4
 80134d0:	f000 fc97 	bl	8013e02 <_calloc_r>
 80134d4:	b160      	cbz	r0, 80134f0 <_Balloc+0x64>
 80134d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80134da:	e00e      	b.n	80134fa <_Balloc+0x6e>
 80134dc:	2221      	movs	r2, #33	; 0x21
 80134de:	2104      	movs	r1, #4
 80134e0:	4620      	mov	r0, r4
 80134e2:	f000 fc8e 	bl	8013e02 <_calloc_r>
 80134e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134e8:	60f0      	str	r0, [r6, #12]
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d1e4      	bne.n	80134ba <_Balloc+0x2e>
 80134f0:	2000      	movs	r0, #0
 80134f2:	bd70      	pop	{r4, r5, r6, pc}
 80134f4:	6802      	ldr	r2, [r0, #0]
 80134f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80134fa:	2300      	movs	r3, #0
 80134fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013500:	e7f7      	b.n	80134f2 <_Balloc+0x66>
 8013502:	bf00      	nop
 8013504:	08028898 	.word	0x08028898
 8013508:	08028b48 	.word	0x08028b48

0801350c <_Bfree>:
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013510:	4605      	mov	r5, r0
 8013512:	460c      	mov	r4, r1
 8013514:	b976      	cbnz	r6, 8013534 <_Bfree+0x28>
 8013516:	2010      	movs	r0, #16
 8013518:	f7ff ff90 	bl	801343c <malloc>
 801351c:	4602      	mov	r2, r0
 801351e:	6268      	str	r0, [r5, #36]	; 0x24
 8013520:	b920      	cbnz	r0, 801352c <_Bfree+0x20>
 8013522:	4b09      	ldr	r3, [pc, #36]	; (8013548 <_Bfree+0x3c>)
 8013524:	4809      	ldr	r0, [pc, #36]	; (801354c <_Bfree+0x40>)
 8013526:	218a      	movs	r1, #138	; 0x8a
 8013528:	f7fe fd6a 	bl	8012000 <__assert_func>
 801352c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013530:	6006      	str	r6, [r0, #0]
 8013532:	60c6      	str	r6, [r0, #12]
 8013534:	b13c      	cbz	r4, 8013546 <_Bfree+0x3a>
 8013536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013538:	6862      	ldr	r2, [r4, #4]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013540:	6021      	str	r1, [r4, #0]
 8013542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013546:	bd70      	pop	{r4, r5, r6, pc}
 8013548:	08028898 	.word	0x08028898
 801354c:	08028b48 	.word	0x08028b48

08013550 <__multadd>:
 8013550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013554:	690e      	ldr	r6, [r1, #16]
 8013556:	4607      	mov	r7, r0
 8013558:	4698      	mov	r8, r3
 801355a:	460c      	mov	r4, r1
 801355c:	f101 0014 	add.w	r0, r1, #20
 8013560:	2300      	movs	r3, #0
 8013562:	6805      	ldr	r5, [r0, #0]
 8013564:	b2a9      	uxth	r1, r5
 8013566:	fb02 8101 	mla	r1, r2, r1, r8
 801356a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801356e:	0c2d      	lsrs	r5, r5, #16
 8013570:	fb02 c505 	mla	r5, r2, r5, ip
 8013574:	b289      	uxth	r1, r1
 8013576:	3301      	adds	r3, #1
 8013578:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801357c:	429e      	cmp	r6, r3
 801357e:	f840 1b04 	str.w	r1, [r0], #4
 8013582:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013586:	dcec      	bgt.n	8013562 <__multadd+0x12>
 8013588:	f1b8 0f00 	cmp.w	r8, #0
 801358c:	d022      	beq.n	80135d4 <__multadd+0x84>
 801358e:	68a3      	ldr	r3, [r4, #8]
 8013590:	42b3      	cmp	r3, r6
 8013592:	dc19      	bgt.n	80135c8 <__multadd+0x78>
 8013594:	6861      	ldr	r1, [r4, #4]
 8013596:	4638      	mov	r0, r7
 8013598:	3101      	adds	r1, #1
 801359a:	f7ff ff77 	bl	801348c <_Balloc>
 801359e:	4605      	mov	r5, r0
 80135a0:	b928      	cbnz	r0, 80135ae <__multadd+0x5e>
 80135a2:	4602      	mov	r2, r0
 80135a4:	4b0d      	ldr	r3, [pc, #52]	; (80135dc <__multadd+0x8c>)
 80135a6:	480e      	ldr	r0, [pc, #56]	; (80135e0 <__multadd+0x90>)
 80135a8:	21b5      	movs	r1, #181	; 0xb5
 80135aa:	f7fe fd29 	bl	8012000 <__assert_func>
 80135ae:	6922      	ldr	r2, [r4, #16]
 80135b0:	3202      	adds	r2, #2
 80135b2:	f104 010c 	add.w	r1, r4, #12
 80135b6:	0092      	lsls	r2, r2, #2
 80135b8:	300c      	adds	r0, #12
 80135ba:	f7ff ff59 	bl	8013470 <memcpy>
 80135be:	4621      	mov	r1, r4
 80135c0:	4638      	mov	r0, r7
 80135c2:	f7ff ffa3 	bl	801350c <_Bfree>
 80135c6:	462c      	mov	r4, r5
 80135c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80135cc:	3601      	adds	r6, #1
 80135ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80135d2:	6126      	str	r6, [r4, #16]
 80135d4:	4620      	mov	r0, r4
 80135d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135da:	bf00      	nop
 80135dc:	08028ab9 	.word	0x08028ab9
 80135e0:	08028b48 	.word	0x08028b48

080135e4 <__s2b>:
 80135e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135e8:	460c      	mov	r4, r1
 80135ea:	4615      	mov	r5, r2
 80135ec:	461f      	mov	r7, r3
 80135ee:	2209      	movs	r2, #9
 80135f0:	3308      	adds	r3, #8
 80135f2:	4606      	mov	r6, r0
 80135f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80135f8:	2100      	movs	r1, #0
 80135fa:	2201      	movs	r2, #1
 80135fc:	429a      	cmp	r2, r3
 80135fe:	db09      	blt.n	8013614 <__s2b+0x30>
 8013600:	4630      	mov	r0, r6
 8013602:	f7ff ff43 	bl	801348c <_Balloc>
 8013606:	b940      	cbnz	r0, 801361a <__s2b+0x36>
 8013608:	4602      	mov	r2, r0
 801360a:	4b19      	ldr	r3, [pc, #100]	; (8013670 <__s2b+0x8c>)
 801360c:	4819      	ldr	r0, [pc, #100]	; (8013674 <__s2b+0x90>)
 801360e:	21ce      	movs	r1, #206	; 0xce
 8013610:	f7fe fcf6 	bl	8012000 <__assert_func>
 8013614:	0052      	lsls	r2, r2, #1
 8013616:	3101      	adds	r1, #1
 8013618:	e7f0      	b.n	80135fc <__s2b+0x18>
 801361a:	9b08      	ldr	r3, [sp, #32]
 801361c:	6143      	str	r3, [r0, #20]
 801361e:	2d09      	cmp	r5, #9
 8013620:	f04f 0301 	mov.w	r3, #1
 8013624:	6103      	str	r3, [r0, #16]
 8013626:	dd16      	ble.n	8013656 <__s2b+0x72>
 8013628:	f104 0909 	add.w	r9, r4, #9
 801362c:	46c8      	mov	r8, r9
 801362e:	442c      	add	r4, r5
 8013630:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013634:	4601      	mov	r1, r0
 8013636:	3b30      	subs	r3, #48	; 0x30
 8013638:	220a      	movs	r2, #10
 801363a:	4630      	mov	r0, r6
 801363c:	f7ff ff88 	bl	8013550 <__multadd>
 8013640:	45a0      	cmp	r8, r4
 8013642:	d1f5      	bne.n	8013630 <__s2b+0x4c>
 8013644:	f1a5 0408 	sub.w	r4, r5, #8
 8013648:	444c      	add	r4, r9
 801364a:	1b2d      	subs	r5, r5, r4
 801364c:	1963      	adds	r3, r4, r5
 801364e:	42bb      	cmp	r3, r7
 8013650:	db04      	blt.n	801365c <__s2b+0x78>
 8013652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013656:	340a      	adds	r4, #10
 8013658:	2509      	movs	r5, #9
 801365a:	e7f6      	b.n	801364a <__s2b+0x66>
 801365c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013660:	4601      	mov	r1, r0
 8013662:	3b30      	subs	r3, #48	; 0x30
 8013664:	220a      	movs	r2, #10
 8013666:	4630      	mov	r0, r6
 8013668:	f7ff ff72 	bl	8013550 <__multadd>
 801366c:	e7ee      	b.n	801364c <__s2b+0x68>
 801366e:	bf00      	nop
 8013670:	08028ab9 	.word	0x08028ab9
 8013674:	08028b48 	.word	0x08028b48

08013678 <__hi0bits>:
 8013678:	0c03      	lsrs	r3, r0, #16
 801367a:	041b      	lsls	r3, r3, #16
 801367c:	b9d3      	cbnz	r3, 80136b4 <__hi0bits+0x3c>
 801367e:	0400      	lsls	r0, r0, #16
 8013680:	2310      	movs	r3, #16
 8013682:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013686:	bf04      	itt	eq
 8013688:	0200      	lsleq	r0, r0, #8
 801368a:	3308      	addeq	r3, #8
 801368c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013690:	bf04      	itt	eq
 8013692:	0100      	lsleq	r0, r0, #4
 8013694:	3304      	addeq	r3, #4
 8013696:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801369a:	bf04      	itt	eq
 801369c:	0080      	lsleq	r0, r0, #2
 801369e:	3302      	addeq	r3, #2
 80136a0:	2800      	cmp	r0, #0
 80136a2:	db05      	blt.n	80136b0 <__hi0bits+0x38>
 80136a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80136a8:	f103 0301 	add.w	r3, r3, #1
 80136ac:	bf08      	it	eq
 80136ae:	2320      	moveq	r3, #32
 80136b0:	4618      	mov	r0, r3
 80136b2:	4770      	bx	lr
 80136b4:	2300      	movs	r3, #0
 80136b6:	e7e4      	b.n	8013682 <__hi0bits+0xa>

080136b8 <__lo0bits>:
 80136b8:	6803      	ldr	r3, [r0, #0]
 80136ba:	f013 0207 	ands.w	r2, r3, #7
 80136be:	4601      	mov	r1, r0
 80136c0:	d00b      	beq.n	80136da <__lo0bits+0x22>
 80136c2:	07da      	lsls	r2, r3, #31
 80136c4:	d424      	bmi.n	8013710 <__lo0bits+0x58>
 80136c6:	0798      	lsls	r0, r3, #30
 80136c8:	bf49      	itett	mi
 80136ca:	085b      	lsrmi	r3, r3, #1
 80136cc:	089b      	lsrpl	r3, r3, #2
 80136ce:	2001      	movmi	r0, #1
 80136d0:	600b      	strmi	r3, [r1, #0]
 80136d2:	bf5c      	itt	pl
 80136d4:	600b      	strpl	r3, [r1, #0]
 80136d6:	2002      	movpl	r0, #2
 80136d8:	4770      	bx	lr
 80136da:	b298      	uxth	r0, r3
 80136dc:	b9b0      	cbnz	r0, 801370c <__lo0bits+0x54>
 80136de:	0c1b      	lsrs	r3, r3, #16
 80136e0:	2010      	movs	r0, #16
 80136e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80136e6:	bf04      	itt	eq
 80136e8:	0a1b      	lsreq	r3, r3, #8
 80136ea:	3008      	addeq	r0, #8
 80136ec:	071a      	lsls	r2, r3, #28
 80136ee:	bf04      	itt	eq
 80136f0:	091b      	lsreq	r3, r3, #4
 80136f2:	3004      	addeq	r0, #4
 80136f4:	079a      	lsls	r2, r3, #30
 80136f6:	bf04      	itt	eq
 80136f8:	089b      	lsreq	r3, r3, #2
 80136fa:	3002      	addeq	r0, #2
 80136fc:	07da      	lsls	r2, r3, #31
 80136fe:	d403      	bmi.n	8013708 <__lo0bits+0x50>
 8013700:	085b      	lsrs	r3, r3, #1
 8013702:	f100 0001 	add.w	r0, r0, #1
 8013706:	d005      	beq.n	8013714 <__lo0bits+0x5c>
 8013708:	600b      	str	r3, [r1, #0]
 801370a:	4770      	bx	lr
 801370c:	4610      	mov	r0, r2
 801370e:	e7e8      	b.n	80136e2 <__lo0bits+0x2a>
 8013710:	2000      	movs	r0, #0
 8013712:	4770      	bx	lr
 8013714:	2020      	movs	r0, #32
 8013716:	4770      	bx	lr

08013718 <__i2b>:
 8013718:	b510      	push	{r4, lr}
 801371a:	460c      	mov	r4, r1
 801371c:	2101      	movs	r1, #1
 801371e:	f7ff feb5 	bl	801348c <_Balloc>
 8013722:	4602      	mov	r2, r0
 8013724:	b928      	cbnz	r0, 8013732 <__i2b+0x1a>
 8013726:	4b05      	ldr	r3, [pc, #20]	; (801373c <__i2b+0x24>)
 8013728:	4805      	ldr	r0, [pc, #20]	; (8013740 <__i2b+0x28>)
 801372a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801372e:	f7fe fc67 	bl	8012000 <__assert_func>
 8013732:	2301      	movs	r3, #1
 8013734:	6144      	str	r4, [r0, #20]
 8013736:	6103      	str	r3, [r0, #16]
 8013738:	bd10      	pop	{r4, pc}
 801373a:	bf00      	nop
 801373c:	08028ab9 	.word	0x08028ab9
 8013740:	08028b48 	.word	0x08028b48

08013744 <__multiply>:
 8013744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013748:	4614      	mov	r4, r2
 801374a:	690a      	ldr	r2, [r1, #16]
 801374c:	6923      	ldr	r3, [r4, #16]
 801374e:	429a      	cmp	r2, r3
 8013750:	bfb8      	it	lt
 8013752:	460b      	movlt	r3, r1
 8013754:	460d      	mov	r5, r1
 8013756:	bfbc      	itt	lt
 8013758:	4625      	movlt	r5, r4
 801375a:	461c      	movlt	r4, r3
 801375c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013760:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013764:	68ab      	ldr	r3, [r5, #8]
 8013766:	6869      	ldr	r1, [r5, #4]
 8013768:	eb0a 0709 	add.w	r7, sl, r9
 801376c:	42bb      	cmp	r3, r7
 801376e:	b085      	sub	sp, #20
 8013770:	bfb8      	it	lt
 8013772:	3101      	addlt	r1, #1
 8013774:	f7ff fe8a 	bl	801348c <_Balloc>
 8013778:	b930      	cbnz	r0, 8013788 <__multiply+0x44>
 801377a:	4602      	mov	r2, r0
 801377c:	4b42      	ldr	r3, [pc, #264]	; (8013888 <__multiply+0x144>)
 801377e:	4843      	ldr	r0, [pc, #268]	; (801388c <__multiply+0x148>)
 8013780:	f240 115d 	movw	r1, #349	; 0x15d
 8013784:	f7fe fc3c 	bl	8012000 <__assert_func>
 8013788:	f100 0614 	add.w	r6, r0, #20
 801378c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013790:	4633      	mov	r3, r6
 8013792:	2200      	movs	r2, #0
 8013794:	4543      	cmp	r3, r8
 8013796:	d31e      	bcc.n	80137d6 <__multiply+0x92>
 8013798:	f105 0c14 	add.w	ip, r5, #20
 801379c:	f104 0314 	add.w	r3, r4, #20
 80137a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80137a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80137a8:	9202      	str	r2, [sp, #8]
 80137aa:	ebac 0205 	sub.w	r2, ip, r5
 80137ae:	3a15      	subs	r2, #21
 80137b0:	f022 0203 	bic.w	r2, r2, #3
 80137b4:	3204      	adds	r2, #4
 80137b6:	f105 0115 	add.w	r1, r5, #21
 80137ba:	458c      	cmp	ip, r1
 80137bc:	bf38      	it	cc
 80137be:	2204      	movcc	r2, #4
 80137c0:	9201      	str	r2, [sp, #4]
 80137c2:	9a02      	ldr	r2, [sp, #8]
 80137c4:	9303      	str	r3, [sp, #12]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d808      	bhi.n	80137dc <__multiply+0x98>
 80137ca:	2f00      	cmp	r7, #0
 80137cc:	dc55      	bgt.n	801387a <__multiply+0x136>
 80137ce:	6107      	str	r7, [r0, #16]
 80137d0:	b005      	add	sp, #20
 80137d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d6:	f843 2b04 	str.w	r2, [r3], #4
 80137da:	e7db      	b.n	8013794 <__multiply+0x50>
 80137dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80137e0:	f1ba 0f00 	cmp.w	sl, #0
 80137e4:	d020      	beq.n	8013828 <__multiply+0xe4>
 80137e6:	f105 0e14 	add.w	lr, r5, #20
 80137ea:	46b1      	mov	r9, r6
 80137ec:	2200      	movs	r2, #0
 80137ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80137f2:	f8d9 b000 	ldr.w	fp, [r9]
 80137f6:	b2a1      	uxth	r1, r4
 80137f8:	fa1f fb8b 	uxth.w	fp, fp
 80137fc:	fb0a b101 	mla	r1, sl, r1, fp
 8013800:	4411      	add	r1, r2
 8013802:	f8d9 2000 	ldr.w	r2, [r9]
 8013806:	0c24      	lsrs	r4, r4, #16
 8013808:	0c12      	lsrs	r2, r2, #16
 801380a:	fb0a 2404 	mla	r4, sl, r4, r2
 801380e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013812:	b289      	uxth	r1, r1
 8013814:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013818:	45f4      	cmp	ip, lr
 801381a:	f849 1b04 	str.w	r1, [r9], #4
 801381e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013822:	d8e4      	bhi.n	80137ee <__multiply+0xaa>
 8013824:	9901      	ldr	r1, [sp, #4]
 8013826:	5072      	str	r2, [r6, r1]
 8013828:	9a03      	ldr	r2, [sp, #12]
 801382a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801382e:	3304      	adds	r3, #4
 8013830:	f1b9 0f00 	cmp.w	r9, #0
 8013834:	d01f      	beq.n	8013876 <__multiply+0x132>
 8013836:	6834      	ldr	r4, [r6, #0]
 8013838:	f105 0114 	add.w	r1, r5, #20
 801383c:	46b6      	mov	lr, r6
 801383e:	f04f 0a00 	mov.w	sl, #0
 8013842:	880a      	ldrh	r2, [r1, #0]
 8013844:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013848:	fb09 b202 	mla	r2, r9, r2, fp
 801384c:	4492      	add	sl, r2
 801384e:	b2a4      	uxth	r4, r4
 8013850:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013854:	f84e 4b04 	str.w	r4, [lr], #4
 8013858:	f851 4b04 	ldr.w	r4, [r1], #4
 801385c:	f8be 2000 	ldrh.w	r2, [lr]
 8013860:	0c24      	lsrs	r4, r4, #16
 8013862:	fb09 2404 	mla	r4, r9, r4, r2
 8013866:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801386a:	458c      	cmp	ip, r1
 801386c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013870:	d8e7      	bhi.n	8013842 <__multiply+0xfe>
 8013872:	9a01      	ldr	r2, [sp, #4]
 8013874:	50b4      	str	r4, [r6, r2]
 8013876:	3604      	adds	r6, #4
 8013878:	e7a3      	b.n	80137c2 <__multiply+0x7e>
 801387a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1a5      	bne.n	80137ce <__multiply+0x8a>
 8013882:	3f01      	subs	r7, #1
 8013884:	e7a1      	b.n	80137ca <__multiply+0x86>
 8013886:	bf00      	nop
 8013888:	08028ab9 	.word	0x08028ab9
 801388c:	08028b48 	.word	0x08028b48

08013890 <__pow5mult>:
 8013890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013894:	4615      	mov	r5, r2
 8013896:	f012 0203 	ands.w	r2, r2, #3
 801389a:	4606      	mov	r6, r0
 801389c:	460f      	mov	r7, r1
 801389e:	d007      	beq.n	80138b0 <__pow5mult+0x20>
 80138a0:	4c25      	ldr	r4, [pc, #148]	; (8013938 <__pow5mult+0xa8>)
 80138a2:	3a01      	subs	r2, #1
 80138a4:	2300      	movs	r3, #0
 80138a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80138aa:	f7ff fe51 	bl	8013550 <__multadd>
 80138ae:	4607      	mov	r7, r0
 80138b0:	10ad      	asrs	r5, r5, #2
 80138b2:	d03d      	beq.n	8013930 <__pow5mult+0xa0>
 80138b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80138b6:	b97c      	cbnz	r4, 80138d8 <__pow5mult+0x48>
 80138b8:	2010      	movs	r0, #16
 80138ba:	f7ff fdbf 	bl	801343c <malloc>
 80138be:	4602      	mov	r2, r0
 80138c0:	6270      	str	r0, [r6, #36]	; 0x24
 80138c2:	b928      	cbnz	r0, 80138d0 <__pow5mult+0x40>
 80138c4:	4b1d      	ldr	r3, [pc, #116]	; (801393c <__pow5mult+0xac>)
 80138c6:	481e      	ldr	r0, [pc, #120]	; (8013940 <__pow5mult+0xb0>)
 80138c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80138cc:	f7fe fb98 	bl	8012000 <__assert_func>
 80138d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138d4:	6004      	str	r4, [r0, #0]
 80138d6:	60c4      	str	r4, [r0, #12]
 80138d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80138dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80138e0:	b94c      	cbnz	r4, 80138f6 <__pow5mult+0x66>
 80138e2:	f240 2171 	movw	r1, #625	; 0x271
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7ff ff16 	bl	8013718 <__i2b>
 80138ec:	2300      	movs	r3, #0
 80138ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80138f2:	4604      	mov	r4, r0
 80138f4:	6003      	str	r3, [r0, #0]
 80138f6:	f04f 0900 	mov.w	r9, #0
 80138fa:	07eb      	lsls	r3, r5, #31
 80138fc:	d50a      	bpl.n	8013914 <__pow5mult+0x84>
 80138fe:	4639      	mov	r1, r7
 8013900:	4622      	mov	r2, r4
 8013902:	4630      	mov	r0, r6
 8013904:	f7ff ff1e 	bl	8013744 <__multiply>
 8013908:	4639      	mov	r1, r7
 801390a:	4680      	mov	r8, r0
 801390c:	4630      	mov	r0, r6
 801390e:	f7ff fdfd 	bl	801350c <_Bfree>
 8013912:	4647      	mov	r7, r8
 8013914:	106d      	asrs	r5, r5, #1
 8013916:	d00b      	beq.n	8013930 <__pow5mult+0xa0>
 8013918:	6820      	ldr	r0, [r4, #0]
 801391a:	b938      	cbnz	r0, 801392c <__pow5mult+0x9c>
 801391c:	4622      	mov	r2, r4
 801391e:	4621      	mov	r1, r4
 8013920:	4630      	mov	r0, r6
 8013922:	f7ff ff0f 	bl	8013744 <__multiply>
 8013926:	6020      	str	r0, [r4, #0]
 8013928:	f8c0 9000 	str.w	r9, [r0]
 801392c:	4604      	mov	r4, r0
 801392e:	e7e4      	b.n	80138fa <__pow5mult+0x6a>
 8013930:	4638      	mov	r0, r7
 8013932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013936:	bf00      	nop
 8013938:	08028c98 	.word	0x08028c98
 801393c:	08028898 	.word	0x08028898
 8013940:	08028b48 	.word	0x08028b48

08013944 <__lshift>:
 8013944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013948:	460c      	mov	r4, r1
 801394a:	6849      	ldr	r1, [r1, #4]
 801394c:	6923      	ldr	r3, [r4, #16]
 801394e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013952:	68a3      	ldr	r3, [r4, #8]
 8013954:	4607      	mov	r7, r0
 8013956:	4691      	mov	r9, r2
 8013958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801395c:	f108 0601 	add.w	r6, r8, #1
 8013960:	42b3      	cmp	r3, r6
 8013962:	db0b      	blt.n	801397c <__lshift+0x38>
 8013964:	4638      	mov	r0, r7
 8013966:	f7ff fd91 	bl	801348c <_Balloc>
 801396a:	4605      	mov	r5, r0
 801396c:	b948      	cbnz	r0, 8013982 <__lshift+0x3e>
 801396e:	4602      	mov	r2, r0
 8013970:	4b28      	ldr	r3, [pc, #160]	; (8013a14 <__lshift+0xd0>)
 8013972:	4829      	ldr	r0, [pc, #164]	; (8013a18 <__lshift+0xd4>)
 8013974:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013978:	f7fe fb42 	bl	8012000 <__assert_func>
 801397c:	3101      	adds	r1, #1
 801397e:	005b      	lsls	r3, r3, #1
 8013980:	e7ee      	b.n	8013960 <__lshift+0x1c>
 8013982:	2300      	movs	r3, #0
 8013984:	f100 0114 	add.w	r1, r0, #20
 8013988:	f100 0210 	add.w	r2, r0, #16
 801398c:	4618      	mov	r0, r3
 801398e:	4553      	cmp	r3, sl
 8013990:	db33      	blt.n	80139fa <__lshift+0xb6>
 8013992:	6920      	ldr	r0, [r4, #16]
 8013994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013998:	f104 0314 	add.w	r3, r4, #20
 801399c:	f019 091f 	ands.w	r9, r9, #31
 80139a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80139a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80139a8:	d02b      	beq.n	8013a02 <__lshift+0xbe>
 80139aa:	f1c9 0e20 	rsb	lr, r9, #32
 80139ae:	468a      	mov	sl, r1
 80139b0:	2200      	movs	r2, #0
 80139b2:	6818      	ldr	r0, [r3, #0]
 80139b4:	fa00 f009 	lsl.w	r0, r0, r9
 80139b8:	4302      	orrs	r2, r0
 80139ba:	f84a 2b04 	str.w	r2, [sl], #4
 80139be:	f853 2b04 	ldr.w	r2, [r3], #4
 80139c2:	459c      	cmp	ip, r3
 80139c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80139c8:	d8f3      	bhi.n	80139b2 <__lshift+0x6e>
 80139ca:	ebac 0304 	sub.w	r3, ip, r4
 80139ce:	3b15      	subs	r3, #21
 80139d0:	f023 0303 	bic.w	r3, r3, #3
 80139d4:	3304      	adds	r3, #4
 80139d6:	f104 0015 	add.w	r0, r4, #21
 80139da:	4584      	cmp	ip, r0
 80139dc:	bf38      	it	cc
 80139de:	2304      	movcc	r3, #4
 80139e0:	50ca      	str	r2, [r1, r3]
 80139e2:	b10a      	cbz	r2, 80139e8 <__lshift+0xa4>
 80139e4:	f108 0602 	add.w	r6, r8, #2
 80139e8:	3e01      	subs	r6, #1
 80139ea:	4638      	mov	r0, r7
 80139ec:	612e      	str	r6, [r5, #16]
 80139ee:	4621      	mov	r1, r4
 80139f0:	f7ff fd8c 	bl	801350c <_Bfree>
 80139f4:	4628      	mov	r0, r5
 80139f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80139fe:	3301      	adds	r3, #1
 8013a00:	e7c5      	b.n	801398e <__lshift+0x4a>
 8013a02:	3904      	subs	r1, #4
 8013a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a0c:	459c      	cmp	ip, r3
 8013a0e:	d8f9      	bhi.n	8013a04 <__lshift+0xc0>
 8013a10:	e7ea      	b.n	80139e8 <__lshift+0xa4>
 8013a12:	bf00      	nop
 8013a14:	08028ab9 	.word	0x08028ab9
 8013a18:	08028b48 	.word	0x08028b48

08013a1c <__mcmp>:
 8013a1c:	b530      	push	{r4, r5, lr}
 8013a1e:	6902      	ldr	r2, [r0, #16]
 8013a20:	690c      	ldr	r4, [r1, #16]
 8013a22:	1b12      	subs	r2, r2, r4
 8013a24:	d10e      	bne.n	8013a44 <__mcmp+0x28>
 8013a26:	f100 0314 	add.w	r3, r0, #20
 8013a2a:	3114      	adds	r1, #20
 8013a2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013a30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013a34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013a38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013a3c:	42a5      	cmp	r5, r4
 8013a3e:	d003      	beq.n	8013a48 <__mcmp+0x2c>
 8013a40:	d305      	bcc.n	8013a4e <__mcmp+0x32>
 8013a42:	2201      	movs	r2, #1
 8013a44:	4610      	mov	r0, r2
 8013a46:	bd30      	pop	{r4, r5, pc}
 8013a48:	4283      	cmp	r3, r0
 8013a4a:	d3f3      	bcc.n	8013a34 <__mcmp+0x18>
 8013a4c:	e7fa      	b.n	8013a44 <__mcmp+0x28>
 8013a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a52:	e7f7      	b.n	8013a44 <__mcmp+0x28>

08013a54 <__mdiff>:
 8013a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a58:	460c      	mov	r4, r1
 8013a5a:	4606      	mov	r6, r0
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4620      	mov	r0, r4
 8013a60:	4617      	mov	r7, r2
 8013a62:	f7ff ffdb 	bl	8013a1c <__mcmp>
 8013a66:	1e05      	subs	r5, r0, #0
 8013a68:	d110      	bne.n	8013a8c <__mdiff+0x38>
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	4630      	mov	r0, r6
 8013a6e:	f7ff fd0d 	bl	801348c <_Balloc>
 8013a72:	b930      	cbnz	r0, 8013a82 <__mdiff+0x2e>
 8013a74:	4b39      	ldr	r3, [pc, #228]	; (8013b5c <__mdiff+0x108>)
 8013a76:	4602      	mov	r2, r0
 8013a78:	f240 2132 	movw	r1, #562	; 0x232
 8013a7c:	4838      	ldr	r0, [pc, #224]	; (8013b60 <__mdiff+0x10c>)
 8013a7e:	f7fe fabf 	bl	8012000 <__assert_func>
 8013a82:	2301      	movs	r3, #1
 8013a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a8c:	bfa4      	itt	ge
 8013a8e:	463b      	movge	r3, r7
 8013a90:	4627      	movge	r7, r4
 8013a92:	4630      	mov	r0, r6
 8013a94:	6879      	ldr	r1, [r7, #4]
 8013a96:	bfa6      	itte	ge
 8013a98:	461c      	movge	r4, r3
 8013a9a:	2500      	movge	r5, #0
 8013a9c:	2501      	movlt	r5, #1
 8013a9e:	f7ff fcf5 	bl	801348c <_Balloc>
 8013aa2:	b920      	cbnz	r0, 8013aae <__mdiff+0x5a>
 8013aa4:	4b2d      	ldr	r3, [pc, #180]	; (8013b5c <__mdiff+0x108>)
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013aac:	e7e6      	b.n	8013a7c <__mdiff+0x28>
 8013aae:	693e      	ldr	r6, [r7, #16]
 8013ab0:	60c5      	str	r5, [r0, #12]
 8013ab2:	6925      	ldr	r5, [r4, #16]
 8013ab4:	f107 0114 	add.w	r1, r7, #20
 8013ab8:	f104 0914 	add.w	r9, r4, #20
 8013abc:	f100 0e14 	add.w	lr, r0, #20
 8013ac0:	f107 0210 	add.w	r2, r7, #16
 8013ac4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013ac8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013acc:	46f2      	mov	sl, lr
 8013ace:	2700      	movs	r7, #0
 8013ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013ad8:	fa1f f883 	uxth.w	r8, r3
 8013adc:	fa17 f78b 	uxtah	r7, r7, fp
 8013ae0:	0c1b      	lsrs	r3, r3, #16
 8013ae2:	eba7 0808 	sub.w	r8, r7, r8
 8013ae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013aea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013aee:	fa1f f888 	uxth.w	r8, r8
 8013af2:	141f      	asrs	r7, r3, #16
 8013af4:	454d      	cmp	r5, r9
 8013af6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013afa:	f84a 3b04 	str.w	r3, [sl], #4
 8013afe:	d8e7      	bhi.n	8013ad0 <__mdiff+0x7c>
 8013b00:	1b2b      	subs	r3, r5, r4
 8013b02:	3b15      	subs	r3, #21
 8013b04:	f023 0303 	bic.w	r3, r3, #3
 8013b08:	3304      	adds	r3, #4
 8013b0a:	3415      	adds	r4, #21
 8013b0c:	42a5      	cmp	r5, r4
 8013b0e:	bf38      	it	cc
 8013b10:	2304      	movcc	r3, #4
 8013b12:	4419      	add	r1, r3
 8013b14:	4473      	add	r3, lr
 8013b16:	469e      	mov	lr, r3
 8013b18:	460d      	mov	r5, r1
 8013b1a:	4565      	cmp	r5, ip
 8013b1c:	d30e      	bcc.n	8013b3c <__mdiff+0xe8>
 8013b1e:	f10c 0203 	add.w	r2, ip, #3
 8013b22:	1a52      	subs	r2, r2, r1
 8013b24:	f022 0203 	bic.w	r2, r2, #3
 8013b28:	3903      	subs	r1, #3
 8013b2a:	458c      	cmp	ip, r1
 8013b2c:	bf38      	it	cc
 8013b2e:	2200      	movcc	r2, #0
 8013b30:	441a      	add	r2, r3
 8013b32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013b36:	b17b      	cbz	r3, 8013b58 <__mdiff+0x104>
 8013b38:	6106      	str	r6, [r0, #16]
 8013b3a:	e7a5      	b.n	8013a88 <__mdiff+0x34>
 8013b3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013b40:	fa17 f488 	uxtah	r4, r7, r8
 8013b44:	1422      	asrs	r2, r4, #16
 8013b46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013b4a:	b2a4      	uxth	r4, r4
 8013b4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013b50:	f84e 4b04 	str.w	r4, [lr], #4
 8013b54:	1417      	asrs	r7, r2, #16
 8013b56:	e7e0      	b.n	8013b1a <__mdiff+0xc6>
 8013b58:	3e01      	subs	r6, #1
 8013b5a:	e7ea      	b.n	8013b32 <__mdiff+0xde>
 8013b5c:	08028ab9 	.word	0x08028ab9
 8013b60:	08028b48 	.word	0x08028b48

08013b64 <__ulp>:
 8013b64:	b082      	sub	sp, #8
 8013b66:	ed8d 0b00 	vstr	d0, [sp]
 8013b6a:	9b01      	ldr	r3, [sp, #4]
 8013b6c:	4912      	ldr	r1, [pc, #72]	; (8013bb8 <__ulp+0x54>)
 8013b6e:	4019      	ands	r1, r3
 8013b70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013b74:	2900      	cmp	r1, #0
 8013b76:	dd05      	ble.n	8013b84 <__ulp+0x20>
 8013b78:	2200      	movs	r2, #0
 8013b7a:	460b      	mov	r3, r1
 8013b7c:	ec43 2b10 	vmov	d0, r2, r3
 8013b80:	b002      	add	sp, #8
 8013b82:	4770      	bx	lr
 8013b84:	4249      	negs	r1, r1
 8013b86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013b8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013b8e:	f04f 0200 	mov.w	r2, #0
 8013b92:	f04f 0300 	mov.w	r3, #0
 8013b96:	da04      	bge.n	8013ba2 <__ulp+0x3e>
 8013b98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013b9c:	fa41 f300 	asr.w	r3, r1, r0
 8013ba0:	e7ec      	b.n	8013b7c <__ulp+0x18>
 8013ba2:	f1a0 0114 	sub.w	r1, r0, #20
 8013ba6:	291e      	cmp	r1, #30
 8013ba8:	bfda      	itte	le
 8013baa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013bae:	fa20 f101 	lsrle.w	r1, r0, r1
 8013bb2:	2101      	movgt	r1, #1
 8013bb4:	460a      	mov	r2, r1
 8013bb6:	e7e1      	b.n	8013b7c <__ulp+0x18>
 8013bb8:	7ff00000 	.word	0x7ff00000

08013bbc <__b2d>:
 8013bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bbe:	6905      	ldr	r5, [r0, #16]
 8013bc0:	f100 0714 	add.w	r7, r0, #20
 8013bc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013bc8:	1f2e      	subs	r6, r5, #4
 8013bca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f7ff fd52 	bl	8013678 <__hi0bits>
 8013bd4:	f1c0 0320 	rsb	r3, r0, #32
 8013bd8:	280a      	cmp	r0, #10
 8013bda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013c58 <__b2d+0x9c>
 8013bde:	600b      	str	r3, [r1, #0]
 8013be0:	dc14      	bgt.n	8013c0c <__b2d+0x50>
 8013be2:	f1c0 0e0b 	rsb	lr, r0, #11
 8013be6:	fa24 f10e 	lsr.w	r1, r4, lr
 8013bea:	42b7      	cmp	r7, r6
 8013bec:	ea41 030c 	orr.w	r3, r1, ip
 8013bf0:	bf34      	ite	cc
 8013bf2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013bf6:	2100      	movcs	r1, #0
 8013bf8:	3015      	adds	r0, #21
 8013bfa:	fa04 f000 	lsl.w	r0, r4, r0
 8013bfe:	fa21 f10e 	lsr.w	r1, r1, lr
 8013c02:	ea40 0201 	orr.w	r2, r0, r1
 8013c06:	ec43 2b10 	vmov	d0, r2, r3
 8013c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c0c:	42b7      	cmp	r7, r6
 8013c0e:	bf3a      	itte	cc
 8013c10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013c14:	f1a5 0608 	subcc.w	r6, r5, #8
 8013c18:	2100      	movcs	r1, #0
 8013c1a:	380b      	subs	r0, #11
 8013c1c:	d017      	beq.n	8013c4e <__b2d+0x92>
 8013c1e:	f1c0 0c20 	rsb	ip, r0, #32
 8013c22:	fa04 f500 	lsl.w	r5, r4, r0
 8013c26:	42be      	cmp	r6, r7
 8013c28:	fa21 f40c 	lsr.w	r4, r1, ip
 8013c2c:	ea45 0504 	orr.w	r5, r5, r4
 8013c30:	bf8c      	ite	hi
 8013c32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013c36:	2400      	movls	r4, #0
 8013c38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013c3c:	fa01 f000 	lsl.w	r0, r1, r0
 8013c40:	fa24 f40c 	lsr.w	r4, r4, ip
 8013c44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013c48:	ea40 0204 	orr.w	r2, r0, r4
 8013c4c:	e7db      	b.n	8013c06 <__b2d+0x4a>
 8013c4e:	ea44 030c 	orr.w	r3, r4, ip
 8013c52:	460a      	mov	r2, r1
 8013c54:	e7d7      	b.n	8013c06 <__b2d+0x4a>
 8013c56:	bf00      	nop
 8013c58:	3ff00000 	.word	0x3ff00000

08013c5c <__d2b>:
 8013c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c60:	4689      	mov	r9, r1
 8013c62:	2101      	movs	r1, #1
 8013c64:	ec57 6b10 	vmov	r6, r7, d0
 8013c68:	4690      	mov	r8, r2
 8013c6a:	f7ff fc0f 	bl	801348c <_Balloc>
 8013c6e:	4604      	mov	r4, r0
 8013c70:	b930      	cbnz	r0, 8013c80 <__d2b+0x24>
 8013c72:	4602      	mov	r2, r0
 8013c74:	4b25      	ldr	r3, [pc, #148]	; (8013d0c <__d2b+0xb0>)
 8013c76:	4826      	ldr	r0, [pc, #152]	; (8013d10 <__d2b+0xb4>)
 8013c78:	f240 310a 	movw	r1, #778	; 0x30a
 8013c7c:	f7fe f9c0 	bl	8012000 <__assert_func>
 8013c80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013c84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c88:	bb35      	cbnz	r5, 8013cd8 <__d2b+0x7c>
 8013c8a:	2e00      	cmp	r6, #0
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	d028      	beq.n	8013ce2 <__d2b+0x86>
 8013c90:	4668      	mov	r0, sp
 8013c92:	9600      	str	r6, [sp, #0]
 8013c94:	f7ff fd10 	bl	80136b8 <__lo0bits>
 8013c98:	9900      	ldr	r1, [sp, #0]
 8013c9a:	b300      	cbz	r0, 8013cde <__d2b+0x82>
 8013c9c:	9a01      	ldr	r2, [sp, #4]
 8013c9e:	f1c0 0320 	rsb	r3, r0, #32
 8013ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ca6:	430b      	orrs	r3, r1
 8013ca8:	40c2      	lsrs	r2, r0
 8013caa:	6163      	str	r3, [r4, #20]
 8013cac:	9201      	str	r2, [sp, #4]
 8013cae:	9b01      	ldr	r3, [sp, #4]
 8013cb0:	61a3      	str	r3, [r4, #24]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	bf14      	ite	ne
 8013cb6:	2202      	movne	r2, #2
 8013cb8:	2201      	moveq	r2, #1
 8013cba:	6122      	str	r2, [r4, #16]
 8013cbc:	b1d5      	cbz	r5, 8013cf4 <__d2b+0x98>
 8013cbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013cc2:	4405      	add	r5, r0
 8013cc4:	f8c9 5000 	str.w	r5, [r9]
 8013cc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ccc:	f8c8 0000 	str.w	r0, [r8]
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	b003      	add	sp, #12
 8013cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013cdc:	e7d5      	b.n	8013c8a <__d2b+0x2e>
 8013cde:	6161      	str	r1, [r4, #20]
 8013ce0:	e7e5      	b.n	8013cae <__d2b+0x52>
 8013ce2:	a801      	add	r0, sp, #4
 8013ce4:	f7ff fce8 	bl	80136b8 <__lo0bits>
 8013ce8:	9b01      	ldr	r3, [sp, #4]
 8013cea:	6163      	str	r3, [r4, #20]
 8013cec:	2201      	movs	r2, #1
 8013cee:	6122      	str	r2, [r4, #16]
 8013cf0:	3020      	adds	r0, #32
 8013cf2:	e7e3      	b.n	8013cbc <__d2b+0x60>
 8013cf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013cf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013cfc:	f8c9 0000 	str.w	r0, [r9]
 8013d00:	6918      	ldr	r0, [r3, #16]
 8013d02:	f7ff fcb9 	bl	8013678 <__hi0bits>
 8013d06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d0a:	e7df      	b.n	8013ccc <__d2b+0x70>
 8013d0c:	08028ab9 	.word	0x08028ab9
 8013d10:	08028b48 	.word	0x08028b48

08013d14 <__ratio>:
 8013d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d18:	4688      	mov	r8, r1
 8013d1a:	4669      	mov	r1, sp
 8013d1c:	4681      	mov	r9, r0
 8013d1e:	f7ff ff4d 	bl	8013bbc <__b2d>
 8013d22:	a901      	add	r1, sp, #4
 8013d24:	4640      	mov	r0, r8
 8013d26:	ec55 4b10 	vmov	r4, r5, d0
 8013d2a:	f7ff ff47 	bl	8013bbc <__b2d>
 8013d2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013d36:	eba3 0c02 	sub.w	ip, r3, r2
 8013d3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013d3e:	1a9b      	subs	r3, r3, r2
 8013d40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013d44:	ec51 0b10 	vmov	r0, r1, d0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	bfd6      	itet	le
 8013d4c:	460a      	movle	r2, r1
 8013d4e:	462a      	movgt	r2, r5
 8013d50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013d54:	468b      	mov	fp, r1
 8013d56:	462f      	mov	r7, r5
 8013d58:	bfd4      	ite	le
 8013d5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013d5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013d62:	4620      	mov	r0, r4
 8013d64:	ee10 2a10 	vmov	r2, s0
 8013d68:	465b      	mov	r3, fp
 8013d6a:	4639      	mov	r1, r7
 8013d6c:	f7ec fd86 	bl	800087c <__aeabi_ddiv>
 8013d70:	ec41 0b10 	vmov	d0, r0, r1
 8013d74:	b003      	add	sp, #12
 8013d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d7a <__copybits>:
 8013d7a:	3901      	subs	r1, #1
 8013d7c:	b570      	push	{r4, r5, r6, lr}
 8013d7e:	1149      	asrs	r1, r1, #5
 8013d80:	6914      	ldr	r4, [r2, #16]
 8013d82:	3101      	adds	r1, #1
 8013d84:	f102 0314 	add.w	r3, r2, #20
 8013d88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013d8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013d90:	1f05      	subs	r5, r0, #4
 8013d92:	42a3      	cmp	r3, r4
 8013d94:	d30c      	bcc.n	8013db0 <__copybits+0x36>
 8013d96:	1aa3      	subs	r3, r4, r2
 8013d98:	3b11      	subs	r3, #17
 8013d9a:	f023 0303 	bic.w	r3, r3, #3
 8013d9e:	3211      	adds	r2, #17
 8013da0:	42a2      	cmp	r2, r4
 8013da2:	bf88      	it	hi
 8013da4:	2300      	movhi	r3, #0
 8013da6:	4418      	add	r0, r3
 8013da8:	2300      	movs	r3, #0
 8013daa:	4288      	cmp	r0, r1
 8013dac:	d305      	bcc.n	8013dba <__copybits+0x40>
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	f853 6b04 	ldr.w	r6, [r3], #4
 8013db4:	f845 6f04 	str.w	r6, [r5, #4]!
 8013db8:	e7eb      	b.n	8013d92 <__copybits+0x18>
 8013dba:	f840 3b04 	str.w	r3, [r0], #4
 8013dbe:	e7f4      	b.n	8013daa <__copybits+0x30>

08013dc0 <__any_on>:
 8013dc0:	f100 0214 	add.w	r2, r0, #20
 8013dc4:	6900      	ldr	r0, [r0, #16]
 8013dc6:	114b      	asrs	r3, r1, #5
 8013dc8:	4298      	cmp	r0, r3
 8013dca:	b510      	push	{r4, lr}
 8013dcc:	db11      	blt.n	8013df2 <__any_on+0x32>
 8013dce:	dd0a      	ble.n	8013de6 <__any_on+0x26>
 8013dd0:	f011 011f 	ands.w	r1, r1, #31
 8013dd4:	d007      	beq.n	8013de6 <__any_on+0x26>
 8013dd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013dda:	fa24 f001 	lsr.w	r0, r4, r1
 8013dde:	fa00 f101 	lsl.w	r1, r0, r1
 8013de2:	428c      	cmp	r4, r1
 8013de4:	d10b      	bne.n	8013dfe <__any_on+0x3e>
 8013de6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013dea:	4293      	cmp	r3, r2
 8013dec:	d803      	bhi.n	8013df6 <__any_on+0x36>
 8013dee:	2000      	movs	r0, #0
 8013df0:	bd10      	pop	{r4, pc}
 8013df2:	4603      	mov	r3, r0
 8013df4:	e7f7      	b.n	8013de6 <__any_on+0x26>
 8013df6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013dfa:	2900      	cmp	r1, #0
 8013dfc:	d0f5      	beq.n	8013dea <__any_on+0x2a>
 8013dfe:	2001      	movs	r0, #1
 8013e00:	e7f6      	b.n	8013df0 <__any_on+0x30>

08013e02 <_calloc_r>:
 8013e02:	b513      	push	{r0, r1, r4, lr}
 8013e04:	434a      	muls	r2, r1
 8013e06:	4611      	mov	r1, r2
 8013e08:	9201      	str	r2, [sp, #4]
 8013e0a:	f000 f859 	bl	8013ec0 <_malloc_r>
 8013e0e:	4604      	mov	r4, r0
 8013e10:	b118      	cbz	r0, 8013e1a <_calloc_r+0x18>
 8013e12:	9a01      	ldr	r2, [sp, #4]
 8013e14:	2100      	movs	r1, #0
 8013e16:	f7fc fb27 	bl	8010468 <memset>
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	b002      	add	sp, #8
 8013e1e:	bd10      	pop	{r4, pc}

08013e20 <_free_r>:
 8013e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e22:	2900      	cmp	r1, #0
 8013e24:	d048      	beq.n	8013eb8 <_free_r+0x98>
 8013e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e2a:	9001      	str	r0, [sp, #4]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8013e32:	bfb8      	it	lt
 8013e34:	18e4      	addlt	r4, r4, r3
 8013e36:	f000 fe8b 	bl	8014b50 <__malloc_lock>
 8013e3a:	4a20      	ldr	r2, [pc, #128]	; (8013ebc <_free_r+0x9c>)
 8013e3c:	9801      	ldr	r0, [sp, #4]
 8013e3e:	6813      	ldr	r3, [r2, #0]
 8013e40:	4615      	mov	r5, r2
 8013e42:	b933      	cbnz	r3, 8013e52 <_free_r+0x32>
 8013e44:	6063      	str	r3, [r4, #4]
 8013e46:	6014      	str	r4, [r2, #0]
 8013e48:	b003      	add	sp, #12
 8013e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e4e:	f000 be85 	b.w	8014b5c <__malloc_unlock>
 8013e52:	42a3      	cmp	r3, r4
 8013e54:	d90b      	bls.n	8013e6e <_free_r+0x4e>
 8013e56:	6821      	ldr	r1, [r4, #0]
 8013e58:	1862      	adds	r2, r4, r1
 8013e5a:	4293      	cmp	r3, r2
 8013e5c:	bf04      	itt	eq
 8013e5e:	681a      	ldreq	r2, [r3, #0]
 8013e60:	685b      	ldreq	r3, [r3, #4]
 8013e62:	6063      	str	r3, [r4, #4]
 8013e64:	bf04      	itt	eq
 8013e66:	1852      	addeq	r2, r2, r1
 8013e68:	6022      	streq	r2, [r4, #0]
 8013e6a:	602c      	str	r4, [r5, #0]
 8013e6c:	e7ec      	b.n	8013e48 <_free_r+0x28>
 8013e6e:	461a      	mov	r2, r3
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	b10b      	cbz	r3, 8013e78 <_free_r+0x58>
 8013e74:	42a3      	cmp	r3, r4
 8013e76:	d9fa      	bls.n	8013e6e <_free_r+0x4e>
 8013e78:	6811      	ldr	r1, [r2, #0]
 8013e7a:	1855      	adds	r5, r2, r1
 8013e7c:	42a5      	cmp	r5, r4
 8013e7e:	d10b      	bne.n	8013e98 <_free_r+0x78>
 8013e80:	6824      	ldr	r4, [r4, #0]
 8013e82:	4421      	add	r1, r4
 8013e84:	1854      	adds	r4, r2, r1
 8013e86:	42a3      	cmp	r3, r4
 8013e88:	6011      	str	r1, [r2, #0]
 8013e8a:	d1dd      	bne.n	8013e48 <_free_r+0x28>
 8013e8c:	681c      	ldr	r4, [r3, #0]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	6053      	str	r3, [r2, #4]
 8013e92:	4421      	add	r1, r4
 8013e94:	6011      	str	r1, [r2, #0]
 8013e96:	e7d7      	b.n	8013e48 <_free_r+0x28>
 8013e98:	d902      	bls.n	8013ea0 <_free_r+0x80>
 8013e9a:	230c      	movs	r3, #12
 8013e9c:	6003      	str	r3, [r0, #0]
 8013e9e:	e7d3      	b.n	8013e48 <_free_r+0x28>
 8013ea0:	6825      	ldr	r5, [r4, #0]
 8013ea2:	1961      	adds	r1, r4, r5
 8013ea4:	428b      	cmp	r3, r1
 8013ea6:	bf04      	itt	eq
 8013ea8:	6819      	ldreq	r1, [r3, #0]
 8013eaa:	685b      	ldreq	r3, [r3, #4]
 8013eac:	6063      	str	r3, [r4, #4]
 8013eae:	bf04      	itt	eq
 8013eb0:	1949      	addeq	r1, r1, r5
 8013eb2:	6021      	streq	r1, [r4, #0]
 8013eb4:	6054      	str	r4, [r2, #4]
 8013eb6:	e7c7      	b.n	8013e48 <_free_r+0x28>
 8013eb8:	b003      	add	sp, #12
 8013eba:	bd30      	pop	{r4, r5, pc}
 8013ebc:	200002b8 	.word	0x200002b8

08013ec0 <_malloc_r>:
 8013ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec2:	1ccd      	adds	r5, r1, #3
 8013ec4:	f025 0503 	bic.w	r5, r5, #3
 8013ec8:	3508      	adds	r5, #8
 8013eca:	2d0c      	cmp	r5, #12
 8013ecc:	bf38      	it	cc
 8013ece:	250c      	movcc	r5, #12
 8013ed0:	2d00      	cmp	r5, #0
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	db01      	blt.n	8013eda <_malloc_r+0x1a>
 8013ed6:	42a9      	cmp	r1, r5
 8013ed8:	d903      	bls.n	8013ee2 <_malloc_r+0x22>
 8013eda:	230c      	movs	r3, #12
 8013edc:	6033      	str	r3, [r6, #0]
 8013ede:	2000      	movs	r0, #0
 8013ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ee2:	f000 fe35 	bl	8014b50 <__malloc_lock>
 8013ee6:	4921      	ldr	r1, [pc, #132]	; (8013f6c <_malloc_r+0xac>)
 8013ee8:	680a      	ldr	r2, [r1, #0]
 8013eea:	4614      	mov	r4, r2
 8013eec:	b99c      	cbnz	r4, 8013f16 <_malloc_r+0x56>
 8013eee:	4f20      	ldr	r7, [pc, #128]	; (8013f70 <_malloc_r+0xb0>)
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	b923      	cbnz	r3, 8013efe <_malloc_r+0x3e>
 8013ef4:	4621      	mov	r1, r4
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	f000 fafa 	bl	80144f0 <_sbrk_r>
 8013efc:	6038      	str	r0, [r7, #0]
 8013efe:	4629      	mov	r1, r5
 8013f00:	4630      	mov	r0, r6
 8013f02:	f000 faf5 	bl	80144f0 <_sbrk_r>
 8013f06:	1c43      	adds	r3, r0, #1
 8013f08:	d123      	bne.n	8013f52 <_malloc_r+0x92>
 8013f0a:	230c      	movs	r3, #12
 8013f0c:	6033      	str	r3, [r6, #0]
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f000 fe24 	bl	8014b5c <__malloc_unlock>
 8013f14:	e7e3      	b.n	8013ede <_malloc_r+0x1e>
 8013f16:	6823      	ldr	r3, [r4, #0]
 8013f18:	1b5b      	subs	r3, r3, r5
 8013f1a:	d417      	bmi.n	8013f4c <_malloc_r+0x8c>
 8013f1c:	2b0b      	cmp	r3, #11
 8013f1e:	d903      	bls.n	8013f28 <_malloc_r+0x68>
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	441c      	add	r4, r3
 8013f24:	6025      	str	r5, [r4, #0]
 8013f26:	e004      	b.n	8013f32 <_malloc_r+0x72>
 8013f28:	6863      	ldr	r3, [r4, #4]
 8013f2a:	42a2      	cmp	r2, r4
 8013f2c:	bf0c      	ite	eq
 8013f2e:	600b      	streq	r3, [r1, #0]
 8013f30:	6053      	strne	r3, [r2, #4]
 8013f32:	4630      	mov	r0, r6
 8013f34:	f000 fe12 	bl	8014b5c <__malloc_unlock>
 8013f38:	f104 000b 	add.w	r0, r4, #11
 8013f3c:	1d23      	adds	r3, r4, #4
 8013f3e:	f020 0007 	bic.w	r0, r0, #7
 8013f42:	1ac2      	subs	r2, r0, r3
 8013f44:	d0cc      	beq.n	8013ee0 <_malloc_r+0x20>
 8013f46:	1a1b      	subs	r3, r3, r0
 8013f48:	50a3      	str	r3, [r4, r2]
 8013f4a:	e7c9      	b.n	8013ee0 <_malloc_r+0x20>
 8013f4c:	4622      	mov	r2, r4
 8013f4e:	6864      	ldr	r4, [r4, #4]
 8013f50:	e7cc      	b.n	8013eec <_malloc_r+0x2c>
 8013f52:	1cc4      	adds	r4, r0, #3
 8013f54:	f024 0403 	bic.w	r4, r4, #3
 8013f58:	42a0      	cmp	r0, r4
 8013f5a:	d0e3      	beq.n	8013f24 <_malloc_r+0x64>
 8013f5c:	1a21      	subs	r1, r4, r0
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f000 fac6 	bl	80144f0 <_sbrk_r>
 8013f64:	3001      	adds	r0, #1
 8013f66:	d1dd      	bne.n	8013f24 <_malloc_r+0x64>
 8013f68:	e7cf      	b.n	8013f0a <_malloc_r+0x4a>
 8013f6a:	bf00      	nop
 8013f6c:	200002b8 	.word	0x200002b8
 8013f70:	200002bc 	.word	0x200002bc

08013f74 <__ssputs_r>:
 8013f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f78:	688e      	ldr	r6, [r1, #8]
 8013f7a:	429e      	cmp	r6, r3
 8013f7c:	4682      	mov	sl, r0
 8013f7e:	460c      	mov	r4, r1
 8013f80:	4690      	mov	r8, r2
 8013f82:	461f      	mov	r7, r3
 8013f84:	d838      	bhi.n	8013ff8 <__ssputs_r+0x84>
 8013f86:	898a      	ldrh	r2, [r1, #12]
 8013f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f8c:	d032      	beq.n	8013ff4 <__ssputs_r+0x80>
 8013f8e:	6825      	ldr	r5, [r4, #0]
 8013f90:	6909      	ldr	r1, [r1, #16]
 8013f92:	eba5 0901 	sub.w	r9, r5, r1
 8013f96:	6965      	ldr	r5, [r4, #20]
 8013f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	444b      	add	r3, r9
 8013fa4:	106d      	asrs	r5, r5, #1
 8013fa6:	429d      	cmp	r5, r3
 8013fa8:	bf38      	it	cc
 8013faa:	461d      	movcc	r5, r3
 8013fac:	0553      	lsls	r3, r2, #21
 8013fae:	d531      	bpl.n	8014014 <__ssputs_r+0xa0>
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	f7ff ff85 	bl	8013ec0 <_malloc_r>
 8013fb6:	4606      	mov	r6, r0
 8013fb8:	b950      	cbnz	r0, 8013fd0 <__ssputs_r+0x5c>
 8013fba:	230c      	movs	r3, #12
 8013fbc:	f8ca 3000 	str.w	r3, [sl]
 8013fc0:	89a3      	ldrh	r3, [r4, #12]
 8013fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fc6:	81a3      	strh	r3, [r4, #12]
 8013fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd0:	6921      	ldr	r1, [r4, #16]
 8013fd2:	464a      	mov	r2, r9
 8013fd4:	f7ff fa4c 	bl	8013470 <memcpy>
 8013fd8:	89a3      	ldrh	r3, [r4, #12]
 8013fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fe2:	81a3      	strh	r3, [r4, #12]
 8013fe4:	6126      	str	r6, [r4, #16]
 8013fe6:	6165      	str	r5, [r4, #20]
 8013fe8:	444e      	add	r6, r9
 8013fea:	eba5 0509 	sub.w	r5, r5, r9
 8013fee:	6026      	str	r6, [r4, #0]
 8013ff0:	60a5      	str	r5, [r4, #8]
 8013ff2:	463e      	mov	r6, r7
 8013ff4:	42be      	cmp	r6, r7
 8013ff6:	d900      	bls.n	8013ffa <__ssputs_r+0x86>
 8013ff8:	463e      	mov	r6, r7
 8013ffa:	4632      	mov	r2, r6
 8013ffc:	6820      	ldr	r0, [r4, #0]
 8013ffe:	4641      	mov	r1, r8
 8014000:	f000 fd8c 	bl	8014b1c <memmove>
 8014004:	68a3      	ldr	r3, [r4, #8]
 8014006:	6822      	ldr	r2, [r4, #0]
 8014008:	1b9b      	subs	r3, r3, r6
 801400a:	4432      	add	r2, r6
 801400c:	60a3      	str	r3, [r4, #8]
 801400e:	6022      	str	r2, [r4, #0]
 8014010:	2000      	movs	r0, #0
 8014012:	e7db      	b.n	8013fcc <__ssputs_r+0x58>
 8014014:	462a      	mov	r2, r5
 8014016:	f000 fda7 	bl	8014b68 <_realloc_r>
 801401a:	4606      	mov	r6, r0
 801401c:	2800      	cmp	r0, #0
 801401e:	d1e1      	bne.n	8013fe4 <__ssputs_r+0x70>
 8014020:	6921      	ldr	r1, [r4, #16]
 8014022:	4650      	mov	r0, sl
 8014024:	f7ff fefc 	bl	8013e20 <_free_r>
 8014028:	e7c7      	b.n	8013fba <__ssputs_r+0x46>
	...

0801402c <_svfiprintf_r>:
 801402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014030:	4698      	mov	r8, r3
 8014032:	898b      	ldrh	r3, [r1, #12]
 8014034:	061b      	lsls	r3, r3, #24
 8014036:	b09d      	sub	sp, #116	; 0x74
 8014038:	4607      	mov	r7, r0
 801403a:	460d      	mov	r5, r1
 801403c:	4614      	mov	r4, r2
 801403e:	d50e      	bpl.n	801405e <_svfiprintf_r+0x32>
 8014040:	690b      	ldr	r3, [r1, #16]
 8014042:	b963      	cbnz	r3, 801405e <_svfiprintf_r+0x32>
 8014044:	2140      	movs	r1, #64	; 0x40
 8014046:	f7ff ff3b 	bl	8013ec0 <_malloc_r>
 801404a:	6028      	str	r0, [r5, #0]
 801404c:	6128      	str	r0, [r5, #16]
 801404e:	b920      	cbnz	r0, 801405a <_svfiprintf_r+0x2e>
 8014050:	230c      	movs	r3, #12
 8014052:	603b      	str	r3, [r7, #0]
 8014054:	f04f 30ff 	mov.w	r0, #4294967295
 8014058:	e0d1      	b.n	80141fe <_svfiprintf_r+0x1d2>
 801405a:	2340      	movs	r3, #64	; 0x40
 801405c:	616b      	str	r3, [r5, #20]
 801405e:	2300      	movs	r3, #0
 8014060:	9309      	str	r3, [sp, #36]	; 0x24
 8014062:	2320      	movs	r3, #32
 8014064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014068:	f8cd 800c 	str.w	r8, [sp, #12]
 801406c:	2330      	movs	r3, #48	; 0x30
 801406e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014218 <_svfiprintf_r+0x1ec>
 8014072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014076:	f04f 0901 	mov.w	r9, #1
 801407a:	4623      	mov	r3, r4
 801407c:	469a      	mov	sl, r3
 801407e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014082:	b10a      	cbz	r2, 8014088 <_svfiprintf_r+0x5c>
 8014084:	2a25      	cmp	r2, #37	; 0x25
 8014086:	d1f9      	bne.n	801407c <_svfiprintf_r+0x50>
 8014088:	ebba 0b04 	subs.w	fp, sl, r4
 801408c:	d00b      	beq.n	80140a6 <_svfiprintf_r+0x7a>
 801408e:	465b      	mov	r3, fp
 8014090:	4622      	mov	r2, r4
 8014092:	4629      	mov	r1, r5
 8014094:	4638      	mov	r0, r7
 8014096:	f7ff ff6d 	bl	8013f74 <__ssputs_r>
 801409a:	3001      	adds	r0, #1
 801409c:	f000 80aa 	beq.w	80141f4 <_svfiprintf_r+0x1c8>
 80140a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140a2:	445a      	add	r2, fp
 80140a4:	9209      	str	r2, [sp, #36]	; 0x24
 80140a6:	f89a 3000 	ldrb.w	r3, [sl]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f000 80a2 	beq.w	80141f4 <_svfiprintf_r+0x1c8>
 80140b0:	2300      	movs	r3, #0
 80140b2:	f04f 32ff 	mov.w	r2, #4294967295
 80140b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140ba:	f10a 0a01 	add.w	sl, sl, #1
 80140be:	9304      	str	r3, [sp, #16]
 80140c0:	9307      	str	r3, [sp, #28]
 80140c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140c6:	931a      	str	r3, [sp, #104]	; 0x68
 80140c8:	4654      	mov	r4, sl
 80140ca:	2205      	movs	r2, #5
 80140cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140d0:	4851      	ldr	r0, [pc, #324]	; (8014218 <_svfiprintf_r+0x1ec>)
 80140d2:	f7ec f89d 	bl	8000210 <memchr>
 80140d6:	9a04      	ldr	r2, [sp, #16]
 80140d8:	b9d8      	cbnz	r0, 8014112 <_svfiprintf_r+0xe6>
 80140da:	06d0      	lsls	r0, r2, #27
 80140dc:	bf44      	itt	mi
 80140de:	2320      	movmi	r3, #32
 80140e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140e4:	0711      	lsls	r1, r2, #28
 80140e6:	bf44      	itt	mi
 80140e8:	232b      	movmi	r3, #43	; 0x2b
 80140ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140ee:	f89a 3000 	ldrb.w	r3, [sl]
 80140f2:	2b2a      	cmp	r3, #42	; 0x2a
 80140f4:	d015      	beq.n	8014122 <_svfiprintf_r+0xf6>
 80140f6:	9a07      	ldr	r2, [sp, #28]
 80140f8:	4654      	mov	r4, sl
 80140fa:	2000      	movs	r0, #0
 80140fc:	f04f 0c0a 	mov.w	ip, #10
 8014100:	4621      	mov	r1, r4
 8014102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014106:	3b30      	subs	r3, #48	; 0x30
 8014108:	2b09      	cmp	r3, #9
 801410a:	d94e      	bls.n	80141aa <_svfiprintf_r+0x17e>
 801410c:	b1b0      	cbz	r0, 801413c <_svfiprintf_r+0x110>
 801410e:	9207      	str	r2, [sp, #28]
 8014110:	e014      	b.n	801413c <_svfiprintf_r+0x110>
 8014112:	eba0 0308 	sub.w	r3, r0, r8
 8014116:	fa09 f303 	lsl.w	r3, r9, r3
 801411a:	4313      	orrs	r3, r2
 801411c:	9304      	str	r3, [sp, #16]
 801411e:	46a2      	mov	sl, r4
 8014120:	e7d2      	b.n	80140c8 <_svfiprintf_r+0x9c>
 8014122:	9b03      	ldr	r3, [sp, #12]
 8014124:	1d19      	adds	r1, r3, #4
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	9103      	str	r1, [sp, #12]
 801412a:	2b00      	cmp	r3, #0
 801412c:	bfbb      	ittet	lt
 801412e:	425b      	neglt	r3, r3
 8014130:	f042 0202 	orrlt.w	r2, r2, #2
 8014134:	9307      	strge	r3, [sp, #28]
 8014136:	9307      	strlt	r3, [sp, #28]
 8014138:	bfb8      	it	lt
 801413a:	9204      	strlt	r2, [sp, #16]
 801413c:	7823      	ldrb	r3, [r4, #0]
 801413e:	2b2e      	cmp	r3, #46	; 0x2e
 8014140:	d10c      	bne.n	801415c <_svfiprintf_r+0x130>
 8014142:	7863      	ldrb	r3, [r4, #1]
 8014144:	2b2a      	cmp	r3, #42	; 0x2a
 8014146:	d135      	bne.n	80141b4 <_svfiprintf_r+0x188>
 8014148:	9b03      	ldr	r3, [sp, #12]
 801414a:	1d1a      	adds	r2, r3, #4
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	9203      	str	r2, [sp, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	bfb8      	it	lt
 8014154:	f04f 33ff 	movlt.w	r3, #4294967295
 8014158:	3402      	adds	r4, #2
 801415a:	9305      	str	r3, [sp, #20]
 801415c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014228 <_svfiprintf_r+0x1fc>
 8014160:	7821      	ldrb	r1, [r4, #0]
 8014162:	2203      	movs	r2, #3
 8014164:	4650      	mov	r0, sl
 8014166:	f7ec f853 	bl	8000210 <memchr>
 801416a:	b140      	cbz	r0, 801417e <_svfiprintf_r+0x152>
 801416c:	2340      	movs	r3, #64	; 0x40
 801416e:	eba0 000a 	sub.w	r0, r0, sl
 8014172:	fa03 f000 	lsl.w	r0, r3, r0
 8014176:	9b04      	ldr	r3, [sp, #16]
 8014178:	4303      	orrs	r3, r0
 801417a:	3401      	adds	r4, #1
 801417c:	9304      	str	r3, [sp, #16]
 801417e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014182:	4826      	ldr	r0, [pc, #152]	; (801421c <_svfiprintf_r+0x1f0>)
 8014184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014188:	2206      	movs	r2, #6
 801418a:	f7ec f841 	bl	8000210 <memchr>
 801418e:	2800      	cmp	r0, #0
 8014190:	d038      	beq.n	8014204 <_svfiprintf_r+0x1d8>
 8014192:	4b23      	ldr	r3, [pc, #140]	; (8014220 <_svfiprintf_r+0x1f4>)
 8014194:	bb1b      	cbnz	r3, 80141de <_svfiprintf_r+0x1b2>
 8014196:	9b03      	ldr	r3, [sp, #12]
 8014198:	3307      	adds	r3, #7
 801419a:	f023 0307 	bic.w	r3, r3, #7
 801419e:	3308      	adds	r3, #8
 80141a0:	9303      	str	r3, [sp, #12]
 80141a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141a4:	4433      	add	r3, r6
 80141a6:	9309      	str	r3, [sp, #36]	; 0x24
 80141a8:	e767      	b.n	801407a <_svfiprintf_r+0x4e>
 80141aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80141ae:	460c      	mov	r4, r1
 80141b0:	2001      	movs	r0, #1
 80141b2:	e7a5      	b.n	8014100 <_svfiprintf_r+0xd4>
 80141b4:	2300      	movs	r3, #0
 80141b6:	3401      	adds	r4, #1
 80141b8:	9305      	str	r3, [sp, #20]
 80141ba:	4619      	mov	r1, r3
 80141bc:	f04f 0c0a 	mov.w	ip, #10
 80141c0:	4620      	mov	r0, r4
 80141c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141c6:	3a30      	subs	r2, #48	; 0x30
 80141c8:	2a09      	cmp	r2, #9
 80141ca:	d903      	bls.n	80141d4 <_svfiprintf_r+0x1a8>
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d0c5      	beq.n	801415c <_svfiprintf_r+0x130>
 80141d0:	9105      	str	r1, [sp, #20]
 80141d2:	e7c3      	b.n	801415c <_svfiprintf_r+0x130>
 80141d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80141d8:	4604      	mov	r4, r0
 80141da:	2301      	movs	r3, #1
 80141dc:	e7f0      	b.n	80141c0 <_svfiprintf_r+0x194>
 80141de:	ab03      	add	r3, sp, #12
 80141e0:	9300      	str	r3, [sp, #0]
 80141e2:	462a      	mov	r2, r5
 80141e4:	4b0f      	ldr	r3, [pc, #60]	; (8014224 <_svfiprintf_r+0x1f8>)
 80141e6:	a904      	add	r1, sp, #16
 80141e8:	4638      	mov	r0, r7
 80141ea:	f7fc f9e5 	bl	80105b8 <_printf_float>
 80141ee:	1c42      	adds	r2, r0, #1
 80141f0:	4606      	mov	r6, r0
 80141f2:	d1d6      	bne.n	80141a2 <_svfiprintf_r+0x176>
 80141f4:	89ab      	ldrh	r3, [r5, #12]
 80141f6:	065b      	lsls	r3, r3, #25
 80141f8:	f53f af2c 	bmi.w	8014054 <_svfiprintf_r+0x28>
 80141fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141fe:	b01d      	add	sp, #116	; 0x74
 8014200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014204:	ab03      	add	r3, sp, #12
 8014206:	9300      	str	r3, [sp, #0]
 8014208:	462a      	mov	r2, r5
 801420a:	4b06      	ldr	r3, [pc, #24]	; (8014224 <_svfiprintf_r+0x1f8>)
 801420c:	a904      	add	r1, sp, #16
 801420e:	4638      	mov	r0, r7
 8014210:	f7fc fc76 	bl	8010b00 <_printf_i>
 8014214:	e7eb      	b.n	80141ee <_svfiprintf_r+0x1c2>
 8014216:	bf00      	nop
 8014218:	08028ca4 	.word	0x08028ca4
 801421c:	08028cae 	.word	0x08028cae
 8014220:	080105b9 	.word	0x080105b9
 8014224:	08013f75 	.word	0x08013f75
 8014228:	08028caa 	.word	0x08028caa

0801422c <__sfputc_r>:
 801422c:	6893      	ldr	r3, [r2, #8]
 801422e:	3b01      	subs	r3, #1
 8014230:	2b00      	cmp	r3, #0
 8014232:	b410      	push	{r4}
 8014234:	6093      	str	r3, [r2, #8]
 8014236:	da08      	bge.n	801424a <__sfputc_r+0x1e>
 8014238:	6994      	ldr	r4, [r2, #24]
 801423a:	42a3      	cmp	r3, r4
 801423c:	db01      	blt.n	8014242 <__sfputc_r+0x16>
 801423e:	290a      	cmp	r1, #10
 8014240:	d103      	bne.n	801424a <__sfputc_r+0x1e>
 8014242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014246:	f000 b975 	b.w	8014534 <__swbuf_r>
 801424a:	6813      	ldr	r3, [r2, #0]
 801424c:	1c58      	adds	r0, r3, #1
 801424e:	6010      	str	r0, [r2, #0]
 8014250:	7019      	strb	r1, [r3, #0]
 8014252:	4608      	mov	r0, r1
 8014254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014258:	4770      	bx	lr

0801425a <__sfputs_r>:
 801425a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425c:	4606      	mov	r6, r0
 801425e:	460f      	mov	r7, r1
 8014260:	4614      	mov	r4, r2
 8014262:	18d5      	adds	r5, r2, r3
 8014264:	42ac      	cmp	r4, r5
 8014266:	d101      	bne.n	801426c <__sfputs_r+0x12>
 8014268:	2000      	movs	r0, #0
 801426a:	e007      	b.n	801427c <__sfputs_r+0x22>
 801426c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014270:	463a      	mov	r2, r7
 8014272:	4630      	mov	r0, r6
 8014274:	f7ff ffda 	bl	801422c <__sfputc_r>
 8014278:	1c43      	adds	r3, r0, #1
 801427a:	d1f3      	bne.n	8014264 <__sfputs_r+0xa>
 801427c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014280 <_vfiprintf_r>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	460d      	mov	r5, r1
 8014286:	b09d      	sub	sp, #116	; 0x74
 8014288:	4614      	mov	r4, r2
 801428a:	4698      	mov	r8, r3
 801428c:	4606      	mov	r6, r0
 801428e:	b118      	cbz	r0, 8014298 <_vfiprintf_r+0x18>
 8014290:	6983      	ldr	r3, [r0, #24]
 8014292:	b90b      	cbnz	r3, 8014298 <_vfiprintf_r+0x18>
 8014294:	f000 fb3e 	bl	8014914 <__sinit>
 8014298:	4b89      	ldr	r3, [pc, #548]	; (80144c0 <_vfiprintf_r+0x240>)
 801429a:	429d      	cmp	r5, r3
 801429c:	d11b      	bne.n	80142d6 <_vfiprintf_r+0x56>
 801429e:	6875      	ldr	r5, [r6, #4]
 80142a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142a2:	07d9      	lsls	r1, r3, #31
 80142a4:	d405      	bmi.n	80142b2 <_vfiprintf_r+0x32>
 80142a6:	89ab      	ldrh	r3, [r5, #12]
 80142a8:	059a      	lsls	r2, r3, #22
 80142aa:	d402      	bmi.n	80142b2 <_vfiprintf_r+0x32>
 80142ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142ae:	f000 fbcf 	bl	8014a50 <__retarget_lock_acquire_recursive>
 80142b2:	89ab      	ldrh	r3, [r5, #12]
 80142b4:	071b      	lsls	r3, r3, #28
 80142b6:	d501      	bpl.n	80142bc <_vfiprintf_r+0x3c>
 80142b8:	692b      	ldr	r3, [r5, #16]
 80142ba:	b9eb      	cbnz	r3, 80142f8 <_vfiprintf_r+0x78>
 80142bc:	4629      	mov	r1, r5
 80142be:	4630      	mov	r0, r6
 80142c0:	f000 f998 	bl	80145f4 <__swsetup_r>
 80142c4:	b1c0      	cbz	r0, 80142f8 <_vfiprintf_r+0x78>
 80142c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142c8:	07dc      	lsls	r4, r3, #31
 80142ca:	d50e      	bpl.n	80142ea <_vfiprintf_r+0x6a>
 80142cc:	f04f 30ff 	mov.w	r0, #4294967295
 80142d0:	b01d      	add	sp, #116	; 0x74
 80142d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d6:	4b7b      	ldr	r3, [pc, #492]	; (80144c4 <_vfiprintf_r+0x244>)
 80142d8:	429d      	cmp	r5, r3
 80142da:	d101      	bne.n	80142e0 <_vfiprintf_r+0x60>
 80142dc:	68b5      	ldr	r5, [r6, #8]
 80142de:	e7df      	b.n	80142a0 <_vfiprintf_r+0x20>
 80142e0:	4b79      	ldr	r3, [pc, #484]	; (80144c8 <_vfiprintf_r+0x248>)
 80142e2:	429d      	cmp	r5, r3
 80142e4:	bf08      	it	eq
 80142e6:	68f5      	ldreq	r5, [r6, #12]
 80142e8:	e7da      	b.n	80142a0 <_vfiprintf_r+0x20>
 80142ea:	89ab      	ldrh	r3, [r5, #12]
 80142ec:	0598      	lsls	r0, r3, #22
 80142ee:	d4ed      	bmi.n	80142cc <_vfiprintf_r+0x4c>
 80142f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142f2:	f000 fbae 	bl	8014a52 <__retarget_lock_release_recursive>
 80142f6:	e7e9      	b.n	80142cc <_vfiprintf_r+0x4c>
 80142f8:	2300      	movs	r3, #0
 80142fa:	9309      	str	r3, [sp, #36]	; 0x24
 80142fc:	2320      	movs	r3, #32
 80142fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014302:	f8cd 800c 	str.w	r8, [sp, #12]
 8014306:	2330      	movs	r3, #48	; 0x30
 8014308:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80144cc <_vfiprintf_r+0x24c>
 801430c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014310:	f04f 0901 	mov.w	r9, #1
 8014314:	4623      	mov	r3, r4
 8014316:	469a      	mov	sl, r3
 8014318:	f813 2b01 	ldrb.w	r2, [r3], #1
 801431c:	b10a      	cbz	r2, 8014322 <_vfiprintf_r+0xa2>
 801431e:	2a25      	cmp	r2, #37	; 0x25
 8014320:	d1f9      	bne.n	8014316 <_vfiprintf_r+0x96>
 8014322:	ebba 0b04 	subs.w	fp, sl, r4
 8014326:	d00b      	beq.n	8014340 <_vfiprintf_r+0xc0>
 8014328:	465b      	mov	r3, fp
 801432a:	4622      	mov	r2, r4
 801432c:	4629      	mov	r1, r5
 801432e:	4630      	mov	r0, r6
 8014330:	f7ff ff93 	bl	801425a <__sfputs_r>
 8014334:	3001      	adds	r0, #1
 8014336:	f000 80aa 	beq.w	801448e <_vfiprintf_r+0x20e>
 801433a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801433c:	445a      	add	r2, fp
 801433e:	9209      	str	r2, [sp, #36]	; 0x24
 8014340:	f89a 3000 	ldrb.w	r3, [sl]
 8014344:	2b00      	cmp	r3, #0
 8014346:	f000 80a2 	beq.w	801448e <_vfiprintf_r+0x20e>
 801434a:	2300      	movs	r3, #0
 801434c:	f04f 32ff 	mov.w	r2, #4294967295
 8014350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014354:	f10a 0a01 	add.w	sl, sl, #1
 8014358:	9304      	str	r3, [sp, #16]
 801435a:	9307      	str	r3, [sp, #28]
 801435c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014360:	931a      	str	r3, [sp, #104]	; 0x68
 8014362:	4654      	mov	r4, sl
 8014364:	2205      	movs	r2, #5
 8014366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801436a:	4858      	ldr	r0, [pc, #352]	; (80144cc <_vfiprintf_r+0x24c>)
 801436c:	f7eb ff50 	bl	8000210 <memchr>
 8014370:	9a04      	ldr	r2, [sp, #16]
 8014372:	b9d8      	cbnz	r0, 80143ac <_vfiprintf_r+0x12c>
 8014374:	06d1      	lsls	r1, r2, #27
 8014376:	bf44      	itt	mi
 8014378:	2320      	movmi	r3, #32
 801437a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801437e:	0713      	lsls	r3, r2, #28
 8014380:	bf44      	itt	mi
 8014382:	232b      	movmi	r3, #43	; 0x2b
 8014384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014388:	f89a 3000 	ldrb.w	r3, [sl]
 801438c:	2b2a      	cmp	r3, #42	; 0x2a
 801438e:	d015      	beq.n	80143bc <_vfiprintf_r+0x13c>
 8014390:	9a07      	ldr	r2, [sp, #28]
 8014392:	4654      	mov	r4, sl
 8014394:	2000      	movs	r0, #0
 8014396:	f04f 0c0a 	mov.w	ip, #10
 801439a:	4621      	mov	r1, r4
 801439c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143a0:	3b30      	subs	r3, #48	; 0x30
 80143a2:	2b09      	cmp	r3, #9
 80143a4:	d94e      	bls.n	8014444 <_vfiprintf_r+0x1c4>
 80143a6:	b1b0      	cbz	r0, 80143d6 <_vfiprintf_r+0x156>
 80143a8:	9207      	str	r2, [sp, #28]
 80143aa:	e014      	b.n	80143d6 <_vfiprintf_r+0x156>
 80143ac:	eba0 0308 	sub.w	r3, r0, r8
 80143b0:	fa09 f303 	lsl.w	r3, r9, r3
 80143b4:	4313      	orrs	r3, r2
 80143b6:	9304      	str	r3, [sp, #16]
 80143b8:	46a2      	mov	sl, r4
 80143ba:	e7d2      	b.n	8014362 <_vfiprintf_r+0xe2>
 80143bc:	9b03      	ldr	r3, [sp, #12]
 80143be:	1d19      	adds	r1, r3, #4
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	9103      	str	r1, [sp, #12]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	bfbb      	ittet	lt
 80143c8:	425b      	neglt	r3, r3
 80143ca:	f042 0202 	orrlt.w	r2, r2, #2
 80143ce:	9307      	strge	r3, [sp, #28]
 80143d0:	9307      	strlt	r3, [sp, #28]
 80143d2:	bfb8      	it	lt
 80143d4:	9204      	strlt	r2, [sp, #16]
 80143d6:	7823      	ldrb	r3, [r4, #0]
 80143d8:	2b2e      	cmp	r3, #46	; 0x2e
 80143da:	d10c      	bne.n	80143f6 <_vfiprintf_r+0x176>
 80143dc:	7863      	ldrb	r3, [r4, #1]
 80143de:	2b2a      	cmp	r3, #42	; 0x2a
 80143e0:	d135      	bne.n	801444e <_vfiprintf_r+0x1ce>
 80143e2:	9b03      	ldr	r3, [sp, #12]
 80143e4:	1d1a      	adds	r2, r3, #4
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	9203      	str	r2, [sp, #12]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	bfb8      	it	lt
 80143ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80143f2:	3402      	adds	r4, #2
 80143f4:	9305      	str	r3, [sp, #20]
 80143f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80144dc <_vfiprintf_r+0x25c>
 80143fa:	7821      	ldrb	r1, [r4, #0]
 80143fc:	2203      	movs	r2, #3
 80143fe:	4650      	mov	r0, sl
 8014400:	f7eb ff06 	bl	8000210 <memchr>
 8014404:	b140      	cbz	r0, 8014418 <_vfiprintf_r+0x198>
 8014406:	2340      	movs	r3, #64	; 0x40
 8014408:	eba0 000a 	sub.w	r0, r0, sl
 801440c:	fa03 f000 	lsl.w	r0, r3, r0
 8014410:	9b04      	ldr	r3, [sp, #16]
 8014412:	4303      	orrs	r3, r0
 8014414:	3401      	adds	r4, #1
 8014416:	9304      	str	r3, [sp, #16]
 8014418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801441c:	482c      	ldr	r0, [pc, #176]	; (80144d0 <_vfiprintf_r+0x250>)
 801441e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014422:	2206      	movs	r2, #6
 8014424:	f7eb fef4 	bl	8000210 <memchr>
 8014428:	2800      	cmp	r0, #0
 801442a:	d03f      	beq.n	80144ac <_vfiprintf_r+0x22c>
 801442c:	4b29      	ldr	r3, [pc, #164]	; (80144d4 <_vfiprintf_r+0x254>)
 801442e:	bb1b      	cbnz	r3, 8014478 <_vfiprintf_r+0x1f8>
 8014430:	9b03      	ldr	r3, [sp, #12]
 8014432:	3307      	adds	r3, #7
 8014434:	f023 0307 	bic.w	r3, r3, #7
 8014438:	3308      	adds	r3, #8
 801443a:	9303      	str	r3, [sp, #12]
 801443c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801443e:	443b      	add	r3, r7
 8014440:	9309      	str	r3, [sp, #36]	; 0x24
 8014442:	e767      	b.n	8014314 <_vfiprintf_r+0x94>
 8014444:	fb0c 3202 	mla	r2, ip, r2, r3
 8014448:	460c      	mov	r4, r1
 801444a:	2001      	movs	r0, #1
 801444c:	e7a5      	b.n	801439a <_vfiprintf_r+0x11a>
 801444e:	2300      	movs	r3, #0
 8014450:	3401      	adds	r4, #1
 8014452:	9305      	str	r3, [sp, #20]
 8014454:	4619      	mov	r1, r3
 8014456:	f04f 0c0a 	mov.w	ip, #10
 801445a:	4620      	mov	r0, r4
 801445c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014460:	3a30      	subs	r2, #48	; 0x30
 8014462:	2a09      	cmp	r2, #9
 8014464:	d903      	bls.n	801446e <_vfiprintf_r+0x1ee>
 8014466:	2b00      	cmp	r3, #0
 8014468:	d0c5      	beq.n	80143f6 <_vfiprintf_r+0x176>
 801446a:	9105      	str	r1, [sp, #20]
 801446c:	e7c3      	b.n	80143f6 <_vfiprintf_r+0x176>
 801446e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014472:	4604      	mov	r4, r0
 8014474:	2301      	movs	r3, #1
 8014476:	e7f0      	b.n	801445a <_vfiprintf_r+0x1da>
 8014478:	ab03      	add	r3, sp, #12
 801447a:	9300      	str	r3, [sp, #0]
 801447c:	462a      	mov	r2, r5
 801447e:	4b16      	ldr	r3, [pc, #88]	; (80144d8 <_vfiprintf_r+0x258>)
 8014480:	a904      	add	r1, sp, #16
 8014482:	4630      	mov	r0, r6
 8014484:	f7fc f898 	bl	80105b8 <_printf_float>
 8014488:	4607      	mov	r7, r0
 801448a:	1c78      	adds	r0, r7, #1
 801448c:	d1d6      	bne.n	801443c <_vfiprintf_r+0x1bc>
 801448e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014490:	07d9      	lsls	r1, r3, #31
 8014492:	d405      	bmi.n	80144a0 <_vfiprintf_r+0x220>
 8014494:	89ab      	ldrh	r3, [r5, #12]
 8014496:	059a      	lsls	r2, r3, #22
 8014498:	d402      	bmi.n	80144a0 <_vfiprintf_r+0x220>
 801449a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801449c:	f000 fad9 	bl	8014a52 <__retarget_lock_release_recursive>
 80144a0:	89ab      	ldrh	r3, [r5, #12]
 80144a2:	065b      	lsls	r3, r3, #25
 80144a4:	f53f af12 	bmi.w	80142cc <_vfiprintf_r+0x4c>
 80144a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144aa:	e711      	b.n	80142d0 <_vfiprintf_r+0x50>
 80144ac:	ab03      	add	r3, sp, #12
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	462a      	mov	r2, r5
 80144b2:	4b09      	ldr	r3, [pc, #36]	; (80144d8 <_vfiprintf_r+0x258>)
 80144b4:	a904      	add	r1, sp, #16
 80144b6:	4630      	mov	r0, r6
 80144b8:	f7fc fb22 	bl	8010b00 <_printf_i>
 80144bc:	e7e4      	b.n	8014488 <_vfiprintf_r+0x208>
 80144be:	bf00      	nop
 80144c0:	08028cd8 	.word	0x08028cd8
 80144c4:	08028cf8 	.word	0x08028cf8
 80144c8:	08028cb8 	.word	0x08028cb8
 80144cc:	08028ca4 	.word	0x08028ca4
 80144d0:	08028cae 	.word	0x08028cae
 80144d4:	080105b9 	.word	0x080105b9
 80144d8:	0801425b 	.word	0x0801425b
 80144dc:	08028caa 	.word	0x08028caa

080144e0 <nan>:
 80144e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80144e8 <nan+0x8>
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	00000000 	.word	0x00000000
 80144ec:	7ff80000 	.word	0x7ff80000

080144f0 <_sbrk_r>:
 80144f0:	b538      	push	{r3, r4, r5, lr}
 80144f2:	4d06      	ldr	r5, [pc, #24]	; (801450c <_sbrk_r+0x1c>)
 80144f4:	2300      	movs	r3, #0
 80144f6:	4604      	mov	r4, r0
 80144f8:	4608      	mov	r0, r1
 80144fa:	602b      	str	r3, [r5, #0]
 80144fc:	f7f4 fe94 	bl	8009228 <_sbrk>
 8014500:	1c43      	adds	r3, r0, #1
 8014502:	d102      	bne.n	801450a <_sbrk_r+0x1a>
 8014504:	682b      	ldr	r3, [r5, #0]
 8014506:	b103      	cbz	r3, 801450a <_sbrk_r+0x1a>
 8014508:	6023      	str	r3, [r4, #0]
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	2000090c 	.word	0x2000090c

08014510 <strncmp>:
 8014510:	b510      	push	{r4, lr}
 8014512:	b16a      	cbz	r2, 8014530 <strncmp+0x20>
 8014514:	3901      	subs	r1, #1
 8014516:	1884      	adds	r4, r0, r2
 8014518:	f810 3b01 	ldrb.w	r3, [r0], #1
 801451c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014520:	4293      	cmp	r3, r2
 8014522:	d103      	bne.n	801452c <strncmp+0x1c>
 8014524:	42a0      	cmp	r0, r4
 8014526:	d001      	beq.n	801452c <strncmp+0x1c>
 8014528:	2b00      	cmp	r3, #0
 801452a:	d1f5      	bne.n	8014518 <strncmp+0x8>
 801452c:	1a98      	subs	r0, r3, r2
 801452e:	bd10      	pop	{r4, pc}
 8014530:	4610      	mov	r0, r2
 8014532:	e7fc      	b.n	801452e <strncmp+0x1e>

08014534 <__swbuf_r>:
 8014534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014536:	460e      	mov	r6, r1
 8014538:	4614      	mov	r4, r2
 801453a:	4605      	mov	r5, r0
 801453c:	b118      	cbz	r0, 8014546 <__swbuf_r+0x12>
 801453e:	6983      	ldr	r3, [r0, #24]
 8014540:	b90b      	cbnz	r3, 8014546 <__swbuf_r+0x12>
 8014542:	f000 f9e7 	bl	8014914 <__sinit>
 8014546:	4b21      	ldr	r3, [pc, #132]	; (80145cc <__swbuf_r+0x98>)
 8014548:	429c      	cmp	r4, r3
 801454a:	d12b      	bne.n	80145a4 <__swbuf_r+0x70>
 801454c:	686c      	ldr	r4, [r5, #4]
 801454e:	69a3      	ldr	r3, [r4, #24]
 8014550:	60a3      	str	r3, [r4, #8]
 8014552:	89a3      	ldrh	r3, [r4, #12]
 8014554:	071a      	lsls	r2, r3, #28
 8014556:	d52f      	bpl.n	80145b8 <__swbuf_r+0x84>
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	b36b      	cbz	r3, 80145b8 <__swbuf_r+0x84>
 801455c:	6923      	ldr	r3, [r4, #16]
 801455e:	6820      	ldr	r0, [r4, #0]
 8014560:	1ac0      	subs	r0, r0, r3
 8014562:	6963      	ldr	r3, [r4, #20]
 8014564:	b2f6      	uxtb	r6, r6
 8014566:	4283      	cmp	r3, r0
 8014568:	4637      	mov	r7, r6
 801456a:	dc04      	bgt.n	8014576 <__swbuf_r+0x42>
 801456c:	4621      	mov	r1, r4
 801456e:	4628      	mov	r0, r5
 8014570:	f000 f93c 	bl	80147ec <_fflush_r>
 8014574:	bb30      	cbnz	r0, 80145c4 <__swbuf_r+0x90>
 8014576:	68a3      	ldr	r3, [r4, #8]
 8014578:	3b01      	subs	r3, #1
 801457a:	60a3      	str	r3, [r4, #8]
 801457c:	6823      	ldr	r3, [r4, #0]
 801457e:	1c5a      	adds	r2, r3, #1
 8014580:	6022      	str	r2, [r4, #0]
 8014582:	701e      	strb	r6, [r3, #0]
 8014584:	6963      	ldr	r3, [r4, #20]
 8014586:	3001      	adds	r0, #1
 8014588:	4283      	cmp	r3, r0
 801458a:	d004      	beq.n	8014596 <__swbuf_r+0x62>
 801458c:	89a3      	ldrh	r3, [r4, #12]
 801458e:	07db      	lsls	r3, r3, #31
 8014590:	d506      	bpl.n	80145a0 <__swbuf_r+0x6c>
 8014592:	2e0a      	cmp	r6, #10
 8014594:	d104      	bne.n	80145a0 <__swbuf_r+0x6c>
 8014596:	4621      	mov	r1, r4
 8014598:	4628      	mov	r0, r5
 801459a:	f000 f927 	bl	80147ec <_fflush_r>
 801459e:	b988      	cbnz	r0, 80145c4 <__swbuf_r+0x90>
 80145a0:	4638      	mov	r0, r7
 80145a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145a4:	4b0a      	ldr	r3, [pc, #40]	; (80145d0 <__swbuf_r+0x9c>)
 80145a6:	429c      	cmp	r4, r3
 80145a8:	d101      	bne.n	80145ae <__swbuf_r+0x7a>
 80145aa:	68ac      	ldr	r4, [r5, #8]
 80145ac:	e7cf      	b.n	801454e <__swbuf_r+0x1a>
 80145ae:	4b09      	ldr	r3, [pc, #36]	; (80145d4 <__swbuf_r+0xa0>)
 80145b0:	429c      	cmp	r4, r3
 80145b2:	bf08      	it	eq
 80145b4:	68ec      	ldreq	r4, [r5, #12]
 80145b6:	e7ca      	b.n	801454e <__swbuf_r+0x1a>
 80145b8:	4621      	mov	r1, r4
 80145ba:	4628      	mov	r0, r5
 80145bc:	f000 f81a 	bl	80145f4 <__swsetup_r>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	d0cb      	beq.n	801455c <__swbuf_r+0x28>
 80145c4:	f04f 37ff 	mov.w	r7, #4294967295
 80145c8:	e7ea      	b.n	80145a0 <__swbuf_r+0x6c>
 80145ca:	bf00      	nop
 80145cc:	08028cd8 	.word	0x08028cd8
 80145d0:	08028cf8 	.word	0x08028cf8
 80145d4:	08028cb8 	.word	0x08028cb8

080145d8 <__ascii_wctomb>:
 80145d8:	b149      	cbz	r1, 80145ee <__ascii_wctomb+0x16>
 80145da:	2aff      	cmp	r2, #255	; 0xff
 80145dc:	bf85      	ittet	hi
 80145de:	238a      	movhi	r3, #138	; 0x8a
 80145e0:	6003      	strhi	r3, [r0, #0]
 80145e2:	700a      	strbls	r2, [r1, #0]
 80145e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80145e8:	bf98      	it	ls
 80145ea:	2001      	movls	r0, #1
 80145ec:	4770      	bx	lr
 80145ee:	4608      	mov	r0, r1
 80145f0:	4770      	bx	lr
	...

080145f4 <__swsetup_r>:
 80145f4:	4b32      	ldr	r3, [pc, #200]	; (80146c0 <__swsetup_r+0xcc>)
 80145f6:	b570      	push	{r4, r5, r6, lr}
 80145f8:	681d      	ldr	r5, [r3, #0]
 80145fa:	4606      	mov	r6, r0
 80145fc:	460c      	mov	r4, r1
 80145fe:	b125      	cbz	r5, 801460a <__swsetup_r+0x16>
 8014600:	69ab      	ldr	r3, [r5, #24]
 8014602:	b913      	cbnz	r3, 801460a <__swsetup_r+0x16>
 8014604:	4628      	mov	r0, r5
 8014606:	f000 f985 	bl	8014914 <__sinit>
 801460a:	4b2e      	ldr	r3, [pc, #184]	; (80146c4 <__swsetup_r+0xd0>)
 801460c:	429c      	cmp	r4, r3
 801460e:	d10f      	bne.n	8014630 <__swsetup_r+0x3c>
 8014610:	686c      	ldr	r4, [r5, #4]
 8014612:	89a3      	ldrh	r3, [r4, #12]
 8014614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014618:	0719      	lsls	r1, r3, #28
 801461a:	d42c      	bmi.n	8014676 <__swsetup_r+0x82>
 801461c:	06dd      	lsls	r5, r3, #27
 801461e:	d411      	bmi.n	8014644 <__swsetup_r+0x50>
 8014620:	2309      	movs	r3, #9
 8014622:	6033      	str	r3, [r6, #0]
 8014624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014628:	81a3      	strh	r3, [r4, #12]
 801462a:	f04f 30ff 	mov.w	r0, #4294967295
 801462e:	e03e      	b.n	80146ae <__swsetup_r+0xba>
 8014630:	4b25      	ldr	r3, [pc, #148]	; (80146c8 <__swsetup_r+0xd4>)
 8014632:	429c      	cmp	r4, r3
 8014634:	d101      	bne.n	801463a <__swsetup_r+0x46>
 8014636:	68ac      	ldr	r4, [r5, #8]
 8014638:	e7eb      	b.n	8014612 <__swsetup_r+0x1e>
 801463a:	4b24      	ldr	r3, [pc, #144]	; (80146cc <__swsetup_r+0xd8>)
 801463c:	429c      	cmp	r4, r3
 801463e:	bf08      	it	eq
 8014640:	68ec      	ldreq	r4, [r5, #12]
 8014642:	e7e6      	b.n	8014612 <__swsetup_r+0x1e>
 8014644:	0758      	lsls	r0, r3, #29
 8014646:	d512      	bpl.n	801466e <__swsetup_r+0x7a>
 8014648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801464a:	b141      	cbz	r1, 801465e <__swsetup_r+0x6a>
 801464c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014650:	4299      	cmp	r1, r3
 8014652:	d002      	beq.n	801465a <__swsetup_r+0x66>
 8014654:	4630      	mov	r0, r6
 8014656:	f7ff fbe3 	bl	8013e20 <_free_r>
 801465a:	2300      	movs	r3, #0
 801465c:	6363      	str	r3, [r4, #52]	; 0x34
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014664:	81a3      	strh	r3, [r4, #12]
 8014666:	2300      	movs	r3, #0
 8014668:	6063      	str	r3, [r4, #4]
 801466a:	6923      	ldr	r3, [r4, #16]
 801466c:	6023      	str	r3, [r4, #0]
 801466e:	89a3      	ldrh	r3, [r4, #12]
 8014670:	f043 0308 	orr.w	r3, r3, #8
 8014674:	81a3      	strh	r3, [r4, #12]
 8014676:	6923      	ldr	r3, [r4, #16]
 8014678:	b94b      	cbnz	r3, 801468e <__swsetup_r+0x9a>
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014684:	d003      	beq.n	801468e <__swsetup_r+0x9a>
 8014686:	4621      	mov	r1, r4
 8014688:	4630      	mov	r0, r6
 801468a:	f000 fa07 	bl	8014a9c <__smakebuf_r>
 801468e:	89a0      	ldrh	r0, [r4, #12]
 8014690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014694:	f010 0301 	ands.w	r3, r0, #1
 8014698:	d00a      	beq.n	80146b0 <__swsetup_r+0xbc>
 801469a:	2300      	movs	r3, #0
 801469c:	60a3      	str	r3, [r4, #8]
 801469e:	6963      	ldr	r3, [r4, #20]
 80146a0:	425b      	negs	r3, r3
 80146a2:	61a3      	str	r3, [r4, #24]
 80146a4:	6923      	ldr	r3, [r4, #16]
 80146a6:	b943      	cbnz	r3, 80146ba <__swsetup_r+0xc6>
 80146a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80146ac:	d1ba      	bne.n	8014624 <__swsetup_r+0x30>
 80146ae:	bd70      	pop	{r4, r5, r6, pc}
 80146b0:	0781      	lsls	r1, r0, #30
 80146b2:	bf58      	it	pl
 80146b4:	6963      	ldrpl	r3, [r4, #20]
 80146b6:	60a3      	str	r3, [r4, #8]
 80146b8:	e7f4      	b.n	80146a4 <__swsetup_r+0xb0>
 80146ba:	2000      	movs	r0, #0
 80146bc:	e7f7      	b.n	80146ae <__swsetup_r+0xba>
 80146be:	bf00      	nop
 80146c0:	20000040 	.word	0x20000040
 80146c4:	08028cd8 	.word	0x08028cd8
 80146c8:	08028cf8 	.word	0x08028cf8
 80146cc:	08028cb8 	.word	0x08028cb8

080146d0 <abort>:
 80146d0:	b508      	push	{r3, lr}
 80146d2:	2006      	movs	r0, #6
 80146d4:	f000 fa96 	bl	8014c04 <raise>
 80146d8:	2001      	movs	r0, #1
 80146da:	f7f4 fd2d 	bl	8009138 <_exit>
	...

080146e0 <__sflush_r>:
 80146e0:	898a      	ldrh	r2, [r1, #12]
 80146e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146e6:	4605      	mov	r5, r0
 80146e8:	0710      	lsls	r0, r2, #28
 80146ea:	460c      	mov	r4, r1
 80146ec:	d458      	bmi.n	80147a0 <__sflush_r+0xc0>
 80146ee:	684b      	ldr	r3, [r1, #4]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	dc05      	bgt.n	8014700 <__sflush_r+0x20>
 80146f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	dc02      	bgt.n	8014700 <__sflush_r+0x20>
 80146fa:	2000      	movs	r0, #0
 80146fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014702:	2e00      	cmp	r6, #0
 8014704:	d0f9      	beq.n	80146fa <__sflush_r+0x1a>
 8014706:	2300      	movs	r3, #0
 8014708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801470c:	682f      	ldr	r7, [r5, #0]
 801470e:	602b      	str	r3, [r5, #0]
 8014710:	d032      	beq.n	8014778 <__sflush_r+0x98>
 8014712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014714:	89a3      	ldrh	r3, [r4, #12]
 8014716:	075a      	lsls	r2, r3, #29
 8014718:	d505      	bpl.n	8014726 <__sflush_r+0x46>
 801471a:	6863      	ldr	r3, [r4, #4]
 801471c:	1ac0      	subs	r0, r0, r3
 801471e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014720:	b10b      	cbz	r3, 8014726 <__sflush_r+0x46>
 8014722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014724:	1ac0      	subs	r0, r0, r3
 8014726:	2300      	movs	r3, #0
 8014728:	4602      	mov	r2, r0
 801472a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801472c:	6a21      	ldr	r1, [r4, #32]
 801472e:	4628      	mov	r0, r5
 8014730:	47b0      	blx	r6
 8014732:	1c43      	adds	r3, r0, #1
 8014734:	89a3      	ldrh	r3, [r4, #12]
 8014736:	d106      	bne.n	8014746 <__sflush_r+0x66>
 8014738:	6829      	ldr	r1, [r5, #0]
 801473a:	291d      	cmp	r1, #29
 801473c:	d82c      	bhi.n	8014798 <__sflush_r+0xb8>
 801473e:	4a2a      	ldr	r2, [pc, #168]	; (80147e8 <__sflush_r+0x108>)
 8014740:	40ca      	lsrs	r2, r1
 8014742:	07d6      	lsls	r6, r2, #31
 8014744:	d528      	bpl.n	8014798 <__sflush_r+0xb8>
 8014746:	2200      	movs	r2, #0
 8014748:	6062      	str	r2, [r4, #4]
 801474a:	04d9      	lsls	r1, r3, #19
 801474c:	6922      	ldr	r2, [r4, #16]
 801474e:	6022      	str	r2, [r4, #0]
 8014750:	d504      	bpl.n	801475c <__sflush_r+0x7c>
 8014752:	1c42      	adds	r2, r0, #1
 8014754:	d101      	bne.n	801475a <__sflush_r+0x7a>
 8014756:	682b      	ldr	r3, [r5, #0]
 8014758:	b903      	cbnz	r3, 801475c <__sflush_r+0x7c>
 801475a:	6560      	str	r0, [r4, #84]	; 0x54
 801475c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801475e:	602f      	str	r7, [r5, #0]
 8014760:	2900      	cmp	r1, #0
 8014762:	d0ca      	beq.n	80146fa <__sflush_r+0x1a>
 8014764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014768:	4299      	cmp	r1, r3
 801476a:	d002      	beq.n	8014772 <__sflush_r+0x92>
 801476c:	4628      	mov	r0, r5
 801476e:	f7ff fb57 	bl	8013e20 <_free_r>
 8014772:	2000      	movs	r0, #0
 8014774:	6360      	str	r0, [r4, #52]	; 0x34
 8014776:	e7c1      	b.n	80146fc <__sflush_r+0x1c>
 8014778:	6a21      	ldr	r1, [r4, #32]
 801477a:	2301      	movs	r3, #1
 801477c:	4628      	mov	r0, r5
 801477e:	47b0      	blx	r6
 8014780:	1c41      	adds	r1, r0, #1
 8014782:	d1c7      	bne.n	8014714 <__sflush_r+0x34>
 8014784:	682b      	ldr	r3, [r5, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d0c4      	beq.n	8014714 <__sflush_r+0x34>
 801478a:	2b1d      	cmp	r3, #29
 801478c:	d001      	beq.n	8014792 <__sflush_r+0xb2>
 801478e:	2b16      	cmp	r3, #22
 8014790:	d101      	bne.n	8014796 <__sflush_r+0xb6>
 8014792:	602f      	str	r7, [r5, #0]
 8014794:	e7b1      	b.n	80146fa <__sflush_r+0x1a>
 8014796:	89a3      	ldrh	r3, [r4, #12]
 8014798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801479c:	81a3      	strh	r3, [r4, #12]
 801479e:	e7ad      	b.n	80146fc <__sflush_r+0x1c>
 80147a0:	690f      	ldr	r7, [r1, #16]
 80147a2:	2f00      	cmp	r7, #0
 80147a4:	d0a9      	beq.n	80146fa <__sflush_r+0x1a>
 80147a6:	0793      	lsls	r3, r2, #30
 80147a8:	680e      	ldr	r6, [r1, #0]
 80147aa:	bf08      	it	eq
 80147ac:	694b      	ldreq	r3, [r1, #20]
 80147ae:	600f      	str	r7, [r1, #0]
 80147b0:	bf18      	it	ne
 80147b2:	2300      	movne	r3, #0
 80147b4:	eba6 0807 	sub.w	r8, r6, r7
 80147b8:	608b      	str	r3, [r1, #8]
 80147ba:	f1b8 0f00 	cmp.w	r8, #0
 80147be:	dd9c      	ble.n	80146fa <__sflush_r+0x1a>
 80147c0:	6a21      	ldr	r1, [r4, #32]
 80147c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80147c4:	4643      	mov	r3, r8
 80147c6:	463a      	mov	r2, r7
 80147c8:	4628      	mov	r0, r5
 80147ca:	47b0      	blx	r6
 80147cc:	2800      	cmp	r0, #0
 80147ce:	dc06      	bgt.n	80147de <__sflush_r+0xfe>
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147d6:	81a3      	strh	r3, [r4, #12]
 80147d8:	f04f 30ff 	mov.w	r0, #4294967295
 80147dc:	e78e      	b.n	80146fc <__sflush_r+0x1c>
 80147de:	4407      	add	r7, r0
 80147e0:	eba8 0800 	sub.w	r8, r8, r0
 80147e4:	e7e9      	b.n	80147ba <__sflush_r+0xda>
 80147e6:	bf00      	nop
 80147e8:	20400001 	.word	0x20400001

080147ec <_fflush_r>:
 80147ec:	b538      	push	{r3, r4, r5, lr}
 80147ee:	690b      	ldr	r3, [r1, #16]
 80147f0:	4605      	mov	r5, r0
 80147f2:	460c      	mov	r4, r1
 80147f4:	b913      	cbnz	r3, 80147fc <_fflush_r+0x10>
 80147f6:	2500      	movs	r5, #0
 80147f8:	4628      	mov	r0, r5
 80147fa:	bd38      	pop	{r3, r4, r5, pc}
 80147fc:	b118      	cbz	r0, 8014806 <_fflush_r+0x1a>
 80147fe:	6983      	ldr	r3, [r0, #24]
 8014800:	b90b      	cbnz	r3, 8014806 <_fflush_r+0x1a>
 8014802:	f000 f887 	bl	8014914 <__sinit>
 8014806:	4b14      	ldr	r3, [pc, #80]	; (8014858 <_fflush_r+0x6c>)
 8014808:	429c      	cmp	r4, r3
 801480a:	d11b      	bne.n	8014844 <_fflush_r+0x58>
 801480c:	686c      	ldr	r4, [r5, #4]
 801480e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d0ef      	beq.n	80147f6 <_fflush_r+0xa>
 8014816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014818:	07d0      	lsls	r0, r2, #31
 801481a:	d404      	bmi.n	8014826 <_fflush_r+0x3a>
 801481c:	0599      	lsls	r1, r3, #22
 801481e:	d402      	bmi.n	8014826 <_fflush_r+0x3a>
 8014820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014822:	f000 f915 	bl	8014a50 <__retarget_lock_acquire_recursive>
 8014826:	4628      	mov	r0, r5
 8014828:	4621      	mov	r1, r4
 801482a:	f7ff ff59 	bl	80146e0 <__sflush_r>
 801482e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014830:	07da      	lsls	r2, r3, #31
 8014832:	4605      	mov	r5, r0
 8014834:	d4e0      	bmi.n	80147f8 <_fflush_r+0xc>
 8014836:	89a3      	ldrh	r3, [r4, #12]
 8014838:	059b      	lsls	r3, r3, #22
 801483a:	d4dd      	bmi.n	80147f8 <_fflush_r+0xc>
 801483c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801483e:	f000 f908 	bl	8014a52 <__retarget_lock_release_recursive>
 8014842:	e7d9      	b.n	80147f8 <_fflush_r+0xc>
 8014844:	4b05      	ldr	r3, [pc, #20]	; (801485c <_fflush_r+0x70>)
 8014846:	429c      	cmp	r4, r3
 8014848:	d101      	bne.n	801484e <_fflush_r+0x62>
 801484a:	68ac      	ldr	r4, [r5, #8]
 801484c:	e7df      	b.n	801480e <_fflush_r+0x22>
 801484e:	4b04      	ldr	r3, [pc, #16]	; (8014860 <_fflush_r+0x74>)
 8014850:	429c      	cmp	r4, r3
 8014852:	bf08      	it	eq
 8014854:	68ec      	ldreq	r4, [r5, #12]
 8014856:	e7da      	b.n	801480e <_fflush_r+0x22>
 8014858:	08028cd8 	.word	0x08028cd8
 801485c:	08028cf8 	.word	0x08028cf8
 8014860:	08028cb8 	.word	0x08028cb8

08014864 <std>:
 8014864:	2300      	movs	r3, #0
 8014866:	b510      	push	{r4, lr}
 8014868:	4604      	mov	r4, r0
 801486a:	e9c0 3300 	strd	r3, r3, [r0]
 801486e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014872:	6083      	str	r3, [r0, #8]
 8014874:	8181      	strh	r1, [r0, #12]
 8014876:	6643      	str	r3, [r0, #100]	; 0x64
 8014878:	81c2      	strh	r2, [r0, #14]
 801487a:	6183      	str	r3, [r0, #24]
 801487c:	4619      	mov	r1, r3
 801487e:	2208      	movs	r2, #8
 8014880:	305c      	adds	r0, #92	; 0x5c
 8014882:	f7fb fdf1 	bl	8010468 <memset>
 8014886:	4b05      	ldr	r3, [pc, #20]	; (801489c <std+0x38>)
 8014888:	6263      	str	r3, [r4, #36]	; 0x24
 801488a:	4b05      	ldr	r3, [pc, #20]	; (80148a0 <std+0x3c>)
 801488c:	62a3      	str	r3, [r4, #40]	; 0x28
 801488e:	4b05      	ldr	r3, [pc, #20]	; (80148a4 <std+0x40>)
 8014890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014892:	4b05      	ldr	r3, [pc, #20]	; (80148a8 <std+0x44>)
 8014894:	6224      	str	r4, [r4, #32]
 8014896:	6323      	str	r3, [r4, #48]	; 0x30
 8014898:	bd10      	pop	{r4, pc}
 801489a:	bf00      	nop
 801489c:	08014c3d 	.word	0x08014c3d
 80148a0:	08014c5f 	.word	0x08014c5f
 80148a4:	08014c97 	.word	0x08014c97
 80148a8:	08014cbb 	.word	0x08014cbb

080148ac <_cleanup_r>:
 80148ac:	4901      	ldr	r1, [pc, #4]	; (80148b4 <_cleanup_r+0x8>)
 80148ae:	f000 b8af 	b.w	8014a10 <_fwalk_reent>
 80148b2:	bf00      	nop
 80148b4:	080147ed 	.word	0x080147ed

080148b8 <__sfmoreglue>:
 80148b8:	b570      	push	{r4, r5, r6, lr}
 80148ba:	1e4a      	subs	r2, r1, #1
 80148bc:	2568      	movs	r5, #104	; 0x68
 80148be:	4355      	muls	r5, r2
 80148c0:	460e      	mov	r6, r1
 80148c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80148c6:	f7ff fafb 	bl	8013ec0 <_malloc_r>
 80148ca:	4604      	mov	r4, r0
 80148cc:	b140      	cbz	r0, 80148e0 <__sfmoreglue+0x28>
 80148ce:	2100      	movs	r1, #0
 80148d0:	e9c0 1600 	strd	r1, r6, [r0]
 80148d4:	300c      	adds	r0, #12
 80148d6:	60a0      	str	r0, [r4, #8]
 80148d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80148dc:	f7fb fdc4 	bl	8010468 <memset>
 80148e0:	4620      	mov	r0, r4
 80148e2:	bd70      	pop	{r4, r5, r6, pc}

080148e4 <__sfp_lock_acquire>:
 80148e4:	4801      	ldr	r0, [pc, #4]	; (80148ec <__sfp_lock_acquire+0x8>)
 80148e6:	f000 b8b3 	b.w	8014a50 <__retarget_lock_acquire_recursive>
 80148ea:	bf00      	nop
 80148ec:	20000908 	.word	0x20000908

080148f0 <__sfp_lock_release>:
 80148f0:	4801      	ldr	r0, [pc, #4]	; (80148f8 <__sfp_lock_release+0x8>)
 80148f2:	f000 b8ae 	b.w	8014a52 <__retarget_lock_release_recursive>
 80148f6:	bf00      	nop
 80148f8:	20000908 	.word	0x20000908

080148fc <__sinit_lock_acquire>:
 80148fc:	4801      	ldr	r0, [pc, #4]	; (8014904 <__sinit_lock_acquire+0x8>)
 80148fe:	f000 b8a7 	b.w	8014a50 <__retarget_lock_acquire_recursive>
 8014902:	bf00      	nop
 8014904:	20000903 	.word	0x20000903

08014908 <__sinit_lock_release>:
 8014908:	4801      	ldr	r0, [pc, #4]	; (8014910 <__sinit_lock_release+0x8>)
 801490a:	f000 b8a2 	b.w	8014a52 <__retarget_lock_release_recursive>
 801490e:	bf00      	nop
 8014910:	20000903 	.word	0x20000903

08014914 <__sinit>:
 8014914:	b510      	push	{r4, lr}
 8014916:	4604      	mov	r4, r0
 8014918:	f7ff fff0 	bl	80148fc <__sinit_lock_acquire>
 801491c:	69a3      	ldr	r3, [r4, #24]
 801491e:	b11b      	cbz	r3, 8014928 <__sinit+0x14>
 8014920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014924:	f7ff bff0 	b.w	8014908 <__sinit_lock_release>
 8014928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801492c:	6523      	str	r3, [r4, #80]	; 0x50
 801492e:	4b13      	ldr	r3, [pc, #76]	; (801497c <__sinit+0x68>)
 8014930:	4a13      	ldr	r2, [pc, #76]	; (8014980 <__sinit+0x6c>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	62a2      	str	r2, [r4, #40]	; 0x28
 8014936:	42a3      	cmp	r3, r4
 8014938:	bf04      	itt	eq
 801493a:	2301      	moveq	r3, #1
 801493c:	61a3      	streq	r3, [r4, #24]
 801493e:	4620      	mov	r0, r4
 8014940:	f000 f820 	bl	8014984 <__sfp>
 8014944:	6060      	str	r0, [r4, #4]
 8014946:	4620      	mov	r0, r4
 8014948:	f000 f81c 	bl	8014984 <__sfp>
 801494c:	60a0      	str	r0, [r4, #8]
 801494e:	4620      	mov	r0, r4
 8014950:	f000 f818 	bl	8014984 <__sfp>
 8014954:	2200      	movs	r2, #0
 8014956:	60e0      	str	r0, [r4, #12]
 8014958:	2104      	movs	r1, #4
 801495a:	6860      	ldr	r0, [r4, #4]
 801495c:	f7ff ff82 	bl	8014864 <std>
 8014960:	68a0      	ldr	r0, [r4, #8]
 8014962:	2201      	movs	r2, #1
 8014964:	2109      	movs	r1, #9
 8014966:	f7ff ff7d 	bl	8014864 <std>
 801496a:	68e0      	ldr	r0, [r4, #12]
 801496c:	2202      	movs	r2, #2
 801496e:	2112      	movs	r1, #18
 8014970:	f7ff ff78 	bl	8014864 <std>
 8014974:	2301      	movs	r3, #1
 8014976:	61a3      	str	r3, [r4, #24]
 8014978:	e7d2      	b.n	8014920 <__sinit+0xc>
 801497a:	bf00      	nop
 801497c:	08028808 	.word	0x08028808
 8014980:	080148ad 	.word	0x080148ad

08014984 <__sfp>:
 8014984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014986:	4607      	mov	r7, r0
 8014988:	f7ff ffac 	bl	80148e4 <__sfp_lock_acquire>
 801498c:	4b1e      	ldr	r3, [pc, #120]	; (8014a08 <__sfp+0x84>)
 801498e:	681e      	ldr	r6, [r3, #0]
 8014990:	69b3      	ldr	r3, [r6, #24]
 8014992:	b913      	cbnz	r3, 801499a <__sfp+0x16>
 8014994:	4630      	mov	r0, r6
 8014996:	f7ff ffbd 	bl	8014914 <__sinit>
 801499a:	3648      	adds	r6, #72	; 0x48
 801499c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80149a0:	3b01      	subs	r3, #1
 80149a2:	d503      	bpl.n	80149ac <__sfp+0x28>
 80149a4:	6833      	ldr	r3, [r6, #0]
 80149a6:	b30b      	cbz	r3, 80149ec <__sfp+0x68>
 80149a8:	6836      	ldr	r6, [r6, #0]
 80149aa:	e7f7      	b.n	801499c <__sfp+0x18>
 80149ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80149b0:	b9d5      	cbnz	r5, 80149e8 <__sfp+0x64>
 80149b2:	4b16      	ldr	r3, [pc, #88]	; (8014a0c <__sfp+0x88>)
 80149b4:	60e3      	str	r3, [r4, #12]
 80149b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80149ba:	6665      	str	r5, [r4, #100]	; 0x64
 80149bc:	f000 f847 	bl	8014a4e <__retarget_lock_init_recursive>
 80149c0:	f7ff ff96 	bl	80148f0 <__sfp_lock_release>
 80149c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80149c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80149cc:	6025      	str	r5, [r4, #0]
 80149ce:	61a5      	str	r5, [r4, #24]
 80149d0:	2208      	movs	r2, #8
 80149d2:	4629      	mov	r1, r5
 80149d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80149d8:	f7fb fd46 	bl	8010468 <memset>
 80149dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80149e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80149e4:	4620      	mov	r0, r4
 80149e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149e8:	3468      	adds	r4, #104	; 0x68
 80149ea:	e7d9      	b.n	80149a0 <__sfp+0x1c>
 80149ec:	2104      	movs	r1, #4
 80149ee:	4638      	mov	r0, r7
 80149f0:	f7ff ff62 	bl	80148b8 <__sfmoreglue>
 80149f4:	4604      	mov	r4, r0
 80149f6:	6030      	str	r0, [r6, #0]
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d1d5      	bne.n	80149a8 <__sfp+0x24>
 80149fc:	f7ff ff78 	bl	80148f0 <__sfp_lock_release>
 8014a00:	230c      	movs	r3, #12
 8014a02:	603b      	str	r3, [r7, #0]
 8014a04:	e7ee      	b.n	80149e4 <__sfp+0x60>
 8014a06:	bf00      	nop
 8014a08:	08028808 	.word	0x08028808
 8014a0c:	ffff0001 	.word	0xffff0001

08014a10 <_fwalk_reent>:
 8014a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a14:	4606      	mov	r6, r0
 8014a16:	4688      	mov	r8, r1
 8014a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a1c:	2700      	movs	r7, #0
 8014a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a22:	f1b9 0901 	subs.w	r9, r9, #1
 8014a26:	d505      	bpl.n	8014a34 <_fwalk_reent+0x24>
 8014a28:	6824      	ldr	r4, [r4, #0]
 8014a2a:	2c00      	cmp	r4, #0
 8014a2c:	d1f7      	bne.n	8014a1e <_fwalk_reent+0xe>
 8014a2e:	4638      	mov	r0, r7
 8014a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a34:	89ab      	ldrh	r3, [r5, #12]
 8014a36:	2b01      	cmp	r3, #1
 8014a38:	d907      	bls.n	8014a4a <_fwalk_reent+0x3a>
 8014a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a3e:	3301      	adds	r3, #1
 8014a40:	d003      	beq.n	8014a4a <_fwalk_reent+0x3a>
 8014a42:	4629      	mov	r1, r5
 8014a44:	4630      	mov	r0, r6
 8014a46:	47c0      	blx	r8
 8014a48:	4307      	orrs	r7, r0
 8014a4a:	3568      	adds	r5, #104	; 0x68
 8014a4c:	e7e9      	b.n	8014a22 <_fwalk_reent+0x12>

08014a4e <__retarget_lock_init_recursive>:
 8014a4e:	4770      	bx	lr

08014a50 <__retarget_lock_acquire_recursive>:
 8014a50:	4770      	bx	lr

08014a52 <__retarget_lock_release_recursive>:
 8014a52:	4770      	bx	lr

08014a54 <__swhatbuf_r>:
 8014a54:	b570      	push	{r4, r5, r6, lr}
 8014a56:	460e      	mov	r6, r1
 8014a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a5c:	2900      	cmp	r1, #0
 8014a5e:	b096      	sub	sp, #88	; 0x58
 8014a60:	4614      	mov	r4, r2
 8014a62:	461d      	mov	r5, r3
 8014a64:	da07      	bge.n	8014a76 <__swhatbuf_r+0x22>
 8014a66:	2300      	movs	r3, #0
 8014a68:	602b      	str	r3, [r5, #0]
 8014a6a:	89b3      	ldrh	r3, [r6, #12]
 8014a6c:	061a      	lsls	r2, r3, #24
 8014a6e:	d410      	bmi.n	8014a92 <__swhatbuf_r+0x3e>
 8014a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a74:	e00e      	b.n	8014a94 <__swhatbuf_r+0x40>
 8014a76:	466a      	mov	r2, sp
 8014a78:	f000 f946 	bl	8014d08 <_fstat_r>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	dbf2      	blt.n	8014a66 <__swhatbuf_r+0x12>
 8014a80:	9a01      	ldr	r2, [sp, #4]
 8014a82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a8a:	425a      	negs	r2, r3
 8014a8c:	415a      	adcs	r2, r3
 8014a8e:	602a      	str	r2, [r5, #0]
 8014a90:	e7ee      	b.n	8014a70 <__swhatbuf_r+0x1c>
 8014a92:	2340      	movs	r3, #64	; 0x40
 8014a94:	2000      	movs	r0, #0
 8014a96:	6023      	str	r3, [r4, #0]
 8014a98:	b016      	add	sp, #88	; 0x58
 8014a9a:	bd70      	pop	{r4, r5, r6, pc}

08014a9c <__smakebuf_r>:
 8014a9c:	898b      	ldrh	r3, [r1, #12]
 8014a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014aa0:	079d      	lsls	r5, r3, #30
 8014aa2:	4606      	mov	r6, r0
 8014aa4:	460c      	mov	r4, r1
 8014aa6:	d507      	bpl.n	8014ab8 <__smakebuf_r+0x1c>
 8014aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014aac:	6023      	str	r3, [r4, #0]
 8014aae:	6123      	str	r3, [r4, #16]
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	6163      	str	r3, [r4, #20]
 8014ab4:	b002      	add	sp, #8
 8014ab6:	bd70      	pop	{r4, r5, r6, pc}
 8014ab8:	ab01      	add	r3, sp, #4
 8014aba:	466a      	mov	r2, sp
 8014abc:	f7ff ffca 	bl	8014a54 <__swhatbuf_r>
 8014ac0:	9900      	ldr	r1, [sp, #0]
 8014ac2:	4605      	mov	r5, r0
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	f7ff f9fb 	bl	8013ec0 <_malloc_r>
 8014aca:	b948      	cbnz	r0, 8014ae0 <__smakebuf_r+0x44>
 8014acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ad0:	059a      	lsls	r2, r3, #22
 8014ad2:	d4ef      	bmi.n	8014ab4 <__smakebuf_r+0x18>
 8014ad4:	f023 0303 	bic.w	r3, r3, #3
 8014ad8:	f043 0302 	orr.w	r3, r3, #2
 8014adc:	81a3      	strh	r3, [r4, #12]
 8014ade:	e7e3      	b.n	8014aa8 <__smakebuf_r+0xc>
 8014ae0:	4b0d      	ldr	r3, [pc, #52]	; (8014b18 <__smakebuf_r+0x7c>)
 8014ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ae4:	89a3      	ldrh	r3, [r4, #12]
 8014ae6:	6020      	str	r0, [r4, #0]
 8014ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aec:	81a3      	strh	r3, [r4, #12]
 8014aee:	9b00      	ldr	r3, [sp, #0]
 8014af0:	6163      	str	r3, [r4, #20]
 8014af2:	9b01      	ldr	r3, [sp, #4]
 8014af4:	6120      	str	r0, [r4, #16]
 8014af6:	b15b      	cbz	r3, 8014b10 <__smakebuf_r+0x74>
 8014af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014afc:	4630      	mov	r0, r6
 8014afe:	f000 f915 	bl	8014d2c <_isatty_r>
 8014b02:	b128      	cbz	r0, 8014b10 <__smakebuf_r+0x74>
 8014b04:	89a3      	ldrh	r3, [r4, #12]
 8014b06:	f023 0303 	bic.w	r3, r3, #3
 8014b0a:	f043 0301 	orr.w	r3, r3, #1
 8014b0e:	81a3      	strh	r3, [r4, #12]
 8014b10:	89a0      	ldrh	r0, [r4, #12]
 8014b12:	4305      	orrs	r5, r0
 8014b14:	81a5      	strh	r5, [r4, #12]
 8014b16:	e7cd      	b.n	8014ab4 <__smakebuf_r+0x18>
 8014b18:	080148ad 	.word	0x080148ad

08014b1c <memmove>:
 8014b1c:	4288      	cmp	r0, r1
 8014b1e:	b510      	push	{r4, lr}
 8014b20:	eb01 0402 	add.w	r4, r1, r2
 8014b24:	d902      	bls.n	8014b2c <memmove+0x10>
 8014b26:	4284      	cmp	r4, r0
 8014b28:	4623      	mov	r3, r4
 8014b2a:	d807      	bhi.n	8014b3c <memmove+0x20>
 8014b2c:	1e43      	subs	r3, r0, #1
 8014b2e:	42a1      	cmp	r1, r4
 8014b30:	d008      	beq.n	8014b44 <memmove+0x28>
 8014b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b3a:	e7f8      	b.n	8014b2e <memmove+0x12>
 8014b3c:	4402      	add	r2, r0
 8014b3e:	4601      	mov	r1, r0
 8014b40:	428a      	cmp	r2, r1
 8014b42:	d100      	bne.n	8014b46 <memmove+0x2a>
 8014b44:	bd10      	pop	{r4, pc}
 8014b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b4e:	e7f7      	b.n	8014b40 <memmove+0x24>

08014b50 <__malloc_lock>:
 8014b50:	4801      	ldr	r0, [pc, #4]	; (8014b58 <__malloc_lock+0x8>)
 8014b52:	f7ff bf7d 	b.w	8014a50 <__retarget_lock_acquire_recursive>
 8014b56:	bf00      	nop
 8014b58:	20000904 	.word	0x20000904

08014b5c <__malloc_unlock>:
 8014b5c:	4801      	ldr	r0, [pc, #4]	; (8014b64 <__malloc_unlock+0x8>)
 8014b5e:	f7ff bf78 	b.w	8014a52 <__retarget_lock_release_recursive>
 8014b62:	bf00      	nop
 8014b64:	20000904 	.word	0x20000904

08014b68 <_realloc_r>:
 8014b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b6a:	4607      	mov	r7, r0
 8014b6c:	4614      	mov	r4, r2
 8014b6e:	460e      	mov	r6, r1
 8014b70:	b921      	cbnz	r1, 8014b7c <_realloc_r+0x14>
 8014b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014b76:	4611      	mov	r1, r2
 8014b78:	f7ff b9a2 	b.w	8013ec0 <_malloc_r>
 8014b7c:	b922      	cbnz	r2, 8014b88 <_realloc_r+0x20>
 8014b7e:	f7ff f94f 	bl	8013e20 <_free_r>
 8014b82:	4625      	mov	r5, r4
 8014b84:	4628      	mov	r0, r5
 8014b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b88:	f000 f8f2 	bl	8014d70 <_malloc_usable_size_r>
 8014b8c:	42a0      	cmp	r0, r4
 8014b8e:	d20f      	bcs.n	8014bb0 <_realloc_r+0x48>
 8014b90:	4621      	mov	r1, r4
 8014b92:	4638      	mov	r0, r7
 8014b94:	f7ff f994 	bl	8013ec0 <_malloc_r>
 8014b98:	4605      	mov	r5, r0
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d0f2      	beq.n	8014b84 <_realloc_r+0x1c>
 8014b9e:	4631      	mov	r1, r6
 8014ba0:	4622      	mov	r2, r4
 8014ba2:	f7fe fc65 	bl	8013470 <memcpy>
 8014ba6:	4631      	mov	r1, r6
 8014ba8:	4638      	mov	r0, r7
 8014baa:	f7ff f939 	bl	8013e20 <_free_r>
 8014bae:	e7e9      	b.n	8014b84 <_realloc_r+0x1c>
 8014bb0:	4635      	mov	r5, r6
 8014bb2:	e7e7      	b.n	8014b84 <_realloc_r+0x1c>

08014bb4 <_raise_r>:
 8014bb4:	291f      	cmp	r1, #31
 8014bb6:	b538      	push	{r3, r4, r5, lr}
 8014bb8:	4604      	mov	r4, r0
 8014bba:	460d      	mov	r5, r1
 8014bbc:	d904      	bls.n	8014bc8 <_raise_r+0x14>
 8014bbe:	2316      	movs	r3, #22
 8014bc0:	6003      	str	r3, [r0, #0]
 8014bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc6:	bd38      	pop	{r3, r4, r5, pc}
 8014bc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bca:	b112      	cbz	r2, 8014bd2 <_raise_r+0x1e>
 8014bcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014bd0:	b94b      	cbnz	r3, 8014be6 <_raise_r+0x32>
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	f000 f830 	bl	8014c38 <_getpid_r>
 8014bd8:	462a      	mov	r2, r5
 8014bda:	4601      	mov	r1, r0
 8014bdc:	4620      	mov	r0, r4
 8014bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014be2:	f000 b817 	b.w	8014c14 <_kill_r>
 8014be6:	2b01      	cmp	r3, #1
 8014be8:	d00a      	beq.n	8014c00 <_raise_r+0x4c>
 8014bea:	1c59      	adds	r1, r3, #1
 8014bec:	d103      	bne.n	8014bf6 <_raise_r+0x42>
 8014bee:	2316      	movs	r3, #22
 8014bf0:	6003      	str	r3, [r0, #0]
 8014bf2:	2001      	movs	r0, #1
 8014bf4:	e7e7      	b.n	8014bc6 <_raise_r+0x12>
 8014bf6:	2400      	movs	r4, #0
 8014bf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bfc:	4628      	mov	r0, r5
 8014bfe:	4798      	blx	r3
 8014c00:	2000      	movs	r0, #0
 8014c02:	e7e0      	b.n	8014bc6 <_raise_r+0x12>

08014c04 <raise>:
 8014c04:	4b02      	ldr	r3, [pc, #8]	; (8014c10 <raise+0xc>)
 8014c06:	4601      	mov	r1, r0
 8014c08:	6818      	ldr	r0, [r3, #0]
 8014c0a:	f7ff bfd3 	b.w	8014bb4 <_raise_r>
 8014c0e:	bf00      	nop
 8014c10:	20000040 	.word	0x20000040

08014c14 <_kill_r>:
 8014c14:	b538      	push	{r3, r4, r5, lr}
 8014c16:	4d07      	ldr	r5, [pc, #28]	; (8014c34 <_kill_r+0x20>)
 8014c18:	2300      	movs	r3, #0
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	4608      	mov	r0, r1
 8014c1e:	4611      	mov	r1, r2
 8014c20:	602b      	str	r3, [r5, #0]
 8014c22:	f7f4 fa79 	bl	8009118 <_kill>
 8014c26:	1c43      	adds	r3, r0, #1
 8014c28:	d102      	bne.n	8014c30 <_kill_r+0x1c>
 8014c2a:	682b      	ldr	r3, [r5, #0]
 8014c2c:	b103      	cbz	r3, 8014c30 <_kill_r+0x1c>
 8014c2e:	6023      	str	r3, [r4, #0]
 8014c30:	bd38      	pop	{r3, r4, r5, pc}
 8014c32:	bf00      	nop
 8014c34:	2000090c 	.word	0x2000090c

08014c38 <_getpid_r>:
 8014c38:	f7f4 ba66 	b.w	8009108 <_getpid>

08014c3c <__sread>:
 8014c3c:	b510      	push	{r4, lr}
 8014c3e:	460c      	mov	r4, r1
 8014c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c44:	f000 f89c 	bl	8014d80 <_read_r>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	bfab      	itete	ge
 8014c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8014c50:	181b      	addge	r3, r3, r0
 8014c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c56:	bfac      	ite	ge
 8014c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c5a:	81a3      	strhlt	r3, [r4, #12]
 8014c5c:	bd10      	pop	{r4, pc}

08014c5e <__swrite>:
 8014c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c62:	461f      	mov	r7, r3
 8014c64:	898b      	ldrh	r3, [r1, #12]
 8014c66:	05db      	lsls	r3, r3, #23
 8014c68:	4605      	mov	r5, r0
 8014c6a:	460c      	mov	r4, r1
 8014c6c:	4616      	mov	r6, r2
 8014c6e:	d505      	bpl.n	8014c7c <__swrite+0x1e>
 8014c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c74:	2302      	movs	r3, #2
 8014c76:	2200      	movs	r2, #0
 8014c78:	f000 f868 	bl	8014d4c <_lseek_r>
 8014c7c:	89a3      	ldrh	r3, [r4, #12]
 8014c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c86:	81a3      	strh	r3, [r4, #12]
 8014c88:	4632      	mov	r2, r6
 8014c8a:	463b      	mov	r3, r7
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c92:	f000 b817 	b.w	8014cc4 <_write_r>

08014c96 <__sseek>:
 8014c96:	b510      	push	{r4, lr}
 8014c98:	460c      	mov	r4, r1
 8014c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c9e:	f000 f855 	bl	8014d4c <_lseek_r>
 8014ca2:	1c43      	adds	r3, r0, #1
 8014ca4:	89a3      	ldrh	r3, [r4, #12]
 8014ca6:	bf15      	itete	ne
 8014ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014cb2:	81a3      	strheq	r3, [r4, #12]
 8014cb4:	bf18      	it	ne
 8014cb6:	81a3      	strhne	r3, [r4, #12]
 8014cb8:	bd10      	pop	{r4, pc}

08014cba <__sclose>:
 8014cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cbe:	f000 b813 	b.w	8014ce8 <_close_r>
	...

08014cc4 <_write_r>:
 8014cc4:	b538      	push	{r3, r4, r5, lr}
 8014cc6:	4d07      	ldr	r5, [pc, #28]	; (8014ce4 <_write_r+0x20>)
 8014cc8:	4604      	mov	r4, r0
 8014cca:	4608      	mov	r0, r1
 8014ccc:	4611      	mov	r1, r2
 8014cce:	2200      	movs	r2, #0
 8014cd0:	602a      	str	r2, [r5, #0]
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	f7f4 fa57 	bl	8009186 <_write>
 8014cd8:	1c43      	adds	r3, r0, #1
 8014cda:	d102      	bne.n	8014ce2 <_write_r+0x1e>
 8014cdc:	682b      	ldr	r3, [r5, #0]
 8014cde:	b103      	cbz	r3, 8014ce2 <_write_r+0x1e>
 8014ce0:	6023      	str	r3, [r4, #0]
 8014ce2:	bd38      	pop	{r3, r4, r5, pc}
 8014ce4:	2000090c 	.word	0x2000090c

08014ce8 <_close_r>:
 8014ce8:	b538      	push	{r3, r4, r5, lr}
 8014cea:	4d06      	ldr	r5, [pc, #24]	; (8014d04 <_close_r+0x1c>)
 8014cec:	2300      	movs	r3, #0
 8014cee:	4604      	mov	r4, r0
 8014cf0:	4608      	mov	r0, r1
 8014cf2:	602b      	str	r3, [r5, #0]
 8014cf4:	f7f4 fa63 	bl	80091be <_close>
 8014cf8:	1c43      	adds	r3, r0, #1
 8014cfa:	d102      	bne.n	8014d02 <_close_r+0x1a>
 8014cfc:	682b      	ldr	r3, [r5, #0]
 8014cfe:	b103      	cbz	r3, 8014d02 <_close_r+0x1a>
 8014d00:	6023      	str	r3, [r4, #0]
 8014d02:	bd38      	pop	{r3, r4, r5, pc}
 8014d04:	2000090c 	.word	0x2000090c

08014d08 <_fstat_r>:
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4d07      	ldr	r5, [pc, #28]	; (8014d28 <_fstat_r+0x20>)
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	4604      	mov	r4, r0
 8014d10:	4608      	mov	r0, r1
 8014d12:	4611      	mov	r1, r2
 8014d14:	602b      	str	r3, [r5, #0]
 8014d16:	f7f4 fa5e 	bl	80091d6 <_fstat>
 8014d1a:	1c43      	adds	r3, r0, #1
 8014d1c:	d102      	bne.n	8014d24 <_fstat_r+0x1c>
 8014d1e:	682b      	ldr	r3, [r5, #0]
 8014d20:	b103      	cbz	r3, 8014d24 <_fstat_r+0x1c>
 8014d22:	6023      	str	r3, [r4, #0]
 8014d24:	bd38      	pop	{r3, r4, r5, pc}
 8014d26:	bf00      	nop
 8014d28:	2000090c 	.word	0x2000090c

08014d2c <_isatty_r>:
 8014d2c:	b538      	push	{r3, r4, r5, lr}
 8014d2e:	4d06      	ldr	r5, [pc, #24]	; (8014d48 <_isatty_r+0x1c>)
 8014d30:	2300      	movs	r3, #0
 8014d32:	4604      	mov	r4, r0
 8014d34:	4608      	mov	r0, r1
 8014d36:	602b      	str	r3, [r5, #0]
 8014d38:	f7f4 fa5d 	bl	80091f6 <_isatty>
 8014d3c:	1c43      	adds	r3, r0, #1
 8014d3e:	d102      	bne.n	8014d46 <_isatty_r+0x1a>
 8014d40:	682b      	ldr	r3, [r5, #0]
 8014d42:	b103      	cbz	r3, 8014d46 <_isatty_r+0x1a>
 8014d44:	6023      	str	r3, [r4, #0]
 8014d46:	bd38      	pop	{r3, r4, r5, pc}
 8014d48:	2000090c 	.word	0x2000090c

08014d4c <_lseek_r>:
 8014d4c:	b538      	push	{r3, r4, r5, lr}
 8014d4e:	4d07      	ldr	r5, [pc, #28]	; (8014d6c <_lseek_r+0x20>)
 8014d50:	4604      	mov	r4, r0
 8014d52:	4608      	mov	r0, r1
 8014d54:	4611      	mov	r1, r2
 8014d56:	2200      	movs	r2, #0
 8014d58:	602a      	str	r2, [r5, #0]
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	f7f4 fa56 	bl	800920c <_lseek>
 8014d60:	1c43      	adds	r3, r0, #1
 8014d62:	d102      	bne.n	8014d6a <_lseek_r+0x1e>
 8014d64:	682b      	ldr	r3, [r5, #0]
 8014d66:	b103      	cbz	r3, 8014d6a <_lseek_r+0x1e>
 8014d68:	6023      	str	r3, [r4, #0]
 8014d6a:	bd38      	pop	{r3, r4, r5, pc}
 8014d6c:	2000090c 	.word	0x2000090c

08014d70 <_malloc_usable_size_r>:
 8014d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d74:	1f18      	subs	r0, r3, #4
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	bfbc      	itt	lt
 8014d7a:	580b      	ldrlt	r3, [r1, r0]
 8014d7c:	18c0      	addlt	r0, r0, r3
 8014d7e:	4770      	bx	lr

08014d80 <_read_r>:
 8014d80:	b538      	push	{r3, r4, r5, lr}
 8014d82:	4d07      	ldr	r5, [pc, #28]	; (8014da0 <_read_r+0x20>)
 8014d84:	4604      	mov	r4, r0
 8014d86:	4608      	mov	r0, r1
 8014d88:	4611      	mov	r1, r2
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	602a      	str	r2, [r5, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	f7f4 f9dc 	bl	800914c <_read>
 8014d94:	1c43      	adds	r3, r0, #1
 8014d96:	d102      	bne.n	8014d9e <_read_r+0x1e>
 8014d98:	682b      	ldr	r3, [r5, #0]
 8014d9a:	b103      	cbz	r3, 8014d9e <_read_r+0x1e>
 8014d9c:	6023      	str	r3, [r4, #0]
 8014d9e:	bd38      	pop	{r3, r4, r5, pc}
 8014da0:	2000090c 	.word	0x2000090c

08014da4 <_init>:
 8014da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014da6:	bf00      	nop
 8014da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014daa:	bc08      	pop	{r3}
 8014dac:	469e      	mov	lr, r3
 8014dae:	4770      	bx	lr

08014db0 <_fini>:
 8014db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db2:	bf00      	nop
 8014db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014db6:	bc08      	pop	{r3}
 8014db8:	469e      	mov	lr, r3
 8014dba:	4770      	bx	lr
