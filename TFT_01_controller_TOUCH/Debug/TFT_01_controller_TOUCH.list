
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016df0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014130  08016f90  08016f90  00026f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b0c0  0802b0c0  00040218  2**0
                  CONTENTS
  4 .ARM          00000008  0802b0c0  0802b0c0  0003b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b0c8  0802b0c8  00040218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b0c8  0802b0c8  0003b0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b0cc  0802b0cc  0003b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0802b0d0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000218  0802b2e8  00040218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d8c  0802b2e8  00040d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f89c  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494c  00000000  00000000  0005fae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00064430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  00065f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3db  00000000  00000000  00067930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000288a6  00000000  00000000  00083d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009999e  00000000  00000000  000ac5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145f4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000869c  00000000  00000000  00145fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016f78 	.word	0x08016f78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08016f78 	.word	0x08016f78

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f009 ffa5 	bl	800af86 <UARTDMA_GetLineFromReceiveBuffer>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <UART_ESP_ParseLine+0x44>)
 8001048:	4618      	mov	r0, r3
 800104a:	f012 ff85 	bl	8013f58 <strtok>
 800104e:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <UART_ESP_ParseLine+0x48>)
 8001052:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001054:	f7ff f8c4 	bl	80001e0 <strcmp>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 800105e:	f000 f809 	bl	8001074 <ESP_ParseChangeRelayState>
			}
		}
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08016f90 	.word	0x08016f90
 8001070:	08016f94 	.word	0x08016f94

08001074 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001082:	4913      	ldr	r1, [pc, #76]	; (80010d0 <ESP_ParseChangeRelayState+0x5c>)
 8001084:	2000      	movs	r0, #0
 8001086:	f012 ff67 	bl	8013f58 <strtok>
 800108a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f011 fa54 	bl	8012542 <atoi>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80010a6:	490a      	ldr	r1, [pc, #40]	; (80010d0 <ESP_ParseChangeRelayState+0x5c>)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f012 ff55 	bl	8013f58 <strtok>
 80010ae:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f011 fa46 	bl	8012542 <atoi>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ba:	7bba      	ldrb	r2, [r7, #14]
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f807 	bl	80010d4 <ESP_ChangeRelayState>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08016f9c 	.word	0x08016f9c

080010d4 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10a      	bne.n	8001100 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <ESP_ChangeRelayState+0x24>
 80010f0:	2000      	movs	r0, #0
 80010f2:	f007 fe51 	bl	8008d98 <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010f6:	e064      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010f8:	2001      	movs	r0, #1
 80010fa:	f007 fe4d 	bl	8008d98 <firstSwitchTurn>
}
 80010fe:	e060      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d10a      	bne.n	800111c <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <ESP_ChangeRelayState+0x40>
 800110c:	2000      	movs	r0, #0
 800110e:	f007 fec5 	bl	8008e9c <secondSwitchTurn>
}
 8001112:	e056      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001114:	2001      	movs	r0, #1
 8001116:	f007 fec1 	bl	8008e9c <secondSwitchTurn>
}
 800111a:	e052      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d10a      	bne.n	8001138 <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <ESP_ChangeRelayState+0x5c>
 8001128:	2000      	movs	r0, #0
 800112a:	f007 ff39 	bl	8008fa0 <thirdSwitchTurn>
}
 800112e:	e048      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001130:	2001      	movs	r0, #1
 8001132:	f007 ff35 	bl	8008fa0 <thirdSwitchTurn>
}
 8001136:	e044      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b04      	cmp	r3, #4
 800113c:	d10a      	bne.n	8001154 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <ESP_ChangeRelayState+0x78>
 8001144:	2000      	movs	r0, #0
 8001146:	f007 ffad 	bl	80090a4 <fourthSwitchTurn>
}
 800114a:	e03a      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 800114c:	2001      	movs	r0, #1
 800114e:	f007 ffa9 	bl	80090a4 <fourthSwitchTurn>
}
 8001152:	e036      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d10a      	bne.n	8001170 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <ESP_ChangeRelayState+0x94>
 8001160:	2000      	movs	r0, #0
 8001162:	f008 f821 	bl	80091a8 <firstLightTurn>
}
 8001166:	e02c      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 8001168:	2001      	movs	r0, #1
 800116a:	f008 f81d 	bl	80091a8 <firstLightTurn>
}
 800116e:	e028      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b06      	cmp	r3, #6
 8001174:	d10a      	bne.n	800118c <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <ESP_ChangeRelayState+0xb0>
 800117c:	2000      	movs	r0, #0
 800117e:	f008 f891 	bl	80092a4 <secondLightTurn>
}
 8001182:	e01e      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001184:	2001      	movs	r0, #1
 8001186:	f008 f88d 	bl	80092a4 <secondLightTurn>
}
 800118a:	e01a      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d10a      	bne.n	80011a8 <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d103      	bne.n	80011a0 <ESP_ChangeRelayState+0xcc>
 8001198:	2000      	movs	r0, #0
 800119a:	f008 f901 	bl	80093a0 <thirdLightTurn>
}
 800119e:	e010      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 80011a0:	2001      	movs	r0, #1
 80011a2:	f008 f8fd 	bl	80093a0 <thirdLightTurn>
}
 80011a6:	e00c      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d109      	bne.n	80011c2 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <ESP_ChangeRelayState+0xe8>
 80011b4:	2000      	movs	r0, #0
 80011b6:	f008 f971 	bl	800949c <fourthLightTurn>
}
 80011ba:	e002      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011bc:	2001      	movs	r0, #1
 80011be:	f008 f96d 	bl	800949c <fourthLightTurn>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f9ce 	bl	8000578 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4905      	ldr	r1, [pc, #20]	; (80011f8 <ESP_SendCurrentTempInside+0x2c>)
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <ESP_SendCurrentTempInside+0x30>)
 80011e4:	f012 f864 	bl	80132b0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011e8:	4904      	ldr	r1, [pc, #16]	; (80011fc <ESP_SendCurrentTempInside+0x30>)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <ESP_SendCurrentTempInside+0x34>)
 80011ec:	f009 fefc 	bl	800afe8 <UARTDMA_Print>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08016fa0 	.word	0x08016fa0
 80011fc:	20000234 	.word	0x20000234
 8001200:	20000654 	.word	0x20000654

08001204 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f9b2 	bl	8000578 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4905      	ldr	r1, [pc, #20]	; (8001230 <ESP_SendCurrentTempOutside+0x2c>)
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <ESP_SendCurrentTempOutside+0x30>)
 800121c:	f012 f848 	bl	80132b0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <ESP_SendCurrentTempOutside+0x30>)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <ESP_SendCurrentTempOutside+0x34>)
 8001224:	f009 fee0 	bl	800afe8 <UARTDMA_Print>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08016fac 	.word	0x08016fac
 8001234:	20000234 	.word	0x20000234
 8001238:	20000654 	.word	0x20000654

0800123c <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f996 	bl	8000578 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4905      	ldr	r1, [pc, #20]	; (8001268 <ESP_SendCurrentPressure+0x2c>)
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <ESP_SendCurrentPressure+0x30>)
 8001254:	f012 f82c 	bl	80132b0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001258:	4904      	ldr	r1, [pc, #16]	; (800126c <ESP_SendCurrentPressure+0x30>)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <ESP_SendCurrentPressure+0x34>)
 800125c:	f009 fec4 	bl	800afe8 <UARTDMA_Print>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08016fb8 	.word	0x08016fb8
 800126c:	20000234 	.word	0x20000234
 8001270:	20000654 	.word	0x20000654

08001274 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4906      	ldr	r1, [pc, #24]	; (8001298 <ESP_SendCurrentWaterLvl+0x24>)
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <ESP_SendCurrentWaterLvl+0x28>)
 8001282:	f012 f815 	bl	80132b0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001286:	4905      	ldr	r1, [pc, #20]	; (800129c <ESP_SendCurrentWaterLvl+0x28>)
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <ESP_SendCurrentWaterLvl+0x2c>)
 800128a:	f009 fead 	bl	800afe8 <UARTDMA_Print>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08016fc4 	.word	0x08016fc4
 800129c:	20000234 	.word	0x20000234
 80012a0:	20000654 	.word	0x20000654

080012a4 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1acb      	subs	r3, r1, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfb8      	it	lt
 80012ca:	425b      	neglt	r3, r3
 80012cc:	429a      	cmp	r2, r3
 80012ce:	bfcc      	ite	gt
 80012d0:	2301      	movgt	r3, #1
 80012d2:	2300      	movle	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dd0b      	ble.n	8001318 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b29b      	uxth	r3, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfb8      	it	lt
 8001330:	425b      	neglt	r3, r3
 8001332:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001334:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001338:	0fda      	lsrs	r2, r3, #31
 800133a:	4413      	add	r3, r2
 800133c:	105b      	asrs	r3, r3, #1
 800133e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	da02      	bge.n	800134e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800134c:	e02e      	b.n	80013ac <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800134e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001352:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001354:	e02a      	b.n	80013ac <GFX_WriteLine+0x108>
	        if (steep) {
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	b21b      	sxth	r3, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	b211      	sxth	r1, r2
 8001366:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001368:	4618      	mov	r0, r3
 800136a:	f000 feab 	bl	80020c4 <ILI9341_WritePixel>
 800136e:	e007      	b.n	8001380 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	b21b      	sxth	r3, r3
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	b211      	sxth	r1, r2
 8001378:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fea2 	bl	80020c4 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001380:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001382:	8abb      	ldrh	r3, [r7, #20]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800138a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800138e:	2b00      	cmp	r3, #0
 8001390:	da09      	bge.n	80013a6 <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800139c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	ddd0      	ble.n	8001356 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3730      	adds	r7, #48	; 0x30
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff ff60 	bl	80012a4 <GFX_WriteLine>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff ff4a 	bl	80012a4 <GFX_WriteLine>
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d113      	bne.n	8001456 <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	dd05      	ble.n	8001442 <GFX_DrawLine+0x2a>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	8c3b      	ldrh	r3, [r7, #32]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff ffb5 	bl	80013be <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001454:	e01f      	b.n	8001496 <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d113      	bne.n	8001486 <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	dd05      	ble.n	8001472 <GFX_DrawLine+0x5a>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff ffb4 	bl	80013ec <GFX_DrawFastHLine>
}
 8001484:	e007      	b.n	8001496 <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8001486:	8c3b      	ldrh	r3, [r7, #32]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff ff07 	bl	80012a4 <GFX_WriteLine>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	4611      	mov	r1, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	460b      	mov	r3, r1
 80014ae:	80fb      	strh	r3, [r7, #6]
 80014b0:	4613      	mov	r3, r2
 80014b2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e008      	b.n	80014cc <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ba:	88ba      	ldrh	r2, [r7, #4]
 80014bc:	8c3b      	ldrh	r3, [r7, #32]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff ff7c 	bl	80013be <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <GFX_DrawFillRectangle+0x1c>
    }

}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b088      	sub	sp, #32
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	460b      	mov	r3, r1
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	4613      	mov	r3, r2
 80014f6:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	f1c3 0301 	rsb	r3, r3, #1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	03d2      	lsls	r2, r2, #15
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800151c:	e0b5      	b.n	800168a <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800151e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0e      	blt.n	8001544 <GFX_DrawCircleHelper+0x62>
            y--;
 8001526:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29b      	uxth	r3, r3
 8001530:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001532:	8b7b      	ldrh	r3, [r7, #26]
 8001534:	3302      	adds	r3, #2
 8001536:	b29b      	uxth	r3, r3
 8001538:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800153a:	8bfa      	ldrh	r2, [r7, #30]
 800153c:	8b7b      	ldrh	r3, [r7, #26]
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001544:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001548:	b29b      	uxth	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b29b      	uxth	r3, r3
 800154e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001550:	8bbb      	ldrh	r3, [r7, #28]
 8001552:	3302      	adds	r3, #2
 8001554:	b29b      	uxth	r3, r3
 8001556:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001558:	8bfa      	ldrh	r2, [r7, #30]
 800155a:	8bbb      	ldrh	r3, [r7, #28]
 800155c:	4413      	add	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01f      	beq.n	80015ac <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8b3b      	ldrh	r3, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b218      	sxth	r0, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b29a      	uxth	r2, r3
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	4413      	add	r3, r2
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21b      	sxth	r3, r3
 8001584:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001586:	4619      	mov	r1, r3
 8001588:	f000 fd9c 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8afb      	ldrh	r3, [r7, #22]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b218      	sxth	r0, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	b29a      	uxth	r2, r3
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	4413      	add	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015a6:	4619      	mov	r1, r3
 80015a8:	f000 fd8c 	bl	80020c4 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015ac:	797b      	ldrb	r3, [r7, #5]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01f      	beq.n	80015f6 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8b3b      	ldrh	r3, [r7, #24]
 80015bc:	4413      	add	r3, r2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b218      	sxth	r0, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015d0:	4619      	mov	r1, r3
 80015d2:	f000 fd77 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b218      	sxth	r0, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	8b3b      	ldrh	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015f0:	4619      	mov	r1, r3
 80015f2:	f000 fd67 	bl	80020c4 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01f      	beq.n	8001640 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8afb      	ldrh	r3, [r7, #22]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	b218      	sxth	r0, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	b29a      	uxth	r2, r3
 8001610:	8b3b      	ldrh	r3, [r7, #24]
 8001612:	4413      	add	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21b      	sxth	r3, r3
 8001618:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800161a:	4619      	mov	r1, r3
 800161c:	f000 fd52 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8b3b      	ldrh	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	b29b      	uxth	r3, r3
 800162a:	b218      	sxth	r0, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	b29a      	uxth	r2, r3
 8001630:	8afb      	ldrh	r3, [r7, #22]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21b      	sxth	r3, r3
 8001638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800163a:	4619      	mov	r1, r3
 800163c:	f000 fd42 	bl	80020c4 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01f      	beq.n	800168a <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b218      	sxth	r0, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	b29a      	uxth	r2, r3
 800165a:	8b3b      	ldrh	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	b21b      	sxth	r3, r3
 8001662:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001664:	4619      	mov	r1, r3
 8001666:	f000 fd2d 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8b3b      	ldrh	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b218      	sxth	r0, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	b29a      	uxth	r2, r3
 800167a:	8afb      	ldrh	r3, [r7, #22]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21b      	sxth	r3, r3
 8001682:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001684:	4619      	mov	r1, r3
 8001686:	f000 fd1d 	bl	80020c4 <ILI9341_WritePixel>
    while (x<y) {
 800168a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800168e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001692:	429a      	cmp	r2, r3
 8001694:	f6ff af43 	blt.w	800151e <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b088      	sub	sp, #32
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	4611      	mov	r1, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	80fb      	strh	r3, [r7, #6]
 80016b4:	4613      	mov	r3, r2
 80016b6:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f1c3 0301 	rsb	r3, r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	461a      	mov	r2, r3
 80016ca:	03d2      	lsls	r2, r2, #15
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016dc:	e073      	b.n	80017c6 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0e      	blt.n	8001704 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016f2:	8b7b      	ldrh	r3, [r7, #26]
 80016f4:	3302      	adds	r3, #2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8b7b      	ldrh	r3, [r7, #26]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001704:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001710:	8bbb      	ldrh	r3, [r7, #28]
 8001712:	3302      	adds	r3, #2
 8001714:	b29b      	uxth	r3, r3
 8001716:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001718:	8bfa      	ldrh	r2, [r7, #30]
 800171a:	8bbb      	ldrh	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	b29b      	uxth	r3, r3
 8001720:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d023      	beq.n	8001774 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800172c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	18d0      	adds	r0, r2, r3
 8001734:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	1ad1      	subs	r1, r2, r3
 800173c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001748:	441a      	add	r2, r3
 800174a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800174c:	f7ff fe37 	bl	80013be <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001750:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	1ad1      	subs	r1, r2, r3
 8001760:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800176c:	441a      	add	r2, r3
 800176e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001770:	f7ff fe25 	bl	80013be <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001774:	797b      	ldrb	r3, [r7, #5]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800177e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	1ad0      	subs	r0, r2, r3
 8001786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	1ad1      	subs	r1, r2, r3
 800178e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800179a:	441a      	add	r2, r3
 800179c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800179e:	f7ff fe0e 	bl	80013be <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80017a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	1ad0      	subs	r0, r2, r3
 80017aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	1ad1      	subs	r1, r2, r3
 80017b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017be:	441a      	add	r2, r3
 80017c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017c2:	f7ff fdfc 	bl	80013be <GFX_DrawFastVLine>
    while (x<y) {
 80017c6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	db85      	blt.n	80016de <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017f2:	8b3a      	ldrh	r2, [r7, #24]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	18d0      	adds	r0, r2, r3
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	8b3b      	ldrh	r3, [r7, #24]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	1ad2      	subs	r2, r2, r3
 8001800:	8bbb      	ldrh	r3, [r7, #28]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	f7ff fdf2 	bl	80013ec <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001808:	8b3a      	ldrh	r2, [r7, #24]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	18d0      	adds	r0, r2, r3
 800180e:	88ba      	ldrh	r2, [r7, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	8b3b      	ldrh	r3, [r7, #24]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	8bbb      	ldrh	r3, [r7, #28]
 8001820:	f7ff fde4 	bl	80013ec <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001824:	8b3a      	ldrh	r2, [r7, #24]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	18d1      	adds	r1, r2, r3
 800182a:	88ba      	ldrh	r2, [r7, #4]
 800182c:	8b3b      	ldrh	r3, [r7, #24]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	8bbb      	ldrh	r3, [r7, #28]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fdc2 	bl	80013be <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	1e58      	subs	r0, r3, #1
 8001842:	8b3a      	ldrh	r2, [r7, #24]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	18d1      	adds	r1, r2, r3
 8001848:	88ba      	ldrh	r2, [r7, #4]
 800184a:	8b3b      	ldrh	r3, [r7, #24]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	1ad2      	subs	r2, r2, r3
 8001850:	8bbb      	ldrh	r3, [r7, #28]
 8001852:	f7ff fdb4 	bl	80013be <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	18d0      	adds	r0, r2, r3
 800185c:	8b3a      	ldrh	r2, [r7, #24]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	18d1      	adds	r1, r2, r3
 8001862:	8b3a      	ldrh	r2, [r7, #24]
 8001864:	8bbb      	ldrh	r3, [r7, #28]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	f7ff fe3a 	bl	80014e2 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	441a      	add	r2, r3
 8001874:	8b3b      	ldrh	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	1e58      	subs	r0, r3, #1
 800187a:	8b3a      	ldrh	r2, [r7, #24]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	18d1      	adds	r1, r2, r3
 8001880:	8b3a      	ldrh	r2, [r7, #24]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2302      	movs	r3, #2
 8001888:	f7ff fe2b 	bl	80014e2 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800188c:	88fa      	ldrh	r2, [r7, #6]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e58      	subs	r0, r3, #1
 8001898:	88ba      	ldrh	r2, [r7, #4]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	441a      	add	r2, r3
 800189e:	8b3b      	ldrh	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	1e59      	subs	r1, r3, #1
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	8bbb      	ldrh	r3, [r7, #28]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2304      	movs	r3, #4
 80018ac:	f7ff fe19 	bl	80014e2 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018b0:	8b3a      	ldrh	r2, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	18d0      	adds	r0, r2, r3
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	441a      	add	r2, r3
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	1e59      	subs	r1, r3, #1
 80018c2:	8b3a      	ldrh	r2, [r7, #24]
 80018c4:	8bbb      	ldrh	r3, [r7, #28]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2308      	movs	r3, #8
 80018ca:	f7ff fe0a 	bl	80014e2 <GFX_DrawCircleHelper>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018d6:	b590      	push	{r4, r7, lr}
 80018d8:	b087      	sub	sp, #28
 80018da:	af02      	add	r7, sp, #8
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	4611      	mov	r1, r2
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018ec:	8c3a      	ldrh	r2, [r7, #32]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	18d0      	adds	r0, r2, r3
 80018f2:	8c3b      	ldrh	r3, [r7, #32]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	88b9      	ldrh	r1, [r7, #4]
 8001900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	460b      	mov	r3, r1
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	f7ff fdc9 	bl	800149e <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	441a      	add	r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	8c3a      	ldrh	r2, [r7, #32]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	18d1      	adds	r1, r2, r3
 800191e:	8c3b      	ldrh	r3, [r7, #32]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	88ba      	ldrh	r2, [r7, #4]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	b21b      	sxth	r3, r3
 8001930:	8c3c      	ldrh	r4, [r7, #32]
 8001932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	4622      	mov	r2, r4
 800193c:	f7ff feb1 	bl	80016a2 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001940:	8c3a      	ldrh	r2, [r7, #32]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	18d0      	adds	r0, r2, r3
 8001946:	8c3a      	ldrh	r2, [r7, #32]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	18d1      	adds	r1, r2, r3
 800194c:	8c3b      	ldrh	r3, [r7, #32]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	88ba      	ldrh	r2, [r7, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29b      	uxth	r3, r3
 800195c:	b21b      	sxth	r3, r3
 800195e:	8c3c      	ldrh	r4, [r7, #32]
 8001960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2302      	movs	r3, #2
 8001968:	4622      	mov	r2, r4
 800196a:	f7ff fe9a 	bl	80016a2 <GFX_DrawFillCircleHelper>
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
	...

08001978 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <EF_SetFont+0x1c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000278 	.word	0x20000278

08001998 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <EF_GetFontHeight+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20000278 	.word	0x20000278

080019b0 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <EF_GetFontStartChar+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	785b      	ldrb	r3, [r3, #1]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	20000278 	.word	0x20000278

080019c8 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <EF_GetFontEndChar+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	789b      	ldrb	r3, [r3, #2]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	20000278 	.word	0x20000278

080019e0 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <EF_GetFontSpaceWidth+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	78db      	ldrb	r3, [r3, #3]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000278 	.word	0x20000278

080019f8 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2bc5      	cmp	r3, #197	; 0xc5
 8001a0c:	d052      	beq.n	8001ab4 <EF_DecodePolish+0xbc>
 8001a0e:	2bc5      	cmp	r3, #197	; 0xc5
 8001a10:	f300 80e7 	bgt.w	8001be2 <EF_DecodePolish+0x1ea>
 8001a14:	2bc3      	cmp	r3, #195	; 0xc3
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x26>
 8001a18:	2bc4      	cmp	r3, #196	; 0xc4
 8001a1a:	d00a      	beq.n	8001a32 <EF_DecodePolish+0x3a>
 8001a1c:	e0e1      	b.n	8001be2 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	2b93      	cmp	r3, #147	; 0x93
 8001a22:	d002      	beq.n	8001a2a <EF_DecodePolish+0x32>
 8001a24:	2bb3      	cmp	r3, #179	; 0xb3
 8001a26:	d002      	beq.n	8001a2e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a28:	e0db      	b.n	8001be2 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a2a:	2384      	movs	r3, #132	; 0x84
 8001a2c:	e0da      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a2e:	238d      	movs	r3, #141	; 0x8d
 8001a30:	e0d8      	b.n	8001be4 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	3b84      	subs	r3, #132	; 0x84
 8001a36:	2b15      	cmp	r3, #21
 8001a38:	f200 80d0 	bhi.w	8001bdc <EF_DecodePolish+0x1e4>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <EF_DecodePolish+0x4c>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001aa9 	.word	0x08001aa9
 8001a4c:	08001aa5 	.word	0x08001aa5
 8001a50:	08001ab1 	.word	0x08001ab1
 8001a54:	08001bdd 	.word	0x08001bdd
 8001a58:	08001bdd 	.word	0x08001bdd
 8001a5c:	08001bdd 	.word	0x08001bdd
 8001a60:	08001bdd 	.word	0x08001bdd
 8001a64:	08001bdd 	.word	0x08001bdd
 8001a68:	08001bdd 	.word	0x08001bdd
 8001a6c:	08001bdd 	.word	0x08001bdd
 8001a70:	08001bdd 	.word	0x08001bdd
 8001a74:	08001bdd 	.word	0x08001bdd
 8001a78:	08001bdd 	.word	0x08001bdd
 8001a7c:	08001bdd 	.word	0x08001bdd
 8001a80:	08001bdd 	.word	0x08001bdd
 8001a84:	08001bdd 	.word	0x08001bdd
 8001a88:	08001bdd 	.word	0x08001bdd
 8001a8c:	08001bdd 	.word	0x08001bdd
 8001a90:	08001bdd 	.word	0x08001bdd
 8001a94:	08001aa1 	.word	0x08001aa1
 8001a98:	08001aad 	.word	0x08001aad
		{
		case 0x84: // Ą
			return 0x7F;
 8001a9c:	237f      	movs	r3, #127	; 0x7f
 8001a9e:	e0a1      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001aa0:	2381      	movs	r3, #129	; 0x81
 8001aa2:	e09f      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	e09d      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001aa8:	2388      	movs	r3, #136	; 0x88
 8001aaa:	e09b      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aac:	238a      	movs	r3, #138	; 0x8a
 8001aae:	e099      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001ab0:	2389      	movs	r3, #137	; 0x89
 8001ab2:	e097      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	3b81      	subs	r3, #129	; 0x81
 8001ab8:	2b3b      	cmp	r3, #59	; 0x3b
 8001aba:	f200 8091 	bhi.w	8001be0 <EF_DecodePolish+0x1e8>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <EF_DecodePolish+0xcc>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001bb5 	.word	0x08001bb5
 8001ac8:	08001bc9 	.word	0x08001bc9
 8001acc:	08001bb9 	.word	0x08001bb9
 8001ad0:	08001bcd 	.word	0x08001bcd
 8001ad4:	08001be1 	.word	0x08001be1
 8001ad8:	08001be1 	.word	0x08001be1
 8001adc:	08001be1 	.word	0x08001be1
 8001ae0:	08001be1 	.word	0x08001be1
 8001ae4:	08001be1 	.word	0x08001be1
 8001ae8:	08001be1 	.word	0x08001be1
 8001aec:	08001be1 	.word	0x08001be1
 8001af0:	08001be1 	.word	0x08001be1
 8001af4:	08001be1 	.word	0x08001be1
 8001af8:	08001be1 	.word	0x08001be1
 8001afc:	08001be1 	.word	0x08001be1
 8001b00:	08001be1 	.word	0x08001be1
 8001b04:	08001be1 	.word	0x08001be1
 8001b08:	08001be1 	.word	0x08001be1
 8001b0c:	08001be1 	.word	0x08001be1
 8001b10:	08001be1 	.word	0x08001be1
 8001b14:	08001be1 	.word	0x08001be1
 8001b18:	08001be1 	.word	0x08001be1
 8001b1c:	08001be1 	.word	0x08001be1
 8001b20:	08001be1 	.word	0x08001be1
 8001b24:	08001be1 	.word	0x08001be1
 8001b28:	08001bbd 	.word	0x08001bbd
 8001b2c:	08001bd1 	.word	0x08001bd1
 8001b30:	08001be1 	.word	0x08001be1
 8001b34:	08001be1 	.word	0x08001be1
 8001b38:	08001be1 	.word	0x08001be1
 8001b3c:	08001be1 	.word	0x08001be1
 8001b40:	08001be1 	.word	0x08001be1
 8001b44:	08001be1 	.word	0x08001be1
 8001b48:	08001be1 	.word	0x08001be1
 8001b4c:	08001be1 	.word	0x08001be1
 8001b50:	08001be1 	.word	0x08001be1
 8001b54:	08001be1 	.word	0x08001be1
 8001b58:	08001be1 	.word	0x08001be1
 8001b5c:	08001be1 	.word	0x08001be1
 8001b60:	08001be1 	.word	0x08001be1
 8001b64:	08001be1 	.word	0x08001be1
 8001b68:	08001be1 	.word	0x08001be1
 8001b6c:	08001be1 	.word	0x08001be1
 8001b70:	08001be1 	.word	0x08001be1
 8001b74:	08001be1 	.word	0x08001be1
 8001b78:	08001be1 	.word	0x08001be1
 8001b7c:	08001be1 	.word	0x08001be1
 8001b80:	08001be1 	.word	0x08001be1
 8001b84:	08001be1 	.word	0x08001be1
 8001b88:	08001be1 	.word	0x08001be1
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001be1 	.word	0x08001be1
 8001b94:	08001be1 	.word	0x08001be1
 8001b98:	08001be1 	.word	0x08001be1
 8001b9c:	08001be1 	.word	0x08001be1
 8001ba0:	08001be1 	.word	0x08001be1
 8001ba4:	08001bc1 	.word	0x08001bc1
 8001ba8:	08001bd5 	.word	0x08001bd5
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
		{
		case 0x81: // Ł
			return 0x82;
 8001bb4:	2382      	movs	r3, #130	; 0x82
 8001bb6:	e015      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bb8:	2383      	movs	r3, #131	; 0x83
 8001bba:	e013      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bbc:	2385      	movs	r3, #133	; 0x85
 8001bbe:	e011      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bc0:	2386      	movs	r3, #134	; 0x86
 8001bc2:	e00f      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bc4:	2387      	movs	r3, #135	; 0x87
 8001bc6:	e00d      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bc8:	238b      	movs	r3, #139	; 0x8b
 8001bca:	e00b      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bcc:	238c      	movs	r3, #140	; 0x8c
 8001bce:	e009      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bd0:	238e      	movs	r3, #142	; 0x8e
 8001bd2:	e007      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bd4:	238f      	movs	r3, #143	; 0x8f
 8001bd6:	e005      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bd8:	2390      	movs	r3, #144	; 0x90
 8001bda:	e003      	b.n	8001be4 <EF_DecodePolish+0x1ec>
		break;
 8001bdc:	bf00      	nop
 8001bde:	e000      	b.n	8001be2 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001be0:	bf00      	nop
	}

	return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	4603      	mov	r3, r0
 8001c04:	80bb      	strh	r3, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	807b      	strh	r3, [r7, #2]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c0e:	f7ff fecf 	bl	80019b0 <EF_GetFontStartChar>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d120      	bne.n	8001c64 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d114      	bne.n	8001c54 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c2a:	88bc      	ldrh	r4, [r7, #4]
 8001c2c:	887d      	ldrh	r5, [r7, #2]
 8001c2e:	f7ff fed7 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	0052      	lsls	r2, r2, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b299      	uxth	r1, r3
 8001c46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff fc25 	bl	800149e <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c54:	f7ff fec4 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e09c      	b.n	8001d9e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c64:	f7ff fea4 	bl	80019b0 <EF_GetFontStartChar>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d201      	bcs.n	8001c76 <EF_PutChar+0x86>
	{
		return 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e093      	b.n	8001d9e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c76:	f7ff fea7 	bl	80019c8 <EF_GetFontEndChar>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	7c7b      	ldrb	r3, [r7, #17]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <EF_PutChar+0x98>
	{
		return 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e08a      	b.n	8001d9e <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	7c7b      	ldrb	r3, [r7, #17]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6851      	ldr	r1, [r2, #4]
 8001ca2:	7c7a      	ldrb	r2, [r7, #17]
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	440a      	add	r2, r1
 8001ca8:	8852      	ldrh	r2, [r2, #2]
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	83fb      	strh	r3, [r7, #30]
 8001cb2:	e066      	b.n	8001d82 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	777b      	strb	r3, [r7, #29]
 8001cbe:	e053      	b.n	8001d68 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cc6:	7efb      	ldrb	r3, [r7, #27]
 8001cc8:	2b07      	cmp	r3, #7
 8001cca:	d905      	bls.n	8001cd8 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001ccc:	2308      	movs	r3, #8
 8001cce:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cd0:	7efb      	ldrb	r3, [r7, #27]
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	76fb      	strb	r3, [r7, #27]
 8001cd6:	e001      	b.n	8001cdc <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001cd8:	7efb      	ldrb	r3, [r7, #27]
 8001cda:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	74bb      	strb	r3, [r7, #18]
 8001ce0:	e038      	b.n	8001d54 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da15      	bge.n	8001d16 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cea:	7f7b      	ldrb	r3, [r7, #29]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	7cbb      	ldrb	r3, [r7, #18]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b218      	sxth	r0, r3
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	8bfb      	ldrh	r3, [r7, #30]
 8001d06:	4413      	add	r3, r2
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	883a      	ldrh	r2, [r7, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f000 f9d8 	bl	80020c4 <ILI9341_WritePixel>
 8001d14:	e018      	b.n	8001d48 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d114      	bne.n	8001d48 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d1e:	7f7b      	ldrb	r3, [r7, #29]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	88bb      	ldrh	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	7cbb      	ldrb	r3, [r7, #18]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b218      	sxth	r0, r3
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	8bfb      	ldrh	r3, [r7, #30]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d42:	4619      	mov	r1, r3
 8001d44:	f000 f9be 	bl	80020c4 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d48:	7cbb      	ldrb	r3, [r7, #18]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	74bb      	strb	r3, [r7, #18]
 8001d4e:	7cfb      	ldrb	r3, [r7, #19]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	74fb      	strb	r3, [r7, #19]
 8001d54:	7cba      	ldrb	r2, [r7, #18]
 8001d56:	7f3b      	ldrb	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3c2      	bcc.n	8001ce2 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d62:	7f7b      	ldrb	r3, [r7, #29]
 8001d64:	3301      	adds	r3, #1
 8001d66:	777b      	strb	r3, [r7, #29]
 8001d68:	7f7a      	ldrb	r2, [r7, #29]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da00      	bge.n	8001d76 <EF_PutChar+0x186>
 8001d74:	3307      	adds	r3, #7
 8001d76:	10db      	asrs	r3, r3, #3
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dda1      	ble.n	8001cc0 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d7c:	8bfb      	ldrh	r3, [r7, #30]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	83fb      	strh	r3, [r7, #30]
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <EF_PutChar+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8bfa      	ldrh	r2, [r7, #30]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d391      	bcc.n	8001cb4 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <EF_PutChar+0x1b8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	7c7b      	ldrb	r3, [r7, #17]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bdb0      	pop	{r4, r5, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000278 	.word	0x20000278

08001dac <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	813b      	strh	r3, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7fe fa14 	bl	80001f4 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	75fb      	strb	r3, [r7, #23]
 8001dd8:	e05a      	b.n	8001e90 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc5      	cmp	r3, #197	; 0xc5
 8001de4:	d817      	bhi.n	8001e16 <EF_PutString+0x6a>
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2bc2      	cmp	r3, #194	; 0xc2
 8001df0:	d911      	bls.n	8001e16 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	7818      	ldrb	r0, [r3, #0]
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7ff fdf7 	bl	80019f8 <EF_DecodePolish>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	3301      	adds	r3, #1
 8001e12:	75fb      	strb	r3, [r7, #23]
 8001e14:	e004      	b.n	8001e20 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e20:	897a      	ldrh	r2, [r7, #10]
 8001e22:	8abb      	ldrh	r3, [r7, #20]
 8001e24:	4413      	add	r3, r2
 8001e26:	b299      	uxth	r1, r3
 8001e28:	88fc      	ldrh	r4, [r7, #6]
 8001e2a:	893a      	ldrh	r2, [r7, #8]
 8001e2c:	7cf8      	ldrb	r0, [r7, #19]
 8001e2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4623      	mov	r3, r4
 8001e3a:	f7ff fed9 	bl	8001bf0 <EF_PutChar>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e42:	7c7b      	ldrb	r3, [r7, #17]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	8abb      	ldrh	r3, [r7, #20]
 8001e48:	4413      	add	r3, r2
 8001e4a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d113      	bne.n	8001e7c <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e54:	897a      	ldrh	r2, [r7, #10]
 8001e56:	8abb      	ldrh	r3, [r7, #20]
 8001e58:	18d4      	adds	r4, r2, r3
 8001e5a:	893d      	ldrh	r5, [r7, #8]
 8001e5c:	f7ff fdc0 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29e      	uxth	r6, r3
 8001e64:	f7ff fd98 	bl	8001998 <EF_GetFontHeight>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	4632      	mov	r2, r6
 8001e74:	4629      	mov	r1, r5
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff fb11 	bl	800149e <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e7c:	f7ff fdb0 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	8abb      	ldrh	r3, [r7, #20]
 8001e86:	4413      	add	r3, r2
 8001e88:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
 8001e90:	7dfa      	ldrb	r2, [r7, #23]
 8001e92:	7cbb      	ldrb	r3, [r7, #18]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3a0      	bcc.n	8001dda <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	b2dc      	uxtb	r4, r3
 8001e9c:	f7ff fda0 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	1ae3      	subs	r3, r4, r3
 8001ea4:	b2db      	uxtb	r3, r3
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eae <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f009 fbba 	bl	800b630 <HAL_Delay>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ece:	e014      	b.n	8001efa <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <ILI9341_SendToTFT+0x5c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d10c      	bne.n	8001efa <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <ILI9341_SendToTFT+0x5c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e7      	bne.n	8001ed0 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f00:	bf00      	nop
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <ILI9341_SendToTFT+0x5c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d0f7      	beq.n	8001f02 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	2000027c 	.word	0x2000027c

08001f24 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <ILI9341_SendComand+0x40>)
 8001f36:	f00a faeb 	bl	800c510 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <ILI9341_SendComand+0x40>)
 8001f42:	f00a fae5 	bl	800c510 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffba 	bl	8001ec4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <ILI9341_SendComand+0x40>)
 8001f58:	f00a fada 	bl	800c510 <HAL_GPIO_WritePin>
#endif
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020400 	.word	0x40020400

08001f68 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f00a fac7 	bl	800c510 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f88:	480e      	ldr	r0, [pc, #56]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001f8a:	f00a fac1 	bl	800c510 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f8e:	f107 030f 	add.w	r3, r7, #15
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff95 	bl	8001ec4 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001fa2:	f00a fab5 	bl	800c510 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f7ff ff8b 	bl	8001ec4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001fb6:	f00a faab 	bl	800c510 <HAL_GPIO_WritePin>
#endif

}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d820      	bhi.n	800201a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d816      	bhi.n	800200c <ILI9341_SetRotation+0x44>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <ILI9341_SetRotation+0x1c>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08001ffb 	.word	0x08001ffb
 8001fec:	08002001 	.word	0x08002001
 8001ff0:	08002007 	.word	0x08002007
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001ff4:	2348      	movs	r3, #72	; 0x48
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e008      	b.n	800200c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001ffa:	2328      	movs	r3, #40	; 0x28
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	e005      	b.n	800200c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8002000:	2388      	movs	r3, #136	; 0x88
 8002002:	71fb      	strb	r3, [r7, #7]
		break;
 8002004:	e002      	b.n	800200c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8002006:	23e8      	movs	r3, #232	; 0xe8
 8002008:	71fb      	strb	r3, [r7, #7]
		break;
 800200a:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 800200c:	1dfb      	adds	r3, r7, #7
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	2036      	movs	r0, #54	; 0x36
 8002014:	f7ff ffa8 	bl	8001f68 <ILI9341_SendCommandAndData>
 8002018:	e000      	b.n	800201c <ILI9341_SetRotation+0x54>
		return;
 800201a:	bf00      	nop
}
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop

08002024 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	80fb      	strh	r3, [r7, #6]
 8002036:	4603      	mov	r3, r0
 8002038:	80bb      	strh	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81fb      	strh	r3, [r7, #14]
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	883b      	ldrh	r3, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2204      	movs	r2, #4
 8002080:	4619      	mov	r1, r3
 8002082:	202a      	movs	r0, #42	; 0x2a
 8002084:	f7ff ff70 	bl	8001f68 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	b29b      	uxth	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8002098:	89bb      	ldrh	r3, [r7, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 80020a2:	89bb      	ldrh	r3, [r7, #12]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	2204      	movs	r2, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	202b      	movs	r0, #43	; 0x2b
 80020b2:	f7ff ff59 	bl	8001f68 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020b6:	202c      	movs	r0, #44	; 0x2c
 80020b8:	f7ff ff34 	bl	8001f24 <ILI9341_SendComand>

}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}

080020c4 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	460b      	mov	r3, r1
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db21      	blt.n	8002122 <ILI9341_WritePixel+0x5e>
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020e6:	da1c      	bge.n	8002122 <ILI9341_WritePixel+0x5e>
 80020e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db18      	blt.n	8002122 <ILI9341_WritePixel+0x5e>
 80020f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020f4:	2bef      	cmp	r3, #239	; 0xef
 80020f6:	dc14      	bgt.n	8002122 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020f8:	88f8      	ldrh	r0, [r7, #6]
 80020fa:	88b9      	ldrh	r1, [r7, #4]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2201      	movs	r2, #1
 8002100:	f7ff ff90 	bl	8002024 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2202      	movs	r2, #2
 800211a:	4619      	mov	r1, r3
 800211c:	202c      	movs	r0, #44	; 0x2c
 800211e:	f7ff ff23 	bl	8001f68 <ILI9341_SendCommandAndData>
	}

}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	461a      	mov	r2, r3
 8002134:	4603      	mov	r3, r0
 8002136:	81fb      	strh	r3, [r7, #14]
 8002138:	460b      	mov	r3, r1
 800213a:	81bb      	strh	r3, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002140:	89fa      	ldrh	r2, [r7, #14]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4413      	add	r3, r2
 8002146:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800214a:	dc14      	bgt.n	8002176 <ILI9341_DrawImage+0x4c>
 800214c:	89ba      	ldrh	r2, [r7, #12]
 800214e:	8b3b      	ldrh	r3, [r7, #24]
 8002150:	4413      	add	r3, r2
 8002152:	2bf0      	cmp	r3, #240	; 0xf0
 8002154:	dc0f      	bgt.n	8002176 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8002156:	8b3b      	ldrh	r3, [r7, #24]
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	89b9      	ldrh	r1, [r7, #12]
 800215c:	89f8      	ldrh	r0, [r7, #14]
 800215e:	f7ff ff61 	bl	8002024 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	8b3a      	ldrh	r2, [r7, #24]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	461a      	mov	r2, r3
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	202c      	movs	r0, #44	; 0x2c
 8002172:	f7ff fef9 	bl	8001f68 <ILI9341_SendCommandAndData>
	}
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800218a:	23f0      	movs	r3, #240	; 0xf0
 800218c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002190:	2100      	movs	r1, #0
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff ff46 	bl	8002024 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8002198:	202c      	movs	r0, #44	; 0x2c
 800219a:	f7ff fec3 	bl	8001f24 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 800219e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80021a2:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021aa:	4822      	ldr	r0, [pc, #136]	; (8002234 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f00a f9b0 	bl	800c510 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <ILI9341_ClearDisplay+0xb4>)
 80021b8:	f00a f9aa 	bl	800c510 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021bc:	e023      	b.n	8002206 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11b      	bne.n	8002206 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	330c      	adds	r3, #12
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021e0:	bf00      	nop
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d1f7      	bne.n	80021e2 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1d8      	bne.n	80021be <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800220c:	bf00      	nop
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d0f7      	beq.n	800220e <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <ILI9341_ClearDisplay+0xb4>)
 8002226:	f00a f973 	bl	800c510 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020400 	.word	0x40020400
 8002238:	2000027c 	.word	0x2000027c

0800223c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <ILI9341_Init+0x9c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <ILI9341_Init+0xa0>)
 800224c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225c:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002264:	481e      	ldr	r0, [pc, #120]	; (80022e0 <ILI9341_Init+0xa4>)
 8002266:	f00a f953 	bl	800c510 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800226a:	200a      	movs	r0, #10
 800226c:	f7ff fe1f 	bl	8001eae <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002276:	481a      	ldr	r0, [pc, #104]	; (80022e0 <ILI9341_Init+0xa4>)
 8002278:	f00a f94a 	bl	800c510 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f7ff fe16 	bl	8001eae <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002282:	e019      	b.n	80022b8 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60fa      	str	r2, [r7, #12]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 800228e:	7abb      	ldrb	r3, [r7, #10]
 8002290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002294:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8002296:	7a7a      	ldrb	r2, [r7, #9]
 8002298:	7afb      	ldrb	r3, [r7, #11]
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe63 	bl	8001f68 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 80022a2:	7a7b      	ldrb	r3, [r7, #9]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 80022aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da02      	bge.n	80022b8 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022b2:	2096      	movs	r0, #150	; 0x96
 80022b4:	f7ff fdfb 	bl	8001eae <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60fa      	str	r2, [r7, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	72fb      	strb	r3, [r7, #11]
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1dd      	bne.n	8002284 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f7ff fe7d 	bl	8001fc8 <ILI9341_SetRotation>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000027c 	.word	0x2000027c
 80022dc:	08017a74 	.word	0x08017a74
 80022e0:	40020400 	.word	0x40020400

080022e4 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f0:	480a      	ldr	r0, [pc, #40]	; (800231c <XPT2046_GetRawData+0x38>)
 80022f2:	f00a f90d 	bl	800c510 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <XPT2046_GetRawData+0x3c>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2305      	movs	r3, #5
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <XPT2046_GetRawData+0x40>)
 8002304:	4908      	ldr	r1, [pc, #32]	; (8002328 <XPT2046_GetRawData+0x44>)
 8002306:	f00d ff34 	bl	8010172 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800230a:	2201      	movs	r2, #1
 800230c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <XPT2046_GetRawData+0x38>)
 8002312:	f00a f8fd 	bl	800c510 <HAL_GPIO_WritePin>
#endif
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40020400 	.word	0x40020400
 8002320:	20000280 	.word	0x20000280
 8002324:	20000290 	.word	0x20000290
 8002328:	20000288 	.word	0x20000288

0800232c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002340:	789b      	ldrb	r3, [r3, #2]
 8002342:	b21b      	sxth	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b21b      	sxth	r3, r3
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002358:	791b      	ldrb	r3, [r3, #4]
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	b29a      	uxth	r2, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	801a      	strh	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000290 	.word	0x20000290

08002378 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	f107 030e 	add.w	r3, r7, #14
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ffcc 	bl	800232c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002394:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <XPT2046_ReadTouchPoint+0x118>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d16e      	bne.n	800247a <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800239e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8d5 	bl	8000554 <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fe f939 	bl	8000628 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4690      	mov	r8, r2
 80023bc:	4699      	mov	r9, r3
 80023be:	4b35      	ldr	r3, [pc, #212]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 80023c0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8c4 	bl	8000554 <__aeabi_i2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fe f928 	bl	8000628 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4640      	mov	r0, r8
 80023de:	4649      	mov	r1, r9
 80023e0:	f7fd ff6c 	bl	80002bc <__adddf3>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 80023ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023f2:	f7fd ff63 	bl	80002bc <__adddf3>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fbeb 	bl	8000bd8 <__aeabi_d2uiz>
 8002402:	4603      	mov	r3, r0
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800240c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f89e 	bl	8000554 <__aeabi_i2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fe f902 	bl	8000628 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4690      	mov	r8, r2
 800242a:	4699      	mov	r9, r3
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800242e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f88d 	bl	8000554 <__aeabi_i2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4620      	mov	r0, r4
 8002440:	4629      	mov	r1, r5
 8002442:	f7fe f8f1 	bl	8000628 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4640      	mov	r0, r8
 800244c:	4649      	mov	r1, r9
 800244e:	f7fd ff35 	bl	80002bc <__adddf3>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800245c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002460:	f7fd ff2c 	bl	80002bc <__adddf3>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fbb4 	bl	8000bd8 <__aeabi_d2uiz>
 8002470:	4603      	mov	r3, r0
 8002472:	b29a      	uxth	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 8002478:	e005      	b.n	8002486 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800247a:	89fa      	ldrh	r2, [r7, #14]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002480:	89ba      	ldrh	r2, [r7, #12]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	801a      	strh	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002490:	200002c9 	.word	0x200002c9
 8002494:	20000000 	.word	0x20000000

08002498 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
	uint32_t MeasureY = 0, RealY = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]

	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	74fb      	strb	r3, [r7, #19]
 80024b6:	e013      	b.n	80024e0 <XPT2046_GetTouchPoint+0x48>
	{
		AverageX += TouchSamples[0][i];
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	4a20      	ldr	r2, [pc, #128]	; (800253c <XPT2046_GetTouchPoint+0xa4>)
 80024bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c0:	461a      	mov	r2, r3
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	61fb      	str	r3, [r7, #28]
		AverageY += TouchSamples[1][i];
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <XPT2046_GetTouchPoint+0xa4>)
 80024cc:	330a      	adds	r3, #10
 80024ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d2:	461a      	mov	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	3301      	adds	r3, #1
 80024de:	74fb      	strb	r3, [r7, #19]
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d9e8      	bls.n	80024b8 <XPT2046_GetTouchPoint+0x20>
	}

	*X = AverageX / MAX_SAMPLES;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4a15      	ldr	r2, [pc, #84]	; (8002540 <XPT2046_GetTouchPoint+0xa8>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
	MeasureY = RealY; // To delete warning
	RealY = MeasureY; // To delete warning

#else
	MeasureY = AverageY / MAX_SAMPLES;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <XPT2046_GetTouchPoint+0xa8>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	60fb      	str	r3, [r7, #12]
	if (MeasureY > 120)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b78      	cmp	r3, #120	; 0x78
 8002506:	d904      	bls.n	8002512 <XPT2046_GetTouchPoint+0x7a>
	{
		RealY = 120 - (MeasureY - 120);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e009      	b.n	8002526 <XPT2046_GetTouchPoint+0x8e>
	}
	else if (MeasureY < 120)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b77      	cmp	r3, #119	; 0x77
 8002516:	d804      	bhi.n	8002522 <XPT2046_GetTouchPoint+0x8a>
	{
		RealY = 120 + (120 - MeasureY);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e001      	b.n	8002526 <XPT2046_GetTouchPoint+0x8e>
	}
	else
	{
		RealY = MeasureY; //120 = 120
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	617b      	str	r3, [r7, #20]
	}
	*Y = RealY;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	b29a      	uxth	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	801a      	strh	r2, [r3, #0]
#endif
}
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000298 	.word	0x20000298
 8002540:	cccccccd 	.word	0xcccccccd

08002544 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <XPT2046_IsTouched+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d101      	bne.n	8002556 <XPT2046_IsTouched+0x12>
		return 1;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <XPT2046_IsTouched+0x14>

	return 0;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200002c8 	.word	0x200002c8

08002568 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <XPT2046_Task+0x16c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b03      	cmp	r3, #3
 8002574:	f200 80ab 	bhi.w	80026ce <XPT2046_Task+0x166>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <XPT2046_Task+0x18>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080026c5 	.word	0x080026c5
 8002584:	08002591 	.word	0x08002591
 8002588:	08002607 	.word	0x08002607
 800258c:	08002683 	.word	0x08002683
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002590:	f009 f842 	bl	800b618 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <XPT2046_Task+0x170>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b05      	cmp	r3, #5
 800259e:	f240 8093 	bls.w	80026c8 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025a2:	f7ff fe9f 	bl	80022e4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025a6:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <XPT2046_Task+0x174>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <XPT2046_Task+0x178>)
 80025ae:	441a      	add	r2, r3
 80025b0:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <XPT2046_Task+0x174>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	330a      	adds	r3, #10
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4949      	ldr	r1, [pc, #292]	; (80026e0 <XPT2046_Task+0x178>)
 80025ba:	440b      	add	r3, r1
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f7ff feda 	bl	8002378 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80025c4:	4b45      	ldr	r3, [pc, #276]	; (80026dc <XPT2046_Task+0x174>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <XPT2046_Task+0x174>)
 80025ce:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <XPT2046_Task+0x174>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b0a      	cmp	r3, #10
 80025d6:	d105      	bne.n	80025e4 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 80025d8:	4b40      	ldr	r3, [pc, #256]	; (80026dc <XPT2046_Task+0x174>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <XPT2046_Task+0x16c>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e8:	483e      	ldr	r0, [pc, #248]	; (80026e4 <XPT2046_Task+0x17c>)
 80025ea:	f009 ff79 	bl	800c4e0 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <XPT2046_Task+0x16c>)
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025fa:	f009 f80d 	bl	800b618 <HAL_GetTick>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <XPT2046_Task+0x170>)
 8002602:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002604:	e060      	b.n	80026c8 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002606:	f009 f807 	bl	800b618 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <XPT2046_Task+0x170>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b05      	cmp	r3, #5
 8002614:	d95a      	bls.n	80026cc <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002616:	f7ff fe65 	bl	80022e4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <XPT2046_Task+0x174>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <XPT2046_Task+0x178>)
 8002622:	441a      	add	r2, r3
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <XPT2046_Task+0x174>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	330a      	adds	r3, #10
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	492c      	ldr	r1, [pc, #176]	; (80026e0 <XPT2046_Task+0x178>)
 800262e:	440b      	add	r3, r1
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7ff fea0 	bl	8002378 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <XPT2046_Task+0x174>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <XPT2046_Task+0x174>)
 8002642:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <XPT2046_Task+0x174>)
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <XPT2046_Task+0x180>)
 800264a:	fba3 1302 	umull	r1, r3, r3, r2
 800264e:	08d9      	lsrs	r1, r3, #3
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <XPT2046_Task+0x174>)
 800265e:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002664:	481f      	ldr	r0, [pc, #124]	; (80026e4 <XPT2046_Task+0x17c>)
 8002666:	f009 ff3b 	bl	800c4e0 <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002670:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <XPT2046_Task+0x16c>)
 8002672:	2203      	movs	r2, #3
 8002674:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002676:	f008 ffcf 	bl	800b618 <HAL_GetTick>
 800267a:	4603      	mov	r3, r0
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <XPT2046_Task+0x170>)
 800267e:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002680:	e024      	b.n	80026cc <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <XPT2046_Task+0x16c>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <XPT2046_Task+0x174>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 800268e:	e009      	b.n	80026a4 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <XPT2046_Task+0x184>)
 8002692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002696:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <XPT2046_Task+0x188>)
 800269a:	f993 3000 	ldrsb.w	r3, [r3]
 800269e:	4618      	mov	r0, r3
 80026a0:	f009 f97c 	bl	800b99c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <XPT2046_Task+0x188>)
 80026a6:	f993 3000 	ldrsb.w	r3, [r3]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f009 f967 	bl	800b97e <HAL_NVIC_GetPendingIRQ>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ec      	bne.n	8002690 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <XPT2046_Task+0x188>)
 80026b8:	f993 3000 	ldrsb.w	r3, [r3]
 80026bc:	4618      	mov	r0, r3
 80026be:	f009 f936 	bl	800b92e <HAL_NVIC_EnableIRQ>
		  break;
 80026c2:	e004      	b.n	80026ce <XPT2046_Task+0x166>
		  break;
 80026c4:	bf00      	nop
 80026c6:	e002      	b.n	80026ce <XPT2046_Task+0x166>
		  break;
 80026c8:	bf00      	nop
 80026ca:	e000      	b.n	80026ce <XPT2046_Task+0x166>
		  break;
 80026cc:	bf00      	nop

	  }
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200002c8 	.word	0x200002c8
 80026d8:	200002c4 	.word	0x200002c4
 80026dc:	200002c0 	.word	0x200002c0
 80026e0:	20000298 	.word	0x20000298
 80026e4:	40020000 	.word	0x40020000
 80026e8:	cccccccd 	.word	0xcccccccd
 80026ec:	40013c00 	.word	0x40013c00
 80026f0:	20000284 	.word	0x20000284

080026f4 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026f8:	2017      	movs	r0, #23
 80026fa:	f009 f926 	bl	800b94a <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026fe:	4b02      	ldr	r3, [pc, #8]	; (8002708 <XPT2046_IRQ+0x14>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200002c8 	.word	0x200002c8

0800270c <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <XPT2046_Init+0x84>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <XPT2046_Init+0x88>)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <XPT2046_Init+0x8c>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002730:	481a      	ldr	r0, [pc, #104]	; (800279c <XPT2046_Init+0x90>)
 8002732:	f009 feed 	bl	800c510 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <XPT2046_Init+0x94>)
 8002738:	2290      	movs	r2, #144	; 0x90
 800273a:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <XPT2046_Init+0x98>)
 800273e:	22d0      	movs	r2, #208	; 0xd0
 8002740:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <XPT2046_Init+0x9c>)
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002748:	f7ff fdcc 	bl	80022e4 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 800274c:	2001      	movs	r0, #1
 800274e:	f008 ff6f 	bl	800b630 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <XPT2046_Init+0x94>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	08db      	lsrs	r3, r3, #3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <XPT2046_Init+0x9c>)
 800275c:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <XPT2046_Init+0x94>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <XPT2046_Init+0x9c>)
 8002768:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <XPT2046_Init+0x98>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <XPT2046_Init+0x9c>)
 8002774:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <XPT2046_Init+0x98>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	015b      	lsls	r3, r3, #5
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <XPT2046_Init+0x9c>)
 8002780:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <XPT2046_Init+0x9c>)
 8002784:	2200      	movs	r2, #0
 8002786:	711a      	strb	r2, [r3, #4]
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000280 	.word	0x20000280
 8002794:	20000284 	.word	0x20000284
 8002798:	200002c8 	.word	0x200002c8
 800279c:	40020400 	.word	0x40020400
 80027a0:	20000285 	.word	0x20000285
 80027a4:	20000286 	.word	0x20000286
 80027a8:	20000288 	.word	0x20000288

080027ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <MX_DMA_Init+0xa8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <MX_DMA_Init+0xa8>)
 80027bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <MX_DMA_Init+0xa8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <MX_DMA_Init+0xa8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <MX_DMA_Init+0xa8>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <MX_DMA_Init+0xa8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	200b      	movs	r0, #11
 80027f0:	f009 f881 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027f4:	200b      	movs	r0, #11
 80027f6:	f009 f89a 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	200c      	movs	r0, #12
 8002800:	f009 f879 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002804:	200c      	movs	r0, #12
 8002806:	f009 f892 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2010      	movs	r0, #16
 8002810:	f009 f871 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002814:	2010      	movs	r0, #16
 8002816:	f009 f88a 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2011      	movs	r0, #17
 8002820:	f009 f869 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002824:	2011      	movs	r0, #17
 8002826:	f009 f882 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	203a      	movs	r0, #58	; 0x3a
 8002830:	f009 f861 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002834:	203a      	movs	r0, #58	; 0x3a
 8002836:	f009 f87a 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	2046      	movs	r0, #70	; 0x46
 8002840:	f009 f859 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002844:	2046      	movs	r0, #70	; 0x46
 8002846:	f009 f872 	bl	800b92e <HAL_NVIC_EnableIRQ>

}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <DS3231_Init+0x30>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002866:	2000      	movs	r0, #0
 8002868:	f000 f8ea 	bl	8002a40 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800286c:	2000      	movs	r0, #0
 800286e:	f000 f8ae 	bl	80029ce <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002872:	f000 f907 	bl	8002a84 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002876:	f000 f8cd 	bl	8002a14 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800287a:	2001      	movs	r0, #1
 800287c:	f000 f846 	bl	800290c <DS3231_SetInterruptMode>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200002cc 	.word	0x200002cc

0800288c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	4613      	mov	r3, r2
 800289a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	733b      	strb	r3, [r7, #12]
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <DS3231_SetRegByte+0x38>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	f107 020c 	add.w	r2, r7, #12
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2302      	movs	r3, #2
 80028b4:	21d0      	movs	r1, #208	; 0xd0
 80028b6:	f009 ffbb 	bl	800c830 <HAL_I2C_Master_Transmit>
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200002cc 	.word	0x200002cc

080028c8 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <DS3231_GetRegByte+0x40>)
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	1dfa      	adds	r2, r7, #7
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2301      	movs	r3, #1
 80028e0:	21d0      	movs	r1, #208	; 0xd0
 80028e2:	f009 ffa5 	bl	800c830 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <DS3231_GetRegByte+0x40>)
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	f107 020f 	add.w	r2, r7, #15
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	21d0      	movs	r1, #208	; 0xd0
 80028f8:	f00a f898 	bl	800ca2c <HAL_I2C_Master_Receive>
	return val;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200002cc 	.word	0x200002cc

0800290c <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002916:	200e      	movs	r0, #14
 8002918:	f7ff ffd6 	bl	80028c8 <DS3231_GetRegByte>
 800291c:	4603      	mov	r3, r0
 800291e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	b25a      	sxtb	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	b25b      	sxtb	r3, r3
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	b25b      	sxtb	r3, r3
 8002936:	4313      	orrs	r3, r2
 8002938:	b25b      	sxtb	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	200e      	movs	r0, #14
 8002940:	f7ff ffa4 	bl	800288c <DS3231_SetRegByte>
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002956:	200e      	movs	r0, #14
 8002958:	f7ff ffb6 	bl	80028c8 <DS3231_GetRegByte>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8002960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002964:	f023 0318 	bic.w	r3, r3, #24
 8002968:	b25a      	sxtb	r2, r3
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	b25b      	sxtb	r3, r3
 8002970:	f003 0318 	and.w	r3, r3, #24
 8002974:	b25b      	sxtb	r3, r3
 8002976:	4313      	orrs	r3, r2
 8002978:	b25b      	sxtb	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4619      	mov	r1, r3
 800297e:	200e      	movs	r0, #14
 8002980:	f7ff ff84 	bl	800288c <DS3231_SetRegByte>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002996:	200e      	movs	r0, #14
 8002998:	f7ff ff96 	bl	80028c8 <DS3231_GetRegByte>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 80029a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d102      	bne.n	80029b6 <DS3231_EnableOscillator+0x2a>
 80029b0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80029b4:	e000      	b.n	80029b8 <DS3231_EnableOscillator+0x2c>
 80029b6:	2200      	movs	r2, #0
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	200e      	movs	r0, #14
 80029c2:	f7ff ff63 	bl	800288c <DS3231_SetRegByte>
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80029d8:	200e      	movs	r0, #14
 80029da:	f7ff ff75 	bl	80028c8 <DS3231_GetRegByte>
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	b25a      	sxtb	r2, r3
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4619      	mov	r1, r3
 8002a00:	200e      	movs	r0, #14
 8002a02:	f7ff ff43 	bl	800288c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff ff80 	bl	800290c <DS3231_SetInterruptMode>
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002a1a:	200f      	movs	r0, #15
 8002a1c:	f7ff ff54 	bl	80028c8 <DS3231_GetRegByte>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f023 0302 	bic.w	r3, r3, #2
 8002a26:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f023 0302 	bic.w	r3, r3, #2
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	200f      	movs	r0, #15
 8002a34:	f7ff ff2a 	bl	800288c <DS3231_SetRegByte>
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a4a:	200e      	movs	r0, #14
 8002a4c:	f7ff ff3c 	bl	80028c8 <DS3231_GetRegByte>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	b25a      	sxtb	r2, r3
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4619      	mov	r1, r3
 8002a70:	200e      	movs	r0, #14
 8002a72:	f7ff ff0b 	bl	800288c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff ff48 	bl	800290c <DS3231_SetInterruptMode>
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f7ff ff1c 	bl	80028c8 <DS3231_GetRegByte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	200f      	movs	r0, #15
 8002aa4:	f7ff fef2 	bl	800288c <DS3231_SetRegByte>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f7ff ff07 	bl	80028c8 <DS3231_GetRegByte>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f866 	bl	8002b8e <DS3231_DecodeBCD>
 8002ac2:	4603      	mov	r3, r0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7ff fefb 	bl	80028c8 <DS3231_GetRegByte>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f85a 	bl	8002b8e <DS3231_DecodeBCD>
 8002ada:	4603      	mov	r3, r0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f7ff feef 	bl	80028c8 <DS3231_GetRegByte>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f84e 	bl	8002b8e <DS3231_DecodeBCD>
 8002af2:	4603      	mov	r3, r0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f85b 	bl	8002bc0 <DS3231_EncodeBCD>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f7ff febc 	bl	800288c <DS3231_SetRegByte>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f846 	bl	8002bc0 <DS3231_EncodeBCD>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4619      	mov	r1, r3
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f7ff fea7 	bl	800288c <DS3231_SetRegByte>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f834 	bl	8002bc0 <DS3231_EncodeBCD>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff fe95 	bl	800288c <DS3231_SetRegByte>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f822 	bl	8002bc0 <DS3231_EncodeBCD>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4619      	mov	r1, r3
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fe83 	bl	800288c <DS3231_SetRegByte>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b2db      	uxtb	r3, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <DS3231_EncodeBCD+0x40>)
 8002bce:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd2:	08d9      	lsrs	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4907      	ldr	r1, [pc, #28]	; (8002c00 <DS3231_EncodeBCD+0x40>)
 8002be4:	fba1 1303 	umull	r1, r3, r1, r3
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	cccccccd 	.word	0xcccccccd

08002c04 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002c08:	bf00      	nop
 8002c0a:	f008 fd05 	bl	800b618 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <eeprom_wait+0x1c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d9f7      	bls.n	8002c0a <eeprom_wait+0x6>
    {
    }
}
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200002d0 	.word	0x200002d0

08002c24 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002c30:	f7ff ffe8 	bl	8002c04 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	21a0      	movs	r1, #160	; 0xa0
 8002c4c:	4803      	ldr	r0, [pc, #12]	; (8002c5c <eeprom_read+0x38>)
 8002c4e:	f00a fa0d 	bl	800d06c <HAL_I2C_Mem_Read>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000374 	.word	0x20000374

08002c60 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af04      	add	r7, sp, #16
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002c6c:	f7ff ffca 	bl	8002c04 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	9102      	str	r1, [sp, #8]
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	21a0      	movs	r1, #160	; 0xa0
 8002c88:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <eeprom_write+0x48>)
 8002c8a:	f00a f8f5 	bl	800ce78 <HAL_I2C_Mem_Write>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c92:	f008 fcc1 	bl	800b618 <HAL_GetTick>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <eeprom_write+0x4c>)
 8002c9a:	6013      	str	r3, [r2, #0]

    return rc;
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000374 	.word	0x20000374
 8002cac:	200002d0 	.word	0x200002d0

08002cb0 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	460a      	mov	r2, r1
 8002cba:	71fb      	strb	r3, [r7, #7]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002cc0:	79bb      	ldrb	r3, [r7, #6]
 8002cc2:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d107      	bne.n	8002cda <EEPROM_RelayStateUpdate+0x2a>
 8002cca:	f107 030f 	add.w	r3, r7, #15
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	202e      	movs	r0, #46	; 0x2e
 8002cd4:	f7ff ffc4 	bl	8002c60 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002cd8:	e01f      	b.n	8002d1a <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d107      	bne.n	8002cf0 <EEPROM_RelayStateUpdate+0x40>
 8002ce0:	f107 030f 	add.w	r3, r7, #15
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	202f      	movs	r0, #47	; 0x2f
 8002cea:	f7ff ffb9 	bl	8002c60 <eeprom_write>
}
 8002cee:	e014      	b.n	8002d1a <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d107      	bne.n	8002d06 <EEPROM_RelayStateUpdate+0x56>
 8002cf6:	f107 030f 	add.w	r3, r7, #15
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2030      	movs	r0, #48	; 0x30
 8002d00:	f7ff ffae 	bl	8002c60 <eeprom_write>
}
 8002d04:	e009      	b.n	8002d1a <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d106      	bne.n	8002d1a <EEPROM_RelayStateUpdate+0x6a>
 8002d0c:	f107 030f 	add.w	r3, r7, #15
 8002d10:	2201      	movs	r2, #1
 8002d12:	4619      	mov	r1, r3
 8002d14:	2031      	movs	r0, #49	; 0x31
 8002d16:	f7ff ffa3 	bl	8002c60 <eeprom_write>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	71fb      	strb	r3, [r7, #7]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002d32:	79bb      	ldrb	r3, [r7, #6]
 8002d34:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <EEPROM_LightStateUpdate+0x2a>
 8002d3c:	f107 030f 	add.w	r3, r7, #15
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2033      	movs	r0, #51	; 0x33
 8002d46:	f7ff ff8b 	bl	8002c60 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002d4a:	e01f      	b.n	8002d8c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d107      	bne.n	8002d62 <EEPROM_LightStateUpdate+0x40>
 8002d52:	f107 030f 	add.w	r3, r7, #15
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2034      	movs	r0, #52	; 0x34
 8002d5c:	f7ff ff80 	bl	8002c60 <eeprom_write>
}
 8002d60:	e014      	b.n	8002d8c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d107      	bne.n	8002d78 <EEPROM_LightStateUpdate+0x56>
 8002d68:	f107 030f 	add.w	r3, r7, #15
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4619      	mov	r1, r3
 8002d70:	2035      	movs	r0, #53	; 0x35
 8002d72:	f7ff ff75 	bl	8002c60 <eeprom_write>
}
 8002d76:	e009      	b.n	8002d8c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d106      	bne.n	8002d8c <EEPROM_LightStateUpdate+0x6a>
 8002d7e:	f107 030f 	add.w	r3, r7, #15
 8002d82:	2201      	movs	r2, #1
 8002d84:	4619      	mov	r1, r3
 8002d86:	2036      	movs	r0, #54	; 0x36
 8002d88:	f7ff ff6a 	bl	8002c60 <eeprom_write>
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <EEPROM_RelayStateRead+0x24>
 8002da8:	f107 030f 	add.w	r3, r7, #15
 8002dac:	2201      	movs	r2, #1
 8002dae:	4619      	mov	r1, r3
 8002db0:	202e      	movs	r0, #46	; 0x2e
 8002db2:	f7ff ff37 	bl	8002c24 <eeprom_read>
 8002db6:	e01f      	b.n	8002df8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <EEPROM_RelayStateRead+0x3a>
 8002dbe:	f107 030f 	add.w	r3, r7, #15
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	202f      	movs	r0, #47	; 0x2f
 8002dc8:	f7ff ff2c 	bl	8002c24 <eeprom_read>
 8002dcc:	e014      	b.n	8002df8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d107      	bne.n	8002de4 <EEPROM_RelayStateRead+0x50>
 8002dd4:	f107 030f 	add.w	r3, r7, #15
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4619      	mov	r1, r3
 8002ddc:	2030      	movs	r0, #48	; 0x30
 8002dde:	f7ff ff21 	bl	8002c24 <eeprom_read>
 8002de2:	e009      	b.n	8002df8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d106      	bne.n	8002df8 <EEPROM_RelayStateRead+0x64>
 8002dea:	f107 030f 	add.w	r3, r7, #15
 8002dee:	2201      	movs	r2, #1
 8002df0:	4619      	mov	r1, r3
 8002df2:	2031      	movs	r0, #49	; 0x31
 8002df4:	f7ff ff16 	bl	8002c24 <eeprom_read>

	return RelayStan;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <EEPROM_LightStateRead+0x24>
 8002e16:	f107 030f 	add.w	r3, r7, #15
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	2033      	movs	r0, #51	; 0x33
 8002e20:	f7ff ff00 	bl	8002c24 <eeprom_read>
 8002e24:	e01f      	b.n	8002e66 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d107      	bne.n	8002e3c <EEPROM_LightStateRead+0x3a>
 8002e2c:	f107 030f 	add.w	r3, r7, #15
 8002e30:	2201      	movs	r2, #1
 8002e32:	4619      	mov	r1, r3
 8002e34:	2034      	movs	r0, #52	; 0x34
 8002e36:	f7ff fef5 	bl	8002c24 <eeprom_read>
 8002e3a:	e014      	b.n	8002e66 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <EEPROM_LightStateRead+0x50>
 8002e42:	f107 030f 	add.w	r3, r7, #15
 8002e46:	2201      	movs	r2, #1
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2035      	movs	r0, #53	; 0x35
 8002e4c:	f7ff feea 	bl	8002c24 <eeprom_read>
 8002e50:	e009      	b.n	8002e66 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d106      	bne.n	8002e66 <EEPROM_LightStateRead+0x64>
 8002e58:	f107 030f 	add.w	r3, r7, #15
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4619      	mov	r1, r3
 8002e60:	2036      	movs	r0, #54	; 0x36
 8002e62:	f7ff fedf 	bl	8002c24 <eeprom_read>

	return AktualnyStan;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002e74:	2001      	movs	r0, #1
 8002e76:	f7ff ff8d 	bl	8002d94 <EEPROM_RelayStateRead>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <EEPROM_RelayStateRestore+0x18>
 8002e80:	2005      	movs	r0, #5
 8002e82:	f007 f989 	bl	800a198 <SendComand>
 8002e86:	e002      	b.n	8002e8e <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e88:	2006      	movs	r0, #6
 8002e8a:	f007 f985 	bl	800a198 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f7ff ff80 	bl	8002d94 <EEPROM_RelayStateRead>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <EEPROM_RelayStateRestore+0x32>
 8002e9a:	2007      	movs	r0, #7
 8002e9c:	f007 f97c 	bl	800a198 <SendComand>
 8002ea0:	e002      	b.n	8002ea8 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002ea2:	2008      	movs	r0, #8
 8002ea4:	f007 f978 	bl	800a198 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f7ff ff73 	bl	8002d94 <EEPROM_RelayStateRead>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <EEPROM_RelayStateRestore+0x4c>
 8002eb4:	2009      	movs	r0, #9
 8002eb6:	f007 f96f 	bl	800a198 <SendComand>
 8002eba:	e002      	b.n	8002ec2 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002ebc:	200a      	movs	r0, #10
 8002ebe:	f007 f96b 	bl	800a198 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002ec2:	2004      	movs	r0, #4
 8002ec4:	f7ff ff66 	bl	8002d94 <EEPROM_RelayStateRead>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <EEPROM_RelayStateRestore+0x66>
 8002ece:	200b      	movs	r0, #11
 8002ed0:	f007 f962 	bl	800a198 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ed4:	e002      	b.n	8002edc <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ed6:	200c      	movs	r0, #12
 8002ed8:	f007 f95e 	bl	800a198 <SendComand>
}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff ff8c 	bl	8002e02 <EEPROM_LightStateRead>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <EEPROM_LightStateRestore+0x18>
 8002ef0:	200d      	movs	r0, #13
 8002ef2:	f007 f951 	bl	800a198 <SendComand>
 8002ef6:	e002      	b.n	8002efe <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ef8:	200e      	movs	r0, #14
 8002efa:	f007 f94d 	bl	800a198 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002efe:	2002      	movs	r0, #2
 8002f00:	f7ff ff7f 	bl	8002e02 <EEPROM_LightStateRead>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <EEPROM_LightStateRestore+0x32>
 8002f0a:	200f      	movs	r0, #15
 8002f0c:	f007 f944 	bl	800a198 <SendComand>
 8002f10:	e002      	b.n	8002f18 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002f12:	2010      	movs	r0, #16
 8002f14:	f007 f940 	bl	800a198 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f7ff ff72 	bl	8002e02 <EEPROM_LightStateRead>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <EEPROM_LightStateRestore+0x4c>
 8002f24:	2011      	movs	r0, #17
 8002f26:	f007 f937 	bl	800a198 <SendComand>
 8002f2a:	e002      	b.n	8002f32 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002f2c:	2012      	movs	r0, #18
 8002f2e:	f007 f933 	bl	800a198 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002f32:	2004      	movs	r0, #4
 8002f34:	f7ff ff65 	bl	8002e02 <EEPROM_LightStateRead>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <EEPROM_LightStateRestore+0x66>
 8002f3e:	2013      	movs	r0, #19
 8002f40:	f007 f92a 	bl	800a198 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002f44:	e002      	b.n	8002f4c <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002f46:	2014      	movs	r0, #20
 8002f48:	f007 f926 	bl	800a198 <SendComand>
}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f66:	f107 030a 	add.w	r3, r7, #10
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	2005      	movs	r0, #5
 8002f70:	f7ff fe58 	bl	8002c24 <eeprom_read>
 8002f74:	e009      	b.n	8002f8a <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d106      	bne.n	8002f8a <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f7c:	f107 030a 	add.w	r3, r7, #10
 8002f80:	2201      	movs	r2, #1
 8002f82:	4619      	mov	r1, r3
 8002f84:	200c      	movs	r0, #12
 8002f86:	f7ff fe4d 	bl	8002c24 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	e016      	b.n	8002fc2 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f94:	7abb      	ldrb	r3, [r7, #10]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e004      	b.n	8002fb6 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	72fb      	strb	r3, [r7, #11]
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d9e5      	bls.n	8002f94 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6039      	str	r1, [r7, #0]
 8002fdc:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	72fb      	strb	r3, [r7, #11]
 8002fea:	e011      	b.n	8003010 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	7abb      	ldrb	r3, [r7, #10]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b2db      	uxtb	r3, r3
 8003002:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	3301      	adds	r3, #1
 800300e:	72fb      	strb	r3, [r7, #11]
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	2b06      	cmp	r3, #6
 8003014:	d9ea      	bls.n	8002fec <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 800301c:	f107 030a 	add.w	r3, r7, #10
 8003020:	2201      	movs	r2, #1
 8003022:	4619      	mov	r1, r3
 8003024:	2005      	movs	r0, #5
 8003026:	f7ff fe1b 	bl	8002c60 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 800302a:	e009      	b.n	8003040 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d106      	bne.n	8003040 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8003032:	f107 030a 	add.w	r3, r7, #10
 8003036:	2201      	movs	r2, #1
 8003038:	4619      	mov	r1, r3
 800303a:	200c      	movs	r0, #12
 800303c:	f7ff fe10 	bl	8002c60 <eeprom_write>
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10e      	bne.n	8003080 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8003062:	f107 0309 	add.w	r3, r7, #9
 8003066:	2201      	movs	r2, #1
 8003068:	4619      	mov	r1, r3
 800306a:	2006      	movs	r0, #6
 800306c:	f7ff fdda 	bl	8002c24 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	2201      	movs	r2, #1
 8003076:	4619      	mov	r1, r3
 8003078:	2007      	movs	r0, #7
 800307a:	f7ff fdd3 	bl	8002c24 <eeprom_read>
 800307e:	e010      	b.n	80030a2 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d10d      	bne.n	80030a2 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8003086:	f107 0309 	add.w	r3, r7, #9
 800308a:	2201      	movs	r2, #1
 800308c:	4619      	mov	r1, r3
 800308e:	200d      	movs	r0, #13
 8003090:	f7ff fdc8 	bl	8002c24 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003094:	f107 0308 	add.w	r3, r7, #8
 8003098:	2201      	movs	r2, #1
 800309a:	4619      	mov	r1, r3
 800309c:	200e      	movs	r0, #14
 800309e:	f7ff fdc1 	bl	8002c24 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 80030a2:	2301      	movs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	72fb      	strb	r3, [r7, #11]
 80030aa:	e016      	b.n	80030da <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ac:	7a7b      	ldrb	r3, [r7, #9]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e004      	b.n	80030ce <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 80030d4:	7afb      	ldrb	r3, [r7, #11]
 80030d6:	3301      	adds	r3, #1
 80030d8:	72fb      	strb	r3, [r7, #11]
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d9e5      	bls.n	80030ac <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030e4:	2304      	movs	r3, #4
 80030e6:	72bb      	strb	r3, [r7, #10]
 80030e8:	e016      	b.n	8003118 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ea:	7a3b      	ldrb	r3, [r7, #8]
 80030ec:	461a      	mov	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 80030f6:	7abb      	ldrb	r3, [r7, #10]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e004      	b.n	800310c <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8003102:	7abb      	ldrb	r3, [r7, #10]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4413      	add	r3, r2
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8003112:	7abb      	ldrb	r3, [r7, #10]
 8003114:	3301      	adds	r3, #1
 8003116:	72bb      	strb	r3, [r7, #10]
 8003118:	7abb      	ldrb	r3, [r7, #10]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d9e5      	bls.n	80030ea <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 800313c:	2301      	movs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	72fb      	strb	r3, [r7, #11]
 8003144:	e011      	b.n	800316a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	7a7b      	ldrb	r3, [r7, #9]
 8003158:	4313      	orrs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003164:	7afb      	ldrb	r3, [r7, #11]
 8003166:	3301      	adds	r3, #1
 8003168:	72fb      	strb	r3, [r7, #11]
 800316a:	7afb      	ldrb	r3, [r7, #11]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d9ea      	bls.n	8003146 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003174:	2304      	movs	r3, #4
 8003176:	72bb      	strb	r3, [r7, #10]
 8003178:	e011      	b.n	800319e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 800317a:	7abb      	ldrb	r3, [r7, #10]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	7a3b      	ldrb	r3, [r7, #8]
 800318c:	4313      	orrs	r3, r2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003198:	7abb      	ldrb	r3, [r7, #10]
 800319a:	3301      	adds	r3, #1
 800319c:	72bb      	strb	r3, [r7, #10]
 800319e:	7abb      	ldrb	r3, [r7, #10]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d9ea      	bls.n	800317a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10e      	bne.n	80031c8 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 80031aa:	f107 0309 	add.w	r3, r7, #9
 80031ae:	2201      	movs	r2, #1
 80031b0:	4619      	mov	r1, r3
 80031b2:	2006      	movs	r0, #6
 80031b4:	f7ff fd54 	bl	8002c60 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	2201      	movs	r2, #1
 80031be:	4619      	mov	r1, r3
 80031c0:	2007      	movs	r0, #7
 80031c2:	f7ff fd4d 	bl	8002c60 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 80031c6:	e010      	b.n	80031ea <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d10d      	bne.n	80031ea <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 80031ce:	f107 0309 	add.w	r3, r7, #9
 80031d2:	2201      	movs	r2, #1
 80031d4:	4619      	mov	r1, r3
 80031d6:	200d      	movs	r0, #13
 80031d8:	f7ff fd42 	bl	8002c60 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	2201      	movs	r2, #1
 80031e2:	4619      	mov	r1, r3
 80031e4:	200e      	movs	r0, #14
 80031e6:	f7ff fd3b 	bl	8002c60 <eeprom_write>
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	6039      	str	r1, [r7, #0]
 80031fc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8003208:	f107 030f 	add.w	r3, r7, #15
 800320c:	2201      	movs	r2, #1
 800320e:	4619      	mov	r1, r3
 8003210:	2008      	movs	r0, #8
 8003212:	f7ff fd07 	bl	8002c24 <eeprom_read>
 8003216:	e009      	b.n	800322c <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d106      	bne.n	800322c <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 800321e:	f107 030f 	add.w	r3, r7, #15
 8003222:	2201      	movs	r2, #1
 8003224:	4619      	mov	r1, r3
 8003226:	200f      	movs	r0, #15
 8003228:	f7ff fcfc 	bl	8002c24 <eeprom_read>
	}

	*hourOn = TempHour;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	701a      	strb	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	6039      	str	r1, [r7, #0]
 8003244:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003250:	f107 030f 	add.w	r3, r7, #15
 8003254:	2201      	movs	r2, #1
 8003256:	4619      	mov	r1, r3
 8003258:	2009      	movs	r0, #9
 800325a:	f7ff fce3 	bl	8002c24 <eeprom_read>
 800325e:	e009      	b.n	8003274 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d106      	bne.n	8003274 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003266:	f107 030f 	add.w	r3, r7, #15
 800326a:	2201      	movs	r2, #1
 800326c:	4619      	mov	r1, r3
 800326e:	2010      	movs	r0, #16
 8003270:	f7ff fcd8 	bl	8002c24 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	701a      	strb	r2, [r3, #0]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	6039      	str	r1, [r7, #0]
 800328c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d107      	bne.n	80032a8 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003298:	f107 030f 	add.w	r3, r7, #15
 800329c:	2201      	movs	r2, #1
 800329e:	4619      	mov	r1, r3
 80032a0:	200a      	movs	r0, #10
 80032a2:	f7ff fcbf 	bl	8002c24 <eeprom_read>
 80032a6:	e009      	b.n	80032bc <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d106      	bne.n	80032bc <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 80032ae:	f107 030f 	add.w	r3, r7, #15
 80032b2:	2201      	movs	r2, #1
 80032b4:	4619      	mov	r1, r3
 80032b6:	2011      	movs	r0, #17
 80032b8:	f7ff fcb4 	bl	8002c24 <eeprom_read>
	}

	*hourOff = TempHour;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	701a      	strb	r2, [r3, #0]

}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	6039      	str	r1, [r7, #0]
 80032d4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032e0:	f107 030f 	add.w	r3, r7, #15
 80032e4:	2201      	movs	r2, #1
 80032e6:	4619      	mov	r1, r3
 80032e8:	200b      	movs	r0, #11
 80032ea:	f7ff fc9b 	bl	8002c24 <eeprom_read>
 80032ee:	e009      	b.n	8003304 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d106      	bne.n	8003304 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032f6:	f107 030f 	add.w	r3, r7, #15
 80032fa:	2201      	movs	r2, #1
 80032fc:	4619      	mov	r1, r3
 80032fe:	2012      	movs	r0, #18
 8003300:	f7ff fc90 	bl	8002c24 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	701a      	strb	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	460a      	mov	r2, r1
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	4613      	mov	r3, r2
 8003320:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8003322:	79bb      	ldrb	r3, [r7, #6]
 8003324:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <EEPROM_ScheduleHourOnUpdate+0x2a>
 800332c:	f107 030f 	add.w	r3, r7, #15
 8003330:	2201      	movs	r2, #1
 8003332:	4619      	mov	r1, r3
 8003334:	2008      	movs	r0, #8
 8003336:	f7ff fc93 	bl	8002c60 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 800333a:	e009      	b.n	8003350 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d106      	bne.n	8003350 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003342:	f107 030f 	add.w	r3, r7, #15
 8003346:	2201      	movs	r2, #1
 8003348:	4619      	mov	r1, r3
 800334a:	200f      	movs	r0, #15
 800334c:	f7ff fc88 	bl	8002c60 <eeprom_write>
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	460a      	mov	r2, r1
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	4613      	mov	r3, r2
 8003366:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003368:	79bb      	ldrb	r3, [r7, #6]
 800336a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003372:	f107 030f 	add.w	r3, r7, #15
 8003376:	2201      	movs	r2, #1
 8003378:	4619      	mov	r1, r3
 800337a:	2009      	movs	r0, #9
 800337c:	f7ff fc70 	bl	8002c60 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003380:	e009      	b.n	8003396 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d106      	bne.n	8003396 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003388:	f107 030f 	add.w	r3, r7, #15
 800338c:	2201      	movs	r2, #1
 800338e:	4619      	mov	r1, r3
 8003390:	2010      	movs	r0, #16
 8003392:	f7ff fc65 	bl	8002c60 <eeprom_write>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	460a      	mov	r2, r1
 80033a8:	71fb      	strb	r3, [r7, #7]
 80033aa:	4613      	mov	r3, r2
 80033ac:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 80033ae:	79bb      	ldrb	r3, [r7, #6]
 80033b0:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <EEPROM_ScheduleHourOffUpdate+0x2a>
 80033b8:	f107 030f 	add.w	r3, r7, #15
 80033bc:	2201      	movs	r2, #1
 80033be:	4619      	mov	r1, r3
 80033c0:	200a      	movs	r0, #10
 80033c2:	f7ff fc4d 	bl	8002c60 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 80033c6:	e009      	b.n	80033dc <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d106      	bne.n	80033dc <EEPROM_ScheduleHourOffUpdate+0x3e>
 80033ce:	f107 030f 	add.w	r3, r7, #15
 80033d2:	2201      	movs	r2, #1
 80033d4:	4619      	mov	r1, r3
 80033d6:	2011      	movs	r0, #17
 80033d8:	f7ff fc42 	bl	8002c60 <eeprom_write>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	71fb      	strb	r3, [r7, #7]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80033f4:	79bb      	ldrb	r3, [r7, #6]
 80033f6:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80033fe:	f107 030f 	add.w	r3, r7, #15
 8003402:	2201      	movs	r2, #1
 8003404:	4619      	mov	r1, r3
 8003406:	200b      	movs	r0, #11
 8003408:	f7ff fc2a 	bl	8002c60 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 800340c:	e009      	b.n	8003422 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d106      	bne.n	8003422 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 8003414:	f107 030f 	add.w	r3, r7, #15
 8003418:	2201      	movs	r2, #1
 800341a:	4619      	mov	r1, r3
 800341c:	2012      	movs	r0, #18
 800341e:	f7ff fc1f 	bl	8002c60 <eeprom_write>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <EEPROM_ActivitiesTimeRead>:

//
// ACTIVITIES DURATION TIME READ
uint32_t EEPROM_ActivitiesTimeRead(uint8_t NrOfActivities)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	73fb      	strb	r3, [r7, #15]
	uint32_t ActivitiesDurationX10Seconds = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
	if(1 == ActivitiesNumber) // if feeding
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d106      	bne.n	8003450 <EEPROM_ActivitiesTimeRead+0x26>
	{
		eeprom_read(EEPROM_ADR_ACTIVITIES_IN_10S, &ActivitiesDurationX10Seconds, sizeof(ActivitiesDurationX10Seconds));
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	2204      	movs	r2, #4
 8003448:	4619      	mov	r1, r3
 800344a:	2038      	movs	r0, #56	; 0x38
 800344c:	f7ff fbea 	bl	8002c24 <eeprom_read>
	}
	return ActivitiesDurationX10Seconds * 10;
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <EEPROM_ActivitiesTimeUpdate>:


//
// ACTIVITIES DURATION TIME UPDATE
void EEPROM_ActivitiesTimeUpdate(uint8_t NrOfActivities, uint32_t TimeInSeconds)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	73fb      	strb	r3, [r7, #15]
	uint32_t Time = (TimeInSeconds/10);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <EEPROM_ActivitiesTimeUpdate+0x38>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	60bb      	str	r3, [r7, #8]

	if( 1 == ActivitiesNumber) // if feeding
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d106      	bne.n	8003494 <EEPROM_ActivitiesTimeUpdate+0x30>
	{
		eeprom_write(EEPROM_ADR_ACTIVITIES_IN_10S, &Time, sizeof(Time));
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	2204      	movs	r2, #4
 800348c:	4619      	mov	r1, r3
 800348e:	2038      	movs	r0, #56	; 0x38
 8003490:	f7ff fbe6 	bl	8002c60 <eeprom_write>
	}

}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	cccccccd 	.word	0xcccccccd

080034a0 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80034a6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80034aa:	f7fe fe69 	bl	8002180 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 80034ae:	238c      	movs	r3, #140	; 0x8c
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	23f0      	movs	r3, #240	; 0xf0
 80034b4:	4aae      	ldr	r2, [pc, #696]	; (8003770 <system_init+0x2d0>)
 80034b6:	2132      	movs	r1, #50	; 0x32
 80034b8:	201e      	movs	r0, #30
 80034ba:	f7fe fe36 	bl	800212a <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80034be:	48ad      	ldr	r0, [pc, #692]	; (8003774 <system_init+0x2d4>)
 80034c0:	f7fe fa5a 	bl	8001978 <EF_SetFont>
	  sprintf((char*)MsgFunctions, "Inicjalizacja...");
 80034c4:	49ac      	ldr	r1, [pc, #688]	; (8003778 <system_init+0x2d8>)
 80034c6:	48ad      	ldr	r0, [pc, #692]	; (800377c <system_init+0x2dc>)
 80034c8:	f00f fef2 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80034cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	220a      	movs	r2, #10
 80034da:	213c      	movs	r1, #60	; 0x3c
 80034dc:	48a7      	ldr	r0, [pc, #668]	; (800377c <system_init+0x2dc>)
 80034de:	f7fe fc65 	bl	8001dac <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 80034e2:	f008 f899 	bl	800b618 <HAL_GetTick>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4aa5      	ldr	r2, [pc, #660]	; (8003780 <system_init+0x2e0>)
 80034ea:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 80034ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2305      	movs	r3, #5
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2314      	movs	r3, #20
 80034f8:	2214      	movs	r2, #20
 80034fa:	21be      	movs	r1, #190	; 0xbe
 80034fc:	203c      	movs	r0, #60	; 0x3c
 80034fe:	f7fe f96d 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8003502:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	2305      	movs	r3, #5
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2314      	movs	r3, #20
 800350e:	2214      	movs	r2, #20
 8003510:	21be      	movs	r1, #190	; 0xbe
 8003512:	205a      	movs	r0, #90	; 0x5a
 8003514:	f7fe f962 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003518:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2305      	movs	r3, #5
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2314      	movs	r3, #20
 8003524:	2214      	movs	r2, #20
 8003526:	21be      	movs	r1, #190	; 0xbe
 8003528:	2078      	movs	r0, #120	; 0x78
 800352a:	f7fe f957 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800352e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2305      	movs	r3, #5
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2314      	movs	r3, #20
 800353a:	2214      	movs	r2, #20
 800353c:	21be      	movs	r1, #190	; 0xbe
 800353e:	2096      	movs	r0, #150	; 0x96
 8003540:	f7fe f94c 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003544:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2305      	movs	r3, #5
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2314      	movs	r3, #20
 8003550:	2214      	movs	r2, #20
 8003552:	21be      	movs	r1, #190	; 0xbe
 8003554:	20b4      	movs	r0, #180	; 0xb4
 8003556:	f7fe f941 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 800355a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2305      	movs	r3, #5
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2314      	movs	r3, #20
 8003566:	2214      	movs	r2, #20
 8003568:	21be      	movs	r1, #190	; 0xbe
 800356a:	20d2      	movs	r0, #210	; 0xd2
 800356c:	f7fe f936 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003570:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2305      	movs	r3, #5
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2314      	movs	r3, #20
 800357c:	2214      	movs	r2, #20
 800357e:	21be      	movs	r1, #190	; 0xbe
 8003580:	20f0      	movs	r0, #240	; 0xf0
 8003582:	f7fe f92b 	bl	80017dc <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 8003586:	f008 f847 	bl	800b618 <HAL_GetTick>
 800358a:	4603      	mov	r3, r0
 800358c:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <system_init+0x2e0>)
 800358e:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8003590:	487c      	ldr	r0, [pc, #496]	; (8003784 <system_init+0x2e4>)
 8003592:	f7fe f9f1 	bl	8001978 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003596:	20c8      	movs	r0, #200	; 0xc8
 8003598:	f002 fadc 	bl	8005b54 <initWait>
	  	  LastTime = HAL_GetTick();
 800359c:	f008 f83c 	bl	800b618 <HAL_GetTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4a77      	ldr	r2, [pc, #476]	; (8003780 <system_init+0x2e0>)
 80035a4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80035a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2305      	movs	r3, #5
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2314      	movs	r3, #20
 80035b2:	2214      	movs	r2, #20
 80035b4:	21be      	movs	r1, #190	; 0xbe
 80035b6:	203c      	movs	r0, #60	; 0x3c
 80035b8:	f7fe f98d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 80035bc:	2201      	movs	r2, #1
 80035be:	4972      	ldr	r1, [pc, #456]	; (8003788 <system_init+0x2e8>)
 80035c0:	2001      	movs	r0, #1
 80035c2:	f7ff fb2f 	bl	8002c24 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 80035c6:	2025      	movs	r0, #37	; 0x25
 80035c8:	f006 fde6 	bl	800a198 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035cc:	486f      	ldr	r0, [pc, #444]	; (800378c <system_init+0x2ec>)
 80035ce:	f007 fd43 	bl	800b058 <UARTDMA_TransmitEvent>

		  sprintf((char*)MsgFunctions, "Akt. inf. o ledach...    ");
 80035d2:	496f      	ldr	r1, [pc, #444]	; (8003790 <system_init+0x2f0>)
 80035d4:	4869      	ldr	r0, [pc, #420]	; (800377c <system_init+0x2dc>)
 80035d6:	f00f fe6b 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035da:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	22dc      	movs	r2, #220	; 0xdc
 80035e8:	2114      	movs	r1, #20
 80035ea:	4864      	ldr	r0, [pc, #400]	; (800377c <system_init+0x2dc>)
 80035ec:	f7fe fbde 	bl	8001dac <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035f0:	20c8      	movs	r0, #200	; 0xc8
 80035f2:	f002 faaf 	bl	8005b54 <initWait>
	  	  	  LastTime = HAL_GetTick();
 80035f6:	f008 f80f 	bl	800b618 <HAL_GetTick>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a60      	ldr	r2, [pc, #384]	; (8003780 <system_init+0x2e0>)
 80035fe:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003600:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2305      	movs	r3, #5
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2314      	movs	r3, #20
 800360c:	2214      	movs	r2, #20
 800360e:	21be      	movs	r1, #190	; 0xbe
 8003610:	205a      	movs	r0, #90	; 0x5a
 8003612:	f7fe f960 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003616:	201b      	movs	r0, #27
 8003618:	f006 fdbe 	bl	800a198 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 800361c:	f7ff fc28 	bl	8002e70 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003620:	485a      	ldr	r0, [pc, #360]	; (800378c <system_init+0x2ec>)
 8003622:	f007 fd19 	bl	800b058 <UARTDMA_TransmitEvent>

		  sprintf((char*)MsgFunctions, "Akt. inf. o przekaźnikach...  ");
 8003626:	495b      	ldr	r1, [pc, #364]	; (8003794 <system_init+0x2f4>)
 8003628:	4854      	ldr	r0, [pc, #336]	; (800377c <system_init+0x2dc>)
 800362a:	f00f fe41 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800362e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2301      	movs	r3, #1
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	22dc      	movs	r2, #220	; 0xdc
 800363c:	2114      	movs	r1, #20
 800363e:	484f      	ldr	r0, [pc, #316]	; (800377c <system_init+0x2dc>)
 8003640:	f7fe fbb4 	bl	8001dac <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003644:	20c8      	movs	r0, #200	; 0xc8
 8003646:	f002 fa85 	bl	8005b54 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800364a:	f007 ffe5 	bl	800b618 <HAL_GetTick>
 800364e:	4603      	mov	r3, r0
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <system_init+0x2e0>)
 8003652:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003654:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2305      	movs	r3, #5
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2314      	movs	r3, #20
 8003660:	2214      	movs	r2, #20
 8003662:	21be      	movs	r1, #190	; 0xbe
 8003664:	2078      	movs	r0, #120	; 0x78
 8003666:	f7fe f936 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 800366a:	2004      	movs	r0, #4
 800366c:	f006 fd94 	bl	800a198 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 8003670:	2001      	movs	r0, #1
 8003672:	f004 ff8b 	bl	800858c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003676:	20c8      	movs	r0, #200	; 0xc8
 8003678:	f002 fa6c 	bl	8005b54 <initWait>
			  LastTime = HAL_GetTick();
 800367c:	f007 ffcc 	bl	800b618 <HAL_GetTick>
 8003680:	4603      	mov	r3, r0
 8003682:	4a3f      	ldr	r2, [pc, #252]	; (8003780 <system_init+0x2e0>)
 8003684:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 8003686:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	2305      	movs	r3, #5
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2314      	movs	r3, #20
 8003692:	2214      	movs	r2, #20
 8003694:	21be      	movs	r1, #190	; 0xbe
 8003696:	2096      	movs	r0, #150	; 0x96
 8003698:	f7fe f91d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 800369c:	f7ff fc20 	bl	8002ee0 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80036a0:	483a      	ldr	r0, [pc, #232]	; (800378c <system_init+0x2ec>)
 80036a2:	f007 fcd9 	bl	800b058 <UARTDMA_TransmitEvent>

		  sprintf((char*)MsgFunctions, "Akt. inf. o światlach...    ");
 80036a6:	493c      	ldr	r1, [pc, #240]	; (8003798 <system_init+0x2f8>)
 80036a8:	4834      	ldr	r0, [pc, #208]	; (800377c <system_init+0x2dc>)
 80036aa:	f00f fe01 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80036ae:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2301      	movs	r3, #1
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	22dc      	movs	r2, #220	; 0xdc
 80036bc:	2114      	movs	r1, #20
 80036be:	482f      	ldr	r0, [pc, #188]	; (800377c <system_init+0x2dc>)
 80036c0:	f7fe fb74 	bl	8001dac <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036c4:	20c8      	movs	r0, #200	; 0xc8
 80036c6:	f002 fa45 	bl	8005b54 <initWait>
			  LastTime = HAL_GetTick();
 80036ca:	f007 ffa5 	bl	800b618 <HAL_GetTick>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <system_init+0x2e0>)
 80036d2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 80036d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	2305      	movs	r3, #5
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2314      	movs	r3, #20
 80036e0:	2214      	movs	r2, #20
 80036e2:	21be      	movs	r1, #190	; 0xbe
 80036e4:	20b4      	movs	r0, #180	; 0xb4
 80036e6:	f7fe f8f6 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 80036ea:	2003      	movs	r0, #3
 80036ec:	f006 fd54 	bl	800a198 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 80036f0:	2002      	movs	r0, #2
 80036f2:	f004 ff4b 	bl	800858c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036f6:	20c8      	movs	r0, #200	; 0xc8
 80036f8:	f002 fa2c 	bl	8005b54 <initWait>
			  LastTime = HAL_GetTick();
 80036fc:	f007 ff8c 	bl	800b618 <HAL_GetTick>
 8003700:	4603      	mov	r3, r0
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <system_init+0x2e0>)
 8003704:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003706:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2305      	movs	r3, #5
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2314      	movs	r3, #20
 8003712:	2214      	movs	r2, #20
 8003714:	21be      	movs	r1, #190	; 0xbe
 8003716:	20d2      	movs	r0, #210	; 0xd2
 8003718:	f7fe f8dd 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800371c:	2015      	movs	r0, #21
 800371e:	f006 fd3b 	bl	800a198 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003722:	20c8      	movs	r0, #200	; 0xc8
 8003724:	f002 fa16 	bl	8005b54 <initWait>
			  LastTime = HAL_GetTick();
 8003728:	f007 ff76 	bl	800b618 <HAL_GetTick>
 800372c:	4603      	mov	r3, r0
 800372e:	4a14      	ldr	r2, [pc, #80]	; (8003780 <system_init+0x2e0>)
 8003730:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8003732:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	2305      	movs	r3, #5
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2314      	movs	r3, #20
 800373e:	2214      	movs	r2, #20
 8003740:	21be      	movs	r1, #190	; 0xbe
 8003742:	20f0      	movs	r0, #240	; 0xf0
 8003744:	f7fe f8c7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003748:	2016      	movs	r0, #22
 800374a:	f006 fd25 	bl	800a198 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800374e:	480f      	ldr	r0, [pc, #60]	; (800378c <system_init+0x2ec>)
 8003750:	f007 fc82 	bl	800b058 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003754:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003758:	f002 f9fc 	bl	8005b54 <initWait>
			  LastTime = HAL_GetTick();
 800375c:	f007 ff5c 	bl	800b618 <HAL_GetTick>
 8003760:	4603      	mov	r3, r0
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <system_init+0x2e0>)
 8003764:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8003766:	2301      	movs	r3, #1
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	08017ae4 	.word	0x08017ae4
 8003774:	0802abac 	.word	0x0802abac
 8003778:	08016fd0 	.word	0x08016fd0
 800377c:	200002d8 	.word	0x200002d8
 8003780:	2000031c 	.word	0x2000031c
 8003784:	08028c34 	.word	0x08028c34
 8003788:	20000034 	.word	0x20000034
 800378c:	20000488 	.word	0x20000488
 8003790:	08016fe4 	.word	0x08016fe4
 8003794:	08017000 	.word	0x08017000
 8003798:	08017020 	.word	0x08017020

0800379c <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80037a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	460b      	mov	r3, r1
 80037ae:	ed87 1a01 	vstr	s2, [r7, #4]
 80037b2:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80037b4:	f24c 6018 	movw	r0, #50712	; 0xc618
 80037b8:	f7fe fce2 	bl	8002180 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 80037bc:	2003      	movs	r0, #3
 80037be:	f006 fceb 	bl	800a198 <SendComand>
	  SendComand(UCMD_PRES_1);
 80037c2:	2004      	movs	r0, #4
 80037c4:	f006 fce8 	bl	800a198 <SendComand>
	  SendComand(UCMD_TEMP_2);
 80037c8:	201b      	movs	r0, #27
 80037ca:	f006 fce5 	bl	800a198 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 80037ce:	f7ff f97b 	bl	8002ac8 <DS3231_GetHour>
 80037d2:	4603      	mov	r3, r0
 80037d4:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 80037d6:	f7ff f983 	bl	8002ae0 <DS3231_GetMinute>
 80037da:	4603      	mov	r3, r0
 80037dc:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037de:	4881      	ldr	r0, [pc, #516]	; (80039e4 <showCurrentParameters+0x248>)
 80037e0:	f7fe f8ca 	bl	8001978 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)MsgFunctions, "-=PARAMETRY=-");
 80037e4:	4980      	ldr	r1, [pc, #512]	; (80039e8 <showCurrentParameters+0x24c>)
 80037e6:	4881      	ldr	r0, [pc, #516]	; (80039ec <showCurrentParameters+0x250>)
 80037e8:	f00f fd62 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037ec:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80037fa:	220a      	movs	r2, #10
 80037fc:	212f      	movs	r1, #47	; 0x2f
 80037fe:	487b      	ldr	r0, [pc, #492]	; (80039ec <showCurrentParameters+0x250>)
 8003800:	f7fe fad4 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003804:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2329      	movs	r3, #41	; 0x29
 800380c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003810:	2129      	movs	r1, #41	; 0x29
 8003812:	2000      	movs	r0, #0
 8003814:	f7fd fe00 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003818:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	232b      	movs	r3, #43	; 0x2b
 8003820:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003824:	212b      	movs	r1, #43	; 0x2b
 8003826:	2000      	movs	r0, #0
 8003828:	f7fd fdf6 	bl	8001418 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)MsgFunctions, "Czas: 0%d : 0%d", CHour, CMinute);
 800382c:	7ffb      	ldrb	r3, [r7, #31]
 800382e:	2b09      	cmp	r3, #9
 8003830:	d809      	bhi.n	8003846 <showCurrentParameters+0xaa>
 8003832:	7fbb      	ldrb	r3, [r7, #30]
 8003834:	2b09      	cmp	r3, #9
 8003836:	d806      	bhi.n	8003846 <showCurrentParameters+0xaa>
 8003838:	7ffa      	ldrb	r2, [r7, #31]
 800383a:	7fbb      	ldrb	r3, [r7, #30]
 800383c:	496c      	ldr	r1, [pc, #432]	; (80039f0 <showCurrentParameters+0x254>)
 800383e:	486b      	ldr	r0, [pc, #428]	; (80039ec <showCurrentParameters+0x250>)
 8003840:	f00f fd36 	bl	80132b0 <siprintf>
 8003844:	e019      	b.n	800387a <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)MsgFunctions, "Czas: 0%d : %d", CHour, CMinute);
 8003846:	7ffb      	ldrb	r3, [r7, #31]
 8003848:	2b09      	cmp	r3, #9
 800384a:	d806      	bhi.n	800385a <showCurrentParameters+0xbe>
 800384c:	7ffa      	ldrb	r2, [r7, #31]
 800384e:	7fbb      	ldrb	r3, [r7, #30]
 8003850:	4968      	ldr	r1, [pc, #416]	; (80039f4 <showCurrentParameters+0x258>)
 8003852:	4866      	ldr	r0, [pc, #408]	; (80039ec <showCurrentParameters+0x250>)
 8003854:	f00f fd2c 	bl	80132b0 <siprintf>
 8003858:	e00f      	b.n	800387a <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)MsgFunctions, "Czas: %d : 0%d", CHour, CMinute);
 800385a:	7fbb      	ldrb	r3, [r7, #30]
 800385c:	2b09      	cmp	r3, #9
 800385e:	d806      	bhi.n	800386e <showCurrentParameters+0xd2>
 8003860:	7ffa      	ldrb	r2, [r7, #31]
 8003862:	7fbb      	ldrb	r3, [r7, #30]
 8003864:	4964      	ldr	r1, [pc, #400]	; (80039f8 <showCurrentParameters+0x25c>)
 8003866:	4861      	ldr	r0, [pc, #388]	; (80039ec <showCurrentParameters+0x250>)
 8003868:	f00f fd22 	bl	80132b0 <siprintf>
 800386c:	e005      	b.n	800387a <showCurrentParameters+0xde>
	  else sprintf((char*)MsgFunctions, "Czas: %d : %d", CHour, CMinute);
 800386e:	7ffa      	ldrb	r2, [r7, #31]
 8003870:	7fbb      	ldrb	r3, [r7, #30]
 8003872:	4962      	ldr	r1, [pc, #392]	; (80039fc <showCurrentParameters+0x260>)
 8003874:	485d      	ldr	r0, [pc, #372]	; (80039ec <showCurrentParameters+0x250>)
 8003876:	f00f fd1b 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800387a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2300      	movs	r3, #0
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	2232      	movs	r2, #50	; 0x32
 8003888:	2114      	movs	r1, #20
 800388a:	4858      	ldr	r0, [pc, #352]	; (80039ec <showCurrentParameters+0x250>)
 800388c:	f7fe fa8e 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Temp. zewn: %.2f`C", CTemp);
 8003890:	4b5b      	ldr	r3, [pc, #364]	; (8003a00 <showCurrentParameters+0x264>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fe6f 	bl	8000578 <__aeabi_f2d>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4959      	ldr	r1, [pc, #356]	; (8003a04 <showCurrentParameters+0x268>)
 80038a0:	4852      	ldr	r0, [pc, #328]	; (80039ec <showCurrentParameters+0x250>)
 80038a2:	f00f fd05 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80038a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2301      	movs	r3, #1
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	2250      	movs	r2, #80	; 0x50
 80038b4:	2114      	movs	r1, #20
 80038b6:	484d      	ldr	r0, [pc, #308]	; (80039ec <showCurrentParameters+0x250>)
 80038b8:	f7fe fa78 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Temp. wewn: %.2f`C", CTempWew);
 80038bc:	4b52      	ldr	r3, [pc, #328]	; (8003a08 <showCurrentParameters+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fe59 	bl	8000578 <__aeabi_f2d>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4950      	ldr	r1, [pc, #320]	; (8003a0c <showCurrentParameters+0x270>)
 80038cc:	4847      	ldr	r0, [pc, #284]	; (80039ec <showCurrentParameters+0x250>)
 80038ce:	f00f fcef 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	226e      	movs	r2, #110	; 0x6e
 80038e0:	2114      	movs	r1, #20
 80038e2:	4842      	ldr	r0, [pc, #264]	; (80039ec <showCurrentParameters+0x250>)
 80038e4:	f7fe fa62 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Poz. wody: -%ldmm", CDist2water);
 80038e8:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <showCurrentParameters+0x274>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4949      	ldr	r1, [pc, #292]	; (8003a14 <showCurrentParameters+0x278>)
 80038f0:	483e      	ldr	r0, [pc, #248]	; (80039ec <showCurrentParameters+0x250>)
 80038f2:	f00f fcdd 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2300      	movs	r3, #0
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2300      	movs	r3, #0
 8003902:	228c      	movs	r2, #140	; 0x8c
 8003904:	2114      	movs	r1, #20
 8003906:	4839      	ldr	r0, [pc, #228]	; (80039ec <showCurrentParameters+0x250>)
 8003908:	f7fe fa50 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Ciśnienie: %.1fhPa ", CPres);
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <showCurrentParameters+0x27c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fe31 	bl	8000578 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4940      	ldr	r1, [pc, #256]	; (8003a1c <showCurrentParameters+0x280>)
 800391c:	4833      	ldr	r0, [pc, #204]	; (80039ec <showCurrentParameters+0x250>)
 800391e:	f00f fcc7 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003922:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	22aa      	movs	r2, #170	; 0xaa
 8003930:	2114      	movs	r1, #20
 8003932:	482e      	ldr	r0, [pc, #184]	; (80039ec <showCurrentParameters+0x250>)
 8003934:	f7fe fa3a 	bl	8001dac <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003938:	4839      	ldr	r0, [pc, #228]	; (8003a20 <showCurrentParameters+0x284>)
 800393a:	f7fe f81d 	bl	8001978 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800393e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	2305      	movs	r3, #5
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2314      	movs	r3, #20
 800394a:	225f      	movs	r2, #95	; 0x5f
 800394c:	21d8      	movs	r1, #216	; 0xd8
 800394e:	20dc      	movs	r0, #220	; 0xdc
 8003950:	f7fd ffc1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "CONTROL=>");
 8003954:	4933      	ldr	r1, [pc, #204]	; (8003a24 <showCurrentParameters+0x288>)
 8003956:	4825      	ldr	r0, [pc, #148]	; (80039ec <showCurrentParameters+0x250>)
 8003958:	f00f fcaa 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800395c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2300      	movs	r3, #0
 8003968:	22da      	movs	r2, #218	; 0xda
 800396a:	21df      	movs	r1, #223	; 0xdf
 800396c:	481f      	ldr	r0, [pc, #124]	; (80039ec <showCurrentParameters+0x250>)
 800396e:	f7fe fa1d 	bl	8001dac <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003972:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	2305      	movs	r3, #5
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2314      	movs	r3, #20
 800397e:	2264      	movs	r2, #100	; 0x64
 8003980:	21d8      	movs	r1, #216	; 0xd8
 8003982:	200a      	movs	r0, #10
 8003984:	f7fd ffa7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<=LIGHTS");
 8003988:	4927      	ldr	r1, [pc, #156]	; (8003a28 <showCurrentParameters+0x28c>)
 800398a:	4818      	ldr	r0, [pc, #96]	; (80039ec <showCurrentParameters+0x250>)
 800398c:	f00f fc90 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003990:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	22da      	movs	r2, #218	; 0xda
 800399e:	2114      	movs	r1, #20
 80039a0:	4812      	ldr	r0, [pc, #72]	; (80039ec <showCurrentParameters+0x250>)
 80039a2:	f7fe fa03 	bl	8001dac <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80039a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	2305      	movs	r3, #5
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2314      	movs	r3, #20
 80039b2:	225a      	movs	r2, #90	; 0x5a
 80039b4:	21d8      	movs	r1, #216	; 0xd8
 80039b6:	2078      	movs	r0, #120	; 0x78
 80039b8:	f7fd ff8d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, ">CLOCK<");
 80039bc:	491b      	ldr	r1, [pc, #108]	; (8003a2c <showCurrentParameters+0x290>)
 80039be:	480b      	ldr	r0, [pc, #44]	; (80039ec <showCurrentParameters+0x250>)
 80039c0:	f00f fc76 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	2300      	movs	r3, #0
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	2300      	movs	r3, #0
 80039d0:	22da      	movs	r2, #218	; 0xda
 80039d2:	2184      	movs	r1, #132	; 0x84
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <showCurrentParameters+0x250>)
 80039d6:	f7fe f9e9 	bl	8001dac <EF_PutString>
}
 80039da:	bf00      	nop
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	0802abac 	.word	0x0802abac
 80039e8:	08017040 	.word	0x08017040
 80039ec:	200002d8 	.word	0x200002d8
 80039f0:	08017050 	.word	0x08017050
 80039f4:	08017060 	.word	0x08017060
 80039f8:	08017070 	.word	0x08017070
 80039fc:	08017080 	.word	0x08017080
 8003a00:	20000930 	.word	0x20000930
 8003a04:	08017090 	.word	0x08017090
 8003a08:	2000093c 	.word	0x2000093c
 8003a0c:	080170a4 	.word	0x080170a4
 8003a10:	20000940 	.word	0x20000940
 8003a14:	080170b8 	.word	0x080170b8
 8003a18:	20000938 	.word	0x20000938
 8003a1c:	080170cc 	.word	0x080170cc
 8003a20:	08028c34 	.word	0x08028c34
 8003a24:	080170e4 	.word	0x080170e4
 8003a28:	080170f0 	.word	0x080170f0
 8003a2c:	080170fc 	.word	0x080170fc

08003a30 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003a36:	2015      	movs	r0, #21
 8003a38:	f006 fbae 	bl	800a198 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003a3c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003a40:	f7fe fb9e 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003a44:	485c      	ldr	r0, [pc, #368]	; (8003bb8 <showControlPanel+0x188>)
 8003a46:	f7fd ff97 	bl	8001978 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)MsgFunctions, "-=PRZEŁĄCZNIKI=-");
 8003a4a:	495c      	ldr	r1, [pc, #368]	; (8003bbc <showControlPanel+0x18c>)
 8003a4c:	485c      	ldr	r0, [pc, #368]	; (8003bc0 <showControlPanel+0x190>)
 8003a4e:	f00f fc2f 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a52:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	231f      	movs	r3, #31
 8003a5e:	220a      	movs	r2, #10
 8003a60:	2123      	movs	r1, #35	; 0x23
 8003a62:	4857      	ldr	r0, [pc, #348]	; (8003bc0 <showControlPanel+0x190>)
 8003a64:	f7fe f9a2 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a68:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2329      	movs	r3, #41	; 0x29
 8003a70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a74:	2129      	movs	r1, #41	; 0x29
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7fd fcce 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a7c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	232b      	movs	r3, #43	; 0x2b
 8003a84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a88:	212b      	movs	r1, #43	; 0x2b
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7fd fcc4 	bl	8001418 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 1:");
 8003a90:	494c      	ldr	r1, [pc, #304]	; (8003bc4 <showControlPanel+0x194>)
 8003a92:	484b      	ldr	r0, [pc, #300]	; (8003bc0 <showControlPanel+0x190>)
 8003a94:	f00f fc0c 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a98:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	223c      	movs	r2, #60	; 0x3c
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	4845      	ldr	r0, [pc, #276]	; (8003bc0 <showControlPanel+0x190>)
 8003aaa:	f7fe f97f 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 2:");
 8003aae:	4946      	ldr	r1, [pc, #280]	; (8003bc8 <showControlPanel+0x198>)
 8003ab0:	4843      	ldr	r0, [pc, #268]	; (8003bc0 <showControlPanel+0x190>)
 8003ab2:	f00f fbfd 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ab6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	2301      	movs	r3, #1
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	225a      	movs	r2, #90	; 0x5a
 8003ac4:	2114      	movs	r1, #20
 8003ac6:	483e      	ldr	r0, [pc, #248]	; (8003bc0 <showControlPanel+0x190>)
 8003ac8:	f7fe f970 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 3:");
 8003acc:	493f      	ldr	r1, [pc, #252]	; (8003bcc <showControlPanel+0x19c>)
 8003ace:	483c      	ldr	r0, [pc, #240]	; (8003bc0 <showControlPanel+0x190>)
 8003ad0:	f00f fbee 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ad4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2278      	movs	r2, #120	; 0x78
 8003ae2:	2114      	movs	r1, #20
 8003ae4:	4836      	ldr	r0, [pc, #216]	; (8003bc0 <showControlPanel+0x190>)
 8003ae6:	f7fe f961 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 4:");
 8003aea:	4939      	ldr	r1, [pc, #228]	; (8003bd0 <showControlPanel+0x1a0>)
 8003aec:	4834      	ldr	r0, [pc, #208]	; (8003bc0 <showControlPanel+0x190>)
 8003aee:	f00f fbdf 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003af2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	2296      	movs	r2, #150	; 0x96
 8003b00:	2114      	movs	r1, #20
 8003b02:	482f      	ldr	r0, [pc, #188]	; (8003bc0 <showControlPanel+0x190>)
 8003b04:	f7fe f952 	bl	8001dac <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003b08:	4832      	ldr	r0, [pc, #200]	; (8003bd4 <showControlPanel+0x1a4>)
 8003b0a:	f7fd ff35 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003b0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	2305      	movs	r3, #5
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2314      	movs	r3, #20
 8003b1a:	225f      	movs	r2, #95	; 0x5f
 8003b1c:	21d8      	movs	r1, #216	; 0xd8
 8003b1e:	20dc      	movs	r0, #220	; 0xdc
 8003b20:	f7fd fed9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "LIGHTS=>");
 8003b24:	492c      	ldr	r1, [pc, #176]	; (8003bd8 <showControlPanel+0x1a8>)
 8003b26:	4826      	ldr	r0, [pc, #152]	; (8003bc0 <showControlPanel+0x190>)
 8003b28:	f00f fbc2 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b2c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	2300      	movs	r3, #0
 8003b38:	22da      	movs	r2, #218	; 0xda
 8003b3a:	21df      	movs	r1, #223	; 0xdf
 8003b3c:	4820      	ldr	r0, [pc, #128]	; (8003bc0 <showControlPanel+0x190>)
 8003b3e:	f7fe f935 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003b42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2305      	movs	r3, #5
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2314      	movs	r3, #20
 8003b4e:	2264      	movs	r2, #100	; 0x64
 8003b50:	21d8      	movs	r1, #216	; 0xd8
 8003b52:	200a      	movs	r0, #10
 8003b54:	f7fd febf 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<=PARAM");
 8003b58:	4920      	ldr	r1, [pc, #128]	; (8003bdc <showControlPanel+0x1ac>)
 8003b5a:	4819      	ldr	r0, [pc, #100]	; (8003bc0 <showControlPanel+0x190>)
 8003b5c:	f00f fba8 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	22da      	movs	r2, #218	; 0xda
 8003b6e:	2114      	movs	r1, #20
 8003b70:	4813      	ldr	r0, [pc, #76]	; (8003bc0 <showControlPanel+0x190>)
 8003b72:	f7fe f91b 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003b76:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	2305      	movs	r3, #5
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2314      	movs	r3, #20
 8003b82:	225a      	movs	r2, #90	; 0x5a
 8003b84:	21d8      	movs	r1, #216	; 0xd8
 8003b86:	2078      	movs	r0, #120	; 0x78
 8003b88:	f7fd fea5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "ACTIVITIES");
 8003b8c:	4914      	ldr	r1, [pc, #80]	; (8003be0 <showControlPanel+0x1b0>)
 8003b8e:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <showControlPanel+0x190>)
 8003b90:	f00f fb8e 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	22da      	movs	r2, #218	; 0xda
 8003ba2:	217e      	movs	r1, #126	; 0x7e
 8003ba4:	4806      	ldr	r0, [pc, #24]	; (8003bc0 <showControlPanel+0x190>)
 8003ba6:	f7fe f901 	bl	8001dac <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003baa:	4803      	ldr	r0, [pc, #12]	; (8003bb8 <showControlPanel+0x188>)
 8003bac:	f7fd fee4 	bl	8001978 <EF_SetFont>


}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	0802abac 	.word	0x0802abac
 8003bbc:	08017104 	.word	0x08017104
 8003bc0:	200002d8 	.word	0x200002d8
 8003bc4:	08017118 	.word	0x08017118
 8003bc8:	0801712c 	.word	0x0801712c
 8003bcc:	08017140 	.word	0x08017140
 8003bd0:	08017154 	.word	0x08017154
 8003bd4:	08028c34 	.word	0x08028c34
 8003bd8:	08017168 	.word	0x08017168
 8003bdc:	08017174 	.word	0x08017174
 8003be0:	0801717c 	.word	0x0801717c

08003be4 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003bea:	2016      	movs	r0, #22
 8003bec:	f006 fad4 	bl	800a198 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003bf0:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003bf4:	f7fe fac4 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003bf8:	485b      	ldr	r0, [pc, #364]	; (8003d68 <showLightsControlPanel+0x184>)
 8003bfa:	f7fd febd 	bl	8001978 <EF_SetFont>

	  // Display Header
	  sprintf((char*)MsgFunctions, "-=ŚWIATŁA=-");
 8003bfe:	495b      	ldr	r1, [pc, #364]	; (8003d6c <showLightsControlPanel+0x188>)
 8003c00:	485b      	ldr	r0, [pc, #364]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c02:	f00f fb55 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c14:	220a      	movs	r2, #10
 8003c16:	2146      	movs	r1, #70	; 0x46
 8003c18:	4855      	ldr	r0, [pc, #340]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c1a:	f7fe f8c7 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003c1e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2329      	movs	r3, #41	; 0x29
 8003c26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c2a:	2129      	movs	r1, #41	; 0x29
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7fd fbf3 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003c32:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	232b      	movs	r3, #43	; 0x2b
 8003c3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c3e:	212b      	movs	r1, #43	; 0x2b
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7fd fbe9 	bl	8001418 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)MsgFunctions, "ŚWIATŁO 1:");
 8003c46:	494b      	ldr	r1, [pc, #300]	; (8003d74 <showLightsControlPanel+0x190>)
 8003c48:	4849      	ldr	r0, [pc, #292]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c4a:	f00f fb31 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c4e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	223c      	movs	r2, #60	; 0x3c
 8003c5c:	2114      	movs	r1, #20
 8003c5e:	4844      	ldr	r0, [pc, #272]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c60:	f7fe f8a4 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "ŚWIATŁO 2:");
 8003c64:	4944      	ldr	r1, [pc, #272]	; (8003d78 <showLightsControlPanel+0x194>)
 8003c66:	4842      	ldr	r0, [pc, #264]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c68:	f00f fb22 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003c6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2301      	movs	r3, #1
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	225a      	movs	r2, #90	; 0x5a
 8003c7a:	2114      	movs	r1, #20
 8003c7c:	483c      	ldr	r0, [pc, #240]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c7e:	f7fe f895 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "ŚWIATŁO 3:");
 8003c82:	493e      	ldr	r1, [pc, #248]	; (8003d7c <showLightsControlPanel+0x198>)
 8003c84:	483a      	ldr	r0, [pc, #232]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c86:	f00f fb13 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c8a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	2300      	movs	r3, #0
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	2278      	movs	r2, #120	; 0x78
 8003c98:	2114      	movs	r1, #20
 8003c9a:	4835      	ldr	r0, [pc, #212]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003c9c:	f7fe f886 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "ŚWIATŁO 4:");
 8003ca0:	4937      	ldr	r1, [pc, #220]	; (8003d80 <showLightsControlPanel+0x19c>)
 8003ca2:	4833      	ldr	r0, [pc, #204]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003ca4:	f00f fb04 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ca8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2296      	movs	r2, #150	; 0x96
 8003cb6:	2114      	movs	r1, #20
 8003cb8:	482d      	ldr	r0, [pc, #180]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003cba:	f7fe f877 	bl	8001dac <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003cbe:	4831      	ldr	r0, [pc, #196]	; (8003d84 <showLightsControlPanel+0x1a0>)
 8003cc0:	f7fd fe5a 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cc4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	2305      	movs	r3, #5
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2314      	movs	r3, #20
 8003cd0:	225f      	movs	r2, #95	; 0x5f
 8003cd2:	21d8      	movs	r1, #216	; 0xd8
 8003cd4:	20dc      	movs	r0, #220	; 0xdc
 8003cd6:	f7fd fdfe 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "PARAM=>");
 8003cda:	492b      	ldr	r1, [pc, #172]	; (8003d88 <showLightsControlPanel+0x1a4>)
 8003cdc:	4824      	ldr	r0, [pc, #144]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003cde:	f00f fae7 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ce2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	2300      	movs	r3, #0
 8003cee:	22da      	movs	r2, #218	; 0xda
 8003cf0:	21e6      	movs	r1, #230	; 0xe6
 8003cf2:	481f      	ldr	r0, [pc, #124]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003cf4:	f7fe f85a 	bl	8001dac <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003cf8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	2305      	movs	r3, #5
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2314      	movs	r3, #20
 8003d04:	225a      	movs	r2, #90	; 0x5a
 8003d06:	21d8      	movs	r1, #216	; 0xd8
 8003d08:	2078      	movs	r0, #120	; 0x78
 8003d0a:	f7fd fde4 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, ">WS2812b<");
 8003d0e:	491f      	ldr	r1, [pc, #124]	; (8003d8c <showLightsControlPanel+0x1a8>)
 8003d10:	4817      	ldr	r0, [pc, #92]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003d12:	f00f facd 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2300      	movs	r3, #0
 8003d22:	22da      	movs	r2, #218	; 0xda
 8003d24:	217e      	movs	r1, #126	; 0x7e
 8003d26:	4812      	ldr	r0, [pc, #72]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003d28:	f7fe f840 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d2c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	2305      	movs	r3, #5
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2314      	movs	r3, #20
 8003d38:	2264      	movs	r2, #100	; 0x64
 8003d3a:	21d8      	movs	r1, #216	; 0xd8
 8003d3c:	200a      	movs	r0, #10
 8003d3e:	f7fd fdca 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<=CONTROL");
 8003d42:	4913      	ldr	r1, [pc, #76]	; (8003d90 <showLightsControlPanel+0x1ac>)
 8003d44:	480a      	ldr	r0, [pc, #40]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003d46:	f00f fab3 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2300      	movs	r3, #0
 8003d56:	22da      	movs	r2, #218	; 0xda
 8003d58:	210d      	movs	r1, #13
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <showLightsControlPanel+0x18c>)
 8003d5c:	f7fe f826 	bl	8001dac <EF_PutString>


}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	0802abac 	.word	0x0802abac
 8003d6c:	08017188 	.word	0x08017188
 8003d70:	200002d8 	.word	0x200002d8
 8003d74:	08017198 	.word	0x08017198
 8003d78:	080171a8 	.word	0x080171a8
 8003d7c:	080171b8 	.word	0x080171b8
 8003d80:	080171c8 	.word	0x080171c8
 8003d84:	08028c34 	.word	0x08028c34
 8003d88:	080171d8 	.word	0x080171d8
 8003d8c:	080171e0 	.word	0x080171e0
 8003d90:	080171ec 	.word	0x080171ec

08003d94 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af02      	add	r7, sp, #8


	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003d9a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003d9e:	f7fe f9ef 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003da2:	48a2      	ldr	r0, [pc, #648]	; (800402c <showClockSetPanel+0x298>)
 8003da4:	f7fd fde8 	bl	8001978 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003da8:	f7fe fe8e 	bl	8002ac8 <DS3231_GetHour>
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003db0:	f7fe fe96 	bl	8002ae0 <DS3231_GetMinute>
 8003db4:	4603      	mov	r3, r0
 8003db6:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003db8:	f7fe fe7a 	bl	8002ab0 <DS3231_GetDayOfWeek>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)MsgFunctions, "-=SET CLOCK=-");
 8003dc0:	499b      	ldr	r1, [pc, #620]	; (8004030 <showClockSetPanel+0x29c>)
 8003dc2:	489c      	ldr	r0, [pc, #624]	; (8004034 <showClockSetPanel+0x2a0>)
 8003dc4:	f00f fa74 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003dc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dd6:	220a      	movs	r2, #10
 8003dd8:	212f      	movs	r1, #47	; 0x2f
 8003dda:	4896      	ldr	r0, [pc, #600]	; (8004034 <showClockSetPanel+0x2a0>)
 8003ddc:	f7fd ffe6 	bl	8001dac <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003de0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2329      	movs	r3, #41	; 0x29
 8003de8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dec:	2129      	movs	r1, #41	; 0x29
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7fd fb12 	bl	8001418 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003df4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	232b      	movs	r3, #43	; 0x2b
 8003dfc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e00:	212b      	movs	r1, #43	; 0x2b
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7fd fb08 	bl	8001418 <GFX_DrawLine>

	sprintf((char*)MsgFunctions, "GODZINA: %d", CHour);
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	498a      	ldr	r1, [pc, #552]	; (8004038 <showClockSetPanel+0x2a4>)
 8003e0e:	4889      	ldr	r0, [pc, #548]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e10:	f00f fa4e 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003e14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2246      	movs	r2, #70	; 0x46
 8003e22:	2114      	movs	r1, #20
 8003e24:	4883      	ldr	r0, [pc, #524]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e26:	f7fd ffc1 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "MINUTA:   %d", CMinute);
 8003e2a:	79bb      	ldrb	r3, [r7, #6]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4983      	ldr	r1, [pc, #524]	; (800403c <showClockSetPanel+0x2a8>)
 8003e30:	4880      	ldr	r0, [pc, #512]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e32:	f00f fa3d 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e36:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	226e      	movs	r2, #110	; 0x6e
 8003e44:	2114      	movs	r1, #20
 8003e46:	487b      	ldr	r0, [pc, #492]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e48:	f7fd ffb0 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003e4c:	797b      	ldrb	r3, [r7, #5]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	497b      	ldr	r1, [pc, #492]	; (8004040 <showClockSetPanel+0x2ac>)
 8003e52:	4878      	ldr	r0, [pc, #480]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e54:	f00f fa2c 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	2296      	movs	r2, #150	; 0x96
 8003e66:	2114      	movs	r1, #20
 8003e68:	4872      	ldr	r0, [pc, #456]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e6a:	f7fd ff9f 	bl	8001dac <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003e6e:	4875      	ldr	r0, [pc, #468]	; (8004044 <showClockSetPanel+0x2b0>)
 8003e70:	f7fd fd82 	bl	8001978 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e74:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2315      	movs	r3, #21
 8003e80:	221e      	movs	r2, #30
 8003e82:	214b      	movs	r1, #75	; 0x4b
 8003e84:	20f0      	movs	r0, #240	; 0xf0
 8003e86:	f7fd fd26 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1");
 8003e8a:	496f      	ldr	r1, [pc, #444]	; (8004048 <showClockSetPanel+0x2b4>)
 8003e8c:	4869      	ldr	r0, [pc, #420]	; (8004034 <showClockSetPanel+0x2a0>)
 8003e8e:	f00f fa0f 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e92:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	224d      	movs	r2, #77	; 0x4d
 8003ea0:	21f3      	movs	r1, #243	; 0xf3
 8003ea2:	4864      	ldr	r0, [pc, #400]	; (8004034 <showClockSetPanel+0x2a0>)
 8003ea4:	f7fd ff82 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ea8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2305      	movs	r3, #5
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2315      	movs	r3, #21
 8003eb4:	221e      	movs	r2, #30
 8003eb6:	214b      	movs	r1, #75	; 0x4b
 8003eb8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003ebc:	f7fd fd0b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+6");
 8003ec0:	4962      	ldr	r1, [pc, #392]	; (800404c <showClockSetPanel+0x2b8>)
 8003ec2:	485c      	ldr	r0, [pc, #368]	; (8004034 <showClockSetPanel+0x2a0>)
 8003ec4:	f00f f9f4 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ec8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	224d      	movs	r2, #77	; 0x4d
 8003ed6:	f240 111d 	movw	r1, #285	; 0x11d
 8003eda:	4856      	ldr	r0, [pc, #344]	; (8004034 <showClockSetPanel+0x2a0>)
 8003edc:	f7fd ff66 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ee0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	2305      	movs	r3, #5
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2315      	movs	r3, #21
 8003eec:	221e      	movs	r2, #30
 8003eee:	2173      	movs	r1, #115	; 0x73
 8003ef0:	20f0      	movs	r0, #240	; 0xf0
 8003ef2:	f7fd fcf0 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1");
 8003ef6:	4954      	ldr	r1, [pc, #336]	; (8004048 <showClockSetPanel+0x2b4>)
 8003ef8:	484e      	ldr	r0, [pc, #312]	; (8004034 <showClockSetPanel+0x2a0>)
 8003efa:	f00f f9d9 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003efe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2275      	movs	r2, #117	; 0x75
 8003f0c:	21f5      	movs	r1, #245	; 0xf5
 8003f0e:	4849      	ldr	r0, [pc, #292]	; (8004034 <showClockSetPanel+0x2a0>)
 8003f10:	f7fd ff4c 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f14:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2305      	movs	r3, #5
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2315      	movs	r3, #21
 8003f20:	221e      	movs	r2, #30
 8003f22:	2173      	movs	r1, #115	; 0x73
 8003f24:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003f28:	f7fd fcd5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+10");
 8003f2c:	4948      	ldr	r1, [pc, #288]	; (8004050 <showClockSetPanel+0x2bc>)
 8003f2e:	4841      	ldr	r0, [pc, #260]	; (8004034 <showClockSetPanel+0x2a0>)
 8003f30:	f00f f9be 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003f34:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2275      	movs	r2, #117	; 0x75
 8003f42:	f240 111b 	movw	r1, #283	; 0x11b
 8003f46:	483b      	ldr	r0, [pc, #236]	; (8004034 <showClockSetPanel+0x2a0>)
 8003f48:	f7fd ff30 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	2305      	movs	r3, #5
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2315      	movs	r3, #21
 8003f58:	221e      	movs	r2, #30
 8003f5a:	219b      	movs	r1, #155	; 0x9b
 8003f5c:	20f0      	movs	r0, #240	; 0xf0
 8003f5e:	f7fd fcba 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1D");
 8003f62:	493c      	ldr	r1, [pc, #240]	; (8004054 <showClockSetPanel+0x2c0>)
 8003f64:	4833      	ldr	r0, [pc, #204]	; (8004034 <showClockSetPanel+0x2a0>)
 8003f66:	f00f f9a3 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003f6a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	2300      	movs	r3, #0
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	229d      	movs	r2, #157	; 0x9d
 8003f78:	21f3      	movs	r1, #243	; 0xf3
 8003f7a:	482e      	ldr	r0, [pc, #184]	; (8004034 <showClockSetPanel+0x2a0>)
 8003f7c:	f7fd ff16 	bl	8001dac <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003f80:	4830      	ldr	r0, [pc, #192]	; (8004044 <showClockSetPanel+0x2b0>)
 8003f82:	f7fd fcf9 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003f86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	2305      	movs	r3, #5
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2314      	movs	r3, #20
 8003f92:	225f      	movs	r2, #95	; 0x5f
 8003f94:	21d8      	movs	r1, #216	; 0xd8
 8003f96:	20dc      	movs	r0, #220	; 0xdc
 8003f98:	f7fd fc9d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "CONFIRM");
 8003f9c:	492e      	ldr	r1, [pc, #184]	; (8004058 <showClockSetPanel+0x2c4>)
 8003f9e:	4825      	ldr	r0, [pc, #148]	; (8004034 <showClockSetPanel+0x2a0>)
 8003fa0:	f00f f986 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003fa4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	2300      	movs	r3, #0
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	22da      	movs	r2, #218	; 0xda
 8003fb2:	21e6      	movs	r1, #230	; 0xe6
 8003fb4:	481f      	ldr	r0, [pc, #124]	; (8004034 <showClockSetPanel+0x2a0>)
 8003fb6:	f7fd fef9 	bl	8001dac <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003fba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2305      	movs	r3, #5
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2316      	movs	r3, #22
 8003fc6:	22aa      	movs	r2, #170	; 0xaa
 8003fc8:	21be      	movs	r1, #190	; 0xbe
 8003fca:	2050      	movs	r0, #80	; 0x50
 8003fcc:	f7fd fc83 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "HARMONOGRAMY");
 8003fd0:	4922      	ldr	r1, [pc, #136]	; (800405c <showClockSetPanel+0x2c8>)
 8003fd2:	4818      	ldr	r0, [pc, #96]	; (8004034 <showClockSetPanel+0x2a0>)
 8003fd4:	f00f f96c 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003fd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	22c1      	movs	r2, #193	; 0xc1
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	4812      	ldr	r0, [pc, #72]	; (8004034 <showClockSetPanel+0x2a0>)
 8003fea:	f7fd fedf 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003fee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2305      	movs	r3, #5
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2314      	movs	r3, #20
 8003ffa:	2264      	movs	r2, #100	; 0x64
 8003ffc:	21d8      	movs	r1, #216	; 0xd8
 8003ffe:	200a      	movs	r0, #10
 8004000:	f7fd fc69 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "<=BACK");
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <showClockSetPanel+0x2cc>)
 8004006:	480b      	ldr	r0, [pc, #44]	; (8004034 <showClockSetPanel+0x2a0>)
 8004008:	f00f f952 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800400c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	22da      	movs	r2, #218	; 0xda
 800401a:	210d      	movs	r1, #13
 800401c:	4805      	ldr	r0, [pc, #20]	; (8004034 <showClockSetPanel+0x2a0>)
 800401e:	f7fd fec5 	bl	8001dac <EF_PutString>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	0802abac 	.word	0x0802abac
 8004030:	080171f8 	.word	0x080171f8
 8004034:	200002d8 	.word	0x200002d8
 8004038:	08017208 	.word	0x08017208
 800403c:	08017214 	.word	0x08017214
 8004040:	08017224 	.word	0x08017224
 8004044:	08028c34 	.word	0x08028c34
 8004048:	08017234 	.word	0x08017234
 800404c:	08017238 	.word	0x08017238
 8004050:	0801723c 	.word	0x0801723c
 8004054:	08017240 	.word	0x08017240
 8004058:	08017244 	.word	0x08017244
 800405c:	0801724c 	.word	0x0801724c
 8004060:	0801725c 	.word	0x0801725c

08004064 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800406a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800406e:	f7fe f887 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8004072:	4896      	ldr	r0, [pc, #600]	; (80042cc <showPreparedActivitiesPanel+0x268>)
 8004074:	f7fd fc80 	bl	8001978 <EF_SetFont>

	// Display Header
	sprintf((char*)MsgFunctions, "-=ACTIVITIES=-");
 8004078:	4995      	ldr	r1, [pc, #596]	; (80042d0 <showPreparedActivitiesPanel+0x26c>)
 800407a:	4896      	ldr	r0, [pc, #600]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 800407c:	f00f f918 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004080:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2300      	movs	r3, #0
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	231f      	movs	r3, #31
 800408c:	220a      	movs	r2, #10
 800408e:	212f      	movs	r1, #47	; 0x2f
 8004090:	4890      	ldr	r0, [pc, #576]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004092:	f7fd fe8b 	bl	8001dac <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004096:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2329      	movs	r3, #41	; 0x29
 800409e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040a2:	2129      	movs	r1, #41	; 0x29
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7fd f9b7 	bl	8001418 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80040aa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	232b      	movs	r3, #43	; 0x2b
 80040b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040b6:	212b      	movs	r1, #43	; 0x2b
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fd f9ad 	bl	8001418 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80040be:	4886      	ldr	r0, [pc, #536]	; (80042d8 <showPreparedActivitiesPanel+0x274>)
 80040c0:	f7fd fc5a 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80040c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	2305      	movs	r3, #5
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2314      	movs	r3, #20
 80040d0:	2264      	movs	r2, #100	; 0x64
 80040d2:	21d8      	movs	r1, #216	; 0xd8
 80040d4:	200a      	movs	r0, #10
 80040d6:	f7fd fbfe 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "<=BACK");
 80040da:	4980      	ldr	r1, [pc, #512]	; (80042dc <showPreparedActivitiesPanel+0x278>)
 80040dc:	487d      	ldr	r0, [pc, #500]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80040de:	f00f f8e7 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	2300      	movs	r3, #0
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2300      	movs	r3, #0
 80040ee:	22da      	movs	r2, #218	; 0xda
 80040f0:	210d      	movs	r1, #13
 80040f2:	4878      	ldr	r0, [pc, #480]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80040f4:	f7fd fe5a 	bl	8001dac <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80040f8:	4877      	ldr	r0, [pc, #476]	; (80042d8 <showPreparedActivitiesPanel+0x274>)
 80040fa:	f7fd fc3d 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80040fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2305      	movs	r3, #5
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2314      	movs	r3, #20
 800410a:	225f      	movs	r2, #95	; 0x5f
 800410c:	21d8      	movs	r1, #216	; 0xd8
 800410e:	20dc      	movs	r0, #220	; 0xdc
 8004110:	f7fd fbe1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "CONFIRM");
 8004114:	4972      	ldr	r1, [pc, #456]	; (80042e0 <showPreparedActivitiesPanel+0x27c>)
 8004116:	486f      	ldr	r0, [pc, #444]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004118:	f00f f8ca 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800411c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	22da      	movs	r2, #218	; 0xda
 800412a:	21e6      	movs	r1, #230	; 0xe6
 800412c:	4869      	ldr	r0, [pc, #420]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 800412e:	f7fd fe3d 	bl	8001dac <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8004132:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <showPreparedActivitiesPanel+0x280>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d029      	beq.n	800418e <showPreparedActivitiesPanel+0x12a>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800413a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	230a      	movs	r3, #10
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2328      	movs	r3, #40	; 0x28
 8004146:	2278      	movs	r2, #120	; 0x78
 8004148:	213c      	movs	r1, #60	; 0x3c
 800414a:	2064      	movs	r0, #100	; 0x64
 800414c:	f7fd fbc3 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "KARMIENIE");
 8004150:	4965      	ldr	r1, [pc, #404]	; (80042e8 <showPreparedActivitiesPanel+0x284>)
 8004152:	4860      	ldr	r0, [pc, #384]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004154:	f00f f8ac 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004158:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	2300      	movs	r3, #0
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	223e      	movs	r2, #62	; 0x3e
 8004166:	2177      	movs	r1, #119	; 0x77
 8004168:	485a      	ldr	r0, [pc, #360]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 800416a:	f7fd fe1f 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "ON");
 800416e:	495f      	ldr	r1, [pc, #380]	; (80042ec <showPreparedActivitiesPanel+0x288>)
 8004170:	4858      	ldr	r0, [pc, #352]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004172:	f00f f89d 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004176:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800417a:	9301      	str	r3, [sp, #4]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2300      	movs	r3, #0
 8004182:	2250      	movs	r2, #80	; 0x50
 8004184:	2193      	movs	r1, #147	; 0x93
 8004186:	4853      	ldr	r0, [pc, #332]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004188:	f7fd fe10 	bl	8001dac <EF_PutString>
 800418c:	e028      	b.n	80041e0 <showPreparedActivitiesPanel+0x17c>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800418e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	230a      	movs	r3, #10
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2328      	movs	r3, #40	; 0x28
 800419a:	2278      	movs	r2, #120	; 0x78
 800419c:	213c      	movs	r1, #60	; 0x3c
 800419e:	2064      	movs	r0, #100	; 0x64
 80041a0:	f7fd fb99 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "KARMIENIE");
 80041a4:	4950      	ldr	r1, [pc, #320]	; (80042e8 <showPreparedActivitiesPanel+0x284>)
 80041a6:	484b      	ldr	r0, [pc, #300]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80041a8:	f00f f882 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	223e      	movs	r2, #62	; 0x3e
 80041ba:	2177      	movs	r1, #119	; 0x77
 80041bc:	4845      	ldr	r0, [pc, #276]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80041be:	f7fd fdf5 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "OFF");
 80041c2:	494b      	ldr	r1, [pc, #300]	; (80042f0 <showPreparedActivitiesPanel+0x28c>)
 80041c4:	4843      	ldr	r0, [pc, #268]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80041c6:	f00f f873 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	2250      	movs	r2, #80	; 0x50
 80041d8:	2193      	movs	r1, #147	; 0x93
 80041da:	483e      	ldr	r0, [pc, #248]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80041dc:	f7fd fde6 	bl	8001dac <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80041e0:	4b40      	ldr	r3, [pc, #256]	; (80042e4 <showPreparedActivitiesPanel+0x280>)
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d029      	beq.n	800423c <showPreparedActivitiesPanel+0x1d8>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	230a      	movs	r3, #10
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2328      	movs	r3, #40	; 0x28
 80041f4:	2278      	movs	r2, #120	; 0x78
 80041f6:	2178      	movs	r1, #120	; 0x78
 80041f8:	2064      	movs	r0, #100	; 0x64
 80041fa:	f7fd fb6c 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "CZYSZCZENIE");
 80041fe:	493d      	ldr	r1, [pc, #244]	; (80042f4 <showPreparedActivitiesPanel+0x290>)
 8004200:	4834      	ldr	r0, [pc, #208]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004202:	f00f f855 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004206:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	2300      	movs	r3, #0
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	227a      	movs	r2, #122	; 0x7a
 8004214:	2169      	movs	r1, #105	; 0x69
 8004216:	482f      	ldr	r0, [pc, #188]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004218:	f7fd fdc8 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "ON");
 800421c:	4933      	ldr	r1, [pc, #204]	; (80042ec <showPreparedActivitiesPanel+0x288>)
 800421e:	482d      	ldr	r0, [pc, #180]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004220:	f00f f846 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004224:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	228c      	movs	r2, #140	; 0x8c
 8004232:	2193      	movs	r1, #147	; 0x93
 8004234:	4827      	ldr	r0, [pc, #156]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004236:	f7fd fdb9 	bl	8001dac <EF_PutString>
 800423a:	e028      	b.n	800428e <showPreparedActivitiesPanel+0x22a>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800423c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	230a      	movs	r3, #10
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2328      	movs	r3, #40	; 0x28
 8004248:	2278      	movs	r2, #120	; 0x78
 800424a:	2178      	movs	r1, #120	; 0x78
 800424c:	2064      	movs	r0, #100	; 0x64
 800424e:	f7fd fb42 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "CZYSZCZENIE");
 8004252:	4928      	ldr	r1, [pc, #160]	; (80042f4 <showPreparedActivitiesPanel+0x290>)
 8004254:	481f      	ldr	r0, [pc, #124]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004256:	f00f f82b 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800425a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	227a      	movs	r2, #122	; 0x7a
 8004268:	2169      	movs	r1, #105	; 0x69
 800426a:	481a      	ldr	r0, [pc, #104]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 800426c:	f7fd fd9e 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "OFF");
 8004270:	491f      	ldr	r1, [pc, #124]	; (80042f0 <showPreparedActivitiesPanel+0x28c>)
 8004272:	4818      	ldr	r0, [pc, #96]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 8004274:	f00f f81c 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004278:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	228c      	movs	r2, #140	; 0x8c
 8004286:	2193      	movs	r1, #147	; 0x93
 8004288:	4812      	ldr	r0, [pc, #72]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 800428a:	f7fd fd8f 	bl	8001dac <EF_PutString>
	}


	EF_SetFont(&arialBlack_20ptFontInfo);
 800428e:	480f      	ldr	r0, [pc, #60]	; (80042cc <showPreparedActivitiesPanel+0x268>)
 8004290:	f7fd fb72 	bl	8001978 <EF_SetFont>
	activitiesDurationTimeInSeconds = EEPROM_ActivitiesTimeRead(1);
 8004294:	2001      	movs	r0, #1
 8004296:	f7ff f8c8 	bl	800342a <EEPROM_ActivitiesTimeRead>
 800429a:	4603      	mov	r3, r0
 800429c:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <showPreparedActivitiesPanel+0x294>)
 800429e:	6013      	str	r3, [r2, #0]
	sprintf((char*)MsgFunctions, "Czas karmienia: %ld s", activitiesDurationTimeInSeconds);
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <showPreparedActivitiesPanel+0x294>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	4915      	ldr	r1, [pc, #84]	; (80042fc <showPreparedActivitiesPanel+0x298>)
 80042a8:	480a      	ldr	r0, [pc, #40]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80042aa:	f00f f801 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, ACTIVITIES_TIME_DURATION_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80042ae:	f24c 6318 	movw	r3, #50712	; 0xc618
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2300      	movs	r3, #0
 80042ba:	22b4      	movs	r2, #180	; 0xb4
 80042bc:	210a      	movs	r1, #10
 80042be:	4805      	ldr	r0, [pc, #20]	; (80042d4 <showPreparedActivitiesPanel+0x270>)
 80042c0:	f7fd fd74 	bl	8001dac <EF_PutString>
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	0802abac 	.word	0x0802abac
 80042d0:	08017264 	.word	0x08017264
 80042d4:	200002d8 	.word	0x200002d8
 80042d8:	08028c34 	.word	0x08028c34
 80042dc:	0801725c 	.word	0x0801725c
 80042e0:	08017244 	.word	0x08017244
 80042e4:	200002d4 	.word	0x200002d4
 80042e8:	08017274 	.word	0x08017274
 80042ec:	08017280 	.word	0x08017280
 80042f0:	08017284 	.word	0x08017284
 80042f4:	08017288 	.word	0x08017288
 80042f8:	20000898 	.word	0x20000898
 80042fc:	08017294 	.word	0x08017294

08004300 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004306:	f24c 6018 	movw	r0, #50712	; 0xc618
 800430a:	f7fd ff39 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 800430e:	48c7      	ldr	r0, [pc, #796]	; (800462c <showWSLedPanel+0x32c>)
 8004310:	f7fd fb32 	bl	8001978 <EF_SetFont>


	// Display Header
	sprintf((char*)MsgFunctions, "-=WS2812b=-");
 8004314:	49c6      	ldr	r1, [pc, #792]	; (8004630 <showWSLedPanel+0x330>)
 8004316:	48c7      	ldr	r0, [pc, #796]	; (8004634 <showWSLedPanel+0x334>)
 8004318:	f00e ffca 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800431c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	2300      	movs	r3, #0
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	231f      	movs	r3, #31
 8004328:	220a      	movs	r2, #10
 800432a:	2146      	movs	r1, #70	; 0x46
 800432c:	48c1      	ldr	r0, [pc, #772]	; (8004634 <showWSLedPanel+0x334>)
 800432e:	f7fd fd3d 	bl	8001dac <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004332:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2329      	movs	r3, #41	; 0x29
 800433a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800433e:	2129      	movs	r1, #41	; 0x29
 8004340:	2000      	movs	r0, #0
 8004342:	f7fd f869 	bl	8001418 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004346:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	232b      	movs	r3, #43	; 0x2b
 800434e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004352:	212b      	movs	r1, #43	; 0x2b
 8004354:	2000      	movs	r0, #0
 8004356:	f7fd f85f 	bl	8001418 <GFX_DrawLine>

	// Display String
	sprintf((char*)MsgFunctions, "ILOŚĆ LED: %d", NrOfLeds);
 800435a:	4bb7      	ldr	r3, [pc, #732]	; (8004638 <showWSLedPanel+0x338>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	49b6      	ldr	r1, [pc, #728]	; (800463c <showWSLedPanel+0x33c>)
 8004362:	48b4      	ldr	r0, [pc, #720]	; (8004634 <showWSLedPanel+0x334>)
 8004364:	f00e ffa4 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004368:	f24c 6318 	movw	r3, #50712	; 0xc618
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	223c      	movs	r2, #60	; 0x3c
 8004376:	2114      	movs	r1, #20
 8004378:	48ae      	ldr	r0, [pc, #696]	; (8004634 <showWSLedPanel+0x334>)
 800437a:	f7fd fd17 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "WHITE:");
 800437e:	49b0      	ldr	r1, [pc, #704]	; (8004640 <showWSLedPanel+0x340>)
 8004380:	48ac      	ldr	r0, [pc, #688]	; (8004634 <showWSLedPanel+0x334>)
 8004382:	f00e ff95 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004386:	f24c 6318 	movw	r3, #50712	; 0xc618
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	2300      	movs	r3, #0
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2300      	movs	r3, #0
 8004392:	225a      	movs	r2, #90	; 0x5a
 8004394:	2114      	movs	r1, #20
 8004396:	48a7      	ldr	r0, [pc, #668]	; (8004634 <showWSLedPanel+0x334>)
 8004398:	f7fd fd08 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "BLUE:");
 800439c:	49a9      	ldr	r1, [pc, #676]	; (8004644 <showWSLedPanel+0x344>)
 800439e:	48a5      	ldr	r0, [pc, #660]	; (8004634 <showWSLedPanel+0x334>)
 80043a0:	f00e ff86 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80043a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	2278      	movs	r2, #120	; 0x78
 80043b2:	2114      	movs	r1, #20
 80043b4:	489f      	ldr	r0, [pc, #636]	; (8004634 <showWSLedPanel+0x334>)
 80043b6:	f7fd fcf9 	bl	8001dac <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 80043ba:	48a3      	ldr	r0, [pc, #652]	; (8004648 <showWSLedPanel+0x348>)
 80043bc:	f7fd fadc 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80043c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	2305      	movs	r3, #5
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2315      	movs	r3, #21
 80043cc:	221e      	movs	r2, #30
 80043ce:	2141      	movs	r1, #65	; 0x41
 80043d0:	20d9      	movs	r0, #217	; 0xd9
 80043d2:	f7fd fa80 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1");
 80043d6:	499d      	ldr	r1, [pc, #628]	; (800464c <showWSLedPanel+0x34c>)
 80043d8:	4896      	ldr	r0, [pc, #600]	; (8004634 <showWSLedPanel+0x334>)
 80043da:	f00e ff69 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043de:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	2243      	movs	r2, #67	; 0x43
 80043ec:	21df      	movs	r1, #223	; 0xdf
 80043ee:	4891      	ldr	r0, [pc, #580]	; (8004634 <showWSLedPanel+0x334>)
 80043f0:	f7fd fcdc 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80043f4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	2305      	movs	r3, #5
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	2315      	movs	r3, #21
 8004400:	221e      	movs	r2, #30
 8004402:	2141      	movs	r1, #65	; 0x41
 8004404:	20fc      	movs	r0, #252	; 0xfc
 8004406:	f7fd fa66 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+10");
 800440a:	4991      	ldr	r1, [pc, #580]	; (8004650 <showWSLedPanel+0x350>)
 800440c:	4889      	ldr	r0, [pc, #548]	; (8004634 <showWSLedPanel+0x334>)
 800440e:	f00e ff4f 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8004412:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	2300      	movs	r3, #0
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	2243      	movs	r2, #67	; 0x43
 8004420:	f240 1101 	movw	r1, #257	; 0x101
 8004424:	4883      	ldr	r0, [pc, #524]	; (8004634 <showWSLedPanel+0x334>)
 8004426:	f7fd fcc1 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800442a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	2305      	movs	r3, #5
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2315      	movs	r3, #21
 8004436:	221e      	movs	r2, #30
 8004438:	2141      	movs	r1, #65	; 0x41
 800443a:	f240 101f 	movw	r0, #287	; 0x11f
 800443e:	f7fd fa4a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "OK");
 8004442:	4984      	ldr	r1, [pc, #528]	; (8004654 <showWSLedPanel+0x354>)
 8004444:	487b      	ldr	r0, [pc, #492]	; (8004634 <showWSLedPanel+0x334>)
 8004446:	f00e ff33 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800444a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	2300      	movs	r3, #0
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2300      	movs	r3, #0
 8004456:	2243      	movs	r2, #67	; 0x43
 8004458:	f44f 7192 	mov.w	r1, #292	; 0x124
 800445c:	4875      	ldr	r0, [pc, #468]	; (8004634 <showWSLedPanel+0x334>)
 800445e:	f7fd fca5 	bl	8001dac <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	2305      	movs	r3, #5
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2315      	movs	r3, #21
 800446e:	2228      	movs	r2, #40	; 0x28
 8004470:	215f      	movs	r1, #95	; 0x5f
 8004472:	2096      	movs	r0, #150	; 0x96
 8004474:	f7fd fa2f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MAX");
 8004478:	4977      	ldr	r1, [pc, #476]	; (8004658 <showWSLedPanel+0x358>)
 800447a:	486e      	ldr	r0, [pc, #440]	; (8004634 <showWSLedPanel+0x334>)
 800447c:	f00e ff18 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	2300      	movs	r3, #0
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2300      	movs	r3, #0
 800448c:	2261      	movs	r2, #97	; 0x61
 800448e:	219b      	movs	r1, #155	; 0x9b
 8004490:	4868      	ldr	r0, [pc, #416]	; (8004634 <showWSLedPanel+0x334>)
 8004492:	f7fd fc8b 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	2305      	movs	r3, #5
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2315      	movs	r3, #21
 80044a2:	2228      	movs	r2, #40	; 0x28
 80044a4:	215f      	movs	r1, #95	; 0x5f
 80044a6:	20ca      	movs	r0, #202	; 0xca
 80044a8:	f7fd fa15 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MID");
 80044ac:	496b      	ldr	r1, [pc, #428]	; (800465c <showWSLedPanel+0x35c>)
 80044ae:	4861      	ldr	r0, [pc, #388]	; (8004634 <showWSLedPanel+0x334>)
 80044b0:	f00e fefe 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80044b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	2261      	movs	r2, #97	; 0x61
 80044c2:	21d2      	movs	r1, #210	; 0xd2
 80044c4:	485b      	ldr	r0, [pc, #364]	; (8004634 <showWSLedPanel+0x334>)
 80044c6:	f7fd fc71 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80044ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	2305      	movs	r3, #5
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2315      	movs	r3, #21
 80044d6:	2228      	movs	r2, #40	; 0x28
 80044d8:	215f      	movs	r1, #95	; 0x5f
 80044da:	20fe      	movs	r0, #254	; 0xfe
 80044dc:	f7fd f9fb 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MIN");
 80044e0:	495f      	ldr	r1, [pc, #380]	; (8004660 <showWSLedPanel+0x360>)
 80044e2:	4854      	ldr	r0, [pc, #336]	; (8004634 <showWSLedPanel+0x334>)
 80044e4:	f00e fee4 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80044e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	2261      	movs	r2, #97	; 0x61
 80044f6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80044fa:	484e      	ldr	r0, [pc, #312]	; (8004634 <showWSLedPanel+0x334>)
 80044fc:	f7fd fc56 	bl	8001dac <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004500:	231f      	movs	r3, #31
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	2305      	movs	r3, #5
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2315      	movs	r3, #21
 800450a:	2228      	movs	r2, #40	; 0x28
 800450c:	217d      	movs	r1, #125	; 0x7d
 800450e:	2096      	movs	r0, #150	; 0x96
 8004510:	f7fd f9e1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MAX");
 8004514:	4950      	ldr	r1, [pc, #320]	; (8004658 <showWSLedPanel+0x358>)
 8004516:	4847      	ldr	r0, [pc, #284]	; (8004634 <showWSLedPanel+0x334>)
 8004518:	f00e feca 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800451c:	231f      	movs	r3, #31
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	2300      	movs	r3, #0
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	227f      	movs	r2, #127	; 0x7f
 8004528:	219b      	movs	r1, #155	; 0x9b
 800452a:	4842      	ldr	r0, [pc, #264]	; (8004634 <showWSLedPanel+0x334>)
 800452c:	f7fd fc3e 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004530:	231f      	movs	r3, #31
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	2305      	movs	r3, #5
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2315      	movs	r3, #21
 800453a:	2228      	movs	r2, #40	; 0x28
 800453c:	217d      	movs	r1, #125	; 0x7d
 800453e:	20ca      	movs	r0, #202	; 0xca
 8004540:	f7fd f9c9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MID");
 8004544:	4945      	ldr	r1, [pc, #276]	; (800465c <showWSLedPanel+0x35c>)
 8004546:	483b      	ldr	r0, [pc, #236]	; (8004634 <showWSLedPanel+0x334>)
 8004548:	f00e feb2 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800454c:	231f      	movs	r3, #31
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	227f      	movs	r2, #127	; 0x7f
 8004558:	21d2      	movs	r1, #210	; 0xd2
 800455a:	4836      	ldr	r0, [pc, #216]	; (8004634 <showWSLedPanel+0x334>)
 800455c:	f7fd fc26 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004560:	231f      	movs	r3, #31
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	2305      	movs	r3, #5
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2315      	movs	r3, #21
 800456a:	2228      	movs	r2, #40	; 0x28
 800456c:	217d      	movs	r1, #125	; 0x7d
 800456e:	20fe      	movs	r0, #254	; 0xfe
 8004570:	f7fd f9b1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MIN");
 8004574:	493a      	ldr	r1, [pc, #232]	; (8004660 <showWSLedPanel+0x360>)
 8004576:	482f      	ldr	r0, [pc, #188]	; (8004634 <showWSLedPanel+0x334>)
 8004578:	f00e fe9a 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800457c:	231f      	movs	r3, #31
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2300      	movs	r3, #0
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	227f      	movs	r2, #127	; 0x7f
 8004588:	f44f 7183 	mov.w	r1, #262	; 0x106
 800458c:	4829      	ldr	r0, [pc, #164]	; (8004634 <showWSLedPanel+0x334>)
 800458e:	f7fd fc0d 	bl	8001dac <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004592:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	2305      	movs	r3, #5
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	2315      	movs	r3, #21
 800459e:	2250      	movs	r2, #80	; 0x50
 80045a0:	219c      	movs	r1, #156	; 0x9c
 80045a2:	2014      	movs	r0, #20
 80045a4:	f7fd f997 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "DAILY");
 80045a8:	492e      	ldr	r1, [pc, #184]	; (8004664 <showWSLedPanel+0x364>)
 80045aa:	4822      	ldr	r0, [pc, #136]	; (8004634 <showWSLedPanel+0x334>)
 80045ac:	f00e fe80 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 80045b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	229e      	movs	r2, #158	; 0x9e
 80045be:	211c      	movs	r1, #28
 80045c0:	481c      	ldr	r0, [pc, #112]	; (8004634 <showWSLedPanel+0x334>)
 80045c2:	f7fd fbf3 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80045c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	2305      	movs	r3, #5
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2315      	movs	r3, #21
 80045d2:	2250      	movs	r2, #80	; 0x50
 80045d4:	219c      	movs	r1, #156	; 0x9c
 80045d6:	2078      	movs	r0, #120	; 0x78
 80045d8:	f7fd f97d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "OFF");
 80045dc:	4922      	ldr	r1, [pc, #136]	; (8004668 <showWSLedPanel+0x368>)
 80045de:	4815      	ldr	r0, [pc, #84]	; (8004634 <showWSLedPanel+0x334>)
 80045e0:	f00e fe66 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80045e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2300      	movs	r3, #0
 80045f0:	229e      	movs	r2, #158	; 0x9e
 80045f2:	2187      	movs	r1, #135	; 0x87
 80045f4:	480f      	ldr	r0, [pc, #60]	; (8004634 <showWSLedPanel+0x334>)
 80045f6:	f7fd fbd9 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80045fa:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	2305      	movs	r3, #5
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	2315      	movs	r3, #21
 8004606:	2250      	movs	r2, #80	; 0x50
 8004608:	219c      	movs	r1, #156	; 0x9c
 800460a:	20dc      	movs	r0, #220	; 0xdc
 800460c:	f7fd f963 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "NIGHT");
 8004610:	4916      	ldr	r1, [pc, #88]	; (800466c <showWSLedPanel+0x36c>)
 8004612:	4808      	ldr	r0, [pc, #32]	; (8004634 <showWSLedPanel+0x334>)
 8004614:	f00e fe4c 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8004618:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	2300      	movs	r3, #0
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	229e      	movs	r2, #158	; 0x9e
 8004626:	21e9      	movs	r1, #233	; 0xe9
 8004628:	e022      	b.n	8004670 <showWSLedPanel+0x370>
 800462a:	bf00      	nop
 800462c:	0802abac 	.word	0x0802abac
 8004630:	080172ac 	.word	0x080172ac
 8004634:	200002d8 	.word	0x200002d8
 8004638:	20000034 	.word	0x20000034
 800463c:	080172b8 	.word	0x080172b8
 8004640:	080172c8 	.word	0x080172c8
 8004644:	080172d0 	.word	0x080172d0
 8004648:	08028c34 	.word	0x08028c34
 800464c:	08017234 	.word	0x08017234
 8004650:	0801723c 	.word	0x0801723c
 8004654:	080172d8 	.word	0x080172d8
 8004658:	080172dc 	.word	0x080172dc
 800465c:	080172e0 	.word	0x080172e0
 8004660:	080172e4 	.word	0x080172e4
 8004664:	080172e8 	.word	0x080172e8
 8004668:	08017284 	.word	0x08017284
 800466c:	080172f0 	.word	0x080172f0
 8004670:	482b      	ldr	r0, [pc, #172]	; (8004720 <showWSLedPanel+0x420>)
 8004672:	f7fd fb9b 	bl	8001dac <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004676:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	2305      	movs	r3, #5
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2315      	movs	r3, #21
 8004682:	2250      	movs	r2, #80	; 0x50
 8004684:	21bb      	movs	r1, #187	; 0xbb
 8004686:	2046      	movs	r0, #70	; 0x46
 8004688:	f7fd f925 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "SUNRISE");
 800468c:	4925      	ldr	r1, [pc, #148]	; (8004724 <showWSLedPanel+0x424>)
 800468e:	4824      	ldr	r0, [pc, #144]	; (8004720 <showWSLedPanel+0x420>)
 8004690:	f00e fe0e 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004694:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	2300      	movs	r3, #0
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	22bd      	movs	r2, #189	; 0xbd
 80046a2:	214e      	movs	r1, #78	; 0x4e
 80046a4:	481e      	ldr	r0, [pc, #120]	; (8004720 <showWSLedPanel+0x420>)
 80046a6:	f7fd fb81 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 80046aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	2305      	movs	r3, #5
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	2315      	movs	r3, #21
 80046b6:	2250      	movs	r2, #80	; 0x50
 80046b8:	21bb      	movs	r1, #187	; 0xbb
 80046ba:	20aa      	movs	r0, #170	; 0xaa
 80046bc:	f7fd f90b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "SUNSET");
 80046c0:	4919      	ldr	r1, [pc, #100]	; (8004728 <showWSLedPanel+0x428>)
 80046c2:	4817      	ldr	r0, [pc, #92]	; (8004720 <showWSLedPanel+0x420>)
 80046c4:	f00e fdf4 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80046c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	22bd      	movs	r2, #189	; 0xbd
 80046d6:	21b5      	movs	r1, #181	; 0xb5
 80046d8:	4811      	ldr	r0, [pc, #68]	; (8004720 <showWSLedPanel+0x420>)
 80046da:	f7fd fb67 	bl	8001dac <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80046de:	4813      	ldr	r0, [pc, #76]	; (800472c <showWSLedPanel+0x42c>)
 80046e0:	f7fd f94a 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80046e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	2305      	movs	r3, #5
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2314      	movs	r3, #20
 80046f0:	2264      	movs	r2, #100	; 0x64
 80046f2:	21d8      	movs	r1, #216	; 0xd8
 80046f4:	200a      	movs	r0, #10
 80046f6:	f7fd f8ee 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "<=BACK");
 80046fa:	490d      	ldr	r1, [pc, #52]	; (8004730 <showWSLedPanel+0x430>)
 80046fc:	4808      	ldr	r0, [pc, #32]	; (8004720 <showWSLedPanel+0x420>)
 80046fe:	f00e fdd7 	bl	80132b0 <siprintf>
	EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004702:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	2300      	movs	r3, #0
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	22da      	movs	r2, #218	; 0xda
 8004710:	210d      	movs	r1, #13
 8004712:	4803      	ldr	r0, [pc, #12]	; (8004720 <showWSLedPanel+0x420>)
 8004714:	f7fd fb4a 	bl	8001dac <EF_PutString>


}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200002d8 	.word	0x200002d8
 8004724:	080172f8 	.word	0x080172f8
 8004728:	08017300 	.word	0x08017300
 800472c:	08028c34 	.word	0x08028c34
 8004730:	0801725c 	.word	0x0801725c

08004734 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b090      	sub	sp, #64	; 0x40
 8004738:	af02      	add	r7, sp, #8
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
 8004772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004776:	2100      	movs	r1, #0
 8004778:	460a      	mov	r2, r1
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	460a      	mov	r2, r1
 800477e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	f107 0320 	add.w	r3, r7, #32
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	f107 0318 	add.w	r3, r7, #24
 8004796:	2100      	movs	r1, #0
 8004798:	460a      	mov	r2, r1
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	460a      	mov	r2, r1
 800479e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	2305      	movs	r3, #5
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2314      	movs	r3, #20
 80047ba:	2214      	movs	r2, #20
 80047bc:	2132      	movs	r1, #50	; 0x32
 80047be:	203c      	movs	r0, #60	; 0x3c
 80047c0:	f7fd f80c 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	2305      	movs	r3, #5
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2314      	movs	r3, #20
 80047d0:	2214      	movs	r2, #20
 80047d2:	2132      	movs	r1, #50	; 0x32
 80047d4:	205a      	movs	r0, #90	; 0x5a
 80047d6:	f7fd f801 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	2305      	movs	r3, #5
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2314      	movs	r3, #20
 80047e6:	2214      	movs	r2, #20
 80047e8:	2132      	movs	r1, #50	; 0x32
 80047ea:	2078      	movs	r0, #120	; 0x78
 80047ec:	f7fc fff6 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	2305      	movs	r3, #5
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	2314      	movs	r3, #20
 80047fc:	2214      	movs	r2, #20
 80047fe:	2132      	movs	r1, #50	; 0x32
 8004800:	2096      	movs	r0, #150	; 0x96
 8004802:	f7fc ffeb 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004806:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	2305      	movs	r3, #5
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2314      	movs	r3, #20
 8004812:	2214      	movs	r2, #20
 8004814:	2132      	movs	r1, #50	; 0x32
 8004816:	20b4      	movs	r0, #180	; 0xb4
 8004818:	f7fc ffe0 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800481c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	2305      	movs	r3, #5
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2314      	movs	r3, #20
 8004828:	2214      	movs	r2, #20
 800482a:	2132      	movs	r1, #50	; 0x32
 800482c:	20d2      	movs	r0, #210	; 0xd2
 800482e:	f7fc ffd5 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004832:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	2305      	movs	r3, #5
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2314      	movs	r3, #20
 800483e:	2214      	movs	r2, #20
 8004840:	2132      	movs	r1, #50	; 0x32
 8004842:	20f0      	movs	r0, #240	; 0xf0
 8004844:	f7fc ffca 	bl	80017dc <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fef8 	bl	8005640 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 ff61 	bl	800571a <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004858:	48c5      	ldr	r0, [pc, #788]	; (8004b70 <drawschedulePanel+0x43c>)
 800485a:	f7fd f88d 	bl	8001978 <EF_SetFont>
	  sprintf((char*)MsgFunctions, "PN WT ŚR CZ PT SB ND");
 800485e:	49c5      	ldr	r1, [pc, #788]	; (8004b74 <drawschedulePanel+0x440>)
 8004860:	48c5      	ldr	r0, [pc, #788]	; (8004b78 <drawschedulePanel+0x444>)
 8004862:	f00e fd25 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004866:	f24c 6318 	movw	r3, #50712	; 0xc618
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	2301      	movs	r3, #1
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2300      	movs	r3, #0
 8004872:	224b      	movs	r2, #75	; 0x4b
 8004874:	213c      	movs	r1, #60	; 0x3c
 8004876:	48c0      	ldr	r0, [pc, #768]	; (8004b78 <drawschedulePanel+0x444>)
 8004878:	f7fd fa98 	bl	8001dac <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800487c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	2305      	movs	r3, #5
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2314      	movs	r3, #20
 8004888:	2214      	movs	r2, #20
 800488a:	21aa      	movs	r1, #170	; 0xaa
 800488c:	2015      	movs	r0, #21
 800488e:	f7fc ffa5 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004892:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	2305      	movs	r3, #5
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2314      	movs	r3, #20
 800489e:	2214      	movs	r2, #20
 80048a0:	21aa      	movs	r1, #170	; 0xaa
 80048a2:	2035      	movs	r0, #53	; 0x35
 80048a4:	f7fc ff9a 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	2305      	movs	r3, #5
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2314      	movs	r3, #20
 80048b4:	2214      	movs	r2, #20
 80048b6:	21aa      	movs	r1, #170	; 0xaa
 80048b8:	2055      	movs	r0, #85	; 0x55
 80048ba:	f7fc ff8f 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2305      	movs	r3, #5
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2314      	movs	r3, #20
 80048ca:	2214      	movs	r2, #20
 80048cc:	21aa      	movs	r1, #170	; 0xaa
 80048ce:	2075      	movs	r0, #117	; 0x75
 80048d0:	f7fc ff84 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	2305      	movs	r3, #5
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	2314      	movs	r3, #20
 80048e0:	2214      	movs	r2, #20
 80048e2:	21aa      	movs	r1, #170	; 0xaa
 80048e4:	2095      	movs	r0, #149	; 0x95
 80048e6:	f7fc ff79 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2305      	movs	r3, #5
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2314      	movs	r3, #20
 80048f6:	2214      	movs	r2, #20
 80048f8:	21aa      	movs	r1, #170	; 0xaa
 80048fa:	20b5      	movs	r0, #181	; 0xb5
 80048fc:	f7fc ff6e 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004900:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	2305      	movs	r3, #5
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2314      	movs	r3, #20
 800490c:	2214      	movs	r2, #20
 800490e:	21aa      	movs	r1, #170	; 0xaa
 8004910:	20d5      	movs	r0, #213	; 0xd5
 8004912:	f7fc ff63 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004916:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	2305      	movs	r3, #5
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2314      	movs	r3, #20
 8004922:	2214      	movs	r2, #20
 8004924:	21aa      	movs	r1, #170	; 0xaa
 8004926:	20f5      	movs	r0, #245	; 0xf5
 8004928:	f7fc ff58 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800492c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	2305      	movs	r3, #5
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2314      	movs	r3, #20
 8004938:	2214      	movs	r2, #20
 800493a:	21aa      	movs	r1, #170	; 0xaa
 800493c:	f240 1015 	movw	r0, #277	; 0x115
 8004940:	f7fc ff4c 	bl	80017dc <GFX_DrawRoundRectangle>

	  sprintf((char*)MsgFunctions, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004944:	498d      	ldr	r1, [pc, #564]	; (8004b7c <drawschedulePanel+0x448>)
 8004946:	488c      	ldr	r0, [pc, #560]	; (8004b78 <drawschedulePanel+0x444>)
 8004948:	f00e fcb2 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800494c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	2301      	movs	r3, #1
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	22c3      	movs	r2, #195	; 0xc3
 800495a:	2115      	movs	r1, #21
 800495c:	4886      	ldr	r0, [pc, #536]	; (8004b78 <drawschedulePanel+0x444>)
 800495e:	f7fd fa25 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004962:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	2305      	movs	r3, #5
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2314      	movs	r3, #20
 800496e:	2222      	movs	r2, #34	; 0x22
 8004970:	2165      	movs	r1, #101	; 0x65
 8004972:	20bb      	movs	r0, #187	; 0xbb
 8004974:	f7fc ffaf 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1H");
 8004978:	4981      	ldr	r1, [pc, #516]	; (8004b80 <drawschedulePanel+0x44c>)
 800497a:	487f      	ldr	r0, [pc, #508]	; (8004b78 <drawschedulePanel+0x444>)
 800497c:	f00e fc98 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004980:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	2300      	movs	r3, #0
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2300      	movs	r3, #0
 800498c:	2268      	movs	r2, #104	; 0x68
 800498e:	21c1      	movs	r1, #193	; 0xc1
 8004990:	4879      	ldr	r0, [pc, #484]	; (8004b78 <drawschedulePanel+0x444>)
 8004992:	f7fd fa0b 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004996:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	2305      	movs	r3, #5
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2314      	movs	r3, #20
 80049a2:	2222      	movs	r2, #34	; 0x22
 80049a4:	2165      	movs	r1, #101	; 0x65
 80049a6:	20e9      	movs	r0, #233	; 0xe9
 80049a8:	f7fc ff95 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1M");
 80049ac:	4975      	ldr	r1, [pc, #468]	; (8004b84 <drawschedulePanel+0x450>)
 80049ae:	4872      	ldr	r0, [pc, #456]	; (8004b78 <drawschedulePanel+0x444>)
 80049b0:	f00e fc7e 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2300      	movs	r3, #0
 80049c0:	2268      	movs	r2, #104	; 0x68
 80049c2:	21ec      	movs	r1, #236	; 0xec
 80049c4:	486c      	ldr	r0, [pc, #432]	; (8004b78 <drawschedulePanel+0x444>)
 80049c6:	f7fd f9f1 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	2305      	movs	r3, #5
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2314      	movs	r3, #20
 80049d6:	2222      	movs	r2, #34	; 0x22
 80049d8:	2165      	movs	r1, #101	; 0x65
 80049da:	f240 1017 	movw	r0, #279	; 0x117
 80049de:	f7fc ff7a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+10M");
 80049e2:	4969      	ldr	r1, [pc, #420]	; (8004b88 <drawschedulePanel+0x454>)
 80049e4:	4864      	ldr	r0, [pc, #400]	; (8004b78 <drawschedulePanel+0x444>)
 80049e6:	f00e fc63 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	2268      	movs	r2, #104	; 0x68
 80049f8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80049fc:	485e      	ldr	r0, [pc, #376]	; (8004b78 <drawschedulePanel+0x444>)
 80049fe:	f7fd f9d5 	bl	8001dac <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	2305      	movs	r3, #5
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2314      	movs	r3, #20
 8004a0e:	2222      	movs	r2, #34	; 0x22
 8004a10:	2188      	movs	r1, #136	; 0x88
 8004a12:	20bb      	movs	r0, #187	; 0xbb
 8004a14:	f7fc ff5f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1H");
 8004a18:	4959      	ldr	r1, [pc, #356]	; (8004b80 <drawschedulePanel+0x44c>)
 8004a1a:	4857      	ldr	r0, [pc, #348]	; (8004b78 <drawschedulePanel+0x444>)
 8004a1c:	f00e fc48 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	228b      	movs	r2, #139	; 0x8b
 8004a2e:	21c1      	movs	r1, #193	; 0xc1
 8004a30:	4851      	ldr	r0, [pc, #324]	; (8004b78 <drawschedulePanel+0x444>)
 8004a32:	f7fd f9bb 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	2305      	movs	r3, #5
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2314      	movs	r3, #20
 8004a42:	2222      	movs	r2, #34	; 0x22
 8004a44:	2188      	movs	r1, #136	; 0x88
 8004a46:	20e9      	movs	r0, #233	; 0xe9
 8004a48:	f7fc ff45 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1M");
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <drawschedulePanel+0x450>)
 8004a4e:	484a      	ldr	r0, [pc, #296]	; (8004b78 <drawschedulePanel+0x444>)
 8004a50:	f00e fc2e 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	228b      	movs	r2, #139	; 0x8b
 8004a62:	21ec      	movs	r1, #236	; 0xec
 8004a64:	4844      	ldr	r0, [pc, #272]	; (8004b78 <drawschedulePanel+0x444>)
 8004a66:	f7fd f9a1 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	2305      	movs	r3, #5
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2314      	movs	r3, #20
 8004a76:	2222      	movs	r2, #34	; 0x22
 8004a78:	2188      	movs	r1, #136	; 0x88
 8004a7a:	f240 1017 	movw	r0, #279	; 0x117
 8004a7e:	f7fc ff2a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+10M");
 8004a82:	4941      	ldr	r1, [pc, #260]	; (8004b88 <drawschedulePanel+0x454>)
 8004a84:	483c      	ldr	r0, [pc, #240]	; (8004b78 <drawschedulePanel+0x444>)
 8004a86:	f00e fc13 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	2300      	movs	r3, #0
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	228b      	movs	r2, #139	; 0x8b
 8004a98:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004a9c:	4836      	ldr	r0, [pc, #216]	; (8004b78 <drawschedulePanel+0x444>)
 8004a9e:	f7fd f985 	bl	8001dac <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004aa2:	483a      	ldr	r0, [pc, #232]	; (8004b8c <drawschedulePanel+0x458>)
 8004aa4:	f7fc ff68 	bl	8001978 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	f040 80d9 	bne.w	8004c62 <drawschedulePanel+0x52e>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004ab0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fe fb9b 	bl	80031f2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004abc:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f7fe fbb9 	bl	800323a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004ac8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004acc:	4619      	mov	r1, r3
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f7fe fbd7 	bl	8003282 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ad8:	4619      	mov	r1, r3
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7fe fbf5 	bl	80032ca <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8004ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f7fe fa32 	bl	8002f50 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8004aec:	f107 031c 	add.w	r3, r7, #28
 8004af0:	4619      	mov	r1, r3
 8004af2:	2001      	movs	r0, #1
 8004af4:	f7fe faa8 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 8004af8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004afc:	2b17      	cmp	r3, #23
 8004afe:	d902      	bls.n	8004b06 <drawschedulePanel+0x3d2>
 8004b00:	2317      	movs	r3, #23
 8004b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 8004b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b0a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b0c:	d902      	bls.n	8004b14 <drawschedulePanel+0x3e0>
 8004b0e:	233b      	movs	r3, #59	; 0x3b
 8004b10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 8004b14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b18:	2b17      	cmp	r3, #23
 8004b1a:	d902      	bls.n	8004b22 <drawschedulePanel+0x3ee>
 8004b1c:	2317      	movs	r3, #23
 8004b1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 8004b22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b26:	2b3b      	cmp	r3, #59	; 0x3b
 8004b28:	d902      	bls.n	8004b30 <drawschedulePanel+0x3fc>
 8004b2a:	233b      	movs	r3, #59	; 0x3b
 8004b2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)MsgFunctions, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b34:	2b09      	cmp	r3, #9
 8004b36:	d80d      	bhi.n	8004b54 <drawschedulePanel+0x420>
 8004b38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b3c:	2b09      	cmp	r3, #9
 8004b3e:	d809      	bhi.n	8004b54 <drawschedulePanel+0x420>
 8004b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b44:	461a      	mov	r2, r3
 8004b46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b4a:	4911      	ldr	r1, [pc, #68]	; (8004b90 <drawschedulePanel+0x45c>)
 8004b4c:	480a      	ldr	r0, [pc, #40]	; (8004b78 <drawschedulePanel+0x444>)
 8004b4e:	f00e fbaf 	bl	80132b0 <siprintf>
 8004b52:	e038      	b.n	8004bc6 <drawschedulePanel+0x492>
		  else if(hourOnschedule1 < 10) sprintf((char*)MsgFunctions, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b58:	2b09      	cmp	r3, #9
 8004b5a:	d81d      	bhi.n	8004b98 <drawschedulePanel+0x464>
 8004b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b60:	461a      	mov	r2, r3
 8004b62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b66:	490b      	ldr	r1, [pc, #44]	; (8004b94 <drawschedulePanel+0x460>)
 8004b68:	4803      	ldr	r0, [pc, #12]	; (8004b78 <drawschedulePanel+0x444>)
 8004b6a:	f00e fba1 	bl	80132b0 <siprintf>
 8004b6e:	e02a      	b.n	8004bc6 <drawschedulePanel+0x492>
 8004b70:	08028c34 	.word	0x08028c34
 8004b74:	08017308 	.word	0x08017308
 8004b78:	200002d8 	.word	0x200002d8
 8004b7c:	08017320 	.word	0x08017320
 8004b80:	08017344 	.word	0x08017344
 8004b84:	08017348 	.word	0x08017348
 8004b88:	0801734c 	.word	0x0801734c
 8004b8c:	0802abac 	.word	0x0802abac
 8004b90:	08017354 	.word	0x08017354
 8004b94:	08017364 	.word	0x08017364
		  else if (minuteOnschedule1 < 10) sprintf((char*)MsgFunctions, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004b98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	d809      	bhi.n	8004bb4 <drawschedulePanel+0x480>
 8004ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004baa:	4994      	ldr	r1, [pc, #592]	; (8004dfc <drawschedulePanel+0x6c8>)
 8004bac:	4894      	ldr	r0, [pc, #592]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004bae:	f00e fb7f 	bl	80132b0 <siprintf>
 8004bb2:	e008      	b.n	8004bc6 <drawschedulePanel+0x492>
		  else sprintf((char*)MsgFunctions, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004bbe:	4991      	ldr	r1, [pc, #580]	; (8004e04 <drawschedulePanel+0x6d0>)
 8004bc0:	488f      	ldr	r0, [pc, #572]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004bc2:	f00e fb75 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004bc6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2264      	movs	r2, #100	; 0x64
 8004bd4:	210a      	movs	r1, #10
 8004bd6:	488a      	ldr	r0, [pc, #552]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004bd8:	f7fd f8e8 	bl	8001dac <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)MsgFunctions, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004bdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d80d      	bhi.n	8004c00 <drawschedulePanel+0x4cc>
 8004be4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d809      	bhi.n	8004c00 <drawschedulePanel+0x4cc>
 8004bec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bf6:	4984      	ldr	r1, [pc, #528]	; (8004e08 <drawschedulePanel+0x6d4>)
 8004bf8:	4881      	ldr	r0, [pc, #516]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004bfa:	f00e fb59 	bl	80132b0 <siprintf>
 8004bfe:	e024      	b.n	8004c4a <drawschedulePanel+0x516>
		  else if(hourOffschedule1 < 10) sprintf((char*)MsgFunctions, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004c00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d809      	bhi.n	8004c1c <drawschedulePanel+0x4e8>
 8004c08:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c12:	497e      	ldr	r1, [pc, #504]	; (8004e0c <drawschedulePanel+0x6d8>)
 8004c14:	487a      	ldr	r0, [pc, #488]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004c16:	f00e fb4b 	bl	80132b0 <siprintf>
 8004c1a:	e016      	b.n	8004c4a <drawschedulePanel+0x516>
		  else if (minuteOffschedule1 < 10) sprintf((char*)MsgFunctions, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004c1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	d809      	bhi.n	8004c38 <drawschedulePanel+0x504>
 8004c24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c2e:	4978      	ldr	r1, [pc, #480]	; (8004e10 <drawschedulePanel+0x6dc>)
 8004c30:	4873      	ldr	r0, [pc, #460]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004c32:	f00e fb3d 	bl	80132b0 <siprintf>
 8004c36:	e008      	b.n	8004c4a <drawschedulePanel+0x516>
		  else sprintf((char*)MsgFunctions, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004c38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c42:	4974      	ldr	r1, [pc, #464]	; (8004e14 <drawschedulePanel+0x6e0>)
 8004c44:	486e      	ldr	r0, [pc, #440]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004c46:	f00e fb33 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c4a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	2301      	movs	r3, #1
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	2287      	movs	r2, #135	; 0x87
 8004c58:	210a      	movs	r1, #10
 8004c5a:	4869      	ldr	r0, [pc, #420]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004c5c:	f7fd f8a6 	bl	8001dac <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)MsgFunctions, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004c60:	e0c7      	b.n	8004df2 <drawschedulePanel+0x6be>
	  else if(NrOfschedule == 2)
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	f040 80c4 	bne.w	8004df2 <drawschedulePanel+0x6be>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004c6a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004c6e:	4619      	mov	r1, r3
 8004c70:	2002      	movs	r0, #2
 8004c72:	f7fe fabe 	bl	80031f2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004c76:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fe fadc 	bl	800323a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004c82:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004c86:	4619      	mov	r1, r3
 8004c88:	2002      	movs	r0, #2
 8004c8a:	f7fe fafa 	bl	8003282 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c92:	4619      	mov	r1, r3
 8004c94:	2002      	movs	r0, #2
 8004c96:	f7fe fb18 	bl	80032ca <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	2002      	movs	r0, #2
 8004ca2:	f7fe f955 	bl	8002f50 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	4619      	mov	r1, r3
 8004cac:	2002      	movs	r0, #2
 8004cae:	f7fe f9cb 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cb6:	2b17      	cmp	r3, #23
 8004cb8:	d902      	bls.n	8004cc0 <drawschedulePanel+0x58c>
 8004cba:	2317      	movs	r3, #23
 8004cbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004cc0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cc4:	2b3b      	cmp	r3, #59	; 0x3b
 8004cc6:	d902      	bls.n	8004cce <drawschedulePanel+0x59a>
 8004cc8:	233b      	movs	r3, #59	; 0x3b
 8004cca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004cce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004cd2:	2b17      	cmp	r3, #23
 8004cd4:	d902      	bls.n	8004cdc <drawschedulePanel+0x5a8>
 8004cd6:	2317      	movs	r3, #23
 8004cd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004cdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ce0:	2b3b      	cmp	r3, #59	; 0x3b
 8004ce2:	d902      	bls.n	8004cea <drawschedulePanel+0x5b6>
 8004ce4:	233b      	movs	r3, #59	; 0x3b
 8004ce6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)MsgFunctions, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	d80d      	bhi.n	8004d0e <drawschedulePanel+0x5da>
 8004cf2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d809      	bhi.n	8004d0e <drawschedulePanel+0x5da>
 8004cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d04:	4944      	ldr	r1, [pc, #272]	; (8004e18 <drawschedulePanel+0x6e4>)
 8004d06:	483e      	ldr	r0, [pc, #248]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004d08:	f00e fad2 	bl	80132b0 <siprintf>
 8004d0c:	e024      	b.n	8004d58 <drawschedulePanel+0x624>
		  else if(hourOnschedule2 < 10) sprintf((char*)MsgFunctions, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	d809      	bhi.n	8004d2a <drawschedulePanel+0x5f6>
 8004d16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d20:	493e      	ldr	r1, [pc, #248]	; (8004e1c <drawschedulePanel+0x6e8>)
 8004d22:	4837      	ldr	r0, [pc, #220]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004d24:	f00e fac4 	bl	80132b0 <siprintf>
 8004d28:	e016      	b.n	8004d58 <drawschedulePanel+0x624>
		  else if (minuteOnschedule2 < 10) sprintf((char*)MsgFunctions, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004d2a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d809      	bhi.n	8004d46 <drawschedulePanel+0x612>
 8004d32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d36:	461a      	mov	r2, r3
 8004d38:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d3c:	4938      	ldr	r1, [pc, #224]	; (8004e20 <drawschedulePanel+0x6ec>)
 8004d3e:	4830      	ldr	r0, [pc, #192]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004d40:	f00e fab6 	bl	80132b0 <siprintf>
 8004d44:	e008      	b.n	8004d58 <drawschedulePanel+0x624>
		  else sprintf((char*)MsgFunctions, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004d46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d50:	4934      	ldr	r1, [pc, #208]	; (8004e24 <drawschedulePanel+0x6f0>)
 8004d52:	482b      	ldr	r0, [pc, #172]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004d54:	f00e faac 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	2264      	movs	r2, #100	; 0x64
 8004d66:	210a      	movs	r1, #10
 8004d68:	4825      	ldr	r0, [pc, #148]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004d6a:	f7fd f81f 	bl	8001dac <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)MsgFunctions, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	d80d      	bhi.n	8004d92 <drawschedulePanel+0x65e>
 8004d76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d7a:	2b09      	cmp	r3, #9
 8004d7c:	d809      	bhi.n	8004d92 <drawschedulePanel+0x65e>
 8004d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d82:	461a      	mov	r2, r3
 8004d84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d88:	4927      	ldr	r1, [pc, #156]	; (8004e28 <drawschedulePanel+0x6f4>)
 8004d8a:	481d      	ldr	r0, [pc, #116]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004d8c:	f00e fa90 	bl	80132b0 <siprintf>
 8004d90:	e024      	b.n	8004ddc <drawschedulePanel+0x6a8>
		  else if(hourOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004d92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d96:	2b09      	cmp	r3, #9
 8004d98:	d809      	bhi.n	8004dae <drawschedulePanel+0x67a>
 8004d9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004da4:	4921      	ldr	r1, [pc, #132]	; (8004e2c <drawschedulePanel+0x6f8>)
 8004da6:	4816      	ldr	r0, [pc, #88]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004da8:	f00e fa82 	bl	80132b0 <siprintf>
 8004dac:	e016      	b.n	8004ddc <drawschedulePanel+0x6a8>
		  else if (minuteOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004dae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004db2:	2b09      	cmp	r3, #9
 8004db4:	d809      	bhi.n	8004dca <drawschedulePanel+0x696>
 8004db6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004dc0:	491b      	ldr	r1, [pc, #108]	; (8004e30 <drawschedulePanel+0x6fc>)
 8004dc2:	480f      	ldr	r0, [pc, #60]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004dc4:	f00e fa74 	bl	80132b0 <siprintf>
 8004dc8:	e008      	b.n	8004ddc <drawschedulePanel+0x6a8>
		  else sprintf((char*)MsgFunctions, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004dca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004dd4:	4917      	ldr	r1, [pc, #92]	; (8004e34 <drawschedulePanel+0x700>)
 8004dd6:	480a      	ldr	r0, [pc, #40]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004dd8:	f00e fa6a 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ddc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	2301      	movs	r3, #1
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	2287      	movs	r2, #135	; 0x87
 8004dea:	210c      	movs	r1, #12
 8004dec:	4804      	ldr	r0, [pc, #16]	; (8004e00 <drawschedulePanel+0x6cc>)
 8004dee:	f7fc ffdd 	bl	8001dac <EF_PutString>
}
 8004df2:	bf00      	nop
 8004df4:	3738      	adds	r7, #56	; 0x38
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08017374 	.word	0x08017374
 8004e00:	200002d8 	.word	0x200002d8
 8004e04:	08017384 	.word	0x08017384
 8004e08:	08017394 	.word	0x08017394
 8004e0c:	080173a4 	.word	0x080173a4
 8004e10:	080173b4 	.word	0x080173b4
 8004e14:	080173c4 	.word	0x080173c4
 8004e18:	080173d4 	.word	0x080173d4
 8004e1c:	080173e4 	.word	0x080173e4
 8004e20:	080173f4 	.word	0x080173f4
 8004e24:	08017404 	.word	0x08017404
 8004e28:	08017414 	.word	0x08017414
 8004e2c:	08017424 	.word	0x08017424
 8004e30:	08017434 	.word	0x08017434
 8004e34:	08017444 	.word	0x08017444

08004e38 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004e3e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004e42:	f7fd f99d 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e46:	483f      	ldr	r0, [pc, #252]	; (8004f44 <showSchedule1Panel+0x10c>)
 8004e48:	f7fc fd96 	bl	8001978 <EF_SetFont>

	  // Display Header
	  sprintf((char*)MsgFunctions, "HARMONOGRAM 1");
 8004e4c:	493e      	ldr	r1, [pc, #248]	; (8004f48 <showSchedule1Panel+0x110>)
 8004e4e:	483f      	ldr	r0, [pc, #252]	; (8004f4c <showSchedule1Panel+0x114>)
 8004e50:	f00e fa2e 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e54:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e62:	220a      	movs	r2, #10
 8004e64:	212a      	movs	r1, #42	; 0x2a
 8004e66:	4839      	ldr	r0, [pc, #228]	; (8004f4c <showSchedule1Panel+0x114>)
 8004e68:	f7fc ffa0 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2329      	movs	r3, #41	; 0x29
 8004e74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e78:	2129      	movs	r1, #41	; 0x29
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7fc facc 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e80:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	232b      	movs	r3, #43	; 0x2b
 8004e88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e8c:	212b      	movs	r1, #43	; 0x2b
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7fc fac2 	bl	8001418 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7ff fc4d 	bl	8004734 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e9a:	482d      	ldr	r0, [pc, #180]	; (8004f50 <showSchedule1Panel+0x118>)
 8004e9c:	f7fc fd6c 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ea0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	2305      	movs	r3, #5
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2314      	movs	r3, #20
 8004eac:	225f      	movs	r2, #95	; 0x5f
 8004eae:	21d8      	movs	r1, #216	; 0xd8
 8004eb0:	20dc      	movs	r0, #220	; 0xdc
 8004eb2:	f7fc fd10 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "HARM. 2=>");
 8004eb6:	4927      	ldr	r1, [pc, #156]	; (8004f54 <showSchedule1Panel+0x11c>)
 8004eb8:	4824      	ldr	r0, [pc, #144]	; (8004f4c <showSchedule1Panel+0x114>)
 8004eba:	f00e f9f9 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ebe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	22da      	movs	r2, #218	; 0xda
 8004ecc:	21e6      	movs	r1, #230	; 0xe6
 8004ece:	481f      	ldr	r0, [pc, #124]	; (8004f4c <showSchedule1Panel+0x114>)
 8004ed0:	f7fc ff6c 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ed4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	2305      	movs	r3, #5
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2314      	movs	r3, #20
 8004ee0:	225a      	movs	r2, #90	; 0x5a
 8004ee2:	21d8      	movs	r1, #216	; 0xd8
 8004ee4:	2078      	movs	r0, #120	; 0x78
 8004ee6:	f7fc fcf6 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, " >POTW<");
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <showSchedule1Panel+0x120>)
 8004eec:	4817      	ldr	r0, [pc, #92]	; (8004f4c <showSchedule1Panel+0x114>)
 8004eee:	f00e f9df 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ef2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2300      	movs	r3, #0
 8004efe:	22da      	movs	r2, #218	; 0xda
 8004f00:	217e      	movs	r1, #126	; 0x7e
 8004f02:	4812      	ldr	r0, [pc, #72]	; (8004f4c <showSchedule1Panel+0x114>)
 8004f04:	f7fc ff52 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004f08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2305      	movs	r3, #5
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2314      	movs	r3, #20
 8004f14:	2264      	movs	r2, #100	; 0x64
 8004f16:	21d8      	movs	r1, #216	; 0xd8
 8004f18:	200a      	movs	r0, #10
 8004f1a:	f7fc fcdc 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<= CLOCK");
 8004f1e:	490f      	ldr	r1, [pc, #60]	; (8004f5c <showSchedule1Panel+0x124>)
 8004f20:	480a      	ldr	r0, [pc, #40]	; (8004f4c <showSchedule1Panel+0x114>)
 8004f22:	f00e f9c5 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004f26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2300      	movs	r3, #0
 8004f32:	22da      	movs	r2, #218	; 0xda
 8004f34:	210d      	movs	r1, #13
 8004f36:	4805      	ldr	r0, [pc, #20]	; (8004f4c <showSchedule1Panel+0x114>)
 8004f38:	f7fc ff38 	bl	8001dac <EF_PutString>
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	0802abac 	.word	0x0802abac
 8004f48:	08017454 	.word	0x08017454
 8004f4c:	200002d8 	.word	0x200002d8
 8004f50:	08028c34 	.word	0x08028c34
 8004f54:	08017464 	.word	0x08017464
 8004f58:	08017470 	.word	0x08017470
 8004f5c:	08017478 	.word	0x08017478

08004f60 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004f66:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004f6a:	f7fd f909 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004f6e:	4832      	ldr	r0, [pc, #200]	; (8005038 <showSchedule2Panel+0xd8>)
 8004f70:	f7fc fd02 	bl	8001978 <EF_SetFont>
	  // Display Header
	  sprintf((char*)MsgFunctions, "HARMONOGRAM 2");
 8004f74:	4931      	ldr	r1, [pc, #196]	; (800503c <showSchedule2Panel+0xdc>)
 8004f76:	4832      	ldr	r0, [pc, #200]	; (8005040 <showSchedule2Panel+0xe0>)
 8004f78:	f00e f99a 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004f7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	212a      	movs	r1, #42	; 0x2a
 8004f8e:	482c      	ldr	r0, [pc, #176]	; (8005040 <showSchedule2Panel+0xe0>)
 8004f90:	f7fc ff0c 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004f94:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2329      	movs	r3, #41	; 0x29
 8004f9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fa0:	2129      	movs	r1, #41	; 0x29
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f7fc fa38 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004fa8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	232b      	movs	r3, #43	; 0x2b
 8004fb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fb4:	212b      	movs	r1, #43	; 0x2b
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fc fa2e 	bl	8001418 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004fbc:	2002      	movs	r0, #2
 8004fbe:	f7ff fbb9 	bl	8004734 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004fc2:	4820      	ldr	r0, [pc, #128]	; (8005044 <showSchedule2Panel+0xe4>)
 8004fc4:	f7fc fcd8 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004fc8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	2305      	movs	r3, #5
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2314      	movs	r3, #20
 8004fd4:	225a      	movs	r2, #90	; 0x5a
 8004fd6:	21d8      	movs	r1, #216	; 0xd8
 8004fd8:	2078      	movs	r0, #120	; 0x78
 8004fda:	f7fc fc7c 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, " >POTW<");
 8004fde:	491a      	ldr	r1, [pc, #104]	; (8005048 <showSchedule2Panel+0xe8>)
 8004fe0:	4817      	ldr	r0, [pc, #92]	; (8005040 <showSchedule2Panel+0xe0>)
 8004fe2:	f00e f965 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004fe6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	22da      	movs	r2, #218	; 0xda
 8004ff4:	217e      	movs	r1, #126	; 0x7e
 8004ff6:	4812      	ldr	r0, [pc, #72]	; (8005040 <showSchedule2Panel+0xe0>)
 8004ff8:	f7fc fed8 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ffc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2305      	movs	r3, #5
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2314      	movs	r3, #20
 8005008:	2264      	movs	r2, #100	; 0x64
 800500a:	21d8      	movs	r1, #216	; 0xd8
 800500c:	200a      	movs	r0, #10
 800500e:	f7fc fc62 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<= CLOCK");
 8005012:	490e      	ldr	r1, [pc, #56]	; (800504c <showSchedule2Panel+0xec>)
 8005014:	480a      	ldr	r0, [pc, #40]	; (8005040 <showSchedule2Panel+0xe0>)
 8005016:	f00e f94b 	bl	80132b0 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800501a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	2300      	movs	r3, #0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	22da      	movs	r2, #218	; 0xda
 8005028:	210d      	movs	r1, #13
 800502a:	4805      	ldr	r0, [pc, #20]	; (8005040 <showSchedule2Panel+0xe0>)
 800502c:	f7fc febe 	bl	8001dac <EF_PutString>
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	0802abac 	.word	0x0802abac
 800503c:	08017484 	.word	0x08017484
 8005040:	200002d8 	.word	0x200002d8
 8005044:	08028c34 	.word	0x08028c34
 8005048:	08017470 	.word	0x08017470
 800504c:	08017478 	.word	0x08017478

08005050 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8005056:	f7fd fd37 	bl	8002ac8 <DS3231_GetHour>
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 800505e:	f7fd fd3f 	bl	8002ae0 <DS3231_GetMinute>
 8005062:	4603      	mov	r3, r0
 8005064:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8005066:	482f      	ldr	r0, [pc, #188]	; (8005124 <ChangeHourOnScreen+0xd4>)
 8005068:	f7fc fc86 	bl	8001978 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 800506c:	4b2e      	ldr	r3, [pc, #184]	; (8005128 <ChangeHourOnScreen+0xd8>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	79fa      	ldrb	r2, [r7, #7]
 8005072:	429a      	cmp	r2, r3
 8005074:	d021      	beq.n	80050ba <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <ChangeHourOnScreen+0xdc>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11a      	bne.n	80050b4 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b09      	cmp	r3, #9
 8005082:	d806      	bhi.n	8005092 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)MsgFunctions, " 0%d", CHour);
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	461a      	mov	r2, r3
 8005088:	4929      	ldr	r1, [pc, #164]	; (8005130 <ChangeHourOnScreen+0xe0>)
 800508a:	482a      	ldr	r0, [pc, #168]	; (8005134 <ChangeHourOnScreen+0xe4>)
 800508c:	f00e f910 	bl	80132b0 <siprintf>
 8005090:	e005      	b.n	800509e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)MsgFunctions, " %d", CHour);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	461a      	mov	r2, r3
 8005096:	4928      	ldr	r1, [pc, #160]	; (8005138 <ChangeHourOnScreen+0xe8>)
 8005098:	4826      	ldr	r0, [pc, #152]	; (8005134 <ChangeHourOnScreen+0xe4>)
 800509a:	f00e f909 	bl	80132b0 <siprintf>
			  }
			  EF_PutString(MsgFunctions, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800509e:	f24c 6318 	movw	r3, #50712	; 0xc618
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	2301      	movs	r3, #1
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	2232      	movs	r2, #50	; 0x32
 80050ac:	2161      	movs	r1, #97	; 0x61
 80050ae:	4821      	ldr	r0, [pc, #132]	; (8005134 <ChangeHourOnScreen+0xe4>)
 80050b0:	f7fc fe7c 	bl	8001dac <EF_PutString>
		  }
		  OldHours = CHour;
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <ChangeHourOnScreen+0xd8>)
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <ChangeHourOnScreen+0xec>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	79ba      	ldrb	r2, [r7, #6]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d02b      	beq.n	800511c <ChangeHourOnScreen+0xcc>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 80050c4:	f7fd fcf4 	bl	8002ab0 <DS3231_GetDayOfWeek>
 80050c8:	4603      	mov	r3, r0
 80050ca:	717b      	strb	r3, [r7, #5]
		makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules
 80050cc:	797a      	ldrb	r2, [r7, #5]
 80050ce:	79b9      	ldrb	r1, [r7, #6]
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fba4 	bl	8005820 <makeScheduleActivity>

		  if(State == MENUTFT_PARAMETERS)
 80050d8:	4b14      	ldr	r3, [pc, #80]	; (800512c <ChangeHourOnScreen+0xdc>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d11a      	bne.n	8005116 <ChangeHourOnScreen+0xc6>
		  {
			  if(CMinute < 10)
 80050e0:	79bb      	ldrb	r3, [r7, #6]
 80050e2:	2b09      	cmp	r3, #9
 80050e4:	d806      	bhi.n	80050f4 <ChangeHourOnScreen+0xa4>
			  {
				  sprintf((char*)MsgFunctions, " 0%d  ", CMinute);
 80050e6:	79bb      	ldrb	r3, [r7, #6]
 80050e8:	461a      	mov	r2, r3
 80050ea:	4915      	ldr	r1, [pc, #84]	; (8005140 <ChangeHourOnScreen+0xf0>)
 80050ec:	4811      	ldr	r0, [pc, #68]	; (8005134 <ChangeHourOnScreen+0xe4>)
 80050ee:	f00e f8df 	bl	80132b0 <siprintf>
 80050f2:	e005      	b.n	8005100 <ChangeHourOnScreen+0xb0>
			  }
			  else
			  {
				  sprintf((char*)MsgFunctions, " %d  ", CMinute);
 80050f4:	79bb      	ldrb	r3, [r7, #6]
 80050f6:	461a      	mov	r2, r3
 80050f8:	4912      	ldr	r1, [pc, #72]	; (8005144 <ChangeHourOnScreen+0xf4>)
 80050fa:	480e      	ldr	r0, [pc, #56]	; (8005134 <ChangeHourOnScreen+0xe4>)
 80050fc:	f00e f8d8 	bl	80132b0 <siprintf>
			  }

			  EF_PutString(MsgFunctions, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005100:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	2301      	movs	r3, #1
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	2232      	movs	r2, #50	; 0x32
 800510e:	2196      	movs	r1, #150	; 0x96
 8005110:	4808      	ldr	r0, [pc, #32]	; (8005134 <ChangeHourOnScreen+0xe4>)
 8005112:	f7fc fe4b 	bl	8001dac <EF_PutString>
		  }
		  OldMinutes = CMinute;
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <ChangeHourOnScreen+0xec>)
 8005118:	79bb      	ldrb	r3, [r7, #6]
 800511a:	7013      	strb	r3, [r2, #0]
	  }

}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	0802abac 	.word	0x0802abac
 8005128:	20000318 	.word	0x20000318
 800512c:	200008e8 	.word	0x200008e8
 8005130:	08017494 	.word	0x08017494
 8005134:	200002d8 	.word	0x200002d8
 8005138:	0801749c 	.word	0x0801749c
 800513c:	20000319 	.word	0x20000319
 8005140:	080174a0 	.word	0x080174a0
 8005144:	080174a8 	.word	0x080174a8

08005148 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 800515c:	f7fd fe88 	bl	8002e70 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8005160:	f7fd febe 	bl	8002ee0 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8005164:	e005      	b.n	8005172 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8005166:	2018      	movs	r0, #24
 8005168:	f005 f816 	bl	800a198 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 800516c:	2019      	movs	r0, #25
 800516e:	f005 f813 	bl	800a198 <SendComand>
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af02      	add	r7, sp, #8
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d13e      	bne.n	800520e <predefinedActivityKarmienie+0x92>
	{
		EEPROM_RelayStateRestore();
 8005190:	f7fd fe6e 	bl	8002e70 <EEPROM_RelayStateRestore>
		ActivityButtonState[0] = 0;
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <predefinedActivityKarmienie+0xac>)
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]

		EF_SetFont(&arial_11ptFontInfo);
 800519a:	4824      	ldr	r0, [pc, #144]	; (800522c <predefinedActivityKarmienie+0xb0>)
 800519c:	f7fc fbec 	bl	8001978 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	230a      	movs	r3, #10
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2328      	movs	r3, #40	; 0x28
 80051ac:	2278      	movs	r2, #120	; 0x78
 80051ae:	213c      	movs	r1, #60	; 0x3c
 80051b0:	2064      	movs	r0, #100	; 0x64
 80051b2:	f7fc fb90 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "KARMIENIE");
 80051b6:	491e      	ldr	r1, [pc, #120]	; (8005230 <predefinedActivityKarmienie+0xb4>)
 80051b8:	481e      	ldr	r0, [pc, #120]	; (8005234 <predefinedActivityKarmienie+0xb8>)
 80051ba:	f00e f879 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	223e      	movs	r2, #62	; 0x3e
 80051cc:	2177      	movs	r1, #119	; 0x77
 80051ce:	4819      	ldr	r0, [pc, #100]	; (8005234 <predefinedActivityKarmienie+0xb8>)
 80051d0:	f7fc fdec 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "OFF");
 80051d4:	4918      	ldr	r1, [pc, #96]	; (8005238 <predefinedActivityKarmienie+0xbc>)
 80051d6:	4817      	ldr	r0, [pc, #92]	; (8005234 <predefinedActivityKarmienie+0xb8>)
 80051d8:	f00e f86a 	bl	80132b0 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	2250      	movs	r2, #80	; 0x50
 80051ea:	2193      	movs	r1, #147	; 0x93
 80051ec:	4811      	ldr	r0, [pc, #68]	; (8005234 <predefinedActivityKarmienie+0xb8>)
 80051ee:	f7fc fddd 	bl	8001dac <EF_PutString>

		if(State == MENUTFT_LIGHTS)
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d103      	bne.n	8005200 <predefinedActivityKarmienie+0x84>
		{
			SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80051f8:	2016      	movs	r0, #22
 80051fa:	f004 ffcd 	bl	800a198 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
		ActivityButtonState[0] = 1;
	}

}
 80051fe:	e00f      	b.n	8005220 <predefinedActivityKarmienie+0xa4>
		else if(State == MENUTFT_SWITCH)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d10c      	bne.n	8005220 <predefinedActivityKarmienie+0xa4>
			SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current lights state
 8005206:	2015      	movs	r0, #21
 8005208:	f004 ffc6 	bl	800a198 <SendComand>
}
 800520c:	e008      	b.n	8005220 <predefinedActivityKarmienie+0xa4>
		SendComand(UCMD_RELAY_ALL_OFF);
 800520e:	2018      	movs	r0, #24
 8005210:	f004 ffc2 	bl	800a198 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8005214:	4809      	ldr	r0, [pc, #36]	; (800523c <predefinedActivityKarmienie+0xc0>)
 8005216:	f00b fb87 	bl	8010928 <HAL_TIM_Base_Start_IT>
		ActivityButtonState[0] = 1;
 800521a:	4b03      	ldr	r3, [pc, #12]	; (8005228 <predefinedActivityKarmienie+0xac>)
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200002d4 	.word	0x200002d4
 800522c:	08028c34 	.word	0x08028c34
 8005230:	08017274 	.word	0x08017274
 8005234:	200002d8 	.word	0x200002d8
 8005238:	08017284 	.word	0x08017284
 800523c:	20000ae0 	.word	0x20000ae0

08005240 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005246:	487d      	ldr	r0, [pc, #500]	; (800543c <drawCurrentStateOfSwitches+0x1fc>)
 8005248:	f7fc fb96 	bl	8001978 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 800524c:	4b7c      	ldr	r3, [pc, #496]	; (8005440 <drawCurrentStateOfSwitches+0x200>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01c      	beq.n	800528e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005254:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	2305      	movs	r3, #5
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2315      	movs	r3, #21
 8005260:	2221      	movs	r2, #33	; 0x21
 8005262:	2141      	movs	r1, #65	; 0x41
 8005264:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005268:	f7fc fb35 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 800526c:	4975      	ldr	r1, [pc, #468]	; (8005444 <drawCurrentStateOfSwitches+0x204>)
 800526e:	4876      	ldr	r0, [pc, #472]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005270:	f00e f81e 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005274:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	2243      	movs	r2, #67	; 0x43
 8005282:	f240 1111 	movw	r1, #273	; 0x111
 8005286:	4870      	ldr	r0, [pc, #448]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005288:	f7fc fd90 	bl	8001dac <EF_PutString>
 800528c:	e01b      	b.n	80052c6 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800528e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	2305      	movs	r3, #5
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	2315      	movs	r3, #21
 800529a:	2221      	movs	r2, #33	; 0x21
 800529c:	2141      	movs	r1, #65	; 0x41
 800529e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052a2:	f7fc fb18 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 80052a6:	4969      	ldr	r1, [pc, #420]	; (800544c <drawCurrentStateOfSwitches+0x20c>)
 80052a8:	4867      	ldr	r0, [pc, #412]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 80052aa:	f00e f801 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	2243      	movs	r2, #67	; 0x43
 80052bc:	f240 1111 	movw	r1, #273	; 0x111
 80052c0:	4861      	ldr	r0, [pc, #388]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 80052c2:	f7fc fd73 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <drawCurrentStateOfSwitches+0x200>)
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01c      	beq.n	8005308 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80052ce:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	2305      	movs	r3, #5
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2315      	movs	r3, #21
 80052da:	2221      	movs	r2, #33	; 0x21
 80052dc:	215f      	movs	r1, #95	; 0x5f
 80052de:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052e2:	f7fc faf8 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80052e6:	4957      	ldr	r1, [pc, #348]	; (8005444 <drawCurrentStateOfSwitches+0x204>)
 80052e8:	4857      	ldr	r0, [pc, #348]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 80052ea:	f00d ffe1 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80052ee:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	2300      	movs	r3, #0
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	2261      	movs	r2, #97	; 0x61
 80052fc:	f240 1111 	movw	r1, #273	; 0x111
 8005300:	4851      	ldr	r0, [pc, #324]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005302:	f7fc fd53 	bl	8001dac <EF_PutString>
 8005306:	e01b      	b.n	8005340 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005308:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	2305      	movs	r3, #5
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2315      	movs	r3, #21
 8005314:	2221      	movs	r2, #33	; 0x21
 8005316:	215f      	movs	r1, #95	; 0x5f
 8005318:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800531c:	f7fc fadb 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005320:	494a      	ldr	r1, [pc, #296]	; (800544c <drawCurrentStateOfSwitches+0x20c>)
 8005322:	4849      	ldr	r0, [pc, #292]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005324:	f00d ffc4 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005328:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	2300      	movs	r3, #0
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2300      	movs	r3, #0
 8005334:	2261      	movs	r2, #97	; 0x61
 8005336:	f240 1111 	movw	r1, #273	; 0x111
 800533a:	4843      	ldr	r0, [pc, #268]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 800533c:	f7fc fd36 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8005340:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <drawCurrentStateOfSwitches+0x200>)
 8005342:	789b      	ldrb	r3, [r3, #2]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01c      	beq.n	8005382 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005348:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2305      	movs	r3, #5
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2315      	movs	r3, #21
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	217d      	movs	r1, #125	; 0x7d
 8005358:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800535c:	f7fc fabb 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 8005360:	4938      	ldr	r1, [pc, #224]	; (8005444 <drawCurrentStateOfSwitches+0x204>)
 8005362:	4839      	ldr	r0, [pc, #228]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005364:	f00d ffa4 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005368:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	2300      	movs	r3, #0
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	227f      	movs	r2, #127	; 0x7f
 8005376:	f240 1111 	movw	r1, #273	; 0x111
 800537a:	4833      	ldr	r0, [pc, #204]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 800537c:	f7fc fd16 	bl	8001dac <EF_PutString>
 8005380:	e01b      	b.n	80053ba <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005382:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	2305      	movs	r3, #5
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2315      	movs	r3, #21
 800538e:	2221      	movs	r2, #33	; 0x21
 8005390:	217d      	movs	r1, #125	; 0x7d
 8005392:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005396:	f7fc fa9e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 800539a:	492c      	ldr	r1, [pc, #176]	; (800544c <drawCurrentStateOfSwitches+0x20c>)
 800539c:	482a      	ldr	r0, [pc, #168]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 800539e:	f00d ff87 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	2300      	movs	r3, #0
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	227f      	movs	r2, #127	; 0x7f
 80053b0:	f240 1111 	movw	r1, #273	; 0x111
 80053b4:	4824      	ldr	r0, [pc, #144]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 80053b6:	f7fc fcf9 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 80053ba:	4b21      	ldr	r3, [pc, #132]	; (8005440 <drawCurrentStateOfSwitches+0x200>)
 80053bc:	78db      	ldrb	r3, [r3, #3]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01c      	beq.n	80053fc <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80053c2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	2305      	movs	r3, #5
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2315      	movs	r3, #21
 80053ce:	2221      	movs	r2, #33	; 0x21
 80053d0:	219b      	movs	r1, #155	; 0x9b
 80053d2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80053d6:	f7fc fa7e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80053da:	491a      	ldr	r1, [pc, #104]	; (8005444 <drawCurrentStateOfSwitches+0x204>)
 80053dc:	481a      	ldr	r0, [pc, #104]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 80053de:	f00d ff67 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80053e2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	2300      	movs	r3, #0
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	229d      	movs	r2, #157	; 0x9d
 80053f0:	f240 1111 	movw	r1, #273	; 0x111
 80053f4:	4814      	ldr	r0, [pc, #80]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 80053f6:	f7fc fcd9 	bl	8001dac <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)MsgFunctions, "OFF");
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80053fa:	e01b      	b.n	8005434 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	2305      	movs	r3, #5
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	2315      	movs	r3, #21
 8005408:	2221      	movs	r2, #33	; 0x21
 800540a:	219b      	movs	r1, #155	; 0x9b
 800540c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005410:	f7fc fa61 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005414:	490d      	ldr	r1, [pc, #52]	; (800544c <drawCurrentStateOfSwitches+0x20c>)
 8005416:	480c      	ldr	r0, [pc, #48]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005418:	f00d ff4a 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800541c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	229d      	movs	r2, #157	; 0x9d
 800542a:	f240 1111 	movw	r1, #273	; 0x111
 800542e:	4806      	ldr	r0, [pc, #24]	; (8005448 <drawCurrentStateOfSwitches+0x208>)
 8005430:	f7fc fcbc 	bl	8001dac <EF_PutString>
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	08028c34 	.word	0x08028c34
 8005440:	20000944 	.word	0x20000944
 8005444:	08017280 	.word	0x08017280
 8005448:	200002d8 	.word	0x200002d8
 800544c:	08017284 	.word	0x08017284

08005450 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005456:	4875      	ldr	r0, [pc, #468]	; (800562c <drawCurrentStateOfLights+0x1dc>)
 8005458:	f7fc fa8e 	bl	8001978 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 800545c:	4b74      	ldr	r3, [pc, #464]	; (8005630 <drawCurrentStateOfLights+0x1e0>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01a      	beq.n	800549a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005464:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	2305      	movs	r3, #5
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2315      	movs	r3, #21
 8005470:	2221      	movs	r2, #33	; 0x21
 8005472:	2141      	movs	r1, #65	; 0x41
 8005474:	20c8      	movs	r0, #200	; 0xc8
 8005476:	f7fc fa2e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 800547a:	496e      	ldr	r1, [pc, #440]	; (8005634 <drawCurrentStateOfLights+0x1e4>)
 800547c:	486e      	ldr	r0, [pc, #440]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 800547e:	f00d ff17 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005482:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	2300      	movs	r3, #0
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	2243      	movs	r2, #67	; 0x43
 8005490:	21cb      	movs	r1, #203	; 0xcb
 8005492:	4869      	ldr	r0, [pc, #420]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005494:	f7fc fc8a 	bl	8001dac <EF_PutString>
 8005498:	e019      	b.n	80054ce <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800549a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	2305      	movs	r3, #5
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2315      	movs	r3, #21
 80054a6:	2221      	movs	r2, #33	; 0x21
 80054a8:	2141      	movs	r1, #65	; 0x41
 80054aa:	20c8      	movs	r0, #200	; 0xc8
 80054ac:	f7fc fa13 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 80054b0:	4962      	ldr	r1, [pc, #392]	; (800563c <drawCurrentStateOfLights+0x1ec>)
 80054b2:	4861      	ldr	r0, [pc, #388]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 80054b4:	f00d fefc 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	2300      	movs	r3, #0
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	2243      	movs	r2, #67	; 0x43
 80054c6:	21cb      	movs	r1, #203	; 0xcb
 80054c8:	485b      	ldr	r0, [pc, #364]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 80054ca:	f7fc fc6f 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 80054ce:	4b58      	ldr	r3, [pc, #352]	; (8005630 <drawCurrentStateOfLights+0x1e0>)
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01a      	beq.n	800550c <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80054d6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	2305      	movs	r3, #5
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2315      	movs	r3, #21
 80054e2:	2221      	movs	r2, #33	; 0x21
 80054e4:	215f      	movs	r1, #95	; 0x5f
 80054e6:	20c8      	movs	r0, #200	; 0xc8
 80054e8:	f7fc f9f5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80054ec:	4951      	ldr	r1, [pc, #324]	; (8005634 <drawCurrentStateOfLights+0x1e4>)
 80054ee:	4852      	ldr	r0, [pc, #328]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 80054f0:	f00d fede 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2300      	movs	r3, #0
 8005500:	2261      	movs	r2, #97	; 0x61
 8005502:	21cb      	movs	r1, #203	; 0xcb
 8005504:	484c      	ldr	r0, [pc, #304]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005506:	f7fc fc51 	bl	8001dac <EF_PutString>
 800550a:	e019      	b.n	8005540 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800550c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2305      	movs	r3, #5
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2315      	movs	r3, #21
 8005518:	2221      	movs	r2, #33	; 0x21
 800551a:	215f      	movs	r1, #95	; 0x5f
 800551c:	20c8      	movs	r0, #200	; 0xc8
 800551e:	f7fc f9da 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005522:	4946      	ldr	r1, [pc, #280]	; (800563c <drawCurrentStateOfLights+0x1ec>)
 8005524:	4844      	ldr	r0, [pc, #272]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005526:	f00d fec3 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800552a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	2261      	movs	r2, #97	; 0x61
 8005538:	21cb      	movs	r1, #203	; 0xcb
 800553a:	483f      	ldr	r0, [pc, #252]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 800553c:	f7fc fc36 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8005540:	4b3b      	ldr	r3, [pc, #236]	; (8005630 <drawCurrentStateOfLights+0x1e0>)
 8005542:	789b      	ldrb	r3, [r3, #2]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005548:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	2305      	movs	r3, #5
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2315      	movs	r3, #21
 8005554:	2221      	movs	r2, #33	; 0x21
 8005556:	217d      	movs	r1, #125	; 0x7d
 8005558:	20c8      	movs	r0, #200	; 0xc8
 800555a:	f7fc f9bc 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 800555e:	4935      	ldr	r1, [pc, #212]	; (8005634 <drawCurrentStateOfLights+0x1e4>)
 8005560:	4835      	ldr	r0, [pc, #212]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005562:	f00d fea5 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005566:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	2300      	movs	r3, #0
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	227f      	movs	r2, #127	; 0x7f
 8005574:	21cb      	movs	r1, #203	; 0xcb
 8005576:	4830      	ldr	r0, [pc, #192]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005578:	f7fc fc18 	bl	8001dac <EF_PutString>
 800557c:	e019      	b.n	80055b2 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800557e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	2305      	movs	r3, #5
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2315      	movs	r3, #21
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	217d      	movs	r1, #125	; 0x7d
 800558e:	20c8      	movs	r0, #200	; 0xc8
 8005590:	f7fc f9a1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005594:	4929      	ldr	r1, [pc, #164]	; (800563c <drawCurrentStateOfLights+0x1ec>)
 8005596:	4828      	ldr	r0, [pc, #160]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005598:	f00d fe8a 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800559c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	227f      	movs	r2, #127	; 0x7f
 80055aa:	21cb      	movs	r1, #203	; 0xcb
 80055ac:	4822      	ldr	r0, [pc, #136]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 80055ae:	f7fc fbfd 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 80055b2:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <drawCurrentStateOfLights+0x1e0>)
 80055b4:	78db      	ldrb	r3, [r3, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01a      	beq.n	80055f0 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80055ba:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	2305      	movs	r3, #5
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2315      	movs	r3, #21
 80055c6:	2221      	movs	r2, #33	; 0x21
 80055c8:	219b      	movs	r1, #155	; 0x9b
 80055ca:	20c8      	movs	r0, #200	; 0xc8
 80055cc:	f7fc f983 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80055d0:	4918      	ldr	r1, [pc, #96]	; (8005634 <drawCurrentStateOfLights+0x1e4>)
 80055d2:	4819      	ldr	r0, [pc, #100]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 80055d4:	f00d fe6c 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80055d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	2300      	movs	r3, #0
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	229d      	movs	r2, #157	; 0x9d
 80055e6:	21cb      	movs	r1, #203	; 0xcb
 80055e8:	4813      	ldr	r0, [pc, #76]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 80055ea:	f7fc fbdf 	bl	8001dac <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)MsgFunctions, "OFF");
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80055ee:	e019      	b.n	8005624 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80055f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	2305      	movs	r3, #5
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	2315      	movs	r3, #21
 80055fc:	2221      	movs	r2, #33	; 0x21
 80055fe:	219b      	movs	r1, #155	; 0x9b
 8005600:	20c8      	movs	r0, #200	; 0xc8
 8005602:	f7fc f968 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005606:	490d      	ldr	r1, [pc, #52]	; (800563c <drawCurrentStateOfLights+0x1ec>)
 8005608:	480b      	ldr	r0, [pc, #44]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 800560a:	f00d fe51 	bl	80132b0 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800560e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2300      	movs	r3, #0
 800561a:	229d      	movs	r2, #157	; 0x9d
 800561c:	21cb      	movs	r1, #203	; 0xcb
 800561e:	4806      	ldr	r0, [pc, #24]	; (8005638 <drawCurrentStateOfLights+0x1e8>)
 8005620:	f7fc fbc4 	bl	8001dac <EF_PutString>
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	08028c34 	.word	0x08028c34
 8005630:	20000948 	.word	0x20000948
 8005634:	08017280 	.word	0x08017280
 8005638:	200002d8 	.word	0x200002d8
 800563c:	08017284 	.word	0x08017284

08005640 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	f107 030c 	add.w	r3, r7, #12
 8005652:	2100      	movs	r1, #0
 8005654:	460a      	mov	r2, r1
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	460a      	mov	r2, r1
 800565a:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 800565c:	f107 0208 	add.w	r2, r7, #8
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	4611      	mov	r1, r2
 8005664:	4618      	mov	r0, r3
 8005666:	f7fd fc73 	bl	8002f50 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800566a:	7a3b      	ldrb	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <restoreTFTScheduleDayOfWeek+0x3a>
 8005670:	2101      	movs	r1, #1
 8005672:	2001      	movs	r0, #1
 8005674:	f001 fcec 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8005678:	e003      	b.n	8005682 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800567a:	2100      	movs	r1, #0
 800567c:	2001      	movs	r0, #1
 800567e:	f001 fce7 	bl	8007050 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005682:	7a7b      	ldrb	r3, [r7, #9]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <restoreTFTScheduleDayOfWeek+0x52>
 8005688:	2101      	movs	r1, #1
 800568a:	2002      	movs	r0, #2
 800568c:	f001 fce0 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8005690:	e003      	b.n	800569a <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005692:	2100      	movs	r1, #0
 8005694:	2002      	movs	r0, #2
 8005696:	f001 fcdb 	bl	8007050 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800569a:	7abb      	ldrb	r3, [r7, #10]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <restoreTFTScheduleDayOfWeek+0x6a>
 80056a0:	2101      	movs	r1, #1
 80056a2:	2003      	movs	r0, #3
 80056a4:	f001 fcd4 	bl	8007050 <changeTFTScheduleDayOfWeek>
 80056a8:	e003      	b.n	80056b2 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 80056aa:	2100      	movs	r1, #0
 80056ac:	2003      	movs	r0, #3
 80056ae:	f001 fccf 	bl	8007050 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 80056b2:	7afb      	ldrb	r3, [r7, #11]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <restoreTFTScheduleDayOfWeek+0x82>
 80056b8:	2101      	movs	r1, #1
 80056ba:	2004      	movs	r0, #4
 80056bc:	f001 fcc8 	bl	8007050 <changeTFTScheduleDayOfWeek>
 80056c0:	e003      	b.n	80056ca <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 80056c2:	2100      	movs	r1, #0
 80056c4:	2004      	movs	r0, #4
 80056c6:	f001 fcc3 	bl	8007050 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 80056ca:	7b3b      	ldrb	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <restoreTFTScheduleDayOfWeek+0x9a>
 80056d0:	2101      	movs	r1, #1
 80056d2:	2005      	movs	r0, #5
 80056d4:	f001 fcbc 	bl	8007050 <changeTFTScheduleDayOfWeek>
 80056d8:	e003      	b.n	80056e2 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 80056da:	2100      	movs	r1, #0
 80056dc:	2005      	movs	r0, #5
 80056de:	f001 fcb7 	bl	8007050 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 80056e2:	7b7b      	ldrb	r3, [r7, #13]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <restoreTFTScheduleDayOfWeek+0xb2>
 80056e8:	2101      	movs	r1, #1
 80056ea:	2006      	movs	r0, #6
 80056ec:	f001 fcb0 	bl	8007050 <changeTFTScheduleDayOfWeek>
 80056f0:	e003      	b.n	80056fa <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80056f2:	2100      	movs	r1, #0
 80056f4:	2006      	movs	r0, #6
 80056f6:	f001 fcab 	bl	8007050 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <restoreTFTScheduleDayOfWeek+0xca>
 8005700:	2101      	movs	r1, #1
 8005702:	2007      	movs	r0, #7
 8005704:	f001 fca4 	bl	8007050 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 8005708:	e003      	b.n	8005712 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 800570a:	2100      	movs	r1, #0
 800570c:	2007      	movs	r0, #7
 800570e:	f001 fc9f 	bl	8007050 <changeTFTScheduleDayOfWeek>
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	4603      	mov	r3, r0
 8005722:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	f107 0310 	add.w	r3, r7, #16
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 8005732:	f107 020c 	add.w	r2, r7, #12
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fc84 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 8005740:	7b3b      	ldrb	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <restoreTFTScheduleRelayLights+0x36>
 8005746:	2101      	movs	r1, #1
 8005748:	2001      	movs	r0, #1
 800574a:	f001 fd5e 	bl	800720a <changeTFTScheduleRelayLights>
 800574e:	e003      	b.n	8005758 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 8005750:	2100      	movs	r1, #0
 8005752:	2001      	movs	r0, #1
 8005754:	f001 fd59 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 8005758:	7b7b      	ldrb	r3, [r7, #13]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <restoreTFTScheduleRelayLights+0x4e>
 800575e:	2101      	movs	r1, #1
 8005760:	2002      	movs	r0, #2
 8005762:	f001 fd52 	bl	800720a <changeTFTScheduleRelayLights>
 8005766:	e003      	b.n	8005770 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005768:	2100      	movs	r1, #0
 800576a:	2002      	movs	r0, #2
 800576c:	f001 fd4d 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <restoreTFTScheduleRelayLights+0x66>
 8005776:	2101      	movs	r1, #1
 8005778:	2003      	movs	r0, #3
 800577a:	f001 fd46 	bl	800720a <changeTFTScheduleRelayLights>
 800577e:	e003      	b.n	8005788 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005780:	2100      	movs	r1, #0
 8005782:	2003      	movs	r0, #3
 8005784:	f001 fd41 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <restoreTFTScheduleRelayLights+0x7e>
 800578e:	2101      	movs	r1, #1
 8005790:	2004      	movs	r0, #4
 8005792:	f001 fd3a 	bl	800720a <changeTFTScheduleRelayLights>
 8005796:	e003      	b.n	80057a0 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005798:	2100      	movs	r1, #0
 800579a:	2004      	movs	r0, #4
 800579c:	f001 fd35 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 80057a0:	7c3b      	ldrb	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <restoreTFTScheduleRelayLights+0x96>
 80057a6:	2101      	movs	r1, #1
 80057a8:	2005      	movs	r0, #5
 80057aa:	f001 fd2e 	bl	800720a <changeTFTScheduleRelayLights>
 80057ae:	e003      	b.n	80057b8 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 80057b0:	2100      	movs	r1, #0
 80057b2:	2005      	movs	r0, #5
 80057b4:	f001 fd29 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 80057b8:	7c7b      	ldrb	r3, [r7, #17]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <restoreTFTScheduleRelayLights+0xae>
 80057be:	2101      	movs	r1, #1
 80057c0:	2006      	movs	r0, #6
 80057c2:	f001 fd22 	bl	800720a <changeTFTScheduleRelayLights>
 80057c6:	e003      	b.n	80057d0 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 80057c8:	2100      	movs	r1, #0
 80057ca:	2006      	movs	r0, #6
 80057cc:	f001 fd1d 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 80057d0:	7cbb      	ldrb	r3, [r7, #18]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <restoreTFTScheduleRelayLights+0xc6>
 80057d6:	2101      	movs	r1, #1
 80057d8:	2007      	movs	r0, #7
 80057da:	f001 fd16 	bl	800720a <changeTFTScheduleRelayLights>
 80057de:	e003      	b.n	80057e8 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 80057e0:	2100      	movs	r1, #0
 80057e2:	2007      	movs	r0, #7
 80057e4:	f001 fd11 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <restoreTFTScheduleRelayLights+0xde>
 80057ee:	2101      	movs	r1, #1
 80057f0:	2008      	movs	r0, #8
 80057f2:	f001 fd0a 	bl	800720a <changeTFTScheduleRelayLights>
 80057f6:	e003      	b.n	8005800 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80057f8:	2100      	movs	r1, #0
 80057fa:	2008      	movs	r0, #8
 80057fc:	f001 fd05 	bl	800720a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 8005800:	7d3b      	ldrb	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <restoreTFTScheduleRelayLights+0xf6>
 8005806:	2101      	movs	r1, #1
 8005808:	2009      	movs	r0, #9
 800580a:	f001 fcfe 	bl	800720a <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 800580e:	e003      	b.n	8005818 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 8005810:	2100      	movs	r1, #0
 8005812:	2009      	movs	r0, #9
 8005814:	f001 fcf9 	bl	800720a <changeTFTScheduleRelayLights>
}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <makeScheduleActivity>:


void makeScheduleActivity(uint8_t CurrentHour, uint8_t CurrentMinute, uint8_t CurrentDayOfWeek)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
 800582a:	460b      	mov	r3, r1
 800582c:	71bb      	strb	r3, [r7, #6]
 800582e:	4613      	mov	r3, r2
 8005830:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 8005832:	2301      	movs	r3, #1
 8005834:	75fb      	strb	r3, [r7, #23]
 8005836:	e055      	b.n	80058e4 <makeScheduleActivity+0xc4>
	{
		uint8_t ScheduleDayOfWeekTab[7]= {0}; // Tab to handle information about day of the week to which the schedule applies
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	2100      	movs	r1, #0
 8005842:	460a      	mov	r2, r1
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	460a      	mov	r2, r1
 8005848:	709a      	strb	r2, [r3, #2]
		EEPROM_ScheduleDayInWeekRead(i, ScheduleDayOfWeekTab); // Get day of week from 'i' Schedule
 800584a:	f107 0210 	add.w	r2, r7, #16
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fb7c 	bl	8002f50 <EEPROM_ScheduleDayInWeekRead>

		if(1 == ScheduleDayOfWeekTab[CurrentDayOfWeek]) // If the current day of week the schedule 'i' applies
 8005858:	797b      	ldrb	r3, [r7, #5]
 800585a:	3318      	adds	r3, #24
 800585c:	443b      	add	r3, r7
 800585e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d13b      	bne.n	80058de <makeScheduleActivity+0xbe>
		{
			// Check if some relays should be turn on
			uint8_t MinuteOnFromEEPROM = 67;
 8005866:	2343      	movs	r3, #67	; 0x43
 8005868:	73fb      	strb	r3, [r7, #15]
			EEPROM_ScheduleMinuteOnRead(i, &MinuteOnFromEEPROM); // Get set Minute ON from EEPROM
 800586a:	f107 020f 	add.w	r2, r7, #15
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fce1 	bl	800323a <EEPROM_ScheduleMinuteOnRead>
			if(CurrentMinute == MinuteOnFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	79ba      	ldrb	r2, [r7, #6]
 800587c:	429a      	cmp	r2, r3
 800587e:	d110      	bne.n	80058a2 <makeScheduleActivity+0x82>
			{
				uint8_t HourOnFromEEPROM = 27;
 8005880:	231b      	movs	r3, #27
 8005882:	737b      	strb	r3, [r7, #13]
				EEPROM_ScheduleHourOnRead(i, &HourOnFromEEPROM); // Get set Hour ON from EEPROM
 8005884:	f107 020d 	add.w	r2, r7, #13
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f7fd fcb0 	bl	80031f2 <EEPROM_ScheduleHourOnRead>
				if(CurrentHour == HourOnFromEEPROM)
 8005892:	7b7b      	ldrb	r3, [r7, #13]
 8005894:	79fa      	ldrb	r2, [r7, #7]
 8005896:	429a      	cmp	r2, r3
 8005898:	d103      	bne.n	80058a2 <makeScheduleActivity+0x82>
				{
					makeRelayOn2(i);
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f82d 	bl	80058fc <makeRelayOn2>
				}
			}

			// Check if some relays should be turn off
			uint8_t MinuteOffFromEEPROM = 67;
 80058a2:	2343      	movs	r3, #67	; 0x43
 80058a4:	73bb      	strb	r3, [r7, #14]
			EEPROM_ScheduleMinuteOffRead(i, &MinuteOffFromEEPROM);
 80058a6:	f107 020e 	add.w	r2, r7, #14
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	4611      	mov	r1, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fd fd0b 	bl	80032ca <EEPROM_ScheduleMinuteOffRead>
			if(CurrentMinute == MinuteOffFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	79ba      	ldrb	r2, [r7, #6]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d110      	bne.n	80058de <makeScheduleActivity+0xbe>
			{
				uint8_t HourOfFromEEPROM = 27;
 80058bc:	231b      	movs	r3, #27
 80058be:	733b      	strb	r3, [r7, #12]
				EEPROM_ScheduleHourOffRead(i, &HourOfFromEEPROM);
 80058c0:	f107 020c 	add.w	r2, r7, #12
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	4611      	mov	r1, r2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd fcda 	bl	8003282 <EEPROM_ScheduleHourOffRead>
				if(CurrentHour == HourOfFromEEPROM)
 80058ce:	7b3b      	ldrb	r3, [r7, #12]
 80058d0:	79fa      	ldrb	r2, [r7, #7]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d103      	bne.n	80058de <makeScheduleActivity+0xbe>
				{
					makeRelayOff2(i);
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 f8a5 	bl	8005a28 <makeRelayOff2>
	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	3301      	adds	r3, #1
 80058e2:	75fb      	strb	r3, [r7, #23]
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <makeScheduleActivity+0xd8>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	7dfa      	ldrb	r2, [r7, #23]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d9a4      	bls.n	8005838 <makeScheduleActivity+0x18>
				}
			}
		}
	}
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000030 	.word	0x20000030

080058fc <makeRelayOn2>:

void makeRelayOn2(uint8_t NumberOfShedule)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	f107 0310 	add.w	r3, r7, #16
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 8005914:	f107 020c 	add.w	r2, r7, #12
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f7fd fb93 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 8005922:	7b3b      	ldrb	r3, [r7, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d109      	bne.n	800593c <makeRelayOn2+0x40>
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8005928:	2005      	movs	r0, #5
 800592a:	f004 fc35 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 800592e:	4933      	ldr	r1, [pc, #204]	; (80059fc <makeRelayOn2+0x100>)
 8005930:	4833      	ldr	r0, [pc, #204]	; (8005a00 <makeRelayOn2+0x104>)
 8005932:	f005 fb59 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[0] = 1;
 8005936:	4b33      	ldr	r3, [pc, #204]	; (8005a04 <makeRelayOn2+0x108>)
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 800593c:	7b7b      	ldrb	r3, [r7, #13]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d109      	bne.n	8005956 <makeRelayOn2+0x5a>
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8005942:	2007      	movs	r0, #7
 8005944:	f004 fc28 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8005948:	492f      	ldr	r1, [pc, #188]	; (8005a08 <makeRelayOn2+0x10c>)
 800594a:	482d      	ldr	r0, [pc, #180]	; (8005a00 <makeRelayOn2+0x104>)
 800594c:	f005 fb4c 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[1] = 1;
 8005950:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <makeRelayOn2+0x108>)
 8005952:	2201      	movs	r2, #1
 8005954:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d109      	bne.n	8005970 <makeRelayOn2+0x74>
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 800595c:	2009      	movs	r0, #9
 800595e:	f004 fc1b 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8005962:	492a      	ldr	r1, [pc, #168]	; (8005a0c <makeRelayOn2+0x110>)
 8005964:	4826      	ldr	r0, [pc, #152]	; (8005a00 <makeRelayOn2+0x104>)
 8005966:	f005 fb3f 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[2] = 1;
 800596a:	4b26      	ldr	r3, [pc, #152]	; (8005a04 <makeRelayOn2+0x108>)
 800596c:	2201      	movs	r2, #1
 800596e:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d109      	bne.n	800598a <makeRelayOn2+0x8e>
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8005976:	200b      	movs	r0, #11
 8005978:	f004 fc0e 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 800597c:	4924      	ldr	r1, [pc, #144]	; (8005a10 <makeRelayOn2+0x114>)
 800597e:	4820      	ldr	r0, [pc, #128]	; (8005a00 <makeRelayOn2+0x104>)
 8005980:	f005 fb32 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[3] = 1;
 8005984:	4b1f      	ldr	r3, [pc, #124]	; (8005a04 <makeRelayOn2+0x108>)
 8005986:	2201      	movs	r2, #1
 8005988:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS ON
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 800598a:	7c7b      	ldrb	r3, [r7, #17]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d109      	bne.n	80059a4 <makeRelayOn2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005990:	200d      	movs	r0, #13
 8005992:	f004 fc01 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8005996:	491f      	ldr	r1, [pc, #124]	; (8005a14 <makeRelayOn2+0x118>)
 8005998:	4819      	ldr	r0, [pc, #100]	; (8005a00 <makeRelayOn2+0x104>)
 800599a:	f005 fb25 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[0] = 1;
 800599e:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <makeRelayOn2+0x11c>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 80059a4:	7cbb      	ldrb	r3, [r7, #18]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d109      	bne.n	80059be <makeRelayOn2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 80059aa:	200f      	movs	r0, #15
 80059ac:	f004 fbf4 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 80059b0:	491a      	ldr	r1, [pc, #104]	; (8005a1c <makeRelayOn2+0x120>)
 80059b2:	4813      	ldr	r0, [pc, #76]	; (8005a00 <makeRelayOn2+0x104>)
 80059b4:	f005 fb18 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[1] = 1;
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <makeRelayOn2+0x11c>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d109      	bne.n	80059d8 <makeRelayOn2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80059c4:	2011      	movs	r0, #17
 80059c6:	f004 fbe7 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 80059ca:	4915      	ldr	r1, [pc, #84]	; (8005a20 <makeRelayOn2+0x124>)
 80059cc:	480c      	ldr	r0, [pc, #48]	; (8005a00 <makeRelayOn2+0x104>)
 80059ce:	f005 fb0b 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[2] = 1;
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <makeRelayOn2+0x11c>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 80059d8:	7d3b      	ldrb	r3, [r7, #20]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d109      	bne.n	80059f2 <makeRelayOn2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80059de:	2013      	movs	r0, #19
 80059e0:	f004 fbda 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80059e4:	490f      	ldr	r1, [pc, #60]	; (8005a24 <makeRelayOn2+0x128>)
 80059e6:	4806      	ldr	r0, [pc, #24]	; (8005a00 <makeRelayOn2+0x104>)
 80059e8:	f005 fafe 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[3] = 1;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <makeRelayOn2+0x11c>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 1);
		}

}
 80059f2:	bf00      	nop
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	080174b0 	.word	0x080174b0
 8005a00:	20000654 	.word	0x20000654
 8005a04:	20000944 	.word	0x20000944
 8005a08:	080174bc 	.word	0x080174bc
 8005a0c:	080174c8 	.word	0x080174c8
 8005a10:	080174d4 	.word	0x080174d4
 8005a14:	080174e0 	.word	0x080174e0
 8005a18:	20000948 	.word	0x20000948
 8005a1c:	080174ec 	.word	0x080174ec
 8005a20:	080174f8 	.word	0x080174f8
 8005a24:	08017504 	.word	0x08017504

08005a28 <makeRelayOff2>:
void makeRelayOff2(uint8_t NumberOfShedule)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	f107 0310 	add.w	r3, r7, #16
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 8005a40:	f107 020c 	add.w	r2, r7, #12
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	4611      	mov	r1, r2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd fafd 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 8005a4e:	7b3b      	ldrb	r3, [r7, #12]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d109      	bne.n	8005a68 <makeRelayOff2+0x40>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005a54:	2006      	movs	r0, #6
 8005a56:	f004 fb9f 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8005a5a:	4933      	ldr	r1, [pc, #204]	; (8005b28 <makeRelayOff2+0x100>)
 8005a5c:	4833      	ldr	r0, [pc, #204]	; (8005b2c <makeRelayOff2+0x104>)
 8005a5e:	f005 fac3 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[0] = 0;
 8005a62:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <makeRelayOff2+0x108>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005a68:	7b7b      	ldrb	r3, [r7, #13]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d109      	bne.n	8005a82 <makeRelayOff2+0x5a>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005a6e:	2008      	movs	r0, #8
 8005a70:	f004 fb92 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8005a74:	492f      	ldr	r1, [pc, #188]	; (8005b34 <makeRelayOff2+0x10c>)
 8005a76:	482d      	ldr	r0, [pc, #180]	; (8005b2c <makeRelayOff2+0x104>)
 8005a78:	f005 fab6 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[1] = 0;
 8005a7c:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <makeRelayOff2+0x108>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d109      	bne.n	8005a9c <makeRelayOff2+0x74>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005a88:	200a      	movs	r0, #10
 8005a8a:	f004 fb85 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8005a8e:	492a      	ldr	r1, [pc, #168]	; (8005b38 <makeRelayOff2+0x110>)
 8005a90:	4826      	ldr	r0, [pc, #152]	; (8005b2c <makeRelayOff2+0x104>)
 8005a92:	f005 faa9 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[2] = 0;
 8005a96:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <makeRelayOff2+0x108>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d109      	bne.n	8005ab6 <makeRelayOff2+0x8e>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005aa2:	200c      	movs	r0, #12
 8005aa4:	f004 fb78 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8005aa8:	4924      	ldr	r1, [pc, #144]	; (8005b3c <makeRelayOff2+0x114>)
 8005aaa:	4820      	ldr	r0, [pc, #128]	; (8005b2c <makeRelayOff2+0x104>)
 8005aac:	f005 fa9c 	bl	800afe8 <UARTDMA_Print>
			SwitchesButtonState[3] = 0;
 8005ab0:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <makeRelayOff2+0x108>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS OFF
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005ab6:	7c7b      	ldrb	r3, [r7, #17]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d109      	bne.n	8005ad0 <makeRelayOff2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8005abc:	200e      	movs	r0, #14
 8005abe:	f004 fb6b 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8005ac2:	491f      	ldr	r1, [pc, #124]	; (8005b40 <makeRelayOff2+0x118>)
 8005ac4:	4819      	ldr	r0, [pc, #100]	; (8005b2c <makeRelayOff2+0x104>)
 8005ac6:	f005 fa8f 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[0] = 0;
 8005aca:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <makeRelayOff2+0x11c>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005ad0:	7cbb      	ldrb	r3, [r7, #18]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d109      	bne.n	8005aea <makeRelayOff2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	f004 fb5e 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8005adc:	491a      	ldr	r1, [pc, #104]	; (8005b48 <makeRelayOff2+0x120>)
 8005ade:	4813      	ldr	r0, [pc, #76]	; (8005b2c <makeRelayOff2+0x104>)
 8005ae0:	f005 fa82 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[1] = 0;
 8005ae4:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <makeRelayOff2+0x11c>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 8005aea:	7cfb      	ldrb	r3, [r7, #19]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d109      	bne.n	8005b04 <makeRelayOff2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to OFF
 8005af0:	2011      	movs	r0, #17
 8005af2:	f004 fb51 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8005af6:	4915      	ldr	r1, [pc, #84]	; (8005b4c <makeRelayOff2+0x124>)
 8005af8:	480c      	ldr	r0, [pc, #48]	; (8005b2c <makeRelayOff2+0x104>)
 8005afa:	f005 fa75 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[2] = 0;
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <makeRelayOff2+0x11c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 8005b04:	7d3b      	ldrb	r3, [r7, #20]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d109      	bne.n	8005b1e <makeRelayOff2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8005b0a:	2014      	movs	r0, #20
 8005b0c:	f004 fb44 	bl	800a198 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8005b10:	490f      	ldr	r1, [pc, #60]	; (8005b50 <makeRelayOff2+0x128>)
 8005b12:	4806      	ldr	r0, [pc, #24]	; (8005b2c <makeRelayOff2+0x104>)
 8005b14:	f005 fa68 	bl	800afe8 <UARTDMA_Print>
			LightsButtonState[3] = 0;
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <makeRelayOff2+0x11c>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 0);
		}
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	08017510 	.word	0x08017510
 8005b2c:	20000654 	.word	0x20000654
 8005b30:	20000944 	.word	0x20000944
 8005b34:	0801751c 	.word	0x0801751c
 8005b38:	08017528 	.word	0x08017528
 8005b3c:	08017534 	.word	0x08017534
 8005b40:	08017540 	.word	0x08017540
 8005b44:	20000948 	.word	0x20000948
 8005b48:	0801754c 	.word	0x0801754c
 8005b4c:	08017558 	.word	0x08017558
 8005b50:	08017564 	.word	0x08017564

08005b54 <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005b5c:	bf00      	nop
 8005b5e:	f005 fd5b 	bl	800b618 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <initWait+0x28>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d2f6      	bcs.n	8005b5e <initWait+0xa>
    {

    }
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2000031c 	.word	0x2000031c

08005b80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	60da      	str	r2, [r3, #12]
 8005b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	4b5f      	ldr	r3, [pc, #380]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	4a5e      	ldr	r2, [pc, #376]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005ba0:	f043 0304 	orr.w	r3, r3, #4
 8005ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba6:	4b5c      	ldr	r3, [pc, #368]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4b58      	ldr	r3, [pc, #352]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4a57      	ldr	r2, [pc, #348]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc2:	4b55      	ldr	r3, [pc, #340]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	4b51      	ldr	r3, [pc, #324]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	4a50      	ldr	r2, [pc, #320]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bde:	4b4e      	ldr	r3, [pc, #312]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	4a49      	ldr	r2, [pc, #292]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <MX_GPIO_Init+0x198>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	607b      	str	r3, [r7, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c0c:	4843      	ldr	r0, [pc, #268]	; (8005d1c <MX_GPIO_Init+0x19c>)
 8005c0e:	f006 fc7f 	bl	800c510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005c12:	2200      	movs	r2, #0
 8005c14:	f247 4102 	movw	r1, #29698	; 0x7402
 8005c18:	4841      	ldr	r0, [pc, #260]	; (8005d20 <MX_GPIO_Init+0x1a0>)
 8005c1a:	f006 fc79 	bl	800c510 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c24:	483f      	ldr	r0, [pc, #252]	; (8005d24 <MX_GPIO_Init+0x1a4>)
 8005c26:	f006 fc73 	bl	800c510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	4619      	mov	r1, r3
 8005c42:	4836      	ldr	r0, [pc, #216]	; (8005d1c <MX_GPIO_Init+0x19c>)
 8005c44:	f006 fac8 	bl	800c1d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005c48:	2310      	movs	r3, #16
 8005c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c52:	2301      	movs	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4831      	ldr	r0, [pc, #196]	; (8005d24 <MX_GPIO_Init+0x1a4>)
 8005c5e:	f006 fabb 	bl	800c1d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005c62:	f247 4302 	movw	r3, #29698	; 0x7402
 8005c66:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c70:	2300      	movs	r3, #0
 8005c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c74:	f107 0314 	add.w	r3, r7, #20
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4829      	ldr	r0, [pc, #164]	; (8005d20 <MX_GPIO_Init+0x1a0>)
 8005c7c:	f006 faac 	bl	800c1d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005c80:	2304      	movs	r3, #4
 8005c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c8e:	f107 0314 	add.w	r3, r7, #20
 8005c92:	4619      	mov	r1, r3
 8005c94:	4822      	ldr	r0, [pc, #136]	; (8005d20 <MX_GPIO_Init+0x1a0>)
 8005c96:	f006 fa9f 	bl	800c1d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	4619      	mov	r1, r3
 8005cae:	481c      	ldr	r0, [pc, #112]	; (8005d20 <MX_GPIO_Init+0x1a0>)
 8005cb0:	f006 fa92 	bl	800c1d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4816      	ldr	r0, [pc, #88]	; (8005d24 <MX_GPIO_Init+0x1a4>)
 8005ccc:	f006 fa84 	bl	800c1d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005ce2:	f107 0314 	add.w	r3, r7, #20
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	480e      	ldr	r0, [pc, #56]	; (8005d24 <MX_GPIO_Init+0x1a4>)
 8005cea:	f006 fa75 	bl	800c1d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	2008      	movs	r0, #8
 8005cf4:	f005 fdff 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005cf8:	2008      	movs	r0, #8
 8005cfa:	f005 fe18 	bl	800b92e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2100      	movs	r1, #0
 8005d02:	2017      	movs	r0, #23
 8005d04:	f005 fdf7 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005d08:	2017      	movs	r0, #23
 8005d0a:	f005 fe10 	bl	800b92e <HAL_NVIC_EnableIRQ>

}
 8005d0e:	bf00      	nop
 8005d10:	3728      	adds	r7, #40	; 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	40020800 	.word	0x40020800
 8005d20:	40020400 	.word	0x40020400
 8005d24:	40020000 	.word	0x40020000

08005d28 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d2c:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d2e:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <MX_I2C1_Init+0x54>)
 8005d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005d32:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d34:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <MX_I2C1_Init+0x58>)
 8005d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d64:	4804      	ldr	r0, [pc, #16]	; (8005d78 <MX_I2C1_Init+0x50>)
 8005d66:	f006 fc1f 	bl	800c5a8 <HAL_I2C_Init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d70:	f000 faa2 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	20000320 	.word	0x20000320
 8005d7c:	40005400 	.word	0x40005400
 8005d80:	00061a80 	.word	0x00061a80

08005d84 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005d88:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005d8a:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <MX_I2C3_Init+0x54>)
 8005d8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005d90:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <MX_I2C3_Init+0x58>)
 8005d92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005da6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005db4:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005dc0:	4804      	ldr	r0, [pc, #16]	; (8005dd4 <MX_I2C3_Init+0x50>)
 8005dc2:	f006 fbf1 	bl	800c5a8 <HAL_I2C_Init>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005dcc:	f000 fa74 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005dd0:	bf00      	nop
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000374 	.word	0x20000374
 8005dd8:	40005c00 	.word	0x40005c00
 8005ddc:	000186a0 	.word	0x000186a0

08005de0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de8:	f107 031c 	add.w	r3, r7, #28
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	609a      	str	r2, [r3, #8]
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a74      	ldr	r2, [pc, #464]	; (8005fd0 <HAL_I2C_MspInit+0x1f0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	f040 8091 	bne.w	8005f26 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	4a71      	ldr	r2, [pc, #452]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005e0e:	f043 0302 	orr.w	r3, r3, #2
 8005e12:	6313      	str	r3, [r2, #48]	; 0x30
 8005e14:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005e20:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e26:	2312      	movs	r3, #18
 8005e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e32:	2304      	movs	r3, #4
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e36:	f107 031c 	add.w	r3, r7, #28
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4866      	ldr	r0, [pc, #408]	; (8005fd8 <HAL_I2C_MspInit+0x1f8>)
 8005e3e:	f006 f9cb 	bl	800c1d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	4b63      	ldr	r3, [pc, #396]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	4a62      	ldr	r2, [pc, #392]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e50:	6413      	str	r3, [r2, #64]	; 0x40
 8005e52:	4b60      	ldr	r3, [pc, #384]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005e5e:	4b5f      	ldr	r3, [pc, #380]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e60:	4a5f      	ldr	r2, [pc, #380]	; (8005fe0 <HAL_I2C_MspInit+0x200>)
 8005e62:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005e64:	4b5d      	ldr	r3, [pc, #372]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e6a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e6c:	4b5b      	ldr	r3, [pc, #364]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e72:	4b5a      	ldr	r3, [pc, #360]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e78:	4b58      	ldr	r3, [pc, #352]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e7e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e80:	4b56      	ldr	r3, [pc, #344]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e86:	4b55      	ldr	r3, [pc, #340]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005e8c:	4b53      	ldr	r3, [pc, #332]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e92:	4b52      	ldr	r3, [pc, #328]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e98:	4b50      	ldr	r3, [pc, #320]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005e9e:	484f      	ldr	r0, [pc, #316]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005ea0:	f005 fd8a 	bl	800b9b8 <HAL_DMA_Init>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005eaa:	f000 fa05 	bl	80062b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
 8005eb4:	4a49      	ldr	r2, [pc, #292]	; (8005fdc <HAL_I2C_MspInit+0x1fc>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005eba:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ebc:	4a4a      	ldr	r2, [pc, #296]	; (8005fe8 <HAL_I2C_MspInit+0x208>)
 8005ebe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005ec0:	4b48      	ldr	r3, [pc, #288]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ec6:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ecc:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed2:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eda:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005ee6:	4b3f      	ldr	r3, [pc, #252]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eec:	4b3d      	ldr	r3, [pc, #244]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef2:	4b3c      	ldr	r3, [pc, #240]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ef8:	483a      	ldr	r0, [pc, #232]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005efa:	f005 fd5d 	bl	800b9b8 <HAL_DMA_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005f04:	f000 f9d8 	bl	80062b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a36      	ldr	r2, [pc, #216]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f0e:	4a35      	ldr	r2, [pc, #212]	; (8005fe4 <HAL_I2C_MspInit+0x204>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	2020      	movs	r0, #32
 8005f1a:	f005 fcec 	bl	800b8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005f1e:	2020      	movs	r0, #32
 8005f20:	f005 fd05 	bl	800b92e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005f24:	e050      	b.n	8005fc8 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a30      	ldr	r2, [pc, #192]	; (8005fec <HAL_I2C_MspInit+0x20c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d14b      	bne.n	8005fc8 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f40:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005f56:	f043 0302 	orr.w	r3, r3, #2
 8005f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f6e:	2312      	movs	r3, #18
 8005f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f76:	2303      	movs	r3, #3
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f7e:	f107 031c 	add.w	r3, r7, #28
 8005f82:	4619      	mov	r1, r3
 8005f84:	481a      	ldr	r0, [pc, #104]	; (8005ff0 <HAL_I2C_MspInit+0x210>)
 8005f86:	f006 f927 	bl	800c1d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f90:	2312      	movs	r3, #18
 8005f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005f9c:	2309      	movs	r3, #9
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005fa0:	f107 031c 	add.w	r3, r7, #28
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	480c      	ldr	r0, [pc, #48]	; (8005fd8 <HAL_I2C_MspInit+0x1f8>)
 8005fa8:	f006 f916 	bl	800c1d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005fac:	2300      	movs	r3, #0
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005fb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fba:	6413      	str	r3, [r2, #64]	; 0x40
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_I2C_MspInit+0x1f4>)
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	3730      	adds	r7, #48	; 0x30
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40005400 	.word	0x40005400
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40020400 	.word	0x40020400
 8005fdc:	200003c8 	.word	0x200003c8
 8005fe0:	40026010 	.word	0x40026010
 8005fe4:	20000428 	.word	0x20000428
 8005fe8:	40026028 	.word	0x40026028
 8005fec:	40005c00 	.word	0x40005c00
 8005ff0:	40020000 	.word	0x40020000

08005ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ffa:	f005 faa7 	bl	800b54c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ffe:	f000 f87f 	bl	8006100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006002:	f7ff fdbd 	bl	8005b80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8006006:	f004 faa9 	bl	800a55c <MX_SPI1_Init>
  MX_DMA_Init();
 800600a:	f7fc fbcf 	bl	80027ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 800600e:	f005 f8d7 	bl	800b1c0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8006012:	f004 fad9 	bl	800a5c8 <MX_SPI3_Init>
  MX_I2C1_Init();
 8006016:	f7ff fe87 	bl	8005d28 <MX_I2C1_Init>
  MX_TIM11_Init();
 800601a:	f004 fe53 	bl	800acc4 <MX_TIM11_Init>
  MX_TIM10_Init();
 800601e:	f004 fe2d 	bl	800ac7c <MX_TIM10_Init>
  MX_I2C3_Init();
 8006022:	f7ff feaf 	bl	8005d84 <MX_I2C3_Init>
  MX_SPI5_Init();
 8006026:	f004 fb05 	bl	800a634 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800602a:	f005 f89f 	bl	800b16c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800602e:	f004 fdd1 	bl	800abd4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006032:	f000 f8cd 	bl	80061d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8006036:	4829      	ldr	r0, [pc, #164]	; (80060dc <main+0xe8>)
 8006038:	f7fc f900 	bl	800223c <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 800603c:	4928      	ldr	r1, [pc, #160]	; (80060e0 <main+0xec>)
 800603e:	4829      	ldr	r0, [pc, #164]	; (80060e4 <main+0xf0>)
 8006040:	f005 f845 	bl	800b0ce <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 8006044:	4928      	ldr	r1, [pc, #160]	; (80060e8 <main+0xf4>)
 8006046:	4829      	ldr	r0, [pc, #164]	; (80060ec <main+0xf8>)
 8006048:	f005 f841 	bl	800b0ce <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800604c:	2117      	movs	r1, #23
 800604e:	4828      	ldr	r0, [pc, #160]	; (80060f0 <main+0xfc>)
 8006050:	f7fc fb5c 	bl	800270c <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 8006054:	4827      	ldr	r0, [pc, #156]	; (80060f4 <main+0x100>)
 8006056:	f7fc fbff 	bl	8002858 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800605a:	2001      	movs	r0, #1
 800605c:	f7fc fc56 	bl	800290c <DS3231_SetInterruptMode>
  DS3231_SetRateSelect(DS3231_1HZ);
 8006060:	2000      	movs	r0, #0
 8006062:	f7fc fc73 	bl	800294c <DS3231_SetRateSelect>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8006066:	2001      	movs	r0, #1
 8006068:	f7fc fc90 	bl	800298c <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	2201      	movs	r2, #1
 8006074:	4619      	mov	r1, r3
 8006076:	2001      	movs	r0, #1
 8006078:	f7fc fdd4 	bl	8002c24 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 800607c:	481e      	ldr	r0, [pc, #120]	; (80060f8 <main+0x104>)
 800607e:	f00a fc53 	bl	8010928 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8006082:	213c      	movs	r1, #60	; 0x3c
 8006084:	481d      	ldr	r0, [pc, #116]	; (80060fc <main+0x108>)
 8006086:	f00a fd86 	bl	8010b96 <HAL_TIM_Encoder_Start>

  int16_t EncoderValue = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	80bb      	strh	r3, [r7, #4]
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 800608e:	4815      	ldr	r0, [pc, #84]	; (80060e4 <main+0xf0>)
 8006090:	f004 ffd0 	bl	800b034 <UARTDMA_IsDataReceivedReady>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <main+0xac>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 800609a:	4812      	ldr	r0, [pc, #72]	; (80060e4 <main+0xf0>)
 800609c:	f003 fd86 	bl	8009bac <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80060a0:	4810      	ldr	r0, [pc, #64]	; (80060e4 <main+0xf0>)
 80060a2:	f004 ffd9 	bl	800b058 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 80060a6:	4811      	ldr	r0, [pc, #68]	; (80060ec <main+0xf8>)
 80060a8:	f004 ffc4 	bl	800b034 <UARTDMA_IsDataReceivedReady>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <main+0xc4>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 80060b2:	480e      	ldr	r0, [pc, #56]	; (80060ec <main+0xf8>)
 80060b4:	f7fa ffb8 	bl	8001028 <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <main+0xf8>)
 80060ba:	f004 ffcd 	bl	800b058 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 80060be:	f7fc fa53 	bl	8002568 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 80060c2:	f000 f935 	bl	8006330 <MenuTFT>
	  ////////////////////////////////////////////////////////

	  EncoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <main+0x108>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	80bb      	strh	r3, [r7, #4]
	  encoderUpgrade(&EncoderValue);
 80060d0:	1d3b      	adds	r3, r7, #4
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 fbde 	bl	8009894 <encoderUpgrade>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80060d8:	e7d9      	b.n	800608e <main+0x9a>
 80060da:	bf00      	nop
 80060dc:	2000098c 	.word	0x2000098c
 80060e0:	20000bb4 	.word	0x20000bb4
 80060e4:	20000488 	.word	0x20000488
 80060e8:	20000b70 	.word	0x20000b70
 80060ec:	20000654 	.word	0x20000654
 80060f0:	200009e4 	.word	0x200009e4
 80060f4:	20000320 	.word	0x20000320
 80060f8:	20000b28 	.word	0x20000b28
 80060fc:	20000a98 	.word	0x20000a98

08006100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b094      	sub	sp, #80	; 0x50
 8006104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006106:	f107 0320 	add.w	r3, r7, #32
 800610a:	2230      	movs	r2, #48	; 0x30
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f00c fa46 	bl	80125a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	609a      	str	r2, [r3, #8]
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006124:	2300      	movs	r3, #0
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	4b27      	ldr	r3, [pc, #156]	; (80061c8 <SystemClock_Config+0xc8>)
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <SystemClock_Config+0xc8>)
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006132:	6413      	str	r3, [r2, #64]	; 0x40
 8006134:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <SystemClock_Config+0xc8>)
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006140:	2300      	movs	r3, #0
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	4b21      	ldr	r3, [pc, #132]	; (80061cc <SystemClock_Config+0xcc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <SystemClock_Config+0xcc>)
 800614a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <SystemClock_Config+0xcc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800615c:	2301      	movs	r3, #1
 800615e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006166:	2302      	movs	r3, #2
 8006168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800616a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006170:	230c      	movs	r3, #12
 8006172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8006174:	2360      	movs	r3, #96	; 0x60
 8006176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006178:	2302      	movs	r3, #2
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800617c:	2304      	movs	r3, #4
 800617e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006180:	f107 0320 	add.w	r3, r7, #32
 8006184:	4618      	mov	r0, r3
 8006186:	f009 fb13 	bl	800f7b0 <HAL_RCC_OscConfig>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006190:	f000 f892 	bl	80062b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006194:	230f      	movs	r3, #15
 8006196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006198:	2302      	movs	r3, #2
 800619a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80061a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80061aa:	f107 030c 	add.w	r3, r7, #12
 80061ae:	2103      	movs	r1, #3
 80061b0:	4618      	mov	r0, r3
 80061b2:	f009 fd75 	bl	800fca0 <HAL_RCC_ClockConfig>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80061bc:	f000 f87c 	bl	80062b8 <Error_Handler>
  }
}
 80061c0:	bf00      	nop
 80061c2:	3750      	adds	r7, #80	; 0x50
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40007000 	.word	0x40007000

080061d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	200a      	movs	r0, #10
 80061da:	f005 fb8c 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80061de:	200a      	movs	r0, #10
 80061e0:	f005 fba5 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80061e4:	2200      	movs	r2, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	201f      	movs	r0, #31
 80061ea:	f005 fb84 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80061ee:	201f      	movs	r0, #31
 80061f0:	f005 fb9d 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061f4:	2200      	movs	r2, #0
 80061f6:	2100      	movs	r1, #0
 80061f8:	2026      	movs	r0, #38	; 0x26
 80061fa:	f005 fb7c 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061fe:	2026      	movs	r0, #38	; 0x26
 8006200:	f005 fb95 	bl	800b92e <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8006204:	2200      	movs	r2, #0
 8006206:	2100      	movs	r1, #0
 8006208:	2033      	movs	r0, #51	; 0x33
 800620a:	f005 fb74 	bl	800b8f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800620e:	2033      	movs	r0, #51	; 0x33
 8006210:	f005 fb8d 	bl	800b92e <HAL_NVIC_EnableIRQ>
}
 8006214:	bf00      	nop
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a14      	ldr	r2, [pc, #80]	; (8006278 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 800622a:	f7fe ff11 	bl	8005050 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d11a      	bne.n	800626e <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= activitiesDurationTimeInSeconds) // timer to count seconds from start feeding to turn off this activity
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d30d      	bcc.n	8006262 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8006246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800624a:	480f      	ldr	r0, [pc, #60]	; (8006288 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800624c:	f006 f979 	bl	800c542 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8006250:	2000      	movs	r0, #0
 8006252:	f7fe ff93 	bl	800517c <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 800625c:	480b      	ldr	r0, [pc, #44]	; (800628c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800625e:	f00a fbc5 	bl	80109ec <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	b2da      	uxtb	r2, r3
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800626c:	701a      	strb	r2, [r3, #0]
	}
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40014800 	.word	0x40014800
 800627c:	40014400 	.word	0x40014400
 8006280:	20000860 	.word	0x20000860
 8006284:	20000898 	.word	0x20000898
 8006288:	40020800 	.word	0x40020800
 800628c:	20000ae0 	.word	0x20000ae0

08006290 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a0:	d101      	bne.n	80062a6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 80062a2:	f7fc fa27 	bl	80026f4 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d101      	bne.n	80062b0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 80062ac:	f7fc fbb2 	bl	8002a14 <DS3231_ClearAlarm2Flag>
	}
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 80062be:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80062c2:	f7fb ff5d 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 80062c6:	4814      	ldr	r0, [pc, #80]	; (8006318 <Error_Handler+0x60>)
 80062c8:	f7fb fb56 	bl	8001978 <EF_SetFont>
	sprintf((char*)MsgMain, "Error in Function: %s\n", __FILE__);
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <Error_Handler+0x64>)
 80062ce:	4914      	ldr	r1, [pc, #80]	; (8006320 <Error_Handler+0x68>)
 80062d0:	4814      	ldr	r0, [pc, #80]	; (8006324 <Error_Handler+0x6c>)
 80062d2:	f00c ffed 	bl	80132b0 <siprintf>
	EF_PutString(MsgMain, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 80062d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	2301      	movs	r3, #1
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2300      	movs	r3, #0
 80062e2:	2214      	movs	r2, #20
 80062e4:	210a      	movs	r1, #10
 80062e6:	480f      	ldr	r0, [pc, #60]	; (8006324 <Error_Handler+0x6c>)
 80062e8:	f7fb fd60 	bl	8001dac <EF_PutString>
	sprintf((char*)MsgMain, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 80062ec:	f44f 73a9 	mov.w	r3, #338	; 0x152
 80062f0:	4a0d      	ldr	r2, [pc, #52]	; (8006328 <Error_Handler+0x70>)
 80062f2:	490e      	ldr	r1, [pc, #56]	; (800632c <Error_Handler+0x74>)
 80062f4:	480b      	ldr	r0, [pc, #44]	; (8006324 <Error_Handler+0x6c>)
 80062f6:	f00c ffdb 	bl	80132b0 <siprintf>
	EF_PutString(MsgMain, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 80062fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	2301      	movs	r3, #1
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	2232      	movs	r2, #50	; 0x32
 8006308:	210a      	movs	r1, #10
 800630a:	4806      	ldr	r0, [pc, #24]	; (8006324 <Error_Handler+0x6c>)
 800630c:	f7fb fd4e 	bl	8001dac <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006310:	b672      	cpsid	i
}
 8006312:	bf00      	nop

  __disable_irq();

  while (1)
 8006314:	e7fe      	b.n	8006314 <Error_Handler+0x5c>
 8006316:	bf00      	nop
 8006318:	08028c34 	.word	0x08028c34
 800631c:	08017570 	.word	0x08017570
 8006320:	08017584 	.word	0x08017584
 8006324:	20000820 	.word	0x20000820
 8006328:	08028164 	.word	0x08028164
 800632c:	0801759c 	.word	0x0801759c

08006330 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	switch(State)
 8006334:	4b5b      	ldr	r3, [pc, #364]	; (80064a4 <MenuTFT+0x174>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b08      	cmp	r3, #8
 800633a:	f200 80b0 	bhi.w	800649e <MenuTFT+0x16e>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <MenuTFT+0x14>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006369 	.word	0x08006369
 8006348:	0800637b 	.word	0x0800637b
 800634c:	080063b5 	.word	0x080063b5
 8006350:	080063f1 	.word	0x080063f1
 8006354:	08006415 	.word	0x08006415
 8006358:	080063d3 	.word	0x080063d3
 800635c:	08006433 	.word	0x08006433
 8006360:	08006457 	.word	0x08006457
 8006364:	0800647b 	.word	0x0800647b
	{
	case MENUTFT_INIT:
		system_init();
 8006368:	f7fd f89a 	bl	80034a0 <system_init>
		State = MENUTFT_PARAMETERS;
 800636c:	4b4d      	ldr	r3, [pc, #308]	; (80064a4 <MenuTFT+0x174>)
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8006372:	4b4d      	ldr	r3, [pc, #308]	; (80064a8 <MenuTFT+0x178>)
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
		break;
 8006378:	e091      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 800637a:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <MenuTFT+0x178>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d115      	bne.n	80063ae <MenuTFT+0x7e>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8006382:	4b4a      	ldr	r3, [pc, #296]	; (80064ac <MenuTFT+0x17c>)
 8006384:	edd3 7a00 	vldr	s15, [r3]
 8006388:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <MenuTFT+0x180>)
 800638a:	ed93 7a00 	vldr	s14, [r3]
 800638e:	eeb0 1a47 	vmov.f32	s2, s14
 8006392:	2100      	movs	r1, #0
 8006394:	2000      	movs	r0, #0
 8006396:	eddf 0a47 	vldr	s1, [pc, #284]	; 80064b4 <MenuTFT+0x184>
 800639a:	eeb0 0a67 	vmov.f32	s0, s15
 800639e:	f7fd f9fd 	bl	800379c <showCurrentParameters>
			EncoderState = ENCODER_IDLE;
 80063a2:	4b45      	ldr	r3, [pc, #276]	; (80064b8 <MenuTFT+0x188>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063a8:	4b3f      	ldr	r3, [pc, #252]	; (80064a8 <MenuTFT+0x178>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 80063ae:	f000 f88b 	bl	80064c8 <TouchParametersActivity>
		break;
 80063b2:	e074      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 80063b4:	4b3c      	ldr	r3, [pc, #240]	; (80064a8 <MenuTFT+0x178>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <MenuTFT+0x9c>
		{
			showControlPanel();
 80063bc:	f7fd fb38 	bl	8003a30 <showControlPanel>
			EncoderState = ENCODER_IDLE;
 80063c0:	4b3d      	ldr	r3, [pc, #244]	; (80064b8 <MenuTFT+0x188>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063c6:	4b38      	ldr	r3, [pc, #224]	; (80064a8 <MenuTFT+0x178>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 80063cc:	f000 f8dc 	bl	8006588 <TouchSwitchActivity>
		break;
 80063d0:	e065      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 80063d2:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <MenuTFT+0x178>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d107      	bne.n	80063ea <MenuTFT+0xba>
		{
			showLightsControlPanel();
 80063da:	f7fd fc03 	bl	8003be4 <showLightsControlPanel>
			EncoderState = ENCODER_IDLE;
 80063de:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <MenuTFT+0x188>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063e4:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <MenuTFT+0x178>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80063ea:	f000 f93f 	bl	800666c <TouchLightsActivity>
		break;
 80063ee:	e056      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 80063f0:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <MenuTFT+0x178>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d10a      	bne.n	800640e <MenuTFT+0xde>
		{
			showClockSetPanel();
 80063f8:	f7fd fccc 	bl	8003d94 <showClockSetPanel>
			EncoderState = ENCODER_IDLE;
 80063fc:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <MenuTFT+0x188>)
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
			ClockChangeFlag = 1;
 8006402:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <MenuTFT+0x18c>)
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006408:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <MenuTFT+0x178>)
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 800640e:	f000 f99d 	bl	800674c <TouchClockActivity>
		break;
 8006412:	e044      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8006414:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <MenuTFT+0x178>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d107      	bne.n	800642c <MenuTFT+0xfc>
		{
			showPreparedActivitiesPanel();
 800641c:	f7fd fe22 	bl	8004064 <showPreparedActivitiesPanel>
			EncoderState = ENCODER_ACTIVITIES;
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <MenuTFT+0x188>)
 8006422:	2205      	movs	r2, #5
 8006424:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006426:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <MenuTFT+0x178>)
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 800642c:	f000 fa5a 	bl	80068e4 <TouchPredefinedActivityActivity>
		break;
 8006430:	e035      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8006432:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <MenuTFT+0x178>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d10a      	bne.n	8006450 <MenuTFT+0x120>
		{
			showWSLedPanel();
 800643a:	f7fd ff61 	bl	8004300 <showWSLedPanel>
			EncoderState = ENCODER_WS_LED;
 800643e:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <MenuTFT+0x188>)
 8006440:	2204      	movs	r2, #4
 8006442:	701a      	strb	r2, [r3, #0]
			WSLedChangeFlag = 1;
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <MenuTFT+0x190>)
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800644a:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <MenuTFT+0x178>)
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8006450:	f000 fac0 	bl	80069d4 <TouchWSLedActivity>
		break;
 8006454:	e023      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <MenuTFT+0x178>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10a      	bne.n	8006474 <MenuTFT+0x144>
		{
			showSchedule1Panel();
 800645e:	f7fe fceb 	bl	8004e38 <showSchedule1Panel>
			EncoderState = ENCODER_IDLE;
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <MenuTFT+0x188>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006468:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <MenuTFT+0x194>)
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800646e:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <MenuTFT+0x178>)
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8006474:	f000 fb1a 	bl	8006aac <Schedule1Activity>
		break;
 8006478:	e011      	b.n	800649e <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <MenuTFT+0x178>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d10a      	bne.n	8006498 <MenuTFT+0x168>
		{
			showSchedule2Panel();
 8006482:	f7fe fd6d 	bl	8004f60 <showSchedule2Panel>
			EncoderState = ENCODER_IDLE;
 8006486:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <MenuTFT+0x188>)
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 800648c:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <MenuTFT+0x194>)
 800648e:	2201      	movs	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <MenuTFT+0x178>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8006498:	f000 fc0a 	bl	8006cb0 <Schedule2Activity>
		break;
 800649c:	bf00      	nop
	}
}
 800649e:	bf00      	nop
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	200008e8 	.word	0x200008e8
 80064a8:	20000861 	.word	0x20000861
 80064ac:	20000930 	.word	0x20000930
 80064b0:	20000938 	.word	0x20000938
 80064b4:	00000000 	.word	0x00000000
 80064b8:	200008e9 	.word	0x200008e9
 80064bc:	20000862 	.word	0x20000862
 80064c0:	20000863 	.word	0x20000863
 80064c4:	20000864 	.word	0x20000864

080064c8 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80064ce:	f7fc f839 	bl	8002544 <XPT2046_IsTouched>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d04c      	beq.n	8006572 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80064d8:	f005 f89e 	bl	800b618 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <TouchParametersActivity+0xb4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e8:	d343      	bcc.n	8006572 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80064ea:	1d3a      	adds	r2, r7, #4
 80064ec:	1dbb      	adds	r3, r7, #6
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fb ffd1 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	2b09      	cmp	r3, #9
 80064fa:	d90f      	bls.n	800651c <TouchParametersActivity+0x54>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b6e      	cmp	r3, #110	; 0x6e
 8006500:	d80c      	bhi.n	800651c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006502:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006504:	2bd7      	cmp	r3, #215	; 0xd7
 8006506:	d909      	bls.n	800651c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006508:	88bb      	ldrh	r3, [r7, #4]
 800650a:	2bec      	cmp	r3, #236	; 0xec
 800650c:	d806      	bhi.n	800651c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <TouchParametersActivity+0xb8>)
 8006510:	2205      	movs	r2, #5
 8006512:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <TouchParametersActivity+0xbc>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e025      	b.n	8006568 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	2bdb      	cmp	r3, #219	; 0xdb
 8006520:	d910      	bls.n	8006544 <TouchParametersActivity+0x7c>
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006528:	d20c      	bcs.n	8006544 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800652a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800652c:	2bd7      	cmp	r3, #215	; 0xd7
 800652e:	d909      	bls.n	8006544 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006530:	88bb      	ldrh	r3, [r7, #4]
 8006532:	2bec      	cmp	r3, #236	; 0xec
 8006534:	d806      	bhi.n	8006544 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8006536:	4b12      	ldr	r3, [pc, #72]	; (8006580 <TouchParametersActivity+0xb8>)
 8006538:	2202      	movs	r2, #2
 800653a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <TouchParametersActivity+0xbc>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e011      	b.n	8006568 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	2b77      	cmp	r3, #119	; 0x77
 8006548:	d90e      	bls.n	8006568 <TouchParametersActivity+0xa0>
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	2bd2      	cmp	r3, #210	; 0xd2
 800654e:	d80b      	bhi.n	8006568 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006550:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006552:	2bd7      	cmp	r3, #215	; 0xd7
 8006554:	d908      	bls.n	8006568 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006556:	88bb      	ldrh	r3, [r7, #4]
 8006558:	2bec      	cmp	r3, #236	; 0xec
 800655a:	d805      	bhi.n	8006568 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <TouchParametersActivity+0xb8>)
 800655e:	2203      	movs	r2, #3
 8006560:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <TouchParametersActivity+0xbc>)
 8006564:	2201      	movs	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8006568:	f005 f856 	bl	800b618 <HAL_GetTick>
 800656c:	4603      	mov	r3, r0
 800656e:	4a03      	ldr	r2, [pc, #12]	; (800657c <TouchParametersActivity+0xb4>)
 8006570:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200008e4 	.word	0x200008e4
 8006580:	200008e8 	.word	0x200008e8
 8006584:	20000861 	.word	0x20000861

08006588 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800658e:	f7fb ffd9 	bl	8002544 <XPT2046_IsTouched>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05d      	beq.n	8006654 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006598:	f005 f83e 	bl	800b618 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	4b2f      	ldr	r3, [pc, #188]	; (800665c <TouchSwitchActivity+0xd4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a8:	d354      	bcc.n	8006654 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80065aa:	1d3a      	adds	r2, r7, #4
 80065ac:	1dbb      	adds	r3, r7, #6
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fb ff71 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d90f      	bls.n	80065dc <TouchSwitchActivity+0x54>
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	2b6e      	cmp	r3, #110	; 0x6e
 80065c0:	d80c      	bhi.n	80065dc <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80065c2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80065c4:	2bd7      	cmp	r3, #215	; 0xd7
 80065c6:	d909      	bls.n	80065dc <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80065c8:	88bb      	ldrh	r3, [r7, #4]
 80065ca:	2bec      	cmp	r3, #236	; 0xec
 80065cc:	d806      	bhi.n	80065dc <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 80065ce:	4b24      	ldr	r3, [pc, #144]	; (8006660 <TouchSwitchActivity+0xd8>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <TouchSwitchActivity+0xdc>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e036      	b.n	800664a <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	2bdb      	cmp	r3, #219	; 0xdb
 80065e0:	d910      	bls.n	8006604 <TouchSwitchActivity+0x7c>
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80065e8:	d20c      	bcs.n	8006604 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065ea:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065ec:	2bd7      	cmp	r3, #215	; 0xd7
 80065ee:	d909      	bls.n	8006604 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065f0:	88bb      	ldrh	r3, [r7, #4]
 80065f2:	2bec      	cmp	r3, #236	; 0xec
 80065f4:	d806      	bhi.n	8006604 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <TouchSwitchActivity+0xd8>)
 80065f8:	2205      	movs	r2, #5
 80065fa:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065fc:	4b19      	ldr	r3, [pc, #100]	; (8006664 <TouchSwitchActivity+0xdc>)
 80065fe:	2201      	movs	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e022      	b.n	800664a <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2b77      	cmp	r3, #119	; 0x77
 8006608:	d90f      	bls.n	800662a <TouchSwitchActivity+0xa2>
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2bd2      	cmp	r3, #210	; 0xd2
 800660e:	d80c      	bhi.n	800662a <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006610:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006612:	2bd7      	cmp	r3, #215	; 0xd7
 8006614:	d909      	bls.n	800662a <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006616:	88bb      	ldrh	r3, [r7, #4]
 8006618:	2bec      	cmp	r3, #236	; 0xec
 800661a:	d806      	bhi.n	800662a <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <TouchSwitchActivity+0xd8>)
 800661e:	2204      	movs	r2, #4
 8006620:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <TouchSwitchActivity+0xdc>)
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e00f      	b.n	800664a <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006630:	d30b      	bcc.n	800664a <TouchSwitchActivity+0xc2>
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006638:	d207      	bcs.n	800664a <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800663a:	480b      	ldr	r0, [pc, #44]	; (8006668 <TouchSwitchActivity+0xe0>)
 800663c:	f7fb f99c 	bl	8001978 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8006640:	88bb      	ldrh	r3, [r7, #4]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	4618      	mov	r0, r3
 8006646:	f002 f8a7 	bl	8008798 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 800664a:	f004 ffe5 	bl	800b618 <HAL_GetTick>
 800664e:	4603      	mov	r3, r0
 8006650:	4a02      	ldr	r2, [pc, #8]	; (800665c <TouchSwitchActivity+0xd4>)
 8006652:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200008e4 	.word	0x200008e4
 8006660:	200008e8 	.word	0x200008e8
 8006664:	20000861 	.word	0x20000861
 8006668:	08028c34 	.word	0x08028c34

0800666c <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006672:	f7fb ff67 	bl	8002544 <XPT2046_IsTouched>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05b      	beq.n	8006734 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800667c:	f004 ffcc 	bl	800b618 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	4b2e      	ldr	r3, [pc, #184]	; (800673c <TouchLightsActivity+0xd0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800668c:	d352      	bcc.n	8006734 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800668e:	1d3a      	adds	r2, r7, #4
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	4611      	mov	r1, r2
 8006694:	4618      	mov	r0, r3
 8006696:	f7fb feff 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b09      	cmp	r3, #9
 800669e:	d90f      	bls.n	80066c0 <TouchLightsActivity+0x54>
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	2b6e      	cmp	r3, #110	; 0x6e
 80066a4:	d80c      	bhi.n	80066c0 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80066a6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80066a8:	2bd7      	cmp	r3, #215	; 0xd7
 80066aa:	d909      	bls.n	80066c0 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80066ac:	88bb      	ldrh	r3, [r7, #4]
 80066ae:	2bec      	cmp	r3, #236	; 0xec
 80066b0:	d806      	bhi.n	80066c0 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 80066b2:	4b23      	ldr	r3, [pc, #140]	; (8006740 <TouchLightsActivity+0xd4>)
 80066b4:	2202      	movs	r2, #2
 80066b6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066b8:	4b22      	ldr	r3, [pc, #136]	; (8006744 <TouchLightsActivity+0xd8>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e034      	b.n	800672a <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2bdb      	cmp	r3, #219	; 0xdb
 80066c4:	d910      	bls.n	80066e8 <TouchLightsActivity+0x7c>
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80066cc:	d20c      	bcs.n	80066e8 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80066ce:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80066d0:	2bd7      	cmp	r3, #215	; 0xd7
 80066d2:	d909      	bls.n	80066e8 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80066d4:	88bb      	ldrh	r3, [r7, #4]
 80066d6:	2bec      	cmp	r3, #236	; 0xec
 80066d8:	d806      	bhi.n	80066e8 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 80066da:	4b19      	ldr	r3, [pc, #100]	; (8006740 <TouchLightsActivity+0xd4>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066e0:	4b18      	ldr	r3, [pc, #96]	; (8006744 <TouchLightsActivity+0xd8>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	e020      	b.n	800672a <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b77      	cmp	r3, #119	; 0x77
 80066ec:	d90f      	bls.n	800670e <TouchLightsActivity+0xa2>
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	2bd2      	cmp	r3, #210	; 0xd2
 80066f2:	d80c      	bhi.n	800670e <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066f4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066f6:	2bd7      	cmp	r3, #215	; 0xd7
 80066f8:	d909      	bls.n	800670e <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066fa:	88bb      	ldrh	r3, [r7, #4]
 80066fc:	2bec      	cmp	r3, #236	; 0xec
 80066fe:	d806      	bhi.n	800670e <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <TouchLightsActivity+0xd4>)
 8006702:	2206      	movs	r2, #6
 8006704:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006706:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <TouchLightsActivity+0xd8>)
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e00d      	b.n	800672a <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	2bc7      	cmp	r3, #199	; 0xc7
 8006712:	d90a      	bls.n	800672a <TouchLightsActivity+0xbe>
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	2be9      	cmp	r3, #233	; 0xe9
 8006718:	d807      	bhi.n	800672a <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800671a:	480b      	ldr	r0, [pc, #44]	; (8006748 <TouchLightsActivity+0xdc>)
 800671c:	f7fb f92c 	bl	8001978 <EF_SetFont>
				changeLightsStatusTouch(y);
 8006720:	88bb      	ldrh	r3, [r7, #4]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	4618      	mov	r0, r3
 8006726:	f002 f88f 	bl	8008848 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 800672a:	f004 ff75 	bl	800b618 <HAL_GetTick>
 800672e:	4603      	mov	r3, r0
 8006730:	4a02      	ldr	r2, [pc, #8]	; (800673c <TouchLightsActivity+0xd0>)
 8006732:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	200008e4 	.word	0x200008e4
 8006740:	200008e8 	.word	0x200008e8
 8006744:	20000861 	.word	0x20000861
 8006748:	08028c34 	.word	0x08028c34

0800674c <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af02      	add	r7, sp, #8

	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006752:	f7fb fef7 	bl	8002544 <XPT2046_IsTouched>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80a9 	beq.w	80068b0 <TouchClockActivity+0x164>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800675e:	4856      	ldr	r0, [pc, #344]	; (80068b8 <TouchClockActivity+0x16c>)
 8006760:	f7fb f90a 	bl	8001978 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006764:	f004 ff58 	bl	800b618 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	4b54      	ldr	r3, [pc, #336]	; (80068bc <TouchClockActivity+0x170>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006774:	f0c0 809c 	bcc.w	80068b0 <TouchClockActivity+0x164>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006778:	1d3a      	adds	r2, r7, #4
 800677a:	1dbb      	adds	r3, r7, #6
 800677c:	4611      	mov	r1, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f7fb fe8a 	bl	8002498 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006784:	4b4e      	ldr	r3, [pc, #312]	; (80068c0 <TouchClockActivity+0x174>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d114      	bne.n	80067b6 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 800678c:	f7fc f99c 	bl	8002ac8 <DS3231_GetHour>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	4b4b      	ldr	r3, [pc, #300]	; (80068c4 <TouchClockActivity+0x178>)
 8006796:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006798:	f7fc f9a2 	bl	8002ae0 <DS3231_GetMinute>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	4b49      	ldr	r3, [pc, #292]	; (80068c8 <TouchClockActivity+0x17c>)
 80067a2:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 80067a4:	f7fc f984 	bl	8002ab0 <DS3231_GetDayOfWeek>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	4b47      	ldr	r3, [pc, #284]	; (80068cc <TouchClockActivity+0x180>)
 80067ae:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 80067b0:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <TouchClockActivity+0x174>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b09      	cmp	r3, #9
 80067ba:	d912      	bls.n	80067e2 <TouchClockActivity+0x96>
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b6e      	cmp	r3, #110	; 0x6e
 80067c0:	d80f      	bhi.n	80067e2 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067c2:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067c4:	2bd7      	cmp	r3, #215	; 0xd7
 80067c6:	d90c      	bls.n	80067e2 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067c8:	88bb      	ldrh	r3, [r7, #4]
 80067ca:	2bec      	cmp	r3, #236	; 0xec
 80067cc:	d809      	bhi.n	80067e2 <TouchClockActivity+0x96>
				{
					State = MENUTFT_PARAMETERS;
 80067ce:	4b40      	ldr	r3, [pc, #256]	; (80068d0 <TouchClockActivity+0x184>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 80067d4:	4b3f      	ldr	r3, [pc, #252]	; (80068d4 <TouchClockActivity+0x188>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80067da:	4b3f      	ldr	r3, [pc, #252]	; (80068d8 <TouchClockActivity+0x18c>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e061      	b.n	80068a6 <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2bdb      	cmp	r3, #219	; 0xdb
 80067e6:	d92c      	bls.n	8006842 <TouchClockActivity+0xf6>
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80067ee:	d228      	bcs.n	8006842 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067f0:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067f2:	2bd7      	cmp	r3, #215	; 0xd7
 80067f4:	d925      	bls.n	8006842 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067f6:	88bb      	ldrh	r3, [r7, #4]
 80067f8:	2bec      	cmp	r3, #236	; 0xec
 80067fa:	d822      	bhi.n	8006842 <TouchClockActivity+0xf6>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80067fc:	4b33      	ldr	r3, [pc, #204]	; (80068cc <TouchClockActivity+0x180>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f7fc f979 	bl	8002af8 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8006806:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <TouchClockActivity+0x178>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7fc f986 	bl	8002b1c <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8006810:	4b2d      	ldr	r3, [pc, #180]	; (80068c8 <TouchClockActivity+0x17c>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f7fc f996 	bl	8002b46 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800681a:	2032      	movs	r0, #50	; 0x32
 800681c:	f7fc f9a5 	bl	8002b6a <DS3231_SetSecond>
					sprintf((char*)MsgMenuTFT, "-Time Changed-");
 8006820:	492e      	ldr	r1, [pc, #184]	; (80068dc <TouchClockActivity+0x190>)
 8006822:	482f      	ldr	r0, [pc, #188]	; (80068e0 <TouchClockActivity+0x194>)
 8006824:	f00c fd44 	bl	80132b0 <siprintf>
					EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8006828:	f24c 6318 	movw	r3, #50712	; 0xc618
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	2301      	movs	r3, #1
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006836:	220a      	movs	r2, #10
 8006838:	212f      	movs	r1, #47	; 0x2f
 800683a:	4829      	ldr	r0, [pc, #164]	; (80068e0 <TouchClockActivity+0x194>)
 800683c:	f7fb fab6 	bl	8001dac <EF_PutString>
 8006840:	e031      	b.n	80068a6 <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	2b6d      	cmp	r3, #109	; 0x6d
 8006846:	d912      	bls.n	800686e <TouchClockActivity+0x122>
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	2bdc      	cmp	r3, #220	; 0xdc
 800684c:	d80f      	bhi.n	800686e <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800684e:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006850:	2bbd      	cmp	r3, #189	; 0xbd
 8006852:	d90c      	bls.n	800686e <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006854:	88bb      	ldrh	r3, [r7, #4]
 8006856:	2bd4      	cmp	r3, #212	; 0xd4
 8006858:	d809      	bhi.n	800686e <TouchClockActivity+0x122>
				{
					State = MENUTFT_SCHEDULE_1;
 800685a:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <TouchClockActivity+0x184>)
 800685c:	2207      	movs	r2, #7
 800685e:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006860:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <TouchClockActivity+0x188>)
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006866:	4b1c      	ldr	r3, [pc, #112]	; (80068d8 <TouchClockActivity+0x18c>)
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e01b      	b.n	80068a6 <TouchClockActivity+0x15a>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2bef      	cmp	r3, #239	; 0xef
 8006872:	d90a      	bls.n	800688a <TouchClockActivity+0x13e>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800687a:	d806      	bhi.n	800688a <TouchClockActivity+0x13e>
				{
					clockIncreaseOneHourAndMinute(x, y);
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	88ba      	ldrh	r2, [r7, #4]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fed6 	bl	8008634 <clockIncreaseOneHourAndMinute>
 8006888:	e00d      	b.n	80068a6 <TouchClockActivity+0x15a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006890:	d309      	bcc.n	80068a6 <TouchClockActivity+0x15a>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006898:	d805      	bhi.n	80068a6 <TouchClockActivity+0x15a>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	88ba      	ldrh	r2, [r7, #4]
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 fef9 	bl	8008698 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 80068a6:	f004 feb7 	bl	800b618 <HAL_GetTick>
 80068aa:	4603      	mov	r3, r0
 80068ac:	4a03      	ldr	r2, [pc, #12]	; (80068bc <TouchClockActivity+0x170>)
 80068ae:	6013      	str	r3, [r2, #0]
			}
		}
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	0802abac 	.word	0x0802abac
 80068bc:	200008e4 	.word	0x200008e4
 80068c0:	20000862 	.word	0x20000862
 80068c4:	20000032 	.word	0x20000032
 80068c8:	20000033 	.word	0x20000033
 80068cc:	20000031 	.word	0x20000031
 80068d0:	200008e8 	.word	0x200008e8
 80068d4:	200008e9 	.word	0x200008e9
 80068d8:	20000861 	.word	0x20000861
 80068dc:	080175b4 	.word	0x080175b4
 80068e0:	200008a4 	.word	0x200008a4

080068e4 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80068ea:	f7fb fe2b 	bl	8002544 <XPT2046_IsTouched>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d05b      	beq.n	80069ac <TouchPredefinedActivityActivity+0xc8>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80068f4:	f004 fe90 	bl	800b618 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <TouchPredefinedActivityActivity+0xd0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006904:	d352      	bcc.n	80069ac <TouchPredefinedActivityActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006906:	1d3a      	adds	r2, r7, #4
 8006908:	1dbb      	adds	r3, r7, #6
 800690a:	4611      	mov	r1, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f7fb fdc3 	bl	8002498 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 8006912:	4829      	ldr	r0, [pc, #164]	; (80069b8 <TouchPredefinedActivityActivity+0xd4>)
 8006914:	f7fb f830 	bl	8001978 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b09      	cmp	r3, #9
 800691c:	d90f      	bls.n	800693e <TouchPredefinedActivityActivity+0x5a>
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	2b6e      	cmp	r3, #110	; 0x6e
 8006922:	d80c      	bhi.n	800693e <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006924:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006926:	2bd7      	cmp	r3, #215	; 0xd7
 8006928:	d909      	bls.n	800693e <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800692a:	88bb      	ldrh	r3, [r7, #4]
 800692c:	2bec      	cmp	r3, #236	; 0xec
 800692e:	d806      	bhi.n	800693e <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 8006930:	4b22      	ldr	r3, [pc, #136]	; (80069bc <TouchPredefinedActivityActivity+0xd8>)
 8006932:	2202      	movs	r2, #2
 8006934:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006936:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <TouchPredefinedActivityActivity+0xdc>)
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	e031      	b.n	80069a2 <TouchPredefinedActivityActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button - Confirmed changed clock
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	2bdb      	cmp	r3, #219	; 0xdb
 8006942:	d923      	bls.n	800698c <TouchPredefinedActivityActivity+0xa8>
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800694a:	d21f      	bcs.n	800698c <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800694c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800694e:	2bd7      	cmp	r3, #215	; 0xd7
 8006950:	d91c      	bls.n	800698c <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006952:	88bb      	ldrh	r3, [r7, #4]
 8006954:	2bec      	cmp	r3, #236	; 0xec
 8006956:	d819      	bhi.n	800698c <TouchPredefinedActivityActivity+0xa8>
			{
				EF_SetFont(&arialBlack_20ptFontInfo);
 8006958:	481a      	ldr	r0, [pc, #104]	; (80069c4 <TouchPredefinedActivityActivity+0xe0>)
 800695a:	f7fb f80d 	bl	8001978 <EF_SetFont>
				EEPROM_ActivitiesTimeUpdate(1, activitiesDurationTimeInSeconds);
 800695e:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <TouchPredefinedActivityActivity+0xe4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4619      	mov	r1, r3
 8006964:	2001      	movs	r0, #1
 8006966:	f7fc fd7d 	bl	8003464 <EEPROM_ActivitiesTimeUpdate>
				sprintf((char*)MsgMenuTFT, "-Time Changed-");
 800696a:	4918      	ldr	r1, [pc, #96]	; (80069cc <TouchPredefinedActivityActivity+0xe8>)
 800696c:	4818      	ldr	r0, [pc, #96]	; (80069d0 <TouchPredefinedActivityActivity+0xec>)
 800696e:	f00c fc9f 	bl	80132b0 <siprintf>
				EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8006972:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	2301      	movs	r3, #1
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006980:	220a      	movs	r2, #10
 8006982:	212f      	movs	r1, #47	; 0x2f
 8006984:	4812      	ldr	r0, [pc, #72]	; (80069d0 <TouchPredefinedActivityActivity+0xec>)
 8006986:	f7fb fa11 	bl	8001dac <EF_PutString>
 800698a:	e00a      	b.n	80069a2 <TouchPredefinedActivityActivity+0xbe>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	2b63      	cmp	r3, #99	; 0x63
 8006990:	d907      	bls.n	80069a2 <TouchPredefinedActivityActivity+0xbe>
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	2bdc      	cmp	r3, #220	; 0xdc
 8006996:	d804      	bhi.n	80069a2 <TouchPredefinedActivityActivity+0xbe>
			{
				predefinedActivityTouchAction(y);
 8006998:	88bb      	ldrh	r3, [r7, #4]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	4618      	mov	r0, r3
 800699e:	f001 ffab 	bl	80088f8 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 80069a2:	f004 fe39 	bl	800b618 <HAL_GetTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4a02      	ldr	r2, [pc, #8]	; (80069b4 <TouchPredefinedActivityActivity+0xd0>)
 80069aa:	6013      	str	r3, [r2, #0]
		}
	}
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	200008e4 	.word	0x200008e4
 80069b8:	08028c34 	.word	0x08028c34
 80069bc:	200008e8 	.word	0x200008e8
 80069c0:	20000861 	.word	0x20000861
 80069c4:	0802abac 	.word	0x0802abac
 80069c8:	20000898 	.word	0x20000898
 80069cc:	080175b4 	.word	0x080175b4
 80069d0:	200008a4 	.word	0x200008a4

080069d4 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80069da:	f7fb fdb3 	bl	8002544 <XPT2046_IsTouched>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d050      	beq.n	8006a86 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80069e4:	482a      	ldr	r0, [pc, #168]	; (8006a90 <TouchWSLedActivity+0xbc>)
 80069e6:	f7fa ffc7 	bl	8001978 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80069ea:	f004 fe15 	bl	800b618 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <TouchWSLedActivity+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069fa:	d344      	bcc.n	8006a86 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80069fc:	1d3a      	adds	r2, r7, #4
 80069fe:	1dbb      	adds	r3, r7, #6
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fb fd48 	bl	8002498 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006a08:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <TouchWSLedActivity+0xc4>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10b      	bne.n	8006a28 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006a10:	bf00      	nop
 8006a12:	2201      	movs	r2, #1
 8006a14:	4921      	ldr	r1, [pc, #132]	; (8006a9c <TouchWSLedActivity+0xc8>)
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fc f904 	bl	8002c24 <eeprom_read>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f7      	bne.n	8006a12 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 8006a22:	4b1f      	ldr	r3, [pc, #124]	; (8006aa0 <TouchWSLedActivity+0xcc>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	2b09      	cmp	r3, #9
 8006a2c:	d90f      	bls.n	8006a4e <TouchWSLedActivity+0x7a>
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	2b6e      	cmp	r3, #110	; 0x6e
 8006a32:	d80c      	bhi.n	8006a4e <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a34:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006a36:	2bd7      	cmp	r3, #215	; 0xd7
 8006a38:	d909      	bls.n	8006a4e <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a3a:	88bb      	ldrh	r3, [r7, #4]
 8006a3c:	2bec      	cmp	r3, #236	; 0xec
 8006a3e:	d806      	bhi.n	8006a4e <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <TouchWSLedActivity+0xd0>)
 8006a42:	2205      	movs	r2, #5
 8006a44:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <TouchWSLedActivity+0xd4>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	e016      	b.n	8006a7c <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006a4e:	88bb      	ldrh	r3, [r7, #4]
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d90b      	bls.n	8006a6c <TouchWSLedActivity+0x98>
 8006a54:	88bb      	ldrh	r3, [r7, #4]
 8006a56:	2b56      	cmp	r3, #86	; 0x56
 8006a58:	d808      	bhi.n	8006a6c <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	88ba      	ldrh	r2, [r7, #4]
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	4611      	mov	r1, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f002 f8a5 	bl	8008bb4 <increaseNumberOfWSLedOnTFT>
 8006a6a:	e007      	b.n	8006a7c <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	88ba      	ldrh	r2, [r7, #4]
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 f8fc 	bl	8008c74 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 8006a7c:	f004 fdcc 	bl	800b618 <HAL_GetTick>
 8006a80:	4603      	mov	r3, r0
 8006a82:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <TouchWSLedActivity+0xc0>)
 8006a84:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	0802abac 	.word	0x0802abac
 8006a94:	200008e4 	.word	0x200008e4
 8006a98:	20000862 	.word	0x20000862
 8006a9c:	20000034 	.word	0x20000034
 8006aa0:	20000863 	.word	0x20000863
 8006aa4:	200008e8 	.word	0x200008e8
 8006aa8:	20000861 	.word	0x20000861

08006aac <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006ab2:	4b70      	ldr	r3, [pc, #448]	; (8006c74 <Schedule1Activity+0x1c8>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d105      	bne.n	8006ac6 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006aba:	2001      	movs	r0, #1
 8006abc:	f001 fd66 	bl	800858c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006ac0:	4b6c      	ldr	r3, [pc, #432]	; (8006c74 <Schedule1Activity+0x1c8>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006ac6:	f7fb fd3d 	bl	8002544 <XPT2046_IsTouched>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80cc 	beq.w	8006c6a <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006ad2:	f004 fda1 	bl	800b618 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b67      	ldr	r3, [pc, #412]	; (8006c78 <Schedule1Activity+0x1cc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae2:	f0c0 80c2 	bcc.w	8006c6a <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006ae6:	1d3a      	adds	r2, r7, #4
 8006ae8:	1dbb      	adds	r3, r7, #6
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fb fcd3 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	d90f      	bls.n	8006b18 <Schedule1Activity+0x6c>
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	2b6e      	cmp	r3, #110	; 0x6e
 8006afc:	d80c      	bhi.n	8006b18 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006afe:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b00:	2bd7      	cmp	r3, #215	; 0xd7
 8006b02:	d909      	bls.n	8006b18 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b04:	88bb      	ldrh	r3, [r7, #4]
 8006b06:	2bec      	cmp	r3, #236	; 0xec
 8006b08:	d806      	bhi.n	8006b18 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006b0a:	4b5c      	ldr	r3, [pc, #368]	; (8006c7c <Schedule1Activity+0x1d0>)
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b10:	4b5b      	ldr	r3, [pc, #364]	; (8006c80 <Schedule1Activity+0x1d4>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e0a3      	b.n	8006c60 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	2bdb      	cmp	r3, #219	; 0xdb
 8006b1c:	d910      	bls.n	8006b40 <Schedule1Activity+0x94>
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006b24:	d20c      	bcs.n	8006b40 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006b26:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006b28:	2bd7      	cmp	r3, #215	; 0xd7
 8006b2a:	d909      	bls.n	8006b40 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006b2c:	88bb      	ldrh	r3, [r7, #4]
 8006b2e:	2bec      	cmp	r3, #236	; 0xec
 8006b30:	d806      	bhi.n	8006b40 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 8006b32:	4b52      	ldr	r3, [pc, #328]	; (8006c7c <Schedule1Activity+0x1d0>)
 8006b34:	2208      	movs	r2, #8
 8006b36:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b38:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <Schedule1Activity+0x1d4>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e08f      	b.n	8006c60 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b40:	88bb      	ldrh	r3, [r7, #4]
 8006b42:	2b31      	cmp	r3, #49	; 0x31
 8006b44:	d909      	bls.n	8006b5a <Schedule1Activity+0xae>
 8006b46:	88bb      	ldrh	r3, [r7, #4]
 8006b48:	2b46      	cmp	r3, #70	; 0x46
 8006b4a:	d806      	bhi.n	8006b5a <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	88ba      	ldrh	r2, [r7, #4]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f99a 	bl	8006e8c <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006b58:	e082      	b.n	8006c60 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b5a:	88bb      	ldrh	r3, [r7, #4]
 8006b5c:	2b64      	cmp	r3, #100	; 0x64
 8006b5e:	d909      	bls.n	8006b74 <Schedule1Activity+0xc8>
 8006b60:	88bb      	ldrh	r3, [r7, #4]
 8006b62:	2b79      	cmp	r3, #121	; 0x79
 8006b64:	d806      	bhi.n	8006b74 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	88ba      	ldrh	r2, [r7, #4]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fe37 	bl	80077e0 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006b72:	e075      	b.n	8006c60 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b74:	88bb      	ldrh	r3, [r7, #4]
 8006b76:	2b87      	cmp	r3, #135	; 0x87
 8006b78:	d909      	bls.n	8006b8e <Schedule1Activity+0xe2>
 8006b7a:	88bb      	ldrh	r3, [r7, #4]
 8006b7c:	2b9c      	cmp	r3, #156	; 0x9c
 8006b7e:	d806      	bhi.n	8006b8e <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	88ba      	ldrh	r2, [r7, #4]
 8006b84:	4611      	mov	r1, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fea8 	bl	80078dc <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006b8c:	e068      	b.n	8006c60 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b8e:	88bb      	ldrh	r3, [r7, #4]
 8006b90:	2ba9      	cmp	r3, #169	; 0xa9
 8006b92:	d909      	bls.n	8006ba8 <Schedule1Activity+0xfc>
 8006b94:	88bb      	ldrh	r3, [r7, #4]
 8006b96:	2bbe      	cmp	r3, #190	; 0xbe
 8006b98:	d806      	bhi.n	8006ba8 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	88ba      	ldrh	r2, [r7, #4]
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fac7 	bl	8008134 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006ba6:	e05b      	b.n	8006c60 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006ba8:	88fb      	ldrh	r3, [r7, #6]
 8006baa:	2b77      	cmp	r3, #119	; 0x77
 8006bac:	d958      	bls.n	8006c60 <Schedule1Activity+0x1b4>
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	2bd2      	cmp	r3, #210	; 0xd2
 8006bb2:	d855      	bhi.n	8006c60 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006bb4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006bb6:	2bd7      	cmp	r3, #215	; 0xd7
 8006bb8:	d952      	bls.n	8006c60 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006bba:	88bb      	ldrh	r3, [r7, #4]
 8006bbc:	2bec      	cmp	r3, #236	; 0xec
 8006bbe:	d84f      	bhi.n	8006c60 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006bc0:	4b30      	ldr	r3, [pc, #192]	; (8006c84 <Schedule1Activity+0x1d8>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7fc fba3 	bl	8003312 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006bcc:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <Schedule1Activity+0x1dc>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f7fc fbc0 	bl	8003358 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006bd8:	4b2c      	ldr	r3, [pc, #176]	; (8006c8c <Schedule1Activity+0x1e0>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	2001      	movs	r0, #1
 8006be0:	f7fc fbdd 	bl	800339e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006be4:	4b2a      	ldr	r3, [pc, #168]	; (8006c90 <Schedule1Activity+0x1e4>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	4619      	mov	r1, r3
 8006bea:	2001      	movs	r0, #1
 8006bec:	f7fc fbfa 	bl	80033e4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006bf0:	4928      	ldr	r1, [pc, #160]	; (8006c94 <Schedule1Activity+0x1e8>)
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	f7fc f9ed 	bl	8002fd2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006bf8:	4927      	ldr	r1, [pc, #156]	; (8006c98 <Schedule1Activity+0x1ec>)
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	f7fc fa94 	bl	8003128 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006c00:	4826      	ldr	r0, [pc, #152]	; (8006c9c <Schedule1Activity+0x1f0>)
 8006c02:	f7fa feb9 	bl	8001978 <EF_SetFont>
				sprintf((char*)MsgMenuTFT, " H1 ZMIENIONY      ");
 8006c06:	4926      	ldr	r1, [pc, #152]	; (8006ca0 <Schedule1Activity+0x1f4>)
 8006c08:	4826      	ldr	r0, [pc, #152]	; (8006ca4 <Schedule1Activity+0x1f8>)
 8006c0a:	f00c fb51 	bl	80132b0 <siprintf>
				EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006c0e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	2301      	movs	r3, #1
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006c1c:	220a      	movs	r2, #10
 8006c1e:	2128      	movs	r1, #40	; 0x28
 8006c20:	4820      	ldr	r0, [pc, #128]	; (8006ca4 <Schedule1Activity+0x1f8>)
 8006c22:	f7fb f8c3 	bl	8001dac <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006c26:	4820      	ldr	r0, [pc, #128]	; (8006ca8 <Schedule1Activity+0x1fc>)
 8006c28:	f7fa fea6 	bl	8001978 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006c2c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	2305      	movs	r3, #5
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	2314      	movs	r3, #20
 8006c38:	225a      	movs	r2, #90	; 0x5a
 8006c3a:	21d8      	movs	r1, #216	; 0xd8
 8006c3c:	2078      	movs	r0, #120	; 0x78
 8006c3e:	f7fa fe4a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
				sprintf((char*)MsgMenuTFT, " >POTW<");
 8006c42:	491a      	ldr	r1, [pc, #104]	; (8006cac <Schedule1Activity+0x200>)
 8006c44:	4817      	ldr	r0, [pc, #92]	; (8006ca4 <Schedule1Activity+0x1f8>)
 8006c46:	f00c fb33 	bl	80132b0 <siprintf>
				EF_PutString(MsgMenuTFT, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	22da      	movs	r2, #218	; 0xda
 8006c58:	217e      	movs	r1, #126	; 0x7e
 8006c5a:	4812      	ldr	r0, [pc, #72]	; (8006ca4 <Schedule1Activity+0x1f8>)
 8006c5c:	f7fb f8a6 	bl	8001dac <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006c60:	f004 fcda 	bl	800b618 <HAL_GetTick>
 8006c64:	4603      	mov	r3, r0
 8006c66:	4a04      	ldr	r2, [pc, #16]	; (8006c78 <Schedule1Activity+0x1cc>)
 8006c68:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000864 	.word	0x20000864
 8006c78:	200008e4 	.word	0x200008e4
 8006c7c:	200008e8 	.word	0x200008e8
 8006c80:	20000861 	.word	0x20000861
 8006c84:	2000088d 	.word	0x2000088d
 8006c88:	2000088f 	.word	0x2000088f
 8006c8c:	2000088e 	.word	0x2000088e
 8006c90:	20000890 	.word	0x20000890
 8006c94:	20000868 	.word	0x20000868
 8006c98:	20000870 	.word	0x20000870
 8006c9c:	0802abac 	.word	0x0802abac
 8006ca0:	080175c4 	.word	0x080175c4
 8006ca4:	200008a4 	.word	0x200008a4
 8006ca8:	08028c34 	.word	0x08028c34
 8006cac:	080175d8 	.word	0x080175d8

08006cb0 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006cb6:	4b66      	ldr	r3, [pc, #408]	; (8006e50 <Schedule2Activity+0x1a0>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d105      	bne.n	8006cca <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006cbe:	2002      	movs	r0, #2
 8006cc0:	f001 fc64 	bl	800858c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006cc4:	4b62      	ldr	r3, [pc, #392]	; (8006e50 <Schedule2Activity+0x1a0>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006cca:	f7fb fc3b 	bl	8002544 <XPT2046_IsTouched>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80b8 	beq.w	8006e46 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006cd6:	f004 fc9f 	bl	800b618 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	4b5d      	ldr	r3, [pc, #372]	; (8006e54 <Schedule2Activity+0x1a4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ce6:	f0c0 80ae 	bcc.w	8006e46 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006cea:	1d3a      	adds	r2, r7, #4
 8006cec:	1dbb      	adds	r3, r7, #6
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fb fbd1 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	d90f      	bls.n	8006d1c <Schedule2Activity+0x6c>
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	2b6e      	cmp	r3, #110	; 0x6e
 8006d00:	d80c      	bhi.n	8006d1c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006d02:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006d04:	2bd7      	cmp	r3, #215	; 0xd7
 8006d06:	d909      	bls.n	8006d1c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006d08:	88bb      	ldrh	r3, [r7, #4]
 8006d0a:	2bec      	cmp	r3, #236	; 0xec
 8006d0c:	d806      	bhi.n	8006d1c <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006d0e:	4b52      	ldr	r3, [pc, #328]	; (8006e58 <Schedule2Activity+0x1a8>)
 8006d10:	2203      	movs	r2, #3
 8006d12:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006d14:	4b51      	ldr	r3, [pc, #324]	; (8006e5c <Schedule2Activity+0x1ac>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e08f      	b.n	8006e3c <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006d1c:	88bb      	ldrh	r3, [r7, #4]
 8006d1e:	2b31      	cmp	r3, #49	; 0x31
 8006d20:	d909      	bls.n	8006d36 <Schedule2Activity+0x86>
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	2b46      	cmp	r3, #70	; 0x46
 8006d26:	d806      	bhi.n	8006d36 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	88ba      	ldrh	r2, [r7, #4]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fe52 	bl	80079d8 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006d34:	e082      	b.n	8006e3c <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006d36:	88bb      	ldrh	r3, [r7, #4]
 8006d38:	2b64      	cmp	r3, #100	; 0x64
 8006d3a:	d909      	bls.n	8006d50 <Schedule2Activity+0xa0>
 8006d3c:	88bb      	ldrh	r3, [r7, #4]
 8006d3e:	2b79      	cmp	r3, #121	; 0x79
 8006d40:	d806      	bhi.n	8006d50 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006d42:	88fb      	ldrh	r3, [r7, #6]
 8006d44:	88ba      	ldrh	r2, [r7, #4]
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 f8f7 	bl	8007f3c <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006d4e:	e075      	b.n	8006e3c <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006d50:	88bb      	ldrh	r3, [r7, #4]
 8006d52:	2b87      	cmp	r3, #135	; 0x87
 8006d54:	d909      	bls.n	8006d6a <Schedule2Activity+0xba>
 8006d56:	88bb      	ldrh	r3, [r7, #4]
 8006d58:	2b9c      	cmp	r3, #156	; 0x9c
 8006d5a:	d806      	bhi.n	8006d6a <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	88ba      	ldrh	r2, [r7, #4]
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 f968 	bl	8008038 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006d68:	e068      	b.n	8006e3c <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006d6a:	88bb      	ldrh	r3, [r7, #4]
 8006d6c:	2ba9      	cmp	r3, #169	; 0xa9
 8006d6e:	d909      	bls.n	8006d84 <Schedule2Activity+0xd4>
 8006d70:	88bb      	ldrh	r3, [r7, #4]
 8006d72:	2bbe      	cmp	r3, #190	; 0xbe
 8006d74:	d806      	bhi.n	8006d84 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	88ba      	ldrh	r2, [r7, #4]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 faef 	bl	8008360 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006d82:	e05b      	b.n	8006e3c <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	2b77      	cmp	r3, #119	; 0x77
 8006d88:	d958      	bls.n	8006e3c <Schedule2Activity+0x18c>
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2bd2      	cmp	r3, #210	; 0xd2
 8006d8e:	d855      	bhi.n	8006e3c <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d90:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d92:	2bd7      	cmp	r3, #215	; 0xd7
 8006d94:	d952      	bls.n	8006e3c <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d96:	88bb      	ldrh	r3, [r7, #4]
 8006d98:	2bec      	cmp	r3, #236	; 0xec
 8006d9a:	d84f      	bhi.n	8006e3c <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006d9c:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <Schedule2Activity+0x1b0>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2002      	movs	r0, #2
 8006da4:	f7fc fab5 	bl	8003312 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006da8:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <Schedule2Activity+0x1b4>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	4619      	mov	r1, r3
 8006dae:	2002      	movs	r0, #2
 8006db0:	f7fc fad2 	bl	8003358 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006db4:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <Schedule2Activity+0x1b8>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2002      	movs	r0, #2
 8006dbc:	f7fc faef 	bl	800339e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006dc0:	4b2a      	ldr	r3, [pc, #168]	; (8006e6c <Schedule2Activity+0x1bc>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	2002      	movs	r0, #2
 8006dc8:	f7fc fb0c 	bl	80033e4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006dcc:	4928      	ldr	r1, [pc, #160]	; (8006e70 <Schedule2Activity+0x1c0>)
 8006dce:	2002      	movs	r0, #2
 8006dd0:	f7fc f8ff 	bl	8002fd2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006dd4:	4927      	ldr	r1, [pc, #156]	; (8006e74 <Schedule2Activity+0x1c4>)
 8006dd6:	2002      	movs	r0, #2
 8006dd8:	f7fc f9a6 	bl	8003128 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006ddc:	4826      	ldr	r0, [pc, #152]	; (8006e78 <Schedule2Activity+0x1c8>)
 8006dde:	f7fa fdcb 	bl	8001978 <EF_SetFont>
				sprintf((char*)MsgMenuTFT, " H2 ZMIENIONY       ");
 8006de2:	4926      	ldr	r1, [pc, #152]	; (8006e7c <Schedule2Activity+0x1cc>)
 8006de4:	4826      	ldr	r0, [pc, #152]	; (8006e80 <Schedule2Activity+0x1d0>)
 8006de6:	f00c fa63 	bl	80132b0 <siprintf>
				EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006dea:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	2301      	movs	r3, #1
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006df8:	220a      	movs	r2, #10
 8006dfa:	2128      	movs	r1, #40	; 0x28
 8006dfc:	4820      	ldr	r0, [pc, #128]	; (8006e80 <Schedule2Activity+0x1d0>)
 8006dfe:	f7fa ffd5 	bl	8001dac <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006e02:	4820      	ldr	r0, [pc, #128]	; (8006e84 <Schedule2Activity+0x1d4>)
 8006e04:	f7fa fdb8 	bl	8001978 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006e08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2305      	movs	r3, #5
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	2314      	movs	r3, #20
 8006e14:	225a      	movs	r2, #90	; 0x5a
 8006e16:	21d8      	movs	r1, #216	; 0xd8
 8006e18:	2078      	movs	r0, #120	; 0x78
 8006e1a:	f7fa fd5c 	bl	80018d6 <GFX_DrawFillRoundRectangle>
				sprintf((char*)MsgMenuTFT, " >POTW<");
 8006e1e:	491a      	ldr	r1, [pc, #104]	; (8006e88 <Schedule2Activity+0x1d8>)
 8006e20:	4817      	ldr	r0, [pc, #92]	; (8006e80 <Schedule2Activity+0x1d0>)
 8006e22:	f00c fa45 	bl	80132b0 <siprintf>
				EF_PutString(MsgMenuTFT, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006e26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2300      	movs	r3, #0
 8006e32:	22da      	movs	r2, #218	; 0xda
 8006e34:	217e      	movs	r1, #126	; 0x7e
 8006e36:	4812      	ldr	r0, [pc, #72]	; (8006e80 <Schedule2Activity+0x1d0>)
 8006e38:	f7fa ffb8 	bl	8001dac <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006e3c:	f004 fbec 	bl	800b618 <HAL_GetTick>
 8006e40:	4603      	mov	r3, r0
 8006e42:	4a04      	ldr	r2, [pc, #16]	; (8006e54 <Schedule2Activity+0x1a4>)
 8006e44:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000864 	.word	0x20000864
 8006e54:	200008e4 	.word	0x200008e4
 8006e58:	200008e8 	.word	0x200008e8
 8006e5c:	20000861 	.word	0x20000861
 8006e60:	20000891 	.word	0x20000891
 8006e64:	20000893 	.word	0x20000893
 8006e68:	20000892 	.word	0x20000892
 8006e6c:	20000894 	.word	0x20000894
 8006e70:	2000087c 	.word	0x2000087c
 8006e74:	20000884 	.word	0x20000884
 8006e78:	0802abac 	.word	0x0802abac
 8006e7c:	080175e0 	.word	0x080175e0
 8006e80:	200008a4 	.word	0x200008a4
 8006e84:	08028c34 	.word	0x08028c34
 8006e88:	080175d8 	.word	0x080175d8

08006e8c <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	460a      	mov	r2, r1
 8006e96:	80fb      	strh	r3, [r7, #6]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	2b3b      	cmp	r3, #59	; 0x3b
 8006ea0:	d91a      	bls.n	8006ed8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b50      	cmp	r3, #80	; 0x50
 8006ea6:	d817      	bhi.n	8006ed8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006ea8:	4b68      	ldr	r3, [pc, #416]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f000 f8cc 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8006eb8:	e003      	b.n	8006ec2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006eba:	2101      	movs	r1, #1
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f000 f8c7 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006ec2:	4b62      	ldr	r3, [pc, #392]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf0c      	ite	eq
 8006eca:	2301      	moveq	r3, #1
 8006ecc:	2300      	movne	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b5e      	ldr	r3, [pc, #376]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	e0b4      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	2b59      	cmp	r3, #89	; 0x59
 8006edc:	d91a      	bls.n	8006f14 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	2b6e      	cmp	r3, #110	; 0x6e
 8006ee2:	d817      	bhi.n	8006f14 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006ee4:	4b59      	ldr	r3, [pc, #356]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006eec:	2100      	movs	r1, #0
 8006eee:	2002      	movs	r0, #2
 8006ef0:	f000 f8ae 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8006ef4:	e003      	b.n	8006efe <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	2002      	movs	r0, #2
 8006efa:	f000 f8a9 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006efe:	4b53      	ldr	r3, [pc, #332]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf0c      	ite	eq
 8006f06:	2301      	moveq	r3, #1
 8006f08:	2300      	movne	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4b4f      	ldr	r3, [pc, #316]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f10:	705a      	strb	r2, [r3, #1]
 8006f12:	e096      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	2b77      	cmp	r3, #119	; 0x77
 8006f18:	d91a      	bls.n	8006f50 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	2b8c      	cmp	r3, #140	; 0x8c
 8006f1e:	d817      	bhi.n	8006f50 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006f20:	4b4a      	ldr	r3, [pc, #296]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f22:	789b      	ldrb	r3, [r3, #2]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006f28:	2100      	movs	r1, #0
 8006f2a:	2003      	movs	r0, #3
 8006f2c:	f000 f890 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8006f30:	e003      	b.n	8006f3a <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006f32:	2101      	movs	r1, #1
 8006f34:	2003      	movs	r0, #3
 8006f36:	f000 f88b 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006f3a:	4b44      	ldr	r3, [pc, #272]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f3c:	789b      	ldrb	r3, [r3, #2]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4b40      	ldr	r3, [pc, #256]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f4c:	709a      	strb	r2, [r3, #2]
 8006f4e:	e078      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	2b95      	cmp	r3, #149	; 0x95
 8006f54:	d91a      	bls.n	8006f8c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	2baa      	cmp	r3, #170	; 0xaa
 8006f5a:	d817      	bhi.n	8006f8c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006f5c:	4b3b      	ldr	r3, [pc, #236]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006f64:	2100      	movs	r1, #0
 8006f66:	2004      	movs	r0, #4
 8006f68:	f000 f872 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8006f6c:	e003      	b.n	8006f76 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006f6e:	2101      	movs	r1, #1
 8006f70:	2004      	movs	r0, #4
 8006f72:	f000 f86d 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006f76:	4b35      	ldr	r3, [pc, #212]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f78:	78db      	ldrb	r3, [r3, #3]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bf0c      	ite	eq
 8006f7e:	2301      	moveq	r3, #1
 8006f80:	2300      	movne	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f88:	70da      	strb	r2, [r3, #3]
 8006f8a:	e05a      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	2bb3      	cmp	r3, #179	; 0xb3
 8006f90:	d91a      	bls.n	8006fc8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	2bc8      	cmp	r3, #200	; 0xc8
 8006f96:	d817      	bhi.n	8006fc8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006f98:	4b2c      	ldr	r3, [pc, #176]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f9a:	791b      	ldrb	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	2005      	movs	r0, #5
 8006fa4:	f000 f854 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8006fa8:	e003      	b.n	8006fb2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006faa:	2101      	movs	r1, #1
 8006fac:	2005      	movs	r0, #5
 8006fae:	f000 f84f 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4b22      	ldr	r3, [pc, #136]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fc4:	711a      	strb	r2, [r3, #4]
 8006fc6:	e03c      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	2bd1      	cmp	r3, #209	; 0xd1
 8006fcc:	d91a      	bls.n	8007004 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	2be6      	cmp	r3, #230	; 0xe6
 8006fd2:	d817      	bhi.n	8007004 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fd6:	795b      	ldrb	r3, [r3, #5]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006fdc:	2100      	movs	r1, #0
 8006fde:	2006      	movs	r0, #6
 8006fe0:	f000 f836 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8006fe4:	e003      	b.n	8006fee <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	2006      	movs	r0, #6
 8006fea:	f000 f831 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006fee:	4b17      	ldr	r3, [pc, #92]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ff0:	795b      	ldrb	r3, [r3, #5]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bf0c      	ite	eq
 8006ff6:	2301      	moveq	r3, #1
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007000:	715a      	strb	r2, [r3, #5]
 8007002:	e01e      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	2bef      	cmp	r3, #239	; 0xef
 8007008:	d91b      	bls.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007010:	d817      	bhi.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007014:	799b      	ldrb	r3, [r3, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 800701a:	2100      	movs	r1, #0
 800701c:	2007      	movs	r0, #7
 800701e:	f000 f817 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007022:	e003      	b.n	800702c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007024:	2101      	movs	r1, #1
 8007026:	2007      	movs	r0, #7
 8007028:	f000 f812 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 800702c:	4b07      	ldr	r3, [pc, #28]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800702e:	799b      	ldrb	r3, [r3, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	4b03      	ldr	r3, [pc, #12]	; (800704c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800703e:	719a      	strb	r2, [r3, #6]
	}
}
 8007040:	e7ff      	b.n	8007042 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000868 	.word	0x20000868

08007050 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af02      	add	r7, sp, #8
 8007056:	4603      	mov	r3, r0
 8007058:	460a      	mov	r2, r1
 800705a:	71fb      	strb	r3, [r7, #7]
 800705c:	4613      	mov	r3, r2
 800705e:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d11a      	bne.n	800709c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8007066:	79bb      	ldrb	r3, [r7, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10b      	bne.n	8007084 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800706c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	2305      	movs	r3, #5
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	2312      	movs	r3, #18
 8007078:	2212      	movs	r2, #18
 800707a:	2133      	movs	r1, #51	; 0x33
 800707c:	203d      	movs	r0, #61	; 0x3d
 800707e:	f7fa fc2a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007082:	e0be      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007084:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	2305      	movs	r3, #5
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	2312      	movs	r3, #18
 8007090:	2212      	movs	r2, #18
 8007092:	2133      	movs	r1, #51	; 0x33
 8007094:	203d      	movs	r0, #61	; 0x3d
 8007096:	f7fa fc1e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800709a:	e0b2      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d11a      	bne.n	80070d8 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 80070a2:	79bb      	ldrb	r3, [r7, #6]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	2305      	movs	r3, #5
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2312      	movs	r3, #18
 80070b4:	2212      	movs	r2, #18
 80070b6:	2133      	movs	r1, #51	; 0x33
 80070b8:	205b      	movs	r0, #91	; 0x5b
 80070ba:	f7fa fc0c 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80070be:	e0a0      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	2305      	movs	r3, #5
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2312      	movs	r3, #18
 80070cc:	2212      	movs	r2, #18
 80070ce:	2133      	movs	r1, #51	; 0x33
 80070d0:	205b      	movs	r0, #91	; 0x5b
 80070d2:	f7fa fc00 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80070d6:	e094      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d11a      	bne.n	8007114 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 80070de:	79bb      	ldrb	r3, [r7, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	2305      	movs	r3, #5
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2312      	movs	r3, #18
 80070f0:	2212      	movs	r2, #18
 80070f2:	2133      	movs	r1, #51	; 0x33
 80070f4:	2079      	movs	r0, #121	; 0x79
 80070f6:	f7fa fbee 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80070fa:	e082      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2305      	movs	r3, #5
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2312      	movs	r3, #18
 8007108:	2212      	movs	r2, #18
 800710a:	2133      	movs	r1, #51	; 0x33
 800710c:	2079      	movs	r0, #121	; 0x79
 800710e:	f7fa fbe2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007112:	e076      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b04      	cmp	r3, #4
 8007118:	d11a      	bne.n	8007150 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 800711a:	79bb      	ldrb	r3, [r7, #6]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007120:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	2305      	movs	r3, #5
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	2312      	movs	r3, #18
 800712c:	2212      	movs	r2, #18
 800712e:	2133      	movs	r1, #51	; 0x33
 8007130:	2097      	movs	r0, #151	; 0x97
 8007132:	f7fa fbd0 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007136:	e064      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007138:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2305      	movs	r3, #5
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2312      	movs	r3, #18
 8007144:	2212      	movs	r2, #18
 8007146:	2133      	movs	r1, #51	; 0x33
 8007148:	2097      	movs	r0, #151	; 0x97
 800714a:	f7fa fbc4 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800714e:	e058      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b05      	cmp	r3, #5
 8007154:	d11a      	bne.n	800718c <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8007156:	79bb      	ldrb	r3, [r7, #6]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10b      	bne.n	8007174 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800715c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	2305      	movs	r3, #5
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2312      	movs	r3, #18
 8007168:	2212      	movs	r2, #18
 800716a:	2133      	movs	r1, #51	; 0x33
 800716c:	20b5      	movs	r0, #181	; 0xb5
 800716e:	f7fa fbb2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007172:	e046      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007174:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	2305      	movs	r3, #5
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	2312      	movs	r3, #18
 8007180:	2212      	movs	r2, #18
 8007182:	2133      	movs	r1, #51	; 0x33
 8007184:	20b5      	movs	r0, #181	; 0xb5
 8007186:	f7fa fba6 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800718a:	e03a      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	2b06      	cmp	r3, #6
 8007190:	d11a      	bne.n	80071c8 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8007192:	79bb      	ldrb	r3, [r7, #6]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10b      	bne.n	80071b0 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007198:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	2305      	movs	r3, #5
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	2312      	movs	r3, #18
 80071a4:	2212      	movs	r2, #18
 80071a6:	2133      	movs	r1, #51	; 0x33
 80071a8:	20d3      	movs	r0, #211	; 0xd3
 80071aa:	f7fa fb94 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80071ae:	e028      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	2305      	movs	r3, #5
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2312      	movs	r3, #18
 80071bc:	2212      	movs	r2, #18
 80071be:	2133      	movs	r1, #51	; 0x33
 80071c0:	20d3      	movs	r0, #211	; 0xd3
 80071c2:	f7fa fb88 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80071c6:	e01c      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b07      	cmp	r3, #7
 80071cc:	d119      	bne.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	2305      	movs	r3, #5
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2312      	movs	r3, #18
 80071e0:	2212      	movs	r2, #18
 80071e2:	2133      	movs	r1, #51	; 0x33
 80071e4:	20f1      	movs	r0, #241	; 0xf1
 80071e6:	f7fa fb76 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80071ea:	e00a      	b.n	8007202 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	2305      	movs	r3, #5
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	2312      	movs	r3, #18
 80071f8:	2212      	movs	r2, #18
 80071fa:	2133      	movs	r1, #51	; 0x33
 80071fc:	20f1      	movs	r0, #241	; 0xf1
 80071fe:	f7fa fb6a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af02      	add	r7, sp, #8
 8007210:	4603      	mov	r3, r0
 8007212:	460a      	mov	r2, r1
 8007214:	71fb      	strb	r3, [r7, #7]
 8007216:	4613      	mov	r3, r2
 8007218:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d11a      	bne.n	8007256 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8007220:	79bb      	ldrb	r3, [r7, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10b      	bne.n	800723e <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007226:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	2305      	movs	r3, #5
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2312      	movs	r3, #18
 8007232:	2212      	movs	r2, #18
 8007234:	21ab      	movs	r1, #171	; 0xab
 8007236:	2016      	movs	r0, #22
 8007238:	f7fa fb4d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800723c:	e0fc      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800723e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	2305      	movs	r3, #5
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	2312      	movs	r3, #18
 800724a:	2212      	movs	r2, #18
 800724c:	21ab      	movs	r1, #171	; 0xab
 800724e:	2016      	movs	r0, #22
 8007250:	f7fa fb41 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007254:	e0f0      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d11a      	bne.n	8007292 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 800725c:	79bb      	ldrb	r3, [r7, #6]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007262:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	2305      	movs	r3, #5
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2312      	movs	r3, #18
 800726e:	2212      	movs	r2, #18
 8007270:	21ab      	movs	r1, #171	; 0xab
 8007272:	2036      	movs	r0, #54	; 0x36
 8007274:	f7fa fb2f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007278:	e0de      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800727a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	2305      	movs	r3, #5
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2312      	movs	r3, #18
 8007286:	2212      	movs	r2, #18
 8007288:	21ab      	movs	r1, #171	; 0xab
 800728a:	2036      	movs	r0, #54	; 0x36
 800728c:	f7fa fb23 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007290:	e0d2      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d11a      	bne.n	80072ce <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8007298:	79bb      	ldrb	r3, [r7, #6]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800729e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	2305      	movs	r3, #5
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2312      	movs	r3, #18
 80072aa:	2212      	movs	r2, #18
 80072ac:	21ab      	movs	r1, #171	; 0xab
 80072ae:	2056      	movs	r0, #86	; 0x56
 80072b0:	f7fa fb11 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80072b4:	e0c0      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	2305      	movs	r3, #5
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2312      	movs	r3, #18
 80072c2:	2212      	movs	r2, #18
 80072c4:	21ab      	movs	r1, #171	; 0xab
 80072c6:	2056      	movs	r0, #86	; 0x56
 80072c8:	f7fa fb05 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80072cc:	e0b4      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d11a      	bne.n	800730a <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 80072d4:	79bb      	ldrb	r3, [r7, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10b      	bne.n	80072f2 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	2305      	movs	r3, #5
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2312      	movs	r3, #18
 80072e6:	2212      	movs	r2, #18
 80072e8:	21ab      	movs	r1, #171	; 0xab
 80072ea:	2076      	movs	r0, #118	; 0x76
 80072ec:	f7fa faf3 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80072f0:	e0a2      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	2305      	movs	r3, #5
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2312      	movs	r3, #18
 80072fe:	2212      	movs	r2, #18
 8007300:	21ab      	movs	r1, #171	; 0xab
 8007302:	2076      	movs	r0, #118	; 0x76
 8007304:	f7fa fae7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007308:	e096      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	2b05      	cmp	r3, #5
 800730e:	d11a      	bne.n	8007346 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8007310:	79bb      	ldrb	r3, [r7, #6]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007316:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	2305      	movs	r3, #5
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	2312      	movs	r3, #18
 8007322:	2212      	movs	r2, #18
 8007324:	21ab      	movs	r1, #171	; 0xab
 8007326:	2096      	movs	r0, #150	; 0x96
 8007328:	f7fa fad5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800732c:	e084      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800732e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	2305      	movs	r3, #5
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	2312      	movs	r3, #18
 800733a:	2212      	movs	r2, #18
 800733c:	21ab      	movs	r1, #171	; 0xab
 800733e:	2096      	movs	r0, #150	; 0x96
 8007340:	f7fa fac9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007344:	e078      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	2b06      	cmp	r3, #6
 800734a:	d11a      	bne.n	8007382 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 800734c:	79bb      	ldrb	r3, [r7, #6]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007352:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	2305      	movs	r3, #5
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2312      	movs	r3, #18
 800735e:	2212      	movs	r2, #18
 8007360:	21ab      	movs	r1, #171	; 0xab
 8007362:	20b6      	movs	r0, #182	; 0xb6
 8007364:	f7fa fab7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007368:	e066      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800736a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	2305      	movs	r3, #5
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2312      	movs	r3, #18
 8007376:	2212      	movs	r2, #18
 8007378:	21ab      	movs	r1, #171	; 0xab
 800737a:	20b6      	movs	r0, #182	; 0xb6
 800737c:	f7fa faab 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007380:	e05a      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	2b07      	cmp	r3, #7
 8007386:	d11a      	bne.n	80073be <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8007388:	79bb      	ldrb	r3, [r7, #6]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800738e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	2305      	movs	r3, #5
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	2312      	movs	r3, #18
 800739a:	2212      	movs	r2, #18
 800739c:	21ab      	movs	r1, #171	; 0xab
 800739e:	20d6      	movs	r0, #214	; 0xd6
 80073a0:	f7fa fa99 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073a4:	e048      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	2305      	movs	r3, #5
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2312      	movs	r3, #18
 80073b2:	2212      	movs	r2, #18
 80073b4:	21ab      	movs	r1, #171	; 0xab
 80073b6:	20d6      	movs	r0, #214	; 0xd6
 80073b8:	f7fa fa8d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073bc:	e03c      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d11a      	bne.n	80073fa <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 80073c4:	79bb      	ldrb	r3, [r7, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80073ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	2305      	movs	r3, #5
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	2312      	movs	r3, #18
 80073d6:	2212      	movs	r2, #18
 80073d8:	21ab      	movs	r1, #171	; 0xab
 80073da:	20f6      	movs	r0, #246	; 0xf6
 80073dc:	f7fa fa7b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073e0:	e02a      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	2305      	movs	r3, #5
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2312      	movs	r3, #18
 80073ee:	2212      	movs	r2, #18
 80073f0:	21ab      	movs	r1, #171	; 0xab
 80073f2:	20f6      	movs	r0, #246	; 0xf6
 80073f4:	f7fa fa6f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073f8:	e01e      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b09      	cmp	r3, #9
 80073fe:	d11b      	bne.n	8007438 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8007400:	79bb      	ldrb	r3, [r7, #6]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007406:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	2305      	movs	r3, #5
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	2312      	movs	r3, #18
 8007412:	2212      	movs	r2, #18
 8007414:	21ab      	movs	r1, #171	; 0xab
 8007416:	f44f 708b 	mov.w	r0, #278	; 0x116
 800741a:	f7fa fa5c 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800741e:	e00b      	b.n	8007438 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007420:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	2305      	movs	r3, #5
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	2312      	movs	r3, #18
 800742c:	2212      	movs	r2, #18
 800742e:	21ab      	movs	r1, #171	; 0xab
 8007430:	f44f 708b 	mov.w	r0, #278	; 0x116
 8007434:	f7fa fa4f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <schedule1HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF  1 schedule
void schedule1HourOnIncrease(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 < 24)
 8007446:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b17      	cmp	r3, #23
 800744c:	d806      	bhi.n	800745c <schedule1HourOnIncrease+0x1c>
	{
		hourOnSchedule1++;
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	e002      	b.n	8007462 <schedule1HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 1;
 800745c:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 800745e:	2201      	movs	r2, #1
 8007460:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule1);
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b09      	cmp	r3, #9
 8007468:	d907      	bls.n	800747a <schedule1HourOnIncrease+0x3a>
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	490d      	ldr	r1, [pc, #52]	; (80074a8 <schedule1HourOnIncrease+0x68>)
 8007472:	480e      	ldr	r0, [pc, #56]	; (80074ac <schedule1HourOnIncrease+0x6c>)
 8007474:	f00b ff1c 	bl	80132b0 <siprintf>
 8007478:	e006      	b.n	8007488 <schedule1HourOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule1);
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <schedule1HourOnIncrease+0x64>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	490b      	ldr	r1, [pc, #44]	; (80074b0 <schedule1HourOnIncrease+0x70>)
 8007482:	480a      	ldr	r0, [pc, #40]	; (80074ac <schedule1HourOnIncrease+0x6c>)
 8007484:	f00b ff14 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007488:	f24c 6318 	movw	r3, #50712	; 0xc618
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	2301      	movs	r3, #1
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	2264      	movs	r2, #100	; 0x64
 8007496:	2150      	movs	r1, #80	; 0x50
 8007498:	4804      	ldr	r0, [pc, #16]	; (80074ac <schedule1HourOnIncrease+0x6c>)
 800749a:	f7fa fc87 	bl	8001dac <EF_PutString>
}
 800749e:	bf00      	nop
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	2000088d 	.word	0x2000088d
 80074a8:	080175f8 	.word	0x080175f8
 80074ac:	200008a4 	.word	0x200008a4
 80074b0:	08017600 	.word	0x08017600

080074b4 <schedule1HourOnDecrease>:
void schedule1HourOnDecrease(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 > 1)
 80074ba:	4b17      	ldr	r3, [pc, #92]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d906      	bls.n	80074d0 <schedule1HourOnDecrease+0x1c>
	{
		hourOnSchedule1--;
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <schedule1HourOnDecrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 24;
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074d2:	2218      	movs	r2, #24
 80074d4:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule1);
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d907      	bls.n	80074ee <schedule1HourOnDecrease+0x3a>
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	490d      	ldr	r1, [pc, #52]	; (800751c <schedule1HourOnDecrease+0x68>)
 80074e6:	480e      	ldr	r0, [pc, #56]	; (8007520 <schedule1HourOnDecrease+0x6c>)
 80074e8:	f00b fee2 	bl	80132b0 <siprintf>
 80074ec:	e006      	b.n	80074fc <schedule1HourOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule1);
 80074ee:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <schedule1HourOnDecrease+0x64>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	490b      	ldr	r1, [pc, #44]	; (8007524 <schedule1HourOnDecrease+0x70>)
 80074f6:	480a      	ldr	r0, [pc, #40]	; (8007520 <schedule1HourOnDecrease+0x6c>)
 80074f8:	f00b feda 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	2301      	movs	r3, #1
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	2300      	movs	r3, #0
 8007508:	2264      	movs	r2, #100	; 0x64
 800750a:	2150      	movs	r1, #80	; 0x50
 800750c:	4804      	ldr	r0, [pc, #16]	; (8007520 <schedule1HourOnDecrease+0x6c>)
 800750e:	f7fa fc4d 	bl	8001dac <EF_PutString>
}
 8007512:	bf00      	nop
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	2000088d 	.word	0x2000088d
 800751c:	080175f8 	.word	0x080175f8
 8007520:	200008a4 	.word	0x200008a4
 8007524:	08017600 	.word	0x08017600

08007528 <schedule1MinuteOnIncrease>:
void schedule1MinuteOnIncrease(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 < 59)
 800752e:	4b17      	ldr	r3, [pc, #92]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b3a      	cmp	r3, #58	; 0x3a
 8007534:	d806      	bhi.n	8007544 <schedule1MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule1++;
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	3301      	adds	r3, #1
 800753c:	b2da      	uxtb	r2, r3
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e002      	b.n	800754a <schedule1MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 0;
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule1);
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b09      	cmp	r3, #9
 8007550:	d907      	bls.n	8007562 <schedule1MinuteOnIncrease+0x3a>
 8007552:	4b0e      	ldr	r3, [pc, #56]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	490d      	ldr	r1, [pc, #52]	; (8007590 <schedule1MinuteOnIncrease+0x68>)
 800755a:	480e      	ldr	r0, [pc, #56]	; (8007594 <schedule1MinuteOnIncrease+0x6c>)
 800755c:	f00b fea8 	bl	80132b0 <siprintf>
 8007560:	e006      	b.n	8007570 <schedule1MinuteOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule1);
 8007562:	4b0a      	ldr	r3, [pc, #40]	; (800758c <schedule1MinuteOnIncrease+0x64>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	490b      	ldr	r1, [pc, #44]	; (8007598 <schedule1MinuteOnIncrease+0x70>)
 800756a:	480a      	ldr	r0, [pc, #40]	; (8007594 <schedule1MinuteOnIncrease+0x6c>)
 800756c:	f00b fea0 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007570:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	2301      	movs	r3, #1
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	2264      	movs	r2, #100	; 0x64
 800757e:	218a      	movs	r1, #138	; 0x8a
 8007580:	4804      	ldr	r0, [pc, #16]	; (8007594 <schedule1MinuteOnIncrease+0x6c>)
 8007582:	f7fa fc13 	bl	8001dac <EF_PutString>
}
 8007586:	bf00      	nop
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	2000088f 	.word	0x2000088f
 8007590:	080175f8 	.word	0x080175f8
 8007594:	200008a4 	.word	0x200008a4
 8007598:	08017600 	.word	0x08017600

0800759c <schedule1MinuteOnDecrease>:
void schedule1MinuteOnDecrease(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 > 0)
 80075a2:	4b17      	ldr	r3, [pc, #92]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d006      	beq.n	80075b8 <schedule1MinuteOnDecrease+0x1c>
	{
		minuteOnSchedule1--;
 80075aa:	4b15      	ldr	r3, [pc, #84]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	e002      	b.n	80075be <schedule1MinuteOnDecrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 59;
 80075b8:	4b11      	ldr	r3, [pc, #68]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075ba:	223b      	movs	r2, #59	; 0x3b
 80075bc:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule1);
 80075be:	4b10      	ldr	r3, [pc, #64]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d907      	bls.n	80075d6 <schedule1MinuteOnDecrease+0x3a>
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	490d      	ldr	r1, [pc, #52]	; (8007604 <schedule1MinuteOnDecrease+0x68>)
 80075ce:	480e      	ldr	r0, [pc, #56]	; (8007608 <schedule1MinuteOnDecrease+0x6c>)
 80075d0:	f00b fe6e 	bl	80132b0 <siprintf>
 80075d4:	e006      	b.n	80075e4 <schedule1MinuteOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule1);
 80075d6:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <schedule1MinuteOnDecrease+0x64>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	490b      	ldr	r1, [pc, #44]	; (800760c <schedule1MinuteOnDecrease+0x70>)
 80075de:	480a      	ldr	r0, [pc, #40]	; (8007608 <schedule1MinuteOnDecrease+0x6c>)
 80075e0:	f00b fe66 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80075e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	2301      	movs	r3, #1
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	2264      	movs	r2, #100	; 0x64
 80075f2:	218a      	movs	r1, #138	; 0x8a
 80075f4:	4804      	ldr	r0, [pc, #16]	; (8007608 <schedule1MinuteOnDecrease+0x6c>)
 80075f6:	f7fa fbd9 	bl	8001dac <EF_PutString>
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	2000088f 	.word	0x2000088f
 8007604:	080175f8 	.word	0x080175f8
 8007608:	200008a4 	.word	0x200008a4
 800760c:	08017600 	.word	0x08017600

08007610 <schedule1HourOffIncrease>:

void schedule1HourOffIncrease(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 < 24)
 8007616:	4b17      	ldr	r3, [pc, #92]	; (8007674 <schedule1HourOffIncrease+0x64>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b17      	cmp	r3, #23
 800761c:	d806      	bhi.n	800762c <schedule1HourOffIncrease+0x1c>
	{
		hourOffSchedule1++;
 800761e:	4b15      	ldr	r3, [pc, #84]	; (8007674 <schedule1HourOffIncrease+0x64>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	b2da      	uxtb	r2, r3
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <schedule1HourOffIncrease+0x64>)
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	e002      	b.n	8007632 <schedule1HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 1;
 800762c:	4b11      	ldr	r3, [pc, #68]	; (8007674 <schedule1HourOffIncrease+0x64>)
 800762e:	2201      	movs	r2, #1
 8007630:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule1);
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <schedule1HourOffIncrease+0x64>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b09      	cmp	r3, #9
 8007638:	d907      	bls.n	800764a <schedule1HourOffIncrease+0x3a>
 800763a:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <schedule1HourOffIncrease+0x64>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	490d      	ldr	r1, [pc, #52]	; (8007678 <schedule1HourOffIncrease+0x68>)
 8007642:	480e      	ldr	r0, [pc, #56]	; (800767c <schedule1HourOffIncrease+0x6c>)
 8007644:	f00b fe34 	bl	80132b0 <siprintf>
 8007648:	e006      	b.n	8007658 <schedule1HourOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule1);
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <schedule1HourOffIncrease+0x64>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	490b      	ldr	r1, [pc, #44]	; (8007680 <schedule1HourOffIncrease+0x70>)
 8007652:	480a      	ldr	r0, [pc, #40]	; (800767c <schedule1HourOffIncrease+0x6c>)
 8007654:	f00b fe2c 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007658:	f24c 6318 	movw	r3, #50712	; 0xc618
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	2301      	movs	r3, #1
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	2287      	movs	r2, #135	; 0x87
 8007666:	214e      	movs	r1, #78	; 0x4e
 8007668:	4804      	ldr	r0, [pc, #16]	; (800767c <schedule1HourOffIncrease+0x6c>)
 800766a:	f7fa fb9f 	bl	8001dac <EF_PutString>
}
 800766e:	bf00      	nop
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	2000088e 	.word	0x2000088e
 8007678:	080175f8 	.word	0x080175f8
 800767c:	200008a4 	.word	0x200008a4
 8007680:	08017600 	.word	0x08017600

08007684 <schedule1HourOffDecrease>:
void schedule1HourOffDecrease(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 > 1)
 800768a:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d906      	bls.n	80076a0 <schedule1HourOffDecrease+0x1c>
	{
		hourOffSchedule1--;
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	3b01      	subs	r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e002      	b.n	80076a6 <schedule1HourOffDecrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 24;
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 80076a2:	2218      	movs	r2, #24
 80076a4:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule1);
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	d907      	bls.n	80076be <schedule1HourOffDecrease+0x3a>
 80076ae:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	490d      	ldr	r1, [pc, #52]	; (80076ec <schedule1HourOffDecrease+0x68>)
 80076b6:	480e      	ldr	r0, [pc, #56]	; (80076f0 <schedule1HourOffDecrease+0x6c>)
 80076b8:	f00b fdfa 	bl	80132b0 <siprintf>
 80076bc:	e006      	b.n	80076cc <schedule1HourOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule1);
 80076be:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <schedule1HourOffDecrease+0x64>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	490b      	ldr	r1, [pc, #44]	; (80076f4 <schedule1HourOffDecrease+0x70>)
 80076c6:	480a      	ldr	r0, [pc, #40]	; (80076f0 <schedule1HourOffDecrease+0x6c>)
 80076c8:	f00b fdf2 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80076cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	2301      	movs	r3, #1
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	2300      	movs	r3, #0
 80076d8:	2287      	movs	r2, #135	; 0x87
 80076da:	214e      	movs	r1, #78	; 0x4e
 80076dc:	4804      	ldr	r0, [pc, #16]	; (80076f0 <schedule1HourOffDecrease+0x6c>)
 80076de:	f7fa fb65 	bl	8001dac <EF_PutString>
}
 80076e2:	bf00      	nop
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	2000088e 	.word	0x2000088e
 80076ec:	080175f8 	.word	0x080175f8
 80076f0:	200008a4 	.word	0x200008a4
 80076f4:	08017600 	.word	0x08017600

080076f8 <schedule1MinuteOffIncrease>:
void schedule1MinuteOffIncrease(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 < 59)
 80076fe:	4b17      	ldr	r3, [pc, #92]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b3a      	cmp	r3, #58	; 0x3a
 8007704:	d806      	bhi.n	8007714 <schedule1MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule1++;
 8007706:	4b15      	ldr	r3, [pc, #84]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e002      	b.n	800771a <schedule1MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 0;
 8007714:	4b11      	ldr	r3, [pc, #68]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule1);
 800771a:	4b10      	ldr	r3, [pc, #64]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b09      	cmp	r3, #9
 8007720:	d907      	bls.n	8007732 <schedule1MinuteOffIncrease+0x3a>
 8007722:	4b0e      	ldr	r3, [pc, #56]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	490d      	ldr	r1, [pc, #52]	; (8007760 <schedule1MinuteOffIncrease+0x68>)
 800772a:	480e      	ldr	r0, [pc, #56]	; (8007764 <schedule1MinuteOffIncrease+0x6c>)
 800772c:	f00b fdc0 	bl	80132b0 <siprintf>
 8007730:	e006      	b.n	8007740 <schedule1MinuteOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule1);
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <schedule1MinuteOffIncrease+0x64>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	490b      	ldr	r1, [pc, #44]	; (8007768 <schedule1MinuteOffIncrease+0x70>)
 800773a:	480a      	ldr	r0, [pc, #40]	; (8007764 <schedule1MinuteOffIncrease+0x6c>)
 800773c:	f00b fdb8 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007740:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	2301      	movs	r3, #1
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2300      	movs	r3, #0
 800774c:	2287      	movs	r2, #135	; 0x87
 800774e:	218a      	movs	r1, #138	; 0x8a
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <schedule1MinuteOffIncrease+0x6c>)
 8007752:	f7fa fb2b 	bl	8001dac <EF_PutString>
}
 8007756:	bf00      	nop
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000890 	.word	0x20000890
 8007760:	080175f8 	.word	0x080175f8
 8007764:	200008a4 	.word	0x200008a4
 8007768:	08017600 	.word	0x08017600

0800776c <schedule1MinuteOffDecrease>:
void schedule1MinuteOffDecrease(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 > 0)
 8007772:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <schedule1MinuteOffDecrease+0x1c>
	{
		minuteOffSchedule1--;
 800777a:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	3b01      	subs	r3, #1
 8007780:	b2da      	uxtb	r2, r3
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e002      	b.n	800778e <schedule1MinuteOffDecrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 59;
 8007788:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 800778a:	223b      	movs	r2, #59	; 0x3b
 800778c:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule1);
 800778e:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b09      	cmp	r3, #9
 8007794:	d907      	bls.n	80077a6 <schedule1MinuteOffDecrease+0x3a>
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	490d      	ldr	r1, [pc, #52]	; (80077d4 <schedule1MinuteOffDecrease+0x68>)
 800779e:	480e      	ldr	r0, [pc, #56]	; (80077d8 <schedule1MinuteOffDecrease+0x6c>)
 80077a0:	f00b fd86 	bl	80132b0 <siprintf>
 80077a4:	e006      	b.n	80077b4 <schedule1MinuteOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule1);
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <schedule1MinuteOffDecrease+0x64>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	490b      	ldr	r1, [pc, #44]	; (80077dc <schedule1MinuteOffDecrease+0x70>)
 80077ae:	480a      	ldr	r0, [pc, #40]	; (80077d8 <schedule1MinuteOffDecrease+0x6c>)
 80077b0:	f00b fd7e 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80077b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	2301      	movs	r3, #1
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	2287      	movs	r2, #135	; 0x87
 80077c2:	218a      	movs	r1, #138	; 0x8a
 80077c4:	4804      	ldr	r0, [pc, #16]	; (80077d8 <schedule1MinuteOffDecrease+0x6c>)
 80077c6:	f7fa faf1 	bl	8001dac <EF_PutString>
}
 80077ca:	bf00      	nop
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000890 	.word	0x20000890
 80077d4:	080175f8 	.word	0x080175f8
 80077d8:	200008a4 	.word	0x200008a4
 80077dc:	08017600 	.word	0x08017600

080077e0 <MenuTFTSchedule1ActivityHourMinuteONAdd>:


//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	4603      	mov	r3, r0
 80077e8:	460a      	mov	r2, r1
 80077ea:	80fb      	strh	r3, [r7, #6]
 80077ec:	4613      	mov	r3, r2
 80077ee:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80077f0:	4833      	ldr	r0, [pc, #204]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe0>)
 80077f2:	f7fa f8c1 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2bba      	cmp	r3, #186	; 0xba
 80077fa:	d908      	bls.n	800780e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	2bdd      	cmp	r3, #221	; 0xdd
 8007800:	d805      	bhi.n	800780e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
	{
		EncoderState = ENCODER_SCHEDULE_1_HOUR_ON;
 8007802:	4b30      	ldr	r3, [pc, #192]	; (80078c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 8007804:	2206      	movs	r2, #6
 8007806:	701a      	strb	r2, [r3, #0]
		schedule1HourOnIncrease();
 8007808:	f7ff fe1a 	bl	8007440 <schedule1HourOnIncrease>
 800780c:	e054      	b.n	80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2be8      	cmp	r3, #232	; 0xe8
 8007812:	d909      	bls.n	8007828 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800781a:	d205      	bcs.n	8007828 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
	{
		schedule1MinuteOnIncrease();
 800781c:	f7ff fe84 	bl	8007528 <schedule1MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 8007820:	4b28      	ldr	r3, [pc, #160]	; (80078c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 8007822:	2208      	movs	r2, #8
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	e047      	b.n	80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800782e:	d943      	bls.n	80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007836:	d23f      	bcs.n	80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 8007838:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 800783a:	2208      	movs	r2, #8
 800783c:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule1 < 49)
 800783e:	4b22      	ldr	r3, [pc, #136]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b30      	cmp	r3, #48	; 0x30
 8007844:	d806      	bhi.n	8007854 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8007846:	4b20      	ldr	r3, [pc, #128]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	330a      	adds	r3, #10
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4b1e      	ldr	r3, [pc, #120]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	e012      	b.n	800787a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8007854:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f103 020a 	add.w	r2, r3, #10
 800785c:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xec>)
 800785e:	fb83 1302 	smull	r1, r3, r3, r2
 8007862:	4413      	add	r3, r2
 8007864:	1159      	asrs	r1, r3, #5
 8007866:	17d3      	asrs	r3, r2, #31
 8007868:	1ac9      	subs	r1, r1, r3
 800786a:	460b      	mov	r3, r1
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	1a5b      	subs	r3, r3, r1
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	1ad1      	subs	r1, r2, r3
 8007874:	b2ca      	uxtb	r2, r1
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007878:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule1);
 800787a:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b09      	cmp	r3, #9
 8007880:	d907      	bls.n	8007892 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xb2>
 8007882:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	4911      	ldr	r1, [pc, #68]	; (80078d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf0>)
 800788a:	4812      	ldr	r0, [pc, #72]	; (80078d4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 800788c:	f00b fd10 	bl	80132b0 <siprintf>
 8007890:	e006      	b.n	80078a0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule1);
 8007892:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	490f      	ldr	r1, [pc, #60]	; (80078d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf8>)
 800789a:	480e      	ldr	r0, [pc, #56]	; (80078d4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 800789c:	f00b fd08 	bl	80132b0 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80078a0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	2301      	movs	r3, #1
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	2264      	movs	r2, #100	; 0x64
 80078ae:	218a      	movs	r1, #138	; 0x8a
 80078b0:	4808      	ldr	r0, [pc, #32]	; (80078d4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 80078b2:	f7fa fa7b 	bl	8001dac <EF_PutString>
	}
}
 80078b6:	e7ff      	b.n	80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	0802abac 	.word	0x0802abac
 80078c4:	200008e9 	.word	0x200008e9
 80078c8:	2000088f 	.word	0x2000088f
 80078cc:	88888889 	.word	0x88888889
 80078d0:	080175f8 	.word	0x080175f8
 80078d4:	200008a4 	.word	0x200008a4
 80078d8:	08017600 	.word	0x08017600

080078dc <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	4603      	mov	r3, r0
 80078e4:	460a      	mov	r2, r1
 80078e6:	80fb      	strh	r3, [r7, #6]
 80078e8:	4613      	mov	r3, r2
 80078ea:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80078ec:	4833      	ldr	r0, [pc, #204]	; (80079bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe0>)
 80078ee:	f7fa f843 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	2bba      	cmp	r3, #186	; 0xba
 80078f6:	d908      	bls.n	800790a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	2bdd      	cmp	r3, #221	; 0xdd
 80078fc:	d805      	bhi.n	800790a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule1HourOffIncrease();
 80078fe:	f7ff fe87 	bl	8007610 <schedule1HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_1_HOUR_OFF;
 8007902:	4b2f      	ldr	r3, [pc, #188]	; (80079c0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 8007904:	2207      	movs	r2, #7
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e054      	b.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2be8      	cmp	r3, #232	; 0xe8
 800790e:	d909      	bls.n	8007924 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007916:	d205      	bcs.n	8007924 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 8007918:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 800791a:	2209      	movs	r2, #9
 800791c:	701a      	strb	r2, [r3, #0]
		schedule1MinuteOffIncrease();
 800791e:	f7ff feeb 	bl	80076f8 <schedule1MinuteOffIncrease>
 8007922:	e047      	b.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007924:	88fb      	ldrh	r3, [r7, #6]
 8007926:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800792a:	d943      	bls.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007932:	d23f      	bcs.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 8007934:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 8007936:	2209      	movs	r2, #9
 8007938:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule1 < 49)
 800793a:	4b22      	ldr	r3, [pc, #136]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b30      	cmp	r3, #48	; 0x30
 8007940:	d806      	bhi.n	8007950 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8007942:	4b20      	ldr	r3, [pc, #128]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	330a      	adds	r3, #10
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4b1e      	ldr	r3, [pc, #120]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e012      	b.n	8007976 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007950:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f103 020a 	add.w	r2, r3, #10
 8007958:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xec>)
 800795a:	fb83 1302 	smull	r1, r3, r3, r2
 800795e:	4413      	add	r3, r2
 8007960:	1159      	asrs	r1, r3, #5
 8007962:	17d3      	asrs	r3, r2, #31
 8007964:	1ac9      	subs	r1, r1, r3
 8007966:	460b      	mov	r3, r1
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	1a5b      	subs	r3, r3, r1
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	1ad1      	subs	r1, r2, r3
 8007970:	b2ca      	uxtb	r2, r1
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007974:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule1);
 8007976:	4b13      	ldr	r3, [pc, #76]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b09      	cmp	r3, #9
 800797c:	d907      	bls.n	800798e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xb2>
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	4911      	ldr	r1, [pc, #68]	; (80079cc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf0>)
 8007986:	4812      	ldr	r0, [pc, #72]	; (80079d0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007988:	f00b fc92 	bl	80132b0 <siprintf>
 800798c:	e006      	b.n	800799c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule1);
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	490f      	ldr	r1, [pc, #60]	; (80079d4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf8>)
 8007996:	480e      	ldr	r0, [pc, #56]	; (80079d0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007998:	f00b fc8a 	bl	80132b0 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800799c:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	2301      	movs	r3, #1
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	2300      	movs	r3, #0
 80079a8:	2287      	movs	r2, #135	; 0x87
 80079aa:	218a      	movs	r1, #138	; 0x8a
 80079ac:	4808      	ldr	r0, [pc, #32]	; (80079d0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 80079ae:	f7fa f9fd 	bl	8001dac <EF_PutString>
	}
}
 80079b2:	e7ff      	b.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	0802abac 	.word	0x0802abac
 80079c0:	200008e9 	.word	0x200008e9
 80079c4:	20000890 	.word	0x20000890
 80079c8:	88888889 	.word	0x88888889
 80079cc:	080175f8 	.word	0x080175f8
 80079d0:	200008a4 	.word	0x200008a4
 80079d4:	08017600 	.word	0x08017600

080079d8 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	460a      	mov	r2, r1
 80079e2:	80fb      	strh	r3, [r7, #6]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80079e8:	88fb      	ldrh	r3, [r7, #6]
 80079ea:	2b3b      	cmp	r3, #59	; 0x3b
 80079ec:	d91a      	bls.n	8007a24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b50      	cmp	r3, #80	; 0x50
 80079f2:	d817      	bhi.n	8007a24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80079f4:	4b68      	ldr	r3, [pc, #416]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80079fc:	2100      	movs	r1, #0
 80079fe:	2001      	movs	r0, #1
 8007a00:	f7ff fb26 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007a04:	e003      	b.n	8007a0e <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8007a06:	2101      	movs	r1, #1
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f7ff fb21 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8007a0e:	4b62      	ldr	r3, [pc, #392]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bf0c      	ite	eq
 8007a16:	2301      	moveq	r3, #1
 8007a18:	2300      	movne	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4b5e      	ldr	r3, [pc, #376]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e0b4      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	2b59      	cmp	r3, #89	; 0x59
 8007a28:	d91a      	bls.n	8007a60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b6e      	cmp	r3, #110	; 0x6e
 8007a2e:	d817      	bhi.n	8007a60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007a30:	4b59      	ldr	r3, [pc, #356]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007a38:	2100      	movs	r1, #0
 8007a3a:	2002      	movs	r0, #2
 8007a3c:	f7ff fb08 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007a40:	e003      	b.n	8007a4a <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007a42:	2101      	movs	r1, #1
 8007a44:	2002      	movs	r0, #2
 8007a46:	f7ff fb03 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007a4a:	4b53      	ldr	r3, [pc, #332]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a4c:	785b      	ldrb	r3, [r3, #1]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bf0c      	ite	eq
 8007a52:	2301      	moveq	r3, #1
 8007a54:	2300      	movne	r3, #0
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4b4f      	ldr	r3, [pc, #316]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a5c:	705a      	strb	r2, [r3, #1]
 8007a5e:	e096      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	2b77      	cmp	r3, #119	; 0x77
 8007a64:	d91a      	bls.n	8007a9c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	2b8c      	cmp	r3, #140	; 0x8c
 8007a6a:	d817      	bhi.n	8007a9c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007a6c:	4b4a      	ldr	r3, [pc, #296]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a6e:	789b      	ldrb	r3, [r3, #2]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007a74:	2100      	movs	r1, #0
 8007a76:	2003      	movs	r0, #3
 8007a78:	f7ff faea 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007a7c:	e003      	b.n	8007a86 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007a7e:	2101      	movs	r1, #1
 8007a80:	2003      	movs	r0, #3
 8007a82:	f7ff fae5 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8007a86:	4b44      	ldr	r3, [pc, #272]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a88:	789b      	ldrb	r3, [r3, #2]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf0c      	ite	eq
 8007a8e:	2301      	moveq	r3, #1
 8007a90:	2300      	movne	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	4b40      	ldr	r3, [pc, #256]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a98:	709a      	strb	r2, [r3, #2]
 8007a9a:	e078      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	2b95      	cmp	r3, #149	; 0x95
 8007aa0:	d91a      	bls.n	8007ad8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2baa      	cmp	r3, #170	; 0xaa
 8007aa6:	d817      	bhi.n	8007ad8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007aa8:	4b3b      	ldr	r3, [pc, #236]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007aaa:	78db      	ldrb	r3, [r3, #3]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	2004      	movs	r0, #4
 8007ab4:	f7ff facc 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007ab8:	e003      	b.n	8007ac2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8007aba:	2101      	movs	r1, #1
 8007abc:	2004      	movs	r0, #4
 8007abe:	f7ff fac7 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8007ac2:	4b35      	ldr	r3, [pc, #212]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ac4:	78db      	ldrb	r3, [r3, #3]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4b31      	ldr	r3, [pc, #196]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ad4:	70da      	strb	r2, [r3, #3]
 8007ad6:	e05a      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	2bb3      	cmp	r3, #179	; 0xb3
 8007adc:	d91a      	bls.n	8007b14 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	2bc8      	cmp	r3, #200	; 0xc8
 8007ae2:	d817      	bhi.n	8007b14 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007ae4:	4b2c      	ldr	r3, [pc, #176]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ae6:	791b      	ldrb	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8007aec:	2100      	movs	r1, #0
 8007aee:	2005      	movs	r0, #5
 8007af0:	f7ff faae 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007af4:	e003      	b.n	8007afe <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007af6:	2101      	movs	r1, #1
 8007af8:	2005      	movs	r0, #5
 8007afa:	f7ff faa9 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8007afe:	4b26      	ldr	r3, [pc, #152]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b00:	791b      	ldrb	r3, [r3, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf0c      	ite	eq
 8007b06:	2301      	moveq	r3, #1
 8007b08:	2300      	movne	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b10:	711a      	strb	r2, [r3, #4]
 8007b12:	e03c      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007b14:	88fb      	ldrh	r3, [r7, #6]
 8007b16:	2bd1      	cmp	r3, #209	; 0xd1
 8007b18:	d91a      	bls.n	8007b50 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2be6      	cmp	r3, #230	; 0xe6
 8007b1e:	d817      	bhi.n	8007b50 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b22:	795b      	ldrb	r3, [r3, #5]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007b28:	2100      	movs	r1, #0
 8007b2a:	2006      	movs	r0, #6
 8007b2c:	f7ff fa90 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007b30:	e003      	b.n	8007b3a <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007b32:	2101      	movs	r1, #1
 8007b34:	2006      	movs	r0, #6
 8007b36:	f7ff fa8b 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007b3a:	4b17      	ldr	r3, [pc, #92]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b3c:	795b      	ldrb	r3, [r3, #5]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b4c:	715a      	strb	r2, [r3, #5]
 8007b4e:	e01e      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	2bef      	cmp	r3, #239	; 0xef
 8007b54:	d91b      	bls.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b5c:	d817      	bhi.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b60:	799b      	ldrb	r3, [r3, #6]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007b66:	2100      	movs	r1, #0
 8007b68:	2007      	movs	r0, #7
 8007b6a:	f7ff fa71 	bl	8007050 <changeTFTScheduleDayOfWeek>
 8007b6e:	e003      	b.n	8007b78 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007b70:	2101      	movs	r1, #1
 8007b72:	2007      	movs	r0, #7
 8007b74:	f7ff fa6c 	bl	8007050 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b7a:	799b      	ldrb	r3, [r3, #6]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b8a:	719a      	strb	r2, [r3, #6]
	}
}
 8007b8c:	e7ff      	b.n	8007b8e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000087c 	.word	0x2000087c

08007b9c <schedule2HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF 2 schedule
void schedule2HourOnIncrease(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 < 24)
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b17      	cmp	r3, #23
 8007ba8:	d806      	bhi.n	8007bb8 <schedule2HourOnIncrease+0x1c>
	{
		hourOnSchedule2++;
 8007baa:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e002      	b.n	8007bbe <schedule2HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 1;
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule2);
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d907      	bls.n	8007bd6 <schedule2HourOnIncrease+0x3a>
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	490d      	ldr	r1, [pc, #52]	; (8007c04 <schedule2HourOnIncrease+0x68>)
 8007bce:	480e      	ldr	r0, [pc, #56]	; (8007c08 <schedule2HourOnIncrease+0x6c>)
 8007bd0:	f00b fb6e 	bl	80132b0 <siprintf>
 8007bd4:	e006      	b.n	8007be4 <schedule2HourOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule2);
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <schedule2HourOnIncrease+0x64>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	490b      	ldr	r1, [pc, #44]	; (8007c0c <schedule2HourOnIncrease+0x70>)
 8007bde:	480a      	ldr	r0, [pc, #40]	; (8007c08 <schedule2HourOnIncrease+0x6c>)
 8007be0:	f00b fb66 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007be4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	2301      	movs	r3, #1
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2264      	movs	r2, #100	; 0x64
 8007bf2:	2150      	movs	r1, #80	; 0x50
 8007bf4:	4804      	ldr	r0, [pc, #16]	; (8007c08 <schedule2HourOnIncrease+0x6c>)
 8007bf6:	f7fa f8d9 	bl	8001dac <EF_PutString>
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000891 	.word	0x20000891
 8007c04:	080175f8 	.word	0x080175f8
 8007c08:	200008a4 	.word	0x200008a4
 8007c0c:	08017600 	.word	0x08017600

08007c10 <schedule2HourOnDecrease>:
void schedule2HourOnDecrease(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 > 1)
 8007c16:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d906      	bls.n	8007c2c <schedule2HourOnDecrease+0x1c>
	{
		hourOnSchedule2--;
 8007c1e:	4b15      	ldr	r3, [pc, #84]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	e002      	b.n	8007c32 <schedule2HourOnDecrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 24;
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c2e:	2218      	movs	r2, #24
 8007c30:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule2);
 8007c32:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	d907      	bls.n	8007c4a <schedule2HourOnDecrease+0x3a>
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	490d      	ldr	r1, [pc, #52]	; (8007c78 <schedule2HourOnDecrease+0x68>)
 8007c42:	480e      	ldr	r0, [pc, #56]	; (8007c7c <schedule2HourOnDecrease+0x6c>)
 8007c44:	f00b fb34 	bl	80132b0 <siprintf>
 8007c48:	e006      	b.n	8007c58 <schedule2HourOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule2);
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <schedule2HourOnDecrease+0x64>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	490b      	ldr	r1, [pc, #44]	; (8007c80 <schedule2HourOnDecrease+0x70>)
 8007c52:	480a      	ldr	r0, [pc, #40]	; (8007c7c <schedule2HourOnDecrease+0x6c>)
 8007c54:	f00b fb2c 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	2264      	movs	r2, #100	; 0x64
 8007c66:	2150      	movs	r1, #80	; 0x50
 8007c68:	4804      	ldr	r0, [pc, #16]	; (8007c7c <schedule2HourOnDecrease+0x6c>)
 8007c6a:	f7fa f89f 	bl	8001dac <EF_PutString>
}
 8007c6e:	bf00      	nop
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000891 	.word	0x20000891
 8007c78:	080175f8 	.word	0x080175f8
 8007c7c:	200008a4 	.word	0x200008a4
 8007c80:	08017600 	.word	0x08017600

08007c84 <schedule2MinuteOnIncrease>:
void schedule2MinuteOnIncrease(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 < 59)
 8007c8a:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b3a      	cmp	r3, #58	; 0x3a
 8007c90:	d806      	bhi.n	8007ca0 <schedule2MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule2++;
 8007c92:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e002      	b.n	8007ca6 <schedule2MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 0;
 8007ca0:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule2);
 8007ca6:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d907      	bls.n	8007cbe <schedule2MinuteOnIncrease+0x3a>
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	490d      	ldr	r1, [pc, #52]	; (8007cec <schedule2MinuteOnIncrease+0x68>)
 8007cb6:	480e      	ldr	r0, [pc, #56]	; (8007cf0 <schedule2MinuteOnIncrease+0x6c>)
 8007cb8:	f00b fafa 	bl	80132b0 <siprintf>
 8007cbc:	e006      	b.n	8007ccc <schedule2MinuteOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule2);
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <schedule2MinuteOnIncrease+0x64>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	490b      	ldr	r1, [pc, #44]	; (8007cf4 <schedule2MinuteOnIncrease+0x70>)
 8007cc6:	480a      	ldr	r0, [pc, #40]	; (8007cf0 <schedule2MinuteOnIncrease+0x6c>)
 8007cc8:	f00b faf2 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ccc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2264      	movs	r2, #100	; 0x64
 8007cda:	218a      	movs	r1, #138	; 0x8a
 8007cdc:	4804      	ldr	r0, [pc, #16]	; (8007cf0 <schedule2MinuteOnIncrease+0x6c>)
 8007cde:	f7fa f865 	bl	8001dac <EF_PutString>
}
 8007ce2:	bf00      	nop
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000893 	.word	0x20000893
 8007cec:	080175f8 	.word	0x080175f8
 8007cf0:	200008a4 	.word	0x200008a4
 8007cf4:	08017600 	.word	0x08017600

08007cf8 <schedule2MinuteOnDecrease>:
void schedule2MinuteOnDecrease(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 > 0)
 8007cfe:	4b17      	ldr	r3, [pc, #92]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d006      	beq.n	8007d14 <schedule2MinuteOnDecrease+0x1c>
	{
		minuteOnSchedule2--;
 8007d06:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <schedule2MinuteOnDecrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 59;
 8007d14:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d16:	223b      	movs	r2, #59	; 0x3b
 8007d18:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule2);
 8007d1a:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d907      	bls.n	8007d32 <schedule2MinuteOnDecrease+0x3a>
 8007d22:	4b0e      	ldr	r3, [pc, #56]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	490d      	ldr	r1, [pc, #52]	; (8007d60 <schedule2MinuteOnDecrease+0x68>)
 8007d2a:	480e      	ldr	r0, [pc, #56]	; (8007d64 <schedule2MinuteOnDecrease+0x6c>)
 8007d2c:	f00b fac0 	bl	80132b0 <siprintf>
 8007d30:	e006      	b.n	8007d40 <schedule2MinuteOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule2);
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <schedule2MinuteOnDecrease+0x64>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	490b      	ldr	r1, [pc, #44]	; (8007d68 <schedule2MinuteOnDecrease+0x70>)
 8007d3a:	480a      	ldr	r0, [pc, #40]	; (8007d64 <schedule2MinuteOnDecrease+0x6c>)
 8007d3c:	f00b fab8 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	2301      	movs	r3, #1
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2264      	movs	r2, #100	; 0x64
 8007d4e:	218a      	movs	r1, #138	; 0x8a
 8007d50:	4804      	ldr	r0, [pc, #16]	; (8007d64 <schedule2MinuteOnDecrease+0x6c>)
 8007d52:	f7fa f82b 	bl	8001dac <EF_PutString>
}
 8007d56:	bf00      	nop
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000893 	.word	0x20000893
 8007d60:	080175f8 	.word	0x080175f8
 8007d64:	200008a4 	.word	0x200008a4
 8007d68:	08017600 	.word	0x08017600

08007d6c <schedule2HourOffIncrease>:

void schedule2HourOffIncrease(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 < 24)
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b17      	cmp	r3, #23
 8007d78:	d806      	bhi.n	8007d88 <schedule2HourOffIncrease+0x1c>
	{
		hourOffSchedule2++;
 8007d7a:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e002      	b.n	8007d8e <schedule2HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 1;
 8007d88:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule2);
 8007d8e:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b09      	cmp	r3, #9
 8007d94:	d907      	bls.n	8007da6 <schedule2HourOffIncrease+0x3a>
 8007d96:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	490d      	ldr	r1, [pc, #52]	; (8007dd4 <schedule2HourOffIncrease+0x68>)
 8007d9e:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <schedule2HourOffIncrease+0x6c>)
 8007da0:	f00b fa86 	bl	80132b0 <siprintf>
 8007da4:	e006      	b.n	8007db4 <schedule2HourOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule2);
 8007da6:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <schedule2HourOffIncrease+0x64>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	490b      	ldr	r1, [pc, #44]	; (8007ddc <schedule2HourOffIncrease+0x70>)
 8007dae:	480a      	ldr	r0, [pc, #40]	; (8007dd8 <schedule2HourOffIncrease+0x6c>)
 8007db0:	f00b fa7e 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007db4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	2301      	movs	r3, #1
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2287      	movs	r2, #135	; 0x87
 8007dc2:	214e      	movs	r1, #78	; 0x4e
 8007dc4:	4804      	ldr	r0, [pc, #16]	; (8007dd8 <schedule2HourOffIncrease+0x6c>)
 8007dc6:	f7f9 fff1 	bl	8001dac <EF_PutString>
}
 8007dca:	bf00      	nop
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000892 	.word	0x20000892
 8007dd4:	080175f8 	.word	0x080175f8
 8007dd8:	200008a4 	.word	0x200008a4
 8007ddc:	08017600 	.word	0x08017600

08007de0 <schedule2HourOffDecrease>:
void schedule2HourOffDecrease(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 > 1)
 8007de6:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d906      	bls.n	8007dfc <schedule2HourOffDecrease+0x1c>
	{
		hourOffSchedule2--;
 8007dee:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	e002      	b.n	8007e02 <schedule2HourOffDecrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 24;
 8007dfc:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007dfe:	2218      	movs	r2, #24
 8007e00:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule2);
 8007e02:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b09      	cmp	r3, #9
 8007e08:	d907      	bls.n	8007e1a <schedule2HourOffDecrease+0x3a>
 8007e0a:	4b0e      	ldr	r3, [pc, #56]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	490d      	ldr	r1, [pc, #52]	; (8007e48 <schedule2HourOffDecrease+0x68>)
 8007e12:	480e      	ldr	r0, [pc, #56]	; (8007e4c <schedule2HourOffDecrease+0x6c>)
 8007e14:	f00b fa4c 	bl	80132b0 <siprintf>
 8007e18:	e006      	b.n	8007e28 <schedule2HourOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule2);
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <schedule2HourOffDecrease+0x64>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	490b      	ldr	r1, [pc, #44]	; (8007e50 <schedule2HourOffDecrease+0x70>)
 8007e22:	480a      	ldr	r0, [pc, #40]	; (8007e4c <schedule2HourOffDecrease+0x6c>)
 8007e24:	f00b fa44 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	2287      	movs	r2, #135	; 0x87
 8007e36:	214e      	movs	r1, #78	; 0x4e
 8007e38:	4804      	ldr	r0, [pc, #16]	; (8007e4c <schedule2HourOffDecrease+0x6c>)
 8007e3a:	f7f9 ffb7 	bl	8001dac <EF_PutString>
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000892 	.word	0x20000892
 8007e48:	080175f8 	.word	0x080175f8
 8007e4c:	200008a4 	.word	0x200008a4
 8007e50:	08017600 	.word	0x08017600

08007e54 <schedule2MinuteOffIncrease>:
void schedule2MinuteOffIncrease(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 < 59)
 8007e5a:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b3a      	cmp	r3, #58	; 0x3a
 8007e60:	d806      	bhi.n	8007e70 <schedule2MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule2++;
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	3301      	adds	r3, #1
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <schedule2MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 0;
 8007e70:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule2);
 8007e76:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d907      	bls.n	8007e8e <schedule2MinuteOffIncrease+0x3a>
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	490d      	ldr	r1, [pc, #52]	; (8007ebc <schedule2MinuteOffIncrease+0x68>)
 8007e86:	480e      	ldr	r0, [pc, #56]	; (8007ec0 <schedule2MinuteOffIncrease+0x6c>)
 8007e88:	f00b fa12 	bl	80132b0 <siprintf>
 8007e8c:	e006      	b.n	8007e9c <schedule2MinuteOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule2);
 8007e8e:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <schedule2MinuteOffIncrease+0x64>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	490b      	ldr	r1, [pc, #44]	; (8007ec4 <schedule2MinuteOffIncrease+0x70>)
 8007e96:	480a      	ldr	r0, [pc, #40]	; (8007ec0 <schedule2MinuteOffIncrease+0x6c>)
 8007e98:	f00b fa0a 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e9c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	2287      	movs	r2, #135	; 0x87
 8007eaa:	218a      	movs	r1, #138	; 0x8a
 8007eac:	4804      	ldr	r0, [pc, #16]	; (8007ec0 <schedule2MinuteOffIncrease+0x6c>)
 8007eae:	f7f9 ff7d 	bl	8001dac <EF_PutString>
}
 8007eb2:	bf00      	nop
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000894 	.word	0x20000894
 8007ebc:	080175f8 	.word	0x080175f8
 8007ec0:	200008a4 	.word	0x200008a4
 8007ec4:	08017600 	.word	0x08017600

08007ec8 <schedule2MinuteOffDecrease>:
void schedule2MinuteOffDecrease(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 > 0)
 8007ece:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d006      	beq.n	8007ee4 <schedule2MinuteOffDecrease+0x1c>
	{
		minuteOffSchedule2--;
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <schedule2MinuteOffDecrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 59;
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007ee6:	223b      	movs	r2, #59	; 0x3b
 8007ee8:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule2);
 8007eea:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d907      	bls.n	8007f02 <schedule2MinuteOffDecrease+0x3a>
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	490d      	ldr	r1, [pc, #52]	; (8007f30 <schedule2MinuteOffDecrease+0x68>)
 8007efa:	480e      	ldr	r0, [pc, #56]	; (8007f34 <schedule2MinuteOffDecrease+0x6c>)
 8007efc:	f00b f9d8 	bl	80132b0 <siprintf>
 8007f00:	e006      	b.n	8007f10 <schedule2MinuteOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule2);
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <schedule2MinuteOffDecrease+0x64>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	490b      	ldr	r1, [pc, #44]	; (8007f38 <schedule2MinuteOffDecrease+0x70>)
 8007f0a:	480a      	ldr	r0, [pc, #40]	; (8007f34 <schedule2MinuteOffDecrease+0x6c>)
 8007f0c:	f00b f9d0 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007f10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	2301      	movs	r3, #1
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2287      	movs	r2, #135	; 0x87
 8007f1e:	218a      	movs	r1, #138	; 0x8a
 8007f20:	4804      	ldr	r0, [pc, #16]	; (8007f34 <schedule2MinuteOffDecrease+0x6c>)
 8007f22:	f7f9 ff43 	bl	8001dac <EF_PutString>
}
 8007f26:	bf00      	nop
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000894 	.word	0x20000894
 8007f30:	080175f8 	.word	0x080175f8
 8007f34:	200008a4 	.word	0x200008a4
 8007f38:	08017600 	.word	0x08017600

08007f3c <MenuTFTSchedule2ActivityHourMinuteONAdd>:
//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	4603      	mov	r3, r0
 8007f44:	460a      	mov	r2, r1
 8007f46:	80fb      	strh	r3, [r7, #6]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007f4c:	4833      	ldr	r0, [pc, #204]	; (800801c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe0>)
 8007f4e:	f7f9 fd13 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	2bba      	cmp	r3, #186	; 0xba
 8007f56:	d908      	bls.n	8007f6a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
 8007f58:	88fb      	ldrh	r3, [r7, #6]
 8007f5a:	2bdd      	cmp	r3, #221	; 0xdd
 8007f5c:	d805      	bhi.n	8007f6a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
	{
		schedule2HourOnIncrease();
 8007f5e:	f7ff fe1d 	bl	8007b9c <schedule2HourOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_ON;
 8007f62:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f64:	220a      	movs	r2, #10
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e054      	b.n	8008014 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	2be8      	cmp	r3, #232	; 0xe8
 8007f6e:	d909      	bls.n	8007f84 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007f76:	d205      	bcs.n	8007f84 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
	{
		schedule2MinuteOnIncrease();
 8007f78:	f7ff fe84 	bl	8007c84 <schedule2MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007f7c:	4b28      	ldr	r3, [pc, #160]	; (8008020 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f7e:	220c      	movs	r2, #12
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	e047      	b.n	8008014 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007f8a:	d943      	bls.n	8008014 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007f92:	d23f      	bcs.n	8008014 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007f94:	4b22      	ldr	r3, [pc, #136]	; (8008020 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f96:	220c      	movs	r2, #12
 8007f98:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule2 < 49)
 8007f9a:	4b22      	ldr	r3, [pc, #136]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b30      	cmp	r3, #48	; 0x30
 8007fa0:	d806      	bhi.n	8007fb0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007fa2:	4b20      	ldr	r3, [pc, #128]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	330a      	adds	r3, #10
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e012      	b.n	8007fd6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007fb0:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f103 020a 	add.w	r2, r3, #10
 8007fb8:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xec>)
 8007fba:	fb83 1302 	smull	r1, r3, r3, r2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	1159      	asrs	r1, r3, #5
 8007fc2:	17d3      	asrs	r3, r2, #31
 8007fc4:	1ac9      	subs	r1, r1, r3
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	1a5b      	subs	r3, r3, r1
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	1ad1      	subs	r1, r2, r3
 8007fd0:	b2ca      	uxtb	r2, r1
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fd4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule2);
 8007fd6:	4b13      	ldr	r3, [pc, #76]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d907      	bls.n	8007fee <MenuTFTSchedule2ActivityHourMinuteONAdd+0xb2>
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	4911      	ldr	r1, [pc, #68]	; (800802c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf0>)
 8007fe6:	4812      	ldr	r0, [pc, #72]	; (8008030 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fe8:	f00b f962 	bl	80132b0 <siprintf>
 8007fec:	e006      	b.n	8007ffc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule2);
 8007fee:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	490f      	ldr	r1, [pc, #60]	; (8008034 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf8>)
 8007ff6:	480e      	ldr	r0, [pc, #56]	; (8008030 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007ff8:	f00b f95a 	bl	80132b0 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ffc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	2301      	movs	r3, #1
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2300      	movs	r3, #0
 8008008:	2264      	movs	r2, #100	; 0x64
 800800a:	218a      	movs	r1, #138	; 0x8a
 800800c:	4808      	ldr	r0, [pc, #32]	; (8008030 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 800800e:	f7f9 fecd 	bl	8001dac <EF_PutString>
	}
}
 8008012:	e7ff      	b.n	8008014 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	0802abac 	.word	0x0802abac
 8008020:	200008e9 	.word	0x200008e9
 8008024:	20000893 	.word	0x20000893
 8008028:	88888889 	.word	0x88888889
 800802c:	080175f8 	.word	0x080175f8
 8008030:	200008a4 	.word	0x200008a4
 8008034:	08017600 	.word	0x08017600

08008038 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af02      	add	r7, sp, #8
 800803e:	4603      	mov	r3, r0
 8008040:	460a      	mov	r2, r1
 8008042:	80fb      	strh	r3, [r7, #6]
 8008044:	4613      	mov	r3, r2
 8008046:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008048:	4833      	ldr	r0, [pc, #204]	; (8008118 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe0>)
 800804a:	f7f9 fc95 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	2bba      	cmp	r3, #186	; 0xba
 8008052:	d908      	bls.n	8008066 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	2bdd      	cmp	r3, #221	; 0xdd
 8008058:	d805      	bhi.n	8008066 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule2HourOffIncrease();
 800805a:	f7ff fe87 	bl	8007d6c <schedule2HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_OFF;
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8008060:	220b      	movs	r2, #11
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	e054      	b.n	8008110 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	2be8      	cmp	r3, #232	; 0xe8
 800806a:	d909      	bls.n	8008080 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
 800806c:	88fb      	ldrh	r3, [r7, #6]
 800806e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8008072:	d205      	bcs.n	8008080 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
	{
		schedule2MinuteOffIncrease();
 8008074:	f7ff feee 	bl	8007e54 <schedule2MinuteOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8008078:	4b28      	ldr	r3, [pc, #160]	; (800811c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 800807a:	220d      	movs	r2, #13
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e047      	b.n	8008110 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8008086:	d943      	bls.n	8008110 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800808e:	d23f      	bcs.n	8008110 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8008090:	4b22      	ldr	r3, [pc, #136]	; (800811c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8008092:	220d      	movs	r2, #13
 8008094:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule2 < 49)
 8008096:	4b22      	ldr	r3, [pc, #136]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b30      	cmp	r3, #48	; 0x30
 800809c:	d806      	bhi.n	80080ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 800809e:	4b20      	ldr	r3, [pc, #128]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	330a      	adds	r3, #10
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4b1e      	ldr	r3, [pc, #120]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	e012      	b.n	80080d2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 80080ac:	4b1c      	ldr	r3, [pc, #112]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f103 020a 	add.w	r2, r3, #10
 80080b4:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xec>)
 80080b6:	fb83 1302 	smull	r1, r3, r3, r2
 80080ba:	4413      	add	r3, r2
 80080bc:	1159      	asrs	r1, r3, #5
 80080be:	17d3      	asrs	r3, r2, #31
 80080c0:	1ac9      	subs	r1, r1, r3
 80080c2:	460b      	mov	r3, r1
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	1a5b      	subs	r3, r3, r1
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	1ad1      	subs	r1, r2, r3
 80080cc:	b2ca      	uxtb	r2, r1
 80080ce:	4b14      	ldr	r3, [pc, #80]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080d0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule2);
 80080d2:	4b13      	ldr	r3, [pc, #76]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d907      	bls.n	80080ea <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xb2>
 80080da:	4b11      	ldr	r3, [pc, #68]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	4911      	ldr	r1, [pc, #68]	; (8008128 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf0>)
 80080e2:	4812      	ldr	r0, [pc, #72]	; (800812c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080e4:	f00b f8e4 	bl	80132b0 <siprintf>
 80080e8:	e006      	b.n	80080f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule2);
 80080ea:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	490f      	ldr	r1, [pc, #60]	; (8008130 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf8>)
 80080f2:	480e      	ldr	r0, [pc, #56]	; (800812c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080f4:	f00b f8dc 	bl	80132b0 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80080f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	2301      	movs	r3, #1
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	2287      	movs	r2, #135	; 0x87
 8008106:	218a      	movs	r1, #138	; 0x8a
 8008108:	4808      	ldr	r0, [pc, #32]	; (800812c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 800810a:	f7f9 fe4f 	bl	8001dac <EF_PutString>
	}
}
 800810e:	e7ff      	b.n	8008110 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	0802abac 	.word	0x0802abac
 800811c:	200008e9 	.word	0x200008e9
 8008120:	20000894 	.word	0x20000894
 8008124:	88888889 	.word	0x88888889
 8008128:	080175f8 	.word	0x080175f8
 800812c:	200008a4 	.word	0x200008a4
 8008130:	08017600 	.word	0x08017600

08008134 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	460a      	mov	r2, r1
 800813e:	80fb      	strh	r3, [r7, #6]
 8008140:	4613      	mov	r3, r2
 8008142:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	2b14      	cmp	r3, #20
 8008148:	d919      	bls.n	800817e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	2b29      	cmp	r3, #41	; 0x29
 800814e:	d816      	bhi.n	800817e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8008150:	4b82      	ldr	r3, [pc, #520]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8008158:	2100      	movs	r1, #0
 800815a:	2001      	movs	r0, #1
 800815c:	f7ff f855 	bl	800720a <changeTFTScheduleRelayLights>
 8008160:	e003      	b.n	800816a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8008162:	2101      	movs	r1, #1
 8008164:	2001      	movs	r0, #1
 8008166:	f7ff f850 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800816a:	4b7c      	ldr	r3, [pc, #496]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	4b78      	ldr	r3, [pc, #480]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800817c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	2b34      	cmp	r3, #52	; 0x34
 8008182:	d919      	bls.n	80081b8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	2b49      	cmp	r3, #73	; 0x49
 8008188:	d816      	bhi.n	80081b8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800818a:	4b74      	ldr	r3, [pc, #464]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8008192:	2100      	movs	r1, #0
 8008194:	2002      	movs	r0, #2
 8008196:	f7ff f838 	bl	800720a <changeTFTScheduleRelayLights>
 800819a:	e003      	b.n	80081a4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 800819c:	2101      	movs	r1, #1
 800819e:	2002      	movs	r0, #2
 80081a0:	f7ff f833 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80081a4:	4b6d      	ldr	r3, [pc, #436]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	4b69      	ldr	r3, [pc, #420]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081b6:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80081b8:	88fb      	ldrh	r3, [r7, #6]
 80081ba:	2b54      	cmp	r3, #84	; 0x54
 80081bc:	d919      	bls.n	80081f2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	2b69      	cmp	r3, #105	; 0x69
 80081c2:	d816      	bhi.n	80081f2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80081c4:	4b65      	ldr	r3, [pc, #404]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081c6:	789b      	ldrb	r3, [r3, #2]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 80081cc:	2100      	movs	r1, #0
 80081ce:	2003      	movs	r0, #3
 80081d0:	f7ff f81b 	bl	800720a <changeTFTScheduleRelayLights>
 80081d4:	e003      	b.n	80081de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80081d6:	2101      	movs	r1, #1
 80081d8:	2003      	movs	r0, #3
 80081da:	f7ff f816 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80081de:	4b5f      	ldr	r3, [pc, #380]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081e0:	789b      	ldrb	r3, [r3, #2]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	4b5b      	ldr	r3, [pc, #364]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081f0:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	2b74      	cmp	r3, #116	; 0x74
 80081f6:	d919      	bls.n	800822c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	2b89      	cmp	r3, #137	; 0x89
 80081fc:	d816      	bhi.n	800822c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80081fe:	4b57      	ldr	r3, [pc, #348]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008200:	78db      	ldrb	r3, [r3, #3]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8008206:	2100      	movs	r1, #0
 8008208:	2004      	movs	r0, #4
 800820a:	f7fe fffe 	bl	800720a <changeTFTScheduleRelayLights>
 800820e:	e003      	b.n	8008218 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8008210:	2101      	movs	r1, #1
 8008212:	2004      	movs	r0, #4
 8008214:	f7fe fff9 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8008218:	4b50      	ldr	r3, [pc, #320]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800821a:	78db      	ldrb	r3, [r3, #3]
 800821c:	2b00      	cmp	r3, #0
 800821e:	bf0c      	ite	eq
 8008220:	2301      	moveq	r3, #1
 8008222:	2300      	movne	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	4b4c      	ldr	r3, [pc, #304]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800822a:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	2b94      	cmp	r3, #148	; 0x94
 8008230:	d919      	bls.n	8008266 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2ba9      	cmp	r3, #169	; 0xa9
 8008236:	d816      	bhi.n	8008266 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008238:	4b48      	ldr	r3, [pc, #288]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800823a:	791b      	ldrb	r3, [r3, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8008240:	2100      	movs	r1, #0
 8008242:	2005      	movs	r0, #5
 8008244:	f7fe ffe1 	bl	800720a <changeTFTScheduleRelayLights>
 8008248:	e003      	b.n	8008252 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800824a:	2101      	movs	r1, #1
 800824c:	2005      	movs	r0, #5
 800824e:	f7fe ffdc 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8008252:	4b42      	ldr	r3, [pc, #264]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008254:	791b      	ldrb	r3, [r3, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	bf0c      	ite	eq
 800825a:	2301      	moveq	r3, #1
 800825c:	2300      	movne	r3, #0
 800825e:	b2db      	uxtb	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	4b3e      	ldr	r3, [pc, #248]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008264:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	2bb4      	cmp	r3, #180	; 0xb4
 800826a:	d919      	bls.n	80082a0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	2bc9      	cmp	r3, #201	; 0xc9
 8008270:	d816      	bhi.n	80082a0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8008272:	4b3a      	ldr	r3, [pc, #232]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008274:	795b      	ldrb	r3, [r3, #5]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800827a:	2100      	movs	r1, #0
 800827c:	2006      	movs	r0, #6
 800827e:	f7fe ffc4 	bl	800720a <changeTFTScheduleRelayLights>
 8008282:	e003      	b.n	800828c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8008284:	2101      	movs	r1, #1
 8008286:	2006      	movs	r0, #6
 8008288:	f7fe ffbf 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 800828c:	4b33      	ldr	r3, [pc, #204]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800828e:	795b      	ldrb	r3, [r3, #5]
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	4b2f      	ldr	r3, [pc, #188]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800829e:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	2bd4      	cmp	r3, #212	; 0xd4
 80082a4:	d919      	bls.n	80082da <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	2be9      	cmp	r3, #233	; 0xe9
 80082aa:	d816      	bhi.n	80082da <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80082ac:	4b2b      	ldr	r3, [pc, #172]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082ae:	799b      	ldrb	r3, [r3, #6]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 80082b4:	2100      	movs	r1, #0
 80082b6:	2007      	movs	r0, #7
 80082b8:	f7fe ffa7 	bl	800720a <changeTFTScheduleRelayLights>
 80082bc:	e003      	b.n	80082c6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80082be:	2101      	movs	r1, #1
 80082c0:	2007      	movs	r0, #7
 80082c2:	f7fe ffa2 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80082c6:	4b25      	ldr	r3, [pc, #148]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082c8:	799b      	ldrb	r3, [r3, #6]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bf0c      	ite	eq
 80082ce:	2301      	moveq	r3, #1
 80082d0:	2300      	movne	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	4b21      	ldr	r3, [pc, #132]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082d8:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	2bf4      	cmp	r3, #244	; 0xf4
 80082de:	d91a      	bls.n	8008316 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80082e6:	d216      	bcs.n	8008316 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80082e8:	4b1c      	ldr	r3, [pc, #112]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082ea:	79db      	ldrb	r3, [r3, #7]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d004      	beq.n	80082fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 80082f0:	2100      	movs	r1, #0
 80082f2:	2008      	movs	r0, #8
 80082f4:	f7fe ff89 	bl	800720a <changeTFTScheduleRelayLights>
 80082f8:	e003      	b.n	8008302 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80082fa:	2101      	movs	r1, #1
 80082fc:	2008      	movs	r0, #8
 80082fe:	f7fe ff84 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8008302:	4b16      	ldr	r3, [pc, #88]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008304:	79db      	ldrb	r3, [r3, #7]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008314:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800831c:	d91a      	bls.n	8008354 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008324:	d216      	bcs.n	8008354 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008328:	7a1b      	ldrb	r3, [r3, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 800832e:	2100      	movs	r1, #0
 8008330:	2009      	movs	r0, #9
 8008332:	f7fe ff6a 	bl	800720a <changeTFTScheduleRelayLights>
 8008336:	e003      	b.n	8008340 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008338:	2101      	movs	r1, #1
 800833a:	2009      	movs	r0, #9
 800833c:	f7fe ff65 	bl	800720a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8008340:	4b06      	ldr	r3, [pc, #24]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008342:	7a1b      	ldrb	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008352:	721a      	strb	r2, [r3, #8]
	}

}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20000870 	.word	0x20000870

08008360 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	460a      	mov	r2, r1
 800836a:	80fb      	strh	r3, [r7, #6]
 800836c:	4613      	mov	r3, r2
 800836e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8008370:	88fb      	ldrh	r3, [r7, #6]
 8008372:	2b14      	cmp	r3, #20
 8008374:	d919      	bls.n	80083aa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	2b29      	cmp	r3, #41	; 0x29
 800837a:	d816      	bhi.n	80083aa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800837c:	4b82      	ldr	r3, [pc, #520]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8008384:	2100      	movs	r1, #0
 8008386:	2001      	movs	r0, #1
 8008388:	f7fe ff3f 	bl	800720a <changeTFTScheduleRelayLights>
 800838c:	e003      	b.n	8008396 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800838e:	2101      	movs	r1, #1
 8008390:	2001      	movs	r0, #1
 8008392:	f7fe ff3a 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8008396:	4b7c      	ldr	r3, [pc, #496]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	bf0c      	ite	eq
 800839e:	2301      	moveq	r3, #1
 80083a0:	2300      	movne	r3, #0
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b78      	ldr	r3, [pc, #480]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083a8:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	2b34      	cmp	r3, #52	; 0x34
 80083ae:	d919      	bls.n	80083e4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	2b49      	cmp	r3, #73	; 0x49
 80083b4:	d816      	bhi.n	80083e4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 80083b6:	4b74      	ldr	r3, [pc, #464]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 80083be:	2100      	movs	r1, #0
 80083c0:	2002      	movs	r0, #2
 80083c2:	f7fe ff22 	bl	800720a <changeTFTScheduleRelayLights>
 80083c6:	e003      	b.n	80083d0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 80083c8:	2101      	movs	r1, #1
 80083ca:	2002      	movs	r0, #2
 80083cc:	f7fe ff1d 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80083d0:	4b6d      	ldr	r3, [pc, #436]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bf0c      	ite	eq
 80083d8:	2301      	moveq	r3, #1
 80083da:	2300      	movne	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	4b69      	ldr	r3, [pc, #420]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083e2:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	2b54      	cmp	r3, #84	; 0x54
 80083e8:	d919      	bls.n	800841e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	2b69      	cmp	r3, #105	; 0x69
 80083ee:	d816      	bhi.n	800841e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80083f0:	4b65      	ldr	r3, [pc, #404]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083f2:	789b      	ldrb	r3, [r3, #2]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 80083f8:	2100      	movs	r1, #0
 80083fa:	2003      	movs	r0, #3
 80083fc:	f7fe ff05 	bl	800720a <changeTFTScheduleRelayLights>
 8008400:	e003      	b.n	800840a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8008402:	2101      	movs	r1, #1
 8008404:	2003      	movs	r0, #3
 8008406:	f7fe ff00 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800840a:	4b5f      	ldr	r3, [pc, #380]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800840c:	789b      	ldrb	r3, [r3, #2]
 800840e:	2b00      	cmp	r3, #0
 8008410:	bf0c      	ite	eq
 8008412:	2301      	moveq	r3, #1
 8008414:	2300      	movne	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	4b5b      	ldr	r3, [pc, #364]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800841c:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	2b74      	cmp	r3, #116	; 0x74
 8008422:	d919      	bls.n	8008458 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	2b89      	cmp	r3, #137	; 0x89
 8008428:	d816      	bhi.n	8008458 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800842a:	4b57      	ldr	r3, [pc, #348]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800842c:	78db      	ldrb	r3, [r3, #3]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 8008432:	2100      	movs	r1, #0
 8008434:	2004      	movs	r0, #4
 8008436:	f7fe fee8 	bl	800720a <changeTFTScheduleRelayLights>
 800843a:	e003      	b.n	8008444 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 800843c:	2101      	movs	r1, #1
 800843e:	2004      	movs	r0, #4
 8008440:	f7fe fee3 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8008444:	4b50      	ldr	r3, [pc, #320]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008446:	78db      	ldrb	r3, [r3, #3]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	4b4c      	ldr	r3, [pc, #304]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008456:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	2b94      	cmp	r3, #148	; 0x94
 800845c:	d919      	bls.n	8008492 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	2ba9      	cmp	r3, #169	; 0xa9
 8008462:	d816      	bhi.n	8008492 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008464:	4b48      	ldr	r3, [pc, #288]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008466:	791b      	ldrb	r3, [r3, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 800846c:	2100      	movs	r1, #0
 800846e:	2005      	movs	r0, #5
 8008470:	f7fe fecb 	bl	800720a <changeTFTScheduleRelayLights>
 8008474:	e003      	b.n	800847e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8008476:	2101      	movs	r1, #1
 8008478:	2005      	movs	r0, #5
 800847a:	f7fe fec6 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800847e:	4b42      	ldr	r3, [pc, #264]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	bf0c      	ite	eq
 8008486:	2301      	moveq	r3, #1
 8008488:	2300      	movne	r3, #0
 800848a:	b2db      	uxtb	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	4b3e      	ldr	r3, [pc, #248]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008490:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	2bb4      	cmp	r3, #180	; 0xb4
 8008496:	d919      	bls.n	80084cc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	2bc9      	cmp	r3, #201	; 0xc9
 800849c:	d816      	bhi.n	80084cc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800849e:	4b3a      	ldr	r3, [pc, #232]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 80084a6:	2100      	movs	r1, #0
 80084a8:	2006      	movs	r0, #6
 80084aa:	f7fe feae 	bl	800720a <changeTFTScheduleRelayLights>
 80084ae:	e003      	b.n	80084b8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80084b0:	2101      	movs	r1, #1
 80084b2:	2006      	movs	r0, #6
 80084b4:	f7fe fea9 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 80084b8:	4b33      	ldr	r3, [pc, #204]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084ba:	795b      	ldrb	r3, [r3, #5]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bf0c      	ite	eq
 80084c0:	2301      	moveq	r3, #1
 80084c2:	2300      	movne	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b2f      	ldr	r3, [pc, #188]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084ca:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80084cc:	88fb      	ldrh	r3, [r7, #6]
 80084ce:	2bd4      	cmp	r3, #212	; 0xd4
 80084d0:	d919      	bls.n	8008506 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	2be9      	cmp	r3, #233	; 0xe9
 80084d6:	d816      	bhi.n	8008506 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80084d8:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084da:	799b      	ldrb	r3, [r3, #6]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80084e0:	2100      	movs	r1, #0
 80084e2:	2007      	movs	r0, #7
 80084e4:	f7fe fe91 	bl	800720a <changeTFTScheduleRelayLights>
 80084e8:	e003      	b.n	80084f2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80084ea:	2101      	movs	r1, #1
 80084ec:	2007      	movs	r0, #7
 80084ee:	f7fe fe8c 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80084f2:	4b25      	ldr	r3, [pc, #148]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084f4:	799b      	ldrb	r3, [r3, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf0c      	ite	eq
 80084fa:	2301      	moveq	r3, #1
 80084fc:	2300      	movne	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	4b21      	ldr	r3, [pc, #132]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008504:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	2bf4      	cmp	r3, #244	; 0xf4
 800850a:	d91a      	bls.n	8008542 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008512:	d216      	bcs.n	8008542 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8008514:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008516:	79db      	ldrb	r3, [r3, #7]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 800851c:	2100      	movs	r1, #0
 800851e:	2008      	movs	r0, #8
 8008520:	f7fe fe73 	bl	800720a <changeTFTScheduleRelayLights>
 8008524:	e003      	b.n	800852e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8008526:	2101      	movs	r1, #1
 8008528:	2008      	movs	r0, #8
 800852a:	f7fe fe6e 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800852e:	4b16      	ldr	r3, [pc, #88]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008530:	79db      	ldrb	r3, [r3, #7]
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf0c      	ite	eq
 8008536:	2301      	moveq	r3, #1
 8008538:	2300      	movne	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	4b12      	ldr	r3, [pc, #72]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008540:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8008542:	88fb      	ldrh	r3, [r7, #6]
 8008544:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8008548:	d91a      	bls.n	8008580 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008550:	d216      	bcs.n	8008580 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008554:	7a1b      	ldrb	r3, [r3, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 800855a:	2100      	movs	r1, #0
 800855c:	2009      	movs	r0, #9
 800855e:	f7fe fe54 	bl	800720a <changeTFTScheduleRelayLights>
 8008562:	e003      	b.n	800856c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008564:	2101      	movs	r1, #1
 8008566:	2009      	movs	r0, #9
 8008568:	f7fe fe4f 	bl	800720a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800856e:	7a1b      	ldrb	r3, [r3, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	4b02      	ldr	r3, [pc, #8]	; (8008588 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800857e:	721a      	strb	r2, [r3, #8]
	}
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20000884 	.word	0x20000884

0800858c <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d118      	bne.n	80085ce <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 800859c:	491b      	ldr	r1, [pc, #108]	; (800860c <updateAllSchedulesInfo+0x80>)
 800859e:	2001      	movs	r0, #1
 80085a0:	f7fa fe27 	bl	80031f2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 80085a4:	491a      	ldr	r1, [pc, #104]	; (8008610 <updateAllSchedulesInfo+0x84>)
 80085a6:	2001      	movs	r0, #1
 80085a8:	f7fa fe47 	bl	800323a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 80085ac:	4919      	ldr	r1, [pc, #100]	; (8008614 <updateAllSchedulesInfo+0x88>)
 80085ae:	2001      	movs	r0, #1
 80085b0:	f7fa fe67 	bl	8003282 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 80085b4:	4918      	ldr	r1, [pc, #96]	; (8008618 <updateAllSchedulesInfo+0x8c>)
 80085b6:	2001      	movs	r0, #1
 80085b8:	f7fa fe87 	bl	80032ca <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80085bc:	4917      	ldr	r1, [pc, #92]	; (800861c <updateAllSchedulesInfo+0x90>)
 80085be:	2001      	movs	r0, #1
 80085c0:	f7fa fcc6 	bl	8002f50 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80085c4:	4916      	ldr	r1, [pc, #88]	; (8008620 <updateAllSchedulesInfo+0x94>)
 80085c6:	2001      	movs	r0, #1
 80085c8:	f7fa fd3e 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 80085cc:	e01a      	b.n	8008604 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d117      	bne.n	8008604 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 80085d4:	4913      	ldr	r1, [pc, #76]	; (8008624 <updateAllSchedulesInfo+0x98>)
 80085d6:	2002      	movs	r0, #2
 80085d8:	f7fa fe0b 	bl	80031f2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 80085dc:	4912      	ldr	r1, [pc, #72]	; (8008628 <updateAllSchedulesInfo+0x9c>)
 80085de:	2002      	movs	r0, #2
 80085e0:	f7fa fe2b 	bl	800323a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 80085e4:	4911      	ldr	r1, [pc, #68]	; (800862c <updateAllSchedulesInfo+0xa0>)
 80085e6:	2002      	movs	r0, #2
 80085e8:	f7fa fe4b 	bl	8003282 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 80085ec:	4910      	ldr	r1, [pc, #64]	; (8008630 <updateAllSchedulesInfo+0xa4>)
 80085ee:	2002      	movs	r0, #2
 80085f0:	f7fa fe6b 	bl	80032ca <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 80085f4:	4909      	ldr	r1, [pc, #36]	; (800861c <updateAllSchedulesInfo+0x90>)
 80085f6:	2002      	movs	r0, #2
 80085f8:	f7fa fcaa 	bl	8002f50 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 80085fc:	4908      	ldr	r1, [pc, #32]	; (8008620 <updateAllSchedulesInfo+0x94>)
 80085fe:	2002      	movs	r0, #2
 8008600:	f7fa fd22 	bl	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	2000088d 	.word	0x2000088d
 8008610:	2000088f 	.word	0x2000088f
 8008614:	2000088e 	.word	0x2000088e
 8008618:	20000890 	.word	0x20000890
 800861c:	20000868 	.word	0x20000868
 8008620:	20000870 	.word	0x20000870
 8008624:	20000891 	.word	0x20000891
 8008628:	20000893 	.word	0x20000893
 800862c:	20000892 	.word	0x20000892
 8008630:	20000894 	.word	0x20000894

08008634 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	460a      	mov	r2, r1
 800863e:	80fb      	strh	r3, [r7, #6]
 8008640:	4613      	mov	r3, r2
 8008642:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8008644:	88bb      	ldrh	r3, [r7, #4]
 8008646:	2b4a      	cmp	r3, #74	; 0x4a
 8008648:	d908      	bls.n	800865c <clockIncreaseOneHourAndMinute+0x28>
 800864a:	88bb      	ldrh	r3, [r7, #4]
 800864c:	2b60      	cmp	r3, #96	; 0x60
 800864e:	d805      	bhi.n	800865c <clockIncreaseOneHourAndMinute+0x28>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8008650:	4b10      	ldr	r3, [pc, #64]	; (8008694 <clockIncreaseOneHourAndMinute+0x60>)
 8008652:	2201      	movs	r2, #1
 8008654:	701a      	strb	r2, [r3, #0]

		OneHourIncrease();
 8008656:	f000 ffcb 	bl	80095f0 <OneHourIncrease>
 800865a:	e017      	b.n	800868c <clockIncreaseOneHourAndMinute+0x58>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 800865c:	88bb      	ldrh	r3, [r7, #4]
 800865e:	2b72      	cmp	r3, #114	; 0x72
 8008660:	d908      	bls.n	8008674 <clockIncreaseOneHourAndMinute+0x40>
 8008662:	88bb      	ldrh	r3, [r7, #4]
 8008664:	2b88      	cmp	r3, #136	; 0x88
 8008666:	d805      	bhi.n	8008674 <clockIncreaseOneHourAndMinute+0x40>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008668:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <clockIncreaseOneHourAndMinute+0x60>)
 800866a:	2202      	movs	r2, #2
 800866c:	701a      	strb	r2, [r3, #0]

		OneMinuteIncrease();
 800866e:	f000 ff93 	bl	8009598 <OneMinuteIncrease>
 8008672:	e00b      	b.n	800868c <clockIncreaseOneHourAndMinute+0x58>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8008674:	88bb      	ldrh	r3, [r7, #4]
 8008676:	2b9a      	cmp	r3, #154	; 0x9a
 8008678:	d908      	bls.n	800868c <clockIncreaseOneHourAndMinute+0x58>
 800867a:	88bb      	ldrh	r3, [r7, #4]
 800867c:	2bb0      	cmp	r3, #176	; 0xb0
 800867e:	d805      	bhi.n	800868c <clockIncreaseOneHourAndMinute+0x58>
	{
		EncoderState = ENCODER_CLOCK_DAY;
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <clockIncreaseOneHourAndMinute+0x60>)
 8008682:	2203      	movs	r2, #3
 8008684:	701a      	strb	r2, [r3, #0]

		OneDayIncrease();
 8008686:	f000 ffdf 	bl	8009648 <OneDayIncrease>
	}
}
 800868a:	e7ff      	b.n	800868c <clockIncreaseOneHourAndMinute+0x58>
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	200008e9 	.word	0x200008e9

08008698 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af02      	add	r7, sp, #8
 800869e:	4603      	mov	r3, r0
 80086a0:	460a      	mov	r2, r1
 80086a2:	80fb      	strh	r3, [r7, #6]
 80086a4:	4613      	mov	r3, r2
 80086a6:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80086a8:	88bb      	ldrh	r3, [r7, #4]
 80086aa:	2b4a      	cmp	r3, #74	; 0x4a
 80086ac:	d926      	bls.n	80086fc <clockIncreaseSixHoursTenMinutes+0x64>
 80086ae:	88bb      	ldrh	r3, [r7, #4]
 80086b0:	2b60      	cmp	r3, #96	; 0x60
 80086b2:	d823      	bhi.n	80086fc <clockIncreaseSixHoursTenMinutes+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 80086b4:	4b31      	ldr	r3, [pc, #196]	; (800877c <clockIncreaseSixHoursTenMinutes+0xe4>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	701a      	strb	r2, [r3, #0]

		if(Hours < 19)
 80086ba:	4b31      	ldr	r3, [pc, #196]	; (8008780 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b12      	cmp	r3, #18
 80086c0:	d806      	bhi.n	80086d0 <clockIncreaseSixHoursTenMinutes+0x38>
		{
			Hours = Hours + 6;
 80086c2:	4b2f      	ldr	r3, [pc, #188]	; (8008780 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	3306      	adds	r3, #6
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	4b2d      	ldr	r3, [pc, #180]	; (8008780 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <clockIncreaseSixHoursTenMinutes+0x3e>
		}
		else
		{
			Hours = 1;
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)MsgMenuTFT, " %d  ", Hours);
 80086d6:	4b2a      	ldr	r3, [pc, #168]	; (8008780 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	4929      	ldr	r1, [pc, #164]	; (8008784 <clockIncreaseSixHoursTenMinutes+0xec>)
 80086de:	482a      	ldr	r0, [pc, #168]	; (8008788 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80086e0:	f00a fde6 	bl	80132b0 <siprintf>
		EF_PutString(MsgMenuTFT, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	2301      	movs	r3, #1
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	2300      	movs	r3, #0
 80086f0:	2246      	movs	r2, #70	; 0x46
 80086f2:	219d      	movs	r1, #157	; 0x9d
 80086f4:	4824      	ldr	r0, [pc, #144]	; (8008788 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80086f6:	f7f9 fb59 	bl	8001dac <EF_PutString>
 80086fa:	e038      	b.n	800876e <clockIncreaseSixHoursTenMinutes+0xd6>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80086fc:	88bb      	ldrh	r3, [r7, #4]
 80086fe:	2b72      	cmp	r3, #114	; 0x72
 8008700:	d935      	bls.n	800876e <clockIncreaseSixHoursTenMinutes+0xd6>
 8008702:	88bb      	ldrh	r3, [r7, #4]
 8008704:	2b88      	cmp	r3, #136	; 0x88
 8008706:	d832      	bhi.n	800876e <clockIncreaseSixHoursTenMinutes+0xd6>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008708:	4b1c      	ldr	r3, [pc, #112]	; (800877c <clockIncreaseSixHoursTenMinutes+0xe4>)
 800870a:	2202      	movs	r2, #2
 800870c:	701a      	strb	r2, [r3, #0]

		if(Minutes < 49)
 800870e:	4b1f      	ldr	r3, [pc, #124]	; (800878c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b30      	cmp	r3, #48	; 0x30
 8008714:	d806      	bhi.n	8008724 <clockIncreaseSixHoursTenMinutes+0x8c>
		{
			Minutes = Minutes +10;
 8008716:	4b1d      	ldr	r3, [pc, #116]	; (800878c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	330a      	adds	r3, #10
 800871c:	b2da      	uxtb	r2, r3
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e012      	b.n	800874a <clockIncreaseSixHoursTenMinutes+0xb2>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8008724:	4b19      	ldr	r3, [pc, #100]	; (800878c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	f103 020a 	add.w	r2, r3, #10
 800872c:	4b18      	ldr	r3, [pc, #96]	; (8008790 <clockIncreaseSixHoursTenMinutes+0xf8>)
 800872e:	fb83 1302 	smull	r1, r3, r3, r2
 8008732:	4413      	add	r3, r2
 8008734:	1159      	asrs	r1, r3, #5
 8008736:	17d3      	asrs	r3, r2, #31
 8008738:	1ac9      	subs	r1, r1, r3
 800873a:	460b      	mov	r3, r1
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	1ad1      	subs	r1, r2, r3
 8008744:	b2ca      	uxtb	r2, r1
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008748:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)MsgMenuTFT, " %d  ", Minutes);
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <clockIncreaseSixHoursTenMinutes+0xf4>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	490c      	ldr	r1, [pc, #48]	; (8008784 <clockIncreaseSixHoursTenMinutes+0xec>)
 8008752:	480d      	ldr	r0, [pc, #52]	; (8008788 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008754:	f00a fdac 	bl	80132b0 <siprintf>
		EF_PutString(MsgMenuTFT, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008758:	f24c 6318 	movw	r3, #50712	; 0xc618
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2301      	movs	r3, #1
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	226e      	movs	r2, #110	; 0x6e
 8008766:	219c      	movs	r1, #156	; 0x9c
 8008768:	4807      	ldr	r0, [pc, #28]	; (8008788 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800876a:	f7f9 fb1f 	bl	8001dac <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 800876e:	4809      	ldr	r0, [pc, #36]	; (8008794 <clockIncreaseSixHoursTenMinutes+0xfc>)
 8008770:	f7f9 f902 	bl	8001978 <EF_SetFont>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200008e9 	.word	0x200008e9
 8008780:	20000032 	.word	0x20000032
 8008784:	08017608 	.word	0x08017608
 8008788:	200008a4 	.word	0x200008a4
 800878c:	20000033 	.word	0x20000033
 8008790:	88888889 	.word	0x88888889
 8008794:	0802abac 	.word	0x0802abac

08008798 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	2b40      	cmp	r3, #64	; 0x40
 80087a6:	d90e      	bls.n	80087c6 <changeSwitchStatusTouch+0x2e>
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b56      	cmp	r3, #86	; 0x56
 80087ac:	d80b      	bhi.n	80087c6 <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 80087ae:	4b24      	ldr	r3, [pc, #144]	; (8008840 <changeSwitchStatusTouch+0xa8>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 80087b6:	2000      	movs	r0, #0
 80087b8:	f000 faee 	bl	8008d98 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 80087bc:	e038      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 80087be:	2001      	movs	r0, #1
 80087c0:	f000 faea 	bl	8008d98 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 80087c4:	e034      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	2b5e      	cmp	r3, #94	; 0x5e
 80087ca:	d90e      	bls.n	80087ea <changeSwitchStatusTouch+0x52>
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	2b74      	cmp	r3, #116	; 0x74
 80087d0:	d80b      	bhi.n	80087ea <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <changeSwitchStatusTouch+0xa8>)
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 80087da:	2000      	movs	r0, #0
 80087dc:	f000 fb5e 	bl	8008e9c <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087e0:	e026      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 80087e2:	2001      	movs	r0, #1
 80087e4:	f000 fb5a 	bl	8008e9c <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087e8:	e022      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	2b7c      	cmp	r3, #124	; 0x7c
 80087ee:	d90e      	bls.n	800880e <changeSwitchStatusTouch+0x76>
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	2b92      	cmp	r3, #146	; 0x92
 80087f4:	d80b      	bhi.n	800880e <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087f6:	4b12      	ldr	r3, [pc, #72]	; (8008840 <changeSwitchStatusTouch+0xa8>)
 80087f8:	789b      	ldrb	r3, [r3, #2]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 80087fe:	2000      	movs	r0, #0
 8008800:	f000 fbce 	bl	8008fa0 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8008804:	e014      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 8008806:	2001      	movs	r0, #1
 8008808:	f000 fbca 	bl	8008fa0 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 800880c:	e010      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	2b9a      	cmp	r3, #154	; 0x9a
 8008812:	d90d      	bls.n	8008830 <changeSwitchStatusTouch+0x98>
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	2bb0      	cmp	r3, #176	; 0xb0
 8008818:	d80a      	bhi.n	8008830 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <changeSwitchStatusTouch+0xa8>)
 800881c:	78db      	ldrb	r3, [r3, #3]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 8008822:	2000      	movs	r0, #0
 8008824:	f000 fc3e 	bl	80090a4 <fourthSwitchTurn>
 8008828:	e002      	b.n	8008830 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 800882a:	2001      	movs	r0, #1
 800882c:	f000 fc3a 	bl	80090a4 <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008830:	4804      	ldr	r0, [pc, #16]	; (8008844 <changeSwitchStatusTouch+0xac>)
 8008832:	f7f9 f8a1 	bl	8001978 <EF_SetFont>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000944 	.word	0x20000944
 8008844:	0802abac 	.word	0x0802abac

08008848 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8008852:	79fb      	ldrb	r3, [r7, #7]
 8008854:	2b40      	cmp	r3, #64	; 0x40
 8008856:	d90e      	bls.n	8008876 <changeLightsStatusTouch+0x2e>
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	2b56      	cmp	r3, #86	; 0x56
 800885c:	d80b      	bhi.n	8008876 <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <changeLightsStatusTouch+0xa8>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 8008866:	2000      	movs	r0, #0
 8008868:	f000 fc9e 	bl	80091a8 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 800886c:	e038      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 800886e:	2001      	movs	r0, #1
 8008870:	f000 fc9a 	bl	80091a8 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8008874:	e034      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	2b5e      	cmp	r3, #94	; 0x5e
 800887a:	d90e      	bls.n	800889a <changeLightsStatusTouch+0x52>
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	2b74      	cmp	r3, #116	; 0x74
 8008880:	d80b      	bhi.n	800889a <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8008882:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <changeLightsStatusTouch+0xa8>)
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 800888a:	2000      	movs	r0, #0
 800888c:	f000 fd0a 	bl	80092a4 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008890:	e026      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 8008892:	2001      	movs	r0, #1
 8008894:	f000 fd06 	bl	80092a4 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008898:	e022      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	2b7c      	cmp	r3, #124	; 0x7c
 800889e:	d90e      	bls.n	80088be <changeLightsStatusTouch+0x76>
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	2b92      	cmp	r3, #146	; 0x92
 80088a4:	d80b      	bhi.n	80088be <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <changeLightsStatusTouch+0xa8>)
 80088a8:	789b      	ldrb	r3, [r3, #2]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 80088ae:	2000      	movs	r0, #0
 80088b0:	f000 fd76 	bl	80093a0 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 80088b4:	e014      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 80088b6:	2001      	movs	r0, #1
 80088b8:	f000 fd72 	bl	80093a0 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 80088bc:	e010      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	2b9a      	cmp	r3, #154	; 0x9a
 80088c2:	d90d      	bls.n	80088e0 <changeLightsStatusTouch+0x98>
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2bb0      	cmp	r3, #176	; 0xb0
 80088c8:	d80a      	bhi.n	80088e0 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <changeLightsStatusTouch+0xa8>)
 80088cc:	78db      	ldrb	r3, [r3, #3]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 80088d2:	2000      	movs	r0, #0
 80088d4:	f000 fde2 	bl	800949c <fourthLightTurn>
 80088d8:	e002      	b.n	80088e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 80088da:	2001      	movs	r0, #1
 80088dc:	f000 fdde 	bl	800949c <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80088e0:	4804      	ldr	r0, [pc, #16]	; (80088f4 <changeLightsStatusTouch+0xac>)
 80088e2:	f7f9 f849 	bl	8001978 <EF_SetFont>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000948 	.word	0x20000948
 80088f4:	0802abac 	.word	0x0802abac

080088f8 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	4603      	mov	r3, r0
 8008900:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b3b      	cmp	r3, #59	; 0x3b
 8008906:	d966      	bls.n	80089d6 <predefinedActivityTouchAction+0xde>
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b64      	cmp	r3, #100	; 0x64
 800890c:	d863      	bhi.n	80089d6 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 800890e:	4b69      	ldr	r3, [pc, #420]	; (8008ab4 <predefinedActivityTouchAction+0x1bc>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d02f      	beq.n	8008976 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 8008916:	4b67      	ldr	r3, [pc, #412]	; (8008ab4 <predefinedActivityTouchAction+0x1bc>)
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800891c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	230a      	movs	r3, #10
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	2328      	movs	r3, #40	; 0x28
 8008928:	2278      	movs	r2, #120	; 0x78
 800892a:	213c      	movs	r1, #60	; 0x3c
 800892c:	2064      	movs	r0, #100	; 0x64
 800892e:	f7f8 ffd2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "KARMIENIE");
 8008932:	4961      	ldr	r1, [pc, #388]	; (8008ab8 <predefinedActivityTouchAction+0x1c0>)
 8008934:	4861      	ldr	r0, [pc, #388]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008936:	f00a fcbb 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800893a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	2300      	movs	r3, #0
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	223e      	movs	r2, #62	; 0x3e
 8008948:	2177      	movs	r1, #119	; 0x77
 800894a:	485c      	ldr	r0, [pc, #368]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 800894c:	f7f9 fa2e 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008950:	495b      	ldr	r1, [pc, #364]	; (8008ac0 <predefinedActivityTouchAction+0x1c8>)
 8008952:	485a      	ldr	r0, [pc, #360]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008954:	f00a fcac 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008958:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	2300      	movs	r3, #0
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	2250      	movs	r2, #80	; 0x50
 8008966:	2193      	movs	r1, #147	; 0x93
 8008968:	4854      	ldr	r0, [pc, #336]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 800896a:	f7f9 fa1f 	bl	8001dac <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 800896e:	2000      	movs	r0, #0
 8008970:	f7fc fc04 	bl	800517c <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008974:	e099      	b.n	8008aaa <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008976:	4b4f      	ldr	r3, [pc, #316]	; (8008ab4 <predefinedActivityTouchAction+0x1bc>)
 8008978:	2201      	movs	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800897c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	230a      	movs	r3, #10
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	2328      	movs	r3, #40	; 0x28
 8008988:	2278      	movs	r2, #120	; 0x78
 800898a:	213c      	movs	r1, #60	; 0x3c
 800898c:	2064      	movs	r0, #100	; 0x64
 800898e:	f7f8 ffa2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "KARMIENIE");
 8008992:	4949      	ldr	r1, [pc, #292]	; (8008ab8 <predefinedActivityTouchAction+0x1c0>)
 8008994:	4849      	ldr	r0, [pc, #292]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008996:	f00a fc8b 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800899a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	2300      	movs	r3, #0
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	2300      	movs	r3, #0
 80089a6:	223e      	movs	r2, #62	; 0x3e
 80089a8:	2177      	movs	r1, #119	; 0x77
 80089aa:	4844      	ldr	r0, [pc, #272]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 80089ac:	f7f9 f9fe 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "ON");
 80089b0:	4944      	ldr	r1, [pc, #272]	; (8008ac4 <predefinedActivityTouchAction+0x1cc>)
 80089b2:	4842      	ldr	r0, [pc, #264]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 80089b4:	f00a fc7c 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80089b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	2300      	movs	r3, #0
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	2300      	movs	r3, #0
 80089c4:	2250      	movs	r2, #80	; 0x50
 80089c6:	2193      	movs	r1, #147	; 0x93
 80089c8:	483c      	ldr	r0, [pc, #240]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 80089ca:	f7f9 f9ef 	bl	8001dac <EF_PutString>
			predefinedActivityKarmienie(1);
 80089ce:	2001      	movs	r0, #1
 80089d0:	f7fc fbd4 	bl	800517c <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80089d4:	e069      	b.n	8008aaa <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	2b77      	cmp	r3, #119	; 0x77
 80089da:	d966      	bls.n	8008aaa <predefinedActivityTouchAction+0x1b2>
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	2ba0      	cmp	r3, #160	; 0xa0
 80089e0:	d863      	bhi.n	8008aaa <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 80089e2:	4b34      	ldr	r3, [pc, #208]	; (8008ab4 <predefinedActivityTouchAction+0x1bc>)
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d02f      	beq.n	8008a4a <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 80089ea:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <predefinedActivityTouchAction+0x1bc>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80089f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	230a      	movs	r3, #10
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	2328      	movs	r3, #40	; 0x28
 80089fc:	2278      	movs	r2, #120	; 0x78
 80089fe:	2178      	movs	r1, #120	; 0x78
 8008a00:	2064      	movs	r0, #100	; 0x64
 8008a02:	f7f8 ff68 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "CZYSZCZENIE");
 8008a06:	4930      	ldr	r1, [pc, #192]	; (8008ac8 <predefinedActivityTouchAction+0x1d0>)
 8008a08:	482c      	ldr	r0, [pc, #176]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a0a:	f00a fc51 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008a0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	2300      	movs	r3, #0
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	227a      	movs	r2, #122	; 0x7a
 8008a1c:	2169      	movs	r1, #105	; 0x69
 8008a1e:	4827      	ldr	r0, [pc, #156]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a20:	f7f9 f9c4 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008a24:	4926      	ldr	r1, [pc, #152]	; (8008ac0 <predefinedActivityTouchAction+0x1c8>)
 8008a26:	4825      	ldr	r0, [pc, #148]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a28:	f00a fc42 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008a2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	228c      	movs	r2, #140	; 0x8c
 8008a3a:	2193      	movs	r1, #147	; 0x93
 8008a3c:	481f      	ldr	r0, [pc, #124]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a3e:	f7f9 f9b5 	bl	8001dac <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008a42:	2000      	movs	r0, #0
 8008a44:	f7fc fb80 	bl	8005148 <predefinedActivityCzyszczenie>
			sprintf((char*)MsgMenuTFT, "ON");
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008a48:	e02f      	b.n	8008aaa <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 8008a4a:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <predefinedActivityTouchAction+0x1bc>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	230a      	movs	r3, #10
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2328      	movs	r3, #40	; 0x28
 8008a5c:	2278      	movs	r2, #120	; 0x78
 8008a5e:	2178      	movs	r1, #120	; 0x78
 8008a60:	2064      	movs	r0, #100	; 0x64
 8008a62:	f7f8 ff38 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "CZYSZCZENIE");
 8008a66:	4918      	ldr	r1, [pc, #96]	; (8008ac8 <predefinedActivityTouchAction+0x1d0>)
 8008a68:	4814      	ldr	r0, [pc, #80]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a6a:	f00a fc21 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a6e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	2300      	movs	r3, #0
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	227a      	movs	r2, #122	; 0x7a
 8008a7c:	2169      	movs	r1, #105	; 0x69
 8008a7e:	480f      	ldr	r0, [pc, #60]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a80:	f7f9 f994 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "ON");
 8008a84:	490f      	ldr	r1, [pc, #60]	; (8008ac4 <predefinedActivityTouchAction+0x1cc>)
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a88:	f00a fc12 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	2300      	movs	r3, #0
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	228c      	movs	r2, #140	; 0x8c
 8008a9a:	2193      	movs	r1, #147	; 0x93
 8008a9c:	4807      	ldr	r0, [pc, #28]	; (8008abc <predefinedActivityTouchAction+0x1c4>)
 8008a9e:	f7f9 f985 	bl	8001dac <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f7fc fb50 	bl	8005148 <predefinedActivityCzyszczenie>
}
 8008aa8:	e7ff      	b.n	8008aaa <predefinedActivityTouchAction+0x1b2>
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200002d4 	.word	0x200002d4
 8008ab8:	08017610 	.word	0x08017610
 8008abc:	200008a4 	.word	0x200008a4
 8008ac0:	0801761c 	.word	0x0801761c
 8008ac4:	08017620 	.word	0x08017620
 8008ac8:	08017624 	.word	0x08017624

08008acc <WSONEincreaseNumberOfLedOnTFT>:
//
// Handling Touch to increase number of WS LED
//

void WSONEincreaseNumberOfLedOnTFT(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af02      	add	r7, sp, #8
	if(NrOfLeds < 98)
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b61      	cmp	r3, #97	; 0x61
 8008ad8:	d806      	bhi.n	8008ae8 <WSONEincreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds++;
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <WSONEincreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 1;
 8008ae8:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)MsgMenuTFT, "  %d ", NrOfLeds);
 8008aee:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d807      	bhi.n	8008b06 <WSONEincreaseNumberOfLedOnTFT+0x3a>
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	490d      	ldr	r1, [pc, #52]	; (8008b34 <WSONEincreaseNumberOfLedOnTFT+0x68>)
 8008afe:	480e      	ldr	r0, [pc, #56]	; (8008b38 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008b00:	f00a fbd6 	bl	80132b0 <siprintf>
 8008b04:	e006      	b.n	8008b14 <WSONEincreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)MsgMenuTFT, " %d", NrOfLeds);
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	490b      	ldr	r1, [pc, #44]	; (8008b3c <WSONEincreaseNumberOfLedOnTFT+0x70>)
 8008b0e:	480a      	ldr	r0, [pc, #40]	; (8008b38 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008b10:	f00a fbce 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008b14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	223c      	movs	r2, #60	; 0x3c
 8008b22:	21ac      	movs	r1, #172	; 0xac
 8008b24:	4804      	ldr	r0, [pc, #16]	; (8008b38 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008b26:	f7f9 f941 	bl	8001dac <EF_PutString>
}
 8008b2a:	bf00      	nop
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20000034 	.word	0x20000034
 8008b34:	08017630 	.word	0x08017630
 8008b38:	200008a4 	.word	0x200008a4
 8008b3c:	08017638 	.word	0x08017638

08008b40 <WSONEdecreaseNumberOfLedOnTFT>:

void WSONEdecreaseNumberOfLedOnTFT(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af02      	add	r7, sp, #8
	if(NrOfLeds > 0)
 8008b46:	4b17      	ldr	r3, [pc, #92]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d006      	beq.n	8008b5c <WSONEdecreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds--;
 8008b4e:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b58:	701a      	strb	r2, [r3, #0]
 8008b5a:	e002      	b.n	8008b62 <WSONEdecreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 99;
 8008b5c:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b5e:	2263      	movs	r2, #99	; 0x63
 8008b60:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)MsgMenuTFT, "  %d ", NrOfLeds);
 8008b62:	4b10      	ldr	r3, [pc, #64]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b09      	cmp	r3, #9
 8008b68:	d807      	bhi.n	8008b7a <WSONEdecreaseNumberOfLedOnTFT+0x3a>
 8008b6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	490d      	ldr	r1, [pc, #52]	; (8008ba8 <WSONEdecreaseNumberOfLedOnTFT+0x68>)
 8008b72:	480e      	ldr	r0, [pc, #56]	; (8008bac <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b74:	f00a fb9c 	bl	80132b0 <siprintf>
 8008b78:	e006      	b.n	8008b88 <WSONEdecreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)MsgMenuTFT, " %d", NrOfLeds);
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	490b      	ldr	r1, [pc, #44]	; (8008bb0 <WSONEdecreaseNumberOfLedOnTFT+0x70>)
 8008b82:	480a      	ldr	r0, [pc, #40]	; (8008bac <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b84:	f00a fb94 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008b88:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	2301      	movs	r3, #1
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	223c      	movs	r2, #60	; 0x3c
 8008b96:	21ac      	movs	r1, #172	; 0xac
 8008b98:	4804      	ldr	r0, [pc, #16]	; (8008bac <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b9a:	f7f9 f907 	bl	8001dac <EF_PutString>
}
 8008b9e:	bf00      	nop
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20000034 	.word	0x20000034
 8008ba8:	08017630 	.word	0x08017630
 8008bac:	200008a4 	.word	0x200008a4
 8008bb0:	08017638 	.word	0x08017638

08008bb4 <increaseNumberOfWSLedOnTFT>:

void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	4603      	mov	r3, r0
 8008bbc:	460a      	mov	r2, r1
 8008bbe:	71fb      	strb	r3, [r7, #7]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2bd8      	cmp	r3, #216	; 0xd8
 8008bc8:	d905      	bls.n	8008bd6 <increaseNumberOfWSLedOnTFT+0x22>
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	2bf7      	cmp	r3, #247	; 0xf7
 8008bce:	d802      	bhi.n	8008bd6 <increaseNumberOfWSLedOnTFT+0x22>
	{
		WSONEincreaseNumberOfLedOnTFT();
 8008bd0:	f7ff ff7c 	bl	8008acc <WSONEincreaseNumberOfLedOnTFT>
		sprintf((char*)MsgMenuTFT, "OK");
		EF_PutString(MsgMenuTFT, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008bd4:	e03f      	b.n	8008c56 <increaseNumberOfWSLedOnTFT+0xa2>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	2bfb      	cmp	r3, #251	; 0xfb
 8008bda:	d93c      	bls.n	8008c56 <increaseNumberOfWSLedOnTFT+0xa2>
		if(NrOfLeds < 90)
 8008bdc:	4b20      	ldr	r3, [pc, #128]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b59      	cmp	r3, #89	; 0x59
 8008be2:	d806      	bhi.n	8008bf2 <increaseNumberOfWSLedOnTFT+0x3e>
			NrOfLeds = NrOfLeds + 10;
 8008be4:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	330a      	adds	r3, #10
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b1c      	ldr	r3, [pc, #112]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e013      	b.n	8008c1a <increaseNumberOfWSLedOnTFT+0x66>
			NrOfLeds = (NrOfLeds + 10) % 99;
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	f103 020a 	add.w	r2, r3, #10
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <increaseNumberOfWSLedOnTFT+0xb0>)
 8008bfc:	fb83 1302 	smull	r1, r3, r3, r2
 8008c00:	4413      	add	r3, r2
 8008c02:	1199      	asrs	r1, r3, #6
 8008c04:	17d3      	asrs	r3, r2, #31
 8008c06:	1ac9      	subs	r1, r1, r3
 8008c08:	460b      	mov	r3, r1
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	440b      	add	r3, r1
 8008c0e:	0159      	lsls	r1, r3, #5
 8008c10:	440b      	add	r3, r1
 8008c12:	1ad1      	subs	r1, r2, r3
 8008c14:	b2ca      	uxtb	r2, r1
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008c18:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)MsgMenuTFT, "  %d ", NrOfLeds);
 8008c1a:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d807      	bhi.n	8008c32 <increaseNumberOfWSLedOnTFT+0x7e>
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	490f      	ldr	r1, [pc, #60]	; (8008c68 <increaseNumberOfWSLedOnTFT+0xb4>)
 8008c2a:	4810      	ldr	r0, [pc, #64]	; (8008c6c <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c2c:	f00a fb40 	bl	80132b0 <siprintf>
 8008c30:	e006      	b.n	8008c40 <increaseNumberOfWSLedOnTFT+0x8c>
	else sprintf((char*)MsgMenuTFT, " %d", NrOfLeds);
 8008c32:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <increaseNumberOfWSLedOnTFT+0xac>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	490d      	ldr	r1, [pc, #52]	; (8008c70 <increaseNumberOfWSLedOnTFT+0xbc>)
 8008c3a:	480c      	ldr	r0, [pc, #48]	; (8008c6c <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c3c:	f00a fb38 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008c40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	2301      	movs	r3, #1
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	223c      	movs	r2, #60	; 0x3c
 8008c4e:	21ac      	movs	r1, #172	; 0xac
 8008c50:	4806      	ldr	r0, [pc, #24]	; (8008c6c <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c52:	f7f9 f8ab 	bl	8001dac <EF_PutString>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000034 	.word	0x20000034
 8008c64:	a57eb503 	.word	0xa57eb503
 8008c68:	08017630 	.word	0x08017630
 8008c6c:	200008a4 	.word	0x200008a4
 8008c70:	08017638 	.word	0x08017638

08008c74 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	71fb      	strb	r3, [r7, #7]
 8008c80:	4613      	mov	r3, r2
 8008c82:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008c84:	79bb      	ldrb	r3, [r7, #6]
 8008c86:	2b5e      	cmp	r3, #94	; 0x5e
 8008c88:	d91e      	bls.n	8008cc8 <changeTypeOfWSLights+0x54>
 8008c8a:	79bb      	ldrb	r3, [r7, #6]
 8008c8c:	2b74      	cmp	r3, #116	; 0x74
 8008c8e:	d81b      	bhi.n	8008cc8 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b95      	cmp	r3, #149	; 0x95
 8008c94:	d906      	bls.n	8008ca4 <changeTypeOfWSLights+0x30>
 8008c96:	79fb      	ldrb	r3, [r7, #7]
 8008c98:	2bbe      	cmp	r3, #190	; 0xbe
 8008c9a:	d803      	bhi.n	8008ca4 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008c9c:	201d      	movs	r0, #29
 8008c9e:	f001 fa7b 	bl	800a198 <SendComand>
 8008ca2:	e010      	b.n	8008cc6 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2bc9      	cmp	r3, #201	; 0xc9
 8008ca8:	d906      	bls.n	8008cb8 <changeTypeOfWSLights+0x44>
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	2bf2      	cmp	r3, #242	; 0xf2
 8008cae:	d803      	bhi.n	8008cb8 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 8008cb0:	201e      	movs	r0, #30
 8008cb2:	f001 fa71 	bl	800a198 <SendComand>
 8008cb6:	e006      	b.n	8008cc6 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	2bfd      	cmp	r3, #253	; 0xfd
 8008cbc:	d962      	bls.n	8008d84 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 8008cbe:	201f      	movs	r0, #31
 8008cc0:	f001 fa6a 	bl	800a198 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008cc4:	e05e      	b.n	8008d84 <changeTypeOfWSLights+0x110>
 8008cc6:	e05d      	b.n	8008d84 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008cc8:	79bb      	ldrb	r3, [r7, #6]
 8008cca:	2b7c      	cmp	r3, #124	; 0x7c
 8008ccc:	d91e      	bls.n	8008d0c <changeTypeOfWSLights+0x98>
 8008cce:	79bb      	ldrb	r3, [r7, #6]
 8008cd0:	2b92      	cmp	r3, #146	; 0x92
 8008cd2:	d81b      	bhi.n	8008d0c <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b95      	cmp	r3, #149	; 0x95
 8008cd8:	d906      	bls.n	8008ce8 <changeTypeOfWSLights+0x74>
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2bbe      	cmp	r3, #190	; 0xbe
 8008cde:	d803      	bhi.n	8008ce8 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 8008ce0:	2020      	movs	r0, #32
 8008ce2:	f001 fa59 	bl	800a198 <SendComand>
 8008ce6:	e010      	b.n	8008d0a <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	2bc9      	cmp	r3, #201	; 0xc9
 8008cec:	d906      	bls.n	8008cfc <changeTypeOfWSLights+0x88>
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	2bf2      	cmp	r3, #242	; 0xf2
 8008cf2:	d803      	bhi.n	8008cfc <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008cf4:	2021      	movs	r0, #33	; 0x21
 8008cf6:	f001 fa4f 	bl	800a198 <SendComand>
 8008cfa:	e006      	b.n	8008d0a <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	2bfd      	cmp	r3, #253	; 0xfd
 8008d00:	d942      	bls.n	8008d88 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 8008d02:	2022      	movs	r0, #34	; 0x22
 8008d04:	f001 fa48 	bl	800a198 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d08:	e03e      	b.n	8008d88 <changeTypeOfWSLights+0x114>
 8008d0a:	e03d      	b.n	8008d88 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008d0c:	79bb      	ldrb	r3, [r7, #6]
 8008d0e:	2b9b      	cmp	r3, #155	; 0x9b
 8008d10:	d91e      	bls.n	8008d50 <changeTypeOfWSLights+0xdc>
 8008d12:	79bb      	ldrb	r3, [r7, #6]
 8008d14:	2bb1      	cmp	r3, #177	; 0xb1
 8008d16:	d81b      	bhi.n	8008d50 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	2b13      	cmp	r3, #19
 8008d1c:	d906      	bls.n	8008d2c <changeTypeOfWSLights+0xb8>
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b64      	cmp	r3, #100	; 0x64
 8008d22:	d803      	bhi.n	8008d2c <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008d24:	2023      	movs	r0, #35	; 0x23
 8008d26:	f001 fa37 	bl	800a198 <SendComand>
 8008d2a:	e010      	b.n	8008d4e <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	2b77      	cmp	r3, #119	; 0x77
 8008d30:	d906      	bls.n	8008d40 <changeTypeOfWSLights+0xcc>
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2bc8      	cmp	r3, #200	; 0xc8
 8008d36:	d803      	bhi.n	8008d40 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008d38:	201c      	movs	r0, #28
 8008d3a:	f001 fa2d 	bl	800a198 <SendComand>
 8008d3e:	e006      	b.n	8008d4e <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2bdb      	cmp	r3, #219	; 0xdb
 8008d44:	d922      	bls.n	8008d8c <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 8008d46:	2024      	movs	r0, #36	; 0x24
 8008d48:	f001 fa26 	bl	800a198 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d4c:	e01e      	b.n	8008d8c <changeTypeOfWSLights+0x118>
 8008d4e:	e01d      	b.n	8008d8c <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008d50:	79bb      	ldrb	r3, [r7, #6]
 8008d52:	2bba      	cmp	r3, #186	; 0xba
 8008d54:	d91b      	bls.n	8008d8e <changeTypeOfWSLights+0x11a>
 8008d56:	79bb      	ldrb	r3, [r7, #6]
 8008d58:	2bd0      	cmp	r3, #208	; 0xd0
 8008d5a:	d818      	bhi.n	8008d8e <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b45      	cmp	r3, #69	; 0x45
 8008d60:	d906      	bls.n	8008d70 <changeTypeOfWSLights+0xfc>
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b96      	cmp	r3, #150	; 0x96
 8008d66:	d803      	bhi.n	8008d70 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008d68:	2026      	movs	r0, #38	; 0x26
 8008d6a:	f001 fa15 	bl	800a198 <SendComand>
 8008d6e:	e00e      	b.n	8008d8e <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2ba9      	cmp	r3, #169	; 0xa9
 8008d74:	d90b      	bls.n	8008d8e <changeTypeOfWSLights+0x11a>
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2bfa      	cmp	r3, #250	; 0xfa
 8008d7a:	d808      	bhi.n	8008d8e <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008d7c:	2027      	movs	r0, #39	; 0x27
 8008d7e:	f001 fa0b 	bl	800a198 <SendComand>
		}
	}
}
 8008d82:	e004      	b.n	8008d8e <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d8c:	bf00      	nop
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	4603      	mov	r3, r0
 8008da0:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d131      	bne.n	8008e0c <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8008da8:	2006      	movs	r0, #6
 8008daa:	f001 f9f5 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8008dae:	4932      	ldr	r1, [pc, #200]	; (8008e78 <firstSwitchTurn+0xe0>)
 8008db0:	4832      	ldr	r0, [pc, #200]	; (8008e7c <firstSwitchTurn+0xe4>)
 8008db2:	f002 f919 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008db6:	4b32      	ldr	r3, [pc, #200]	; (8008e80 <firstSwitchTurn+0xe8>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d11e      	bne.n	8008dfc <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008dbe:	4831      	ldr	r0, [pc, #196]	; (8008e84 <firstSwitchTurn+0xec>)
 8008dc0:	f7f8 fdda 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008dc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	2305      	movs	r3, #5
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	2315      	movs	r3, #21
 8008dd0:	2221      	movs	r2, #33	; 0x21
 8008dd2:	2141      	movs	r1, #65	; 0x41
 8008dd4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008dd8:	f7f8 fd7d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008ddc:	492a      	ldr	r1, [pc, #168]	; (8008e88 <firstSwitchTurn+0xf0>)
 8008dde:	482b      	ldr	r0, [pc, #172]	; (8008e8c <firstSwitchTurn+0xf4>)
 8008de0:	f00a fa66 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008de4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	2300      	movs	r3, #0
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	2243      	movs	r2, #67	; 0x43
 8008df2:	f240 1111 	movw	r1, #273	; 0x111
 8008df6:	4825      	ldr	r0, [pc, #148]	; (8008e8c <firstSwitchTurn+0xf4>)
 8008df8:	f7f8 ffd8 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 8008dfc:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <firstSwitchTurn+0xf8>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 8008e02:	2100      	movs	r1, #0
 8008e04:	2001      	movs	r0, #1
 8008e06:	f7f9 ff53 	bl	8002cb0 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 8008e0a:	e030      	b.n	8008e6e <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8008e0c:	2005      	movs	r0, #5
 8008e0e:	f001 f9c3 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 8008e12:	4920      	ldr	r1, [pc, #128]	; (8008e94 <firstSwitchTurn+0xfc>)
 8008e14:	4819      	ldr	r0, [pc, #100]	; (8008e7c <firstSwitchTurn+0xe4>)
 8008e16:	f002 f8e7 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008e1a:	4b19      	ldr	r3, [pc, #100]	; (8008e80 <firstSwitchTurn+0xe8>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d11e      	bne.n	8008e60 <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008e22:	4818      	ldr	r0, [pc, #96]	; (8008e84 <firstSwitchTurn+0xec>)
 8008e24:	f7f8 fda8 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008e28:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	2305      	movs	r3, #5
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2315      	movs	r3, #21
 8008e34:	2221      	movs	r2, #33	; 0x21
 8008e36:	2141      	movs	r1, #65	; 0x41
 8008e38:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008e3c:	f7f8 fd4b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8008e40:	4915      	ldr	r1, [pc, #84]	; (8008e98 <firstSwitchTurn+0x100>)
 8008e42:	4812      	ldr	r0, [pc, #72]	; (8008e8c <firstSwitchTurn+0xf4>)
 8008e44:	f00a fa34 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008e48:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	2243      	movs	r2, #67	; 0x43
 8008e56:	f240 1111 	movw	r1, #273	; 0x111
 8008e5a:	480c      	ldr	r0, [pc, #48]	; (8008e8c <firstSwitchTurn+0xf4>)
 8008e5c:	f7f8 ffa6 	bl	8001dac <EF_PutString>
		SwitchesButtonState[0] = 1;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <firstSwitchTurn+0xf8>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 8008e66:	2101      	movs	r1, #1
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7f9 ff21 	bl	8002cb0 <EEPROM_RelayStateUpdate>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	0801763c 	.word	0x0801763c
 8008e7c:	20000654 	.word	0x20000654
 8008e80:	200008e8 	.word	0x200008e8
 8008e84:	08028c34 	.word	0x08028c34
 8008e88:	0801761c 	.word	0x0801761c
 8008e8c:	200008a4 	.word	0x200008a4
 8008e90:	20000944 	.word	0x20000944
 8008e94:	08017648 	.word	0x08017648
 8008e98:	08017620 	.word	0x08017620

08008e9c <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d131      	bne.n	8008f10 <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008eac:	2008      	movs	r0, #8
 8008eae:	f001 f973 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8008eb2:	4932      	ldr	r1, [pc, #200]	; (8008f7c <secondSwitchTurn+0xe0>)
 8008eb4:	4832      	ldr	r0, [pc, #200]	; (8008f80 <secondSwitchTurn+0xe4>)
 8008eb6:	f002 f897 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008eba:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <secondSwitchTurn+0xe8>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d11e      	bne.n	8008f00 <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008ec2:	4831      	ldr	r0, [pc, #196]	; (8008f88 <secondSwitchTurn+0xec>)
 8008ec4:	f7f8 fd58 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	2305      	movs	r3, #5
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	2315      	movs	r3, #21
 8008ed4:	2221      	movs	r2, #33	; 0x21
 8008ed6:	215f      	movs	r1, #95	; 0x5f
 8008ed8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008edc:	f7f8 fcfb 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008ee0:	492a      	ldr	r1, [pc, #168]	; (8008f8c <secondSwitchTurn+0xf0>)
 8008ee2:	482b      	ldr	r0, [pc, #172]	; (8008f90 <secondSwitchTurn+0xf4>)
 8008ee4:	f00a f9e4 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008ee8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2261      	movs	r2, #97	; 0x61
 8008ef6:	f240 1111 	movw	r1, #273	; 0x111
 8008efa:	4825      	ldr	r0, [pc, #148]	; (8008f90 <secondSwitchTurn+0xf4>)
 8008efc:	f7f8 ff56 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 8008f00:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <secondSwitchTurn+0xf8>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 8008f06:	2100      	movs	r1, #0
 8008f08:	2002      	movs	r0, #2
 8008f0a:	f7f9 fed1 	bl	8002cb0 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 8008f0e:	e030      	b.n	8008f72 <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8008f10:	2007      	movs	r0, #7
 8008f12:	f001 f941 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8008f16:	4920      	ldr	r1, [pc, #128]	; (8008f98 <secondSwitchTurn+0xfc>)
 8008f18:	4819      	ldr	r0, [pc, #100]	; (8008f80 <secondSwitchTurn+0xe4>)
 8008f1a:	f002 f865 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <secondSwitchTurn+0xe8>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d11e      	bne.n	8008f64 <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008f26:	4818      	ldr	r0, [pc, #96]	; (8008f88 <secondSwitchTurn+0xec>)
 8008f28:	f7f8 fd26 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008f2c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	2305      	movs	r3, #5
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	2315      	movs	r3, #21
 8008f38:	2221      	movs	r2, #33	; 0x21
 8008f3a:	215f      	movs	r1, #95	; 0x5f
 8008f3c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008f40:	f7f8 fcc9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8008f44:	4915      	ldr	r1, [pc, #84]	; (8008f9c <secondSwitchTurn+0x100>)
 8008f46:	4812      	ldr	r0, [pc, #72]	; (8008f90 <secondSwitchTurn+0xf4>)
 8008f48:	f00a f9b2 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008f4c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	2300      	movs	r3, #0
 8008f58:	2261      	movs	r2, #97	; 0x61
 8008f5a:	f240 1111 	movw	r1, #273	; 0x111
 8008f5e:	480c      	ldr	r0, [pc, #48]	; (8008f90 <secondSwitchTurn+0xf4>)
 8008f60:	f7f8 ff24 	bl	8001dac <EF_PutString>
		SwitchesButtonState[1] = 1;
 8008f64:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <secondSwitchTurn+0xf8>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	2002      	movs	r0, #2
 8008f6e:	f7f9 fe9f 	bl	8002cb0 <EEPROM_RelayStateUpdate>
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	08017654 	.word	0x08017654
 8008f80:	20000654 	.word	0x20000654
 8008f84:	200008e8 	.word	0x200008e8
 8008f88:	08028c34 	.word	0x08028c34
 8008f8c:	0801761c 	.word	0x0801761c
 8008f90:	200008a4 	.word	0x200008a4
 8008f94:	20000944 	.word	0x20000944
 8008f98:	08017660 	.word	0x08017660
 8008f9c:	08017620 	.word	0x08017620

08008fa0 <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d131      	bne.n	8009014 <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8008fb0:	200a      	movs	r0, #10
 8008fb2:	f001 f8f1 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008fb6:	4932      	ldr	r1, [pc, #200]	; (8009080 <thirdSwitchTurn+0xe0>)
 8008fb8:	4832      	ldr	r0, [pc, #200]	; (8009084 <thirdSwitchTurn+0xe4>)
 8008fba:	f002 f815 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008fbe:	4b32      	ldr	r3, [pc, #200]	; (8009088 <thirdSwitchTurn+0xe8>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d11e      	bne.n	8009004 <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008fc6:	4831      	ldr	r0, [pc, #196]	; (800908c <thirdSwitchTurn+0xec>)
 8008fc8:	f7f8 fcd6 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008fcc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2305      	movs	r3, #5
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2315      	movs	r3, #21
 8008fd8:	2221      	movs	r2, #33	; 0x21
 8008fda:	217d      	movs	r1, #125	; 0x7d
 8008fdc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008fe0:	f7f8 fc79 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008fe4:	492a      	ldr	r1, [pc, #168]	; (8009090 <thirdSwitchTurn+0xf0>)
 8008fe6:	482b      	ldr	r0, [pc, #172]	; (8009094 <thirdSwitchTurn+0xf4>)
 8008fe8:	f00a f962 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008fec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	227f      	movs	r2, #127	; 0x7f
 8008ffa:	f240 1111 	movw	r1, #273	; 0x111
 8008ffe:	4825      	ldr	r0, [pc, #148]	; (8009094 <thirdSwitchTurn+0xf4>)
 8009000:	f7f8 fed4 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 8009004:	4b24      	ldr	r3, [pc, #144]	; (8009098 <thirdSwitchTurn+0xf8>)
 8009006:	2200      	movs	r2, #0
 8009008:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 800900a:	2100      	movs	r1, #0
 800900c:	2003      	movs	r0, #3
 800900e:	f7f9 fe4f 	bl	8002cb0 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 8009012:	e030      	b.n	8009076 <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8009014:	2009      	movs	r0, #9
 8009016:	f001 f8bf 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 800901a:	4920      	ldr	r1, [pc, #128]	; (800909c <thirdSwitchTurn+0xfc>)
 800901c:	4819      	ldr	r0, [pc, #100]	; (8009084 <thirdSwitchTurn+0xe4>)
 800901e:	f001 ffe3 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8009022:	4b19      	ldr	r3, [pc, #100]	; (8009088 <thirdSwitchTurn+0xe8>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d11e      	bne.n	8009068 <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 800902a:	4818      	ldr	r0, [pc, #96]	; (800908c <thirdSwitchTurn+0xec>)
 800902c:	f7f8 fca4 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009030:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	2305      	movs	r3, #5
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	2315      	movs	r3, #21
 800903c:	2221      	movs	r2, #33	; 0x21
 800903e:	217d      	movs	r1, #125	; 0x7d
 8009040:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8009044:	f7f8 fc47 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8009048:	4915      	ldr	r1, [pc, #84]	; (80090a0 <thirdSwitchTurn+0x100>)
 800904a:	4812      	ldr	r0, [pc, #72]	; (8009094 <thirdSwitchTurn+0xf4>)
 800904c:	f00a f930 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8009050:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	2300      	movs	r3, #0
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	2300      	movs	r3, #0
 800905c:	227f      	movs	r2, #127	; 0x7f
 800905e:	f240 1111 	movw	r1, #273	; 0x111
 8009062:	480c      	ldr	r0, [pc, #48]	; (8009094 <thirdSwitchTurn+0xf4>)
 8009064:	f7f8 fea2 	bl	8001dac <EF_PutString>
		SwitchesButtonState[2] = 1;
 8009068:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <thirdSwitchTurn+0xf8>)
 800906a:	2201      	movs	r2, #1
 800906c:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 800906e:	2101      	movs	r1, #1
 8009070:	2003      	movs	r0, #3
 8009072:	f7f9 fe1d 	bl	8002cb0 <EEPROM_RelayStateUpdate>
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	0801766c 	.word	0x0801766c
 8009084:	20000654 	.word	0x20000654
 8009088:	200008e8 	.word	0x200008e8
 800908c:	08028c34 	.word	0x08028c34
 8009090:	0801761c 	.word	0x0801761c
 8009094:	200008a4 	.word	0x200008a4
 8009098:	20000944 	.word	0x20000944
 800909c:	08017678 	.word	0x08017678
 80090a0:	08017620 	.word	0x08017620

080090a4 <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	4603      	mov	r3, r0
 80090ac:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d131      	bne.n	8009118 <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 80090b4:	200c      	movs	r0, #12
 80090b6:	f001 f86f 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 80090ba:	4932      	ldr	r1, [pc, #200]	; (8009184 <fourthSwitchTurn+0xe0>)
 80090bc:	4832      	ldr	r0, [pc, #200]	; (8009188 <fourthSwitchTurn+0xe4>)
 80090be:	f001 ff93 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80090c2:	4b32      	ldr	r3, [pc, #200]	; (800918c <fourthSwitchTurn+0xe8>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d11e      	bne.n	8009108 <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80090ca:	4831      	ldr	r0, [pc, #196]	; (8009190 <fourthSwitchTurn+0xec>)
 80090cc:	f7f8 fc54 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80090d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	2305      	movs	r3, #5
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	2315      	movs	r3, #21
 80090dc:	2221      	movs	r2, #33	; 0x21
 80090de:	219b      	movs	r1, #155	; 0x9b
 80090e0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80090e4:	f7f8 fbf7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80090e8:	492a      	ldr	r1, [pc, #168]	; (8009194 <fourthSwitchTurn+0xf0>)
 80090ea:	482b      	ldr	r0, [pc, #172]	; (8009198 <fourthSwitchTurn+0xf4>)
 80090ec:	f00a f8e0 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80090f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	2300      	movs	r3, #0
 80090fc:	229d      	movs	r2, #157	; 0x9d
 80090fe:	f240 1111 	movw	r1, #273	; 0x111
 8009102:	4825      	ldr	r0, [pc, #148]	; (8009198 <fourthSwitchTurn+0xf4>)
 8009104:	f7f8 fe52 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 8009108:	4b24      	ldr	r3, [pc, #144]	; (800919c <fourthSwitchTurn+0xf8>)
 800910a:	2200      	movs	r2, #0
 800910c:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 800910e:	2100      	movs	r1, #0
 8009110:	2004      	movs	r0, #4
 8009112:	f7f9 fdcd 	bl	8002cb0 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 8009116:	e030      	b.n	800917a <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8009118:	200b      	movs	r0, #11
 800911a:	f001 f83d 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 800911e:	4920      	ldr	r1, [pc, #128]	; (80091a0 <fourthSwitchTurn+0xfc>)
 8009120:	4819      	ldr	r0, [pc, #100]	; (8009188 <fourthSwitchTurn+0xe4>)
 8009122:	f001 ff61 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8009126:	4b19      	ldr	r3, [pc, #100]	; (800918c <fourthSwitchTurn+0xe8>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d11e      	bne.n	800916c <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 800912e:	4818      	ldr	r0, [pc, #96]	; (8009190 <fourthSwitchTurn+0xec>)
 8009130:	f7f8 fc22 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009134:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	2305      	movs	r3, #5
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2315      	movs	r3, #21
 8009140:	2221      	movs	r2, #33	; 0x21
 8009142:	219b      	movs	r1, #155	; 0x9b
 8009144:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8009148:	f7f8 fbc5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 800914c:	4915      	ldr	r1, [pc, #84]	; (80091a4 <fourthSwitchTurn+0x100>)
 800914e:	4812      	ldr	r0, [pc, #72]	; (8009198 <fourthSwitchTurn+0xf4>)
 8009150:	f00a f8ae 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8009154:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	2300      	movs	r3, #0
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	2300      	movs	r3, #0
 8009160:	229d      	movs	r2, #157	; 0x9d
 8009162:	f240 1111 	movw	r1, #273	; 0x111
 8009166:	480c      	ldr	r0, [pc, #48]	; (8009198 <fourthSwitchTurn+0xf4>)
 8009168:	f7f8 fe20 	bl	8001dac <EF_PutString>
		SwitchesButtonState[3] = 1;
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <fourthSwitchTurn+0xf8>)
 800916e:	2201      	movs	r2, #1
 8009170:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 8009172:	2101      	movs	r1, #1
 8009174:	2004      	movs	r0, #4
 8009176:	f7f9 fd9b 	bl	8002cb0 <EEPROM_RelayStateUpdate>
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	08017684 	.word	0x08017684
 8009188:	20000654 	.word	0x20000654
 800918c:	200008e8 	.word	0x200008e8
 8009190:	08028c34 	.word	0x08028c34
 8009194:	0801761c 	.word	0x0801761c
 8009198:	200008a4 	.word	0x200008a4
 800919c:	20000944 	.word	0x20000944
 80091a0:	08017690 	.word	0x08017690
 80091a4:	08017620 	.word	0x08017620

080091a8 <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	4603      	mov	r3, r0
 80091b0:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d12f      	bne.n	8009218 <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 80091b8:	200e      	movs	r0, #14
 80091ba:	f000 ffed 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 80091be:	4930      	ldr	r1, [pc, #192]	; (8009280 <firstLightTurn+0xd8>)
 80091c0:	4830      	ldr	r0, [pc, #192]	; (8009284 <firstLightTurn+0xdc>)
 80091c2:	f001 ff11 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80091c6:	4b30      	ldr	r3, [pc, #192]	; (8009288 <firstLightTurn+0xe0>)
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	d11c      	bne.n	8009208 <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80091ce:	482f      	ldr	r0, [pc, #188]	; (800928c <firstLightTurn+0xe4>)
 80091d0:	f7f8 fbd2 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80091d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	2305      	movs	r3, #5
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2315      	movs	r3, #21
 80091e0:	2221      	movs	r2, #33	; 0x21
 80091e2:	2141      	movs	r1, #65	; 0x41
 80091e4:	20c8      	movs	r0, #200	; 0xc8
 80091e6:	f7f8 fb76 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80091ea:	4929      	ldr	r1, [pc, #164]	; (8009290 <firstLightTurn+0xe8>)
 80091ec:	4829      	ldr	r0, [pc, #164]	; (8009294 <firstLightTurn+0xec>)
 80091ee:	f00a f85f 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80091f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	2300      	movs	r3, #0
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	2243      	movs	r2, #67	; 0x43
 8009200:	21cb      	movs	r1, #203	; 0xcb
 8009202:	4824      	ldr	r0, [pc, #144]	; (8009294 <firstLightTurn+0xec>)
 8009204:	f7f8 fdd2 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[0] = 0;
 8009208:	4b23      	ldr	r3, [pc, #140]	; (8009298 <firstLightTurn+0xf0>)
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 800920e:	2100      	movs	r1, #0
 8009210:	2001      	movs	r0, #1
 8009212:	f7f9 fd86 	bl	8002d22 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 8009216:	e02e      	b.n	8009276 <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8009218:	200d      	movs	r0, #13
 800921a:	f000 ffbd 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 800921e:	491f      	ldr	r1, [pc, #124]	; (800929c <firstLightTurn+0xf4>)
 8009220:	4818      	ldr	r0, [pc, #96]	; (8009284 <firstLightTurn+0xdc>)
 8009222:	f001 fee1 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009226:	4b18      	ldr	r3, [pc, #96]	; (8009288 <firstLightTurn+0xe0>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b05      	cmp	r3, #5
 800922c:	d11c      	bne.n	8009268 <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 800922e:	4817      	ldr	r0, [pc, #92]	; (800928c <firstLightTurn+0xe4>)
 8009230:	f7f8 fba2 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009234:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	2305      	movs	r3, #5
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	2315      	movs	r3, #21
 8009240:	2221      	movs	r2, #33	; 0x21
 8009242:	2141      	movs	r1, #65	; 0x41
 8009244:	20c8      	movs	r0, #200	; 0xc8
 8009246:	f7f8 fb46 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 800924a:	4915      	ldr	r1, [pc, #84]	; (80092a0 <firstLightTurn+0xf8>)
 800924c:	4811      	ldr	r0, [pc, #68]	; (8009294 <firstLightTurn+0xec>)
 800924e:	f00a f82f 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009252:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	2300      	movs	r3, #0
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2300      	movs	r3, #0
 800925e:	2243      	movs	r2, #67	; 0x43
 8009260:	21cb      	movs	r1, #203	; 0xcb
 8009262:	480c      	ldr	r0, [pc, #48]	; (8009294 <firstLightTurn+0xec>)
 8009264:	f7f8 fda2 	bl	8001dac <EF_PutString>
		LightsButtonState[0] = 1;
 8009268:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <firstLightTurn+0xf0>)
 800926a:	2201      	movs	r2, #1
 800926c:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 800926e:	2101      	movs	r1, #1
 8009270:	2001      	movs	r0, #1
 8009272:	f7f9 fd56 	bl	8002d22 <EEPROM_LightStateUpdate>
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	0801769c 	.word	0x0801769c
 8009284:	20000654 	.word	0x20000654
 8009288:	200008e8 	.word	0x200008e8
 800928c:	08028c34 	.word	0x08028c34
 8009290:	0801761c 	.word	0x0801761c
 8009294:	200008a4 	.word	0x200008a4
 8009298:	20000948 	.word	0x20000948
 800929c:	080176a8 	.word	0x080176a8
 80092a0:	08017620 	.word	0x08017620

080092a4 <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d12f      	bne.n	8009314 <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 80092b4:	2010      	movs	r0, #16
 80092b6:	f000 ff6f 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 80092ba:	4930      	ldr	r1, [pc, #192]	; (800937c <secondLightTurn+0xd8>)
 80092bc:	4830      	ldr	r0, [pc, #192]	; (8009380 <secondLightTurn+0xdc>)
 80092be:	f001 fe93 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80092c2:	4b30      	ldr	r3, [pc, #192]	; (8009384 <secondLightTurn+0xe0>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d11c      	bne.n	8009304 <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80092ca:	482f      	ldr	r0, [pc, #188]	; (8009388 <secondLightTurn+0xe4>)
 80092cc:	f7f8 fb54 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80092d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	2305      	movs	r3, #5
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	2315      	movs	r3, #21
 80092dc:	2221      	movs	r2, #33	; 0x21
 80092de:	215f      	movs	r1, #95	; 0x5f
 80092e0:	20c8      	movs	r0, #200	; 0xc8
 80092e2:	f7f8 faf8 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80092e6:	4929      	ldr	r1, [pc, #164]	; (800938c <secondLightTurn+0xe8>)
 80092e8:	4829      	ldr	r0, [pc, #164]	; (8009390 <secondLightTurn+0xec>)
 80092ea:	f009 ffe1 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80092ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	2300      	movs	r3, #0
 80092fa:	2261      	movs	r2, #97	; 0x61
 80092fc:	21cb      	movs	r1, #203	; 0xcb
 80092fe:	4824      	ldr	r0, [pc, #144]	; (8009390 <secondLightTurn+0xec>)
 8009300:	f7f8 fd54 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[1] = 0;
 8009304:	4b23      	ldr	r3, [pc, #140]	; (8009394 <secondLightTurn+0xf0>)
 8009306:	2200      	movs	r2, #0
 8009308:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 800930a:	2100      	movs	r1, #0
 800930c:	2002      	movs	r0, #2
 800930e:	f7f9 fd08 	bl	8002d22 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 8009312:	e02e      	b.n	8009372 <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8009314:	200f      	movs	r0, #15
 8009316:	f000 ff3f 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 800931a:	491f      	ldr	r1, [pc, #124]	; (8009398 <secondLightTurn+0xf4>)
 800931c:	4818      	ldr	r0, [pc, #96]	; (8009380 <secondLightTurn+0xdc>)
 800931e:	f001 fe63 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009322:	4b18      	ldr	r3, [pc, #96]	; (8009384 <secondLightTurn+0xe0>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b05      	cmp	r3, #5
 8009328:	d11c      	bne.n	8009364 <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 800932a:	4817      	ldr	r0, [pc, #92]	; (8009388 <secondLightTurn+0xe4>)
 800932c:	f7f8 fb24 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009330:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	2305      	movs	r3, #5
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	2315      	movs	r3, #21
 800933c:	2221      	movs	r2, #33	; 0x21
 800933e:	215f      	movs	r1, #95	; 0x5f
 8009340:	20c8      	movs	r0, #200	; 0xc8
 8009342:	f7f8 fac8 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8009346:	4915      	ldr	r1, [pc, #84]	; (800939c <secondLightTurn+0xf8>)
 8009348:	4811      	ldr	r0, [pc, #68]	; (8009390 <secondLightTurn+0xec>)
 800934a:	f009 ffb1 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800934e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	2300      	movs	r3, #0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	2261      	movs	r2, #97	; 0x61
 800935c:	21cb      	movs	r1, #203	; 0xcb
 800935e:	480c      	ldr	r0, [pc, #48]	; (8009390 <secondLightTurn+0xec>)
 8009360:	f7f8 fd24 	bl	8001dac <EF_PutString>
		LightsButtonState[1] = 1;
 8009364:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <secondLightTurn+0xf0>)
 8009366:	2201      	movs	r2, #1
 8009368:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 800936a:	2101      	movs	r1, #1
 800936c:	2002      	movs	r0, #2
 800936e:	f7f9 fcd8 	bl	8002d22 <EEPROM_LightStateUpdate>
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	080176b4 	.word	0x080176b4
 8009380:	20000654 	.word	0x20000654
 8009384:	200008e8 	.word	0x200008e8
 8009388:	08028c34 	.word	0x08028c34
 800938c:	0801761c 	.word	0x0801761c
 8009390:	200008a4 	.word	0x200008a4
 8009394:	20000948 	.word	0x20000948
 8009398:	080176c0 	.word	0x080176c0
 800939c:	08017620 	.word	0x08017620

080093a0 <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af02      	add	r7, sp, #8
 80093a6:	4603      	mov	r3, r0
 80093a8:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d12f      	bne.n	8009410 <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 80093b0:	2012      	movs	r0, #18
 80093b2:	f000 fef1 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 80093b6:	4930      	ldr	r1, [pc, #192]	; (8009478 <thirdLightTurn+0xd8>)
 80093b8:	4830      	ldr	r0, [pc, #192]	; (800947c <thirdLightTurn+0xdc>)
 80093ba:	f001 fe15 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80093be:	4b30      	ldr	r3, [pc, #192]	; (8009480 <thirdLightTurn+0xe0>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	d11c      	bne.n	8009400 <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80093c6:	482f      	ldr	r0, [pc, #188]	; (8009484 <thirdLightTurn+0xe4>)
 80093c8:	f7f8 fad6 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80093cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	2305      	movs	r3, #5
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	2315      	movs	r3, #21
 80093d8:	2221      	movs	r2, #33	; 0x21
 80093da:	217d      	movs	r1, #125	; 0x7d
 80093dc:	20c8      	movs	r0, #200	; 0xc8
 80093de:	f7f8 fa7a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80093e2:	4929      	ldr	r1, [pc, #164]	; (8009488 <thirdLightTurn+0xe8>)
 80093e4:	4829      	ldr	r0, [pc, #164]	; (800948c <thirdLightTurn+0xec>)
 80093e6:	f009 ff63 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80093ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	2300      	movs	r3, #0
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	227f      	movs	r2, #127	; 0x7f
 80093f8:	21cb      	movs	r1, #203	; 0xcb
 80093fa:	4824      	ldr	r0, [pc, #144]	; (800948c <thirdLightTurn+0xec>)
 80093fc:	f7f8 fcd6 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[2] = 0;
 8009400:	4b23      	ldr	r3, [pc, #140]	; (8009490 <thirdLightTurn+0xf0>)
 8009402:	2200      	movs	r2, #0
 8009404:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 8009406:	2100      	movs	r1, #0
 8009408:	2003      	movs	r0, #3
 800940a:	f7f9 fc8a 	bl	8002d22 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 800940e:	e02e      	b.n	800946e <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8009410:	2011      	movs	r0, #17
 8009412:	f000 fec1 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 8009416:	491f      	ldr	r1, [pc, #124]	; (8009494 <thirdLightTurn+0xf4>)
 8009418:	4818      	ldr	r0, [pc, #96]	; (800947c <thirdLightTurn+0xdc>)
 800941a:	f001 fde5 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800941e:	4b18      	ldr	r3, [pc, #96]	; (8009480 <thirdLightTurn+0xe0>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b05      	cmp	r3, #5
 8009424:	d11c      	bne.n	8009460 <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8009426:	4817      	ldr	r0, [pc, #92]	; (8009484 <thirdLightTurn+0xe4>)
 8009428:	f7f8 faa6 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800942c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	2305      	movs	r3, #5
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	2315      	movs	r3, #21
 8009438:	2221      	movs	r2, #33	; 0x21
 800943a:	217d      	movs	r1, #125	; 0x7d
 800943c:	20c8      	movs	r0, #200	; 0xc8
 800943e:	f7f8 fa4a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8009442:	4915      	ldr	r1, [pc, #84]	; (8009498 <thirdLightTurn+0xf8>)
 8009444:	4811      	ldr	r0, [pc, #68]	; (800948c <thirdLightTurn+0xec>)
 8009446:	f009 ff33 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800944a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	227f      	movs	r2, #127	; 0x7f
 8009458:	21cb      	movs	r1, #203	; 0xcb
 800945a:	480c      	ldr	r0, [pc, #48]	; (800948c <thirdLightTurn+0xec>)
 800945c:	f7f8 fca6 	bl	8001dac <EF_PutString>
		LightsButtonState[2] = 1;
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <thirdLightTurn+0xf0>)
 8009462:	2201      	movs	r2, #1
 8009464:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 8009466:	2101      	movs	r1, #1
 8009468:	2003      	movs	r0, #3
 800946a:	f7f9 fc5a 	bl	8002d22 <EEPROM_LightStateUpdate>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	080176cc 	.word	0x080176cc
 800947c:	20000654 	.word	0x20000654
 8009480:	200008e8 	.word	0x200008e8
 8009484:	08028c34 	.word	0x08028c34
 8009488:	0801761c 	.word	0x0801761c
 800948c:	200008a4 	.word	0x200008a4
 8009490:	20000948 	.word	0x20000948
 8009494:	080176d8 	.word	0x080176d8
 8009498:	08017620 	.word	0x08017620

0800949c <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	4603      	mov	r3, r0
 80094a4:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d12f      	bne.n	800950c <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80094ac:	2014      	movs	r0, #20
 80094ae:	f000 fe73 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 80094b2:	4930      	ldr	r1, [pc, #192]	; (8009574 <fourthLightTurn+0xd8>)
 80094b4:	4830      	ldr	r0, [pc, #192]	; (8009578 <fourthLightTurn+0xdc>)
 80094b6:	f001 fd97 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80094ba:	4b30      	ldr	r3, [pc, #192]	; (800957c <fourthLightTurn+0xe0>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d11c      	bne.n	80094fc <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80094c2:	482f      	ldr	r0, [pc, #188]	; (8009580 <fourthLightTurn+0xe4>)
 80094c4:	f7f8 fa58 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80094c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	2305      	movs	r3, #5
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	2315      	movs	r3, #21
 80094d4:	2221      	movs	r2, #33	; 0x21
 80094d6:	219b      	movs	r1, #155	; 0x9b
 80094d8:	20c8      	movs	r0, #200	; 0xc8
 80094da:	f7f8 f9fc 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80094de:	4929      	ldr	r1, [pc, #164]	; (8009584 <fourthLightTurn+0xe8>)
 80094e0:	4829      	ldr	r0, [pc, #164]	; (8009588 <fourthLightTurn+0xec>)
 80094e2:	f009 fee5 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80094e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	2300      	movs	r3, #0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2300      	movs	r3, #0
 80094f2:	229d      	movs	r2, #157	; 0x9d
 80094f4:	21cb      	movs	r1, #203	; 0xcb
 80094f6:	4824      	ldr	r0, [pc, #144]	; (8009588 <fourthLightTurn+0xec>)
 80094f8:	f7f8 fc58 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[3] = 0;
 80094fc:	4b23      	ldr	r3, [pc, #140]	; (800958c <fourthLightTurn+0xf0>)
 80094fe:	2200      	movs	r2, #0
 8009500:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 8009502:	2100      	movs	r1, #0
 8009504:	2004      	movs	r0, #4
 8009506:	f7f9 fc0c 	bl	8002d22 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 800950a:	e02e      	b.n	800956a <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800950c:	2013      	movs	r0, #19
 800950e:	f000 fe43 	bl	800a198 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 8009512:	491f      	ldr	r1, [pc, #124]	; (8009590 <fourthLightTurn+0xf4>)
 8009514:	4818      	ldr	r0, [pc, #96]	; (8009578 <fourthLightTurn+0xdc>)
 8009516:	f001 fd67 	bl	800afe8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800951a:	4b18      	ldr	r3, [pc, #96]	; (800957c <fourthLightTurn+0xe0>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b05      	cmp	r3, #5
 8009520:	d11c      	bne.n	800955c <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8009522:	4817      	ldr	r0, [pc, #92]	; (8009580 <fourthLightTurn+0xe4>)
 8009524:	f7f8 fa28 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009528:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	2305      	movs	r3, #5
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	2315      	movs	r3, #21
 8009534:	2221      	movs	r2, #33	; 0x21
 8009536:	219b      	movs	r1, #155	; 0x9b
 8009538:	20c8      	movs	r0, #200	; 0xc8
 800953a:	f7f8 f9cc 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 800953e:	4915      	ldr	r1, [pc, #84]	; (8009594 <fourthLightTurn+0xf8>)
 8009540:	4811      	ldr	r0, [pc, #68]	; (8009588 <fourthLightTurn+0xec>)
 8009542:	f009 feb5 	bl	80132b0 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009546:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	2300      	movs	r3, #0
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	2300      	movs	r3, #0
 8009552:	229d      	movs	r2, #157	; 0x9d
 8009554:	21cb      	movs	r1, #203	; 0xcb
 8009556:	480c      	ldr	r0, [pc, #48]	; (8009588 <fourthLightTurn+0xec>)
 8009558:	f7f8 fc28 	bl	8001dac <EF_PutString>
		LightsButtonState[3] = 1;
 800955c:	4b0b      	ldr	r3, [pc, #44]	; (800958c <fourthLightTurn+0xf0>)
 800955e:	2201      	movs	r2, #1
 8009560:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 8009562:	2101      	movs	r1, #1
 8009564:	2004      	movs	r0, #4
 8009566:	f7f9 fbdc 	bl	8002d22 <EEPROM_LightStateUpdate>
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	080176e4 	.word	0x080176e4
 8009578:	20000654 	.word	0x20000654
 800957c:	200008e8 	.word	0x200008e8
 8009580:	08028c34 	.word	0x08028c34
 8009584:	0801761c 	.word	0x0801761c
 8009588:	200008a4 	.word	0x200008a4
 800958c:	20000948 	.word	0x20000948
 8009590:	080176f0 	.word	0x080176f0
 8009594:	08017620 	.word	0x08017620

08009598 <OneMinuteIncrease>:

void OneMinuteIncrease(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af02      	add	r7, sp, #8
	if(Minutes < 59)
 800959e:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <OneMinuteIncrease+0x4c>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b3a      	cmp	r3, #58	; 0x3a
 80095a4:	d806      	bhi.n	80095b4 <OneMinuteIncrease+0x1c>
	{
		Minutes++;
 80095a6:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <OneMinuteIncrease+0x4c>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <OneMinuteIncrease+0x4c>)
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	e002      	b.n	80095ba <OneMinuteIncrease+0x22>
	}
	else
	{
		Minutes = 0;
 80095b4:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <OneMinuteIncrease+0x4c>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Minutes);
 80095ba:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <OneMinuteIncrease+0x4c>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	4909      	ldr	r1, [pc, #36]	; (80095e8 <OneMinuteIncrease+0x50>)
 80095c2:	480a      	ldr	r0, [pc, #40]	; (80095ec <OneMinuteIncrease+0x54>)
 80095c4:	f009 fe74 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80095c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	2301      	movs	r3, #1
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	2300      	movs	r3, #0
 80095d4:	226e      	movs	r2, #110	; 0x6e
 80095d6:	21a0      	movs	r1, #160	; 0xa0
 80095d8:	4804      	ldr	r0, [pc, #16]	; (80095ec <OneMinuteIncrease+0x54>)
 80095da:	f7f8 fbe7 	bl	8001dac <EF_PutString>
}
 80095de:	bf00      	nop
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000033 	.word	0x20000033
 80095e8:	08017608 	.word	0x08017608
 80095ec:	200008a4 	.word	0x200008a4

080095f0 <OneHourIncrease>:

void OneHourIncrease(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af02      	add	r7, sp, #8
	if(Hours < 24)
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <OneHourIncrease+0x4c>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b17      	cmp	r3, #23
 80095fc:	d806      	bhi.n	800960c <OneHourIncrease+0x1c>
	{
		Hours++;
 80095fe:	4b0f      	ldr	r3, [pc, #60]	; (800963c <OneHourIncrease+0x4c>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <OneHourIncrease+0x4c>)
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	e002      	b.n	8009612 <OneHourIncrease+0x22>
	}
	else
	{
		Hours = 1;
 800960c:	4b0b      	ldr	r3, [pc, #44]	; (800963c <OneHourIncrease+0x4c>)
 800960e:	2201      	movs	r2, #1
 8009610:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Hours);
 8009612:	4b0a      	ldr	r3, [pc, #40]	; (800963c <OneHourIncrease+0x4c>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	4909      	ldr	r1, [pc, #36]	; (8009640 <OneHourIncrease+0x50>)
 800961a:	480a      	ldr	r0, [pc, #40]	; (8009644 <OneHourIncrease+0x54>)
 800961c:	f009 fe48 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009620:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	2301      	movs	r3, #1
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	2300      	movs	r3, #0
 800962c:	2246      	movs	r2, #70	; 0x46
 800962e:	21a0      	movs	r1, #160	; 0xa0
 8009630:	4804      	ldr	r0, [pc, #16]	; (8009644 <OneHourIncrease+0x54>)
 8009632:	f7f8 fbbb 	bl	8001dac <EF_PutString>
}
 8009636:	bf00      	nop
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20000032 	.word	0x20000032
 8009640:	08017608 	.word	0x08017608
 8009644:	200008a4 	.word	0x200008a4

08009648 <OneDayIncrease>:

void OneDayIncrease(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af02      	add	r7, sp, #8
	if(DayOfWeek < 7)
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <OneDayIncrease+0x4c>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b06      	cmp	r3, #6
 8009654:	d806      	bhi.n	8009664 <OneDayIncrease+0x1c>
	{
		DayOfWeek++;
 8009656:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <OneDayIncrease+0x4c>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	b2da      	uxtb	r2, r3
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <OneDayIncrease+0x4c>)
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e002      	b.n	800966a <OneDayIncrease+0x22>
	}
	else
	{
		DayOfWeek = 1;
 8009664:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <OneDayIncrease+0x4c>)
 8009666:	2201      	movs	r2, #1
 8009668:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, "DZIEŃ TYG:  %d ", DayOfWeek);
 800966a:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <OneDayIncrease+0x4c>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	4909      	ldr	r1, [pc, #36]	; (8009698 <OneDayIncrease+0x50>)
 8009672:	480a      	ldr	r0, [pc, #40]	; (800969c <OneDayIncrease+0x54>)
 8009674:	f009 fe1c 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009678:	f24c 6318 	movw	r3, #50712	; 0xc618
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	2301      	movs	r3, #1
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	2300      	movs	r3, #0
 8009684:	2296      	movs	r2, #150	; 0x96
 8009686:	2114      	movs	r1, #20
 8009688:	4804      	ldr	r0, [pc, #16]	; (800969c <OneDayIncrease+0x54>)
 800968a:	f7f8 fb8f 	bl	8001dac <EF_PutString>
}
 800968e:	bf00      	nop
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000031 	.word	0x20000031
 8009698:	080176fc 	.word	0x080176fc
 800969c:	200008a4 	.word	0x200008a4

080096a0 <OneMinuteDecrease>:

void OneMinuteDecrease(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af02      	add	r7, sp, #8
	if(Minutes > 0)
 80096a6:	4b11      	ldr	r3, [pc, #68]	; (80096ec <OneMinuteDecrease+0x4c>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <OneMinuteDecrease+0x1c>
	{
		Minutes--;
 80096ae:	4b0f      	ldr	r3, [pc, #60]	; (80096ec <OneMinuteDecrease+0x4c>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <OneMinuteDecrease+0x4c>)
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e002      	b.n	80096c2 <OneMinuteDecrease+0x22>
	}
	else
	{
		Minutes = 59;
 80096bc:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <OneMinuteDecrease+0x4c>)
 80096be:	223b      	movs	r2, #59	; 0x3b
 80096c0:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Minutes);
 80096c2:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <OneMinuteDecrease+0x4c>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	4909      	ldr	r1, [pc, #36]	; (80096f0 <OneMinuteDecrease+0x50>)
 80096ca:	480a      	ldr	r0, [pc, #40]	; (80096f4 <OneMinuteDecrease+0x54>)
 80096cc:	f009 fdf0 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80096d0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	2301      	movs	r3, #1
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	2300      	movs	r3, #0
 80096dc:	226e      	movs	r2, #110	; 0x6e
 80096de:	21a0      	movs	r1, #160	; 0xa0
 80096e0:	4804      	ldr	r0, [pc, #16]	; (80096f4 <OneMinuteDecrease+0x54>)
 80096e2:	f7f8 fb63 	bl	8001dac <EF_PutString>

}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20000033 	.word	0x20000033
 80096f0:	08017608 	.word	0x08017608
 80096f4:	200008a4 	.word	0x200008a4

080096f8 <OneHourDecrease>:

void OneHourDecrease(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af02      	add	r7, sp, #8
	if(Hours > 0)
 80096fe:	4b11      	ldr	r3, [pc, #68]	; (8009744 <OneHourDecrease+0x4c>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d006      	beq.n	8009714 <OneHourDecrease+0x1c>
	{
		Hours--;
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <OneHourDecrease+0x4c>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	3b01      	subs	r3, #1
 800970c:	b2da      	uxtb	r2, r3
 800970e:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <OneHourDecrease+0x4c>)
 8009710:	701a      	strb	r2, [r3, #0]
 8009712:	e002      	b.n	800971a <OneHourDecrease+0x22>
	}
	else
	{
		Hours = 24;
 8009714:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <OneHourDecrease+0x4c>)
 8009716:	2218      	movs	r2, #24
 8009718:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Hours);
 800971a:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <OneHourDecrease+0x4c>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	4909      	ldr	r1, [pc, #36]	; (8009748 <OneHourDecrease+0x50>)
 8009722:	480a      	ldr	r0, [pc, #40]	; (800974c <OneHourDecrease+0x54>)
 8009724:	f009 fdc4 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009728:	f24c 6318 	movw	r3, #50712	; 0xc618
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2301      	movs	r3, #1
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	2246      	movs	r2, #70	; 0x46
 8009736:	21a0      	movs	r1, #160	; 0xa0
 8009738:	4804      	ldr	r0, [pc, #16]	; (800974c <OneHourDecrease+0x54>)
 800973a:	f7f8 fb37 	bl	8001dac <EF_PutString>

}
 800973e:	bf00      	nop
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000032 	.word	0x20000032
 8009748:	08017608 	.word	0x08017608
 800974c:	200008a4 	.word	0x200008a4

08009750 <OneDayDecrease>:

void OneDayDecrease(void)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af02      	add	r7, sp, #8
	if(DayOfWeek > 0)
 8009756:	4b11      	ldr	r3, [pc, #68]	; (800979c <OneDayDecrease+0x4c>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d006      	beq.n	800976c <OneDayDecrease+0x1c>
	{
		DayOfWeek--;
 800975e:	4b0f      	ldr	r3, [pc, #60]	; (800979c <OneDayDecrease+0x4c>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	3b01      	subs	r3, #1
 8009764:	b2da      	uxtb	r2, r3
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <OneDayDecrease+0x4c>)
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e002      	b.n	8009772 <OneDayDecrease+0x22>
	}
	else
	{
		DayOfWeek = 7;
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <OneDayDecrease+0x4c>)
 800976e:	2207      	movs	r2, #7
 8009770:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, "DZIEŃ TYG:  %d ", DayOfWeek);
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <OneDayDecrease+0x4c>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	4909      	ldr	r1, [pc, #36]	; (80097a0 <OneDayDecrease+0x50>)
 800977a:	480a      	ldr	r0, [pc, #40]	; (80097a4 <OneDayDecrease+0x54>)
 800977c:	f009 fd98 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009780:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	2301      	movs	r3, #1
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	2300      	movs	r3, #0
 800978c:	2296      	movs	r2, #150	; 0x96
 800978e:	2114      	movs	r1, #20
 8009790:	4804      	ldr	r0, [pc, #16]	; (80097a4 <OneDayDecrease+0x54>)
 8009792:	f7f8 fb0b 	bl	8001dac <EF_PutString>

}
 8009796:	bf00      	nop
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20000031 	.word	0x20000031
 80097a0:	080176fc 	.word	0x080176fc
 80097a4:	200008a4 	.word	0x200008a4

080097a8 <TenSecondsActivitiesDurationIncrease>:

void TenSecondsActivitiesDurationIncrease(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds < 990)
 80097ae:	4b18      	ldr	r3, [pc, #96]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f240 32dd 	movw	r2, #989	; 0x3dd
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d805      	bhi.n	80097c6 <TenSecondsActivitiesDurationIncrease+0x1e>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds + 10;
 80097ba:	4b15      	ldr	r3, [pc, #84]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	330a      	adds	r3, #10
 80097c0:	4a13      	ldr	r2, [pc, #76]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	e002      	b.n	80097cc <TenSecondsActivitiesDurationIncrease+0x24>
	}
	else
	{
		activitiesDurationTimeInSeconds = 10;
 80097c6:	4b12      	ldr	r3, [pc, #72]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097c8:	220a      	movs	r2, #10
 80097ca:	601a      	str	r2, [r3, #0]
	}
	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)MsgMenuTFT, " %ld s ", activitiesDurationTimeInSeconds);
 80097cc:	4b10      	ldr	r3, [pc, #64]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b63      	cmp	r3, #99	; 0x63
 80097d2:	d807      	bhi.n	80097e4 <TenSecondsActivitiesDurationIncrease+0x3c>
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	490e      	ldr	r1, [pc, #56]	; (8009814 <TenSecondsActivitiesDurationIncrease+0x6c>)
 80097dc:	480e      	ldr	r0, [pc, #56]	; (8009818 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097de:	f009 fd67 	bl	80132b0 <siprintf>
 80097e2:	e006      	b.n	80097f2 <TenSecondsActivitiesDurationIncrease+0x4a>
	else sprintf((char*)MsgMenuTFT, "%ld s", activitiesDurationTimeInSeconds);
 80097e4:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	490c      	ldr	r1, [pc, #48]	; (800981c <TenSecondsActivitiesDurationIncrease+0x74>)
 80097ec:	480a      	ldr	r0, [pc, #40]	; (8009818 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097ee:	f009 fd5f 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80097f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	2301      	movs	r3, #1
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2300      	movs	r3, #0
 80097fe:	22b4      	movs	r2, #180	; 0xb4
 8009800:	21e7      	movs	r1, #231	; 0xe7
 8009802:	4805      	ldr	r0, [pc, #20]	; (8009818 <TenSecondsActivitiesDurationIncrease+0x70>)
 8009804:	f7f8 fad2 	bl	8001dac <EF_PutString>
}
 8009808:	bf00      	nop
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000898 	.word	0x20000898
 8009814:	08017710 	.word	0x08017710
 8009818:	200008a4 	.word	0x200008a4
 800981c:	08017718 	.word	0x08017718

08009820 <TenSecondsActivitiesDurationDecrease>:

void TenSecondsActivitiesDurationDecrease(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds > 10)
 8009826:	4b17      	ldr	r3, [pc, #92]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b0a      	cmp	r3, #10
 800982c:	d905      	bls.n	800983a <TenSecondsActivitiesDurationDecrease+0x1a>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds - 10;
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3b0a      	subs	r3, #10
 8009834:	4a13      	ldr	r2, [pc, #76]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	e003      	b.n	8009842 <TenSecondsActivitiesDurationDecrease+0x22>
	}
	else
	{
		activitiesDurationTimeInSeconds = 990;
 800983a:	4b12      	ldr	r3, [pc, #72]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 800983c:	f240 32de 	movw	r2, #990	; 0x3de
 8009840:	601a      	str	r2, [r3, #0]
	}

	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)MsgMenuTFT, " %ld s ", activitiesDurationTimeInSeconds);
 8009842:	4b10      	ldr	r3, [pc, #64]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b63      	cmp	r3, #99	; 0x63
 8009848:	d807      	bhi.n	800985a <TenSecondsActivitiesDurationDecrease+0x3a>
 800984a:	4b0e      	ldr	r3, [pc, #56]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	490d      	ldr	r1, [pc, #52]	; (8009888 <TenSecondsActivitiesDurationDecrease+0x68>)
 8009852:	480e      	ldr	r0, [pc, #56]	; (800988c <TenSecondsActivitiesDurationDecrease+0x6c>)
 8009854:	f009 fd2c 	bl	80132b0 <siprintf>
 8009858:	e006      	b.n	8009868 <TenSecondsActivitiesDurationDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, "%ld s", activitiesDurationTimeInSeconds);
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <TenSecondsActivitiesDurationDecrease+0x64>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	490b      	ldr	r1, [pc, #44]	; (8009890 <TenSecondsActivitiesDurationDecrease+0x70>)
 8009862:	480a      	ldr	r0, [pc, #40]	; (800988c <TenSecondsActivitiesDurationDecrease+0x6c>)
 8009864:	f009 fd24 	bl	80132b0 <siprintf>
	EF_PutString(MsgMenuTFT, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009868:	f24c 6318 	movw	r3, #50712	; 0xc618
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	2301      	movs	r3, #1
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	2300      	movs	r3, #0
 8009874:	22b4      	movs	r2, #180	; 0xb4
 8009876:	21e7      	movs	r1, #231	; 0xe7
 8009878:	4804      	ldr	r0, [pc, #16]	; (800988c <TenSecondsActivitiesDurationDecrease+0x6c>)
 800987a:	f7f8 fa97 	bl	8001dac <EF_PutString>
}
 800987e:	bf00      	nop
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000898 	.word	0x20000898
 8009888:	08017710 	.word	0x08017710
 800988c:	200008a4 	.word	0x200008a4
 8009890:	08017718 	.word	0x08017718

08009894 <encoderUpgrade>:

void encoderUpgrade(int16_t *EncoderCntWsk)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	EncoderCounter = *EncoderCntWsk;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098a2:	4b9d      	ldr	r3, [pc, #628]	; (8009b18 <encoderUpgrade+0x284>)
 80098a4:	801a      	strh	r2, [r3, #0]
	if(EncoderCounter != EncoderCounterPrevious) // if was rotated
 80098a6:	4b9c      	ldr	r3, [pc, #624]	; (8009b18 <encoderUpgrade+0x284>)
 80098a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098ac:	4b9b      	ldr	r3, [pc, #620]	; (8009b1c <encoderUpgrade+0x288>)
 80098ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	f000 816d 	beq.w	8009b92 <encoderUpgrade+0x2fe>
	{
		if (EncoderCounter > EncoderCounterPrevious) // if increase
 80098b8:	4b97      	ldr	r3, [pc, #604]	; (8009b18 <encoderUpgrade+0x284>)
 80098ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098be:	4b97      	ldr	r3, [pc, #604]	; (8009b1c <encoderUpgrade+0x288>)
 80098c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	f340 80ae 	ble.w	8009a26 <encoderUpgrade+0x192>
		{
			if((EncoderCounter - EncoderCounterPrevious >= 2)) // if full rotate was done
 80098ca:	4b93      	ldr	r3, [pc, #588]	; (8009b18 <encoderUpgrade+0x284>)
 80098cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098d0:	461a      	mov	r2, r3
 80098d2:	4b92      	ldr	r3, [pc, #584]	; (8009b1c <encoderUpgrade+0x288>)
 80098d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b01      	cmp	r3, #1
 80098dc:	f340 8159 	ble.w	8009b92 <encoderUpgrade+0x2fe>
			{
				RotateUpgradeNumber = (EncoderCounter - EncoderCounterPrevious)/2;
 80098e0:	4b8d      	ldr	r3, [pc, #564]	; (8009b18 <encoderUpgrade+0x284>)
 80098e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098e6:	461a      	mov	r2, r3
 80098e8:	4b8c      	ldr	r3, [pc, #560]	; (8009b1c <encoderUpgrade+0x288>)
 80098ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	0fda      	lsrs	r2, r3, #31
 80098f2:	4413      	add	r3, r2
 80098f4:	105b      	asrs	r3, r3, #1
 80098f6:	b21a      	sxth	r2, r3
 80098f8:	4b89      	ldr	r3, [pc, #548]	; (8009b20 <encoderUpgrade+0x28c>)
 80098fa:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80098fc:	2301      	movs	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
 8009900:	e081      	b.n	8009a06 <encoderUpgrade+0x172>
				{
					if(EncoderState == ENCODER_IDLE)
 8009902:	4b88      	ldr	r3, [pc, #544]	; (8009b24 <encoderUpgrade+0x290>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d120      	bne.n	800994c <encoderUpgrade+0xb8>
					{
						if(State == MENUTFT_PARAMETERS)
 800990a:	4b87      	ldr	r3, [pc, #540]	; (8009b28 <encoderUpgrade+0x294>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d106      	bne.n	8009920 <encoderUpgrade+0x8c>
							{
							State = MENUTFT_SWITCH;
 8009912:	4b85      	ldr	r3, [pc, #532]	; (8009b28 <encoderUpgrade+0x294>)
 8009914:	2202      	movs	r2, #2
 8009916:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009918:	4b84      	ldr	r3, [pc, #528]	; (8009b2c <encoderUpgrade+0x298>)
 800991a:	2201      	movs	r2, #1
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e06f      	b.n	8009a00 <encoderUpgrade+0x16c>
							}
						else if (State == MENUTFT_SWITCH)
 8009920:	4b81      	ldr	r3, [pc, #516]	; (8009b28 <encoderUpgrade+0x294>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b02      	cmp	r3, #2
 8009926:	d106      	bne.n	8009936 <encoderUpgrade+0xa2>
						{
							State = MENUTFT_LIGHTS;
 8009928:	4b7f      	ldr	r3, [pc, #508]	; (8009b28 <encoderUpgrade+0x294>)
 800992a:	2205      	movs	r2, #5
 800992c:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 800992e:	4b7f      	ldr	r3, [pc, #508]	; (8009b2c <encoderUpgrade+0x298>)
 8009930:	2201      	movs	r2, #1
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e064      	b.n	8009a00 <encoderUpgrade+0x16c>
						}
						else if (State == MENUTFT_LIGHTS)
 8009936:	4b7c      	ldr	r3, [pc, #496]	; (8009b28 <encoderUpgrade+0x294>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b05      	cmp	r3, #5
 800993c:	d160      	bne.n	8009a00 <encoderUpgrade+0x16c>
							{
							State = MENUTFT_PARAMETERS;
 800993e:	4b7a      	ldr	r3, [pc, #488]	; (8009b28 <encoderUpgrade+0x294>)
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009944:	4b79      	ldr	r3, [pc, #484]	; (8009b2c <encoderUpgrade+0x298>)
 8009946:	2201      	movs	r2, #1
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	e059      	b.n	8009a00 <encoderUpgrade+0x16c>
							}
					}
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 800994c:	4b75      	ldr	r3, [pc, #468]	; (8009b24 <encoderUpgrade+0x290>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d102      	bne.n	800995a <encoderUpgrade+0xc6>
					{
						OneMinuteIncrease();
 8009954:	f7ff fe20 	bl	8009598 <OneMinuteIncrease>
 8009958:	e052      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 800995a:	4b72      	ldr	r3, [pc, #456]	; (8009b24 <encoderUpgrade+0x290>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d102      	bne.n	8009968 <encoderUpgrade+0xd4>
					{
						OneHourIncrease();
 8009962:	f7ff fe45 	bl	80095f0 <OneHourIncrease>
 8009966:	e04b      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009968:	4b6e      	ldr	r3, [pc, #440]	; (8009b24 <encoderUpgrade+0x290>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d102      	bne.n	8009976 <encoderUpgrade+0xe2>
					{
						OneDayIncrease();
 8009970:	f7ff fe6a 	bl	8009648 <OneDayIncrease>
 8009974:	e044      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_WS_LED)
 8009976:	4b6b      	ldr	r3, [pc, #428]	; (8009b24 <encoderUpgrade+0x290>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b04      	cmp	r3, #4
 800997c:	d102      	bne.n	8009984 <encoderUpgrade+0xf0>
					{
						WSONEincreaseNumberOfLedOnTFT();
 800997e:	f7ff f8a5 	bl	8008acc <WSONEincreaseNumberOfLedOnTFT>
 8009982:	e03d      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if(EncoderState == ENCODER_ACTIVITIES)
 8009984:	4b67      	ldr	r3, [pc, #412]	; (8009b24 <encoderUpgrade+0x290>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b05      	cmp	r3, #5
 800998a:	d102      	bne.n	8009992 <encoderUpgrade+0xfe>
					{
						TenSecondsActivitiesDurationIncrease();
 800998c:	f7ff ff0c 	bl	80097a8 <TenSecondsActivitiesDurationIncrease>
 8009990:	e036      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					//Schedules
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_ON)
 8009992:	4b64      	ldr	r3, [pc, #400]	; (8009b24 <encoderUpgrade+0x290>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b06      	cmp	r3, #6
 8009998:	d102      	bne.n	80099a0 <encoderUpgrade+0x10c>
					{
						schedule1HourOnIncrease();
 800999a:	f7fd fd51 	bl	8007440 <schedule1HourOnIncrease>
 800999e:	e02f      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_ON)
 80099a0:	4b60      	ldr	r3, [pc, #384]	; (8009b24 <encoderUpgrade+0x290>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d102      	bne.n	80099ae <encoderUpgrade+0x11a>
					{
						schedule1MinuteOnIncrease();
 80099a8:	f7fd fdbe 	bl	8007528 <schedule1MinuteOnIncrease>
 80099ac:	e028      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_OFF)
 80099ae:	4b5d      	ldr	r3, [pc, #372]	; (8009b24 <encoderUpgrade+0x290>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b07      	cmp	r3, #7
 80099b4:	d102      	bne.n	80099bc <encoderUpgrade+0x128>
					{
						schedule1HourOffIncrease();
 80099b6:	f7fd fe2b 	bl	8007610 <schedule1HourOffIncrease>
 80099ba:	e021      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_OFF)
 80099bc:	4b59      	ldr	r3, [pc, #356]	; (8009b24 <encoderUpgrade+0x290>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b09      	cmp	r3, #9
 80099c2:	d102      	bne.n	80099ca <encoderUpgrade+0x136>
					{
						schedule1MinuteOffIncrease();
 80099c4:	f7fd fe98 	bl	80076f8 <schedule1MinuteOffIncrease>
 80099c8:	e01a      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_ON)
 80099ca:	4b56      	ldr	r3, [pc, #344]	; (8009b24 <encoderUpgrade+0x290>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b0a      	cmp	r3, #10
 80099d0:	d102      	bne.n	80099d8 <encoderUpgrade+0x144>
					{
						schedule2HourOnIncrease();
 80099d2:	f7fe f8e3 	bl	8007b9c <schedule2HourOnIncrease>
 80099d6:	e013      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_ON)
 80099d8:	4b52      	ldr	r3, [pc, #328]	; (8009b24 <encoderUpgrade+0x290>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b0c      	cmp	r3, #12
 80099de:	d102      	bne.n	80099e6 <encoderUpgrade+0x152>
					{
						schedule2MinuteOnIncrease();
 80099e0:	f7fe f950 	bl	8007c84 <schedule2MinuteOnIncrease>
 80099e4:	e00c      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_OFF)
 80099e6:	4b4f      	ldr	r3, [pc, #316]	; (8009b24 <encoderUpgrade+0x290>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b0b      	cmp	r3, #11
 80099ec:	d102      	bne.n	80099f4 <encoderUpgrade+0x160>
					{
						schedule2HourOffIncrease();
 80099ee:	f7fe f9bd 	bl	8007d6c <schedule2HourOffIncrease>
 80099f2:	e005      	b.n	8009a00 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_OFF)
 80099f4:	4b4b      	ldr	r3, [pc, #300]	; (8009b24 <encoderUpgrade+0x290>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b0d      	cmp	r3, #13
 80099fa:	d101      	bne.n	8009a00 <encoderUpgrade+0x16c>
					{
						schedule2MinuteOffIncrease();
 80099fc:	f7fe fa2a 	bl	8007e54 <schedule2MinuteOffIncrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	3301      	adds	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4a45      	ldr	r2, [pc, #276]	; (8009b20 <encoderUpgrade+0x28c>)
 8009a0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	f77f af77 	ble.w	8009902 <encoderUpgrade+0x6e>
					}
				}
				RotateUpgradeNumber = 0;
 8009a14:	4b42      	ldr	r3, [pc, #264]	; (8009b20 <encoderUpgrade+0x28c>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 8009a1a:	4b3f      	ldr	r3, [pc, #252]	; (8009b18 <encoderUpgrade+0x284>)
 8009a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a20:	4b3e      	ldr	r3, [pc, #248]	; (8009b1c <encoderUpgrade+0x288>)
 8009a22:	801a      	strh	r2, [r3, #0]
				}
				EncoderCounterPrevious = EncoderCounter;
			}
		}
	}
}
 8009a24:	e0b5      	b.n	8009b92 <encoderUpgrade+0x2fe>
			if(EncoderCounterPrevious - EncoderCounter >= 2) // if full rotate was done
 8009a26:	4b3d      	ldr	r3, [pc, #244]	; (8009b1c <encoderUpgrade+0x288>)
 8009a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	4b3a      	ldr	r3, [pc, #232]	; (8009b18 <encoderUpgrade+0x284>)
 8009a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	f340 80ab 	ble.w	8009b92 <encoderUpgrade+0x2fe>
				RotateUpgradeNumber = (EncoderCounterPrevious - EncoderCounter)/2;
 8009a3c:	4b37      	ldr	r3, [pc, #220]	; (8009b1c <encoderUpgrade+0x288>)
 8009a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a42:	461a      	mov	r2, r3
 8009a44:	4b34      	ldr	r3, [pc, #208]	; (8009b18 <encoderUpgrade+0x284>)
 8009a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	0fda      	lsrs	r2, r3, #31
 8009a4e:	4413      	add	r3, r2
 8009a50:	105b      	asrs	r3, r3, #1
 8009a52:	b21a      	sxth	r2, r3
 8009a54:	4b32      	ldr	r3, [pc, #200]	; (8009b20 <encoderUpgrade+0x28c>)
 8009a56:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009a58:	2301      	movs	r3, #1
 8009a5a:	73bb      	strb	r3, [r7, #14]
 8009a5c:	e08d      	b.n	8009b7a <encoderUpgrade+0x2e6>
					if(EncoderState == ENCODER_IDLE)
 8009a5e:	4b31      	ldr	r3, [pc, #196]	; (8009b24 <encoderUpgrade+0x290>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d120      	bne.n	8009aa8 <encoderUpgrade+0x214>
						if(State == MENUTFT_PARAMETERS)
 8009a66:	4b30      	ldr	r3, [pc, #192]	; (8009b28 <encoderUpgrade+0x294>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d106      	bne.n	8009a7c <encoderUpgrade+0x1e8>
							State = MENUTFT_LIGHTS;
 8009a6e:	4b2e      	ldr	r3, [pc, #184]	; (8009b28 <encoderUpgrade+0x294>)
 8009a70:	2205      	movs	r2, #5
 8009a72:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a74:	4b2d      	ldr	r3, [pc, #180]	; (8009b2c <encoderUpgrade+0x298>)
 8009a76:	2201      	movs	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	e07b      	b.n	8009b74 <encoderUpgrade+0x2e0>
						else if (State == MENUTFT_SWITCH)
 8009a7c:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <encoderUpgrade+0x294>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d106      	bne.n	8009a92 <encoderUpgrade+0x1fe>
							State = MENUTFT_PARAMETERS;
 8009a84:	4b28      	ldr	r3, [pc, #160]	; (8009b28 <encoderUpgrade+0x294>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a8a:	4b28      	ldr	r3, [pc, #160]	; (8009b2c <encoderUpgrade+0x298>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	e070      	b.n	8009b74 <encoderUpgrade+0x2e0>
						else if (State == MENUTFT_LIGHTS)
 8009a92:	4b25      	ldr	r3, [pc, #148]	; (8009b28 <encoderUpgrade+0x294>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d16c      	bne.n	8009b74 <encoderUpgrade+0x2e0>
							State = MENUTFT_SWITCH;
 8009a9a:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <encoderUpgrade+0x294>)
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009aa0:	4b22      	ldr	r3, [pc, #136]	; (8009b2c <encoderUpgrade+0x298>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e065      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 8009aa8:	4b1e      	ldr	r3, [pc, #120]	; (8009b24 <encoderUpgrade+0x290>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d102      	bne.n	8009ab6 <encoderUpgrade+0x222>
						OneMinuteDecrease();
 8009ab0:	f7ff fdf6 	bl	80096a0 <OneMinuteDecrease>
 8009ab4:	e05e      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009ab6:	4b1b      	ldr	r3, [pc, #108]	; (8009b24 <encoderUpgrade+0x290>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d102      	bne.n	8009ac4 <encoderUpgrade+0x230>
						OneHourDecrease();
 8009abe:	f7ff fe1b 	bl	80096f8 <OneHourDecrease>
 8009ac2:	e057      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009ac4:	4b17      	ldr	r3, [pc, #92]	; (8009b24 <encoderUpgrade+0x290>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d102      	bne.n	8009ad2 <encoderUpgrade+0x23e>
						OneDayDecrease();
 8009acc:	f7ff fe40 	bl	8009750 <OneDayDecrease>
 8009ad0:	e050      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_WS_LED)
 8009ad2:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <encoderUpgrade+0x290>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	d102      	bne.n	8009ae0 <encoderUpgrade+0x24c>
						WSONEdecreaseNumberOfLedOnTFT();
 8009ada:	f7ff f831 	bl	8008b40 <WSONEdecreaseNumberOfLedOnTFT>
 8009ade:	e049      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if(EncoderState == ENCODER_ACTIVITIES)
 8009ae0:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <encoderUpgrade+0x290>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d102      	bne.n	8009aee <encoderUpgrade+0x25a>
						TenSecondsActivitiesDurationDecrease();
 8009ae8:	f7ff fe9a 	bl	8009820 <TenSecondsActivitiesDurationDecrease>
 8009aec:	e042      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_ON)
 8009aee:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <encoderUpgrade+0x290>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b06      	cmp	r3, #6
 8009af4:	d102      	bne.n	8009afc <encoderUpgrade+0x268>
						schedule1HourOnDecrease();
 8009af6:	f7fd fcdd 	bl	80074b4 <schedule1HourOnDecrease>
 8009afa:	e03b      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_ON)
 8009afc:	4b09      	ldr	r3, [pc, #36]	; (8009b24 <encoderUpgrade+0x290>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d102      	bne.n	8009b0a <encoderUpgrade+0x276>
						schedule1MinuteOnDecrease();
 8009b04:	f7fd fd4a 	bl	800759c <schedule1MinuteOnDecrease>
 8009b08:	e034      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_OFF)
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <encoderUpgrade+0x290>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b07      	cmp	r3, #7
 8009b10:	d10e      	bne.n	8009b30 <encoderUpgrade+0x29c>
						schedule1HourOffDecrease();
 8009b12:	f7fd fdb7 	bl	8007684 <schedule1HourOffDecrease>
 8009b16:	e02d      	b.n	8009b74 <encoderUpgrade+0x2e0>
 8009b18:	2000089c 	.word	0x2000089c
 8009b1c:	2000089e 	.word	0x2000089e
 8009b20:	200008a0 	.word	0x200008a0
 8009b24:	200008e9 	.word	0x200008e9
 8009b28:	200008e8 	.word	0x200008e8
 8009b2c:	20000861 	.word	0x20000861
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_OFF)
 8009b30:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <encoderUpgrade+0x308>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	d102      	bne.n	8009b3e <encoderUpgrade+0x2aa>
						schedule1MinuteOffDecrease();
 8009b38:	f7fd fe18 	bl	800776c <schedule1MinuteOffDecrease>
 8009b3c:	e01a      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_ON)
 8009b3e:	4b17      	ldr	r3, [pc, #92]	; (8009b9c <encoderUpgrade+0x308>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b0a      	cmp	r3, #10
 8009b44:	d102      	bne.n	8009b4c <encoderUpgrade+0x2b8>
						schedule2HourOnDecrease();
 8009b46:	f7fe f863 	bl	8007c10 <schedule2HourOnDecrease>
 8009b4a:	e013      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_ON)
 8009b4c:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <encoderUpgrade+0x308>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b0c      	cmp	r3, #12
 8009b52:	d102      	bne.n	8009b5a <encoderUpgrade+0x2c6>
						schedule2MinuteOnDecrease();
 8009b54:	f7fe f8d0 	bl	8007cf8 <schedule2MinuteOnDecrease>
 8009b58:	e00c      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_OFF)
 8009b5a:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <encoderUpgrade+0x308>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b0b      	cmp	r3, #11
 8009b60:	d102      	bne.n	8009b68 <encoderUpgrade+0x2d4>
						schedule2HourOffDecrease();
 8009b62:	f7fe f93d 	bl	8007de0 <schedule2HourOffDecrease>
 8009b66:	e005      	b.n	8009b74 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_OFF)
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <encoderUpgrade+0x308>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b0d      	cmp	r3, #13
 8009b6e:	d101      	bne.n	8009b74 <encoderUpgrade+0x2e0>
						schedule2MinuteOffDecrease();
 8009b70:	f7fe f9aa 	bl	8007ec8 <schedule2MinuteOffDecrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	3301      	adds	r3, #1
 8009b78:	73bb      	strb	r3, [r7, #14]
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	4a08      	ldr	r2, [pc, #32]	; (8009ba0 <encoderUpgrade+0x30c>)
 8009b7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009b82:	4293      	cmp	r3, r2
 8009b84:	f77f af6b 	ble.w	8009a5e <encoderUpgrade+0x1ca>
				EncoderCounterPrevious = EncoderCounter;
 8009b88:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <encoderUpgrade+0x310>)
 8009b8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <encoderUpgrade+0x314>)
 8009b90:	801a      	strh	r2, [r3, #0]
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200008e9 	.word	0x200008e9
 8009ba0:	200008a0 	.word	0x200008a0
 8009ba4:	2000089c 	.word	0x2000089c
 8009ba8:	2000089e 	.word	0x2000089e

08009bac <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b094      	sub	sp, #80	; 0x50
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f9e3 	bl	800af86 <UARTDMA_GetLineFromReceiveBuffer>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d15f      	bne.n	8009c86 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4931      	ldr	r1, [pc, #196]	; (8009c90 <UART_ParseLine+0xe4>)
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f00a f9c3 	bl	8013f58 <strtok>
 8009bd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8009bd4:	492f      	ldr	r1, [pc, #188]	; (8009c94 <UART_ParseLine+0xe8>)
 8009bd6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bd8:	f7f6 fb02 	bl	80001e0 <strcmp>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8009be2:	f000 f869 	bl	8009cb8 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8009be6:	e04e      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8009be8:	492b      	ldr	r1, [pc, #172]	; (8009c98 <UART_ParseLine+0xec>)
 8009bea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bec:	f7f6 faf8 	bl	80001e0 <strcmp>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8009bf6:	f000 f8ad 	bl	8009d54 <UART_ParseAnswStatus>
}
 8009bfa:	e044      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8009bfc:	4927      	ldr	r1, [pc, #156]	; (8009c9c <UART_ParseLine+0xf0>)
 8009bfe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c00:	f7f6 faee 	bl	80001e0 <strcmp>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8009c0a:	f000 f8ab 	bl	8009d64 <UART_ParseAnswTemp>
}
 8009c0e:	e03a      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8009c10:	4923      	ldr	r1, [pc, #140]	; (8009ca0 <UART_ParseLine+0xf4>)
 8009c12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c14:	f7f6 fae4 	bl	80001e0 <strcmp>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8009c1e:	f000 f953 	bl	8009ec8 <UART_ParseAnswPres>
}
 8009c22:	e030      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8009c24:	491f      	ldr	r1, [pc, #124]	; (8009ca4 <UART_ParseLine+0xf8>)
 8009c26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c28:	f7f6 fada 	bl	80001e0 <strcmp>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8009c32:	f000 f9d7 	bl	8009fe4 <UART_ParseAnswChangeRelayState>
}
 8009c36:	e026      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8009c38:	491b      	ldr	r1, [pc, #108]	; (8009ca8 <UART_ParseLine+0xfc>)
 8009c3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c3c:	f7f6 fad0 	bl	80001e0 <strcmp>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8009c46:	f000 f9d4 	bl	8009ff2 <UART_ParseAnswChangeLightState>
}
 8009c4a:	e01c      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8009c4c:	4917      	ldr	r1, [pc, #92]	; (8009cac <UART_ParseLine+0x100>)
 8009c4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c50:	f7f6 fac6 	bl	80001e0 <strcmp>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8009c5a:	f000 f9d1 	bl	800a000 <UART_ParseAnswRelayStateStatus>
}
 8009c5e:	e012      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8009c60:	4913      	ldr	r1, [pc, #76]	; (8009cb0 <UART_ParseLine+0x104>)
 8009c62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c64:	f7f6 fabc 	bl	80001e0 <strcmp>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8009c6e:	f000 fa2d 	bl	800a0cc <UART_ParseAnswLightsStateStatus>
}
 8009c72:	e008      	b.n	8009c86 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8009c74:	490f      	ldr	r1, [pc, #60]	; (8009cb4 <UART_ParseLine+0x108>)
 8009c76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c78:	f7f6 fab2 	bl	80001e0 <strcmp>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8009c82:	f000 f96d 	bl	8009f60 <UART_ParseAnswDist>
}
 8009c86:	bf00      	nop
 8009c88:	3750      	adds	r7, #80	; 0x50
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	08017720 	.word	0x08017720
 8009c94:	08017724 	.word	0x08017724
 8009c98:	08017728 	.word	0x08017728
 8009c9c:	08017730 	.word	0x08017730
 8009ca0:	08017738 	.word	0x08017738
 8009ca4:	08017740 	.word	0x08017740
 8009ca8:	0801774c 	.word	0x0801774c
 8009cac:	08017758 	.word	0x08017758
 8009cb0:	08017764 	.word	0x08017764
 8009cb4:	08017770 	.word	0x08017770

08009cb8 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009cbe:	491f      	ldr	r1, [pc, #124]	; (8009d3c <UART_ParseLED+0x84>)
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f00a f949 	bl	8013f58 <strtok>
 8009cc6:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d031      	beq.n	8009d34 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b2f      	cmp	r3, #47	; 0x2f
 8009cd6:	d903      	bls.n	8009ce0 <UART_ParseLED+0x28>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b39      	cmp	r3, #57	; 0x39
 8009cde:	d904      	bls.n	8009cea <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8009ce0:	4917      	ldr	r1, [pc, #92]	; (8009d40 <UART_ParseLED+0x88>)
 8009ce2:	4818      	ldr	r0, [pc, #96]	; (8009d44 <UART_ParseLED+0x8c>)
 8009ce4:	f001 f980 	bl	800afe8 <UARTDMA_Print>
			return;	// And exit parsing
 8009ce8:	e024      	b.n	8009d34 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f008 fc29 	bl	8012542 <atoi>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d10a      	bne.n	8009d10 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d00:	4811      	ldr	r0, [pc, #68]	; (8009d48 <UART_ParseLED+0x90>)
 8009d02:	f002 fc05 	bl	800c510 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8009d06:	4911      	ldr	r1, [pc, #68]	; (8009d4c <UART_ParseLED+0x94>)
 8009d08:	480e      	ldr	r0, [pc, #56]	; (8009d44 <UART_ParseLED+0x8c>)
 8009d0a:	f001 f96d 	bl	800afe8 <UARTDMA_Print>
 8009d0e:	e011      	b.n	8009d34 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10a      	bne.n	8009d2c <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8009d16:	2201      	movs	r2, #1
 8009d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d1c:	480a      	ldr	r0, [pc, #40]	; (8009d48 <UART_ParseLED+0x90>)
 8009d1e:	f002 fbf7 	bl	800c510 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8009d22:	490b      	ldr	r1, [pc, #44]	; (8009d50 <UART_ParseLED+0x98>)
 8009d24:	4807      	ldr	r0, [pc, #28]	; (8009d44 <UART_ParseLED+0x8c>)
 8009d26:	f001 f95f 	bl	800afe8 <UARTDMA_Print>
 8009d2a:	e003      	b.n	8009d34 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <UART_ParseLED+0x88>)
 8009d2e:	4805      	ldr	r0, [pc, #20]	; (8009d44 <UART_ParseLED+0x8c>)
 8009d30:	f001 f95a 	bl	800afe8 <UARTDMA_Print>
		}
	}
}
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	08017778 	.word	0x08017778
 8009d40:	0801777c 	.word	0x0801777c
 8009d44:	20000488 	.word	0x20000488
 8009d48:	40020800 	.word	0x40020800
 8009d4c:	0801778c 	.word	0x0801778c
 8009d50:	08017798 	.word	0x08017798

08009d54 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8009d58:	bf00      	nop
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
	...

08009d64 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8009d6e:	494e      	ldr	r1, [pc, #312]	; (8009ea8 <UART_ParseAnswTemp+0x144>)
 8009d70:	2000      	movs	r0, #0
 8009d72:	f00a f8f1 	bl	8013f58 <strtok>
 8009d76:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 808f 	beq.w	8009ea0 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 8009d82:	68b8      	ldr	r0, [r7, #8]
 8009d84:	f008 fbdd 	bl	8012542 <atoi>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d010      	beq.n	8009db6 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009d94:	4944      	ldr	r1, [pc, #272]	; (8009ea8 <UART_ParseAnswTemp+0x144>)
 8009d96:	2000      	movs	r0, #0
 8009d98:	f00a f8de 	bl	8013f58 <strtok>
 8009d9c:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f008 fbcc 	bl	801253c <atof>
 8009da4:	ec53 2b10 	vmov	r2, r3, d0
 8009da8:	4610      	mov	r0, r2
 8009daa:	4619      	mov	r1, r3
 8009dac:	f7f6 ff34 	bl	8000c18 <__aeabi_d2f>
 8009db0:	4603      	mov	r3, r0
 8009db2:	4a3e      	ldr	r2, [pc, #248]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009db4:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <UART_ParseAnswTemp+0x14c>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d170      	bne.n	8009ea0 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d120      	bne.n	8009e06 <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8009dc4:	483b      	ldr	r0, [pc, #236]	; (8009eb4 <UART_ParseAnswTemp+0x150>)
 8009dc6:	f7f7 fdd7 	bl	8001978 <EF_SetFont>
						sprintf((char*)MsgParse, "Temp. zewn: %.2f`C ", CTemp);
 8009dca:	4b38      	ldr	r3, [pc, #224]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f6 fbd2 	bl	8000578 <__aeabi_f2d>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4937      	ldr	r1, [pc, #220]	; (8009eb8 <UART_ParseAnswTemp+0x154>)
 8009dda:	4838      	ldr	r0, [pc, #224]	; (8009ebc <UART_ParseAnswTemp+0x158>)
 8009ddc:	f009 fa68 	bl	80132b0 <siprintf>
						EF_PutString(MsgParse, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009de0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	2301      	movs	r3, #1
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	2250      	movs	r2, #80	; 0x50
 8009dee:	2114      	movs	r1, #20
 8009df0:	4832      	ldr	r0, [pc, #200]	; (8009ebc <UART_ParseAnswTemp+0x158>)
 8009df2:	f7f7 ffdb 	bl	8001dac <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8009df6:	4b2d      	ldr	r3, [pc, #180]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009df8:	edd3 7a00 	vldr	s15, [r3]
 8009dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8009e00:	f7f7 fa00 	bl	8001204 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8009e04:	e04c      	b.n	8009ea0 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d149      	bne.n	8009ea0 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8009e0c:	4b27      	ldr	r3, [pc, #156]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009e0e:	edd3 7a00 	vldr	s15, [r3]
 8009e12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1a:	d11d      	bne.n	8009e58 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8009e1c:	4b28      	ldr	r3, [pc, #160]	; (8009ec0 <UART_ParseAnswTemp+0x15c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a22      	ldr	r2, [pc, #136]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009e22:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009e24:	4823      	ldr	r0, [pc, #140]	; (8009eb4 <UART_ParseAnswTemp+0x150>)
 8009e26:	f7f7 fda7 	bl	8001978 <EF_SetFont>
							sprintf((char*)MsgParse, "Temp. wewn: %.2f`C ", CTemp);
 8009e2a:	4b20      	ldr	r3, [pc, #128]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7f6 fba2 	bl	8000578 <__aeabi_f2d>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4922      	ldr	r1, [pc, #136]	; (8009ec4 <UART_ParseAnswTemp+0x160>)
 8009e3a:	4820      	ldr	r0, [pc, #128]	; (8009ebc <UART_ParseAnswTemp+0x158>)
 8009e3c:	f009 fa38 	bl	80132b0 <siprintf>
							EF_PutString(MsgParse, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009e40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	2301      	movs	r3, #1
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	226e      	movs	r2, #110	; 0x6e
 8009e4e:	2114      	movs	r1, #20
 8009e50:	481a      	ldr	r0, [pc, #104]	; (8009ebc <UART_ParseAnswTemp+0x158>)
 8009e52:	f7f7 ffab 	bl	8001dac <EF_PutString>
	}
 8009e56:	e023      	b.n	8009ea0 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009e58:	4816      	ldr	r0, [pc, #88]	; (8009eb4 <UART_ParseAnswTemp+0x150>)
 8009e5a:	f7f7 fd8d 	bl	8001978 <EF_SetFont>
							sprintf((char*)MsgParse, "Temp. wewn: %.2f`C ", CTemp);
 8009e5e:	4b13      	ldr	r3, [pc, #76]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f6 fb88 	bl	8000578 <__aeabi_f2d>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4915      	ldr	r1, [pc, #84]	; (8009ec4 <UART_ParseAnswTemp+0x160>)
 8009e6e:	4813      	ldr	r0, [pc, #76]	; (8009ebc <UART_ParseAnswTemp+0x158>)
 8009e70:	f009 fa1e 	bl	80132b0 <siprintf>
							EF_PutString(MsgParse, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009e74:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	226e      	movs	r2, #110	; 0x6e
 8009e82:	2114      	movs	r1, #20
 8009e84:	480d      	ldr	r0, [pc, #52]	; (8009ebc <UART_ParseAnswTemp+0x158>)
 8009e86:	f7f7 ff91 	bl	8001dac <EF_PutString>
							LCTemp = CTemp;
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a0c      	ldr	r2, [pc, #48]	; (8009ec0 <UART_ParseAnswTemp+0x15c>)
 8009e90:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 8009e92:	4b06      	ldr	r3, [pc, #24]	; (8009eac <UART_ParseAnswTemp+0x148>)
 8009e94:	edd3 7a00 	vldr	s15, [r3]
 8009e98:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9c:	f7f7 f996 	bl	80011cc <ESP_SendCurrentTempInside>
	}
 8009ea0:	bf00      	nop
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	08017778 	.word	0x08017778
 8009eac:	20000930 	.word	0x20000930
 8009eb0:	200008e8 	.word	0x200008e8
 8009eb4:	0802abac 	.word	0x0802abac
 8009eb8:	080177a4 	.word	0x080177a4
 8009ebc:	2000094c 	.word	0x2000094c
 8009ec0:	20000934 	.word	0x20000934
 8009ec4:	080177b8 	.word	0x080177b8

08009ec8 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009ece:	491e      	ldr	r1, [pc, #120]	; (8009f48 <UART_ParseAnswPres+0x80>)
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	f00a f841 	bl	8013f58 <strtok>
 8009ed6:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d02f      	beq.n	8009f40 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f008 fb2b 	bl	801253c <atof>
 8009ee6:	ec53 2b10 	vmov	r2, r3, d0
 8009eea:	4610      	mov	r0, r2
 8009eec:	4619      	mov	r1, r3
 8009eee:	f7f6 fe93 	bl	8000c18 <__aeabi_d2f>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	4a15      	ldr	r2, [pc, #84]	; (8009f4c <UART_ParseAnswPres+0x84>)
 8009ef6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009ef8:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <UART_ParseAnswPres+0x88>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d11f      	bne.n	8009f40 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009f00:	4814      	ldr	r0, [pc, #80]	; (8009f54 <UART_ParseAnswPres+0x8c>)
 8009f02:	f7f7 fd39 	bl	8001978 <EF_SetFont>
			sprintf((char*)MsgParse, "Ciśnienie: %.1fhPa ", CPres);
 8009f06:	4b11      	ldr	r3, [pc, #68]	; (8009f4c <UART_ParseAnswPres+0x84>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f6 fb34 	bl	8000578 <__aeabi_f2d>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4910      	ldr	r1, [pc, #64]	; (8009f58 <UART_ParseAnswPres+0x90>)
 8009f16:	4811      	ldr	r0, [pc, #68]	; (8009f5c <UART_ParseAnswPres+0x94>)
 8009f18:	f009 f9ca 	bl	80132b0 <siprintf>
			EF_PutString(MsgParse, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009f1c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	2301      	movs	r3, #1
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	2300      	movs	r3, #0
 8009f28:	22aa      	movs	r2, #170	; 0xaa
 8009f2a:	2114      	movs	r1, #20
 8009f2c:	480b      	ldr	r0, [pc, #44]	; (8009f5c <UART_ParseAnswPres+0x94>)
 8009f2e:	f7f7 ff3d 	bl	8001dac <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 8009f32:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <UART_ParseAnswPres+0x84>)
 8009f34:	edd3 7a00 	vldr	s15, [r3]
 8009f38:	eeb0 0a67 	vmov.f32	s0, s15
 8009f3c:	f7f7 f97e 	bl	800123c <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	08017778 	.word	0x08017778
 8009f4c:	20000938 	.word	0x20000938
 8009f50:	200008e8 	.word	0x200008e8
 8009f54:	0802abac 	.word	0x0802abac
 8009f58:	080177cc 	.word	0x080177cc
 8009f5c:	2000094c 	.word	0x2000094c

08009f60 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009f66:	4919      	ldr	r1, [pc, #100]	; (8009fcc <UART_ParseAnswDist+0x6c>)
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f009 fff5 	bl	8013f58 <strtok>
 8009f6e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d024      	beq.n	8009fc2 <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f008 fae2 	bl	8012542 <atoi>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <UART_ParseAnswDist+0x70>)
 8009f84:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009f86:	4b13      	ldr	r3, [pc, #76]	; (8009fd4 <UART_ParseAnswDist+0x74>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d119      	bne.n	8009fc2 <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009f8e:	4812      	ldr	r0, [pc, #72]	; (8009fd8 <UART_ParseAnswDist+0x78>)
 8009f90:	f7f7 fcf2 	bl	8001978 <EF_SetFont>
			sprintf((char*)MsgParse, "-%ldmm  ", CDist2water);
 8009f94:	4b0e      	ldr	r3, [pc, #56]	; (8009fd0 <UART_ParseAnswDist+0x70>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4910      	ldr	r1, [pc, #64]	; (8009fdc <UART_ParseAnswDist+0x7c>)
 8009f9c:	4810      	ldr	r0, [pc, #64]	; (8009fe0 <UART_ParseAnswDist+0x80>)
 8009f9e:	f009 f987 	bl	80132b0 <siprintf>
			EF_PutString(MsgParse, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009fa2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	2300      	movs	r3, #0
 8009fae:	228c      	movs	r2, #140	; 0x8c
 8009fb0:	21ad      	movs	r1, #173	; 0xad
 8009fb2:	480b      	ldr	r0, [pc, #44]	; (8009fe0 <UART_ParseAnswDist+0x80>)
 8009fb4:	f7f7 fefa 	bl	8001dac <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <UART_ParseAnswDist+0x70>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f7 f959 	bl	8001274 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	08017778 	.word	0x08017778
 8009fd0:	20000940 	.word	0x20000940
 8009fd4:	200008e8 	.word	0x200008e8
 8009fd8:	0802abac 	.word	0x0802abac
 8009fdc:	080177e4 	.word	0x080177e4
 8009fe0:	2000094c 	.word	0x2000094c

08009fe4 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
	//TODO!
}
 8009fe8:	bf00      	nop
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	af00      	add	r7, sp, #0
	//TODO!
}
 8009ff6:	bf00      	nop
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800a006:	2300      	movs	r3, #0
 800a008:	71fb      	strb	r3, [r7, #7]
 800a00a:	e04a      	b.n	800a0a2 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800a00c:	4928      	ldr	r1, [pc, #160]	; (800a0b0 <UART_ParseAnswRelayStateStatus+0xb0>)
 800a00e:	2000      	movs	r0, #0
 800a010:	f009 ffa2 	bl	8013f58 <strtok>
 800a014:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d02f      	beq.n	800a07e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a01e:	2300      	movs	r3, #0
 800a020:	71bb      	strb	r3, [r7, #6]
 800a022:	e025      	b.n	800a070 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800a024:	79bb      	ldrb	r3, [r7, #6]
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	4413      	add	r3, r2
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b2f      	cmp	r3, #47	; 0x2f
 800a02e:	d905      	bls.n	800a03c <UART_ParseAnswRelayStateStatus+0x3c>
 800a030:	79bb      	ldrb	r3, [r7, #6]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4413      	add	r3, r2
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b39      	cmp	r3, #57	; 0x39
 800a03a:	d90e      	bls.n	800a05a <UART_ParseAnswRelayStateStatus+0x5a>
 800a03c:	79bb      	ldrb	r3, [r7, #6]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4413      	add	r3, r2
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b2e      	cmp	r3, #46	; 0x2e
 800a046:	d008      	beq.n	800a05a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(MessageP, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800a048:	491a      	ldr	r1, [pc, #104]	; (800a0b4 <UART_ParseAnswRelayStateStatus+0xb4>)
 800a04a:	481b      	ldr	r0, [pc, #108]	; (800a0b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a04c:	f009 f930 	bl	80132b0 <siprintf>
					UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a050:	4919      	ldr	r1, [pc, #100]	; (800a0b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a052:	481a      	ldr	r0, [pc, #104]	; (800a0bc <UART_ParseAnswRelayStateStatus+0xbc>)
 800a054:	f000 ffc8 	bl	800afe8 <UARTDMA_Print>
					return;	// And exit parsing
 800a058:	e026      	b.n	800a0a8 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f008 fa71 	bl	8012542 <atoi>
 800a060:	4602      	mov	r2, r0
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	b2d1      	uxtb	r1, r2
 800a066:	4a16      	ldr	r2, [pc, #88]	; (800a0c0 <UART_ParseAnswRelayStateStatus+0xc0>)
 800a068:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a06a:	79bb      	ldrb	r3, [r7, #6]
 800a06c:	3301      	adds	r3, #1
 800a06e:	71bb      	strb	r3, [r7, #6]
 800a070:	79bb      	ldrb	r3, [r7, #6]
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4413      	add	r3, r2
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1d3      	bne.n	800a024 <UART_ParseAnswRelayStateStatus+0x24>
 800a07c:	e008      	b.n	800a090 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(MessageP, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800a07e:	4911      	ldr	r1, [pc, #68]	; (800a0c4 <UART_ParseAnswRelayStateStatus+0xc4>)
 800a080:	480d      	ldr	r0, [pc, #52]	; (800a0b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a082:	f009 f915 	bl	80132b0 <siprintf>
			UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a086:	490c      	ldr	r1, [pc, #48]	; (800a0b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a088:	480c      	ldr	r0, [pc, #48]	; (800a0bc <UART_ParseAnswRelayStateStatus+0xbc>)
 800a08a:	f000 ffad 	bl	800afe8 <UARTDMA_Print>
			return;	// And exit parsing
 800a08e:	e00b      	b.n	800a0a8 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 800a090:	4b0d      	ldr	r3, [pc, #52]	; (800a0c8 <UART_ParseAnswRelayStateStatus+0xc8>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d101      	bne.n	800a09c <UART_ParseAnswRelayStateStatus+0x9c>
 800a098:	f7fb f8d2 	bl	8005240 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	71fb      	strb	r3, [r7, #7]
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d9b1      	bls.n	800a00c <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	08017778 	.word	0x08017778
 800a0b4:	080177f0 	.word	0x080177f0
 800a0b8:	200008ec 	.word	0x200008ec
 800a0bc:	20000488 	.word	0x20000488
 800a0c0:	20000944 	.word	0x20000944
 800a0c4:	08017804 	.word	0x08017804
 800a0c8:	200008e8 	.word	0x200008e8

0800a0cc <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	71fb      	strb	r3, [r7, #7]
 800a0d6:	e04a      	b.n	800a16e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800a0d8:	4928      	ldr	r1, [pc, #160]	; (800a17c <UART_ParseAnswLightsStateStatus+0xb0>)
 800a0da:	2000      	movs	r0, #0
 800a0dc:	f009 ff3c 	bl	8013f58 <strtok>
 800a0e0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d02f      	beq.n	800a14a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	71bb      	strb	r3, [r7, #6]
 800a0ee:	e025      	b.n	800a13c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800a0f0:	79bb      	ldrb	r3, [r7, #6]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b2f      	cmp	r3, #47	; 0x2f
 800a0fa:	d905      	bls.n	800a108 <UART_ParseAnswLightsStateStatus+0x3c>
 800a0fc:	79bb      	ldrb	r3, [r7, #6]
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	4413      	add	r3, r2
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b39      	cmp	r3, #57	; 0x39
 800a106:	d90e      	bls.n	800a126 <UART_ParseAnswLightsStateStatus+0x5a>
 800a108:	79bb      	ldrb	r3, [r7, #6]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	4413      	add	r3, r2
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b2e      	cmp	r3, #46	; 0x2e
 800a112:	d008      	beq.n	800a126 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(MessageP, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800a114:	491a      	ldr	r1, [pc, #104]	; (800a180 <UART_ParseAnswLightsStateStatus+0xb4>)
 800a116:	481b      	ldr	r0, [pc, #108]	; (800a184 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a118:	f009 f8ca 	bl	80132b0 <siprintf>
					UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a11c:	4919      	ldr	r1, [pc, #100]	; (800a184 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a11e:	481a      	ldr	r0, [pc, #104]	; (800a188 <UART_ParseAnswLightsStateStatus+0xbc>)
 800a120:	f000 ff62 	bl	800afe8 <UARTDMA_Print>
					return;	// And exit parsing
 800a124:	e026      	b.n	800a174 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800a126:	6838      	ldr	r0, [r7, #0]
 800a128:	f008 fa0b 	bl	8012542 <atoi>
 800a12c:	4602      	mov	r2, r0
 800a12e:	79fb      	ldrb	r3, [r7, #7]
 800a130:	b2d1      	uxtb	r1, r2
 800a132:	4a16      	ldr	r2, [pc, #88]	; (800a18c <UART_ParseAnswLightsStateStatus+0xc0>)
 800a134:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a136:	79bb      	ldrb	r3, [r7, #6]
 800a138:	3301      	adds	r3, #1
 800a13a:	71bb      	strb	r3, [r7, #6]
 800a13c:	79bb      	ldrb	r3, [r7, #6]
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	4413      	add	r3, r2
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1d3      	bne.n	800a0f0 <UART_ParseAnswLightsStateStatus+0x24>
 800a148:	e008      	b.n	800a15c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(MessageP, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800a14a:	4911      	ldr	r1, [pc, #68]	; (800a190 <UART_ParseAnswLightsStateStatus+0xc4>)
 800a14c:	480d      	ldr	r0, [pc, #52]	; (800a184 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a14e:	f009 f8af 	bl	80132b0 <siprintf>
			UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a152:	490c      	ldr	r1, [pc, #48]	; (800a184 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a154:	480c      	ldr	r0, [pc, #48]	; (800a188 <UART_ParseAnswLightsStateStatus+0xbc>)
 800a156:	f000 ff47 	bl	800afe8 <UARTDMA_Print>
			return;	// And exit parsing
 800a15a:	e00b      	b.n	800a174 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 800a15c:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <UART_ParseAnswLightsStateStatus+0xc8>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b05      	cmp	r3, #5
 800a162:	d101      	bne.n	800a168 <UART_ParseAnswLightsStateStatus+0x9c>
 800a164:	f7fb f974 	bl	8005450 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	3301      	adds	r3, #1
 800a16c:	71fb      	strb	r3, [r7, #7]
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	2b03      	cmp	r3, #3
 800a172:	d9b1      	bls.n	800a0d8 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	08017778 	.word	0x08017778
 800a180:	080177f0 	.word	0x080177f0
 800a184:	200008ec 	.word	0x200008ec
 800a188:	20000488 	.word	0x20000488
 800a18c:	20000948 	.word	0x20000948
 800a190:	08017804 	.word	0x08017804
 800a194:	200008e8 	.word	0x200008e8

0800a198 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	2b27      	cmp	r3, #39	; 0x27
 800a1aa:	f200 8129 	bhi.w	800a400 <SendComand+0x268>
 800a1ae:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <SendComand+0x1c>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a255 	.word	0x0800a255
 800a1b8:	0800a25f 	.word	0x0800a25f
 800a1bc:	0800a269 	.word	0x0800a269
 800a1c0:	0800a273 	.word	0x0800a273
 800a1c4:	0800a287 	.word	0x0800a287
 800a1c8:	0800a291 	.word	0x0800a291
 800a1cc:	0800a29b 	.word	0x0800a29b
 800a1d0:	0800a2a5 	.word	0x0800a2a5
 800a1d4:	0800a2af 	.word	0x0800a2af
 800a1d8:	0800a2b9 	.word	0x0800a2b9
 800a1dc:	0800a2c3 	.word	0x0800a2c3
 800a1e0:	0800a2cd 	.word	0x0800a2cd
 800a1e4:	0800a2d7 	.word	0x0800a2d7
 800a1e8:	0800a2ff 	.word	0x0800a2ff
 800a1ec:	0800a309 	.word	0x0800a309
 800a1f0:	0800a313 	.word	0x0800a313
 800a1f4:	0800a31d 	.word	0x0800a31d
 800a1f8:	0800a327 	.word	0x0800a327
 800a1fc:	0800a331 	.word	0x0800a331
 800a200:	0800a33b 	.word	0x0800a33b
 800a204:	0800a345 	.word	0x0800a345
 800a208:	0800a2f5 	.word	0x0800a2f5
 800a20c:	0800a363 	.word	0x0800a363
 800a210:	0800a2e1 	.word	0x0800a2e1
 800a214:	0800a2eb 	.word	0x0800a2eb
 800a218:	0800a34f 	.word	0x0800a34f
 800a21c:	0800a359 	.word	0x0800a359
 800a220:	0800a27d 	.word	0x0800a27d
 800a224:	0800a36d 	.word	0x0800a36d
 800a228:	0800a377 	.word	0x0800a377
 800a22c:	0800a381 	.word	0x0800a381
 800a230:	0800a38b 	.word	0x0800a38b
 800a234:	0800a395 	.word	0x0800a395
 800a238:	0800a39f 	.word	0x0800a39f
 800a23c:	0800a3a9 	.word	0x0800a3a9
 800a240:	0800a3b3 	.word	0x0800a3b3
 800a244:	0800a3bd 	.word	0x0800a3bd
 800a248:	0800a3c7 	.word	0x0800a3c7
 800a24c:	0800a3ed 	.word	0x0800a3ed
 800a250:	0800a3f7 	.word	0x0800a3f7
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 800a254:	496d      	ldr	r1, [pc, #436]	; (800a40c <SendComand+0x274>)
 800a256:	486e      	ldr	r0, [pc, #440]	; (800a410 <SendComand+0x278>)
 800a258:	f000 fec6 	bl	800afe8 <UARTDMA_Print>
			break;
 800a25c:	e0d0      	b.n	800a400 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 800a25e:	496d      	ldr	r1, [pc, #436]	; (800a414 <SendComand+0x27c>)
 800a260:	486b      	ldr	r0, [pc, #428]	; (800a410 <SendComand+0x278>)
 800a262:	f000 fec1 	bl	800afe8 <UARTDMA_Print>
			break;
 800a266:	e0cb      	b.n	800a400 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 800a268:	496b      	ldr	r1, [pc, #428]	; (800a418 <SendComand+0x280>)
 800a26a:	4869      	ldr	r0, [pc, #420]	; (800a410 <SendComand+0x278>)
 800a26c:	f000 febc 	bl	800afe8 <UARTDMA_Print>
			break;
 800a270:	e0c6      	b.n	800a400 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 800a272:	496a      	ldr	r1, [pc, #424]	; (800a41c <SendComand+0x284>)
 800a274:	4866      	ldr	r0, [pc, #408]	; (800a410 <SendComand+0x278>)
 800a276:	f000 feb7 	bl	800afe8 <UARTDMA_Print>
			break;
 800a27a:	e0c1      	b.n	800a400 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 800a27c:	4968      	ldr	r1, [pc, #416]	; (800a420 <SendComand+0x288>)
 800a27e:	4864      	ldr	r0, [pc, #400]	; (800a410 <SendComand+0x278>)
 800a280:	f000 feb2 	bl	800afe8 <UARTDMA_Print>
			break;
 800a284:	e0bc      	b.n	800a400 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 800a286:	4967      	ldr	r1, [pc, #412]	; (800a424 <SendComand+0x28c>)
 800a288:	4861      	ldr	r0, [pc, #388]	; (800a410 <SendComand+0x278>)
 800a28a:	f000 fead 	bl	800afe8 <UARTDMA_Print>
			break;
 800a28e:	e0b7      	b.n	800a400 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 800a290:	4965      	ldr	r1, [pc, #404]	; (800a428 <SendComand+0x290>)
 800a292:	485f      	ldr	r0, [pc, #380]	; (800a410 <SendComand+0x278>)
 800a294:	f000 fea8 	bl	800afe8 <UARTDMA_Print>
			break;
 800a298:	e0b2      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 800a29a:	4964      	ldr	r1, [pc, #400]	; (800a42c <SendComand+0x294>)
 800a29c:	485c      	ldr	r0, [pc, #368]	; (800a410 <SendComand+0x278>)
 800a29e:	f000 fea3 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2a2:	e0ad      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800a2a4:	4962      	ldr	r1, [pc, #392]	; (800a430 <SendComand+0x298>)
 800a2a6:	485a      	ldr	r0, [pc, #360]	; (800a410 <SendComand+0x278>)
 800a2a8:	f000 fe9e 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2ac:	e0a8      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 800a2ae:	4961      	ldr	r1, [pc, #388]	; (800a434 <SendComand+0x29c>)
 800a2b0:	4857      	ldr	r0, [pc, #348]	; (800a410 <SendComand+0x278>)
 800a2b2:	f000 fe99 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2b6:	e0a3      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 800a2b8:	495f      	ldr	r1, [pc, #380]	; (800a438 <SendComand+0x2a0>)
 800a2ba:	4855      	ldr	r0, [pc, #340]	; (800a410 <SendComand+0x278>)
 800a2bc:	f000 fe94 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2c0:	e09e      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800a2c2:	495e      	ldr	r1, [pc, #376]	; (800a43c <SendComand+0x2a4>)
 800a2c4:	4852      	ldr	r0, [pc, #328]	; (800a410 <SendComand+0x278>)
 800a2c6:	f000 fe8f 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2ca:	e099      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 800a2cc:	495c      	ldr	r1, [pc, #368]	; (800a440 <SendComand+0x2a8>)
 800a2ce:	4850      	ldr	r0, [pc, #320]	; (800a410 <SendComand+0x278>)
 800a2d0:	f000 fe8a 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2d4:	e094      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 800a2d6:	495b      	ldr	r1, [pc, #364]	; (800a444 <SendComand+0x2ac>)
 800a2d8:	484d      	ldr	r0, [pc, #308]	; (800a410 <SendComand+0x278>)
 800a2da:	f000 fe85 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2de:	e08f      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 800a2e0:	4959      	ldr	r1, [pc, #356]	; (800a448 <SendComand+0x2b0>)
 800a2e2:	484b      	ldr	r0, [pc, #300]	; (800a410 <SendComand+0x278>)
 800a2e4:	f000 fe80 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2e8:	e08a      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 800a2ea:	4958      	ldr	r1, [pc, #352]	; (800a44c <SendComand+0x2b4>)
 800a2ec:	4848      	ldr	r0, [pc, #288]	; (800a410 <SendComand+0x278>)
 800a2ee:	f000 fe7b 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2f2:	e085      	b.n	800a400 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 800a2f4:	4956      	ldr	r1, [pc, #344]	; (800a450 <SendComand+0x2b8>)
 800a2f6:	4846      	ldr	r0, [pc, #280]	; (800a410 <SendComand+0x278>)
 800a2f8:	f000 fe76 	bl	800afe8 <UARTDMA_Print>
			break;
 800a2fc:	e080      	b.n	800a400 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 800a2fe:	4955      	ldr	r1, [pc, #340]	; (800a454 <SendComand+0x2bc>)
 800a300:	4843      	ldr	r0, [pc, #268]	; (800a410 <SendComand+0x278>)
 800a302:	f000 fe71 	bl	800afe8 <UARTDMA_Print>
			break;
 800a306:	e07b      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 800a308:	4953      	ldr	r1, [pc, #332]	; (800a458 <SendComand+0x2c0>)
 800a30a:	4841      	ldr	r0, [pc, #260]	; (800a410 <SendComand+0x278>)
 800a30c:	f000 fe6c 	bl	800afe8 <UARTDMA_Print>
			break;
 800a310:	e076      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 800a312:	4952      	ldr	r1, [pc, #328]	; (800a45c <SendComand+0x2c4>)
 800a314:	483e      	ldr	r0, [pc, #248]	; (800a410 <SendComand+0x278>)
 800a316:	f000 fe67 	bl	800afe8 <UARTDMA_Print>
			break;
 800a31a:	e071      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 800a31c:	4950      	ldr	r1, [pc, #320]	; (800a460 <SendComand+0x2c8>)
 800a31e:	483c      	ldr	r0, [pc, #240]	; (800a410 <SendComand+0x278>)
 800a320:	f000 fe62 	bl	800afe8 <UARTDMA_Print>
			break;
 800a324:	e06c      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 800a326:	494f      	ldr	r1, [pc, #316]	; (800a464 <SendComand+0x2cc>)
 800a328:	4839      	ldr	r0, [pc, #228]	; (800a410 <SendComand+0x278>)
 800a32a:	f000 fe5d 	bl	800afe8 <UARTDMA_Print>
			break;
 800a32e:	e067      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 800a330:	494d      	ldr	r1, [pc, #308]	; (800a468 <SendComand+0x2d0>)
 800a332:	4837      	ldr	r0, [pc, #220]	; (800a410 <SendComand+0x278>)
 800a334:	f000 fe58 	bl	800afe8 <UARTDMA_Print>
			break;
 800a338:	e062      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 800a33a:	494c      	ldr	r1, [pc, #304]	; (800a46c <SendComand+0x2d4>)
 800a33c:	4834      	ldr	r0, [pc, #208]	; (800a410 <SendComand+0x278>)
 800a33e:	f000 fe53 	bl	800afe8 <UARTDMA_Print>
			break;
 800a342:	e05d      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 800a344:	494a      	ldr	r1, [pc, #296]	; (800a470 <SendComand+0x2d8>)
 800a346:	4832      	ldr	r0, [pc, #200]	; (800a410 <SendComand+0x278>)
 800a348:	f000 fe4e 	bl	800afe8 <UARTDMA_Print>
			break;
 800a34c:	e058      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 800a34e:	4949      	ldr	r1, [pc, #292]	; (800a474 <SendComand+0x2dc>)
 800a350:	482f      	ldr	r0, [pc, #188]	; (800a410 <SendComand+0x278>)
 800a352:	f000 fe49 	bl	800afe8 <UARTDMA_Print>
			break;
 800a356:	e053      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 800a358:	4947      	ldr	r1, [pc, #284]	; (800a478 <SendComand+0x2e0>)
 800a35a:	482d      	ldr	r0, [pc, #180]	; (800a410 <SendComand+0x278>)
 800a35c:	f000 fe44 	bl	800afe8 <UARTDMA_Print>
			break;
 800a360:	e04e      	b.n	800a400 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 800a362:	4946      	ldr	r1, [pc, #280]	; (800a47c <SendComand+0x2e4>)
 800a364:	482a      	ldr	r0, [pc, #168]	; (800a410 <SendComand+0x278>)
 800a366:	f000 fe3f 	bl	800afe8 <UARTDMA_Print>
			break;
 800a36a:	e049      	b.n	800a400 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 800a36c:	4944      	ldr	r1, [pc, #272]	; (800a480 <SendComand+0x2e8>)
 800a36e:	4828      	ldr	r0, [pc, #160]	; (800a410 <SendComand+0x278>)
 800a370:	f000 fe3a 	bl	800afe8 <UARTDMA_Print>
			break;
 800a374:	e044      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 800a376:	4943      	ldr	r1, [pc, #268]	; (800a484 <SendComand+0x2ec>)
 800a378:	4825      	ldr	r0, [pc, #148]	; (800a410 <SendComand+0x278>)
 800a37a:	f000 fe35 	bl	800afe8 <UARTDMA_Print>
			break;
 800a37e:	e03f      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 800a380:	4941      	ldr	r1, [pc, #260]	; (800a488 <SendComand+0x2f0>)
 800a382:	4823      	ldr	r0, [pc, #140]	; (800a410 <SendComand+0x278>)
 800a384:	f000 fe30 	bl	800afe8 <UARTDMA_Print>
			break;
 800a388:	e03a      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 800a38a:	4940      	ldr	r1, [pc, #256]	; (800a48c <SendComand+0x2f4>)
 800a38c:	4820      	ldr	r0, [pc, #128]	; (800a410 <SendComand+0x278>)
 800a38e:	f000 fe2b 	bl	800afe8 <UARTDMA_Print>
			break;
 800a392:	e035      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 800a394:	493e      	ldr	r1, [pc, #248]	; (800a490 <SendComand+0x2f8>)
 800a396:	481e      	ldr	r0, [pc, #120]	; (800a410 <SendComand+0x278>)
 800a398:	f000 fe26 	bl	800afe8 <UARTDMA_Print>
			break;
 800a39c:	e030      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 800a39e:	493d      	ldr	r1, [pc, #244]	; (800a494 <SendComand+0x2fc>)
 800a3a0:	481b      	ldr	r0, [pc, #108]	; (800a410 <SendComand+0x278>)
 800a3a2:	f000 fe21 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3a6:	e02b      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 800a3a8:	493b      	ldr	r1, [pc, #236]	; (800a498 <SendComand+0x300>)
 800a3aa:	4819      	ldr	r0, [pc, #100]	; (800a410 <SendComand+0x278>)
 800a3ac:	f000 fe1c 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3b0:	e026      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 800a3b2:	493a      	ldr	r1, [pc, #232]	; (800a49c <SendComand+0x304>)
 800a3b4:	4816      	ldr	r0, [pc, #88]	; (800a410 <SendComand+0x278>)
 800a3b6:	f000 fe17 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3ba:	e021      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 800a3bc:	4938      	ldr	r1, [pc, #224]	; (800a4a0 <SendComand+0x308>)
 800a3be:	4814      	ldr	r0, [pc, #80]	; (800a410 <SendComand+0x278>)
 800a3c0:	f000 fe12 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3c4:	e01c      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 800a3c6:	4b37      	ldr	r3, [pc, #220]	; (800a4a4 <SendComand+0x30c>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b08      	cmp	r3, #8
 800a3cc:	d802      	bhi.n	800a3d4 <SendComand+0x23c>
 800a3ce:	4b35      	ldr	r3, [pc, #212]	; (800a4a4 <SendComand+0x30c>)
 800a3d0:	2209      	movs	r2, #9
 800a3d2:	701a      	strb	r2, [r3, #0]
			sprintf(MessageP, "CHLIGHT=9,%d\n", NrOfLeds);
 800a3d4:	4b33      	ldr	r3, [pc, #204]	; (800a4a4 <SendComand+0x30c>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4933      	ldr	r1, [pc, #204]	; (800a4a8 <SendComand+0x310>)
 800a3dc:	4833      	ldr	r0, [pc, #204]	; (800a4ac <SendComand+0x314>)
 800a3de:	f008 ff67 	bl	80132b0 <siprintf>
			UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a3e2:	4932      	ldr	r1, [pc, #200]	; (800a4ac <SendComand+0x314>)
 800a3e4:	480a      	ldr	r0, [pc, #40]	; (800a410 <SendComand+0x278>)
 800a3e6:	f000 fdff 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3ea:	e009      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 800a3ec:	4930      	ldr	r1, [pc, #192]	; (800a4b0 <SendComand+0x318>)
 800a3ee:	4808      	ldr	r0, [pc, #32]	; (800a410 <SendComand+0x278>)
 800a3f0:	f000 fdfa 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3f4:	e004      	b.n	800a400 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 800a3f6:	492f      	ldr	r1, [pc, #188]	; (800a4b4 <SendComand+0x31c>)
 800a3f8:	4805      	ldr	r0, [pc, #20]	; (800a410 <SendComand+0x278>)
 800a3fa:	f000 fdf5 	bl	800afe8 <UARTDMA_Print>
			break;
 800a3fe:	bf00      	nop
		}
	return 1;
 800a400:	2301      	movs	r3, #1
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	08017820 	.word	0x08017820
 800a410:	20000488 	.word	0x20000488
 800a414:	08017828 	.word	0x08017828
 800a418:	08017830 	.word	0x08017830
 800a41c:	0801783c 	.word	0x0801783c
 800a420:	08017844 	.word	0x08017844
 800a424:	0801784c 	.word	0x0801784c
 800a428:	08017854 	.word	0x08017854
 800a42c:	08017864 	.word	0x08017864
 800a430:	08017874 	.word	0x08017874
 800a434:	08017884 	.word	0x08017884
 800a438:	08017894 	.word	0x08017894
 800a43c:	080178a4 	.word	0x080178a4
 800a440:	080178b4 	.word	0x080178b4
 800a444:	080178c4 	.word	0x080178c4
 800a448:	080178d4 	.word	0x080178d4
 800a44c:	080178e4 	.word	0x080178e4
 800a450:	080178f4 	.word	0x080178f4
 800a454:	08017904 	.word	0x08017904
 800a458:	08017914 	.word	0x08017914
 800a45c:	08017924 	.word	0x08017924
 800a460:	08017934 	.word	0x08017934
 800a464:	08017944 	.word	0x08017944
 800a468:	08017954 	.word	0x08017954
 800a46c:	08017964 	.word	0x08017964
 800a470:	08017974 	.word	0x08017974
 800a474:	08017984 	.word	0x08017984
 800a478:	08017994 	.word	0x08017994
 800a47c:	080179a4 	.word	0x080179a4
 800a480:	080179b4 	.word	0x080179b4
 800a484:	080179c4 	.word	0x080179c4
 800a488:	080179d4 	.word	0x080179d4
 800a48c:	080179e4 	.word	0x080179e4
 800a490:	080179f4 	.word	0x080179f4
 800a494:	08017a04 	.word	0x08017a04
 800a498:	08017a14 	.word	0x08017a14
 800a49c:	08017a24 	.word	0x08017a24
 800a4a0:	08017a34 	.word	0x08017a34
 800a4a4:	20000034 	.word	0x20000034
 800a4a8:	08017a44 	.word	0x08017a44
 800a4ac:	200008ec 	.word	0x200008ec
 800a4b0:	08017a54 	.word	0x08017a54
 800a4b4:	08017a64 	.word	0x08017a64

0800a4b8 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d101      	bne.n	800a4d2 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e015      	b.n	800a4fe <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	785b      	ldrb	r3, [r3, #1]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	789a      	ldrb	r2, [r3, #2]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	785b      	ldrb	r3, [r3, #1]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	425a      	negs	r2, r3
 800a4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4f2:	bf58      	it	pl
 800a4f4:	4253      	negpl	r3, r2
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b085      	sub	sp, #20
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	425a      	negs	r2, r3
 800a51e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a522:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a526:	bf58      	it	pl
 800a528:	4253      	negpl	r3, r2
 800a52a:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	7bfa      	ldrb	r2, [r7, #15]
 800a532:	429a      	cmp	r2, r3
 800a534:	d101      	bne.n	800a53a <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 800a536:	2301      	movs	r3, #1
 800a538:	e00a      	b.n	800a550 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4413      	add	r3, r2
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7bfa      	ldrb	r2, [r7, #15]
 800a54c:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a560:	4b17      	ldr	r3, [pc, #92]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a562:	4a18      	ldr	r2, [pc, #96]	; (800a5c4 <MX_SPI1_Init+0x68>)
 800a564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a566:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a56c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a56e:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a570:	2200      	movs	r2, #0
 800a572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a574:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a576:	2200      	movs	r2, #0
 800a578:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a580:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a582:	2200      	movs	r2, #0
 800a584:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a586:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a58c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a58e:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a590:	2210      	movs	r2, #16
 800a592:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a594:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a596:	2200      	movs	r2, #0
 800a598:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a59a:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5a0:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a5a6:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a5ac:	4804      	ldr	r0, [pc, #16]	; (800a5c0 <MX_SPI1_Init+0x64>)
 800a5ae:	f005 fd57 	bl	8010060 <HAL_SPI_Init>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a5b8:	f7fb fe7e 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a5bc:	bf00      	nop
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	2000098c 	.word	0x2000098c
 800a5c4:	40013000 	.word	0x40013000

0800a5c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5ce:	4a18      	ldr	r2, [pc, #96]	; (800a630 <MX_SPI3_Init+0x68>)
 800a5d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a5d2:	4b16      	ldr	r3, [pc, #88]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a5da:	4b14      	ldr	r3, [pc, #80]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a5e0:	4b12      	ldr	r3, [pc, #72]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5e6:	4b11      	ldr	r3, [pc, #68]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a5ec:	4b0f      	ldr	r3, [pc, #60]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a5fa:	4b0c      	ldr	r3, [pc, #48]	; (800a62c <MX_SPI3_Init+0x64>)
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <MX_SPI3_Init+0x64>)
 800a602:	2200      	movs	r2, #0
 800a604:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a606:	4b09      	ldr	r3, [pc, #36]	; (800a62c <MX_SPI3_Init+0x64>)
 800a608:	2200      	movs	r2, #0
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a60c:	4b07      	ldr	r3, [pc, #28]	; (800a62c <MX_SPI3_Init+0x64>)
 800a60e:	2200      	movs	r2, #0
 800a610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a612:	4b06      	ldr	r3, [pc, #24]	; (800a62c <MX_SPI3_Init+0x64>)
 800a614:	220a      	movs	r2, #10
 800a616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a618:	4804      	ldr	r0, [pc, #16]	; (800a62c <MX_SPI3_Init+0x64>)
 800a61a:	f005 fd21 	bl	8010060 <HAL_SPI_Init>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a624:	f7fb fe48 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a628:	bf00      	nop
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	200009e4 	.word	0x200009e4
 800a630:	40003c00 	.word	0x40003c00

0800a634 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800a638:	4b17      	ldr	r3, [pc, #92]	; (800a698 <MX_SPI5_Init+0x64>)
 800a63a:	4a18      	ldr	r2, [pc, #96]	; (800a69c <MX_SPI5_Init+0x68>)
 800a63c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a63e:	4b16      	ldr	r3, [pc, #88]	; (800a698 <MX_SPI5_Init+0x64>)
 800a640:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a644:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a646:	4b14      	ldr	r3, [pc, #80]	; (800a698 <MX_SPI5_Init+0x64>)
 800a648:	2200      	movs	r2, #0
 800a64a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a64c:	4b12      	ldr	r3, [pc, #72]	; (800a698 <MX_SPI5_Init+0x64>)
 800a64e:	2200      	movs	r2, #0
 800a650:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a652:	4b11      	ldr	r3, [pc, #68]	; (800a698 <MX_SPI5_Init+0x64>)
 800a654:	2200      	movs	r2, #0
 800a656:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a658:	4b0f      	ldr	r3, [pc, #60]	; (800a698 <MX_SPI5_Init+0x64>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a65e:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <MX_SPI5_Init+0x64>)
 800a660:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a664:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a666:	4b0c      	ldr	r3, [pc, #48]	; (800a698 <MX_SPI5_Init+0x64>)
 800a668:	2200      	movs	r2, #0
 800a66a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a66c:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <MX_SPI5_Init+0x64>)
 800a66e:	2200      	movs	r2, #0
 800a670:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <MX_SPI5_Init+0x64>)
 800a674:	2200      	movs	r2, #0
 800a676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a678:	4b07      	ldr	r3, [pc, #28]	; (800a698 <MX_SPI5_Init+0x64>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800a67e:	4b06      	ldr	r3, [pc, #24]	; (800a698 <MX_SPI5_Init+0x64>)
 800a680:	220a      	movs	r2, #10
 800a682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a684:	4804      	ldr	r0, [pc, #16]	; (800a698 <MX_SPI5_Init+0x64>)
 800a686:	f005 fceb 	bl	8010060 <HAL_SPI_Init>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800a690:	f7fb fe12 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800a694:	bf00      	nop
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000a3c 	.word	0x20000a3c
 800a69c:	40015000 	.word	0x40015000

0800a6a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08e      	sub	sp, #56	; 0x38
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	609a      	str	r2, [r3, #8]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a5a      	ldr	r2, [pc, #360]	; (800a828 <HAL_SPI_MspInit+0x188>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d12c      	bne.n	800a71c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	4b59      	ldr	r3, [pc, #356]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ca:	4a58      	ldr	r2, [pc, #352]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a6cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6d0:	6453      	str	r3, [r2, #68]	; 0x44
 800a6d2:	4b56      	ldr	r3, [pc, #344]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6da:	623b      	str	r3, [r7, #32]
 800a6dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6de:	2300      	movs	r3, #0
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	4b52      	ldr	r3, [pc, #328]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e6:	4a51      	ldr	r2, [pc, #324]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a6e8:	f043 0301 	orr.w	r3, r3, #1
 800a6ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ee:	4b4f      	ldr	r3, [pc, #316]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	61fb      	str	r3, [r7, #28]
 800a6f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 800a6fa:	23e0      	movs	r3, #224	; 0xe0
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6fe:	2302      	movs	r3, #2
 800a700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a702:	2300      	movs	r3, #0
 800a704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a706:	2303      	movs	r3, #3
 800a708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a70a:	2305      	movs	r3, #5
 800a70c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a70e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a712:	4619      	mov	r1, r3
 800a714:	4846      	ldr	r0, [pc, #280]	; (800a830 <HAL_SPI_MspInit+0x190>)
 800a716:	f001 fd5f 	bl	800c1d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800a71a:	e081      	b.n	800a820 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a44      	ldr	r2, [pc, #272]	; (800a834 <HAL_SPI_MspInit+0x194>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d12c      	bne.n	800a780 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a726:	2300      	movs	r3, #0
 800a728:	61bb      	str	r3, [r7, #24]
 800a72a:	4b40      	ldr	r3, [pc, #256]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	4a3f      	ldr	r2, [pc, #252]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a734:	6413      	str	r3, [r2, #64]	; 0x40
 800a736:	4b3d      	ldr	r3, [pc, #244]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a73e:	61bb      	str	r3, [r7, #24]
 800a740:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	4b39      	ldr	r3, [pc, #228]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	4a38      	ldr	r2, [pc, #224]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a74c:	f043 0302 	orr.w	r3, r3, #2
 800a750:	6313      	str	r3, [r2, #48]	; 0x30
 800a752:	4b36      	ldr	r3, [pc, #216]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 800a75e:	2338      	movs	r3, #56	; 0x38
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a762:	2302      	movs	r3, #2
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a766:	2300      	movs	r3, #0
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a76a:	2303      	movs	r3, #3
 800a76c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a76e:	2306      	movs	r3, #6
 800a770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a776:	4619      	mov	r1, r3
 800a778:	482f      	ldr	r0, [pc, #188]	; (800a838 <HAL_SPI_MspInit+0x198>)
 800a77a:	f001 fd2d 	bl	800c1d8 <HAL_GPIO_Init>
}
 800a77e:	e04f      	b.n	800a820 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a2d      	ldr	r2, [pc, #180]	; (800a83c <HAL_SPI_MspInit+0x19c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d14a      	bne.n	800a820 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	4b27      	ldr	r3, [pc, #156]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a792:	4a26      	ldr	r2, [pc, #152]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a798:	6453      	str	r3, [r2, #68]	; 0x44
 800a79a:	4b24      	ldr	r3, [pc, #144]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a79e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	4b20      	ldr	r3, [pc, #128]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ae:	4a1f      	ldr	r2, [pc, #124]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a7b0:	f043 0302 	orr.w	r3, r3, #2
 800a7b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a7b6:	4b1d      	ldr	r3, [pc, #116]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60bb      	str	r3, [r7, #8]
 800a7c6:	4b19      	ldr	r3, [pc, #100]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	4a18      	ldr	r2, [pc, #96]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a7cc:	f043 0301 	orr.w	r3, r3, #1
 800a7d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7d2:	4b16      	ldr	r3, [pc, #88]	; (800a82c <HAL_SPI_MspInit+0x18c>)
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	60bb      	str	r3, [r7, #8]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a7ee:	2306      	movs	r3, #6
 800a7f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 800a7f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	480f      	ldr	r0, [pc, #60]	; (800a838 <HAL_SPI_MspInit+0x198>)
 800a7fa:	f001 fced 	bl	800c1d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 800a7fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a804:	2302      	movs	r3, #2
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a80c:	2303      	movs	r3, #3
 800a80e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a810:	2306      	movs	r3, #6
 800a812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a818:	4619      	mov	r1, r3
 800a81a:	4805      	ldr	r0, [pc, #20]	; (800a830 <HAL_SPI_MspInit+0x190>)
 800a81c:	f001 fcdc 	bl	800c1d8 <HAL_GPIO_Init>
}
 800a820:	bf00      	nop
 800a822:	3738      	adds	r7, #56	; 0x38
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40013000 	.word	0x40013000
 800a82c:	40023800 	.word	0x40023800
 800a830:	40020000 	.word	0x40020000
 800a834:	40003c00 	.word	0x40003c00
 800a838:	40020400 	.word	0x40020400
 800a83c:	40015000 	.word	0x40015000

0800a840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a846:	2300      	movs	r3, #0
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	4b10      	ldr	r3, [pc, #64]	; (800a88c <HAL_MspInit+0x4c>)
 800a84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84e:	4a0f      	ldr	r2, [pc, #60]	; (800a88c <HAL_MspInit+0x4c>)
 800a850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a854:	6453      	str	r3, [r2, #68]	; 0x44
 800a856:	4b0d      	ldr	r3, [pc, #52]	; (800a88c <HAL_MspInit+0x4c>)
 800a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a85e:	607b      	str	r3, [r7, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a862:	2300      	movs	r3, #0
 800a864:	603b      	str	r3, [r7, #0]
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <HAL_MspInit+0x4c>)
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	4a08      	ldr	r2, [pc, #32]	; (800a88c <HAL_MspInit+0x4c>)
 800a86c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a870:	6413      	str	r3, [r2, #64]	; 0x40
 800a872:	4b06      	ldr	r3, [pc, #24]	; (800a88c <HAL_MspInit+0x4c>)
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	40023800 	.word	0x40023800

0800a890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a894:	e7fe      	b.n	800a894 <NMI_Handler+0x4>

0800a896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a896:	b480      	push	{r7}
 800a898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a89a:	e7fe      	b.n	800a89a <HardFault_Handler+0x4>

0800a89c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a8a0:	e7fe      	b.n	800a8a0 <MemManage_Handler+0x4>

0800a8a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a8a6:	e7fe      	b.n	800a8a6 <BusFault_Handler+0x4>

0800a8a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a8ac:	e7fe      	b.n	800a8ac <UsageFault_Handler+0x4>

0800a8ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a8b2:	bf00      	nop
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a8c0:	bf00      	nop
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a8dc:	f000 fe88 	bl	800b5f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a8e0:	bf00      	nop
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 800a8e8:	2004      	movs	r0, #4
 800a8ea:	f001 fe45 	bl	800c578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a8ee:	bf00      	nop
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 800a8f6:	2010      	movs	r0, #16
 800a8f8:	f001 fe3e 	bl	800c578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a8fc:	bf00      	nop
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a904:	4802      	ldr	r0, [pc, #8]	; (800a910 <DMA1_Stream0_IRQHandler+0x10>)
 800a906:	f001 f9ef 	bl	800bce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800a90a:	bf00      	nop
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	200003c8 	.word	0x200003c8

0800a914 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a918:	4802      	ldr	r0, [pc, #8]	; (800a924 <DMA1_Stream1_IRQHandler+0x10>)
 800a91a:	f001 f9e5 	bl	800bce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a91e:	bf00      	nop
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000428 	.word	0x20000428

0800a928 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800a92c:	4802      	ldr	r0, [pc, #8]	; (800a938 <DMA1_Stream5_IRQHandler+0x10>)
 800a92e:	f000 faa5 	bl	800ae7c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a932:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000488 	.word	0x20000488

0800a93c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a940:	4802      	ldr	r0, [pc, #8]	; (800a94c <DMA1_Stream6_IRQHandler+0x10>)
 800a942:	f001 f9d1 	bl	800bce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a946:	bf00      	nop
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000d18 	.word	0x20000d18

0800a950 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800a954:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a958:	f001 fe0e 	bl	800c578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a95c:	bf00      	nop
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800a964:	4802      	ldr	r0, [pc, #8]	; (800a970 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a966:	f006 f9a4 	bl	8010cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a96a:	bf00      	nop
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20000ae0 	.word	0x20000ae0

0800a974 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800a978:	4802      	ldr	r0, [pc, #8]	; (800a984 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800a97a:	f006 f99a 	bl	8010cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a97e:	bf00      	nop
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000b28 	.word	0x20000b28

0800a988 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a98c:	4802      	ldr	r0, [pc, #8]	; (800a998 <I2C1_EV_IRQHandler+0x10>)
 800a98e:	f002 fd93 	bl	800d4b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a992:	bf00      	nop
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000320 	.word	0x20000320

0800a99c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800a9a0:	4802      	ldr	r0, [pc, #8]	; (800a9ac <I2C1_ER_IRQHandler+0x10>)
 800a9a2:	f002 fefa 	bl	800d79a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800a9a6:	bf00      	nop
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20000320 	.word	0x20000320

0800a9b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 800a9b4:	4803      	ldr	r0, [pc, #12]	; (800a9c4 <USART1_IRQHandler+0x14>)
 800a9b6:	f000 fa37 	bl	800ae28 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a9ba:	4803      	ldr	r0, [pc, #12]	; (800a9c8 <USART1_IRQHandler+0x18>)
 800a9bc:	f006 fcce 	bl	801135c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a9c0:	bf00      	nop
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20000654 	.word	0x20000654
 800a9c8:	20000b70 	.word	0x20000b70

0800a9cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800a9d0:	4803      	ldr	r0, [pc, #12]	; (800a9e0 <USART2_IRQHandler+0x14>)
 800a9d2:	f000 fa29 	bl	800ae28 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a9d6:	4803      	ldr	r0, [pc, #12]	; (800a9e4 <USART2_IRQHandler+0x18>)
 800a9d8:	f006 fcc0 	bl	801135c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a9dc:	bf00      	nop
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	20000488 	.word	0x20000488
 800a9e4:	20000bb4 	.word	0x20000bb4

0800a9e8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a9ec:	4802      	ldr	r0, [pc, #8]	; (800a9f8 <SPI3_IRQHandler+0x10>)
 800a9ee:	f005 fd63 	bl	80104b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a9f2:	bf00      	nop
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	200009e4 	.word	0x200009e4

0800a9fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 800aa00:	4802      	ldr	r0, [pc, #8]	; (800aa0c <DMA2_Stream2_IRQHandler+0x10>)
 800aa02:	f000 fa3b 	bl	800ae7c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800aa06:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000654 	.word	0x20000654

0800aa10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800aa14:	4802      	ldr	r0, [pc, #8]	; (800aa20 <DMA2_Stream7_IRQHandler+0x10>)
 800aa16:	f001 f967 	bl	800bce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800aa1a:	bf00      	nop
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000c58 	.word	0x20000c58

0800aa24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
	return 1;
 800aa28:	2301      	movs	r3, #1
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <_kill>:

int _kill(int pid, int sig)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aa3e:	f007 fd85 	bl	801254c <__errno>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2216      	movs	r2, #22
 800aa46:	601a      	str	r2, [r3, #0]
	return -1;
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <_exit>:

void _exit (int status)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aa5c:	f04f 31ff 	mov.w	r1, #4294967295
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7ff ffe7 	bl	800aa34 <_kill>
	while (1) {}		/* Make sure we hang here */
 800aa66:	e7fe      	b.n	800aa66 <_exit+0x12>

0800aa68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa74:	2300      	movs	r3, #0
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e00a      	b.n	800aa90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aa7a:	f3af 8000 	nop.w
 800aa7e:	4601      	mov	r1, r0
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	60ba      	str	r2, [r7, #8]
 800aa86:	b2ca      	uxtb	r2, r1
 800aa88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	dbf0      	blt.n	800aa7a <_read+0x12>
	}

return len;
 800aa98:	687b      	ldr	r3, [r7, #4]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]
 800aab2:	e009      	b.n	800aac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	60ba      	str	r2, [r7, #8]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	3301      	adds	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	429a      	cmp	r2, r3
 800aace:	dbf1      	blt.n	800aab4 <_write+0x12>
	}
	return len;
 800aad0:	687b      	ldr	r3, [r7, #4]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <_close>:

int _close(int file)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
	return -1;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ab02:	605a      	str	r2, [r3, #4]
	return 0;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <_isatty>:

int _isatty(int file)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
	return 1;
 800ab1a:	2301      	movs	r3, #1
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
	return 0;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
	...

0800ab44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ab4c:	4a14      	ldr	r2, [pc, #80]	; (800aba0 <_sbrk+0x5c>)
 800ab4e:	4b15      	ldr	r3, [pc, #84]	; (800aba4 <_sbrk+0x60>)
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ab58:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <_sbrk+0x64>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ab60:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <_sbrk+0x64>)
 800ab62:	4a12      	ldr	r2, [pc, #72]	; (800abac <_sbrk+0x68>)
 800ab64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ab66:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <_sbrk+0x64>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d207      	bcs.n	800ab84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ab74:	f007 fcea 	bl	801254c <__errno>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	220c      	movs	r2, #12
 800ab7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	e009      	b.n	800ab98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ab84:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <_sbrk+0x64>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <_sbrk+0x64>)
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4413      	add	r3, r2
 800ab92:	4a05      	ldr	r2, [pc, #20]	; (800aba8 <_sbrk+0x64>)
 800ab94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ab96:	68fb      	ldr	r3, [r7, #12]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	20020000 	.word	0x20020000
 800aba4:	00000400 	.word	0x00000400
 800aba8:	20000a94 	.word	0x20000a94
 800abac:	20000d90 	.word	0x20000d90

0800abb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <SystemInit+0x20>)
 800abb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abba:	4a05      	ldr	r2, [pc, #20]	; (800abd0 <SystemInit+0x20>)
 800abbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800abc4:	bf00      	nop
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	e000ed00 	.word	0xe000ed00

0800abd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b08c      	sub	sp, #48	; 0x30
 800abd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800abda:	f107 030c 	add.w	r3, r7, #12
 800abde:	2224      	movs	r2, #36	; 0x24
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f007 fcdc 	bl	80125a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abe8:	1d3b      	adds	r3, r7, #4
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800abf0:	4b21      	ldr	r3, [pc, #132]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800abf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800abf8:	4b1f      	ldr	r3, [pc, #124]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abfe:	4b1e      	ldr	r3, [pc, #120]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800ac04:	4b1c      	ldr	r3, [pc, #112]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800ac06:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac12:	4b19      	ldr	r3, [pc, #100]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ac20:	2301      	movs	r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ac30:	2301      	movs	r3, #1
 800ac32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ac34:	2300      	movs	r3, #0
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800ac3c:	f107 030c 	add.w	r3, r7, #12
 800ac40:	4619      	mov	r1, r3
 800ac42:	480d      	ldr	r0, [pc, #52]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800ac44:	f005 ff01 	bl	8010a4a <HAL_TIM_Encoder_Init>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800ac4e:	f7fb fb33 	bl	80062b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac52:	2300      	movs	r3, #0
 800ac54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac5a:	1d3b      	adds	r3, r7, #4
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4806      	ldr	r0, [pc, #24]	; (800ac78 <MX_TIM2_Init+0xa4>)
 800ac60:	f006 f9fe 	bl	8011060 <HAL_TIMEx_MasterConfigSynchronization>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800ac6a:	f7fb fb25 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ac6e:	bf00      	nop
 800ac70:	3730      	adds	r7, #48	; 0x30
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20000a98 	.word	0x20000a98

0800ac7c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800ac80:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <MX_TIM10_Init+0x40>)
 800ac82:	4a0f      	ldr	r2, [pc, #60]	; (800acc0 <MX_TIM10_Init+0x44>)
 800ac84:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <MX_TIM10_Init+0x40>)
 800ac88:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac8c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <MX_TIM10_Init+0x40>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800ac94:	4b09      	ldr	r3, [pc, #36]	; (800acbc <MX_TIM10_Init+0x40>)
 800ac96:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac9a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac9c:	4b07      	ldr	r3, [pc, #28]	; (800acbc <MX_TIM10_Init+0x40>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <MX_TIM10_Init+0x40>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800aca8:	4804      	ldr	r0, [pc, #16]	; (800acbc <MX_TIM10_Init+0x40>)
 800acaa:	f005 fded 	bl	8010888 <HAL_TIM_Base_Init>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800acb4:	f7fb fb00 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800acb8:	bf00      	nop
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20000ae0 	.word	0x20000ae0
 800acc0:	40014400 	.word	0x40014400

0800acc4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800acc8:	4b0f      	ldr	r3, [pc, #60]	; (800ad08 <MX_TIM11_Init+0x44>)
 800acca:	4a10      	ldr	r2, [pc, #64]	; (800ad0c <MX_TIM11_Init+0x48>)
 800accc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800acce:	4b0e      	ldr	r3, [pc, #56]	; (800ad08 <MX_TIM11_Init+0x44>)
 800acd0:	f643 2297 	movw	r2, #14999	; 0x3a97
 800acd4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acd6:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <MX_TIM11_Init+0x44>)
 800acd8:	2200      	movs	r2, #0
 800acda:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <MX_TIM11_Init+0x44>)
 800acde:	f247 522f 	movw	r2, #29999	; 0x752f
 800ace2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800ace4:	4b08      	ldr	r3, [pc, #32]	; (800ad08 <MX_TIM11_Init+0x44>)
 800ace6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acec:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <MX_TIM11_Init+0x44>)
 800acee:	2200      	movs	r2, #0
 800acf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800acf2:	4805      	ldr	r0, [pc, #20]	; (800ad08 <MX_TIM11_Init+0x44>)
 800acf4:	f005 fdc8 	bl	8010888 <HAL_TIM_Base_Init>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800acfe:	f7fb fadb 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800ad02:	bf00      	nop
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000b28 	.word	0x20000b28
 800ad0c:	40014800 	.word	0x40014800

0800ad10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08a      	sub	sp, #40	; 0x28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad18:	f107 0314 	add.w	r3, r7, #20
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	605a      	str	r2, [r3, #4]
 800ad22:	609a      	str	r2, [r3, #8]
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad30:	d12b      	bne.n	800ad8a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ad32:	2300      	movs	r3, #0
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	4b17      	ldr	r3, [pc, #92]	; (800ad94 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3a:	4a16      	ldr	r2, [pc, #88]	; (800ad94 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad3c:	f043 0301 	orr.w	r3, r3, #1
 800ad40:	6413      	str	r3, [r2, #64]	; 0x40
 800ad42:	4b14      	ldr	r3, [pc, #80]	; (800ad94 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	4b10      	ldr	r3, [pc, #64]	; (800ad94 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad56:	4a0f      	ldr	r2, [pc, #60]	; (800ad94 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad58:	f043 0301 	orr.w	r3, r3, #1
 800ad5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad5e:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad6e:	2302      	movs	r3, #2
 800ad70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad76:	2300      	movs	r3, #0
 800ad78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad7e:	f107 0314 	add.w	r3, r7, #20
 800ad82:	4619      	mov	r1, r3
 800ad84:	4804      	ldr	r0, [pc, #16]	; (800ad98 <HAL_TIM_Encoder_MspInit+0x88>)
 800ad86:	f001 fa27 	bl	800c1d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	3728      	adds	r7, #40	; 0x28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	40023800 	.word	0x40023800
 800ad98:	40020000 	.word	0x40020000

0800ad9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a1c      	ldr	r2, [pc, #112]	; (800ae1c <HAL_TIM_Base_MspInit+0x80>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d116      	bne.n	800addc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	4b1b      	ldr	r3, [pc, #108]	; (800ae20 <HAL_TIM_Base_MspInit+0x84>)
 800adb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb6:	4a1a      	ldr	r2, [pc, #104]	; (800ae20 <HAL_TIM_Base_MspInit+0x84>)
 800adb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adbc:	6453      	str	r3, [r2, #68]	; 0x44
 800adbe:	4b18      	ldr	r3, [pc, #96]	; (800ae20 <HAL_TIM_Base_MspInit+0x84>)
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	2019      	movs	r0, #25
 800add0:	f000 fd91 	bl	800b8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800add4:	2019      	movs	r0, #25
 800add6:	f000 fdaa 	bl	800b92e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800adda:	e01a      	b.n	800ae12 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a10      	ldr	r2, [pc, #64]	; (800ae24 <HAL_TIM_Base_MspInit+0x88>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d115      	bne.n	800ae12 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]
 800adea:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <HAL_TIM_Base_MspInit+0x84>)
 800adec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adee:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <HAL_TIM_Base_MspInit+0x84>)
 800adf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adf4:	6453      	str	r3, [r2, #68]	; 0x44
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <HAL_TIM_Base_MspInit+0x84>)
 800adf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adfe:	60bb      	str	r3, [r7, #8]
 800ae00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800ae02:	2200      	movs	r2, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	201a      	movs	r0, #26
 800ae08:	f000 fd75 	bl	800b8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800ae0c:	201a      	movs	r0, #26
 800ae0e:	f000 fd8e 	bl	800b92e <HAL_NVIC_EnableIRQ>
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	40014400 	.word	0x40014400
 800ae20:	40023800 	.word	0x40023800
 800ae24:	40014800 	.word	0x40014800

0800ae28 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d017      	beq.n	800ae70 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 0201 	bic.w	r2, r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	60fb      	str	r3, [r7, #12]
	}
}
 800ae70:	bf00      	nop
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae8c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d056      	beq.n	800af4e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea8:	2220      	movs	r2, #32
 800aeaa:	409a      	lsls	r2, r3
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800aec0:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3304      	adds	r3, #4
 800aec6:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800aec8:	2300      	movs	r3, #0
 800aeca:	82fb      	strh	r3, [r7, #22]
 800aecc:	e01a      	b.n	800af04 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800aed4:	8afb      	ldrh	r3, [r7, #22]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	4413      	add	r3, r2
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	4619      	mov	r1, r3
 800aede:	f7ff fb14 	bl	800a50a <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800aee2:	8afb      	ldrh	r3, [r7, #22]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	4413      	add	r3, r2
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b0a      	cmp	r3, #10
 800aeec:	d107      	bne.n	800aefe <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800aef4:	3301      	adds	r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800aefe:	8afb      	ldrh	r3, [r7, #22]
 800af00:	3301      	adds	r3, #1
 800af02:	82fb      	strh	r3, [r7, #22]
 800af04:	8afa      	ldrh	r2, [r7, #22]
 800af06:	89fb      	ldrh	r3, [r7, #14]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d3e0      	bcc.n	800aece <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af14:	223f      	movs	r2, #63	; 0x3f
 800af16:	409a      	lsls	r2, r3
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	1d1a      	adds	r2, r3, #4
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2240      	movs	r2, #64	; 0x40
 800af34:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f042 0201 	orr.w	r2, r2, #1
 800af4c:	601a      	str	r2, [r3, #0]
	}
}
 800af4e:	bf00      	nop
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	460b      	mov	r3, r1
 800af60:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f203 1347 	addw	r3, r3, #327	; 0x147
 800af68:	78fa      	ldrb	r2, [r7, #3]
 800af6a:	4611      	mov	r1, r2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff facc 	bl	800a50a <RB_Write>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d01f      	beq.n	800afde <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800af9e:	e013      	b.n	800afc8 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b0a      	cmp	r3, #10
 800afa6:	d10c      	bne.n	800afc2 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800afb4:	3b01      	subs	r3, #1
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800afbe:	2300      	movs	r3, #0
 800afc0:	e00e      	b.n	800afe0 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3344      	adds	r3, #68	; 0x44
 800afcc:	68f9      	ldr	r1, [r7, #12]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fa72 	bl	800a4b8 <RB_Read>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0e2      	beq.n	800afa0 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800afda:	2300      	movs	r3, #0
 800afdc:	e000      	b.n	800afe0 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800afde:	2301      	movs	r3, #1
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800aff6:	e012      	b.n	800b01e <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ffaa 	bl	800af56 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3301      	adds	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	2b0a      	cmp	r3, #10
 800b00c:	d107      	bne.n	800b01e <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b014:	3301      	adds	r3, #1
 800b016:	b2da      	uxtb	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	72fb      	strb	r3, [r7, #11]
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e6      	bne.n	800aff8 <UARTDMA_Print+0x10>
		}
	}
}
 800b02a:	bf00      	nop
 800b02c:	bf00      	nop
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800b060:	2300      	movs	r3, #0
 800b062:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b02      	cmp	r3, #2
 800b072:	d028      	beq.n	800b0c6 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800b074:	e013      	b.n	800b09e <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800b076:	7b7b      	ldrb	r3, [r7, #13]
 800b078:	2b0a      	cmp	r3, #10
 800b07a:	d107      	bne.n	800b08c <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b082:	3b01      	subs	r3, #1
 800b084:	b2da      	uxtb	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800b08c:	89fb      	ldrh	r3, [r7, #14]
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	81fa      	strh	r2, [r7, #14]
 800b092:	4619      	mov	r1, r3
 800b094:	7b7a      	ldrb	r2, [r7, #13]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	440b      	add	r3, r1
 800b09a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f203 1347 	addw	r3, r3, #327	; 0x147
 800b0a4:	f107 020d 	add.w	r2, r7, #13
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fa04 	bl	800a4b8 <RB_Read>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0df      	beq.n	800b076 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6818      	ldr	r0, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	33c7      	adds	r3, #199	; 0xc7
 800b0be:	89fa      	ldrh	r2, [r7, #14]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f006 f89d 	bl	8011200 <HAL_UART_Transmit_DMA>
	}
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f042 0210 	orr.w	r2, r2, #16
 800b0f0:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f042 0210 	orr.w	r2, r2, #16
 800b108:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f042 0210 	orr.w	r2, r2, #16
 800b120:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3304      	adds	r3, #4
 800b12a:	2240      	movs	r2, #64	; 0x40
 800b12c:	4619      	mov	r1, r3
 800b12e:	f006 f8e5 	bl	80112fc <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 0208 	bic.w	r2, r2, #8
 800b148:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f022 0208 	bic.w	r2, r2, #8
 800b160:	601a      	str	r2, [r3, #0]
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b170:	4b11      	ldr	r3, [pc, #68]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b172:	4a12      	ldr	r2, [pc, #72]	; (800b1bc <MX_USART1_UART_Init+0x50>)
 800b174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b176:	4b10      	ldr	r3, [pc, #64]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b17c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b17e:	4b0e      	ldr	r3, [pc, #56]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b180:	2200      	movs	r2, #0
 800b182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b186:	2200      	movs	r2, #0
 800b188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b18a:	4b0b      	ldr	r3, [pc, #44]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b190:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b192:	220c      	movs	r2, #12
 800b194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b196:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b198:	2200      	movs	r2, #0
 800b19a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b19c:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b1a2:	4805      	ldr	r0, [pc, #20]	; (800b1b8 <MX_USART1_UART_Init+0x4c>)
 800b1a4:	f005 ffde 	bl	8011164 <HAL_UART_Init>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b1ae:	f7fb f883 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b1b2:	bf00      	nop
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000b70 	.word	0x20000b70
 800b1bc:	40011000 	.word	0x40011000

0800b1c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b1c4:	4b11      	ldr	r3, [pc, #68]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1c6:	4a12      	ldr	r2, [pc, #72]	; (800b210 <MX_USART2_UART_Init+0x50>)
 800b1c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b1ca:	4b10      	ldr	r3, [pc, #64]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b1d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b1d8:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b1de:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b1e4:	4b09      	ldr	r3, [pc, #36]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1e6:	220c      	movs	r2, #12
 800b1e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b1f6:	4805      	ldr	r0, [pc, #20]	; (800b20c <MX_USART2_UART_Init+0x4c>)
 800b1f8:	f005 ffb4 	bl	8011164 <HAL_UART_Init>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b202:	f7fb f859 	bl	80062b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b206:	bf00      	nop
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20000bb4 	.word	0x20000bb4
 800b210:	40004400 	.word	0x40004400

0800b214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08c      	sub	sp, #48	; 0x30
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b21c:	f107 031c 	add.w	r3, r7, #28
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	605a      	str	r2, [r3, #4]
 800b226:	609a      	str	r2, [r3, #8]
 800b228:	60da      	str	r2, [r3, #12]
 800b22a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a59      	ldr	r2, [pc, #356]	; (800b398 <HAL_UART_MspInit+0x184>)
 800b232:	4293      	cmp	r3, r2
 800b234:	f040 80c0 	bne.w	800b3b8 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b238:	2300      	movs	r3, #0
 800b23a:	61bb      	str	r3, [r7, #24]
 800b23c:	4b57      	ldr	r3, [pc, #348]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b240:	4a56      	ldr	r2, [pc, #344]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b242:	f043 0310 	orr.w	r3, r3, #16
 800b246:	6453      	str	r3, [r2, #68]	; 0x44
 800b248:	4b54      	ldr	r3, [pc, #336]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	4b50      	ldr	r3, [pc, #320]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25c:	4a4f      	ldr	r2, [pc, #316]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b25e:	f043 0301 	orr.w	r3, r3, #1
 800b262:	6313      	str	r3, [r2, #48]	; 0x30
 800b264:	4b4d      	ldr	r3, [pc, #308]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b270:	2300      	movs	r3, #0
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	4b49      	ldr	r3, [pc, #292]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b278:	4a48      	ldr	r2, [pc, #288]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b27a:	f043 0302 	orr.w	r3, r3, #2
 800b27e:	6313      	str	r3, [r2, #48]	; 0x30
 800b280:	4b46      	ldr	r3, [pc, #280]	; (800b39c <HAL_UART_MspInit+0x188>)
 800b282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800b28c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b292:	2302      	movs	r3, #2
 800b294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b296:	2300      	movs	r3, #0
 800b298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b29a:	2303      	movs	r3, #3
 800b29c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b29e:	2307      	movs	r3, #7
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800b2a2:	f107 031c 	add.w	r3, r7, #28
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	483d      	ldr	r0, [pc, #244]	; (800b3a0 <HAL_UART_MspInit+0x18c>)
 800b2aa:	f000 ff95 	bl	800c1d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800b2ae:	2380      	movs	r3, #128	; 0x80
 800b2b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b2be:	2307      	movs	r3, #7
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800b2c2:	f107 031c 	add.w	r3, r7, #28
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4836      	ldr	r0, [pc, #216]	; (800b3a4 <HAL_UART_MspInit+0x190>)
 800b2ca:	f000 ff85 	bl	800c1d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b2ce:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2d0:	4a36      	ldr	r2, [pc, #216]	; (800b3ac <HAL_UART_MspInit+0x198>)
 800b2d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b2d4:	4b34      	ldr	r3, [pc, #208]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2dc:	4b32      	ldr	r3, [pc, #200]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2e2:	4b31      	ldr	r3, [pc, #196]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2e8:	4b2f      	ldr	r3, [pc, #188]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2f0:	4b2d      	ldr	r3, [pc, #180]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2f6:	4b2c      	ldr	r3, [pc, #176]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b2fc:	4b2a      	ldr	r3, [pc, #168]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b302:	4b29      	ldr	r3, [pc, #164]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b304:	2200      	movs	r2, #0
 800b306:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b308:	4b27      	ldr	r3, [pc, #156]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b30e:	4826      	ldr	r0, [pc, #152]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b310:	f000 fb52 	bl	800b9b8 <HAL_DMA_Init>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800b31a:	f7fa ffcd 	bl	80062b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a21      	ldr	r2, [pc, #132]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b322:	639a      	str	r2, [r3, #56]	; 0x38
 800b324:	4a20      	ldr	r2, [pc, #128]	; (800b3a8 <HAL_UART_MspInit+0x194>)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800b32a:	4b21      	ldr	r3, [pc, #132]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b32c:	4a21      	ldr	r2, [pc, #132]	; (800b3b4 <HAL_UART_MspInit+0x1a0>)
 800b32e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800b330:	4b1f      	ldr	r3, [pc, #124]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b336:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b338:	4b1d      	ldr	r3, [pc, #116]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b33a:	2240      	movs	r2, #64	; 0x40
 800b33c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b33e:	4b1c      	ldr	r3, [pc, #112]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b340:	2200      	movs	r2, #0
 800b342:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b344:	4b1a      	ldr	r3, [pc, #104]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b34a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b34c:	4b18      	ldr	r3, [pc, #96]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b34e:	2200      	movs	r2, #0
 800b350:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b352:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b354:	2200      	movs	r2, #0
 800b356:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b358:	4b15      	ldr	r3, [pc, #84]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b35e:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b360:	2200      	movs	r2, #0
 800b362:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b364:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b366:	2200      	movs	r2, #0
 800b368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b36a:	4811      	ldr	r0, [pc, #68]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b36c:	f000 fb24 	bl	800b9b8 <HAL_DMA_Init>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800b376:	f7fa ff9f 	bl	80062b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a0c      	ldr	r2, [pc, #48]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b37e:	635a      	str	r2, [r3, #52]	; 0x34
 800b380:	4a0b      	ldr	r2, [pc, #44]	; (800b3b0 <HAL_UART_MspInit+0x19c>)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b386:	2200      	movs	r2, #0
 800b388:	2100      	movs	r1, #0
 800b38a:	2025      	movs	r0, #37	; 0x25
 800b38c:	f000 fab3 	bl	800b8f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b390:	2025      	movs	r0, #37	; 0x25
 800b392:	f000 facc 	bl	800b92e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b396:	e09d      	b.n	800b4d4 <HAL_UART_MspInit+0x2c0>
 800b398:	40011000 	.word	0x40011000
 800b39c:	40023800 	.word	0x40023800
 800b3a0:	40020000 	.word	0x40020000
 800b3a4:	40020400 	.word	0x40020400
 800b3a8:	20000bf8 	.word	0x20000bf8
 800b3ac:	40026440 	.word	0x40026440
 800b3b0:	20000c58 	.word	0x20000c58
 800b3b4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a47      	ldr	r2, [pc, #284]	; (800b4dc <HAL_UART_MspInit+0x2c8>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f040 8088 	bne.w	800b4d4 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	4b45      	ldr	r3, [pc, #276]	; (800b4e0 <HAL_UART_MspInit+0x2cc>)
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	4a44      	ldr	r2, [pc, #272]	; (800b4e0 <HAL_UART_MspInit+0x2cc>)
 800b3ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3d2:	6413      	str	r3, [r2, #64]	; 0x40
 800b3d4:	4b42      	ldr	r3, [pc, #264]	; (800b4e0 <HAL_UART_MspInit+0x2cc>)
 800b3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	60bb      	str	r3, [r7, #8]
 800b3e4:	4b3e      	ldr	r3, [pc, #248]	; (800b4e0 <HAL_UART_MspInit+0x2cc>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	4a3d      	ldr	r2, [pc, #244]	; (800b4e0 <HAL_UART_MspInit+0x2cc>)
 800b3ea:	f043 0301 	orr.w	r3, r3, #1
 800b3ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b3f0:	4b3b      	ldr	r3, [pc, #236]	; (800b4e0 <HAL_UART_MspInit+0x2cc>)
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	60bb      	str	r3, [r7, #8]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800b3fc:	230c      	movs	r3, #12
 800b3fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b400:	2302      	movs	r3, #2
 800b402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b404:	2300      	movs	r3, #0
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b408:	2303      	movs	r3, #3
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b40c:	2307      	movs	r3, #7
 800b40e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b410:	f107 031c 	add.w	r3, r7, #28
 800b414:	4619      	mov	r1, r3
 800b416:	4833      	ldr	r0, [pc, #204]	; (800b4e4 <HAL_UART_MspInit+0x2d0>)
 800b418:	f000 fede 	bl	800c1d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800b41c:	4b32      	ldr	r3, [pc, #200]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b41e:	4a33      	ldr	r2, [pc, #204]	; (800b4ec <HAL_UART_MspInit+0x2d8>)
 800b420:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800b422:	4b31      	ldr	r3, [pc, #196]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b424:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b428:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b42a:	4b2f      	ldr	r3, [pc, #188]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b430:	4b2d      	ldr	r3, [pc, #180]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b432:	2200      	movs	r2, #0
 800b434:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b436:	4b2c      	ldr	r3, [pc, #176]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b43c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b43e:	4b2a      	ldr	r3, [pc, #168]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b440:	2200      	movs	r2, #0
 800b442:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b444:	4b28      	ldr	r3, [pc, #160]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b446:	2200      	movs	r2, #0
 800b448:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800b44a:	4b27      	ldr	r3, [pc, #156]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b450:	4b25      	ldr	r3, [pc, #148]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b452:	2200      	movs	r2, #0
 800b454:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b456:	4b24      	ldr	r3, [pc, #144]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b458:	2200      	movs	r2, #0
 800b45a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800b45c:	4822      	ldr	r0, [pc, #136]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b45e:	f000 faab 	bl	800b9b8 <HAL_DMA_Init>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <HAL_UART_MspInit+0x258>
      Error_Handler();
 800b468:	f7fa ff26 	bl	80062b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a1e      	ldr	r2, [pc, #120]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
 800b472:	4a1d      	ldr	r2, [pc, #116]	; (800b4e8 <HAL_UART_MspInit+0x2d4>)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800b478:	4b1d      	ldr	r3, [pc, #116]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b47a:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <HAL_UART_MspInit+0x2e0>)
 800b47c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800b47e:	4b1c      	ldr	r3, [pc, #112]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b484:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b486:	4b1a      	ldr	r3, [pc, #104]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b488:	2240      	movs	r2, #64	; 0x40
 800b48a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b48c:	4b18      	ldr	r3, [pc, #96]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b48e:	2200      	movs	r2, #0
 800b490:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b492:	4b17      	ldr	r3, [pc, #92]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b498:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b49a:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b4a0:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800b4a6:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b4b2:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b4b8:	480d      	ldr	r0, [pc, #52]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4ba:	f000 fa7d 	bl	800b9b8 <HAL_DMA_Init>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800b4c4:	f7fa fef8 	bl	80062b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4cc:	635a      	str	r2, [r3, #52]	; 0x34
 800b4ce:	4a08      	ldr	r2, [pc, #32]	; (800b4f0 <HAL_UART_MspInit+0x2dc>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b4d4:	bf00      	nop
 800b4d6:	3730      	adds	r7, #48	; 0x30
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	40004400 	.word	0x40004400
 800b4e0:	40023800 	.word	0x40023800
 800b4e4:	40020000 	.word	0x40020000
 800b4e8:	20000cb8 	.word	0x20000cb8
 800b4ec:	40026088 	.word	0x40026088
 800b4f0:	20000d18 	.word	0x20000d18
 800b4f4:	400260a0 	.word	0x400260a0

0800b4f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b4f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b4fc:	480d      	ldr	r0, [pc, #52]	; (800b534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b4fe:	490e      	ldr	r1, [pc, #56]	; (800b538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b500:	4a0e      	ldr	r2, [pc, #56]	; (800b53c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b504:	e002      	b.n	800b50c <LoopCopyDataInit>

0800b506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b50a:	3304      	adds	r3, #4

0800b50c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b50c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b50e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b510:	d3f9      	bcc.n	800b506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b512:	4a0b      	ldr	r2, [pc, #44]	; (800b540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b514:	4c0b      	ldr	r4, [pc, #44]	; (800b544 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b516:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b518:	e001      	b.n	800b51e <LoopFillZerobss>

0800b51a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b51a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b51c:	3204      	adds	r2, #4

0800b51e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b51e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b520:	d3fb      	bcc.n	800b51a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b522:	f7ff fb45 	bl	800abb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b526:	f007 f817 	bl	8012558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b52a:	f7fa fd63 	bl	8005ff4 <main>
  bx  lr    
 800b52e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b538:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800b53c:	0802b0d0 	.word	0x0802b0d0
  ldr r2, =_sbss
 800b540:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800b544:	20000d8c 	.word	0x20000d8c

0800b548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b548:	e7fe      	b.n	800b548 <ADC_IRQHandler>
	...

0800b54c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b550:	4b0e      	ldr	r3, [pc, #56]	; (800b58c <HAL_Init+0x40>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a0d      	ldr	r2, [pc, #52]	; (800b58c <HAL_Init+0x40>)
 800b556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b55a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b55c:	4b0b      	ldr	r3, [pc, #44]	; (800b58c <HAL_Init+0x40>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a0a      	ldr	r2, [pc, #40]	; (800b58c <HAL_Init+0x40>)
 800b562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b568:	4b08      	ldr	r3, [pc, #32]	; (800b58c <HAL_Init+0x40>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a07      	ldr	r2, [pc, #28]	; (800b58c <HAL_Init+0x40>)
 800b56e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b574:	2003      	movs	r0, #3
 800b576:	f000 f9b3 	bl	800b8e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b57a:	2000      	movs	r0, #0
 800b57c:	f000 f808 	bl	800b590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b580:	f7ff f95e 	bl	800a840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40023c00 	.word	0x40023c00

0800b590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b598:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <HAL_InitTick+0x54>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	4b12      	ldr	r3, [pc, #72]	; (800b5e8 <HAL_InitTick+0x58>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f9d9 	bl	800b966 <HAL_SYSTICK_Config>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e00e      	b.n	800b5dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b0f      	cmp	r3, #15
 800b5c2:	d80a      	bhi.n	800b5da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5cc:	f000 f993 	bl	800b8f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b5d0:	4a06      	ldr	r2, [pc, #24]	; (800b5ec <HAL_InitTick+0x5c>)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e000      	b.n	800b5dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20000038 	.word	0x20000038
 800b5e8:	20000040 	.word	0x20000040
 800b5ec:	2000003c 	.word	0x2000003c

0800b5f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <HAL_IncTick+0x20>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	4b06      	ldr	r3, [pc, #24]	; (800b614 <HAL_IncTick+0x24>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4413      	add	r3, r2
 800b600:	4a04      	ldr	r2, [pc, #16]	; (800b614 <HAL_IncTick+0x24>)
 800b602:	6013      	str	r3, [r2, #0]
}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	20000040 	.word	0x20000040
 800b614:	20000d78 	.word	0x20000d78

0800b618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  return uwTick;
 800b61c:	4b03      	ldr	r3, [pc, #12]	; (800b62c <HAL_GetTick+0x14>)
 800b61e:	681b      	ldr	r3, [r3, #0]
}
 800b620:	4618      	mov	r0, r3
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20000d78 	.word	0x20000d78

0800b630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b638:	f7ff ffee 	bl	800b618 <HAL_GetTick>
 800b63c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b648:	d005      	beq.n	800b656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <HAL_Delay+0x44>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	4413      	add	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b656:	bf00      	nop
 800b658:	f7ff ffde 	bl	800b618 <HAL_GetTick>
 800b65c:	4602      	mov	r2, r0
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	d8f7      	bhi.n	800b658 <HAL_Delay+0x28>
  {
  }
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20000040 	.word	0x20000040

0800b678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b688:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <__NVIC_SetPriorityGrouping+0x44>)
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b694:	4013      	ands	r3, r2
 800b696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b6a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b6a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b6aa:	4a04      	ldr	r2, [pc, #16]	; (800b6bc <__NVIC_SetPriorityGrouping+0x44>)
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	60d3      	str	r3, [r2, #12]
}
 800b6b0:	bf00      	nop
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	e000ed00 	.word	0xe000ed00

0800b6c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b6c4:	4b04      	ldr	r3, [pc, #16]	; (800b6d8 <__NVIC_GetPriorityGrouping+0x18>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	0a1b      	lsrs	r3, r3, #8
 800b6ca:	f003 0307 	and.w	r3, r3, #7
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	e000ed00 	.word	0xe000ed00

0800b6dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	db0b      	blt.n	800b706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	f003 021f 	and.w	r2, r3, #31
 800b6f4:	4907      	ldr	r1, [pc, #28]	; (800b714 <__NVIC_EnableIRQ+0x38>)
 800b6f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6fa:	095b      	lsrs	r3, r3, #5
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	fa00 f202 	lsl.w	r2, r0, r2
 800b702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	e000e100 	.word	0xe000e100

0800b718 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b726:	2b00      	cmp	r3, #0
 800b728:	db12      	blt.n	800b750 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	f003 021f 	and.w	r2, r3, #31
 800b730:	490a      	ldr	r1, [pc, #40]	; (800b75c <__NVIC_DisableIRQ+0x44>)
 800b732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b736:	095b      	lsrs	r3, r3, #5
 800b738:	2001      	movs	r0, #1
 800b73a:	fa00 f202 	lsl.w	r2, r0, r2
 800b73e:	3320      	adds	r3, #32
 800b740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b744:	f3bf 8f4f 	dsb	sy
}
 800b748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b74a:	f3bf 8f6f 	isb	sy
}
 800b74e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	e000e100 	.word	0xe000e100

0800b760 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	db0e      	blt.n	800b790 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800b772:	4a0b      	ldr	r2, [pc, #44]	; (800b7a0 <__NVIC_GetPendingIRQ+0x40>)
 800b774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	3340      	adds	r3, #64	; 0x40
 800b77c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	f003 031f 	and.w	r3, r3, #31
 800b786:	fa22 f303 	lsr.w	r3, r2, r3
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	e000      	b.n	800b792 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800b790:	2300      	movs	r3, #0
  }
}
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	e000e100 	.word	0xe000e100

0800b7a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	db0c      	blt.n	800b7d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7b6:	79fb      	ldrb	r3, [r7, #7]
 800b7b8:	f003 021f 	and.w	r2, r3, #31
 800b7bc:	4907      	ldr	r1, [pc, #28]	; (800b7dc <__NVIC_ClearPendingIRQ+0x38>)
 800b7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7c2:	095b      	lsrs	r3, r3, #5
 800b7c4:	2001      	movs	r0, #1
 800b7c6:	fa00 f202 	lsl.w	r2, r0, r2
 800b7ca:	3360      	adds	r3, #96	; 0x60
 800b7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	e000e100 	.word	0xe000e100

0800b7e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6039      	str	r1, [r7, #0]
 800b7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	db0a      	blt.n	800b80a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	490c      	ldr	r1, [pc, #48]	; (800b82c <__NVIC_SetPriority+0x4c>)
 800b7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7fe:	0112      	lsls	r2, r2, #4
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	440b      	add	r3, r1
 800b804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b808:	e00a      	b.n	800b820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	4908      	ldr	r1, [pc, #32]	; (800b830 <__NVIC_SetPriority+0x50>)
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	3b04      	subs	r3, #4
 800b818:	0112      	lsls	r2, r2, #4
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	440b      	add	r3, r1
 800b81e:	761a      	strb	r2, [r3, #24]
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	e000e100 	.word	0xe000e100
 800b830:	e000ed00 	.word	0xe000ed00

0800b834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b834:	b480      	push	{r7}
 800b836:	b089      	sub	sp, #36	; 0x24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f003 0307 	and.w	r3, r3, #7
 800b846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	f1c3 0307 	rsb	r3, r3, #7
 800b84e:	2b04      	cmp	r3, #4
 800b850:	bf28      	it	cs
 800b852:	2304      	movcs	r3, #4
 800b854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	3304      	adds	r3, #4
 800b85a:	2b06      	cmp	r3, #6
 800b85c:	d902      	bls.n	800b864 <NVIC_EncodePriority+0x30>
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	3b03      	subs	r3, #3
 800b862:	e000      	b.n	800b866 <NVIC_EncodePriority+0x32>
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b868:	f04f 32ff 	mov.w	r2, #4294967295
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	43da      	mvns	r2, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	401a      	ands	r2, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b87c:	f04f 31ff 	mov.w	r1, #4294967295
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	fa01 f303 	lsl.w	r3, r1, r3
 800b886:	43d9      	mvns	r1, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b88c:	4313      	orrs	r3, r2
         );
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3724      	adds	r7, #36	; 0x24
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
	...

0800b89c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8ac:	d301      	bcc.n	800b8b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e00f      	b.n	800b8d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b8b2:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <SysTick_Config+0x40>)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b8ba:	210f      	movs	r1, #15
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c0:	f7ff ff8e 	bl	800b7e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <SysTick_Config+0x40>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b8ca:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <SysTick_Config+0x40>)
 800b8cc:	2207      	movs	r2, #7
 800b8ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	e000e010 	.word	0xe000e010

0800b8e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff fec5 	bl	800b678 <__NVIC_SetPriorityGrouping>
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b086      	sub	sp, #24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b908:	f7ff feda 	bl	800b6c0 <__NVIC_GetPriorityGrouping>
 800b90c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	68b9      	ldr	r1, [r7, #8]
 800b912:	6978      	ldr	r0, [r7, #20]
 800b914:	f7ff ff8e 	bl	800b834 <NVIC_EncodePriority>
 800b918:	4602      	mov	r2, r0
 800b91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff ff5d 	bl	800b7e0 <__NVIC_SetPriority>
}
 800b926:	bf00      	nop
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	4603      	mov	r3, r0
 800b936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff fecd 	bl	800b6dc <__NVIC_EnableIRQ>
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	4603      	mov	r3, r0
 800b952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fedd 	bl	800b718 <__NVIC_DisableIRQ>
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7ff ff94 	bl	800b89c <SysTick_Config>
 800b974:	4603      	mov	r3, r0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	af00      	add	r7, sp, #0
 800b984:	4603      	mov	r3, r0
 800b986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800b988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff fee7 	bl	800b760 <__NVIC_GetPendingIRQ>
 800b992:	4603      	mov	r3, r0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b9a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff fefa 	bl	800b7a4 <__NVIC_ClearPendingIRQ>
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b9c4:	f7ff fe28 	bl	800b618 <HAL_GetTick>
 800b9c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e099      	b.n	800bb08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f022 0201 	bic.w	r2, r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9f4:	e00f      	b.n	800ba16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9f6:	f7ff fe0f 	bl	800b618 <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	2b05      	cmp	r3, #5
 800ba02:	d908      	bls.n	800ba16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2203      	movs	r2, #3
 800ba0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e078      	b.n	800bb08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e8      	bne.n	800b9f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4b38      	ldr	r3, [pc, #224]	; (800bb10 <HAL_DMA_Init+0x158>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d107      	bne.n	800ba80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f023 0307 	bic.w	r3, r3, #7
 800ba96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	697a      	ldr	r2, [r7, #20]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	2b04      	cmp	r3, #4
 800baa8:	d117      	bne.n	800bada <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00e      	beq.n	800bada <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fb0f 	bl	800c0e0 <DMA_CheckFifoParam>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d008      	beq.n	800bada <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2240      	movs	r2, #64	; 0x40
 800bacc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bad6:	2301      	movs	r3, #1
 800bad8:	e016      	b.n	800bb08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fac6 	bl	800c074 <DMA_CalcBaseAndBitshift>
 800bae8:	4603      	mov	r3, r0
 800baea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baf0:	223f      	movs	r2, #63	; 0x3f
 800baf2:	409a      	lsls	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2201      	movs	r2, #1
 800bb02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	f010803f 	.word	0xf010803f

0800bb14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d101      	bne.n	800bb3a <HAL_DMA_Start_IT+0x26>
 800bb36:	2302      	movs	r3, #2
 800bb38:	e040      	b.n	800bbbc <HAL_DMA_Start_IT+0xa8>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d12f      	bne.n	800bbae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2202      	movs	r2, #2
 800bb52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	68b9      	ldr	r1, [r7, #8]
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 fa58 	bl	800c018 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb6c:	223f      	movs	r2, #63	; 0x3f
 800bb6e:	409a      	lsls	r2, r3
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f042 0216 	orr.w	r2, r2, #22
 800bb82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d007      	beq.n	800bb9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0208 	orr.w	r2, r2, #8
 800bb9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f042 0201 	orr.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	e005      	b.n	800bbba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bbd2:	f7ff fd21 	bl	800b618 <HAL_GetTick>
 800bbd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d008      	beq.n	800bbf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2280      	movs	r2, #128	; 0x80
 800bbe8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e052      	b.n	800bc9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f022 0216 	bic.w	r2, r2, #22
 800bc04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	695a      	ldr	r2, [r3, #20]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d103      	bne.n	800bc26 <HAL_DMA_Abort+0x62>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f022 0208 	bic.w	r2, r2, #8
 800bc34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f022 0201 	bic.w	r2, r2, #1
 800bc44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc46:	e013      	b.n	800bc70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc48:	f7ff fce6 	bl	800b618 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b05      	cmp	r3, #5
 800bc54:	d90c      	bls.n	800bc70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2220      	movs	r2, #32
 800bc5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2203      	movs	r2, #3
 800bc60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e015      	b.n	800bc9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1e4      	bne.n	800bc48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc82:	223f      	movs	r2, #63	; 0x3f
 800bc84:	409a      	lsls	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d004      	beq.n	800bcc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2280      	movs	r2, #128	; 0x80
 800bcbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e00c      	b.n	800bcdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2205      	movs	r2, #5
 800bcc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0201 	bic.w	r2, r2, #1
 800bcd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bcf4:	4b8e      	ldr	r3, [pc, #568]	; (800bf30 <HAL_DMA_IRQHandler+0x248>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a8e      	ldr	r2, [pc, #568]	; (800bf34 <HAL_DMA_IRQHandler+0x24c>)
 800bcfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfe:	0a9b      	lsrs	r3, r3, #10
 800bd00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd12:	2208      	movs	r2, #8
 800bd14:	409a      	lsls	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	4013      	ands	r3, r2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01a      	beq.n	800bd54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d013      	beq.n	800bd54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 0204 	bic.w	r2, r2, #4
 800bd3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd40:	2208      	movs	r2, #8
 800bd42:	409a      	lsls	r2, r3
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4c:	f043 0201 	orr.w	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd58:	2201      	movs	r2, #1
 800bd5a:	409a      	lsls	r2, r3
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4013      	ands	r3, r2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d012      	beq.n	800bd8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00b      	beq.n	800bd8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd76:	2201      	movs	r2, #1
 800bd78:	409a      	lsls	r2, r3
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd82:	f043 0202 	orr.w	r2, r3, #2
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd8e:	2204      	movs	r2, #4
 800bd90:	409a      	lsls	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4013      	ands	r3, r2
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d012      	beq.n	800bdc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0302 	and.w	r3, r3, #2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdac:	2204      	movs	r2, #4
 800bdae:	409a      	lsls	r2, r3
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb8:	f043 0204 	orr.w	r2, r3, #4
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdc4:	2210      	movs	r2, #16
 800bdc6:	409a      	lsls	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d043      	beq.n	800be58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 0308 	and.w	r3, r3, #8
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d03c      	beq.n	800be58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde2:	2210      	movs	r2, #16
 800bde4:	409a      	lsls	r2, r3
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d018      	beq.n	800be2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d108      	bne.n	800be18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d024      	beq.n	800be58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	4798      	blx	r3
 800be16:	e01f      	b.n	800be58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01b      	beq.n	800be58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
 800be28:	e016      	b.n	800be58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be34:	2b00      	cmp	r3, #0
 800be36:	d107      	bne.n	800be48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 0208 	bic.w	r2, r2, #8
 800be46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be5c:	2220      	movs	r2, #32
 800be5e:	409a      	lsls	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4013      	ands	r3, r2
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 808f 	beq.w	800bf88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0310 	and.w	r3, r3, #16
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 8087 	beq.w	800bf88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be7e:	2220      	movs	r2, #32
 800be80:	409a      	lsls	r2, r3
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b05      	cmp	r3, #5
 800be90:	d136      	bne.n	800bf00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 0216 	bic.w	r2, r2, #22
 800bea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	695a      	ldr	r2, [r3, #20]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800beb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d103      	bne.n	800bec2 <HAL_DMA_IRQHandler+0x1da>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d007      	beq.n	800bed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 0208 	bic.w	r2, r2, #8
 800bed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed6:	223f      	movs	r2, #63	; 0x3f
 800bed8:	409a      	lsls	r2, r3
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d07e      	beq.n	800bff4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	4798      	blx	r3
        }
        return;
 800befe:	e079      	b.n	800bff4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d01d      	beq.n	800bf4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10d      	bne.n	800bf38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d031      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	4798      	blx	r3
 800bf2c:	e02c      	b.n	800bf88 <HAL_DMA_IRQHandler+0x2a0>
 800bf2e:	bf00      	nop
 800bf30:	20000038 	.word	0x20000038
 800bf34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d023      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	4798      	blx	r3
 800bf48:	e01e      	b.n	800bf88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10f      	bne.n	800bf78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f022 0210 	bic.w	r2, r2, #16
 800bf66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d003      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d032      	beq.n	800bff6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d022      	beq.n	800bfe2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2205      	movs	r2, #5
 800bfa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 0201 	bic.w	r2, r2, #1
 800bfb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	60bb      	str	r3, [r7, #8]
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d307      	bcc.n	800bfd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f2      	bne.n	800bfb4 <HAL_DMA_IRQHandler+0x2cc>
 800bfce:	e000      	b.n	800bfd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800bfd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d005      	beq.n	800bff6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	4798      	blx	r3
 800bff2:	e000      	b.n	800bff6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800bff4:	bf00      	nop
    }
  }
}
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c00a:	b2db      	uxtb	r3, r3
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c034:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	2b40      	cmp	r3, #64	; 0x40
 800c044:	d108      	bne.n	800c058 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c056:	e007      	b.n	800c068 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	60da      	str	r2, [r3, #12]
}
 800c068:	bf00      	nop
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	b2db      	uxtb	r3, r3
 800c082:	3b10      	subs	r3, #16
 800c084:	4a14      	ldr	r2, [pc, #80]	; (800c0d8 <DMA_CalcBaseAndBitshift+0x64>)
 800c086:	fba2 2303 	umull	r2, r3, r2, r3
 800c08a:	091b      	lsrs	r3, r3, #4
 800c08c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c08e:	4a13      	ldr	r2, [pc, #76]	; (800c0dc <DMA_CalcBaseAndBitshift+0x68>)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4413      	add	r3, r2
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d909      	bls.n	800c0b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c0aa:	f023 0303 	bic.w	r3, r3, #3
 800c0ae:	1d1a      	adds	r2, r3, #4
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	659a      	str	r2, [r3, #88]	; 0x58
 800c0b4:	e007      	b.n	800c0c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c0be:	f023 0303 	bic.w	r3, r3, #3
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	aaaaaaab 	.word	0xaaaaaaab
 800c0dc:	0802abb8 	.word	0x0802abb8

0800c0e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d11f      	bne.n	800c13a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d856      	bhi.n	800c1ae <DMA_CheckFifoParam+0xce>
 800c100:	a201      	add	r2, pc, #4	; (adr r2, 800c108 <DMA_CheckFifoParam+0x28>)
 800c102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c106:	bf00      	nop
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c12b 	.word	0x0800c12b
 800c110:	0800c119 	.word	0x0800c119
 800c114:	0800c1af 	.word	0x0800c1af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d046      	beq.n	800c1b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c128:	e043      	b.n	800c1b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c132:	d140      	bne.n	800c1b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c138:	e03d      	b.n	800c1b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c142:	d121      	bne.n	800c188 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b03      	cmp	r3, #3
 800c148:	d837      	bhi.n	800c1ba <DMA_CheckFifoParam+0xda>
 800c14a:	a201      	add	r2, pc, #4	; (adr r2, 800c150 <DMA_CheckFifoParam+0x70>)
 800c14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c150:	0800c161 	.word	0x0800c161
 800c154:	0800c167 	.word	0x0800c167
 800c158:	0800c161 	.word	0x0800c161
 800c15c:	0800c179 	.word	0x0800c179
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
      break;
 800c164:	e030      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d025      	beq.n	800c1be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c176:	e022      	b.n	800c1be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c180:	d11f      	bne.n	800c1c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c186:	e01c      	b.n	800c1c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d903      	bls.n	800c196 <DMA_CheckFifoParam+0xb6>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b03      	cmp	r3, #3
 800c192:	d003      	beq.n	800c19c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c194:	e018      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	73fb      	strb	r3, [r7, #15]
      break;
 800c19a:	e015      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00e      	beq.n	800c1c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ac:	e00b      	b.n	800c1c6 <DMA_CheckFifoParam+0xe6>
      break;
 800c1ae:	bf00      	nop
 800c1b0:	e00a      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      break;
 800c1b2:	bf00      	nop
 800c1b4:	e008      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      break;
 800c1b6:	bf00      	nop
 800c1b8:	e006      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      break;
 800c1ba:	bf00      	nop
 800c1bc:	e004      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      break;
 800c1be:	bf00      	nop
 800c1c0:	e002      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      break;   
 800c1c2:	bf00      	nop
 800c1c4:	e000      	b.n	800c1c8 <DMA_CheckFifoParam+0xe8>
      break;
 800c1c6:	bf00      	nop
    }
  } 
  
  return status; 
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop

0800c1d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b089      	sub	sp, #36	; 0x24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	61fb      	str	r3, [r7, #28]
 800c1f2:	e159      	b.n	800c4a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	4013      	ands	r3, r2
 800c206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	f040 8148 	bne.w	800c4a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	f003 0303 	and.w	r3, r3, #3
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d005      	beq.n	800c22a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c226:	2b02      	cmp	r3, #2
 800c228:	d130      	bne.n	800c28c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	2203      	movs	r2, #3
 800c236:	fa02 f303 	lsl.w	r3, r2, r3
 800c23a:	43db      	mvns	r3, r3
 800c23c:	69ba      	ldr	r2, [r7, #24]
 800c23e:	4013      	ands	r3, r2
 800c240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	fa02 f303 	lsl.w	r3, r2, r3
 800c24e:	69ba      	ldr	r2, [r7, #24]
 800c250:	4313      	orrs	r3, r2
 800c252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	69ba      	ldr	r2, [r7, #24]
 800c258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c260:	2201      	movs	r2, #1
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	fa02 f303 	lsl.w	r3, r2, r3
 800c268:	43db      	mvns	r3, r3
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	4013      	ands	r3, r2
 800c26e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	091b      	lsrs	r3, r3, #4
 800c276:	f003 0201 	and.w	r2, r3, #1
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	fa02 f303 	lsl.w	r3, r2, r3
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	4313      	orrs	r3, r2
 800c284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	f003 0303 	and.w	r3, r3, #3
 800c294:	2b03      	cmp	r3, #3
 800c296:	d017      	beq.n	800c2c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	005b      	lsls	r3, r3, #1
 800c2a2:	2203      	movs	r2, #3
 800c2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	689a      	ldr	r2, [r3, #8]
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d123      	bne.n	800c31c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	08da      	lsrs	r2, r3, #3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3208      	adds	r2, #8
 800c2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	f003 0307 	and.w	r3, r3, #7
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	220f      	movs	r2, #15
 800c2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f0:	43db      	mvns	r3, r3
 800c2f2:	69ba      	ldr	r2, [r7, #24]
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	691a      	ldr	r2, [r3, #16]
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	f003 0307 	and.w	r3, r3, #7
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	fa02 f303 	lsl.w	r3, r2, r3
 800c308:	69ba      	ldr	r2, [r7, #24]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	08da      	lsrs	r2, r3, #3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	3208      	adds	r2, #8
 800c316:	69b9      	ldr	r1, [r7, #24]
 800c318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	2203      	movs	r2, #3
 800c328:	fa02 f303 	lsl.w	r3, r2, r3
 800c32c:	43db      	mvns	r3, r3
 800c32e:	69ba      	ldr	r2, [r7, #24]
 800c330:	4013      	ands	r3, r2
 800c332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f003 0203 	and.w	r2, r3, #3
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	fa02 f303 	lsl.w	r3, r2, r3
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	4313      	orrs	r3, r2
 800c348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 80a2 	beq.w	800c4a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	4b57      	ldr	r3, [pc, #348]	; (800c4c0 <HAL_GPIO_Init+0x2e8>)
 800c364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c366:	4a56      	ldr	r2, [pc, #344]	; (800c4c0 <HAL_GPIO_Init+0x2e8>)
 800c368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c36c:	6453      	str	r3, [r2, #68]	; 0x44
 800c36e:	4b54      	ldr	r3, [pc, #336]	; (800c4c0 <HAL_GPIO_Init+0x2e8>)
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c376:	60fb      	str	r3, [r7, #12]
 800c378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c37a:	4a52      	ldr	r2, [pc, #328]	; (800c4c4 <HAL_GPIO_Init+0x2ec>)
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	089b      	lsrs	r3, r3, #2
 800c380:	3302      	adds	r3, #2
 800c382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	220f      	movs	r2, #15
 800c392:	fa02 f303 	lsl.w	r3, r2, r3
 800c396:	43db      	mvns	r3, r3
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	4013      	ands	r3, r2
 800c39c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a49      	ldr	r2, [pc, #292]	; (800c4c8 <HAL_GPIO_Init+0x2f0>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d019      	beq.n	800c3da <HAL_GPIO_Init+0x202>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a48      	ldr	r2, [pc, #288]	; (800c4cc <HAL_GPIO_Init+0x2f4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d013      	beq.n	800c3d6 <HAL_GPIO_Init+0x1fe>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a47      	ldr	r2, [pc, #284]	; (800c4d0 <HAL_GPIO_Init+0x2f8>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d00d      	beq.n	800c3d2 <HAL_GPIO_Init+0x1fa>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a46      	ldr	r2, [pc, #280]	; (800c4d4 <HAL_GPIO_Init+0x2fc>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d007      	beq.n	800c3ce <HAL_GPIO_Init+0x1f6>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a45      	ldr	r2, [pc, #276]	; (800c4d8 <HAL_GPIO_Init+0x300>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d101      	bne.n	800c3ca <HAL_GPIO_Init+0x1f2>
 800c3c6:	2304      	movs	r3, #4
 800c3c8:	e008      	b.n	800c3dc <HAL_GPIO_Init+0x204>
 800c3ca:	2307      	movs	r3, #7
 800c3cc:	e006      	b.n	800c3dc <HAL_GPIO_Init+0x204>
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	e004      	b.n	800c3dc <HAL_GPIO_Init+0x204>
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	e002      	b.n	800c3dc <HAL_GPIO_Init+0x204>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <HAL_GPIO_Init+0x204>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	69fa      	ldr	r2, [r7, #28]
 800c3de:	f002 0203 	and.w	r2, r2, #3
 800c3e2:	0092      	lsls	r2, r2, #2
 800c3e4:	4093      	lsls	r3, r2
 800c3e6:	69ba      	ldr	r2, [r7, #24]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c3ec:	4935      	ldr	r1, [pc, #212]	; (800c4c4 <HAL_GPIO_Init+0x2ec>)
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	089b      	lsrs	r3, r3, #2
 800c3f2:	3302      	adds	r3, #2
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c3fa:	4b38      	ldr	r3, [pc, #224]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	43db      	mvns	r3, r3
 800c404:	69ba      	ldr	r2, [r7, #24]
 800c406:	4013      	ands	r3, r2
 800c408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c41e:	4a2f      	ldr	r2, [pc, #188]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c424:	4b2d      	ldr	r3, [pc, #180]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	43db      	mvns	r3, r3
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	4013      	ands	r3, r2
 800c432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d003      	beq.n	800c448 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c440:	69ba      	ldr	r2, [r7, #24]
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	4313      	orrs	r3, r2
 800c446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c448:	4a24      	ldr	r2, [pc, #144]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c44e:	4b23      	ldr	r3, [pc, #140]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	43db      	mvns	r3, r3
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	4013      	ands	r3, r2
 800c45c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c46a:	69ba      	ldr	r2, [r7, #24]
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c472:	4a1a      	ldr	r2, [pc, #104]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c478:	4b18      	ldr	r3, [pc, #96]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	43db      	mvns	r3, r3
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	4013      	ands	r3, r2
 800c486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c494:	69ba      	ldr	r2, [r7, #24]
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	4313      	orrs	r3, r2
 800c49a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c49c:	4a0f      	ldr	r2, [pc, #60]	; (800c4dc <HAL_GPIO_Init+0x304>)
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	61fb      	str	r3, [r7, #28]
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	2b0f      	cmp	r3, #15
 800c4ac:	f67f aea2 	bls.w	800c1f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3724      	adds	r7, #36	; 0x24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	40023800 	.word	0x40023800
 800c4c4:	40013800 	.word	0x40013800
 800c4c8:	40020000 	.word	0x40020000
 800c4cc:	40020400 	.word	0x40020400
 800c4d0:	40020800 	.word	0x40020800
 800c4d4:	40020c00 	.word	0x40020c00
 800c4d8:	40021000 	.word	0x40021000
 800c4dc:	40013c00 	.word	0x40013c00

0800c4e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	691a      	ldr	r2, [r3, #16]
 800c4f0:	887b      	ldrh	r3, [r7, #2]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	73fb      	strb	r3, [r7, #15]
 800c4fc:	e001      	b.n	800c502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c502:	7bfb      	ldrb	r3, [r7, #15]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	807b      	strh	r3, [r7, #2]
 800c51c:	4613      	mov	r3, r2
 800c51e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c520:	787b      	ldrb	r3, [r7, #1]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c526:	887a      	ldrh	r2, [r7, #2]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c52c:	e003      	b.n	800c536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c52e:	887b      	ldrh	r3, [r7, #2]
 800c530:	041a      	lsls	r2, r3, #16
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	619a      	str	r2, [r3, #24]
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c542:	b480      	push	{r7}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	460b      	mov	r3, r1
 800c54c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	695b      	ldr	r3, [r3, #20]
 800c552:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c554:	887a      	ldrh	r2, [r7, #2]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4013      	ands	r3, r2
 800c55a:	041a      	lsls	r2, r3, #16
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	43d9      	mvns	r1, r3
 800c560:	887b      	ldrh	r3, [r7, #2]
 800c562:	400b      	ands	r3, r1
 800c564:	431a      	orrs	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	619a      	str	r2, [r3, #24]
}
 800c56a:	bf00      	nop
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
	...

0800c578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c582:	4b08      	ldr	r3, [pc, #32]	; (800c5a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c584:	695a      	ldr	r2, [r3, #20]
 800c586:	88fb      	ldrh	r3, [r7, #6]
 800c588:	4013      	ands	r3, r2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d006      	beq.n	800c59c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c58e:	4a05      	ldr	r2, [pc, #20]	; (800c5a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c590:	88fb      	ldrh	r3, [r7, #6]
 800c592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c594:	88fb      	ldrh	r3, [r7, #6]
 800c596:	4618      	mov	r0, r3
 800c598:	f7f9 fe7a 	bl	8006290 <HAL_GPIO_EXTI_Callback>
  }
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	40013c00 	.word	0x40013c00

0800c5a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e12b      	b.n	800c812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d106      	bne.n	800c5d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7f9 fc06 	bl	8005de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2224      	movs	r2, #36	; 0x24
 800c5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c60a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c60c:	f003 fd00 	bl	8010010 <HAL_RCC_GetPCLK1Freq>
 800c610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	4a81      	ldr	r2, [pc, #516]	; (800c81c <HAL_I2C_Init+0x274>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d807      	bhi.n	800c62c <HAL_I2C_Init+0x84>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4a80      	ldr	r2, [pc, #512]	; (800c820 <HAL_I2C_Init+0x278>)
 800c620:	4293      	cmp	r3, r2
 800c622:	bf94      	ite	ls
 800c624:	2301      	movls	r3, #1
 800c626:	2300      	movhi	r3, #0
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	e006      	b.n	800c63a <HAL_I2C_Init+0x92>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4a7d      	ldr	r2, [pc, #500]	; (800c824 <HAL_I2C_Init+0x27c>)
 800c630:	4293      	cmp	r3, r2
 800c632:	bf94      	ite	ls
 800c634:	2301      	movls	r3, #1
 800c636:	2300      	movhi	r3, #0
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e0e7      	b.n	800c812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4a78      	ldr	r2, [pc, #480]	; (800c828 <HAL_I2C_Init+0x280>)
 800c646:	fba2 2303 	umull	r2, r3, r2, r3
 800c64a:	0c9b      	lsrs	r3, r3, #18
 800c64c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	430a      	orrs	r2, r1
 800c660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	4a6a      	ldr	r2, [pc, #424]	; (800c81c <HAL_I2C_Init+0x274>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d802      	bhi.n	800c67c <HAL_I2C_Init+0xd4>
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	3301      	adds	r3, #1
 800c67a:	e009      	b.n	800c690 <HAL_I2C_Init+0xe8>
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c682:	fb02 f303 	mul.w	r3, r2, r3
 800c686:	4a69      	ldr	r2, [pc, #420]	; (800c82c <HAL_I2C_Init+0x284>)
 800c688:	fba2 2303 	umull	r2, r3, r2, r3
 800c68c:	099b      	lsrs	r3, r3, #6
 800c68e:	3301      	adds	r3, #1
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	6812      	ldr	r2, [r2, #0]
 800c694:	430b      	orrs	r3, r1
 800c696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c6a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	495c      	ldr	r1, [pc, #368]	; (800c81c <HAL_I2C_Init+0x274>)
 800c6ac:	428b      	cmp	r3, r1
 800c6ae:	d819      	bhi.n	800c6e4 <HAL_I2C_Init+0x13c>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	1e59      	subs	r1, r3, #1
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	005b      	lsls	r3, r3, #1
 800c6ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6be:	1c59      	adds	r1, r3, #1
 800c6c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c6c4:	400b      	ands	r3, r1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <HAL_I2C_Init+0x138>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1e59      	subs	r1, r3, #1
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6d8:	3301      	adds	r3, #1
 800c6da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6de:	e051      	b.n	800c784 <HAL_I2C_Init+0x1dc>
 800c6e0:	2304      	movs	r3, #4
 800c6e2:	e04f      	b.n	800c784 <HAL_I2C_Init+0x1dc>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d111      	bne.n	800c710 <HAL_I2C_Init+0x168>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	1e58      	subs	r0, r3, #1
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6859      	ldr	r1, [r3, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	440b      	add	r3, r1
 800c6fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6fe:	3301      	adds	r3, #1
 800c700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c704:	2b00      	cmp	r3, #0
 800c706:	bf0c      	ite	eq
 800c708:	2301      	moveq	r3, #1
 800c70a:	2300      	movne	r3, #0
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	e012      	b.n	800c736 <HAL_I2C_Init+0x18e>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1e58      	subs	r0, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6859      	ldr	r1, [r3, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	0099      	lsls	r1, r3, #2
 800c720:	440b      	add	r3, r1
 800c722:	fbb0 f3f3 	udiv	r3, r0, r3
 800c726:	3301      	adds	r3, #1
 800c728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bf0c      	ite	eq
 800c730:	2301      	moveq	r3, #1
 800c732:	2300      	movne	r3, #0
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <HAL_I2C_Init+0x196>
 800c73a:	2301      	movs	r3, #1
 800c73c:	e022      	b.n	800c784 <HAL_I2C_Init+0x1dc>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10e      	bne.n	800c764 <HAL_I2C_Init+0x1bc>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	1e58      	subs	r0, r3, #1
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6859      	ldr	r1, [r3, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	440b      	add	r3, r1
 800c754:	fbb0 f3f3 	udiv	r3, r0, r3
 800c758:	3301      	adds	r3, #1
 800c75a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c762:	e00f      	b.n	800c784 <HAL_I2C_Init+0x1dc>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	1e58      	subs	r0, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6859      	ldr	r1, [r3, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	440b      	add	r3, r1
 800c772:	0099      	lsls	r1, r3, #2
 800c774:	440b      	add	r3, r1
 800c776:	fbb0 f3f3 	udiv	r3, r0, r3
 800c77a:	3301      	adds	r3, #1
 800c77c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c784:	6879      	ldr	r1, [r7, #4]
 800c786:	6809      	ldr	r1, [r1, #0]
 800c788:	4313      	orrs	r3, r2
 800c78a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69da      	ldr	r2, [r3, #28]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c7b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	6911      	ldr	r1, [r2, #16]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	68d2      	ldr	r2, [r2, #12]
 800c7be:	4311      	orrs	r1, r2
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	6812      	ldr	r2, [r2, #0]
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	695a      	ldr	r2, [r3, #20]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	430a      	orrs	r2, r1
 800c7e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f042 0201 	orr.w	r2, r2, #1
 800c7f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2220      	movs	r2, #32
 800c7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	000186a0 	.word	0x000186a0
 800c820:	001e847f 	.word	0x001e847f
 800c824:	003d08ff 	.word	0x003d08ff
 800c828:	431bde83 	.word	0x431bde83
 800c82c:	10624dd3 	.word	0x10624dd3

0800c830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af02      	add	r7, sp, #8
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	607a      	str	r2, [r7, #4]
 800c83a:	461a      	mov	r2, r3
 800c83c:	460b      	mov	r3, r1
 800c83e:	817b      	strh	r3, [r7, #10]
 800c840:	4613      	mov	r3, r2
 800c842:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c844:	f7fe fee8 	bl	800b618 <HAL_GetTick>
 800c848:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b20      	cmp	r3, #32
 800c854:	f040 80e0 	bne.w	800ca18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	2319      	movs	r3, #25
 800c85e:	2201      	movs	r2, #1
 800c860:	4970      	ldr	r1, [pc, #448]	; (800ca24 <HAL_I2C_Master_Transmit+0x1f4>)
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f002 fd7a 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c86e:	2302      	movs	r3, #2
 800c870:	e0d3      	b.n	800ca1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d101      	bne.n	800c880 <HAL_I2C_Master_Transmit+0x50>
 800c87c:	2302      	movs	r3, #2
 800c87e:	e0cc      	b.n	800ca1a <HAL_I2C_Master_Transmit+0x1ea>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b01      	cmp	r3, #1
 800c894:	d007      	beq.n	800c8a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f042 0201 	orr.w	r2, r2, #1
 800c8a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2221      	movs	r2, #33	; 0x21
 800c8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2210      	movs	r2, #16
 800c8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	893a      	ldrh	r2, [r7, #8]
 800c8d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4a50      	ldr	r2, [pc, #320]	; (800ca28 <HAL_I2C_Master_Transmit+0x1f8>)
 800c8e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c8e8:	8979      	ldrh	r1, [r7, #10]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	6a3a      	ldr	r2, [r7, #32]
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f002 f9be 	bl	800ec70 <I2C_MasterRequestWrite>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e08d      	b.n	800ca1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8fe:	2300      	movs	r3, #0
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	613b      	str	r3, [r7, #16]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	613b      	str	r3, [r7, #16]
 800c912:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c914:	e066      	b.n	800c9e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	6a39      	ldr	r1, [r7, #32]
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f002 fdf4 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00d      	beq.n	800c942 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	2b04      	cmp	r3, #4
 800c92c:	d107      	bne.n	800c93e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c93c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e06b      	b.n	800ca1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c96a:	3b01      	subs	r3, #1
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	695b      	ldr	r3, [r3, #20]
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	d11b      	bne.n	800c9b8 <HAL_I2C_Master_Transmit+0x188>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c984:	2b00      	cmp	r3, #0
 800c986:	d017      	beq.n	800c9b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98c:	781a      	ldrb	r2, [r3, #0]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c998:	1c5a      	adds	r2, r3, #1
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	6a39      	ldr	r1, [r7, #32]
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f002 fde4 	bl	800f58a <I2C_WaitOnBTFFlagUntilTimeout>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00d      	beq.n	800c9e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	d107      	bne.n	800c9e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e01a      	b.n	800ca1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d194      	bne.n	800c916 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2220      	movs	r2, #32
 800ca00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	e000      	b.n	800ca1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ca18:	2302      	movs	r3, #2
  }
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	00100002 	.word	0x00100002
 800ca28:	ffff0000 	.word	0xffff0000

0800ca2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08c      	sub	sp, #48	; 0x30
 800ca30:	af02      	add	r7, sp, #8
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	607a      	str	r2, [r7, #4]
 800ca36:	461a      	mov	r2, r3
 800ca38:	460b      	mov	r3, r1
 800ca3a:	817b      	strh	r3, [r7, #10]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ca40:	f7fe fdea 	bl	800b618 <HAL_GetTick>
 800ca44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b20      	cmp	r3, #32
 800ca50:	f040 820b 	bne.w	800ce6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	2319      	movs	r3, #25
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	497c      	ldr	r1, [pc, #496]	; (800cc50 <HAL_I2C_Master_Receive+0x224>)
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f002 fc7c 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e1fe      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d101      	bne.n	800ca7c <HAL_I2C_Master_Receive+0x50>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	e1f7      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d007      	beq.n	800caa2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f042 0201 	orr.w	r2, r2, #1
 800caa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cab0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2222      	movs	r2, #34	; 0x22
 800cab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2210      	movs	r2, #16
 800cabe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	893a      	ldrh	r2, [r7, #8]
 800cad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cad8:	b29a      	uxth	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4a5c      	ldr	r2, [pc, #368]	; (800cc54 <HAL_I2C_Master_Receive+0x228>)
 800cae2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cae4:	8979      	ldrh	r1, [r7, #10]
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f002 f942 	bl	800ed74 <I2C_MasterRequestRead>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	e1b8      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d113      	bne.n	800cb2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb02:	2300      	movs	r3, #0
 800cb04:	623b      	str	r3, [r7, #32]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	695b      	ldr	r3, [r3, #20]
 800cb0c:	623b      	str	r3, [r7, #32]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	623b      	str	r3, [r7, #32]
 800cb16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	e18c      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d11b      	bne.n	800cb6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb42:	2300      	movs	r3, #0
 800cb44:	61fb      	str	r3, [r7, #28]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	695b      	ldr	r3, [r3, #20]
 800cb4c:	61fb      	str	r3, [r7, #28]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	61fb      	str	r3, [r7, #28]
 800cb56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	e16c      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d11b      	bne.n	800cbaa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb92:	2300      	movs	r3, #0
 800cb94:	61bb      	str	r3, [r7, #24]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	695b      	ldr	r3, [r3, #20]
 800cb9c:	61bb      	str	r3, [r7, #24]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	61bb      	str	r3, [r7, #24]
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	e14c      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbba:	2300      	movs	r3, #0
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	617b      	str	r3, [r7, #20]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	617b      	str	r3, [r7, #20]
 800cbce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cbd0:	e138      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	f200 80f1 	bhi.w	800cdbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d123      	bne.n	800cc2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f002 fd41 	bl	800f670 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e139      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	691a      	ldr	r2, [r3, #16]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc14:	3b01      	subs	r3, #1
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc2a:	e10b      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d14e      	bne.n	800ccd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4906      	ldr	r1, [pc, #24]	; (800cc58 <HAL_I2C_Master_Receive+0x22c>)
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f002 fb8c 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d008      	beq.n	800cc5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e10e      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
 800cc4e:	bf00      	nop
 800cc50:	00100002 	.word	0x00100002
 800cc54:	ffff0000 	.word	0xffff0000
 800cc58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691a      	ldr	r2, [r3, #16]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	3b01      	subs	r3, #1
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	691a      	ldr	r2, [r3, #16]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	b2d2      	uxtb	r2, r2
 800ccaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ccd0:	e0b8      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4966      	ldr	r1, [pc, #408]	; (800ce74 <HAL_I2C_Master_Receive+0x448>)
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f002 fb3d 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e0bf      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	691a      	ldr	r2, [r3, #16]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd06:	b2d2      	uxtb	r2, r2
 800cd08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	3b01      	subs	r3, #1
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	2200      	movs	r2, #0
 800cd36:	494f      	ldr	r1, [pc, #316]	; (800ce74 <HAL_I2C_Master_Receive+0x448>)
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f002 fb0f 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e091      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	691a      	ldr	r2, [r3, #16]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	3b01      	subs	r3, #1
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	691a      	ldr	r2, [r3, #16]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd94:	b2d2      	uxtb	r2, r2
 800cd96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9c:	1c5a      	adds	r2, r3, #1
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cda6:	3b01      	subs	r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdbc:	e042      	b.n	800ce44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cdbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f002 fc54 	bl	800f670 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e04c      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	691a      	ldr	r2, [r3, #16]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	695b      	ldr	r3, [r3, #20]
 800ce0a:	f003 0304 	and.w	r3, r3, #4
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d118      	bne.n	800ce44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	691a      	ldr	r2, [r3, #16]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	b2d2      	uxtb	r2, r2
 800ce1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce24:	1c5a      	adds	r2, r3, #1
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f47f aec2 	bne.w	800cbd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2220      	movs	r2, #32
 800ce52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ce66:	2300      	movs	r3, #0
 800ce68:	e000      	b.n	800ce6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ce6a:	2302      	movs	r3, #2
  }
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3728      	adds	r7, #40	; 0x28
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	00010004 	.word	0x00010004

0800ce78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af02      	add	r7, sp, #8
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	4608      	mov	r0, r1
 800ce82:	4611      	mov	r1, r2
 800ce84:	461a      	mov	r2, r3
 800ce86:	4603      	mov	r3, r0
 800ce88:	817b      	strh	r3, [r7, #10]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	813b      	strh	r3, [r7, #8]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ce92:	f7fe fbc1 	bl	800b618 <HAL_GetTick>
 800ce96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b20      	cmp	r3, #32
 800cea2:	f040 80d9 	bne.w	800d058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	2319      	movs	r3, #25
 800ceac:	2201      	movs	r2, #1
 800ceae:	496d      	ldr	r1, [pc, #436]	; (800d064 <HAL_I2C_Mem_Write+0x1ec>)
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f002 fa53 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cebc:	2302      	movs	r3, #2
 800cebe:	e0cc      	b.n	800d05a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d101      	bne.n	800cece <HAL_I2C_Mem_Write+0x56>
 800ceca:	2302      	movs	r3, #2
 800cecc:	e0c5      	b.n	800d05a <HAL_I2C_Mem_Write+0x1e2>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d007      	beq.n	800cef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f042 0201 	orr.w	r2, r2, #1
 800cef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2221      	movs	r2, #33	; 0x21
 800cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2240      	movs	r2, #64	; 0x40
 800cf10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6a3a      	ldr	r2, [r7, #32]
 800cf1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	4a4d      	ldr	r2, [pc, #308]	; (800d068 <HAL_I2C_Mem_Write+0x1f0>)
 800cf34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf36:	88f8      	ldrh	r0, [r7, #6]
 800cf38:	893a      	ldrh	r2, [r7, #8]
 800cf3a:	8979      	ldrh	r1, [r7, #10]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	4603      	mov	r3, r0
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f001 ffe2 	bl	800ef10 <I2C_RequestMemoryWrite>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d052      	beq.n	800cff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e081      	b.n	800d05a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f002 fad4 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00d      	beq.n	800cf82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d107      	bne.n	800cf7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e06b      	b.n	800d05a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf86:	781a      	ldrb	r2, [r3, #0]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	f003 0304 	and.w	r3, r3, #4
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d11b      	bne.n	800cff8 <HAL_I2C_Mem_Write+0x180>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d017      	beq.n	800cff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfcc:	781a      	ldrb	r2, [r3, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd8:	1c5a      	adds	r2, r3, #1
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	3b01      	subs	r3, #1
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1aa      	bne.n	800cf56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f002 fac0 	bl	800f58a <I2C_WaitOnBTFFlagUntilTimeout>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00d      	beq.n	800d02c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d014:	2b04      	cmp	r3, #4
 800d016:	d107      	bne.n	800d028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e016      	b.n	800d05a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d03a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2220      	movs	r2, #32
 800d040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	e000      	b.n	800d05a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d058:	2302      	movs	r3, #2
  }
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	00100002 	.word	0x00100002
 800d068:	ffff0000 	.word	0xffff0000

0800d06c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08c      	sub	sp, #48	; 0x30
 800d070:	af02      	add	r7, sp, #8
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	461a      	mov	r2, r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	817b      	strh	r3, [r7, #10]
 800d07e:	460b      	mov	r3, r1
 800d080:	813b      	strh	r3, [r7, #8]
 800d082:	4613      	mov	r3, r2
 800d084:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d086:	f7fe fac7 	bl	800b618 <HAL_GetTick>
 800d08a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b20      	cmp	r3, #32
 800d096:	f040 8208 	bne.w	800d4aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	2319      	movs	r3, #25
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	497b      	ldr	r1, [pc, #492]	; (800d290 <HAL_I2C_Mem_Read+0x224>)
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f002 f959 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	e1fb      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d101      	bne.n	800d0c2 <HAL_I2C_Mem_Read+0x56>
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e1f4      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d007      	beq.n	800d0e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f042 0201 	orr.w	r2, r2, #1
 800d0e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2222      	movs	r2, #34	; 0x22
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2240      	movs	r2, #64	; 0x40
 800d104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d11e:	b29a      	uxth	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	4a5b      	ldr	r2, [pc, #364]	; (800d294 <HAL_I2C_Mem_Read+0x228>)
 800d128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d12a:	88f8      	ldrh	r0, [r7, #6]
 800d12c:	893a      	ldrh	r2, [r7, #8]
 800d12e:	8979      	ldrh	r1, [r7, #10]
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	9301      	str	r3, [sp, #4]
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	4603      	mov	r3, r0
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f001 ff7e 	bl	800f03c <I2C_RequestMemoryRead>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d001      	beq.n	800d14a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e1b0      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d113      	bne.n	800d17a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d152:	2300      	movs	r3, #0
 800d154:	623b      	str	r3, [r7, #32]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	623b      	str	r3, [r7, #32]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	699b      	ldr	r3, [r3, #24]
 800d164:	623b      	str	r3, [r7, #32]
 800d166:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	e184      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d11b      	bne.n	800d1ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d192:	2300      	movs	r3, #0
 800d194:	61fb      	str	r3, [r7, #28]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	61fb      	str	r3, [r7, #28]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	699b      	ldr	r3, [r3, #24]
 800d1a4:	61fb      	str	r3, [r7, #28]
 800d1a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	e164      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d11b      	bne.n	800d1fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61bb      	str	r3, [r7, #24]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	61bb      	str	r3, [r7, #24]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	61bb      	str	r3, [r7, #24]
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	e144      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	617b      	str	r3, [r7, #20]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d210:	e138      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d216:	2b03      	cmp	r3, #3
 800d218:	f200 80f1 	bhi.w	800d3fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d220:	2b01      	cmp	r3, #1
 800d222:	d123      	bne.n	800d26c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f002 fa21 	bl	800f670 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e139      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	691a      	ldr	r2, [r3, #16]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	b2d2      	uxtb	r2, r2
 800d244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	1c5a      	adds	r2, r3, #1
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d254:	3b01      	subs	r3, #1
 800d256:	b29a      	uxth	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d260:	b29b      	uxth	r3, r3
 800d262:	3b01      	subs	r3, #1
 800d264:	b29a      	uxth	r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d26a:	e10b      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d270:	2b02      	cmp	r3, #2
 800d272:	d14e      	bne.n	800d312 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	2200      	movs	r2, #0
 800d27c:	4906      	ldr	r1, [pc, #24]	; (800d298 <HAL_I2C_Mem_Read+0x22c>)
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f002 f86c 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d008      	beq.n	800d29c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e10e      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
 800d28e:	bf00      	nop
 800d290:	00100002 	.word	0x00100002
 800d294:	ffff0000 	.word	0xffff0000
 800d298:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	691a      	ldr	r2, [r3, #16]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	b2d2      	uxtb	r2, r2
 800d2b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	691a      	ldr	r2, [r3, #16]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	b2d2      	uxtb	r2, r2
 800d2ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f0:	1c5a      	adds	r2, r3, #1
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d306:	b29b      	uxth	r3, r3
 800d308:	3b01      	subs	r3, #1
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d310:	e0b8      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d318:	2200      	movs	r2, #0
 800d31a:	4966      	ldr	r1, [pc, #408]	; (800d4b4 <HAL_I2C_Mem_Read+0x448>)
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f002 f81d 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	e0bf      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d33a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	691a      	ldr	r2, [r3, #16]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d358:	3b01      	subs	r3, #1
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d364:	b29b      	uxth	r3, r3
 800d366:	3b01      	subs	r3, #1
 800d368:	b29a      	uxth	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d374:	2200      	movs	r2, #0
 800d376:	494f      	ldr	r1, [pc, #316]	; (800d4b4 <HAL_I2C_Mem_Read+0x448>)
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f001 ffef 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d384:	2301      	movs	r3, #1
 800d386:	e091      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	b2d2      	uxtb	r2, r2
 800d3a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	691a      	ldr	r2, [r3, #16]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	b2d2      	uxtb	r2, r2
 800d3d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3fc:	e042      	b.n	800d484 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f002 f934 	bl	800f670 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e04c      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	691a      	ldr	r2, [r3, #16]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41c:	b2d2      	uxtb	r2, r2
 800d41e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	1c5a      	adds	r2, r3, #1
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d42e:	3b01      	subs	r3, #1
 800d430:	b29a      	uxth	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	3b01      	subs	r3, #1
 800d43e:	b29a      	uxth	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	f003 0304 	and.w	r3, r3, #4
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d118      	bne.n	800d484 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	691a      	ldr	r2, [r3, #16]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d46e:	3b01      	subs	r3, #1
 800d470:	b29a      	uxth	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	3b01      	subs	r3, #1
 800d47e:	b29a      	uxth	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f47f aec2 	bne.w	800d212 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2220      	movs	r2, #32
 800d492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e000      	b.n	800d4ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d4aa:	2302      	movs	r3, #2
  }
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3728      	adds	r7, #40	; 0x28
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	00010004 	.word	0x00010004

0800d4b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	2b10      	cmp	r3, #16
 800d4e6:	d003      	beq.n	800d4f0 <HAL_I2C_EV_IRQHandler+0x38>
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	2b40      	cmp	r3, #64	; 0x40
 800d4ec:	f040 80c1 	bne.w	800d672 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10d      	bne.n	800d526 <HAL_I2C_EV_IRQHandler+0x6e>
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d510:	d003      	beq.n	800d51a <HAL_I2C_EV_IRQHandler+0x62>
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d518:	d101      	bne.n	800d51e <HAL_I2C_EV_IRQHandler+0x66>
 800d51a:	2301      	movs	r3, #1
 800d51c:	e000      	b.n	800d520 <HAL_I2C_EV_IRQHandler+0x68>
 800d51e:	2300      	movs	r3, #0
 800d520:	2b01      	cmp	r3, #1
 800d522:	f000 8132 	beq.w	800d78a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00c      	beq.n	800d54a <HAL_I2C_EV_IRQHandler+0x92>
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	0a5b      	lsrs	r3, r3, #9
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d006      	beq.n	800d54a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f002 f91c 	bl	800f77a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fd79 	bl	800e03a <I2C_Master_SB>
 800d548:	e092      	b.n	800d670 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	08db      	lsrs	r3, r3, #3
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d009      	beq.n	800d56a <HAL_I2C_EV_IRQHandler+0xb2>
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	0a5b      	lsrs	r3, r3, #9
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fdef 	bl	800e146 <I2C_Master_ADD10>
 800d568:	e082      	b.n	800d670 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	085b      	lsrs	r3, r3, #1
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d009      	beq.n	800d58a <HAL_I2C_EV_IRQHandler+0xd2>
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	0a5b      	lsrs	r3, r3, #9
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fe09 	bl	800e19a <I2C_Master_ADDR>
 800d588:	e072      	b.n	800d670 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	089b      	lsrs	r3, r3, #2
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d03b      	beq.n	800d60e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5a4:	f000 80f3 	beq.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	09db      	lsrs	r3, r3, #7
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00f      	beq.n	800d5d4 <HAL_I2C_EV_IRQHandler+0x11c>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	0a9b      	lsrs	r3, r3, #10
 800d5b8:	f003 0301 	and.w	r3, r3, #1
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d009      	beq.n	800d5d4 <HAL_I2C_EV_IRQHandler+0x11c>
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	089b      	lsrs	r3, r3, #2
 800d5c4:	f003 0301 	and.w	r3, r3, #1
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d103      	bne.n	800d5d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f9f3 	bl	800d9b8 <I2C_MasterTransmit_TXE>
 800d5d2:	e04d      	b.n	800d670 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	089b      	lsrs	r3, r3, #2
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 80d6 	beq.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	0a5b      	lsrs	r3, r3, #9
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80cf 	beq.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	2b21      	cmp	r3, #33	; 0x21
 800d5f4:	d103      	bne.n	800d5fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa7a 	bl	800daf0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5fc:	e0c7      	b.n	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
 800d600:	2b40      	cmp	r3, #64	; 0x40
 800d602:	f040 80c4 	bne.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fae8 	bl	800dbdc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d60c:	e0bf      	b.n	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d61c:	f000 80b7 	beq.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	099b      	lsrs	r3, r3, #6
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00f      	beq.n	800d64c <HAL_I2C_EV_IRQHandler+0x194>
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	0a9b      	lsrs	r3, r3, #10
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	2b00      	cmp	r3, #0
 800d636:	d009      	beq.n	800d64c <HAL_I2C_EV_IRQHandler+0x194>
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	089b      	lsrs	r3, r3, #2
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b00      	cmp	r3, #0
 800d642:	d103      	bne.n	800d64c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fb5d 	bl	800dd04 <I2C_MasterReceive_RXNE>
 800d64a:	e011      	b.n	800d670 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	089b      	lsrs	r3, r3, #2
 800d650:	f003 0301 	and.w	r3, r3, #1
 800d654:	2b00      	cmp	r3, #0
 800d656:	f000 809a 	beq.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	0a5b      	lsrs	r3, r3, #9
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	2b00      	cmp	r3, #0
 800d664:	f000 8093 	beq.w	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fbfc 	bl	800de66 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d66e:	e08e      	b.n	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
 800d670:	e08d      	b.n	800d78e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	2b00      	cmp	r3, #0
 800d678:	d004      	beq.n	800d684 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	61fb      	str	r3, [r7, #28]
 800d682:	e007      	b.n	800d694 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	085b      	lsrs	r3, r3, #1
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d012      	beq.n	800d6c6 <HAL_I2C_EV_IRQHandler+0x20e>
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	0a5b      	lsrs	r3, r3, #9
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00c      	beq.n	800d6c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d6bc:	69b9      	ldr	r1, [r7, #24]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 ffba 	bl	800e638 <I2C_Slave_ADDR>
 800d6c4:	e066      	b.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	091b      	lsrs	r3, r3, #4
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d009      	beq.n	800d6e6 <HAL_I2C_EV_IRQHandler+0x22e>
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	0a5b      	lsrs	r3, r3, #9
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fff4 	bl	800e6cc <I2C_Slave_STOPF>
 800d6e4:	e056      	b.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d6e6:	7bbb      	ldrb	r3, [r7, #14]
 800d6e8:	2b21      	cmp	r3, #33	; 0x21
 800d6ea:	d002      	beq.n	800d6f2 <HAL_I2C_EV_IRQHandler+0x23a>
 800d6ec:	7bbb      	ldrb	r3, [r7, #14]
 800d6ee:	2b29      	cmp	r3, #41	; 0x29
 800d6f0:	d125      	bne.n	800d73e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	09db      	lsrs	r3, r3, #7
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00f      	beq.n	800d71e <HAL_I2C_EV_IRQHandler+0x266>
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	0a9b      	lsrs	r3, r3, #10
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	2b00      	cmp	r3, #0
 800d708:	d009      	beq.n	800d71e <HAL_I2C_EV_IRQHandler+0x266>
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	089b      	lsrs	r3, r3, #2
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b00      	cmp	r3, #0
 800d714:	d103      	bne.n	800d71e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fed0 	bl	800e4bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d71c:	e039      	b.n	800d792 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	089b      	lsrs	r3, r3, #2
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b00      	cmp	r3, #0
 800d728:	d033      	beq.n	800d792 <HAL_I2C_EV_IRQHandler+0x2da>
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	0a5b      	lsrs	r3, r3, #9
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	2b00      	cmp	r3, #0
 800d734:	d02d      	beq.n	800d792 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fefd 	bl	800e536 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d73c:	e029      	b.n	800d792 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	099b      	lsrs	r3, r3, #6
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00f      	beq.n	800d76a <HAL_I2C_EV_IRQHandler+0x2b2>
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	0a9b      	lsrs	r3, r3, #10
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	2b00      	cmp	r3, #0
 800d754:	d009      	beq.n	800d76a <HAL_I2C_EV_IRQHandler+0x2b2>
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	089b      	lsrs	r3, r3, #2
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d103      	bne.n	800d76a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 ff08 	bl	800e578 <I2C_SlaveReceive_RXNE>
 800d768:	e014      	b.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	089b      	lsrs	r3, r3, #2
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00e      	beq.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	0a5b      	lsrs	r3, r3, #9
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d008      	beq.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 ff36 	bl	800e5f4 <I2C_SlaveReceive_BTF>
 800d788:	e004      	b.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800d78a:	bf00      	nop
 800d78c:	e002      	b.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d78e:	bf00      	nop
 800d790:	e000      	b.n	800d794 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d792:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d794:	3720      	adds	r7, #32
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b08a      	sub	sp, #40	; 0x28
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d7bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	0a1b      	lsrs	r3, r3, #8
 800d7c2:	f003 0301 	and.w	r3, r3, #1
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00e      	beq.n	800d7e8 <HAL_I2C_ER_IRQHandler+0x4e>
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	0a1b      	lsrs	r3, r3, #8
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d008      	beq.n	800d7e8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d7e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	0a5b      	lsrs	r3, r3, #9
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00e      	beq.n	800d812 <HAL_I2C_ER_IRQHandler+0x78>
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	0a1b      	lsrs	r3, r3, #8
 800d7f8:	f003 0301 	and.w	r3, r3, #1
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d008      	beq.n	800d812 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	f043 0302 	orr.w	r3, r3, #2
 800d806:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d810:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	0a9b      	lsrs	r3, r3, #10
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d03f      	beq.n	800d89e <HAL_I2C_ER_IRQHandler+0x104>
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	0a1b      	lsrs	r3, r3, #8
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d039      	beq.n	800d89e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d82a:	7efb      	ldrb	r3, [r7, #27]
 800d82c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d832:	b29b      	uxth	r3, r3
 800d834:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d83c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d842:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d844:	7ebb      	ldrb	r3, [r7, #26]
 800d846:	2b20      	cmp	r3, #32
 800d848:	d112      	bne.n	800d870 <HAL_I2C_ER_IRQHandler+0xd6>
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10f      	bne.n	800d870 <HAL_I2C_ER_IRQHandler+0xd6>
 800d850:	7cfb      	ldrb	r3, [r7, #19]
 800d852:	2b21      	cmp	r3, #33	; 0x21
 800d854:	d008      	beq.n	800d868 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d856:	7cfb      	ldrb	r3, [r7, #19]
 800d858:	2b29      	cmp	r3, #41	; 0x29
 800d85a:	d005      	beq.n	800d868 <HAL_I2C_ER_IRQHandler+0xce>
 800d85c:	7cfb      	ldrb	r3, [r7, #19]
 800d85e:	2b28      	cmp	r3, #40	; 0x28
 800d860:	d106      	bne.n	800d870 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b21      	cmp	r3, #33	; 0x21
 800d866:	d103      	bne.n	800d870 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f001 f85f 	bl	800e92c <I2C_Slave_AF>
 800d86e:	e016      	b.n	800d89e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d878:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	f043 0304 	orr.w	r3, r3, #4
 800d880:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d882:	7efb      	ldrb	r3, [r7, #27]
 800d884:	2b10      	cmp	r3, #16
 800d886:	d002      	beq.n	800d88e <HAL_I2C_ER_IRQHandler+0xf4>
 800d888:	7efb      	ldrb	r3, [r7, #27]
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d107      	bne.n	800d89e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d89c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	0adb      	lsrs	r3, r3, #11
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00e      	beq.n	800d8c8 <HAL_I2C_ER_IRQHandler+0x12e>
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	0a1b      	lsrs	r3, r3, #8
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d008      	beq.n	800d8c8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b8:	f043 0308 	orr.w	r3, r3, #8
 800d8bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d8c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d008      	beq.n	800d8e0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	431a      	orrs	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f001 f896 	bl	800ea0c <I2C_ITError>
  }
}
 800d8e0:	bf00      	nop
 800d8e2:	3728      	adds	r7, #40	; 0x28
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
 800d944:	4613      	mov	r3, r2
 800d946:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d970:	bf00      	nop
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d984:	bf00      	nop
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d998:	bf00      	nop
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d150      	bne.n	800da80 <I2C_MasterTransmit_TXE+0xc8>
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	2b21      	cmp	r3, #33	; 0x21
 800d9e2:	d14d      	bne.n	800da80 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2b08      	cmp	r3, #8
 800d9e8:	d01d      	beq.n	800da26 <I2C_MasterTransmit_TXE+0x6e>
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b20      	cmp	r3, #32
 800d9ee:	d01a      	beq.n	800da26 <I2C_MasterTransmit_TXE+0x6e>
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d9f6:	d016      	beq.n	800da26 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800da06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2211      	movs	r2, #17
 800da0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2220      	movs	r2, #32
 800da1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff ff62 	bl	800d8e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da24:	e060      	b.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685a      	ldr	r2, [r3, #4]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800da34:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da44:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2220      	movs	r2, #32
 800da50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b40      	cmp	r3, #64	; 0x40
 800da5e:	d107      	bne.n	800da70 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff ff7d 	bl	800d968 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da6e:	e03b      	b.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff ff35 	bl	800d8e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da7e:	e033      	b.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800da80:	7bfb      	ldrb	r3, [r7, #15]
 800da82:	2b21      	cmp	r3, #33	; 0x21
 800da84:	d005      	beq.n	800da92 <I2C_MasterTransmit_TXE+0xda>
 800da86:	7bbb      	ldrb	r3, [r7, #14]
 800da88:	2b40      	cmp	r3, #64	; 0x40
 800da8a:	d12d      	bne.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	2b22      	cmp	r3, #34	; 0x22
 800da90:	d12a      	bne.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da96:	b29b      	uxth	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d108      	bne.n	800daae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daaa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800daac:	e01c      	b.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b40      	cmp	r3, #64	; 0x40
 800dab8:	d103      	bne.n	800dac2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f88e 	bl	800dbdc <I2C_MemoryTransmit_TXE_BTF>
}
 800dac0:	e012      	b.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac6:	781a      	ldrb	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dadc:	b29b      	uxth	r3, r3
 800dade:	3b01      	subs	r3, #1
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dae6:	e7ff      	b.n	800dae8 <I2C_MasterTransmit_TXE+0x130>
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b21      	cmp	r3, #33	; 0x21
 800db08:	d164      	bne.n	800dbd4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db0e:	b29b      	uxth	r3, r3
 800db10:	2b00      	cmp	r3, #0
 800db12:	d012      	beq.n	800db3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db18:	781a      	ldrb	r2, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db24:	1c5a      	adds	r2, r3, #1
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db2e:	b29b      	uxth	r3, r3
 800db30:	3b01      	subs	r3, #1
 800db32:	b29a      	uxth	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800db38:	e04c      	b.n	800dbd4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d01d      	beq.n	800db7c <I2C_MasterTransmit_BTF+0x8c>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b20      	cmp	r3, #32
 800db44:	d01a      	beq.n	800db7c <I2C_MasterTransmit_BTF+0x8c>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db4c:	d016      	beq.n	800db7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2211      	movs	r2, #17
 800db62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2220      	movs	r2, #32
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f7ff feb7 	bl	800d8e8 <HAL_I2C_MasterTxCpltCallback>
}
 800db7a:	e02b      	b.n	800dbd4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2220      	movs	r2, #32
 800dba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b40      	cmp	r3, #64	; 0x40
 800dbb4:	d107      	bne.n	800dbc6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff fed2 	bl	800d968 <HAL_I2C_MemTxCpltCallback>
}
 800dbc4:	e006      	b.n	800dbd4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff fe8a 	bl	800d8e8 <HAL_I2C_MasterTxCpltCallback>
}
 800dbd4:	bf00      	nop
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d11d      	bne.n	800dc30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d10b      	bne.n	800dc14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0c:	1c9a      	adds	r2, r3, #2
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800dc12:	e073      	b.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	121b      	asrs	r3, r3, #8
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc2e:	e065      	b.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d10b      	bne.n	800dc50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc4e:	e055      	b.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d151      	bne.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	2b22      	cmp	r3, #34	; 0x22
 800dc5c:	d10d      	bne.n	800dc7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc78:	e040      	b.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d015      	beq.n	800dcb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
 800dc86:	2b21      	cmp	r3, #33	; 0x21
 800dc88:	d112      	bne.n	800dcb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8e:	781a      	ldrb	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	1c5a      	adds	r2, r3, #1
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	3b01      	subs	r3, #1
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dcae:	e025      	b.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d120      	bne.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
 800dcbc:	2b21      	cmp	r3, #33	; 0x21
 800dcbe:	d11d      	bne.n	800dcfc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	685a      	ldr	r2, [r3, #4]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dcce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2220      	movs	r2, #32
 800dcea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff fe36 	bl	800d968 <HAL_I2C_MemTxCpltCallback>
}
 800dcfc:	bf00      	nop
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b22      	cmp	r3, #34	; 0x22
 800dd16:	f040 80a2 	bne.w	800de5e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	d921      	bls.n	800dd6c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	691a      	ldr	r2, [r3, #16]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd32:	b2d2      	uxtb	r2, r2
 800dd34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	3b01      	subs	r3, #1
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	2b03      	cmp	r3, #3
 800dd56:	f040 8082 	bne.w	800de5e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd68:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800dd6a:	e078      	b.n	800de5e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d074      	beq.n	800de5e <I2C_MasterReceive_RXNE+0x15a>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d002      	beq.n	800dd80 <I2C_MasterReceive_RXNE+0x7c>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d16e      	bne.n	800de5e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 fc43 	bl	800f60c <I2C_WaitOnSTOPRequestThroughIT>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d142      	bne.n	800de12 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd9a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	685a      	ldr	r2, [r3, #4]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ddaa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	691a      	ldr	r2, [r3, #16]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	b2d2      	uxtb	r2, r2
 800ddb8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b40      	cmp	r3, #64	; 0x40
 800dde4:	d10a      	bne.n	800ddfc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff fdc1 	bl	800d97c <HAL_I2C_MemRxCpltCallback>
}
 800ddfa:	e030      	b.n	800de5e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2212      	movs	r2, #18
 800de08:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff fd76 	bl	800d8fc <HAL_I2C_MasterRxCpltCallback>
}
 800de10:	e025      	b.n	800de5e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800de20:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	691a      	ldr	r2, [r3, #16]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de3e:	b29b      	uxth	r3, r3
 800de40:	3b01      	subs	r3, #1
 800de42:	b29a      	uxth	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2220      	movs	r2, #32
 800de4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff fd99 	bl	800d990 <HAL_I2C_ErrorCallback>
}
 800de5e:	bf00      	nop
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b084      	sub	sp, #16
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de72:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de78:	b29b      	uxth	r3, r3
 800de7a:	2b04      	cmp	r3, #4
 800de7c:	d11b      	bne.n	800deb6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685a      	ldr	r2, [r3, #4]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de8c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	691a      	ldr	r2, [r3, #16]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de98:	b2d2      	uxtb	r2, r2
 800de9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	1c5a      	adds	r2, r3, #1
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deaa:	b29b      	uxth	r3, r3
 800deac:	3b01      	subs	r3, #1
 800deae:	b29a      	uxth	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800deb4:	e0bd      	b.n	800e032 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deba:	b29b      	uxth	r3, r3
 800debc:	2b03      	cmp	r3, #3
 800debe:	d129      	bne.n	800df14 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dece:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d00a      	beq.n	800deec <I2C_MasterReceive_BTF+0x86>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b02      	cmp	r3, #2
 800deda:	d007      	beq.n	800deec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	691a      	ldr	r2, [r3, #16]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def6:	b2d2      	uxtb	r2, r2
 800def8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defe:	1c5a      	adds	r2, r3, #1
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3b01      	subs	r3, #1
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800df12:	e08e      	b.n	800e032 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df18:	b29b      	uxth	r3, r3
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d176      	bne.n	800e00c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d002      	beq.n	800df2a <I2C_MasterReceive_BTF+0xc4>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b10      	cmp	r3, #16
 800df28:	d108      	bne.n	800df3c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	e019      	b.n	800df70 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b04      	cmp	r3, #4
 800df40:	d002      	beq.n	800df48 <I2C_MasterReceive_BTF+0xe2>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b02      	cmp	r3, #2
 800df46:	d108      	bne.n	800df5a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	e00a      	b.n	800df70 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b10      	cmp	r3, #16
 800df5e:	d007      	beq.n	800df70 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	691a      	ldr	r2, [r3, #16]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7a:	b2d2      	uxtb	r2, r2
 800df7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	3b01      	subs	r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	691a      	ldr	r2, [r3, #16]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	b2d2      	uxtb	r2, r2
 800dfa2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa8:	1c5a      	adds	r2, r3, #1
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800dfca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2220      	movs	r2, #32
 800dfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	2b40      	cmp	r3, #64	; 0x40
 800dfde:	d10a      	bne.n	800dff6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff fcc4 	bl	800d97c <HAL_I2C_MemRxCpltCallback>
}
 800dff4:	e01d      	b.n	800e032 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2212      	movs	r2, #18
 800e002:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff fc79 	bl	800d8fc <HAL_I2C_MasterRxCpltCallback>
}
 800e00a:	e012      	b.n	800e032 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	691a      	ldr	r2, [r3, #16]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e016:	b2d2      	uxtb	r2, r2
 800e018:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	1c5a      	adds	r2, r3, #1
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e028:	b29b      	uxth	r3, r3
 800e02a:	3b01      	subs	r3, #1
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e032:	bf00      	nop
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b40      	cmp	r3, #64	; 0x40
 800e04c:	d117      	bne.n	800e07e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e052:	2b00      	cmp	r3, #0
 800e054:	d109      	bne.n	800e06a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	461a      	mov	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e066:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e068:	e067      	b.n	800e13a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	f043 0301 	orr.w	r3, r3, #1
 800e074:	b2da      	uxtb	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	611a      	str	r2, [r3, #16]
}
 800e07c:	e05d      	b.n	800e13a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e086:	d133      	bne.n	800e0f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b21      	cmp	r3, #33	; 0x21
 800e092:	d109      	bne.n	800e0a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	461a      	mov	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e0a4:	611a      	str	r2, [r3, #16]
 800e0a6:	e008      	b.n	800e0ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f043 0301 	orr.w	r3, r3, #1
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d004      	beq.n	800e0cc <I2C_Master_SB+0x92>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d108      	bne.n	800e0de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d032      	beq.n	800e13a <I2C_Master_SB+0x100>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d02d      	beq.n	800e13a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	685a      	ldr	r2, [r3, #4]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0ec:	605a      	str	r2, [r3, #4]
}
 800e0ee:	e024      	b.n	800e13a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10e      	bne.n	800e116 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	11db      	asrs	r3, r3, #7
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 0306 	and.w	r3, r3, #6
 800e106:	b2db      	uxtb	r3, r3
 800e108:	f063 030f 	orn	r3, r3, #15
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	611a      	str	r2, [r3, #16]
}
 800e114:	e011      	b.n	800e13a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d10d      	bne.n	800e13a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e122:	b29b      	uxth	r3, r3
 800e124:	11db      	asrs	r3, r3, #7
 800e126:	b2db      	uxtb	r3, r3
 800e128:	f003 0306 	and.w	r3, r3, #6
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f063 030e 	orn	r3, r3, #14
 800e132:	b2da      	uxtb	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	611a      	str	r2, [r3, #16]
}
 800e13a:	bf00      	nop
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e146:	b480      	push	{r7}
 800e148:	b083      	sub	sp, #12
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d004      	beq.n	800e16c <I2C_Master_ADD10+0x26>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d108      	bne.n	800e17e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00c      	beq.n	800e18e <I2C_Master_ADD10+0x48>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d007      	beq.n	800e18e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e18c:	605a      	str	r2, [r3, #4]
  }
}
 800e18e:	bf00      	nop
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e19a:	b480      	push	{r7}
 800e19c:	b091      	sub	sp, #68	; 0x44
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b22      	cmp	r3, #34	; 0x22
 800e1c2:	f040 8169 	bne.w	800e498 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10f      	bne.n	800e1ee <I2C_Master_ADDR+0x54>
 800e1ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1d2:	2b40      	cmp	r3, #64	; 0x40
 800e1d4:	d10b      	bne.n	800e1ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	695b      	ldr	r3, [r3, #20]
 800e1e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	e160      	b.n	800e4b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d11d      	bne.n	800e232 <I2C_Master_ADDR+0x98>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e1fe:	d118      	bne.n	800e232 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e200:	2300      	movs	r3, #0
 800e202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e224:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	651a      	str	r2, [r3, #80]	; 0x50
 800e230:	e13e      	b.n	800e4b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e236:	b29b      	uxth	r3, r3
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d113      	bne.n	800e264 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e23c:	2300      	movs	r3, #0
 800e23e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e260:	601a      	str	r2, [r3, #0]
 800e262:	e115      	b.n	800e490 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e268:	b29b      	uxth	r3, r3
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	f040 808a 	bne.w	800e384 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e272:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e276:	d137      	bne.n	800e2e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e286:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e296:	d113      	bne.n	800e2c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	e0e7      	b.n	800e490 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	623b      	str	r3, [r7, #32]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	623b      	str	r3, [r7, #32]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	623b      	str	r3, [r7, #32]
 800e2d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	e0d3      	b.n	800e490 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	2b08      	cmp	r3, #8
 800e2ec:	d02e      	beq.n	800e34c <I2C_Master_ADDR+0x1b2>
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f0:	2b20      	cmp	r3, #32
 800e2f2:	d02b      	beq.n	800e34c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f6:	2b12      	cmp	r3, #18
 800e2f8:	d102      	bne.n	800e300 <I2C_Master_ADDR+0x166>
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d125      	bne.n	800e34c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	2b04      	cmp	r3, #4
 800e304:	d00e      	beq.n	800e324 <I2C_Master_ADDR+0x18a>
 800e306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d00b      	beq.n	800e324 <I2C_Master_ADDR+0x18a>
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	2b10      	cmp	r3, #16
 800e310:	d008      	beq.n	800e324 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	e007      	b.n	800e334 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e332:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e334:	2300      	movs	r3, #0
 800e336:	61fb      	str	r3, [r7, #28]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	61fb      	str	r3, [r7, #28]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	61fb      	str	r3, [r7, #28]
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	e0a1      	b.n	800e490 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e35a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e35c:	2300      	movs	r3, #0
 800e35e:	61bb      	str	r3, [r7, #24]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	61bb      	str	r3, [r7, #24]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	61bb      	str	r3, [r7, #24]
 800e370:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e085      	b.n	800e490 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e388:	b29b      	uxth	r3, r3
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d14d      	bne.n	800e42a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e390:	2b04      	cmp	r3, #4
 800e392:	d016      	beq.n	800e3c2 <I2C_Master_ADDR+0x228>
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	2b02      	cmp	r3, #2
 800e398:	d013      	beq.n	800e3c2 <I2C_Master_ADDR+0x228>
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	2b10      	cmp	r3, #16
 800e39e:	d010      	beq.n	800e3c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	e007      	b.n	800e3d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3e0:	d117      	bne.n	800e412 <I2C_Master_ADDR+0x278>
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e3e8:	d00b      	beq.n	800e402 <I2C_Master_ADDR+0x268>
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d008      	beq.n	800e402 <I2C_Master_ADDR+0x268>
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f2:	2b08      	cmp	r3, #8
 800e3f4:	d005      	beq.n	800e402 <I2C_Master_ADDR+0x268>
 800e3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f8:	2b10      	cmp	r3, #16
 800e3fa:	d002      	beq.n	800e402 <I2C_Master_ADDR+0x268>
 800e3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fe:	2b20      	cmp	r3, #32
 800e400:	d107      	bne.n	800e412 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e410:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e412:	2300      	movs	r3, #0
 800e414:	617b      	str	r3, [r7, #20]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	617b      	str	r3, [r7, #20]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	699b      	ldr	r3, [r3, #24]
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	e032      	b.n	800e490 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e438:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e448:	d117      	bne.n	800e47a <I2C_Master_ADDR+0x2e0>
 800e44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e450:	d00b      	beq.n	800e46a <I2C_Master_ADDR+0x2d0>
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	2b01      	cmp	r3, #1
 800e456:	d008      	beq.n	800e46a <I2C_Master_ADDR+0x2d0>
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	2b08      	cmp	r3, #8
 800e45c:	d005      	beq.n	800e46a <I2C_Master_ADDR+0x2d0>
 800e45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e460:	2b10      	cmp	r3, #16
 800e462:	d002      	beq.n	800e46a <I2C_Master_ADDR+0x2d0>
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	2b20      	cmp	r3, #32
 800e468:	d107      	bne.n	800e47a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	685a      	ldr	r2, [r3, #4]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e478:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e47a:	2300      	movs	r3, #0
 800e47c:	613b      	str	r3, [r7, #16]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	613b      	str	r3, [r7, #16]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	613b      	str	r3, [r7, #16]
 800e48e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e496:	e00b      	b.n	800e4b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e498:	2300      	movs	r3, #0
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	695b      	ldr	r3, [r3, #20]
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	699b      	ldr	r3, [r3, #24]
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
}
 800e4ae:	e7ff      	b.n	800e4b0 <I2C_Master_ADDR+0x316>
 800e4b0:	bf00      	nop
 800e4b2:	3744      	adds	r7, #68	; 0x44
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d02b      	beq.n	800e52e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e6:	1c5a      	adds	r2, r3, #1
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d114      	bne.n	800e52e <I2C_SlaveTransmit_TXE+0x72>
 800e504:	7bfb      	ldrb	r3, [r7, #15]
 800e506:	2b29      	cmp	r3, #41	; 0x29
 800e508:	d111      	bne.n	800e52e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	685a      	ldr	r2, [r3, #4]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e518:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2221      	movs	r2, #33	; 0x21
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2228      	movs	r2, #40	; 0x28
 800e524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7ff f9f1 	bl	800d910 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e52e:	bf00      	nop
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e536:	b480      	push	{r7}
 800e538:	b083      	sub	sp, #12
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e542:	b29b      	uxth	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d011      	beq.n	800e56c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54c:	781a      	ldrb	r2, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e562:	b29b      	uxth	r3, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	b29a      	uxth	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e586:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d02c      	beq.n	800e5ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	691a      	ldr	r2, [r3, #16]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59c:	b2d2      	uxtb	r2, r2
 800e59e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d114      	bne.n	800e5ec <I2C_SlaveReceive_RXNE+0x74>
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
 800e5c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5c6:	d111      	bne.n	800e5ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2222      	movs	r2, #34	; 0x22
 800e5dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2228      	movs	r2, #40	; 0x28
 800e5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff f99c 	bl	800d924 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e5ec:	bf00      	nop
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e600:	b29b      	uxth	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d012      	beq.n	800e62c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	691a      	ldr	r2, [r3, #16]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e610:	b2d2      	uxtb	r2, r2
 800e612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e622:	b29b      	uxth	r3, r3
 800e624:	3b01      	subs	r3, #1
 800e626:	b29a      	uxth	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e62c:	bf00      	nop
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e642:	2300      	movs	r3, #0
 800e644:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e652:	2b28      	cmp	r3, #40	; 0x28
 800e654:	d127      	bne.n	800e6a6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e664:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	089b      	lsrs	r3, r3, #2
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e672:	2301      	movs	r3, #1
 800e674:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	09db      	lsrs	r3, r3, #7
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d103      	bne.n	800e68a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	81bb      	strh	r3, [r7, #12]
 800e688:	e002      	b.n	800e690 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	699b      	ldr	r3, [r3, #24]
 800e68e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e698:	89ba      	ldrh	r2, [r7, #12]
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff f94a 	bl	800d938 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e6a4:	e00e      	b.n	800e6c4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60bb      	str	r3, [r7, #8]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	695b      	ldr	r3, [r3, #20]
 800e6b0:	60bb      	str	r3, [r7, #8]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	699b      	ldr	r3, [r3, #24]
 800e6b8:	60bb      	str	r3, [r7, #8]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800e6c4:	bf00      	nop
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e6ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	60bb      	str	r3, [r7, #8]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	60bb      	str	r3, [r7, #8]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0201 	orr.w	r2, r2, #1
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e718:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e728:	d172      	bne.n	800e810 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
 800e72c:	2b22      	cmp	r3, #34	; 0x22
 800e72e:	d002      	beq.n	800e736 <I2C_Slave_STOPF+0x6a>
 800e730:	7bfb      	ldrb	r3, [r7, #15]
 800e732:	2b2a      	cmp	r3, #42	; 0x2a
 800e734:	d135      	bne.n	800e7a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	b29a      	uxth	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e748:	b29b      	uxth	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d005      	beq.n	800e75a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e752:	f043 0204 	orr.w	r2, r3, #4
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e768:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fd fc44 	bl	800bffc <HAL_DMA_GetState>
 800e774:	4603      	mov	r3, r0
 800e776:	2b01      	cmp	r3, #1
 800e778:	d049      	beq.n	800e80e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77e:	4a69      	ldr	r2, [pc, #420]	; (800e924 <I2C_Slave_STOPF+0x258>)
 800e780:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e786:	4618      	mov	r0, r3
 800e788:	f7fd fa8c 	bl	800bca4 <HAL_DMA_Abort_IT>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d03d      	beq.n	800e80e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e79c:	4610      	mov	r0, r2
 800e79e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e7a0:	e035      	b.n	800e80e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d005      	beq.n	800e7c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7be:	f043 0204 	orr.w	r2, r3, #4
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fd fc0e 	bl	800bffc <HAL_DMA_GetState>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d014      	beq.n	800e810 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ea:	4a4e      	ldr	r2, [pc, #312]	; (800e924 <I2C_Slave_STOPF+0x258>)
 800e7ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fd fa56 	bl	800bca4 <HAL_DMA_Abort_IT>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d008      	beq.n	800e810 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e808:	4610      	mov	r0, r2
 800e80a:	4798      	blx	r3
 800e80c:	e000      	b.n	800e810 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e80e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e814:	b29b      	uxth	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d03e      	beq.n	800e898 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	695b      	ldr	r3, [r3, #20]
 800e820:	f003 0304 	and.w	r3, r3, #4
 800e824:	2b04      	cmp	r3, #4
 800e826:	d112      	bne.n	800e84e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	691a      	ldr	r2, [r3, #16]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e832:	b2d2      	uxtb	r2, r2
 800e834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83a:	1c5a      	adds	r2, r3, #1
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e844:	b29b      	uxth	r3, r3
 800e846:	3b01      	subs	r3, #1
 800e848:	b29a      	uxth	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e858:	2b40      	cmp	r3, #64	; 0x40
 800e85a:	d112      	bne.n	800e882 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	691a      	ldr	r2, [r3, #16]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e866:	b2d2      	uxtb	r2, r2
 800e868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e878:	b29b      	uxth	r3, r3
 800e87a:	3b01      	subs	r3, #1
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e886:	b29b      	uxth	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d005      	beq.n	800e898 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e890:	f043 0204 	orr.w	r2, r3, #4
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d003      	beq.n	800e8a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f8b3 	bl	800ea0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e8a6:	e039      	b.n	800e91c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ac:	d109      	bne.n	800e8c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2228      	movs	r2, #40	; 0x28
 800e8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff f831 	bl	800d924 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b28      	cmp	r3, #40	; 0x28
 800e8cc:	d111      	bne.n	800e8f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a15      	ldr	r2, [pc, #84]	; (800e928 <I2C_Slave_STOPF+0x25c>)
 800e8d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7ff f832 	bl	800d954 <HAL_I2C_ListenCpltCallback>
}
 800e8f0:	e014      	b.n	800e91c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f6:	2b22      	cmp	r3, #34	; 0x22
 800e8f8:	d002      	beq.n	800e900 <I2C_Slave_STOPF+0x234>
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	2b22      	cmp	r3, #34	; 0x22
 800e8fe:	d10d      	bne.n	800e91c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2220      	movs	r2, #32
 800e90a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7ff f804 	bl	800d924 <HAL_I2C_SlaveRxCpltCallback>
}
 800e91c:	bf00      	nop
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	0800f20d 	.word	0x0800f20d
 800e928:	ffff0000 	.word	0xffff0000

0800e92c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e93a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e940:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	2b08      	cmp	r3, #8
 800e946:	d002      	beq.n	800e94e <I2C_Slave_AF+0x22>
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2b20      	cmp	r3, #32
 800e94c:	d129      	bne.n	800e9a2 <I2C_Slave_AF+0x76>
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	2b28      	cmp	r3, #40	; 0x28
 800e952:	d126      	bne.n	800e9a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a2c      	ldr	r2, [pc, #176]	; (800ea08 <I2C_Slave_AF+0xdc>)
 800e958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	685a      	ldr	r2, [r3, #4]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e968:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e972:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e982:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2220      	movs	r2, #32
 800e98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7fe ffda 	bl	800d954 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e9a0:	e02e      	b.n	800ea00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
 800e9a4:	2b21      	cmp	r3, #33	; 0x21
 800e9a6:	d126      	bne.n	800e9f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a17      	ldr	r2, [pc, #92]	; (800ea08 <I2C_Slave_AF+0xdc>)
 800e9ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2221      	movs	r2, #33	; 0x21
 800e9b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2220      	movs	r2, #32
 800e9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e9d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7fe ff8e 	bl	800d910 <HAL_I2C_SlaveTxCpltCallback>
}
 800e9f4:	e004      	b.n	800ea00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9fe:	615a      	str	r2, [r3, #20]
}
 800ea00:	bf00      	nop
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	ffff0000 	.word	0xffff0000

0800ea0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ea24:	7bbb      	ldrb	r3, [r7, #14]
 800ea26:	2b10      	cmp	r3, #16
 800ea28:	d002      	beq.n	800ea30 <I2C_ITError+0x24>
 800ea2a:	7bbb      	ldrb	r3, [r7, #14]
 800ea2c:	2b40      	cmp	r3, #64	; 0x40
 800ea2e:	d10a      	bne.n	800ea46 <I2C_ITError+0x3a>
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
 800ea32:	2b22      	cmp	r3, #34	; 0x22
 800ea34:	d107      	bne.n	800ea46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea46:	7bfb      	ldrb	r3, [r7, #15]
 800ea48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea4c:	2b28      	cmp	r3, #40	; 0x28
 800ea4e:	d107      	bne.n	800ea60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2228      	movs	r2, #40	; 0x28
 800ea5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ea5e:	e015      	b.n	800ea8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea6e:	d00a      	beq.n	800ea86 <I2C_ITError+0x7a>
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
 800ea72:	2b60      	cmp	r3, #96	; 0x60
 800ea74:	d007      	beq.n	800ea86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2220      	movs	r2, #32
 800ea7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea9a:	d162      	bne.n	800eb62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	685a      	ldr	r2, [r3, #4]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eaaa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d020      	beq.n	800eafc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eabe:	4a6a      	ldr	r2, [pc, #424]	; (800ec68 <I2C_ITError+0x25c>)
 800eac0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fd f8ec 	bl	800bca4 <HAL_DMA_Abort_IT>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f000 8089 	beq.w	800ebe6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f022 0201 	bic.w	r2, r2, #1
 800eae2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	4798      	blx	r3
 800eafa:	e074      	b.n	800ebe6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb00:	4a59      	ldr	r2, [pc, #356]	; (800ec68 <I2C_ITError+0x25c>)
 800eb02:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fd f8cb 	bl	800bca4 <HAL_DMA_Abort_IT>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d068      	beq.n	800ebe6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	695b      	ldr	r3, [r3, #20]
 800eb1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb1e:	2b40      	cmp	r3, #64	; 0x40
 800eb20:	d10b      	bne.n	800eb3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	691a      	ldr	r2, [r3, #16]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	b2d2      	uxtb	r2, r2
 800eb2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f022 0201 	bic.w	r2, r2, #1
 800eb48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2220      	movs	r2, #32
 800eb4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	4798      	blx	r3
 800eb60:	e041      	b.n	800ebe6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	2b60      	cmp	r3, #96	; 0x60
 800eb6c:	d125      	bne.n	800ebba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2220      	movs	r2, #32
 800eb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb86:	2b40      	cmp	r3, #64	; 0x40
 800eb88:	d10b      	bne.n	800eba2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	691a      	ldr	r2, [r3, #16]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb94:	b2d2      	uxtb	r2, r2
 800eb96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9c:	1c5a      	adds	r2, r3, #1
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f022 0201 	bic.w	r2, r2, #1
 800ebb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7fe fef6 	bl	800d9a4 <HAL_I2C_AbortCpltCallback>
 800ebb8:	e015      	b.n	800ebe6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebc4:	2b40      	cmp	r3, #64	; 0x40
 800ebc6:	d10b      	bne.n	800ebe0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	691a      	ldr	r2, [r3, #16]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd2:	b2d2      	uxtb	r2, r2
 800ebd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebda:	1c5a      	adds	r2, r3, #1
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7fe fed5 	bl	800d990 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	f003 0301 	and.w	r3, r3, #1
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10e      	bne.n	800ec14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d109      	bne.n	800ec14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d104      	bne.n	800ec14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d007      	beq.n	800ec24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	685a      	ldr	r2, [r3, #4]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ec22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec30:	f003 0304 	and.w	r3, r3, #4
 800ec34:	2b04      	cmp	r3, #4
 800ec36:	d113      	bne.n	800ec60 <I2C_ITError+0x254>
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	2b28      	cmp	r3, #40	; 0x28
 800ec3c:	d110      	bne.n	800ec60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4a0a      	ldr	r2, [pc, #40]	; (800ec6c <I2C_ITError+0x260>)
 800ec42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2220      	movs	r2, #32
 800ec4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7fe fe7a 	bl	800d954 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	0800f20d 	.word	0x0800f20d
 800ec6c:	ffff0000 	.word	0xffff0000

0800ec70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b088      	sub	sp, #32
 800ec74:	af02      	add	r7, sp, #8
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	603b      	str	r3, [r7, #0]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2b08      	cmp	r3, #8
 800ec8a:	d006      	beq.n	800ec9a <I2C_MasterRequestWrite+0x2a>
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d003      	beq.n	800ec9a <I2C_MasterRequestWrite+0x2a>
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ec98:	d108      	bne.n	800ecac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	e00b      	b.n	800ecc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb0:	2b12      	cmp	r3, #18
 800ecb2:	d107      	bne.n	800ecc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ecc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f000 fb43 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00d      	beq.n	800ecf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ece6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecea:	d103      	bne.n	800ecf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	e035      	b.n	800ed64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed00:	d108      	bne.n	800ed14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ed02:	897b      	ldrh	r3, [r7, #10]
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ed10:	611a      	str	r2, [r3, #16]
 800ed12:	e01b      	b.n	800ed4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ed14:	897b      	ldrh	r3, [r7, #10]
 800ed16:	11db      	asrs	r3, r3, #7
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	f003 0306 	and.w	r3, r3, #6
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	f063 030f 	orn	r3, r3, #15
 800ed24:	b2da      	uxtb	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	490e      	ldr	r1, [pc, #56]	; (800ed6c <I2C_MasterRequestWrite+0xfc>)
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f000 fb69 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e010      	b.n	800ed64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ed42:	897b      	ldrh	r3, [r7, #10]
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	4907      	ldr	r1, [pc, #28]	; (800ed70 <I2C_MasterRequestWrite+0x100>)
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f000 fb59 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	00010008 	.word	0x00010008
 800ed70:	00010002 	.word	0x00010002

0800ed74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b088      	sub	sp, #32
 800ed78:	af02      	add	r7, sp, #8
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	607a      	str	r2, [r7, #4]
 800ed7e:	603b      	str	r3, [r7, #0]
 800ed80:	460b      	mov	r3, r1
 800ed82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2b08      	cmp	r3, #8
 800ed9e:	d006      	beq.n	800edae <I2C_MasterRequestRead+0x3a>
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d003      	beq.n	800edae <I2C_MasterRequestRead+0x3a>
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800edac:	d108      	bne.n	800edc0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800edbc:	601a      	str	r2, [r3, #0]
 800edbe:	e00b      	b.n	800edd8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc4:	2b11      	cmp	r3, #17
 800edc6:	d107      	bne.n	800edd8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800edd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f000 fab9 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00d      	beq.n	800ee0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfe:	d103      	bne.n	800ee08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	e079      	b.n	800ef00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee14:	d108      	bne.n	800ee28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ee16:	897b      	ldrh	r3, [r7, #10]
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	f043 0301 	orr.w	r3, r3, #1
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	611a      	str	r2, [r3, #16]
 800ee26:	e05f      	b.n	800eee8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ee28:	897b      	ldrh	r3, [r7, #10]
 800ee2a:	11db      	asrs	r3, r3, #7
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	f003 0306 	and.w	r3, r3, #6
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	f063 030f 	orn	r3, r3, #15
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	4930      	ldr	r1, [pc, #192]	; (800ef08 <I2C_MasterRequestRead+0x194>)
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f000 fadf 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d001      	beq.n	800ee56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ee52:	2301      	movs	r3, #1
 800ee54:	e054      	b.n	800ef00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ee56:	897b      	ldrh	r3, [r7, #10]
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	4929      	ldr	r1, [pc, #164]	; (800ef0c <I2C_MasterRequestRead+0x198>)
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f000 facf 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e044      	b.n	800ef00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee76:	2300      	movs	r3, #0
 800ee78:	613b      	str	r3, [r7, #16]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	695b      	ldr	r3, [r3, #20]
 800ee80:	613b      	str	r3, [r7, #16]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	613b      	str	r3, [r7, #16]
 800ee8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f000 fa57 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00d      	beq.n	800eed0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eec2:	d103      	bne.n	800eecc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eeca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800eecc:	2303      	movs	r3, #3
 800eece:	e017      	b.n	800ef00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800eed0:	897b      	ldrh	r3, [r7, #10]
 800eed2:	11db      	asrs	r3, r3, #7
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	f003 0306 	and.w	r3, r3, #6
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	f063 030e 	orn	r3, r3, #14
 800eee0:	b2da      	uxtb	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	4907      	ldr	r1, [pc, #28]	; (800ef0c <I2C_MasterRequestRead+0x198>)
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 fa8b 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800eefa:	2301      	movs	r3, #1
 800eefc:	e000      	b.n	800ef00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	00010008 	.word	0x00010008
 800ef0c:	00010002 	.word	0x00010002

0800ef10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af02      	add	r7, sp, #8
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	4608      	mov	r0, r1
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4603      	mov	r3, r0
 800ef20:	817b      	strh	r3, [r7, #10]
 800ef22:	460b      	mov	r3, r1
 800ef24:	813b      	strh	r3, [r7, #8]
 800ef26:	4613      	mov	r3, r2
 800ef28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f000 fa08 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00d      	beq.n	800ef6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef60:	d103      	bne.n	800ef6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	e05f      	b.n	800f02e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ef6e:	897b      	ldrh	r3, [r7, #10]
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	461a      	mov	r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ef7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef80:	6a3a      	ldr	r2, [r7, #32]
 800ef82:	492d      	ldr	r1, [pc, #180]	; (800f038 <I2C_RequestMemoryWrite+0x128>)
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f000 fa40 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e04c      	b.n	800f02e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ef94:	2300      	movs	r3, #0
 800ef96:	617b      	str	r3, [r7, #20]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	695b      	ldr	r3, [r3, #20]
 800ef9e:	617b      	str	r3, [r7, #20]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	699b      	ldr	r3, [r3, #24]
 800efa6:	617b      	str	r3, [r7, #20]
 800efa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efac:	6a39      	ldr	r1, [r7, #32]
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 faaa 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00d      	beq.n	800efd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efbe:	2b04      	cmp	r3, #4
 800efc0:	d107      	bne.n	800efd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	e02b      	b.n	800f02e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d105      	bne.n	800efe8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800efdc:	893b      	ldrh	r3, [r7, #8]
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	611a      	str	r2, [r3, #16]
 800efe6:	e021      	b.n	800f02c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800efe8:	893b      	ldrh	r3, [r7, #8]
 800efea:	0a1b      	lsrs	r3, r3, #8
 800efec:	b29b      	uxth	r3, r3
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eff8:	6a39      	ldr	r1, [r7, #32]
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f000 fa84 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00d      	beq.n	800f022 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	d107      	bne.n	800f01e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f01c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f01e:	2301      	movs	r3, #1
 800f020:	e005      	b.n	800f02e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f022:	893b      	ldrh	r3, [r7, #8]
 800f024:	b2da      	uxtb	r2, r3
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	00010002 	.word	0x00010002

0800f03c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b088      	sub	sp, #32
 800f040:	af02      	add	r7, sp, #8
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	4608      	mov	r0, r1
 800f046:	4611      	mov	r1, r2
 800f048:	461a      	mov	r2, r3
 800f04a:	4603      	mov	r3, r0
 800f04c:	817b      	strh	r3, [r7, #10]
 800f04e:	460b      	mov	r3, r1
 800f050:	813b      	strh	r3, [r7, #8]
 800f052:	4613      	mov	r3, r2
 800f054:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f064:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	9300      	str	r3, [sp, #0]
 800f07a:	6a3b      	ldr	r3, [r7, #32]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f000 f96a 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00d      	beq.n	800f0aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f09c:	d103      	bne.n	800f0a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f0a6:	2303      	movs	r3, #3
 800f0a8:	e0aa      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f0aa:	897b      	ldrh	r3, [r7, #10]
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f0b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	6a3a      	ldr	r2, [r7, #32]
 800f0be:	4952      	ldr	r1, [pc, #328]	; (800f208 <I2C_RequestMemoryRead+0x1cc>)
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f9a2 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d001      	beq.n	800f0d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e097      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	617b      	str	r3, [r7, #20]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	695b      	ldr	r3, [r3, #20]
 800f0da:	617b      	str	r3, [r7, #20]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	699b      	ldr	r3, [r3, #24]
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e8:	6a39      	ldr	r1, [r7, #32]
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f000 fa0c 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00d      	beq.n	800f112 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fa:	2b04      	cmp	r3, #4
 800f0fc:	d107      	bne.n	800f10e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f10c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	e076      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f112:	88fb      	ldrh	r3, [r7, #6]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d105      	bne.n	800f124 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f118:	893b      	ldrh	r3, [r7, #8]
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	611a      	str	r2, [r3, #16]
 800f122:	e021      	b.n	800f168 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f124:	893b      	ldrh	r3, [r7, #8]
 800f126:	0a1b      	lsrs	r3, r3, #8
 800f128:	b29b      	uxth	r3, r3
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f134:	6a39      	ldr	r1, [r7, #32]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 f9e6 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00d      	beq.n	800f15e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f146:	2b04      	cmp	r3, #4
 800f148:	d107      	bne.n	800f15a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e050      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f15e:	893b      	ldrh	r3, [r7, #8]
 800f160:	b2da      	uxtb	r2, r3
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16a:	6a39      	ldr	r1, [r7, #32]
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 f9cb 	bl	800f508 <I2C_WaitOnTXEFlagUntilTimeout>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00d      	beq.n	800f194 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d107      	bne.n	800f190 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f18e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	e035      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	6a3b      	ldr	r3, [r7, #32]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 f8d3 	bl	800f35c <I2C_WaitOnFlagUntilTimeout>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00d      	beq.n	800f1d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ca:	d103      	bne.n	800f1d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f1d4:	2303      	movs	r3, #3
 800f1d6:	e013      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f1d8:	897b      	ldrh	r3, [r7, #10]
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	f043 0301 	orr.w	r3, r3, #1
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	6a3a      	ldr	r2, [r7, #32]
 800f1ec:	4906      	ldr	r1, [pc, #24]	; (800f208 <I2C_RequestMemoryRead+0x1cc>)
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f000 f90b 	bl	800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d001      	beq.n	800f1fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e000      	b.n	800f200 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3718      	adds	r7, #24
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	00010002 	.word	0x00010002

0800f20c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f214:	2300      	movs	r3, #0
 800f216:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f224:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800f226:	4b4b      	ldr	r3, [pc, #300]	; (800f354 <I2C_DMAAbort+0x148>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	08db      	lsrs	r3, r3, #3
 800f22c:	4a4a      	ldr	r2, [pc, #296]	; (800f358 <I2C_DMAAbort+0x14c>)
 800f22e:	fba2 2303 	umull	r2, r3, r2, r3
 800f232:	0a1a      	lsrs	r2, r3, #8
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	00da      	lsls	r2, r3, #3
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d106      	bne.n	800f254 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f24a:	f043 0220 	orr.w	r2, r3, #32
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800f252:	e00a      	b.n	800f26a <I2C_DMAAbort+0x5e>
    }
    count--;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	3b01      	subs	r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f268:	d0ea      	beq.n	800f240 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d003      	beq.n	800f27a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f276:	2200      	movs	r2, #0
 800f278:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d003      	beq.n	800f28a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f286:	2200      	movs	r2, #0
 800f288:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f298:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	2200      	movs	r2, #0
 800f29e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d003      	beq.n	800f2b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2bc:	2200      	movs	r2, #0
 800f2be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f022 0201 	bic.w	r2, r2, #1
 800f2ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	2b60      	cmp	r3, #96	; 0x60
 800f2da:	d10e      	bne.n	800f2fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	2220      	movs	r2, #32
 800f2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f2f2:	6978      	ldr	r0, [r7, #20]
 800f2f4:	f7fe fb56 	bl	800d9a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f2f8:	e027      	b.n	800f34a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f2fa:	7cfb      	ldrb	r3, [r7, #19]
 800f2fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f300:	2b28      	cmp	r3, #40	; 0x28
 800f302:	d117      	bne.n	800f334 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f042 0201 	orr.w	r2, r2, #1
 800f312:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f322:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2200      	movs	r2, #0
 800f328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	2228      	movs	r2, #40	; 0x28
 800f32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f332:	e007      	b.n	800f344 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2220      	movs	r2, #32
 800f338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	2200      	movs	r2, #0
 800f340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f344:	6978      	ldr	r0, [r7, #20]
 800f346:	f7fe fb23 	bl	800d990 <HAL_I2C_ErrorCallback>
}
 800f34a:	bf00      	nop
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	20000038 	.word	0x20000038
 800f358:	14f8b589 	.word	0x14f8b589

0800f35c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	603b      	str	r3, [r7, #0]
 800f368:	4613      	mov	r3, r2
 800f36a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f36c:	e025      	b.n	800f3ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f374:	d021      	beq.n	800f3ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f376:	f7fc f94f 	bl	800b618 <HAL_GetTick>
 800f37a:	4602      	mov	r2, r0
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	683a      	ldr	r2, [r7, #0]
 800f382:	429a      	cmp	r2, r3
 800f384:	d302      	bcc.n	800f38c <I2C_WaitOnFlagUntilTimeout+0x30>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d116      	bne.n	800f3ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2220      	movs	r2, #32
 800f396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a6:	f043 0220 	orr.w	r2, r3, #32
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e023      	b.n	800f402 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	0c1b      	lsrs	r3, r3, #16
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d10d      	bne.n	800f3e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	43da      	mvns	r2, r3
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	bf0c      	ite	eq
 800f3d6:	2301      	moveq	r3, #1
 800f3d8:	2300      	movne	r3, #0
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	461a      	mov	r2, r3
 800f3de:	e00c      	b.n	800f3fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	699b      	ldr	r3, [r3, #24]
 800f3e6:	43da      	mvns	r2, r3
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bf0c      	ite	eq
 800f3f2:	2301      	moveq	r3, #1
 800f3f4:	2300      	movne	r3, #0
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	79fb      	ldrb	r3, [r7, #7]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d0b6      	beq.n	800f36e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b084      	sub	sp, #16
 800f40e:	af00      	add	r7, sp, #0
 800f410:	60f8      	str	r0, [r7, #12]
 800f412:	60b9      	str	r1, [r7, #8]
 800f414:	607a      	str	r2, [r7, #4]
 800f416:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f418:	e051      	b.n	800f4be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f428:	d123      	bne.n	800f472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f438:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f442:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2220      	movs	r2, #32
 800f44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2200      	movs	r2, #0
 800f456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f45e:	f043 0204 	orr.w	r2, r3, #4
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f46e:	2301      	movs	r3, #1
 800f470:	e046      	b.n	800f500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f478:	d021      	beq.n	800f4be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f47a:	f7fc f8cd 	bl	800b618 <HAL_GetTick>
 800f47e:	4602      	mov	r2, r0
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	429a      	cmp	r2, r3
 800f488:	d302      	bcc.n	800f490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d116      	bne.n	800f4be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2200      	movs	r2, #0
 800f494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2220      	movs	r2, #32
 800f49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4aa:	f043 0220 	orr.w	r2, r3, #32
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e020      	b.n	800f500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	0c1b      	lsrs	r3, r3, #16
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d10c      	bne.n	800f4e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	43da      	mvns	r2, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	bf14      	ite	ne
 800f4da:	2301      	movne	r3, #1
 800f4dc:	2300      	moveq	r3, #0
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	e00b      	b.n	800f4fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	43da      	mvns	r2, r3
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	bf14      	ite	ne
 800f4f4:	2301      	movne	r3, #1
 800f4f6:	2300      	moveq	r3, #0
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d18d      	bne.n	800f41a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3710      	adds	r7, #16
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f514:	e02d      	b.n	800f572 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f000 f900 	bl	800f71c <I2C_IsAcknowledgeFailed>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	e02d      	b.n	800f582 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f52c:	d021      	beq.n	800f572 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f52e:	f7fc f873 	bl	800b618 <HAL_GetTick>
 800f532:	4602      	mov	r2, r0
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d302      	bcc.n	800f544 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d116      	bne.n	800f572 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2220      	movs	r2, #32
 800f54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55e:	f043 0220 	orr.w	r2, r3, #32
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f56e:	2301      	movs	r3, #1
 800f570:	e007      	b.n	800f582 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	695b      	ldr	r3, [r3, #20]
 800f578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f57c:	2b80      	cmp	r3, #128	; 0x80
 800f57e:	d1ca      	bne.n	800f516 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	60f8      	str	r0, [r7, #12]
 800f592:	60b9      	str	r1, [r7, #8]
 800f594:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f596:	e02d      	b.n	800f5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 f8bf 	bl	800f71c <I2C_IsAcknowledgeFailed>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d001      	beq.n	800f5a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e02d      	b.n	800f604 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ae:	d021      	beq.n	800f5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5b0:	f7fc f832 	bl	800b618 <HAL_GetTick>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	1ad3      	subs	r3, r2, r3
 800f5ba:	68ba      	ldr	r2, [r7, #8]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d302      	bcc.n	800f5c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d116      	bne.n	800f5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2220      	movs	r2, #32
 800f5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e0:	f043 0220 	orr.w	r2, r3, #32
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e007      	b.n	800f604 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	695b      	ldr	r3, [r3, #20]
 800f5fa:	f003 0304 	and.w	r3, r3, #4
 800f5fe:	2b04      	cmp	r3, #4
 800f600:	d1ca      	bne.n	800f598 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f614:	2300      	movs	r3, #0
 800f616:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f618:	4b13      	ldr	r3, [pc, #76]	; (800f668 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	08db      	lsrs	r3, r3, #3
 800f61e:	4a13      	ldr	r2, [pc, #76]	; (800f66c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f620:	fba2 2303 	umull	r2, r3, r2, r3
 800f624:	0a1a      	lsrs	r2, r3, #8
 800f626:	4613      	mov	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	4413      	add	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	3b01      	subs	r3, #1
 800f632:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d107      	bne.n	800f64a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f63e:	f043 0220 	orr.w	r2, r3, #32
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f646:	2301      	movs	r3, #1
 800f648:	e008      	b.n	800f65c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f658:	d0e9      	beq.n	800f62e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f65a:	2300      	movs	r3, #0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3714      	adds	r7, #20
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr
 800f668:	20000038 	.word	0x20000038
 800f66c:	14f8b589 	.word	0x14f8b589

0800f670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f67c:	e042      	b.n	800f704 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	f003 0310 	and.w	r3, r3, #16
 800f688:	2b10      	cmp	r3, #16
 800f68a:	d119      	bne.n	800f6c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f06f 0210 	mvn.w	r2, #16
 800f694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2200      	movs	r2, #0
 800f69a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2220      	movs	r2, #32
 800f6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e029      	b.n	800f714 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6c0:	f7fb ffaa 	bl	800b618 <HAL_GetTick>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d302      	bcc.n	800f6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d116      	bne.n	800f704 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2220      	movs	r2, #32
 800f6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f0:	f043 0220 	orr.w	r2, r3, #32
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f700:	2301      	movs	r3, #1
 800f702:	e007      	b.n	800f714 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f70e:	2b40      	cmp	r3, #64	; 0x40
 800f710:	d1b5      	bne.n	800f67e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f72e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f732:	d11b      	bne.n	800f76c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f73c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2220      	movs	r2, #32
 800f748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f758:	f043 0204 	orr.w	r2, r3, #4
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f768:	2301      	movs	r3, #1
 800f76a:	e000      	b.n	800f76e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	370c      	adds	r7, #12
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr

0800f77a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f77a:	b480      	push	{r7}
 800f77c:	b083      	sub	sp, #12
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f786:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f78a:	d103      	bne.n	800f794 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2201      	movs	r2, #1
 800f790:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f792:	e007      	b.n	800f7a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f798:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f79c:	d102      	bne.n	800f7a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2208      	movs	r2, #8
 800f7a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f7a4:	bf00      	nop
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d101      	bne.n	800f7c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e267      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 0301 	and.w	r3, r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d075      	beq.n	800f8ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f7ce:	4b88      	ldr	r3, [pc, #544]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	f003 030c 	and.w	r3, r3, #12
 800f7d6:	2b04      	cmp	r3, #4
 800f7d8:	d00c      	beq.n	800f7f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f7da:	4b85      	ldr	r3, [pc, #532]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f7e2:	2b08      	cmp	r3, #8
 800f7e4:	d112      	bne.n	800f80c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f7e6:	4b82      	ldr	r3, [pc, #520]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7f2:	d10b      	bne.n	800f80c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7f4:	4b7e      	ldr	r3, [pc, #504]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d05b      	beq.n	800f8b8 <HAL_RCC_OscConfig+0x108>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d157      	bne.n	800f8b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f808:	2301      	movs	r3, #1
 800f80a:	e242      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f814:	d106      	bne.n	800f824 <HAL_RCC_OscConfig+0x74>
 800f816:	4b76      	ldr	r3, [pc, #472]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a75      	ldr	r2, [pc, #468]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f81c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	e01d      	b.n	800f860 <HAL_RCC_OscConfig+0xb0>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f82c:	d10c      	bne.n	800f848 <HAL_RCC_OscConfig+0x98>
 800f82e:	4b70      	ldr	r3, [pc, #448]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a6f      	ldr	r2, [pc, #444]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	4b6d      	ldr	r3, [pc, #436]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a6c      	ldr	r2, [pc, #432]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f844:	6013      	str	r3, [r2, #0]
 800f846:	e00b      	b.n	800f860 <HAL_RCC_OscConfig+0xb0>
 800f848:	4b69      	ldr	r3, [pc, #420]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a68      	ldr	r2, [pc, #416]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f84e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	4b66      	ldr	r3, [pc, #408]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a65      	ldr	r2, [pc, #404]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f85a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f85e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d013      	beq.n	800f890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f868:	f7fb fed6 	bl	800b618 <HAL_GetTick>
 800f86c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f86e:	e008      	b.n	800f882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f870:	f7fb fed2 	bl	800b618 <HAL_GetTick>
 800f874:	4602      	mov	r2, r0
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	2b64      	cmp	r3, #100	; 0x64
 800f87c:	d901      	bls.n	800f882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e207      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f882:	4b5b      	ldr	r3, [pc, #364]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d0f0      	beq.n	800f870 <HAL_RCC_OscConfig+0xc0>
 800f88e:	e014      	b.n	800f8ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f890:	f7fb fec2 	bl	800b618 <HAL_GetTick>
 800f894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f896:	e008      	b.n	800f8aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f898:	f7fb febe 	bl	800b618 <HAL_GetTick>
 800f89c:	4602      	mov	r2, r0
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	2b64      	cmp	r3, #100	; 0x64
 800f8a4:	d901      	bls.n	800f8aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f8a6:	2303      	movs	r3, #3
 800f8a8:	e1f3      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f8aa:	4b51      	ldr	r3, [pc, #324]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1f0      	bne.n	800f898 <HAL_RCC_OscConfig+0xe8>
 800f8b6:	e000      	b.n	800f8ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f8b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f003 0302 	and.w	r3, r3, #2
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d063      	beq.n	800f98e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f8c6:	4b4a      	ldr	r3, [pc, #296]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	f003 030c 	and.w	r3, r3, #12
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00b      	beq.n	800f8ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f8d2:	4b47      	ldr	r3, [pc, #284]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f8d4:	689b      	ldr	r3, [r3, #8]
 800f8d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f8da:	2b08      	cmp	r3, #8
 800f8dc:	d11c      	bne.n	800f918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f8de:	4b44      	ldr	r3, [pc, #272]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d116      	bne.n	800f918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f8ea:	4b41      	ldr	r3, [pc, #260]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f003 0302 	and.w	r3, r3, #2
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d005      	beq.n	800f902 <HAL_RCC_OscConfig+0x152>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d001      	beq.n	800f902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e1c7      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f902:	4b3b      	ldr	r3, [pc, #236]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	4937      	ldr	r1, [pc, #220]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f912:	4313      	orrs	r3, r2
 800f914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f916:	e03a      	b.n	800f98e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d020      	beq.n	800f962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f920:	4b34      	ldr	r3, [pc, #208]	; (800f9f4 <HAL_RCC_OscConfig+0x244>)
 800f922:	2201      	movs	r2, #1
 800f924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f926:	f7fb fe77 	bl	800b618 <HAL_GetTick>
 800f92a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f92c:	e008      	b.n	800f940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f92e:	f7fb fe73 	bl	800b618 <HAL_GetTick>
 800f932:	4602      	mov	r2, r0
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d901      	bls.n	800f940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f93c:	2303      	movs	r3, #3
 800f93e:	e1a8      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f940:	4b2b      	ldr	r3, [pc, #172]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f003 0302 	and.w	r3, r3, #2
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d0f0      	beq.n	800f92e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f94c:	4b28      	ldr	r3, [pc, #160]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	691b      	ldr	r3, [r3, #16]
 800f958:	00db      	lsls	r3, r3, #3
 800f95a:	4925      	ldr	r1, [pc, #148]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f95c:	4313      	orrs	r3, r2
 800f95e:	600b      	str	r3, [r1, #0]
 800f960:	e015      	b.n	800f98e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f962:	4b24      	ldr	r3, [pc, #144]	; (800f9f4 <HAL_RCC_OscConfig+0x244>)
 800f964:	2200      	movs	r2, #0
 800f966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f968:	f7fb fe56 	bl	800b618 <HAL_GetTick>
 800f96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f96e:	e008      	b.n	800f982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f970:	f7fb fe52 	bl	800b618 <HAL_GetTick>
 800f974:	4602      	mov	r2, r0
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d901      	bls.n	800f982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e187      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f982:	4b1b      	ldr	r3, [pc, #108]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f003 0302 	and.w	r3, r3, #2
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1f0      	bne.n	800f970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f003 0308 	and.w	r3, r3, #8
 800f996:	2b00      	cmp	r3, #0
 800f998:	d036      	beq.n	800fa08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d016      	beq.n	800f9d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f9a2:	4b15      	ldr	r3, [pc, #84]	; (800f9f8 <HAL_RCC_OscConfig+0x248>)
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f9a8:	f7fb fe36 	bl	800b618 <HAL_GetTick>
 800f9ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f9ae:	e008      	b.n	800f9c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f9b0:	f7fb fe32 	bl	800b618 <HAL_GetTick>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d901      	bls.n	800f9c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	e167      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f9c2:	4b0b      	ldr	r3, [pc, #44]	; (800f9f0 <HAL_RCC_OscConfig+0x240>)
 800f9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9c6:	f003 0302 	and.w	r3, r3, #2
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d0f0      	beq.n	800f9b0 <HAL_RCC_OscConfig+0x200>
 800f9ce:	e01b      	b.n	800fa08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f9d0:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <HAL_RCC_OscConfig+0x248>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f9d6:	f7fb fe1f 	bl	800b618 <HAL_GetTick>
 800f9da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f9dc:	e00e      	b.n	800f9fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f9de:	f7fb fe1b 	bl	800b618 <HAL_GetTick>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	d907      	bls.n	800f9fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	e150      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
 800f9f0:	40023800 	.word	0x40023800
 800f9f4:	42470000 	.word	0x42470000
 800f9f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f9fc:	4b88      	ldr	r3, [pc, #544]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800f9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa00:	f003 0302 	and.w	r3, r3, #2
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d1ea      	bne.n	800f9de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f003 0304 	and.w	r3, r3, #4
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f000 8097 	beq.w	800fb44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fa16:	2300      	movs	r3, #0
 800fa18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fa1a:	4b81      	ldr	r3, [pc, #516]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d10f      	bne.n	800fa46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fa26:	2300      	movs	r3, #0
 800fa28:	60bb      	str	r3, [r7, #8]
 800fa2a:	4b7d      	ldr	r3, [pc, #500]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa2e:	4a7c      	ldr	r2, [pc, #496]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fa30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa34:	6413      	str	r3, [r2, #64]	; 0x40
 800fa36:	4b7a      	ldr	r3, [pc, #488]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa3e:	60bb      	str	r3, [r7, #8]
 800fa40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fa42:	2301      	movs	r3, #1
 800fa44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa46:	4b77      	ldr	r3, [pc, #476]	; (800fc24 <HAL_RCC_OscConfig+0x474>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d118      	bne.n	800fa84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fa52:	4b74      	ldr	r3, [pc, #464]	; (800fc24 <HAL_RCC_OscConfig+0x474>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a73      	ldr	r2, [pc, #460]	; (800fc24 <HAL_RCC_OscConfig+0x474>)
 800fa58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fa5e:	f7fb fddb 	bl	800b618 <HAL_GetTick>
 800fa62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa64:	e008      	b.n	800fa78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fa66:	f7fb fdd7 	bl	800b618 <HAL_GetTick>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	2b02      	cmp	r3, #2
 800fa72:	d901      	bls.n	800fa78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800fa74:	2303      	movs	r3, #3
 800fa76:	e10c      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa78:	4b6a      	ldr	r3, [pc, #424]	; (800fc24 <HAL_RCC_OscConfig+0x474>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d0f0      	beq.n	800fa66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	689b      	ldr	r3, [r3, #8]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d106      	bne.n	800fa9a <HAL_RCC_OscConfig+0x2ea>
 800fa8c:	4b64      	ldr	r3, [pc, #400]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fa8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa90:	4a63      	ldr	r2, [pc, #396]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fa92:	f043 0301 	orr.w	r3, r3, #1
 800fa96:	6713      	str	r3, [r2, #112]	; 0x70
 800fa98:	e01c      	b.n	800fad4 <HAL_RCC_OscConfig+0x324>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	2b05      	cmp	r3, #5
 800faa0:	d10c      	bne.n	800fabc <HAL_RCC_OscConfig+0x30c>
 800faa2:	4b5f      	ldr	r3, [pc, #380]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800faa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faa6:	4a5e      	ldr	r2, [pc, #376]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800faa8:	f043 0304 	orr.w	r3, r3, #4
 800faac:	6713      	str	r3, [r2, #112]	; 0x70
 800faae:	4b5c      	ldr	r3, [pc, #368]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fab2:	4a5b      	ldr	r2, [pc, #364]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fab4:	f043 0301 	orr.w	r3, r3, #1
 800fab8:	6713      	str	r3, [r2, #112]	; 0x70
 800faba:	e00b      	b.n	800fad4 <HAL_RCC_OscConfig+0x324>
 800fabc:	4b58      	ldr	r3, [pc, #352]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fac0:	4a57      	ldr	r2, [pc, #348]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fac2:	f023 0301 	bic.w	r3, r3, #1
 800fac6:	6713      	str	r3, [r2, #112]	; 0x70
 800fac8:	4b55      	ldr	r3, [pc, #340]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800faca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800facc:	4a54      	ldr	r2, [pc, #336]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800face:	f023 0304 	bic.w	r3, r3, #4
 800fad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d015      	beq.n	800fb08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fadc:	f7fb fd9c 	bl	800b618 <HAL_GetTick>
 800fae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fae2:	e00a      	b.n	800fafa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fae4:	f7fb fd98 	bl	800b618 <HAL_GetTick>
 800fae8:	4602      	mov	r2, r0
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	f241 3288 	movw	r2, #5000	; 0x1388
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d901      	bls.n	800fafa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800faf6:	2303      	movs	r3, #3
 800faf8:	e0cb      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fafa:	4b49      	ldr	r3, [pc, #292]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fafe:	f003 0302 	and.w	r3, r3, #2
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d0ee      	beq.n	800fae4 <HAL_RCC_OscConfig+0x334>
 800fb06:	e014      	b.n	800fb32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fb08:	f7fb fd86 	bl	800b618 <HAL_GetTick>
 800fb0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fb0e:	e00a      	b.n	800fb26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fb10:	f7fb fd82 	bl	800b618 <HAL_GetTick>
 800fb14:	4602      	mov	r2, r0
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d901      	bls.n	800fb26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800fb22:	2303      	movs	r3, #3
 800fb24:	e0b5      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fb26:	4b3e      	ldr	r3, [pc, #248]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb2a:	f003 0302 	and.w	r3, r3, #2
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1ee      	bne.n	800fb10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fb32:	7dfb      	ldrb	r3, [r7, #23]
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d105      	bne.n	800fb44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fb38:	4b39      	ldr	r3, [pc, #228]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb3c:	4a38      	ldr	r2, [pc, #224]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fb3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 80a1 	beq.w	800fc90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fb4e:	4b34      	ldr	r3, [pc, #208]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	f003 030c 	and.w	r3, r3, #12
 800fb56:	2b08      	cmp	r3, #8
 800fb58:	d05c      	beq.n	800fc14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	699b      	ldr	r3, [r3, #24]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	d141      	bne.n	800fbe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb62:	4b31      	ldr	r3, [pc, #196]	; (800fc28 <HAL_RCC_OscConfig+0x478>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb68:	f7fb fd56 	bl	800b618 <HAL_GetTick>
 800fb6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb6e:	e008      	b.n	800fb82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb70:	f7fb fd52 	bl	800b618 <HAL_GetTick>
 800fb74:	4602      	mov	r2, r0
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d901      	bls.n	800fb82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800fb7e:	2303      	movs	r3, #3
 800fb80:	e087      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb82:	4b27      	ldr	r3, [pc, #156]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1f0      	bne.n	800fb70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	69da      	ldr	r2, [r3, #28]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	431a      	orrs	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9c:	019b      	lsls	r3, r3, #6
 800fb9e:	431a      	orrs	r2, r3
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba4:	085b      	lsrs	r3, r3, #1
 800fba6:	3b01      	subs	r3, #1
 800fba8:	041b      	lsls	r3, r3, #16
 800fbaa:	431a      	orrs	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb0:	061b      	lsls	r3, r3, #24
 800fbb2:	491b      	ldr	r1, [pc, #108]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fbb8:	4b1b      	ldr	r3, [pc, #108]	; (800fc28 <HAL_RCC_OscConfig+0x478>)
 800fbba:	2201      	movs	r2, #1
 800fbbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbbe:	f7fb fd2b 	bl	800b618 <HAL_GetTick>
 800fbc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fbc4:	e008      	b.n	800fbd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fbc6:	f7fb fd27 	bl	800b618 <HAL_GetTick>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	2b02      	cmp	r3, #2
 800fbd2:	d901      	bls.n	800fbd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	e05c      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fbd8:	4b11      	ldr	r3, [pc, #68]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d0f0      	beq.n	800fbc6 <HAL_RCC_OscConfig+0x416>
 800fbe4:	e054      	b.n	800fc90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fbe6:	4b10      	ldr	r3, [pc, #64]	; (800fc28 <HAL_RCC_OscConfig+0x478>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbec:	f7fb fd14 	bl	800b618 <HAL_GetTick>
 800fbf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fbf2:	e008      	b.n	800fc06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fbf4:	f7fb fd10 	bl	800b618 <HAL_GetTick>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d901      	bls.n	800fc06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800fc02:	2303      	movs	r3, #3
 800fc04:	e045      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fc06:	4b06      	ldr	r3, [pc, #24]	; (800fc20 <HAL_RCC_OscConfig+0x470>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1f0      	bne.n	800fbf4 <HAL_RCC_OscConfig+0x444>
 800fc12:	e03d      	b.n	800fc90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	699b      	ldr	r3, [r3, #24]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d107      	bne.n	800fc2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e038      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
 800fc20:	40023800 	.word	0x40023800
 800fc24:	40007000 	.word	0x40007000
 800fc28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fc2c:	4b1b      	ldr	r3, [pc, #108]	; (800fc9c <HAL_RCC_OscConfig+0x4ec>)
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	699b      	ldr	r3, [r3, #24]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d028      	beq.n	800fc8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d121      	bne.n	800fc8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d11a      	bne.n	800fc8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fc5c:	4013      	ands	r3, r2
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fc62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d111      	bne.n	800fc8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc72:	085b      	lsrs	r3, r3, #1
 800fc74:	3b01      	subs	r3, #1
 800fc76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d107      	bne.n	800fc8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d001      	beq.n	800fc90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3718      	adds	r7, #24
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	40023800 	.word	0x40023800

0800fca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d101      	bne.n	800fcb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e0cc      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fcb4:	4b68      	ldr	r3, [pc, #416]	; (800fe58 <HAL_RCC_ClockConfig+0x1b8>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f003 0307 	and.w	r3, r3, #7
 800fcbc:	683a      	ldr	r2, [r7, #0]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d90c      	bls.n	800fcdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fcc2:	4b65      	ldr	r3, [pc, #404]	; (800fe58 <HAL_RCC_ClockConfig+0x1b8>)
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	b2d2      	uxtb	r2, r2
 800fcc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fcca:	4b63      	ldr	r3, [pc, #396]	; (800fe58 <HAL_RCC_ClockConfig+0x1b8>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f003 0307 	and.w	r3, r3, #7
 800fcd2:	683a      	ldr	r2, [r7, #0]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d001      	beq.n	800fcdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e0b8      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f003 0302 	and.w	r3, r3, #2
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d020      	beq.n	800fd2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f003 0304 	and.w	r3, r3, #4
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d005      	beq.n	800fd00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fcf4:	4b59      	ldr	r3, [pc, #356]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	4a58      	ldr	r2, [pc, #352]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fcfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800fcfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f003 0308 	and.w	r3, r3, #8
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d005      	beq.n	800fd18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fd0c:	4b53      	ldr	r3, [pc, #332]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	4a52      	ldr	r2, [pc, #328]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fd16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fd18:	4b50      	ldr	r3, [pc, #320]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	494d      	ldr	r1, [pc, #308]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd26:	4313      	orrs	r3, r2
 800fd28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d044      	beq.n	800fdc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d107      	bne.n	800fd4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd3e:	4b47      	ldr	r3, [pc, #284]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d119      	bne.n	800fd7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e07f      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	2b02      	cmp	r3, #2
 800fd54:	d003      	beq.n	800fd5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fd5a:	2b03      	cmp	r3, #3
 800fd5c:	d107      	bne.n	800fd6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fd5e:	4b3f      	ldr	r3, [pc, #252]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d109      	bne.n	800fd7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e06f      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd6e:	4b3b      	ldr	r3, [pc, #236]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f003 0302 	and.w	r3, r3, #2
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e067      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fd7e:	4b37      	ldr	r3, [pc, #220]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f023 0203 	bic.w	r2, r3, #3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	4934      	ldr	r1, [pc, #208]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fd90:	f7fb fc42 	bl	800b618 <HAL_GetTick>
 800fd94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd96:	e00a      	b.n	800fdae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fd98:	f7fb fc3e 	bl	800b618 <HAL_GetTick>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	f241 3288 	movw	r2, #5000	; 0x1388
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d901      	bls.n	800fdae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fdaa:	2303      	movs	r3, #3
 800fdac:	e04f      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fdae:	4b2b      	ldr	r3, [pc, #172]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	f003 020c 	and.w	r2, r3, #12
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d1eb      	bne.n	800fd98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fdc0:	4b25      	ldr	r3, [pc, #148]	; (800fe58 <HAL_RCC_ClockConfig+0x1b8>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f003 0307 	and.w	r3, r3, #7
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d20c      	bcs.n	800fde8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fdce:	4b22      	ldr	r3, [pc, #136]	; (800fe58 <HAL_RCC_ClockConfig+0x1b8>)
 800fdd0:	683a      	ldr	r2, [r7, #0]
 800fdd2:	b2d2      	uxtb	r2, r2
 800fdd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fdd6:	4b20      	ldr	r3, [pc, #128]	; (800fe58 <HAL_RCC_ClockConfig+0x1b8>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f003 0307 	and.w	r3, r3, #7
 800fdde:	683a      	ldr	r2, [r7, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d001      	beq.n	800fde8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fde4:	2301      	movs	r3, #1
 800fde6:	e032      	b.n	800fe4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0304 	and.w	r3, r3, #4
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d008      	beq.n	800fe06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fdf4:	4b19      	ldr	r3, [pc, #100]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	4916      	ldr	r1, [pc, #88]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fe02:	4313      	orrs	r3, r2
 800fe04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f003 0308 	and.w	r3, r3, #8
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d009      	beq.n	800fe26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fe12:	4b12      	ldr	r3, [pc, #72]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	691b      	ldr	r3, [r3, #16]
 800fe1e:	00db      	lsls	r3, r3, #3
 800fe20:	490e      	ldr	r1, [pc, #56]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fe22:	4313      	orrs	r3, r2
 800fe24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fe26:	f000 f821 	bl	800fe6c <HAL_RCC_GetSysClockFreq>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	4b0b      	ldr	r3, [pc, #44]	; (800fe5c <HAL_RCC_ClockConfig+0x1bc>)
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	091b      	lsrs	r3, r3, #4
 800fe32:	f003 030f 	and.w	r3, r3, #15
 800fe36:	490a      	ldr	r1, [pc, #40]	; (800fe60 <HAL_RCC_ClockConfig+0x1c0>)
 800fe38:	5ccb      	ldrb	r3, [r1, r3]
 800fe3a:	fa22 f303 	lsr.w	r3, r2, r3
 800fe3e:	4a09      	ldr	r2, [pc, #36]	; (800fe64 <HAL_RCC_ClockConfig+0x1c4>)
 800fe40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <HAL_RCC_ClockConfig+0x1c8>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fb fba2 	bl	800b590 <HAL_InitTick>

  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	40023c00 	.word	0x40023c00
 800fe5c:	40023800 	.word	0x40023800
 800fe60:	08028174 	.word	0x08028174
 800fe64:	20000038 	.word	0x20000038
 800fe68:	2000003c 	.word	0x2000003c

0800fe6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fe6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe70:	b090      	sub	sp, #64	; 0x40
 800fe72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fe74:	2300      	movs	r3, #0
 800fe76:	637b      	str	r3, [r7, #52]	; 0x34
 800fe78:	2300      	movs	r3, #0
 800fe7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800fe80:	2300      	movs	r3, #0
 800fe82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fe84:	4b59      	ldr	r3, [pc, #356]	; (800ffec <HAL_RCC_GetSysClockFreq+0x180>)
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	f003 030c 	and.w	r3, r3, #12
 800fe8c:	2b08      	cmp	r3, #8
 800fe8e:	d00d      	beq.n	800feac <HAL_RCC_GetSysClockFreq+0x40>
 800fe90:	2b08      	cmp	r3, #8
 800fe92:	f200 80a1 	bhi.w	800ffd8 <HAL_RCC_GetSysClockFreq+0x16c>
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <HAL_RCC_GetSysClockFreq+0x34>
 800fe9a:	2b04      	cmp	r3, #4
 800fe9c:	d003      	beq.n	800fea6 <HAL_RCC_GetSysClockFreq+0x3a>
 800fe9e:	e09b      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fea0:	4b53      	ldr	r3, [pc, #332]	; (800fff0 <HAL_RCC_GetSysClockFreq+0x184>)
 800fea2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800fea4:	e09b      	b.n	800ffde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fea6:	4b53      	ldr	r3, [pc, #332]	; (800fff4 <HAL_RCC_GetSysClockFreq+0x188>)
 800fea8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800feaa:	e098      	b.n	800ffde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800feac:	4b4f      	ldr	r3, [pc, #316]	; (800ffec <HAL_RCC_GetSysClockFreq+0x180>)
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800feb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800feb6:	4b4d      	ldr	r3, [pc, #308]	; (800ffec <HAL_RCC_GetSysClockFreq+0x180>)
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d028      	beq.n	800ff14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fec2:	4b4a      	ldr	r3, [pc, #296]	; (800ffec <HAL_RCC_GetSysClockFreq+0x180>)
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	099b      	lsrs	r3, r3, #6
 800fec8:	2200      	movs	r2, #0
 800feca:	623b      	str	r3, [r7, #32]
 800fecc:	627a      	str	r2, [r7, #36]	; 0x24
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fed4:	2100      	movs	r1, #0
 800fed6:	4b47      	ldr	r3, [pc, #284]	; (800fff4 <HAL_RCC_GetSysClockFreq+0x188>)
 800fed8:	fb03 f201 	mul.w	r2, r3, r1
 800fedc:	2300      	movs	r3, #0
 800fede:	fb00 f303 	mul.w	r3, r0, r3
 800fee2:	4413      	add	r3, r2
 800fee4:	4a43      	ldr	r2, [pc, #268]	; (800fff4 <HAL_RCC_GetSysClockFreq+0x188>)
 800fee6:	fba0 1202 	umull	r1, r2, r0, r2
 800feea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800feec:	460a      	mov	r2, r1
 800feee:	62ba      	str	r2, [r7, #40]	; 0x28
 800fef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fef2:	4413      	add	r3, r2
 800fef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef8:	2200      	movs	r2, #0
 800fefa:	61bb      	str	r3, [r7, #24]
 800fefc:	61fa      	str	r2, [r7, #28]
 800fefe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ff06:	f7f0 fed7 	bl	8000cb8 <__aeabi_uldivmod>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	4613      	mov	r3, r2
 800ff10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff12:	e053      	b.n	800ffbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ff14:	4b35      	ldr	r3, [pc, #212]	; (800ffec <HAL_RCC_GetSysClockFreq+0x180>)
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	099b      	lsrs	r3, r3, #6
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	613b      	str	r3, [r7, #16]
 800ff1e:	617a      	str	r2, [r7, #20]
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ff26:	f04f 0b00 	mov.w	fp, #0
 800ff2a:	4652      	mov	r2, sl
 800ff2c:	465b      	mov	r3, fp
 800ff2e:	f04f 0000 	mov.w	r0, #0
 800ff32:	f04f 0100 	mov.w	r1, #0
 800ff36:	0159      	lsls	r1, r3, #5
 800ff38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ff3c:	0150      	lsls	r0, r2, #5
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	ebb2 080a 	subs.w	r8, r2, sl
 800ff46:	eb63 090b 	sbc.w	r9, r3, fp
 800ff4a:	f04f 0200 	mov.w	r2, #0
 800ff4e:	f04f 0300 	mov.w	r3, #0
 800ff52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ff56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ff5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ff5e:	ebb2 0408 	subs.w	r4, r2, r8
 800ff62:	eb63 0509 	sbc.w	r5, r3, r9
 800ff66:	f04f 0200 	mov.w	r2, #0
 800ff6a:	f04f 0300 	mov.w	r3, #0
 800ff6e:	00eb      	lsls	r3, r5, #3
 800ff70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ff74:	00e2      	lsls	r2, r4, #3
 800ff76:	4614      	mov	r4, r2
 800ff78:	461d      	mov	r5, r3
 800ff7a:	eb14 030a 	adds.w	r3, r4, sl
 800ff7e:	603b      	str	r3, [r7, #0]
 800ff80:	eb45 030b 	adc.w	r3, r5, fp
 800ff84:	607b      	str	r3, [r7, #4]
 800ff86:	f04f 0200 	mov.w	r2, #0
 800ff8a:	f04f 0300 	mov.w	r3, #0
 800ff8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ff92:	4629      	mov	r1, r5
 800ff94:	028b      	lsls	r3, r1, #10
 800ff96:	4621      	mov	r1, r4
 800ff98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	028a      	lsls	r2, r1, #10
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	60bb      	str	r3, [r7, #8]
 800ffaa:	60fa      	str	r2, [r7, #12]
 800ffac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ffb0:	f7f0 fe82 	bl	8000cb8 <__aeabi_uldivmod>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	4613      	mov	r3, r2
 800ffba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ffbc:	4b0b      	ldr	r3, [pc, #44]	; (800ffec <HAL_RCC_GetSysClockFreq+0x180>)
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	0c1b      	lsrs	r3, r3, #16
 800ffc2:	f003 0303 	and.w	r3, r3, #3
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ffcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ffd6:	e002      	b.n	800ffde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ffd8:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <HAL_RCC_GetSysClockFreq+0x184>)
 800ffda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ffdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ffde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3740      	adds	r7, #64	; 0x40
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffea:	bf00      	nop
 800ffec:	40023800 	.word	0x40023800
 800fff0:	00f42400 	.word	0x00f42400
 800fff4:	017d7840 	.word	0x017d7840

0800fff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fff8:	b480      	push	{r7}
 800fffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fffc:	4b03      	ldr	r3, [pc, #12]	; (801000c <HAL_RCC_GetHCLKFreq+0x14>)
 800fffe:	681b      	ldr	r3, [r3, #0]
}
 8010000:	4618      	mov	r0, r3
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	20000038 	.word	0x20000038

08010010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010014:	f7ff fff0 	bl	800fff8 <HAL_RCC_GetHCLKFreq>
 8010018:	4602      	mov	r2, r0
 801001a:	4b05      	ldr	r3, [pc, #20]	; (8010030 <HAL_RCC_GetPCLK1Freq+0x20>)
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	0a9b      	lsrs	r3, r3, #10
 8010020:	f003 0307 	and.w	r3, r3, #7
 8010024:	4903      	ldr	r1, [pc, #12]	; (8010034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010026:	5ccb      	ldrb	r3, [r1, r3]
 8010028:	fa22 f303 	lsr.w	r3, r2, r3
}
 801002c:	4618      	mov	r0, r3
 801002e:	bd80      	pop	{r7, pc}
 8010030:	40023800 	.word	0x40023800
 8010034:	08028184 	.word	0x08028184

08010038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801003c:	f7ff ffdc 	bl	800fff8 <HAL_RCC_GetHCLKFreq>
 8010040:	4602      	mov	r2, r0
 8010042:	4b05      	ldr	r3, [pc, #20]	; (8010058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	0b5b      	lsrs	r3, r3, #13
 8010048:	f003 0307 	and.w	r3, r3, #7
 801004c:	4903      	ldr	r1, [pc, #12]	; (801005c <HAL_RCC_GetPCLK2Freq+0x24>)
 801004e:	5ccb      	ldrb	r3, [r1, r3]
 8010050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010054:	4618      	mov	r0, r3
 8010056:	bd80      	pop	{r7, pc}
 8010058:	40023800 	.word	0x40023800
 801005c:	08028184 	.word	0x08028184

08010060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d101      	bne.n	8010072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	e07b      	b.n	801016a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010076:	2b00      	cmp	r3, #0
 8010078:	d108      	bne.n	801008c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010082:	d009      	beq.n	8010098 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	61da      	str	r2, [r3, #28]
 801008a:	e005      	b.n	8010098 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2200      	movs	r2, #0
 8010090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d106      	bne.n	80100b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7fa faf4 	bl	800a6a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2202      	movs	r2, #2
 80100bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80100e0:	431a      	orrs	r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100ea:	431a      	orrs	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	691b      	ldr	r3, [r3, #16]
 80100f0:	f003 0302 	and.w	r3, r3, #2
 80100f4:	431a      	orrs	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	695b      	ldr	r3, [r3, #20]
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	431a      	orrs	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	699b      	ldr	r3, [r3, #24]
 8010104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010108:	431a      	orrs	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010112:	431a      	orrs	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6a1b      	ldr	r3, [r3, #32]
 8010118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801011c:	ea42 0103 	orr.w	r1, r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010124:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	430a      	orrs	r2, r1
 801012e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	0c1b      	lsrs	r3, r3, #16
 8010136:	f003 0104 	and.w	r1, r3, #4
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013e:	f003 0210 	and.w	r2, r3, #16
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	430a      	orrs	r2, r1
 8010148:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	69da      	ldr	r2, [r3, #28]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010158:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2201      	movs	r2, #1
 8010164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b08c      	sub	sp, #48	; 0x30
 8010176:	af00      	add	r7, sp, #0
 8010178:	60f8      	str	r0, [r7, #12]
 801017a:	60b9      	str	r1, [r7, #8]
 801017c:	607a      	str	r2, [r7, #4]
 801017e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010180:	2301      	movs	r3, #1
 8010182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010190:	2b01      	cmp	r3, #1
 8010192:	d101      	bne.n	8010198 <HAL_SPI_TransmitReceive+0x26>
 8010194:	2302      	movs	r3, #2
 8010196:	e18a      	b.n	80104ae <HAL_SPI_TransmitReceive+0x33c>
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2201      	movs	r2, #1
 801019c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80101a0:	f7fb fa3a 	bl	800b618 <HAL_GetTick>
 80101a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80101b6:	887b      	ldrh	r3, [r7, #2]
 80101b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80101ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d00f      	beq.n	80101e2 <HAL_SPI_TransmitReceive+0x70>
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80101c8:	d107      	bne.n	80101da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d103      	bne.n	80101da <HAL_SPI_TransmitReceive+0x68>
 80101d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101d6:	2b04      	cmp	r3, #4
 80101d8:	d003      	beq.n	80101e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80101da:	2302      	movs	r3, #2
 80101dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101e0:	e15b      	b.n	801049a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d005      	beq.n	80101f4 <HAL_SPI_TransmitReceive+0x82>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <HAL_SPI_TransmitReceive+0x82>
 80101ee:	887b      	ldrh	r3, [r7, #2]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d103      	bne.n	80101fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80101f4:	2301      	movs	r3, #1
 80101f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101fa:	e14e      	b.n	801049a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b04      	cmp	r3, #4
 8010206:	d003      	beq.n	8010210 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2205      	movs	r2, #5
 801020c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2200      	movs	r2, #0
 8010214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	887a      	ldrh	r2, [r7, #2]
 8010220:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	887a      	ldrh	r2, [r7, #2]
 8010226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	887a      	ldrh	r2, [r7, #2]
 8010232:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	887a      	ldrh	r2, [r7, #2]
 8010238:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2200      	movs	r2, #0
 801023e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2200      	movs	r2, #0
 8010244:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010250:	2b40      	cmp	r3, #64	; 0x40
 8010252:	d007      	beq.n	8010264 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801026c:	d178      	bne.n	8010360 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d002      	beq.n	801027c <HAL_SPI_TransmitReceive+0x10a>
 8010276:	8b7b      	ldrh	r3, [r7, #26]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d166      	bne.n	801034a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010280:	881a      	ldrh	r2, [r3, #0]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028c:	1c9a      	adds	r2, r3, #2
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010296:	b29b      	uxth	r3, r3
 8010298:	3b01      	subs	r3, #1
 801029a:	b29a      	uxth	r2, r3
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102a0:	e053      	b.n	801034a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	f003 0302 	and.w	r3, r3, #2
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	d11b      	bne.n	80102e8 <HAL_SPI_TransmitReceive+0x176>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d016      	beq.n	80102e8 <HAL_SPI_TransmitReceive+0x176>
 80102ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d113      	bne.n	80102e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c4:	881a      	ldrh	r2, [r3, #0]
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d0:	1c9a      	adds	r2, r3, #2
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102da:	b29b      	uxth	r3, r3
 80102dc:	3b01      	subs	r3, #1
 80102de:	b29a      	uxth	r2, r3
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80102e4:	2300      	movs	r3, #0
 80102e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d119      	bne.n	801032a <HAL_SPI_TransmitReceive+0x1b8>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d014      	beq.n	801032a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	68da      	ldr	r2, [r3, #12]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030a:	b292      	uxth	r2, r2
 801030c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010312:	1c9a      	adds	r2, r3, #2
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801031c:	b29b      	uxth	r3, r3
 801031e:	3b01      	subs	r3, #1
 8010320:	b29a      	uxth	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010326:	2301      	movs	r3, #1
 8010328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801032a:	f7fb f975 	bl	800b618 <HAL_GetTick>
 801032e:	4602      	mov	r2, r0
 8010330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010336:	429a      	cmp	r2, r3
 8010338:	d807      	bhi.n	801034a <HAL_SPI_TransmitReceive+0x1d8>
 801033a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010340:	d003      	beq.n	801034a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010342:	2303      	movs	r3, #3
 8010344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010348:	e0a7      	b.n	801049a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801034e:	b29b      	uxth	r3, r3
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1a6      	bne.n	80102a2 <HAL_SPI_TransmitReceive+0x130>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010358:	b29b      	uxth	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d1a1      	bne.n	80102a2 <HAL_SPI_TransmitReceive+0x130>
 801035e:	e07c      	b.n	801045a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <HAL_SPI_TransmitReceive+0x1fc>
 8010368:	8b7b      	ldrh	r3, [r7, #26]
 801036a:	2b01      	cmp	r3, #1
 801036c:	d16b      	bne.n	8010446 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	330c      	adds	r3, #12
 8010378:	7812      	ldrb	r2, [r2, #0]
 801037a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801038a:	b29b      	uxth	r3, r3
 801038c:	3b01      	subs	r3, #1
 801038e:	b29a      	uxth	r2, r3
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010394:	e057      	b.n	8010446 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	689b      	ldr	r3, [r3, #8]
 801039c:	f003 0302 	and.w	r3, r3, #2
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	d11c      	bne.n	80103de <HAL_SPI_TransmitReceive+0x26c>
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d017      	beq.n	80103de <HAL_SPI_TransmitReceive+0x26c>
 80103ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d114      	bne.n	80103de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	330c      	adds	r3, #12
 80103be:	7812      	ldrb	r2, [r2, #0]
 80103c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	3b01      	subs	r3, #1
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80103da:	2300      	movs	r3, #0
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	f003 0301 	and.w	r3, r3, #1
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d119      	bne.n	8010420 <HAL_SPI_TransmitReceive+0x2ae>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d014      	beq.n	8010420 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	68da      	ldr	r2, [r3, #12]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010400:	b2d2      	uxtb	r2, r2
 8010402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010408:	1c5a      	adds	r2, r3, #1
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010412:	b29b      	uxth	r3, r3
 8010414:	3b01      	subs	r3, #1
 8010416:	b29a      	uxth	r2, r3
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801041c:	2301      	movs	r3, #1
 801041e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010420:	f7fb f8fa 	bl	800b618 <HAL_GetTick>
 8010424:	4602      	mov	r2, r0
 8010426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801042c:	429a      	cmp	r2, r3
 801042e:	d803      	bhi.n	8010438 <HAL_SPI_TransmitReceive+0x2c6>
 8010430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010436:	d102      	bne.n	801043e <HAL_SPI_TransmitReceive+0x2cc>
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	2b00      	cmp	r3, #0
 801043c:	d103      	bne.n	8010446 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801043e:	2303      	movs	r3, #3
 8010440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010444:	e029      	b.n	801049a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801044a:	b29b      	uxth	r3, r3
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1a2      	bne.n	8010396 <HAL_SPI_TransmitReceive+0x224>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010454:	b29b      	uxth	r3, r3
 8010456:	2b00      	cmp	r3, #0
 8010458:	d19d      	bne.n	8010396 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801045a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801045c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f000 f9d0 	bl	8010804 <SPI_EndRxTxTransaction>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d006      	beq.n	8010478 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801046a:	2301      	movs	r3, #1
 801046c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2220      	movs	r2, #32
 8010474:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010476:	e010      	b.n	801049a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d10b      	bne.n	8010498 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010480:	2300      	movs	r3, #0
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	617b      	str	r3, [r7, #20]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	617b      	str	r3, [r7, #20]
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	e000      	b.n	801049a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80104aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3730      	adds	r7, #48	; 0x30
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
	...

080104b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b088      	sub	sp, #32
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	099b      	lsrs	r3, r3, #6
 80104d4:	f003 0301 	and.w	r3, r3, #1
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10f      	bne.n	80104fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00a      	beq.n	80104fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	099b      	lsrs	r3, r3, #6
 80104ea:	f003 0301 	and.w	r3, r3, #1
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d004      	beq.n	80104fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	4798      	blx	r3
    return;
 80104fa:	e0d7      	b.n	80106ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	085b      	lsrs	r3, r3, #1
 8010500:	f003 0301 	and.w	r3, r3, #1
 8010504:	2b00      	cmp	r3, #0
 8010506:	d00a      	beq.n	801051e <HAL_SPI_IRQHandler+0x66>
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	09db      	lsrs	r3, r3, #7
 801050c:	f003 0301 	and.w	r3, r3, #1
 8010510:	2b00      	cmp	r3, #0
 8010512:	d004      	beq.n	801051e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	4798      	blx	r3
    return;
 801051c:	e0c6      	b.n	80106ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	095b      	lsrs	r3, r3, #5
 8010522:	f003 0301 	and.w	r3, r3, #1
 8010526:	2b00      	cmp	r3, #0
 8010528:	d10c      	bne.n	8010544 <HAL_SPI_IRQHandler+0x8c>
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	099b      	lsrs	r3, r3, #6
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	2b00      	cmp	r3, #0
 8010534:	d106      	bne.n	8010544 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	0a1b      	lsrs	r3, r3, #8
 801053a:	f003 0301 	and.w	r3, r3, #1
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 80b4 	beq.w	80106ac <HAL_SPI_IRQHandler+0x1f4>
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	095b      	lsrs	r3, r3, #5
 8010548:	f003 0301 	and.w	r3, r3, #1
 801054c:	2b00      	cmp	r3, #0
 801054e:	f000 80ad 	beq.w	80106ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	099b      	lsrs	r3, r3, #6
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	d023      	beq.n	80105a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010564:	b2db      	uxtb	r3, r3
 8010566:	2b03      	cmp	r3, #3
 8010568:	d011      	beq.n	801058e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801056e:	f043 0204 	orr.w	r2, r3, #4
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010576:	2300      	movs	r3, #0
 8010578:	617b      	str	r3, [r7, #20]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	617b      	str	r3, [r7, #20]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	689b      	ldr	r3, [r3, #8]
 8010588:	617b      	str	r3, [r7, #20]
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	e00b      	b.n	80105a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801058e:	2300      	movs	r3, #0
 8010590:	613b      	str	r3, [r7, #16]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	613b      	str	r3, [r7, #16]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	613b      	str	r3, [r7, #16]
 80105a2:	693b      	ldr	r3, [r7, #16]
        return;
 80105a4:	e082      	b.n	80106ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	095b      	lsrs	r3, r3, #5
 80105aa:	f003 0301 	and.w	r3, r3, #1
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d014      	beq.n	80105dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105b6:	f043 0201 	orr.w	r2, r3, #1
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80105be:	2300      	movs	r3, #0
 80105c0:	60fb      	str	r3, [r7, #12]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	689b      	ldr	r3, [r3, #8]
 80105c8:	60fb      	str	r3, [r7, #12]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105d8:	601a      	str	r2, [r3, #0]
 80105da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	0a1b      	lsrs	r3, r3, #8
 80105e0:	f003 0301 	and.w	r3, r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00c      	beq.n	8010602 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105ec:	f043 0208 	orr.w	r2, r3, #8
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80105f4:	2300      	movs	r3, #0
 80105f6:	60bb      	str	r3, [r7, #8]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	60bb      	str	r3, [r7, #8]
 8010600:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010606:	2b00      	cmp	r3, #0
 8010608:	d04f      	beq.n	80106aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	685a      	ldr	r2, [r3, #4]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010618:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2201      	movs	r2, #1
 801061e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	f003 0302 	and.w	r3, r3, #2
 8010628:	2b00      	cmp	r3, #0
 801062a:	d104      	bne.n	8010636 <HAL_SPI_IRQHandler+0x17e>
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	f003 0301 	and.w	r3, r3, #1
 8010632:	2b00      	cmp	r3, #0
 8010634:	d034      	beq.n	80106a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f022 0203 	bic.w	r2, r2, #3
 8010644:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801064a:	2b00      	cmp	r3, #0
 801064c:	d011      	beq.n	8010672 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010652:	4a18      	ldr	r2, [pc, #96]	; (80106b4 <HAL_SPI_IRQHandler+0x1fc>)
 8010654:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801065a:	4618      	mov	r0, r3
 801065c:	f7fb fb22 	bl	800bca4 <HAL_DMA_Abort_IT>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d005      	beq.n	8010672 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801066a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010676:	2b00      	cmp	r3, #0
 8010678:	d016      	beq.n	80106a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801067e:	4a0d      	ldr	r2, [pc, #52]	; (80106b4 <HAL_SPI_IRQHandler+0x1fc>)
 8010680:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010686:	4618      	mov	r0, r3
 8010688:	f7fb fb0c 	bl	800bca4 <HAL_DMA_Abort_IT>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00a      	beq.n	80106a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010696:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801069e:	e003      	b.n	80106a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 f809 	bl	80106b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80106a6:	e000      	b.n	80106aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80106a8:	bf00      	nop
    return;
 80106aa:	bf00      	nop
  }
}
 80106ac:	3720      	adds	r7, #32
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	080106cd 	.word	0x080106cd

080106b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2200      	movs	r2, #0
 80106de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2200      	movs	r2, #0
 80106e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f7ff ffe6 	bl	80106b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80106ec:	bf00      	nop
 80106ee:	3710      	adds	r7, #16
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b088      	sub	sp, #32
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	603b      	str	r3, [r7, #0]
 8010700:	4613      	mov	r3, r2
 8010702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010704:	f7fa ff88 	bl	800b618 <HAL_GetTick>
 8010708:	4602      	mov	r2, r0
 801070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	683a      	ldr	r2, [r7, #0]
 8010710:	4413      	add	r3, r2
 8010712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010714:	f7fa ff80 	bl	800b618 <HAL_GetTick>
 8010718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801071a:	4b39      	ldr	r3, [pc, #228]	; (8010800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	015b      	lsls	r3, r3, #5
 8010720:	0d1b      	lsrs	r3, r3, #20
 8010722:	69fa      	ldr	r2, [r7, #28]
 8010724:	fb02 f303 	mul.w	r3, r2, r3
 8010728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801072a:	e054      	b.n	80107d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010732:	d050      	beq.n	80107d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010734:	f7fa ff70 	bl	800b618 <HAL_GetTick>
 8010738:	4602      	mov	r2, r0
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	69fa      	ldr	r2, [r7, #28]
 8010740:	429a      	cmp	r2, r3
 8010742:	d902      	bls.n	801074a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d13d      	bne.n	80107c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010762:	d111      	bne.n	8010788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801076c:	d004      	beq.n	8010778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010776:	d107      	bne.n	8010788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010790:	d10f      	bne.n	80107b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80107b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2201      	movs	r2, #1
 80107b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80107c2:	2303      	movs	r3, #3
 80107c4:	e017      	b.n	80107f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d101      	bne.n	80107d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80107cc:	2300      	movs	r3, #0
 80107ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	3b01      	subs	r3, #1
 80107d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	689a      	ldr	r2, [r3, #8]
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	4013      	ands	r3, r2
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	bf0c      	ite	eq
 80107e6:	2301      	moveq	r3, #1
 80107e8:	2300      	movne	r3, #0
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	461a      	mov	r2, r3
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d19b      	bne.n	801072c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3720      	adds	r7, #32
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20000038 	.word	0x20000038

08010804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b088      	sub	sp, #32
 8010808:	af02      	add	r7, sp, #8
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010810:	4b1b      	ldr	r3, [pc, #108]	; (8010880 <SPI_EndRxTxTransaction+0x7c>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a1b      	ldr	r2, [pc, #108]	; (8010884 <SPI_EndRxTxTransaction+0x80>)
 8010816:	fba2 2303 	umull	r2, r3, r2, r3
 801081a:	0d5b      	lsrs	r3, r3, #21
 801081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010820:	fb02 f303 	mul.w	r3, r2, r3
 8010824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801082e:	d112      	bne.n	8010856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	2200      	movs	r2, #0
 8010838:	2180      	movs	r1, #128	; 0x80
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f7ff ff5a 	bl	80106f4 <SPI_WaitFlagStateUntilTimeout>
 8010840:	4603      	mov	r3, r0
 8010842:	2b00      	cmp	r3, #0
 8010844:	d016      	beq.n	8010874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801084a:	f043 0220 	orr.w	r2, r3, #32
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010852:	2303      	movs	r3, #3
 8010854:	e00f      	b.n	8010876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	3b01      	subs	r3, #1
 8010860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801086c:	2b80      	cmp	r3, #128	; 0x80
 801086e:	d0f2      	beq.n	8010856 <SPI_EndRxTxTransaction+0x52>
 8010870:	e000      	b.n	8010874 <SPI_EndRxTxTransaction+0x70>
        break;
 8010872:	bf00      	nop
  }

  return HAL_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20000038 	.word	0x20000038
 8010884:	165e9f81 	.word	0x165e9f81

08010888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d101      	bne.n	801089a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010896:	2301      	movs	r3, #1
 8010898:	e041      	b.n	801091e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7fa fa74 	bl	800ad9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2202      	movs	r2, #2
 80108b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	3304      	adds	r3, #4
 80108c4:	4619      	mov	r1, r3
 80108c6:	4610      	mov	r0, r2
 80108c8:	f000 fb24 	bl	8010f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2201      	movs	r2, #1
 80108e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2201      	movs	r2, #1
 80108e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2201      	movs	r2, #1
 80108f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2201      	movs	r2, #1
 80108f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2201      	movs	r2, #1
 8010900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2201      	movs	r2, #1
 8010908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2201      	movs	r2, #1
 8010910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2201      	movs	r2, #1
 8010918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801091c:	2300      	movs	r3, #0
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
	...

08010928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010928:	b480      	push	{r7}
 801092a:	b085      	sub	sp, #20
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010936:	b2db      	uxtb	r3, r3
 8010938:	2b01      	cmp	r3, #1
 801093a:	d001      	beq.n	8010940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801093c:	2301      	movs	r3, #1
 801093e:	e044      	b.n	80109ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2202      	movs	r2, #2
 8010944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68da      	ldr	r2, [r3, #12]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f042 0201 	orr.w	r2, r2, #1
 8010956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a1e      	ldr	r2, [pc, #120]	; (80109d8 <HAL_TIM_Base_Start_IT+0xb0>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d018      	beq.n	8010994 <HAL_TIM_Base_Start_IT+0x6c>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801096a:	d013      	beq.n	8010994 <HAL_TIM_Base_Start_IT+0x6c>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a1a      	ldr	r2, [pc, #104]	; (80109dc <HAL_TIM_Base_Start_IT+0xb4>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d00e      	beq.n	8010994 <HAL_TIM_Base_Start_IT+0x6c>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a19      	ldr	r2, [pc, #100]	; (80109e0 <HAL_TIM_Base_Start_IT+0xb8>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d009      	beq.n	8010994 <HAL_TIM_Base_Start_IT+0x6c>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a17      	ldr	r2, [pc, #92]	; (80109e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d004      	beq.n	8010994 <HAL_TIM_Base_Start_IT+0x6c>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a16      	ldr	r2, [pc, #88]	; (80109e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d111      	bne.n	80109b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	f003 0307 	and.w	r3, r3, #7
 801099e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2b06      	cmp	r3, #6
 80109a4:	d010      	beq.n	80109c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f042 0201 	orr.w	r2, r2, #1
 80109b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109b6:	e007      	b.n	80109c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f042 0201 	orr.w	r2, r2, #1
 80109c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	40010000 	.word	0x40010000
 80109dc:	40000400 	.word	0x40000400
 80109e0:	40000800 	.word	0x40000800
 80109e4:	40000c00 	.word	0x40000c00
 80109e8:	40014000 	.word	0x40014000

080109ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	68da      	ldr	r2, [r3, #12]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f022 0201 	bic.w	r2, r2, #1
 8010a02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	6a1a      	ldr	r2, [r3, #32]
 8010a0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8010a0e:	4013      	ands	r3, r2
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d10f      	bne.n	8010a34 <HAL_TIM_Base_Stop_IT+0x48>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	6a1a      	ldr	r2, [r3, #32]
 8010a1a:	f240 4344 	movw	r3, #1092	; 0x444
 8010a1e:	4013      	ands	r3, r2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d107      	bne.n	8010a34 <HAL_TIM_Base_Stop_IT+0x48>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f022 0201 	bic.w	r2, r2, #1
 8010a32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2201      	movs	r2, #1
 8010a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	370c      	adds	r7, #12
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b086      	sub	sp, #24
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
 8010a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e097      	b.n	8010b8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d106      	bne.n	8010a78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7fa f94c 	bl	800ad10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2202      	movs	r2, #2
 8010a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	6812      	ldr	r2, [r2, #0]
 8010a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a8e:	f023 0307 	bic.w	r3, r3, #7
 8010a92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	3304      	adds	r3, #4
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	4610      	mov	r0, r2
 8010aa0:	f000 fa38 	bl	8010f14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	699b      	ldr	r3, [r3, #24]
 8010ab2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6a1b      	ldr	r3, [r3, #32]
 8010aba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	697a      	ldr	r2, [r7, #20]
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010acc:	f023 0303 	bic.w	r3, r3, #3
 8010ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	689a      	ldr	r2, [r3, #8]
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	699b      	ldr	r3, [r3, #24]
 8010ada:	021b      	lsls	r3, r3, #8
 8010adc:	4313      	orrs	r3, r2
 8010ade:	693a      	ldr	r2, [r7, #16]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010aea:	f023 030c 	bic.w	r3, r3, #12
 8010aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	68da      	ldr	r2, [r3, #12]
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	69db      	ldr	r3, [r3, #28]
 8010b04:	021b      	lsls	r3, r3, #8
 8010b06:	4313      	orrs	r3, r2
 8010b08:	693a      	ldr	r2, [r7, #16]
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	691b      	ldr	r3, [r3, #16]
 8010b12:	011a      	lsls	r2, r3, #4
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	6a1b      	ldr	r3, [r3, #32]
 8010b18:	031b      	lsls	r3, r3, #12
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	693a      	ldr	r2, [r7, #16]
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010b28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010b30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	685a      	ldr	r2, [r3, #4]
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	695b      	ldr	r3, [r3, #20]
 8010b3a:	011b      	lsls	r3, r3, #4
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	4313      	orrs	r3, r2
 8010b42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	697a      	ldr	r2, [r7, #20]
 8010b4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	693a      	ldr	r2, [r7, #16]
 8010b52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2201      	movs	r2, #1
 8010b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2201      	movs	r2, #1
 8010b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3718      	adds	r7, #24
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}

08010b96 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b084      	sub	sp, #16
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ba6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010bae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bb6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bbe:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d110      	bne.n	8010be8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bc6:	7bfb      	ldrb	r3, [r7, #15]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d102      	bne.n	8010bd2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8010bcc:	7b7b      	ldrb	r3, [r7, #13]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d001      	beq.n	8010bd6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e069      	b.n	8010caa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2202      	movs	r2, #2
 8010bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2202      	movs	r2, #2
 8010be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010be6:	e031      	b.n	8010c4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2b04      	cmp	r3, #4
 8010bec:	d110      	bne.n	8010c10 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bee:	7bbb      	ldrb	r3, [r7, #14]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d102      	bne.n	8010bfa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010bf4:	7b3b      	ldrb	r3, [r7, #12]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d001      	beq.n	8010bfe <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e055      	b.n	8010caa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2202      	movs	r2, #2
 8010c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2202      	movs	r2, #2
 8010c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c0e:	e01d      	b.n	8010c4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010c10:	7bfb      	ldrb	r3, [r7, #15]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d108      	bne.n	8010c28 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010c16:	7bbb      	ldrb	r3, [r7, #14]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d105      	bne.n	8010c28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010c1c:	7b7b      	ldrb	r3, [r7, #13]
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d102      	bne.n	8010c28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010c22:	7b3b      	ldrb	r3, [r7, #12]
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d001      	beq.n	8010c2c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e03e      	b.n	8010caa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2202      	movs	r2, #2
 8010c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2202      	movs	r2, #2
 8010c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2202      	movs	r2, #2
 8010c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d003      	beq.n	8010c5a <HAL_TIM_Encoder_Start+0xc4>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	2b04      	cmp	r3, #4
 8010c56:	d008      	beq.n	8010c6a <HAL_TIM_Encoder_Start+0xd4>
 8010c58:	e00f      	b.n	8010c7a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2201      	movs	r2, #1
 8010c60:	2100      	movs	r1, #0
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 f9d6 	bl	8011014 <TIM_CCxChannelCmd>
      break;
 8010c68:	e016      	b.n	8010c98 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	2104      	movs	r1, #4
 8010c72:	4618      	mov	r0, r3
 8010c74:	f000 f9ce 	bl	8011014 <TIM_CCxChannelCmd>
      break;
 8010c78:	e00e      	b.n	8010c98 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	2100      	movs	r1, #0
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f9c6 	bl	8011014 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	2104      	movs	r1, #4
 8010c90:	4618      	mov	r0, r3
 8010c92:	f000 f9bf 	bl	8011014 <TIM_CCxChannelCmd>
      break;
 8010c96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f042 0201 	orr.w	r2, r2, #1
 8010ca6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b082      	sub	sp, #8
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	691b      	ldr	r3, [r3, #16]
 8010cc0:	f003 0302 	and.w	r3, r3, #2
 8010cc4:	2b02      	cmp	r3, #2
 8010cc6:	d122      	bne.n	8010d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	f003 0302 	and.w	r3, r3, #2
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d11b      	bne.n	8010d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f06f 0202 	mvn.w	r2, #2
 8010cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	f003 0303 	and.w	r3, r3, #3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d003      	beq.n	8010cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 f8ee 	bl	8010ed6 <HAL_TIM_IC_CaptureCallback>
 8010cfa:	e005      	b.n	8010d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f000 f8e0 	bl	8010ec2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f000 f8f1 	bl	8010eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	691b      	ldr	r3, [r3, #16]
 8010d14:	f003 0304 	and.w	r3, r3, #4
 8010d18:	2b04      	cmp	r3, #4
 8010d1a:	d122      	bne.n	8010d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	f003 0304 	and.w	r3, r3, #4
 8010d26:	2b04      	cmp	r3, #4
 8010d28:	d11b      	bne.n	8010d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f06f 0204 	mvn.w	r2, #4
 8010d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2202      	movs	r2, #2
 8010d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	699b      	ldr	r3, [r3, #24]
 8010d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d003      	beq.n	8010d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f8c4 	bl	8010ed6 <HAL_TIM_IC_CaptureCallback>
 8010d4e:	e005      	b.n	8010d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 f8b6 	bl	8010ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 f8c7 	bl	8010eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	691b      	ldr	r3, [r3, #16]
 8010d68:	f003 0308 	and.w	r3, r3, #8
 8010d6c:	2b08      	cmp	r3, #8
 8010d6e:	d122      	bne.n	8010db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	f003 0308 	and.w	r3, r3, #8
 8010d7a:	2b08      	cmp	r3, #8
 8010d7c:	d11b      	bne.n	8010db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f06f 0208 	mvn.w	r2, #8
 8010d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2204      	movs	r2, #4
 8010d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	f003 0303 	and.w	r3, r3, #3
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d003      	beq.n	8010da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 f89a 	bl	8010ed6 <HAL_TIM_IC_CaptureCallback>
 8010da2:	e005      	b.n	8010db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 f88c 	bl	8010ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 f89d 	bl	8010eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2200      	movs	r2, #0
 8010db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	f003 0310 	and.w	r3, r3, #16
 8010dc0:	2b10      	cmp	r3, #16
 8010dc2:	d122      	bne.n	8010e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	f003 0310 	and.w	r3, r3, #16
 8010dce:	2b10      	cmp	r3, #16
 8010dd0:	d11b      	bne.n	8010e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f06f 0210 	mvn.w	r2, #16
 8010dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2208      	movs	r2, #8
 8010de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	69db      	ldr	r3, [r3, #28]
 8010de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f870 	bl	8010ed6 <HAL_TIM_IC_CaptureCallback>
 8010df6:	e005      	b.n	8010e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 f862 	bl	8010ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 f873 	bl	8010eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	f003 0301 	and.w	r3, r3, #1
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d10e      	bne.n	8010e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	f003 0301 	and.w	r3, r3, #1
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d107      	bne.n	8010e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f06f 0201 	mvn.w	r2, #1
 8010e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7f5 f9f1 	bl	8006218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	691b      	ldr	r3, [r3, #16]
 8010e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e40:	2b80      	cmp	r3, #128	; 0x80
 8010e42:	d10e      	bne.n	8010e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e4e:	2b80      	cmp	r3, #128	; 0x80
 8010e50:	d107      	bne.n	8010e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f977 	bl	8011150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e6c:	2b40      	cmp	r3, #64	; 0x40
 8010e6e:	d10e      	bne.n	8010e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e7a:	2b40      	cmp	r3, #64	; 0x40
 8010e7c:	d107      	bne.n	8010e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 f838 	bl	8010efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	691b      	ldr	r3, [r3, #16]
 8010e94:	f003 0320 	and.w	r3, r3, #32
 8010e98:	2b20      	cmp	r3, #32
 8010e9a:	d10e      	bne.n	8010eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	f003 0320 	and.w	r3, r3, #32
 8010ea6:	2b20      	cmp	r3, #32
 8010ea8:	d107      	bne.n	8010eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f06f 0220 	mvn.w	r2, #32
 8010eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 f941 	bl	801113c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010eba:	bf00      	nop
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ede:	bf00      	nop
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ef2:	bf00      	nop
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010efe:	b480      	push	{r7}
 8010f00:	b083      	sub	sp, #12
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f06:	bf00      	nop
 8010f08:	370c      	adds	r7, #12
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr
	...

08010f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	4a34      	ldr	r2, [pc, #208]	; (8010ff8 <TIM_Base_SetConfig+0xe4>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d00f      	beq.n	8010f4c <TIM_Base_SetConfig+0x38>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f32:	d00b      	beq.n	8010f4c <TIM_Base_SetConfig+0x38>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	4a31      	ldr	r2, [pc, #196]	; (8010ffc <TIM_Base_SetConfig+0xe8>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d007      	beq.n	8010f4c <TIM_Base_SetConfig+0x38>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4a30      	ldr	r2, [pc, #192]	; (8011000 <TIM_Base_SetConfig+0xec>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d003      	beq.n	8010f4c <TIM_Base_SetConfig+0x38>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4a2f      	ldr	r2, [pc, #188]	; (8011004 <TIM_Base_SetConfig+0xf0>)
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d108      	bne.n	8010f5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	4313      	orrs	r3, r2
 8010f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a25      	ldr	r2, [pc, #148]	; (8010ff8 <TIM_Base_SetConfig+0xe4>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d01b      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f6c:	d017      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4a22      	ldr	r2, [pc, #136]	; (8010ffc <TIM_Base_SetConfig+0xe8>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d013      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4a21      	ldr	r2, [pc, #132]	; (8011000 <TIM_Base_SetConfig+0xec>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d00f      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4a20      	ldr	r2, [pc, #128]	; (8011004 <TIM_Base_SetConfig+0xf0>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d00b      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4a1f      	ldr	r2, [pc, #124]	; (8011008 <TIM_Base_SetConfig+0xf4>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d007      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	4a1e      	ldr	r2, [pc, #120]	; (801100c <TIM_Base_SetConfig+0xf8>)
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d003      	beq.n	8010f9e <TIM_Base_SetConfig+0x8a>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4a1d      	ldr	r2, [pc, #116]	; (8011010 <TIM_Base_SetConfig+0xfc>)
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d108      	bne.n	8010fb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	689a      	ldr	r2, [r3, #8]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	4a08      	ldr	r2, [pc, #32]	; (8010ff8 <TIM_Base_SetConfig+0xe4>)
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d103      	bne.n	8010fe4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	691a      	ldr	r2, [r3, #16]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	615a      	str	r2, [r3, #20]
}
 8010fea:	bf00      	nop
 8010fec:	3714      	adds	r7, #20
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	40010000 	.word	0x40010000
 8010ffc:	40000400 	.word	0x40000400
 8011000:	40000800 	.word	0x40000800
 8011004:	40000c00 	.word	0x40000c00
 8011008:	40014000 	.word	0x40014000
 801100c:	40014400 	.word	0x40014400
 8011010:	40014800 	.word	0x40014800

08011014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011014:	b480      	push	{r7}
 8011016:	b087      	sub	sp, #28
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	f003 031f 	and.w	r3, r3, #31
 8011026:	2201      	movs	r2, #1
 8011028:	fa02 f303 	lsl.w	r3, r2, r3
 801102c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6a1a      	ldr	r2, [r3, #32]
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	43db      	mvns	r3, r3
 8011036:	401a      	ands	r2, r3
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6a1a      	ldr	r2, [r3, #32]
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	f003 031f 	and.w	r3, r3, #31
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	fa01 f303 	lsl.w	r3, r1, r3
 801104c:	431a      	orrs	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	621a      	str	r2, [r3, #32]
}
 8011052:	bf00      	nop
 8011054:	371c      	adds	r7, #28
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
	...

08011060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011060:	b480      	push	{r7}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011070:	2b01      	cmp	r3, #1
 8011072:	d101      	bne.n	8011078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011074:	2302      	movs	r3, #2
 8011076:	e050      	b.n	801111a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2202      	movs	r2, #2
 8011084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801109e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	68fa      	ldr	r2, [r7, #12]
 80110a6:	4313      	orrs	r3, r2
 80110a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	68fa      	ldr	r2, [r7, #12]
 80110b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4a1c      	ldr	r2, [pc, #112]	; (8011128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d018      	beq.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110c4:	d013      	beq.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a18      	ldr	r2, [pc, #96]	; (801112c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d00e      	beq.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4a16      	ldr	r2, [pc, #88]	; (8011130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d009      	beq.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	4a15      	ldr	r2, [pc, #84]	; (8011134 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d004      	beq.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a13      	ldr	r2, [pc, #76]	; (8011138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d10c      	bne.n	8011108 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	68ba      	ldr	r2, [r7, #8]
 80110fc:	4313      	orrs	r3, r2
 80110fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2200      	movs	r2, #0
 8011114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	40010000 	.word	0x40010000
 801112c:	40000400 	.word	0x40000400
 8011130:	40000800 	.word	0x40000800
 8011134:	40000c00 	.word	0x40000c00
 8011138:	40014000 	.word	0x40014000

0801113c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011144:	bf00      	nop
 8011146:	370c      	adds	r7, #12
 8011148:	46bd      	mov	sp, r7
 801114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114e:	4770      	bx	lr

08011150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e03f      	b.n	80111f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801117c:	b2db      	uxtb	r3, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	d106      	bne.n	8011190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7fa f842 	bl	800b214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2224      	movs	r2, #36	; 0x24
 8011194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	68da      	ldr	r2, [r3, #12]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80111a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f000 ff53 	bl	8012054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	691a      	ldr	r2, [r3, #16]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80111bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	695a      	ldr	r2, [r3, #20]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80111cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	68da      	ldr	r2, [r3, #12]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80111dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2200      	movs	r2, #0
 80111e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2220      	movs	r2, #32
 80111e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2220      	movs	r2, #32
 80111f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b08c      	sub	sp, #48	; 0x30
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	4613      	mov	r3, r2
 801120c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011214:	b2db      	uxtb	r3, r3
 8011216:	2b20      	cmp	r3, #32
 8011218:	d165      	bne.n	80112e6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <HAL_UART_Transmit_DMA+0x26>
 8011220:	88fb      	ldrh	r3, [r7, #6]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d101      	bne.n	801122a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011226:	2301      	movs	r3, #1
 8011228:	e05e      	b.n	80112e8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011230:	2b01      	cmp	r3, #1
 8011232:	d101      	bne.n	8011238 <HAL_UART_Transmit_DMA+0x38>
 8011234:	2302      	movs	r3, #2
 8011236:	e057      	b.n	80112e8 <HAL_UART_Transmit_DMA+0xe8>
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2201      	movs	r2, #1
 801123c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	88fa      	ldrh	r2, [r7, #6]
 801124a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	88fa      	ldrh	r2, [r7, #6]
 8011250:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2200      	movs	r2, #0
 8011256:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2221      	movs	r2, #33	; 0x21
 801125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011264:	4a22      	ldr	r2, [pc, #136]	; (80112f0 <HAL_UART_Transmit_DMA+0xf0>)
 8011266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801126c:	4a21      	ldr	r2, [pc, #132]	; (80112f4 <HAL_UART_Transmit_DMA+0xf4>)
 801126e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011274:	4a20      	ldr	r2, [pc, #128]	; (80112f8 <HAL_UART_Transmit_DMA+0xf8>)
 8011276:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801127c:	2200      	movs	r2, #0
 801127e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8011280:	f107 0308 	add.w	r3, r7, #8
 8011284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128c:	6819      	ldr	r1, [r3, #0]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	3304      	adds	r3, #4
 8011294:	461a      	mov	r2, r3
 8011296:	88fb      	ldrh	r3, [r7, #6]
 8011298:	f7fa fc3c 	bl	800bb14 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80112a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2200      	movs	r2, #0
 80112aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	3314      	adds	r3, #20
 80112b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	e853 3f00 	ldrex	r3, [r3]
 80112bc:	617b      	str	r3, [r7, #20]
   return(result);
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	3314      	adds	r3, #20
 80112cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112ce:	627a      	str	r2, [r7, #36]	; 0x24
 80112d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112d2:	6a39      	ldr	r1, [r7, #32]
 80112d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d6:	e841 2300 	strex	r3, r2, [r1]
 80112da:	61fb      	str	r3, [r7, #28]
   return(result);
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1e5      	bne.n	80112ae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80112e2:	2300      	movs	r3, #0
 80112e4:	e000      	b.n	80112e8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80112e6:	2302      	movs	r3, #2
  }
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3730      	adds	r7, #48	; 0x30
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	080118f5 	.word	0x080118f5
 80112f4:	0801198f 	.word	0x0801198f
 80112f8:	08011b07 	.word	0x08011b07

080112fc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	4613      	mov	r3, r2
 8011308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011310:	b2db      	uxtb	r3, r3
 8011312:	2b20      	cmp	r3, #32
 8011314:	d11d      	bne.n	8011352 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d002      	beq.n	8011322 <HAL_UART_Receive_DMA+0x26>
 801131c:	88fb      	ldrh	r3, [r7, #6]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d101      	bne.n	8011326 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	e016      	b.n	8011354 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801132c:	2b01      	cmp	r3, #1
 801132e:	d101      	bne.n	8011334 <HAL_UART_Receive_DMA+0x38>
 8011330:	2302      	movs	r3, #2
 8011332:	e00f      	b.n	8011354 <HAL_UART_Receive_DMA+0x58>
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2201      	movs	r2, #1
 8011338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2200      	movs	r2, #0
 8011340:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011342:	88fb      	ldrh	r3, [r7, #6]
 8011344:	461a      	mov	r2, r3
 8011346:	68b9      	ldr	r1, [r7, #8]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f000 fc27 	bl	8011b9c <UART_Start_Receive_DMA>
 801134e:	4603      	mov	r3, r0
 8011350:	e000      	b.n	8011354 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011352:	2302      	movs	r3, #2
  }
}
 8011354:	4618      	mov	r0, r3
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b0ba      	sub	sp, #232	; 0xe8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	695b      	ldr	r3, [r3, #20]
 801137e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8011382:	2300      	movs	r3, #0
 8011384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011388:	2300      	movs	r3, #0
 801138a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801138e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011392:	f003 030f 	and.w	r3, r3, #15
 8011396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801139a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d10f      	bne.n	80113c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80113a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113a6:	f003 0320 	and.w	r3, r3, #32
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d009      	beq.n	80113c2 <HAL_UART_IRQHandler+0x66>
 80113ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113b2:	f003 0320 	and.w	r3, r3, #32
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d003      	beq.n	80113c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 fd8f 	bl	8011ede <UART_Receive_IT>
      return;
 80113c0:	e256      	b.n	8011870 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80113c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 80de 	beq.w	8011588 <HAL_UART_IRQHandler+0x22c>
 80113cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113d0:	f003 0301 	and.w	r3, r3, #1
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d106      	bne.n	80113e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80113d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	f000 80d1 	beq.w	8011588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80113e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00b      	beq.n	801140a <HAL_UART_IRQHandler+0xae>
 80113f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d005      	beq.n	801140a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011402:	f043 0201 	orr.w	r2, r3, #1
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801140a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801140e:	f003 0304 	and.w	r3, r3, #4
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00b      	beq.n	801142e <HAL_UART_IRQHandler+0xd2>
 8011416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801141a:	f003 0301 	and.w	r3, r3, #1
 801141e:	2b00      	cmp	r3, #0
 8011420:	d005      	beq.n	801142e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011426:	f043 0202 	orr.w	r2, r3, #2
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801142e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011432:	f003 0302 	and.w	r3, r3, #2
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00b      	beq.n	8011452 <HAL_UART_IRQHandler+0xf6>
 801143a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801143e:	f003 0301 	and.w	r3, r3, #1
 8011442:	2b00      	cmp	r3, #0
 8011444:	d005      	beq.n	8011452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144a:	f043 0204 	orr.w	r2, r3, #4
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011456:	f003 0308 	and.w	r3, r3, #8
 801145a:	2b00      	cmp	r3, #0
 801145c:	d011      	beq.n	8011482 <HAL_UART_IRQHandler+0x126>
 801145e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011462:	f003 0320 	and.w	r3, r3, #32
 8011466:	2b00      	cmp	r3, #0
 8011468:	d105      	bne.n	8011476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801146a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801146e:	f003 0301 	and.w	r3, r3, #1
 8011472:	2b00      	cmp	r3, #0
 8011474:	d005      	beq.n	8011482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801147a:	f043 0208 	orr.w	r2, r3, #8
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 81ed 	beq.w	8011866 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801148c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011490:	f003 0320 	and.w	r3, r3, #32
 8011494:	2b00      	cmp	r3, #0
 8011496:	d008      	beq.n	80114aa <HAL_UART_IRQHandler+0x14e>
 8011498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801149c:	f003 0320 	and.w	r3, r3, #32
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d002      	beq.n	80114aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 fd1a 	bl	8011ede <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	695b      	ldr	r3, [r3, #20]
 80114b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114b4:	2b40      	cmp	r3, #64	; 0x40
 80114b6:	bf0c      	ite	eq
 80114b8:	2301      	moveq	r3, #1
 80114ba:	2300      	movne	r3, #0
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114c6:	f003 0308 	and.w	r3, r3, #8
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d103      	bne.n	80114d6 <HAL_UART_IRQHandler+0x17a>
 80114ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d04f      	beq.n	8011576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f000 fc22 	bl	8011d20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	695b      	ldr	r3, [r3, #20]
 80114e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e6:	2b40      	cmp	r3, #64	; 0x40
 80114e8:	d141      	bne.n	801156e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	3314      	adds	r3, #20
 80114f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80114f8:	e853 3f00 	ldrex	r3, [r3]
 80114fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	3314      	adds	r3, #20
 8011512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801151a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011526:	e841 2300 	strex	r3, r2, [r1]
 801152a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801152e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1d9      	bne.n	80114ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153a:	2b00      	cmp	r3, #0
 801153c:	d013      	beq.n	8011566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011542:	4a7d      	ldr	r2, [pc, #500]	; (8011738 <HAL_UART_IRQHandler+0x3dc>)
 8011544:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801154a:	4618      	mov	r0, r3
 801154c:	f7fa fbaa 	bl	800bca4 <HAL_DMA_Abort_IT>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d016      	beq.n	8011584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011560:	4610      	mov	r0, r2
 8011562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011564:	e00e      	b.n	8011584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f9ae 	bl	80118c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801156c:	e00a      	b.n	8011584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 f9aa 	bl	80118c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011574:	e006      	b.n	8011584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f9a6 	bl	80118c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8011582:	e170      	b.n	8011866 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011584:	bf00      	nop
    return;
 8011586:	e16e      	b.n	8011866 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158c:	2b01      	cmp	r3, #1
 801158e:	f040 814a 	bne.w	8011826 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011596:	f003 0310 	and.w	r3, r3, #16
 801159a:	2b00      	cmp	r3, #0
 801159c:	f000 8143 	beq.w	8011826 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80115a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115a4:	f003 0310 	and.w	r3, r3, #16
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 813c 	beq.w	8011826 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80115ae:	2300      	movs	r3, #0
 80115b0:	60bb      	str	r3, [r7, #8]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	60bb      	str	r3, [r7, #8]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	60bb      	str	r3, [r7, #8]
 80115c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115ce:	2b40      	cmp	r3, #64	; 0x40
 80115d0:	f040 80b4 	bne.w	801173c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80115e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f000 8140 	beq.w	801186a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80115f2:	429a      	cmp	r2, r3
 80115f4:	f080 8139 	bcs.w	801186a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80115fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011604:	69db      	ldr	r3, [r3, #28]
 8011606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801160a:	f000 8088 	beq.w	801171e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	330c      	adds	r3, #12
 8011614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801161c:	e853 3f00 	ldrex	r3, [r3]
 8011620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801162c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	330c      	adds	r3, #12
 8011636:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801163a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801163e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801164a:	e841 2300 	strex	r3, r2, [r1]
 801164e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1d9      	bne.n	801160e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	3314      	adds	r3, #20
 8011660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011664:	e853 3f00 	ldrex	r3, [r3]
 8011668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801166a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801166c:	f023 0301 	bic.w	r3, r3, #1
 8011670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	3314      	adds	r3, #20
 801167a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801167e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801168a:	e841 2300 	strex	r3, r2, [r1]
 801168e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011692:	2b00      	cmp	r3, #0
 8011694:	d1e1      	bne.n	801165a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	3314      	adds	r3, #20
 801169c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801169e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116a0:	e853 3f00 	ldrex	r3, [r3]
 80116a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80116a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	3314      	adds	r3, #20
 80116b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80116ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80116bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80116c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80116c2:	e841 2300 	strex	r3, r2, [r1]
 80116c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80116c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d1e3      	bne.n	8011696 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2220      	movs	r2, #32
 80116d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	330c      	adds	r3, #12
 80116e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e6:	e853 3f00 	ldrex	r3, [r3]
 80116ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80116ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ee:	f023 0310 	bic.w	r3, r3, #16
 80116f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	330c      	adds	r3, #12
 80116fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011700:	65ba      	str	r2, [r7, #88]	; 0x58
 8011702:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011708:	e841 2300 	strex	r3, r2, [r1]
 801170c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801170e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011710:	2b00      	cmp	r3, #0
 8011712:	d1e3      	bne.n	80116dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011718:	4618      	mov	r0, r3
 801171a:	f7fa fa53 	bl	800bbc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011726:	b29b      	uxth	r3, r3
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	b29b      	uxth	r3, r3
 801172c:	4619      	mov	r1, r3
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f8d4 	bl	80118dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011734:	e099      	b.n	801186a <HAL_UART_IRQHandler+0x50e>
 8011736:	bf00      	nop
 8011738:	08011de7 	.word	0x08011de7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011744:	b29b      	uxth	r3, r3
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011750:	b29b      	uxth	r3, r3
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 808b 	beq.w	801186e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801175c:	2b00      	cmp	r3, #0
 801175e:	f000 8086 	beq.w	801186e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	330c      	adds	r3, #12
 8011768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176c:	e853 3f00 	ldrex	r3, [r3]
 8011770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	330c      	adds	r3, #12
 8011782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011786:	647a      	str	r2, [r7, #68]	; 0x44
 8011788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801178c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801178e:	e841 2300 	strex	r3, r2, [r1]
 8011792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1e3      	bne.n	8011762 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	3314      	adds	r3, #20
 80117a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	e853 3f00 	ldrex	r3, [r3]
 80117a8:	623b      	str	r3, [r7, #32]
   return(result);
 80117aa:	6a3b      	ldr	r3, [r7, #32]
 80117ac:	f023 0301 	bic.w	r3, r3, #1
 80117b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	3314      	adds	r3, #20
 80117ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80117be:	633a      	str	r2, [r7, #48]	; 0x30
 80117c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117c6:	e841 2300 	strex	r3, r2, [r1]
 80117ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1e3      	bne.n	801179a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2220      	movs	r2, #32
 80117d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	330c      	adds	r3, #12
 80117e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	e853 3f00 	ldrex	r3, [r3]
 80117ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f023 0310 	bic.w	r3, r3, #16
 80117f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	330c      	adds	r3, #12
 8011800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011804:	61fa      	str	r2, [r7, #28]
 8011806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011808:	69b9      	ldr	r1, [r7, #24]
 801180a:	69fa      	ldr	r2, [r7, #28]
 801180c:	e841 2300 	strex	r3, r2, [r1]
 8011810:	617b      	str	r3, [r7, #20]
   return(result);
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1e3      	bne.n	80117e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801181c:	4619      	mov	r1, r3
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 f85c 	bl	80118dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011824:	e023      	b.n	801186e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801182e:	2b00      	cmp	r3, #0
 8011830:	d009      	beq.n	8011846 <HAL_UART_IRQHandler+0x4ea>
 8011832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801183a:	2b00      	cmp	r3, #0
 801183c:	d003      	beq.n	8011846 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fae5 	bl	8011e0e <UART_Transmit_IT>
    return;
 8011844:	e014      	b.n	8011870 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801184e:	2b00      	cmp	r3, #0
 8011850:	d00e      	beq.n	8011870 <HAL_UART_IRQHandler+0x514>
 8011852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801185a:	2b00      	cmp	r3, #0
 801185c:	d008      	beq.n	8011870 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 fb25 	bl	8011eae <UART_EndTransmit_IT>
    return;
 8011864:	e004      	b.n	8011870 <HAL_UART_IRQHandler+0x514>
    return;
 8011866:	bf00      	nop
 8011868:	e002      	b.n	8011870 <HAL_UART_IRQHandler+0x514>
      return;
 801186a:	bf00      	nop
 801186c:	e000      	b.n	8011870 <HAL_UART_IRQHandler+0x514>
      return;
 801186e:	bf00      	nop
  }
}
 8011870:	37e8      	adds	r7, #232	; 0xe8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop

08011878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011880:	bf00      	nop
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr

0801188c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8011894:	bf00      	nop
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80118bc:	bf00      	nop
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr

080118c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80118d0:	bf00      	nop
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	460b      	mov	r3, r1
 80118e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80118e8:	bf00      	nop
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b090      	sub	sp, #64	; 0x40
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011900:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801190c:	2b00      	cmp	r3, #0
 801190e:	d137      	bne.n	8011980 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8011910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011912:	2200      	movs	r2, #0
 8011914:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3314      	adds	r3, #20
 801191c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011920:	e853 3f00 	ldrex	r3, [r3]
 8011924:	623b      	str	r3, [r7, #32]
   return(result);
 8011926:	6a3b      	ldr	r3, [r7, #32]
 8011928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801192c:	63bb      	str	r3, [r7, #56]	; 0x38
 801192e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3314      	adds	r3, #20
 8011934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011936:	633a      	str	r2, [r7, #48]	; 0x30
 8011938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801193a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801193c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801193e:	e841 2300 	strex	r3, r2, [r1]
 8011942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1e5      	bne.n	8011916 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801194a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	330c      	adds	r3, #12
 8011950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	e853 3f00 	ldrex	r3, [r3]
 8011958:	60fb      	str	r3, [r7, #12]
   return(result);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011960:	637b      	str	r3, [r7, #52]	; 0x34
 8011962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	330c      	adds	r3, #12
 8011968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801196a:	61fa      	str	r2, [r7, #28]
 801196c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801196e:	69b9      	ldr	r1, [r7, #24]
 8011970:	69fa      	ldr	r2, [r7, #28]
 8011972:	e841 2300 	strex	r3, r2, [r1]
 8011976:	617b      	str	r3, [r7, #20]
   return(result);
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1e5      	bne.n	801194a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801197e:	e002      	b.n	8011986 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011980:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011982:	f7ff ff79 	bl	8011878 <HAL_UART_TxCpltCallback>
}
 8011986:	bf00      	nop
 8011988:	3740      	adds	r7, #64	; 0x40
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801198e:	b580      	push	{r7, lr}
 8011990:	b084      	sub	sp, #16
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f7ff ff75 	bl	801188c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119a2:	bf00      	nop
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}

080119aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80119aa:	b580      	push	{r7, lr}
 80119ac:	b09c      	sub	sp, #112	; 0x70
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d172      	bne.n	8011aac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80119c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119c8:	2200      	movs	r2, #0
 80119ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80119cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	330c      	adds	r3, #12
 80119d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119d6:	e853 3f00 	ldrex	r3, [r3]
 80119da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80119dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80119e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	330c      	adds	r3, #12
 80119ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80119ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80119ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80119f4:	e841 2300 	strex	r3, r2, [r1]
 80119f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80119fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1e5      	bne.n	80119cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3314      	adds	r3, #20
 8011a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0a:	e853 3f00 	ldrex	r3, [r3]
 8011a0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a12:	f023 0301 	bic.w	r3, r3, #1
 8011a16:	667b      	str	r3, [r7, #100]	; 0x64
 8011a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	3314      	adds	r3, #20
 8011a1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011a20:	647a      	str	r2, [r7, #68]	; 0x44
 8011a22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a28:	e841 2300 	strex	r3, r2, [r1]
 8011a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1e5      	bne.n	8011a00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	3314      	adds	r3, #20
 8011a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3e:	e853 3f00 	ldrex	r3, [r3]
 8011a42:	623b      	str	r3, [r7, #32]
   return(result);
 8011a44:	6a3b      	ldr	r3, [r7, #32]
 8011a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8011a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	3314      	adds	r3, #20
 8011a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a54:	633a      	str	r2, [r7, #48]	; 0x30
 8011a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a5c:	e841 2300 	strex	r3, r2, [r1]
 8011a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1e5      	bne.n	8011a34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a6a:	2220      	movs	r2, #32
 8011a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d119      	bne.n	8011aac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	330c      	adds	r3, #12
 8011a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	e853 3f00 	ldrex	r3, [r3]
 8011a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f023 0310 	bic.w	r3, r3, #16
 8011a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	330c      	adds	r3, #12
 8011a96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a98:	61fa      	str	r2, [r7, #28]
 8011a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9c:	69b9      	ldr	r1, [r7, #24]
 8011a9e:	69fa      	ldr	r2, [r7, #28]
 8011aa0:	e841 2300 	strex	r3, r2, [r1]
 8011aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d1e5      	bne.n	8011a78 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d106      	bne.n	8011ac2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011ab8:	4619      	mov	r1, r3
 8011aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011abc:	f7ff ff0e 	bl	80118dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011ac0:	e002      	b.n	8011ac8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8011ac2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011ac4:	f7ff feec 	bl	80118a0 <HAL_UART_RxCpltCallback>
}
 8011ac8:	bf00      	nop
 8011aca:	3770      	adds	r7, #112	; 0x70
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011adc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d108      	bne.n	8011af8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011aea:	085b      	lsrs	r3, r3, #1
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	4619      	mov	r1, r3
 8011af0:	68f8      	ldr	r0, [r7, #12]
 8011af2:	f7ff fef3 	bl	80118dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011af6:	e002      	b.n	8011afe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f7ff fedb 	bl	80118b4 <HAL_UART_RxHalfCpltCallback>
}
 8011afe:	bf00      	nop
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	695b      	ldr	r3, [r3, #20]
 8011b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b22:	2b80      	cmp	r3, #128	; 0x80
 8011b24:	bf0c      	ite	eq
 8011b26:	2301      	moveq	r3, #1
 8011b28:	2300      	movne	r3, #0
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	2b21      	cmp	r3, #33	; 0x21
 8011b38:	d108      	bne.n	8011b4c <UART_DMAError+0x46>
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d005      	beq.n	8011b4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	2200      	movs	r2, #0
 8011b44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011b46:	68b8      	ldr	r0, [r7, #8]
 8011b48:	f000 f8c2 	bl	8011cd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	695b      	ldr	r3, [r3, #20]
 8011b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b56:	2b40      	cmp	r3, #64	; 0x40
 8011b58:	bf0c      	ite	eq
 8011b5a:	2301      	moveq	r3, #1
 8011b5c:	2300      	movne	r3, #0
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	2b22      	cmp	r3, #34	; 0x22
 8011b6c:	d108      	bne.n	8011b80 <UART_DMAError+0x7a>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d005      	beq.n	8011b80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	2200      	movs	r2, #0
 8011b78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011b7a:	68b8      	ldr	r0, [r7, #8]
 8011b7c:	f000 f8d0 	bl	8011d20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b84:	f043 0210 	orr.w	r2, r3, #16
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b8c:	68b8      	ldr	r0, [r7, #8]
 8011b8e:	f7ff fe9b 	bl	80118c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b92:	bf00      	nop
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b098      	sub	sp, #96	; 0x60
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011baa:	68ba      	ldr	r2, [r7, #8]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	88fa      	ldrh	r2, [r7, #6]
 8011bb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2222      	movs	r2, #34	; 0x22
 8011bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bc8:	4a3e      	ldr	r2, [pc, #248]	; (8011cc4 <UART_Start_Receive_DMA+0x128>)
 8011bca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bd0:	4a3d      	ldr	r2, [pc, #244]	; (8011cc8 <UART_Start_Receive_DMA+0x12c>)
 8011bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bd8:	4a3c      	ldr	r2, [pc, #240]	; (8011ccc <UART_Start_Receive_DMA+0x130>)
 8011bda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be0:	2200      	movs	r2, #0
 8011be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011be4:	f107 0308 	add.w	r3, r7, #8
 8011be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	3304      	adds	r3, #4
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	88fb      	ldrh	r3, [r7, #6]
 8011bfc:	f7f9 ff8a 	bl	800bb14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011c00:	2300      	movs	r3, #0
 8011c02:	613b      	str	r3, [r7, #16]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	613b      	str	r3, [r7, #16]
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	613b      	str	r3, [r7, #16]
 8011c14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	330c      	adds	r3, #12
 8011c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c28:	e853 3f00 	ldrex	r3, [r3]
 8011c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	330c      	adds	r3, #12
 8011c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011c40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c46:	e841 2300 	strex	r3, r2, [r1]
 8011c4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1e5      	bne.n	8011c1e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	3314      	adds	r3, #20
 8011c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5c:	e853 3f00 	ldrex	r3, [r3]
 8011c60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c64:	f043 0301 	orr.w	r3, r3, #1
 8011c68:	657b      	str	r3, [r7, #84]	; 0x54
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3314      	adds	r3, #20
 8011c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c72:	63ba      	str	r2, [r7, #56]	; 0x38
 8011c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c7a:	e841 2300 	strex	r3, r2, [r1]
 8011c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1e5      	bne.n	8011c52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	3314      	adds	r3, #20
 8011c8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c8e:	69bb      	ldr	r3, [r7, #24]
 8011c90:	e853 3f00 	ldrex	r3, [r3]
 8011c94:	617b      	str	r3, [r7, #20]
   return(result);
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	3314      	adds	r3, #20
 8011ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8011ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011caa:	6a39      	ldr	r1, [r7, #32]
 8011cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cae:	e841 2300 	strex	r3, r2, [r1]
 8011cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1e5      	bne.n	8011c86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3760      	adds	r7, #96	; 0x60
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	080119ab 	.word	0x080119ab
 8011cc8:	08011ad1 	.word	0x08011ad1
 8011ccc:	08011b07 	.word	0x08011b07

08011cd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b089      	sub	sp, #36	; 0x24
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	330c      	adds	r3, #12
 8011cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	e853 3f00 	ldrex	r3, [r3]
 8011ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011cee:	61fb      	str	r3, [r7, #28]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	330c      	adds	r3, #12
 8011cf6:	69fa      	ldr	r2, [r7, #28]
 8011cf8:	61ba      	str	r2, [r7, #24]
 8011cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfc:	6979      	ldr	r1, [r7, #20]
 8011cfe:	69ba      	ldr	r2, [r7, #24]
 8011d00:	e841 2300 	strex	r3, r2, [r1]
 8011d04:	613b      	str	r3, [r7, #16]
   return(result);
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1e5      	bne.n	8011cd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2220      	movs	r2, #32
 8011d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011d14:	bf00      	nop
 8011d16:	3724      	adds	r7, #36	; 0x24
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b095      	sub	sp, #84	; 0x54
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	330c      	adds	r3, #12
 8011d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d32:	e853 3f00 	ldrex	r3, [r3]
 8011d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	330c      	adds	r3, #12
 8011d46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d48:	643a      	str	r2, [r7, #64]	; 0x40
 8011d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d50:	e841 2300 	strex	r3, r2, [r1]
 8011d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1e5      	bne.n	8011d28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	3314      	adds	r3, #20
 8011d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	e853 3f00 	ldrex	r3, [r3]
 8011d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	f023 0301 	bic.w	r3, r3, #1
 8011d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3314      	adds	r3, #20
 8011d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d84:	e841 2300 	strex	r3, r2, [r1]
 8011d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1e5      	bne.n	8011d5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d119      	bne.n	8011dcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	330c      	adds	r3, #12
 8011d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	e853 3f00 	ldrex	r3, [r3]
 8011da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	f023 0310 	bic.w	r3, r3, #16
 8011dae:	647b      	str	r3, [r7, #68]	; 0x44
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	330c      	adds	r3, #12
 8011db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011db8:	61ba      	str	r2, [r7, #24]
 8011dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dbc:	6979      	ldr	r1, [r7, #20]
 8011dbe:	69ba      	ldr	r2, [r7, #24]
 8011dc0:	e841 2300 	strex	r3, r2, [r1]
 8011dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d1e5      	bne.n	8011d98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2220      	movs	r2, #32
 8011dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011dda:	bf00      	nop
 8011ddc:	3754      	adds	r7, #84	; 0x54
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr

08011de6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b084      	sub	sp, #16
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f7ff fd61 	bl	80118c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e06:	bf00      	nop
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011e0e:	b480      	push	{r7}
 8011e10:	b085      	sub	sp, #20
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	2b21      	cmp	r3, #33	; 0x21
 8011e20:	d13e      	bne.n	8011ea0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e2a:	d114      	bne.n	8011e56 <UART_Transmit_IT+0x48>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	691b      	ldr	r3, [r3, #16]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d110      	bne.n	8011e56 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6a1b      	ldr	r3, [r3, #32]
 8011e38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	881b      	ldrh	r3, [r3, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6a1b      	ldr	r3, [r3, #32]
 8011e4e:	1c9a      	adds	r2, r3, #2
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	621a      	str	r2, [r3, #32]
 8011e54:	e008      	b.n	8011e68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a1b      	ldr	r3, [r3, #32]
 8011e5a:	1c59      	adds	r1, r3, #1
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	6211      	str	r1, [r2, #32]
 8011e60:	781a      	ldrb	r2, [r3, #0]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	4619      	mov	r1, r3
 8011e76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d10f      	bne.n	8011e9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	68da      	ldr	r2, [r3, #12]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011e8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	68da      	ldr	r2, [r3, #12]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	e000      	b.n	8011ea2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011ea0:	2302      	movs	r3, #2
  }
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3714      	adds	r7, #20
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr

08011eae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	68da      	ldr	r2, [r3, #12]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011ec4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2220      	movs	r2, #32
 8011eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ff fcd2 	bl	8011878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b08c      	sub	sp, #48	; 0x30
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011eec:	b2db      	uxtb	r3, r3
 8011eee:	2b22      	cmp	r3, #34	; 0x22
 8011ef0:	f040 80ab 	bne.w	801204a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011efc:	d117      	bne.n	8011f2e <UART_Receive_IT+0x50>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	691b      	ldr	r3, [r3, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d113      	bne.n	8011f2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011f06:	2300      	movs	r3, #0
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f26:	1c9a      	adds	r2, r3, #2
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8011f2c:	e026      	b.n	8011f7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011f34:	2300      	movs	r3, #0
 8011f36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f40:	d007      	beq.n	8011f52 <UART_Receive_IT+0x74>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10a      	bne.n	8011f60 <UART_Receive_IT+0x82>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d106      	bne.n	8011f60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	685b      	ldr	r3, [r3, #4]
 8011f58:	b2da      	uxtb	r2, r3
 8011f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5c:	701a      	strb	r2, [r3, #0]
 8011f5e:	e008      	b.n	8011f72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f6c:	b2da      	uxtb	r2, r3
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f76:	1c5a      	adds	r2, r3, #1
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	3b01      	subs	r3, #1
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	4619      	mov	r1, r3
 8011f8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d15a      	bne.n	8012046 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	68da      	ldr	r2, [r3, #12]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f022 0220 	bic.w	r2, r2, #32
 8011f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	68da      	ldr	r2, [r3, #12]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	695a      	ldr	r2, [r3, #20]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f022 0201 	bic.w	r2, r2, #1
 8011fbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2220      	movs	r2, #32
 8011fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d135      	bne.n	801203c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	330c      	adds	r3, #12
 8011fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	e853 3f00 	ldrex	r3, [r3]
 8011fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	f023 0310 	bic.w	r3, r3, #16
 8011fec:	627b      	str	r3, [r7, #36]	; 0x24
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	330c      	adds	r3, #12
 8011ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ff6:	623a      	str	r2, [r7, #32]
 8011ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ffa:	69f9      	ldr	r1, [r7, #28]
 8011ffc:	6a3a      	ldr	r2, [r7, #32]
 8011ffe:	e841 2300 	strex	r3, r2, [r1]
 8012002:	61bb      	str	r3, [r7, #24]
   return(result);
 8012004:	69bb      	ldr	r3, [r7, #24]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1e5      	bne.n	8011fd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f003 0310 	and.w	r3, r3, #16
 8012014:	2b10      	cmp	r3, #16
 8012016:	d10a      	bne.n	801202e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012018:	2300      	movs	r3, #0
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	60fb      	str	r3, [r7, #12]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	60fb      	str	r3, [r7, #12]
 801202c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012032:	4619      	mov	r1, r3
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f7ff fc51 	bl	80118dc <HAL_UARTEx_RxEventCallback>
 801203a:	e002      	b.n	8012042 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7ff fc2f 	bl	80118a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012042:	2300      	movs	r3, #0
 8012044:	e002      	b.n	801204c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012046:	2300      	movs	r3, #0
 8012048:	e000      	b.n	801204c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801204a:	2302      	movs	r3, #2
  }
}
 801204c:	4618      	mov	r0, r3
 801204e:	3730      	adds	r7, #48	; 0x30
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012058:	b0c0      	sub	sp, #256	; 0x100
 801205a:	af00      	add	r7, sp, #0
 801205c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012070:	68d9      	ldr	r1, [r3, #12]
 8012072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	ea40 0301 	orr.w	r3, r0, r1
 801207c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012082:	689a      	ldr	r2, [r3, #8]
 8012084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	431a      	orrs	r2, r3
 801208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012090:	695b      	ldr	r3, [r3, #20]
 8012092:	431a      	orrs	r2, r3
 8012094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012098:	69db      	ldr	r3, [r3, #28]
 801209a:	4313      	orrs	r3, r2
 801209c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80120a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80120ac:	f021 010c 	bic.w	r1, r1, #12
 80120b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80120ba:	430b      	orrs	r3, r1
 80120bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80120be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	695b      	ldr	r3, [r3, #20]
 80120c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80120ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120ce:	6999      	ldr	r1, [r3, #24]
 80120d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	ea40 0301 	orr.w	r3, r0, r1
 80120da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80120dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	4b8f      	ldr	r3, [pc, #572]	; (8012320 <UART_SetConfig+0x2cc>)
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d005      	beq.n	80120f4 <UART_SetConfig+0xa0>
 80120e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b8d      	ldr	r3, [pc, #564]	; (8012324 <UART_SetConfig+0x2d0>)
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d104      	bne.n	80120fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80120f4:	f7fd ffa0 	bl	8010038 <HAL_RCC_GetPCLK2Freq>
 80120f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80120fc:	e003      	b.n	8012106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80120fe:	f7fd ff87 	bl	8010010 <HAL_RCC_GetPCLK1Freq>
 8012102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801210a:	69db      	ldr	r3, [r3, #28]
 801210c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012110:	f040 810c 	bne.w	801232c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012118:	2200      	movs	r2, #0
 801211a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801211e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8012126:	4622      	mov	r2, r4
 8012128:	462b      	mov	r3, r5
 801212a:	1891      	adds	r1, r2, r2
 801212c:	65b9      	str	r1, [r7, #88]	; 0x58
 801212e:	415b      	adcs	r3, r3
 8012130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012136:	4621      	mov	r1, r4
 8012138:	eb12 0801 	adds.w	r8, r2, r1
 801213c:	4629      	mov	r1, r5
 801213e:	eb43 0901 	adc.w	r9, r3, r1
 8012142:	f04f 0200 	mov.w	r2, #0
 8012146:	f04f 0300 	mov.w	r3, #0
 801214a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801214e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012156:	4690      	mov	r8, r2
 8012158:	4699      	mov	r9, r3
 801215a:	4623      	mov	r3, r4
 801215c:	eb18 0303 	adds.w	r3, r8, r3
 8012160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012164:	462b      	mov	r3, r5
 8012166:	eb49 0303 	adc.w	r3, r9, r3
 801216a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801217a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801217e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012182:	460b      	mov	r3, r1
 8012184:	18db      	adds	r3, r3, r3
 8012186:	653b      	str	r3, [r7, #80]	; 0x50
 8012188:	4613      	mov	r3, r2
 801218a:	eb42 0303 	adc.w	r3, r2, r3
 801218e:	657b      	str	r3, [r7, #84]	; 0x54
 8012190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012198:	f7ee fd8e 	bl	8000cb8 <__aeabi_uldivmod>
 801219c:	4602      	mov	r2, r0
 801219e:	460b      	mov	r3, r1
 80121a0:	4b61      	ldr	r3, [pc, #388]	; (8012328 <UART_SetConfig+0x2d4>)
 80121a2:	fba3 2302 	umull	r2, r3, r3, r2
 80121a6:	095b      	lsrs	r3, r3, #5
 80121a8:	011c      	lsls	r4, r3, #4
 80121aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80121ae:	2200      	movs	r2, #0
 80121b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80121b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80121b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80121bc:	4642      	mov	r2, r8
 80121be:	464b      	mov	r3, r9
 80121c0:	1891      	adds	r1, r2, r2
 80121c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80121c4:	415b      	adcs	r3, r3
 80121c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80121cc:	4641      	mov	r1, r8
 80121ce:	eb12 0a01 	adds.w	sl, r2, r1
 80121d2:	4649      	mov	r1, r9
 80121d4:	eb43 0b01 	adc.w	fp, r3, r1
 80121d8:	f04f 0200 	mov.w	r2, #0
 80121dc:	f04f 0300 	mov.w	r3, #0
 80121e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80121e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80121e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121ec:	4692      	mov	sl, r2
 80121ee:	469b      	mov	fp, r3
 80121f0:	4643      	mov	r3, r8
 80121f2:	eb1a 0303 	adds.w	r3, sl, r3
 80121f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80121fa:	464b      	mov	r3, r9
 80121fc:	eb4b 0303 	adc.w	r3, fp, r3
 8012200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	2200      	movs	r2, #0
 801220c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012218:	460b      	mov	r3, r1
 801221a:	18db      	adds	r3, r3, r3
 801221c:	643b      	str	r3, [r7, #64]	; 0x40
 801221e:	4613      	mov	r3, r2
 8012220:	eb42 0303 	adc.w	r3, r2, r3
 8012224:	647b      	str	r3, [r7, #68]	; 0x44
 8012226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801222a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801222e:	f7ee fd43 	bl	8000cb8 <__aeabi_uldivmod>
 8012232:	4602      	mov	r2, r0
 8012234:	460b      	mov	r3, r1
 8012236:	4611      	mov	r1, r2
 8012238:	4b3b      	ldr	r3, [pc, #236]	; (8012328 <UART_SetConfig+0x2d4>)
 801223a:	fba3 2301 	umull	r2, r3, r3, r1
 801223e:	095b      	lsrs	r3, r3, #5
 8012240:	2264      	movs	r2, #100	; 0x64
 8012242:	fb02 f303 	mul.w	r3, r2, r3
 8012246:	1acb      	subs	r3, r1, r3
 8012248:	00db      	lsls	r3, r3, #3
 801224a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801224e:	4b36      	ldr	r3, [pc, #216]	; (8012328 <UART_SetConfig+0x2d4>)
 8012250:	fba3 2302 	umull	r2, r3, r3, r2
 8012254:	095b      	lsrs	r3, r3, #5
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801225c:	441c      	add	r4, r3
 801225e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012262:	2200      	movs	r2, #0
 8012264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801226c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012270:	4642      	mov	r2, r8
 8012272:	464b      	mov	r3, r9
 8012274:	1891      	adds	r1, r2, r2
 8012276:	63b9      	str	r1, [r7, #56]	; 0x38
 8012278:	415b      	adcs	r3, r3
 801227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801227c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012280:	4641      	mov	r1, r8
 8012282:	1851      	adds	r1, r2, r1
 8012284:	6339      	str	r1, [r7, #48]	; 0x30
 8012286:	4649      	mov	r1, r9
 8012288:	414b      	adcs	r3, r1
 801228a:	637b      	str	r3, [r7, #52]	; 0x34
 801228c:	f04f 0200 	mov.w	r2, #0
 8012290:	f04f 0300 	mov.w	r3, #0
 8012294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012298:	4659      	mov	r1, fp
 801229a:	00cb      	lsls	r3, r1, #3
 801229c:	4651      	mov	r1, sl
 801229e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80122a2:	4651      	mov	r1, sl
 80122a4:	00ca      	lsls	r2, r1, #3
 80122a6:	4610      	mov	r0, r2
 80122a8:	4619      	mov	r1, r3
 80122aa:	4603      	mov	r3, r0
 80122ac:	4642      	mov	r2, r8
 80122ae:	189b      	adds	r3, r3, r2
 80122b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80122b4:	464b      	mov	r3, r9
 80122b6:	460a      	mov	r2, r1
 80122b8:	eb42 0303 	adc.w	r3, r2, r3
 80122bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80122c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80122cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80122d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80122d4:	460b      	mov	r3, r1
 80122d6:	18db      	adds	r3, r3, r3
 80122d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80122da:	4613      	mov	r3, r2
 80122dc:	eb42 0303 	adc.w	r3, r2, r3
 80122e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80122e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80122ea:	f7ee fce5 	bl	8000cb8 <__aeabi_uldivmod>
 80122ee:	4602      	mov	r2, r0
 80122f0:	460b      	mov	r3, r1
 80122f2:	4b0d      	ldr	r3, [pc, #52]	; (8012328 <UART_SetConfig+0x2d4>)
 80122f4:	fba3 1302 	umull	r1, r3, r3, r2
 80122f8:	095b      	lsrs	r3, r3, #5
 80122fa:	2164      	movs	r1, #100	; 0x64
 80122fc:	fb01 f303 	mul.w	r3, r1, r3
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	00db      	lsls	r3, r3, #3
 8012304:	3332      	adds	r3, #50	; 0x32
 8012306:	4a08      	ldr	r2, [pc, #32]	; (8012328 <UART_SetConfig+0x2d4>)
 8012308:	fba2 2303 	umull	r2, r3, r2, r3
 801230c:	095b      	lsrs	r3, r3, #5
 801230e:	f003 0207 	and.w	r2, r3, #7
 8012312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4422      	add	r2, r4
 801231a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801231c:	e105      	b.n	801252a <UART_SetConfig+0x4d6>
 801231e:	bf00      	nop
 8012320:	40011000 	.word	0x40011000
 8012324:	40011400 	.word	0x40011400
 8012328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801232c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012330:	2200      	movs	r2, #0
 8012332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801233a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801233e:	4642      	mov	r2, r8
 8012340:	464b      	mov	r3, r9
 8012342:	1891      	adds	r1, r2, r2
 8012344:	6239      	str	r1, [r7, #32]
 8012346:	415b      	adcs	r3, r3
 8012348:	627b      	str	r3, [r7, #36]	; 0x24
 801234a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801234e:	4641      	mov	r1, r8
 8012350:	1854      	adds	r4, r2, r1
 8012352:	4649      	mov	r1, r9
 8012354:	eb43 0501 	adc.w	r5, r3, r1
 8012358:	f04f 0200 	mov.w	r2, #0
 801235c:	f04f 0300 	mov.w	r3, #0
 8012360:	00eb      	lsls	r3, r5, #3
 8012362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012366:	00e2      	lsls	r2, r4, #3
 8012368:	4614      	mov	r4, r2
 801236a:	461d      	mov	r5, r3
 801236c:	4643      	mov	r3, r8
 801236e:	18e3      	adds	r3, r4, r3
 8012370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012374:	464b      	mov	r3, r9
 8012376:	eb45 0303 	adc.w	r3, r5, r3
 801237a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	2200      	movs	r2, #0
 8012386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801238a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801238e:	f04f 0200 	mov.w	r2, #0
 8012392:	f04f 0300 	mov.w	r3, #0
 8012396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801239a:	4629      	mov	r1, r5
 801239c:	008b      	lsls	r3, r1, #2
 801239e:	4621      	mov	r1, r4
 80123a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80123a4:	4621      	mov	r1, r4
 80123a6:	008a      	lsls	r2, r1, #2
 80123a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80123ac:	f7ee fc84 	bl	8000cb8 <__aeabi_uldivmod>
 80123b0:	4602      	mov	r2, r0
 80123b2:	460b      	mov	r3, r1
 80123b4:	4b60      	ldr	r3, [pc, #384]	; (8012538 <UART_SetConfig+0x4e4>)
 80123b6:	fba3 2302 	umull	r2, r3, r3, r2
 80123ba:	095b      	lsrs	r3, r3, #5
 80123bc:	011c      	lsls	r4, r3, #4
 80123be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80123c2:	2200      	movs	r2, #0
 80123c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80123c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80123cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80123d0:	4642      	mov	r2, r8
 80123d2:	464b      	mov	r3, r9
 80123d4:	1891      	adds	r1, r2, r2
 80123d6:	61b9      	str	r1, [r7, #24]
 80123d8:	415b      	adcs	r3, r3
 80123da:	61fb      	str	r3, [r7, #28]
 80123dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80123e0:	4641      	mov	r1, r8
 80123e2:	1851      	adds	r1, r2, r1
 80123e4:	6139      	str	r1, [r7, #16]
 80123e6:	4649      	mov	r1, r9
 80123e8:	414b      	adcs	r3, r1
 80123ea:	617b      	str	r3, [r7, #20]
 80123ec:	f04f 0200 	mov.w	r2, #0
 80123f0:	f04f 0300 	mov.w	r3, #0
 80123f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80123f8:	4659      	mov	r1, fp
 80123fa:	00cb      	lsls	r3, r1, #3
 80123fc:	4651      	mov	r1, sl
 80123fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012402:	4651      	mov	r1, sl
 8012404:	00ca      	lsls	r2, r1, #3
 8012406:	4610      	mov	r0, r2
 8012408:	4619      	mov	r1, r3
 801240a:	4603      	mov	r3, r0
 801240c:	4642      	mov	r2, r8
 801240e:	189b      	adds	r3, r3, r2
 8012410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012414:	464b      	mov	r3, r9
 8012416:	460a      	mov	r2, r1
 8012418:	eb42 0303 	adc.w	r3, r2, r3
 801241c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	67bb      	str	r3, [r7, #120]	; 0x78
 801242a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801242c:	f04f 0200 	mov.w	r2, #0
 8012430:	f04f 0300 	mov.w	r3, #0
 8012434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012438:	4649      	mov	r1, r9
 801243a:	008b      	lsls	r3, r1, #2
 801243c:	4641      	mov	r1, r8
 801243e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012442:	4641      	mov	r1, r8
 8012444:	008a      	lsls	r2, r1, #2
 8012446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801244a:	f7ee fc35 	bl	8000cb8 <__aeabi_uldivmod>
 801244e:	4602      	mov	r2, r0
 8012450:	460b      	mov	r3, r1
 8012452:	4b39      	ldr	r3, [pc, #228]	; (8012538 <UART_SetConfig+0x4e4>)
 8012454:	fba3 1302 	umull	r1, r3, r3, r2
 8012458:	095b      	lsrs	r3, r3, #5
 801245a:	2164      	movs	r1, #100	; 0x64
 801245c:	fb01 f303 	mul.w	r3, r1, r3
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	011b      	lsls	r3, r3, #4
 8012464:	3332      	adds	r3, #50	; 0x32
 8012466:	4a34      	ldr	r2, [pc, #208]	; (8012538 <UART_SetConfig+0x4e4>)
 8012468:	fba2 2303 	umull	r2, r3, r2, r3
 801246c:	095b      	lsrs	r3, r3, #5
 801246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012472:	441c      	add	r4, r3
 8012474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012478:	2200      	movs	r2, #0
 801247a:	673b      	str	r3, [r7, #112]	; 0x70
 801247c:	677a      	str	r2, [r7, #116]	; 0x74
 801247e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012482:	4642      	mov	r2, r8
 8012484:	464b      	mov	r3, r9
 8012486:	1891      	adds	r1, r2, r2
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	415b      	adcs	r3, r3
 801248c:	60fb      	str	r3, [r7, #12]
 801248e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012492:	4641      	mov	r1, r8
 8012494:	1851      	adds	r1, r2, r1
 8012496:	6039      	str	r1, [r7, #0]
 8012498:	4649      	mov	r1, r9
 801249a:	414b      	adcs	r3, r1
 801249c:	607b      	str	r3, [r7, #4]
 801249e:	f04f 0200 	mov.w	r2, #0
 80124a2:	f04f 0300 	mov.w	r3, #0
 80124a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80124aa:	4659      	mov	r1, fp
 80124ac:	00cb      	lsls	r3, r1, #3
 80124ae:	4651      	mov	r1, sl
 80124b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80124b4:	4651      	mov	r1, sl
 80124b6:	00ca      	lsls	r2, r1, #3
 80124b8:	4610      	mov	r0, r2
 80124ba:	4619      	mov	r1, r3
 80124bc:	4603      	mov	r3, r0
 80124be:	4642      	mov	r2, r8
 80124c0:	189b      	adds	r3, r3, r2
 80124c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80124c4:	464b      	mov	r3, r9
 80124c6:	460a      	mov	r2, r1
 80124c8:	eb42 0303 	adc.w	r3, r2, r3
 80124cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80124ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	2200      	movs	r2, #0
 80124d6:	663b      	str	r3, [r7, #96]	; 0x60
 80124d8:	667a      	str	r2, [r7, #100]	; 0x64
 80124da:	f04f 0200 	mov.w	r2, #0
 80124de:	f04f 0300 	mov.w	r3, #0
 80124e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80124e6:	4649      	mov	r1, r9
 80124e8:	008b      	lsls	r3, r1, #2
 80124ea:	4641      	mov	r1, r8
 80124ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80124f0:	4641      	mov	r1, r8
 80124f2:	008a      	lsls	r2, r1, #2
 80124f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80124f8:	f7ee fbde 	bl	8000cb8 <__aeabi_uldivmod>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4b0d      	ldr	r3, [pc, #52]	; (8012538 <UART_SetConfig+0x4e4>)
 8012502:	fba3 1302 	umull	r1, r3, r3, r2
 8012506:	095b      	lsrs	r3, r3, #5
 8012508:	2164      	movs	r1, #100	; 0x64
 801250a:	fb01 f303 	mul.w	r3, r1, r3
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	011b      	lsls	r3, r3, #4
 8012512:	3332      	adds	r3, #50	; 0x32
 8012514:	4a08      	ldr	r2, [pc, #32]	; (8012538 <UART_SetConfig+0x4e4>)
 8012516:	fba2 2303 	umull	r2, r3, r2, r3
 801251a:	095b      	lsrs	r3, r3, #5
 801251c:	f003 020f 	and.w	r2, r3, #15
 8012520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4422      	add	r2, r4
 8012528:	609a      	str	r2, [r3, #8]
}
 801252a:	bf00      	nop
 801252c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012530:	46bd      	mov	sp, r7
 8012532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012536:	bf00      	nop
 8012538:	51eb851f 	.word	0x51eb851f

0801253c <atof>:
 801253c:	2100      	movs	r1, #0
 801253e:	f001 bcff 	b.w	8013f40 <strtod>

08012542 <atoi>:
 8012542:	220a      	movs	r2, #10
 8012544:	2100      	movs	r1, #0
 8012546:	f001 bde7 	b.w	8014118 <strtol>
	...

0801254c <__errno>:
 801254c:	4b01      	ldr	r3, [pc, #4]	; (8012554 <__errno+0x8>)
 801254e:	6818      	ldr	r0, [r3, #0]
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	20000044 	.word	0x20000044

08012558 <__libc_init_array>:
 8012558:	b570      	push	{r4, r5, r6, lr}
 801255a:	4d0d      	ldr	r5, [pc, #52]	; (8012590 <__libc_init_array+0x38>)
 801255c:	4c0d      	ldr	r4, [pc, #52]	; (8012594 <__libc_init_array+0x3c>)
 801255e:	1b64      	subs	r4, r4, r5
 8012560:	10a4      	asrs	r4, r4, #2
 8012562:	2600      	movs	r6, #0
 8012564:	42a6      	cmp	r6, r4
 8012566:	d109      	bne.n	801257c <__libc_init_array+0x24>
 8012568:	4d0b      	ldr	r5, [pc, #44]	; (8012598 <__libc_init_array+0x40>)
 801256a:	4c0c      	ldr	r4, [pc, #48]	; (801259c <__libc_init_array+0x44>)
 801256c:	f004 fd04 	bl	8016f78 <_init>
 8012570:	1b64      	subs	r4, r4, r5
 8012572:	10a4      	asrs	r4, r4, #2
 8012574:	2600      	movs	r6, #0
 8012576:	42a6      	cmp	r6, r4
 8012578:	d105      	bne.n	8012586 <__libc_init_array+0x2e>
 801257a:	bd70      	pop	{r4, r5, r6, pc}
 801257c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012580:	4798      	blx	r3
 8012582:	3601      	adds	r6, #1
 8012584:	e7ee      	b.n	8012564 <__libc_init_array+0xc>
 8012586:	f855 3b04 	ldr.w	r3, [r5], #4
 801258a:	4798      	blx	r3
 801258c:	3601      	adds	r6, #1
 801258e:	e7f2      	b.n	8012576 <__libc_init_array+0x1e>
 8012590:	0802b0c8 	.word	0x0802b0c8
 8012594:	0802b0c8 	.word	0x0802b0c8
 8012598:	0802b0c8 	.word	0x0802b0c8
 801259c:	0802b0cc 	.word	0x0802b0cc

080125a0 <memset>:
 80125a0:	4402      	add	r2, r0
 80125a2:	4603      	mov	r3, r0
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d100      	bne.n	80125aa <memset+0xa>
 80125a8:	4770      	bx	lr
 80125aa:	f803 1b01 	strb.w	r1, [r3], #1
 80125ae:	e7f9      	b.n	80125a4 <memset+0x4>

080125b0 <__cvt>:
 80125b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125b4:	ec55 4b10 	vmov	r4, r5, d0
 80125b8:	2d00      	cmp	r5, #0
 80125ba:	460e      	mov	r6, r1
 80125bc:	4619      	mov	r1, r3
 80125be:	462b      	mov	r3, r5
 80125c0:	bfbb      	ittet	lt
 80125c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80125c6:	461d      	movlt	r5, r3
 80125c8:	2300      	movge	r3, #0
 80125ca:	232d      	movlt	r3, #45	; 0x2d
 80125cc:	700b      	strb	r3, [r1, #0]
 80125ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80125d4:	4691      	mov	r9, r2
 80125d6:	f023 0820 	bic.w	r8, r3, #32
 80125da:	bfbc      	itt	lt
 80125dc:	4622      	movlt	r2, r4
 80125de:	4614      	movlt	r4, r2
 80125e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125e4:	d005      	beq.n	80125f2 <__cvt+0x42>
 80125e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80125ea:	d100      	bne.n	80125ee <__cvt+0x3e>
 80125ec:	3601      	adds	r6, #1
 80125ee:	2102      	movs	r1, #2
 80125f0:	e000      	b.n	80125f4 <__cvt+0x44>
 80125f2:	2103      	movs	r1, #3
 80125f4:	ab03      	add	r3, sp, #12
 80125f6:	9301      	str	r3, [sp, #4]
 80125f8:	ab02      	add	r3, sp, #8
 80125fa:	9300      	str	r3, [sp, #0]
 80125fc:	ec45 4b10 	vmov	d0, r4, r5
 8012600:	4653      	mov	r3, sl
 8012602:	4632      	mov	r2, r6
 8012604:	f001 fe3c 	bl	8014280 <_dtoa_r>
 8012608:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801260c:	4607      	mov	r7, r0
 801260e:	d102      	bne.n	8012616 <__cvt+0x66>
 8012610:	f019 0f01 	tst.w	r9, #1
 8012614:	d022      	beq.n	801265c <__cvt+0xac>
 8012616:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801261a:	eb07 0906 	add.w	r9, r7, r6
 801261e:	d110      	bne.n	8012642 <__cvt+0x92>
 8012620:	783b      	ldrb	r3, [r7, #0]
 8012622:	2b30      	cmp	r3, #48	; 0x30
 8012624:	d10a      	bne.n	801263c <__cvt+0x8c>
 8012626:	2200      	movs	r2, #0
 8012628:	2300      	movs	r3, #0
 801262a:	4620      	mov	r0, r4
 801262c:	4629      	mov	r1, r5
 801262e:	f7ee fa63 	bl	8000af8 <__aeabi_dcmpeq>
 8012632:	b918      	cbnz	r0, 801263c <__cvt+0x8c>
 8012634:	f1c6 0601 	rsb	r6, r6, #1
 8012638:	f8ca 6000 	str.w	r6, [sl]
 801263c:	f8da 3000 	ldr.w	r3, [sl]
 8012640:	4499      	add	r9, r3
 8012642:	2200      	movs	r2, #0
 8012644:	2300      	movs	r3, #0
 8012646:	4620      	mov	r0, r4
 8012648:	4629      	mov	r1, r5
 801264a:	f7ee fa55 	bl	8000af8 <__aeabi_dcmpeq>
 801264e:	b108      	cbz	r0, 8012654 <__cvt+0xa4>
 8012650:	f8cd 900c 	str.w	r9, [sp, #12]
 8012654:	2230      	movs	r2, #48	; 0x30
 8012656:	9b03      	ldr	r3, [sp, #12]
 8012658:	454b      	cmp	r3, r9
 801265a:	d307      	bcc.n	801266c <__cvt+0xbc>
 801265c:	9b03      	ldr	r3, [sp, #12]
 801265e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012660:	1bdb      	subs	r3, r3, r7
 8012662:	4638      	mov	r0, r7
 8012664:	6013      	str	r3, [r2, #0]
 8012666:	b004      	add	sp, #16
 8012668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801266c:	1c59      	adds	r1, r3, #1
 801266e:	9103      	str	r1, [sp, #12]
 8012670:	701a      	strb	r2, [r3, #0]
 8012672:	e7f0      	b.n	8012656 <__cvt+0xa6>

08012674 <__exponent>:
 8012674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012676:	4603      	mov	r3, r0
 8012678:	2900      	cmp	r1, #0
 801267a:	bfb8      	it	lt
 801267c:	4249      	neglt	r1, r1
 801267e:	f803 2b02 	strb.w	r2, [r3], #2
 8012682:	bfb4      	ite	lt
 8012684:	222d      	movlt	r2, #45	; 0x2d
 8012686:	222b      	movge	r2, #43	; 0x2b
 8012688:	2909      	cmp	r1, #9
 801268a:	7042      	strb	r2, [r0, #1]
 801268c:	dd2a      	ble.n	80126e4 <__exponent+0x70>
 801268e:	f10d 0407 	add.w	r4, sp, #7
 8012692:	46a4      	mov	ip, r4
 8012694:	270a      	movs	r7, #10
 8012696:	46a6      	mov	lr, r4
 8012698:	460a      	mov	r2, r1
 801269a:	fb91 f6f7 	sdiv	r6, r1, r7
 801269e:	fb07 1516 	mls	r5, r7, r6, r1
 80126a2:	3530      	adds	r5, #48	; 0x30
 80126a4:	2a63      	cmp	r2, #99	; 0x63
 80126a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80126aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80126ae:	4631      	mov	r1, r6
 80126b0:	dcf1      	bgt.n	8012696 <__exponent+0x22>
 80126b2:	3130      	adds	r1, #48	; 0x30
 80126b4:	f1ae 0502 	sub.w	r5, lr, #2
 80126b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80126bc:	1c44      	adds	r4, r0, #1
 80126be:	4629      	mov	r1, r5
 80126c0:	4561      	cmp	r1, ip
 80126c2:	d30a      	bcc.n	80126da <__exponent+0x66>
 80126c4:	f10d 0209 	add.w	r2, sp, #9
 80126c8:	eba2 020e 	sub.w	r2, r2, lr
 80126cc:	4565      	cmp	r5, ip
 80126ce:	bf88      	it	hi
 80126d0:	2200      	movhi	r2, #0
 80126d2:	4413      	add	r3, r2
 80126d4:	1a18      	subs	r0, r3, r0
 80126d6:	b003      	add	sp, #12
 80126d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80126e2:	e7ed      	b.n	80126c0 <__exponent+0x4c>
 80126e4:	2330      	movs	r3, #48	; 0x30
 80126e6:	3130      	adds	r1, #48	; 0x30
 80126e8:	7083      	strb	r3, [r0, #2]
 80126ea:	70c1      	strb	r1, [r0, #3]
 80126ec:	1d03      	adds	r3, r0, #4
 80126ee:	e7f1      	b.n	80126d4 <__exponent+0x60>

080126f0 <_printf_float>:
 80126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f4:	ed2d 8b02 	vpush	{d8}
 80126f8:	b08d      	sub	sp, #52	; 0x34
 80126fa:	460c      	mov	r4, r1
 80126fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012700:	4616      	mov	r6, r2
 8012702:	461f      	mov	r7, r3
 8012704:	4605      	mov	r5, r0
 8012706:	f002 ff2b 	bl	8015560 <_localeconv_r>
 801270a:	f8d0 a000 	ldr.w	sl, [r0]
 801270e:	4650      	mov	r0, sl
 8012710:	f7ed fd70 	bl	80001f4 <strlen>
 8012714:	2300      	movs	r3, #0
 8012716:	930a      	str	r3, [sp, #40]	; 0x28
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	9305      	str	r3, [sp, #20]
 801271c:	f8d8 3000 	ldr.w	r3, [r8]
 8012720:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012724:	3307      	adds	r3, #7
 8012726:	f023 0307 	bic.w	r3, r3, #7
 801272a:	f103 0208 	add.w	r2, r3, #8
 801272e:	f8c8 2000 	str.w	r2, [r8]
 8012732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012736:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801273a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801273e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012742:	9307      	str	r3, [sp, #28]
 8012744:	f8cd 8018 	str.w	r8, [sp, #24]
 8012748:	ee08 0a10 	vmov	s16, r0
 801274c:	4b9f      	ldr	r3, [pc, #636]	; (80129cc <_printf_float+0x2dc>)
 801274e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012752:	f04f 32ff 	mov.w	r2, #4294967295
 8012756:	f7ee fa01 	bl	8000b5c <__aeabi_dcmpun>
 801275a:	bb88      	cbnz	r0, 80127c0 <_printf_float+0xd0>
 801275c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012760:	4b9a      	ldr	r3, [pc, #616]	; (80129cc <_printf_float+0x2dc>)
 8012762:	f04f 32ff 	mov.w	r2, #4294967295
 8012766:	f7ee f9db 	bl	8000b20 <__aeabi_dcmple>
 801276a:	bb48      	cbnz	r0, 80127c0 <_printf_float+0xd0>
 801276c:	2200      	movs	r2, #0
 801276e:	2300      	movs	r3, #0
 8012770:	4640      	mov	r0, r8
 8012772:	4649      	mov	r1, r9
 8012774:	f7ee f9ca 	bl	8000b0c <__aeabi_dcmplt>
 8012778:	b110      	cbz	r0, 8012780 <_printf_float+0x90>
 801277a:	232d      	movs	r3, #45	; 0x2d
 801277c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012780:	4b93      	ldr	r3, [pc, #588]	; (80129d0 <_printf_float+0x2e0>)
 8012782:	4894      	ldr	r0, [pc, #592]	; (80129d4 <_printf_float+0x2e4>)
 8012784:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012788:	bf94      	ite	ls
 801278a:	4698      	movls	r8, r3
 801278c:	4680      	movhi	r8, r0
 801278e:	2303      	movs	r3, #3
 8012790:	6123      	str	r3, [r4, #16]
 8012792:	9b05      	ldr	r3, [sp, #20]
 8012794:	f023 0204 	bic.w	r2, r3, #4
 8012798:	6022      	str	r2, [r4, #0]
 801279a:	f04f 0900 	mov.w	r9, #0
 801279e:	9700      	str	r7, [sp, #0]
 80127a0:	4633      	mov	r3, r6
 80127a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80127a4:	4621      	mov	r1, r4
 80127a6:	4628      	mov	r0, r5
 80127a8:	f000 f9d8 	bl	8012b5c <_printf_common>
 80127ac:	3001      	adds	r0, #1
 80127ae:	f040 8090 	bne.w	80128d2 <_printf_float+0x1e2>
 80127b2:	f04f 30ff 	mov.w	r0, #4294967295
 80127b6:	b00d      	add	sp, #52	; 0x34
 80127b8:	ecbd 8b02 	vpop	{d8}
 80127bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c0:	4642      	mov	r2, r8
 80127c2:	464b      	mov	r3, r9
 80127c4:	4640      	mov	r0, r8
 80127c6:	4649      	mov	r1, r9
 80127c8:	f7ee f9c8 	bl	8000b5c <__aeabi_dcmpun>
 80127cc:	b140      	cbz	r0, 80127e0 <_printf_float+0xf0>
 80127ce:	464b      	mov	r3, r9
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	bfbc      	itt	lt
 80127d4:	232d      	movlt	r3, #45	; 0x2d
 80127d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80127da:	487f      	ldr	r0, [pc, #508]	; (80129d8 <_printf_float+0x2e8>)
 80127dc:	4b7f      	ldr	r3, [pc, #508]	; (80129dc <_printf_float+0x2ec>)
 80127de:	e7d1      	b.n	8012784 <_printf_float+0x94>
 80127e0:	6863      	ldr	r3, [r4, #4]
 80127e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80127e6:	9206      	str	r2, [sp, #24]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	d13f      	bne.n	801286c <_printf_float+0x17c>
 80127ec:	2306      	movs	r3, #6
 80127ee:	6063      	str	r3, [r4, #4]
 80127f0:	9b05      	ldr	r3, [sp, #20]
 80127f2:	6861      	ldr	r1, [r4, #4]
 80127f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80127f8:	2300      	movs	r3, #0
 80127fa:	9303      	str	r3, [sp, #12]
 80127fc:	ab0a      	add	r3, sp, #40	; 0x28
 80127fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012802:	ab09      	add	r3, sp, #36	; 0x24
 8012804:	ec49 8b10 	vmov	d0, r8, r9
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	6022      	str	r2, [r4, #0]
 801280c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012810:	4628      	mov	r0, r5
 8012812:	f7ff fecd 	bl	80125b0 <__cvt>
 8012816:	9b06      	ldr	r3, [sp, #24]
 8012818:	9909      	ldr	r1, [sp, #36]	; 0x24
 801281a:	2b47      	cmp	r3, #71	; 0x47
 801281c:	4680      	mov	r8, r0
 801281e:	d108      	bne.n	8012832 <_printf_float+0x142>
 8012820:	1cc8      	adds	r0, r1, #3
 8012822:	db02      	blt.n	801282a <_printf_float+0x13a>
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	4299      	cmp	r1, r3
 8012828:	dd41      	ble.n	80128ae <_printf_float+0x1be>
 801282a:	f1ab 0b02 	sub.w	fp, fp, #2
 801282e:	fa5f fb8b 	uxtb.w	fp, fp
 8012832:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012836:	d820      	bhi.n	801287a <_printf_float+0x18a>
 8012838:	3901      	subs	r1, #1
 801283a:	465a      	mov	r2, fp
 801283c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012840:	9109      	str	r1, [sp, #36]	; 0x24
 8012842:	f7ff ff17 	bl	8012674 <__exponent>
 8012846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012848:	1813      	adds	r3, r2, r0
 801284a:	2a01      	cmp	r2, #1
 801284c:	4681      	mov	r9, r0
 801284e:	6123      	str	r3, [r4, #16]
 8012850:	dc02      	bgt.n	8012858 <_printf_float+0x168>
 8012852:	6822      	ldr	r2, [r4, #0]
 8012854:	07d2      	lsls	r2, r2, #31
 8012856:	d501      	bpl.n	801285c <_printf_float+0x16c>
 8012858:	3301      	adds	r3, #1
 801285a:	6123      	str	r3, [r4, #16]
 801285c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012860:	2b00      	cmp	r3, #0
 8012862:	d09c      	beq.n	801279e <_printf_float+0xae>
 8012864:	232d      	movs	r3, #45	; 0x2d
 8012866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801286a:	e798      	b.n	801279e <_printf_float+0xae>
 801286c:	9a06      	ldr	r2, [sp, #24]
 801286e:	2a47      	cmp	r2, #71	; 0x47
 8012870:	d1be      	bne.n	80127f0 <_printf_float+0x100>
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1bc      	bne.n	80127f0 <_printf_float+0x100>
 8012876:	2301      	movs	r3, #1
 8012878:	e7b9      	b.n	80127ee <_printf_float+0xfe>
 801287a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801287e:	d118      	bne.n	80128b2 <_printf_float+0x1c2>
 8012880:	2900      	cmp	r1, #0
 8012882:	6863      	ldr	r3, [r4, #4]
 8012884:	dd0b      	ble.n	801289e <_printf_float+0x1ae>
 8012886:	6121      	str	r1, [r4, #16]
 8012888:	b913      	cbnz	r3, 8012890 <_printf_float+0x1a0>
 801288a:	6822      	ldr	r2, [r4, #0]
 801288c:	07d0      	lsls	r0, r2, #31
 801288e:	d502      	bpl.n	8012896 <_printf_float+0x1a6>
 8012890:	3301      	adds	r3, #1
 8012892:	440b      	add	r3, r1
 8012894:	6123      	str	r3, [r4, #16]
 8012896:	65a1      	str	r1, [r4, #88]	; 0x58
 8012898:	f04f 0900 	mov.w	r9, #0
 801289c:	e7de      	b.n	801285c <_printf_float+0x16c>
 801289e:	b913      	cbnz	r3, 80128a6 <_printf_float+0x1b6>
 80128a0:	6822      	ldr	r2, [r4, #0]
 80128a2:	07d2      	lsls	r2, r2, #31
 80128a4:	d501      	bpl.n	80128aa <_printf_float+0x1ba>
 80128a6:	3302      	adds	r3, #2
 80128a8:	e7f4      	b.n	8012894 <_printf_float+0x1a4>
 80128aa:	2301      	movs	r3, #1
 80128ac:	e7f2      	b.n	8012894 <_printf_float+0x1a4>
 80128ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80128b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b4:	4299      	cmp	r1, r3
 80128b6:	db05      	blt.n	80128c4 <_printf_float+0x1d4>
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	6121      	str	r1, [r4, #16]
 80128bc:	07d8      	lsls	r0, r3, #31
 80128be:	d5ea      	bpl.n	8012896 <_printf_float+0x1a6>
 80128c0:	1c4b      	adds	r3, r1, #1
 80128c2:	e7e7      	b.n	8012894 <_printf_float+0x1a4>
 80128c4:	2900      	cmp	r1, #0
 80128c6:	bfd4      	ite	le
 80128c8:	f1c1 0202 	rsble	r2, r1, #2
 80128cc:	2201      	movgt	r2, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	e7e0      	b.n	8012894 <_printf_float+0x1a4>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	055a      	lsls	r2, r3, #21
 80128d6:	d407      	bmi.n	80128e8 <_printf_float+0x1f8>
 80128d8:	6923      	ldr	r3, [r4, #16]
 80128da:	4642      	mov	r2, r8
 80128dc:	4631      	mov	r1, r6
 80128de:	4628      	mov	r0, r5
 80128e0:	47b8      	blx	r7
 80128e2:	3001      	adds	r0, #1
 80128e4:	d12c      	bne.n	8012940 <_printf_float+0x250>
 80128e6:	e764      	b.n	80127b2 <_printf_float+0xc2>
 80128e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80128ec:	f240 80e0 	bls.w	8012ab0 <_printf_float+0x3c0>
 80128f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128f4:	2200      	movs	r2, #0
 80128f6:	2300      	movs	r3, #0
 80128f8:	f7ee f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d034      	beq.n	801296a <_printf_float+0x27a>
 8012900:	4a37      	ldr	r2, [pc, #220]	; (80129e0 <_printf_float+0x2f0>)
 8012902:	2301      	movs	r3, #1
 8012904:	4631      	mov	r1, r6
 8012906:	4628      	mov	r0, r5
 8012908:	47b8      	blx	r7
 801290a:	3001      	adds	r0, #1
 801290c:	f43f af51 	beq.w	80127b2 <_printf_float+0xc2>
 8012910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012914:	429a      	cmp	r2, r3
 8012916:	db02      	blt.n	801291e <_printf_float+0x22e>
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	07d8      	lsls	r0, r3, #31
 801291c:	d510      	bpl.n	8012940 <_printf_float+0x250>
 801291e:	ee18 3a10 	vmov	r3, s16
 8012922:	4652      	mov	r2, sl
 8012924:	4631      	mov	r1, r6
 8012926:	4628      	mov	r0, r5
 8012928:	47b8      	blx	r7
 801292a:	3001      	adds	r0, #1
 801292c:	f43f af41 	beq.w	80127b2 <_printf_float+0xc2>
 8012930:	f04f 0800 	mov.w	r8, #0
 8012934:	f104 091a 	add.w	r9, r4, #26
 8012938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801293a:	3b01      	subs	r3, #1
 801293c:	4543      	cmp	r3, r8
 801293e:	dc09      	bgt.n	8012954 <_printf_float+0x264>
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	079b      	lsls	r3, r3, #30
 8012944:	f100 8105 	bmi.w	8012b52 <_printf_float+0x462>
 8012948:	68e0      	ldr	r0, [r4, #12]
 801294a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801294c:	4298      	cmp	r0, r3
 801294e:	bfb8      	it	lt
 8012950:	4618      	movlt	r0, r3
 8012952:	e730      	b.n	80127b6 <_printf_float+0xc6>
 8012954:	2301      	movs	r3, #1
 8012956:	464a      	mov	r2, r9
 8012958:	4631      	mov	r1, r6
 801295a:	4628      	mov	r0, r5
 801295c:	47b8      	blx	r7
 801295e:	3001      	adds	r0, #1
 8012960:	f43f af27 	beq.w	80127b2 <_printf_float+0xc2>
 8012964:	f108 0801 	add.w	r8, r8, #1
 8012968:	e7e6      	b.n	8012938 <_printf_float+0x248>
 801296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801296c:	2b00      	cmp	r3, #0
 801296e:	dc39      	bgt.n	80129e4 <_printf_float+0x2f4>
 8012970:	4a1b      	ldr	r2, [pc, #108]	; (80129e0 <_printf_float+0x2f0>)
 8012972:	2301      	movs	r3, #1
 8012974:	4631      	mov	r1, r6
 8012976:	4628      	mov	r0, r5
 8012978:	47b8      	blx	r7
 801297a:	3001      	adds	r0, #1
 801297c:	f43f af19 	beq.w	80127b2 <_printf_float+0xc2>
 8012980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012984:	4313      	orrs	r3, r2
 8012986:	d102      	bne.n	801298e <_printf_float+0x29e>
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	07d9      	lsls	r1, r3, #31
 801298c:	d5d8      	bpl.n	8012940 <_printf_float+0x250>
 801298e:	ee18 3a10 	vmov	r3, s16
 8012992:	4652      	mov	r2, sl
 8012994:	4631      	mov	r1, r6
 8012996:	4628      	mov	r0, r5
 8012998:	47b8      	blx	r7
 801299a:	3001      	adds	r0, #1
 801299c:	f43f af09 	beq.w	80127b2 <_printf_float+0xc2>
 80129a0:	f04f 0900 	mov.w	r9, #0
 80129a4:	f104 0a1a 	add.w	sl, r4, #26
 80129a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129aa:	425b      	negs	r3, r3
 80129ac:	454b      	cmp	r3, r9
 80129ae:	dc01      	bgt.n	80129b4 <_printf_float+0x2c4>
 80129b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129b2:	e792      	b.n	80128da <_printf_float+0x1ea>
 80129b4:	2301      	movs	r3, #1
 80129b6:	4652      	mov	r2, sl
 80129b8:	4631      	mov	r1, r6
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b8      	blx	r7
 80129be:	3001      	adds	r0, #1
 80129c0:	f43f aef7 	beq.w	80127b2 <_printf_float+0xc2>
 80129c4:	f109 0901 	add.w	r9, r9, #1
 80129c8:	e7ee      	b.n	80129a8 <_printf_float+0x2b8>
 80129ca:	bf00      	nop
 80129cc:	7fefffff 	.word	0x7fefffff
 80129d0:	0802abc4 	.word	0x0802abc4
 80129d4:	0802abc8 	.word	0x0802abc8
 80129d8:	0802abd0 	.word	0x0802abd0
 80129dc:	0802abcc 	.word	0x0802abcc
 80129e0:	0802abd4 	.word	0x0802abd4
 80129e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129e8:	429a      	cmp	r2, r3
 80129ea:	bfa8      	it	ge
 80129ec:	461a      	movge	r2, r3
 80129ee:	2a00      	cmp	r2, #0
 80129f0:	4691      	mov	r9, r2
 80129f2:	dc37      	bgt.n	8012a64 <_printf_float+0x374>
 80129f4:	f04f 0b00 	mov.w	fp, #0
 80129f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129fc:	f104 021a 	add.w	r2, r4, #26
 8012a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a02:	9305      	str	r3, [sp, #20]
 8012a04:	eba3 0309 	sub.w	r3, r3, r9
 8012a08:	455b      	cmp	r3, fp
 8012a0a:	dc33      	bgt.n	8012a74 <_printf_float+0x384>
 8012a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a10:	429a      	cmp	r2, r3
 8012a12:	db3b      	blt.n	8012a8c <_printf_float+0x39c>
 8012a14:	6823      	ldr	r3, [r4, #0]
 8012a16:	07da      	lsls	r2, r3, #31
 8012a18:	d438      	bmi.n	8012a8c <_printf_float+0x39c>
 8012a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a1c:	9a05      	ldr	r2, [sp, #20]
 8012a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a20:	1a9a      	subs	r2, r3, r2
 8012a22:	eba3 0901 	sub.w	r9, r3, r1
 8012a26:	4591      	cmp	r9, r2
 8012a28:	bfa8      	it	ge
 8012a2a:	4691      	movge	r9, r2
 8012a2c:	f1b9 0f00 	cmp.w	r9, #0
 8012a30:	dc35      	bgt.n	8012a9e <_printf_float+0x3ae>
 8012a32:	f04f 0800 	mov.w	r8, #0
 8012a36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a3a:	f104 0a1a 	add.w	sl, r4, #26
 8012a3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a42:	1a9b      	subs	r3, r3, r2
 8012a44:	eba3 0309 	sub.w	r3, r3, r9
 8012a48:	4543      	cmp	r3, r8
 8012a4a:	f77f af79 	ble.w	8012940 <_printf_float+0x250>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	4652      	mov	r2, sl
 8012a52:	4631      	mov	r1, r6
 8012a54:	4628      	mov	r0, r5
 8012a56:	47b8      	blx	r7
 8012a58:	3001      	adds	r0, #1
 8012a5a:	f43f aeaa 	beq.w	80127b2 <_printf_float+0xc2>
 8012a5e:	f108 0801 	add.w	r8, r8, #1
 8012a62:	e7ec      	b.n	8012a3e <_printf_float+0x34e>
 8012a64:	4613      	mov	r3, r2
 8012a66:	4631      	mov	r1, r6
 8012a68:	4642      	mov	r2, r8
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	47b8      	blx	r7
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d1c0      	bne.n	80129f4 <_printf_float+0x304>
 8012a72:	e69e      	b.n	80127b2 <_printf_float+0xc2>
 8012a74:	2301      	movs	r3, #1
 8012a76:	4631      	mov	r1, r6
 8012a78:	4628      	mov	r0, r5
 8012a7a:	9205      	str	r2, [sp, #20]
 8012a7c:	47b8      	blx	r7
 8012a7e:	3001      	adds	r0, #1
 8012a80:	f43f ae97 	beq.w	80127b2 <_printf_float+0xc2>
 8012a84:	9a05      	ldr	r2, [sp, #20]
 8012a86:	f10b 0b01 	add.w	fp, fp, #1
 8012a8a:	e7b9      	b.n	8012a00 <_printf_float+0x310>
 8012a8c:	ee18 3a10 	vmov	r3, s16
 8012a90:	4652      	mov	r2, sl
 8012a92:	4631      	mov	r1, r6
 8012a94:	4628      	mov	r0, r5
 8012a96:	47b8      	blx	r7
 8012a98:	3001      	adds	r0, #1
 8012a9a:	d1be      	bne.n	8012a1a <_printf_float+0x32a>
 8012a9c:	e689      	b.n	80127b2 <_printf_float+0xc2>
 8012a9e:	9a05      	ldr	r2, [sp, #20]
 8012aa0:	464b      	mov	r3, r9
 8012aa2:	4442      	add	r2, r8
 8012aa4:	4631      	mov	r1, r6
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	47b8      	blx	r7
 8012aaa:	3001      	adds	r0, #1
 8012aac:	d1c1      	bne.n	8012a32 <_printf_float+0x342>
 8012aae:	e680      	b.n	80127b2 <_printf_float+0xc2>
 8012ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ab2:	2a01      	cmp	r2, #1
 8012ab4:	dc01      	bgt.n	8012aba <_printf_float+0x3ca>
 8012ab6:	07db      	lsls	r3, r3, #31
 8012ab8:	d538      	bpl.n	8012b2c <_printf_float+0x43c>
 8012aba:	2301      	movs	r3, #1
 8012abc:	4642      	mov	r2, r8
 8012abe:	4631      	mov	r1, r6
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	47b8      	blx	r7
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	f43f ae74 	beq.w	80127b2 <_printf_float+0xc2>
 8012aca:	ee18 3a10 	vmov	r3, s16
 8012ace:	4652      	mov	r2, sl
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	47b8      	blx	r7
 8012ad6:	3001      	adds	r0, #1
 8012ad8:	f43f ae6b 	beq.w	80127b2 <_printf_float+0xc2>
 8012adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	f7ee f808 	bl	8000af8 <__aeabi_dcmpeq>
 8012ae8:	b9d8      	cbnz	r0, 8012b22 <_printf_float+0x432>
 8012aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aec:	f108 0201 	add.w	r2, r8, #1
 8012af0:	3b01      	subs	r3, #1
 8012af2:	4631      	mov	r1, r6
 8012af4:	4628      	mov	r0, r5
 8012af6:	47b8      	blx	r7
 8012af8:	3001      	adds	r0, #1
 8012afa:	d10e      	bne.n	8012b1a <_printf_float+0x42a>
 8012afc:	e659      	b.n	80127b2 <_printf_float+0xc2>
 8012afe:	2301      	movs	r3, #1
 8012b00:	4652      	mov	r2, sl
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b8      	blx	r7
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f43f ae52 	beq.w	80127b2 <_printf_float+0xc2>
 8012b0e:	f108 0801 	add.w	r8, r8, #1
 8012b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b14:	3b01      	subs	r3, #1
 8012b16:	4543      	cmp	r3, r8
 8012b18:	dcf1      	bgt.n	8012afe <_printf_float+0x40e>
 8012b1a:	464b      	mov	r3, r9
 8012b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b20:	e6dc      	b.n	80128dc <_printf_float+0x1ec>
 8012b22:	f04f 0800 	mov.w	r8, #0
 8012b26:	f104 0a1a 	add.w	sl, r4, #26
 8012b2a:	e7f2      	b.n	8012b12 <_printf_float+0x422>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	4642      	mov	r2, r8
 8012b30:	e7df      	b.n	8012af2 <_printf_float+0x402>
 8012b32:	2301      	movs	r3, #1
 8012b34:	464a      	mov	r2, r9
 8012b36:	4631      	mov	r1, r6
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b8      	blx	r7
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	f43f ae38 	beq.w	80127b2 <_printf_float+0xc2>
 8012b42:	f108 0801 	add.w	r8, r8, #1
 8012b46:	68e3      	ldr	r3, [r4, #12]
 8012b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b4a:	1a5b      	subs	r3, r3, r1
 8012b4c:	4543      	cmp	r3, r8
 8012b4e:	dcf0      	bgt.n	8012b32 <_printf_float+0x442>
 8012b50:	e6fa      	b.n	8012948 <_printf_float+0x258>
 8012b52:	f04f 0800 	mov.w	r8, #0
 8012b56:	f104 0919 	add.w	r9, r4, #25
 8012b5a:	e7f4      	b.n	8012b46 <_printf_float+0x456>

08012b5c <_printf_common>:
 8012b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b60:	4616      	mov	r6, r2
 8012b62:	4699      	mov	r9, r3
 8012b64:	688a      	ldr	r2, [r1, #8]
 8012b66:	690b      	ldr	r3, [r1, #16]
 8012b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	bfb8      	it	lt
 8012b70:	4613      	movlt	r3, r2
 8012b72:	6033      	str	r3, [r6, #0]
 8012b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b78:	4607      	mov	r7, r0
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	b10a      	cbz	r2, 8012b82 <_printf_common+0x26>
 8012b7e:	3301      	adds	r3, #1
 8012b80:	6033      	str	r3, [r6, #0]
 8012b82:	6823      	ldr	r3, [r4, #0]
 8012b84:	0699      	lsls	r1, r3, #26
 8012b86:	bf42      	ittt	mi
 8012b88:	6833      	ldrmi	r3, [r6, #0]
 8012b8a:	3302      	addmi	r3, #2
 8012b8c:	6033      	strmi	r3, [r6, #0]
 8012b8e:	6825      	ldr	r5, [r4, #0]
 8012b90:	f015 0506 	ands.w	r5, r5, #6
 8012b94:	d106      	bne.n	8012ba4 <_printf_common+0x48>
 8012b96:	f104 0a19 	add.w	sl, r4, #25
 8012b9a:	68e3      	ldr	r3, [r4, #12]
 8012b9c:	6832      	ldr	r2, [r6, #0]
 8012b9e:	1a9b      	subs	r3, r3, r2
 8012ba0:	42ab      	cmp	r3, r5
 8012ba2:	dc26      	bgt.n	8012bf2 <_printf_common+0x96>
 8012ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ba8:	1e13      	subs	r3, r2, #0
 8012baa:	6822      	ldr	r2, [r4, #0]
 8012bac:	bf18      	it	ne
 8012bae:	2301      	movne	r3, #1
 8012bb0:	0692      	lsls	r2, r2, #26
 8012bb2:	d42b      	bmi.n	8012c0c <_printf_common+0xb0>
 8012bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bb8:	4649      	mov	r1, r9
 8012bba:	4638      	mov	r0, r7
 8012bbc:	47c0      	blx	r8
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	d01e      	beq.n	8012c00 <_printf_common+0xa4>
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	68e5      	ldr	r5, [r4, #12]
 8012bc6:	6832      	ldr	r2, [r6, #0]
 8012bc8:	f003 0306 	and.w	r3, r3, #6
 8012bcc:	2b04      	cmp	r3, #4
 8012bce:	bf08      	it	eq
 8012bd0:	1aad      	subeq	r5, r5, r2
 8012bd2:	68a3      	ldr	r3, [r4, #8]
 8012bd4:	6922      	ldr	r2, [r4, #16]
 8012bd6:	bf0c      	ite	eq
 8012bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bdc:	2500      	movne	r5, #0
 8012bde:	4293      	cmp	r3, r2
 8012be0:	bfc4      	itt	gt
 8012be2:	1a9b      	subgt	r3, r3, r2
 8012be4:	18ed      	addgt	r5, r5, r3
 8012be6:	2600      	movs	r6, #0
 8012be8:	341a      	adds	r4, #26
 8012bea:	42b5      	cmp	r5, r6
 8012bec:	d11a      	bne.n	8012c24 <_printf_common+0xc8>
 8012bee:	2000      	movs	r0, #0
 8012bf0:	e008      	b.n	8012c04 <_printf_common+0xa8>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	4652      	mov	r2, sl
 8012bf6:	4649      	mov	r1, r9
 8012bf8:	4638      	mov	r0, r7
 8012bfa:	47c0      	blx	r8
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	d103      	bne.n	8012c08 <_printf_common+0xac>
 8012c00:	f04f 30ff 	mov.w	r0, #4294967295
 8012c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c08:	3501      	adds	r5, #1
 8012c0a:	e7c6      	b.n	8012b9a <_printf_common+0x3e>
 8012c0c:	18e1      	adds	r1, r4, r3
 8012c0e:	1c5a      	adds	r2, r3, #1
 8012c10:	2030      	movs	r0, #48	; 0x30
 8012c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c16:	4422      	add	r2, r4
 8012c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c20:	3302      	adds	r3, #2
 8012c22:	e7c7      	b.n	8012bb4 <_printf_common+0x58>
 8012c24:	2301      	movs	r3, #1
 8012c26:	4622      	mov	r2, r4
 8012c28:	4649      	mov	r1, r9
 8012c2a:	4638      	mov	r0, r7
 8012c2c:	47c0      	blx	r8
 8012c2e:	3001      	adds	r0, #1
 8012c30:	d0e6      	beq.n	8012c00 <_printf_common+0xa4>
 8012c32:	3601      	adds	r6, #1
 8012c34:	e7d9      	b.n	8012bea <_printf_common+0x8e>
	...

08012c38 <_printf_i>:
 8012c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c3c:	7e0f      	ldrb	r7, [r1, #24]
 8012c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c40:	2f78      	cmp	r7, #120	; 0x78
 8012c42:	4691      	mov	r9, r2
 8012c44:	4680      	mov	r8, r0
 8012c46:	460c      	mov	r4, r1
 8012c48:	469a      	mov	sl, r3
 8012c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c4e:	d807      	bhi.n	8012c60 <_printf_i+0x28>
 8012c50:	2f62      	cmp	r7, #98	; 0x62
 8012c52:	d80a      	bhi.n	8012c6a <_printf_i+0x32>
 8012c54:	2f00      	cmp	r7, #0
 8012c56:	f000 80d8 	beq.w	8012e0a <_printf_i+0x1d2>
 8012c5a:	2f58      	cmp	r7, #88	; 0x58
 8012c5c:	f000 80a3 	beq.w	8012da6 <_printf_i+0x16e>
 8012c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c68:	e03a      	b.n	8012ce0 <_printf_i+0xa8>
 8012c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c6e:	2b15      	cmp	r3, #21
 8012c70:	d8f6      	bhi.n	8012c60 <_printf_i+0x28>
 8012c72:	a101      	add	r1, pc, #4	; (adr r1, 8012c78 <_printf_i+0x40>)
 8012c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c78:	08012cd1 	.word	0x08012cd1
 8012c7c:	08012ce5 	.word	0x08012ce5
 8012c80:	08012c61 	.word	0x08012c61
 8012c84:	08012c61 	.word	0x08012c61
 8012c88:	08012c61 	.word	0x08012c61
 8012c8c:	08012c61 	.word	0x08012c61
 8012c90:	08012ce5 	.word	0x08012ce5
 8012c94:	08012c61 	.word	0x08012c61
 8012c98:	08012c61 	.word	0x08012c61
 8012c9c:	08012c61 	.word	0x08012c61
 8012ca0:	08012c61 	.word	0x08012c61
 8012ca4:	08012df1 	.word	0x08012df1
 8012ca8:	08012d15 	.word	0x08012d15
 8012cac:	08012dd3 	.word	0x08012dd3
 8012cb0:	08012c61 	.word	0x08012c61
 8012cb4:	08012c61 	.word	0x08012c61
 8012cb8:	08012e13 	.word	0x08012e13
 8012cbc:	08012c61 	.word	0x08012c61
 8012cc0:	08012d15 	.word	0x08012d15
 8012cc4:	08012c61 	.word	0x08012c61
 8012cc8:	08012c61 	.word	0x08012c61
 8012ccc:	08012ddb 	.word	0x08012ddb
 8012cd0:	682b      	ldr	r3, [r5, #0]
 8012cd2:	1d1a      	adds	r2, r3, #4
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	602a      	str	r2, [r5, #0]
 8012cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e0a3      	b.n	8012e2c <_printf_i+0x1f4>
 8012ce4:	6820      	ldr	r0, [r4, #0]
 8012ce6:	6829      	ldr	r1, [r5, #0]
 8012ce8:	0606      	lsls	r6, r0, #24
 8012cea:	f101 0304 	add.w	r3, r1, #4
 8012cee:	d50a      	bpl.n	8012d06 <_printf_i+0xce>
 8012cf0:	680e      	ldr	r6, [r1, #0]
 8012cf2:	602b      	str	r3, [r5, #0]
 8012cf4:	2e00      	cmp	r6, #0
 8012cf6:	da03      	bge.n	8012d00 <_printf_i+0xc8>
 8012cf8:	232d      	movs	r3, #45	; 0x2d
 8012cfa:	4276      	negs	r6, r6
 8012cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d00:	485e      	ldr	r0, [pc, #376]	; (8012e7c <_printf_i+0x244>)
 8012d02:	230a      	movs	r3, #10
 8012d04:	e019      	b.n	8012d3a <_printf_i+0x102>
 8012d06:	680e      	ldr	r6, [r1, #0]
 8012d08:	602b      	str	r3, [r5, #0]
 8012d0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d0e:	bf18      	it	ne
 8012d10:	b236      	sxthne	r6, r6
 8012d12:	e7ef      	b.n	8012cf4 <_printf_i+0xbc>
 8012d14:	682b      	ldr	r3, [r5, #0]
 8012d16:	6820      	ldr	r0, [r4, #0]
 8012d18:	1d19      	adds	r1, r3, #4
 8012d1a:	6029      	str	r1, [r5, #0]
 8012d1c:	0601      	lsls	r1, r0, #24
 8012d1e:	d501      	bpl.n	8012d24 <_printf_i+0xec>
 8012d20:	681e      	ldr	r6, [r3, #0]
 8012d22:	e002      	b.n	8012d2a <_printf_i+0xf2>
 8012d24:	0646      	lsls	r6, r0, #25
 8012d26:	d5fb      	bpl.n	8012d20 <_printf_i+0xe8>
 8012d28:	881e      	ldrh	r6, [r3, #0]
 8012d2a:	4854      	ldr	r0, [pc, #336]	; (8012e7c <_printf_i+0x244>)
 8012d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8012d2e:	bf0c      	ite	eq
 8012d30:	2308      	moveq	r3, #8
 8012d32:	230a      	movne	r3, #10
 8012d34:	2100      	movs	r1, #0
 8012d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d3a:	6865      	ldr	r5, [r4, #4]
 8012d3c:	60a5      	str	r5, [r4, #8]
 8012d3e:	2d00      	cmp	r5, #0
 8012d40:	bfa2      	ittt	ge
 8012d42:	6821      	ldrge	r1, [r4, #0]
 8012d44:	f021 0104 	bicge.w	r1, r1, #4
 8012d48:	6021      	strge	r1, [r4, #0]
 8012d4a:	b90e      	cbnz	r6, 8012d50 <_printf_i+0x118>
 8012d4c:	2d00      	cmp	r5, #0
 8012d4e:	d04d      	beq.n	8012dec <_printf_i+0x1b4>
 8012d50:	4615      	mov	r5, r2
 8012d52:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d56:	fb03 6711 	mls	r7, r3, r1, r6
 8012d5a:	5dc7      	ldrb	r7, [r0, r7]
 8012d5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d60:	4637      	mov	r7, r6
 8012d62:	42bb      	cmp	r3, r7
 8012d64:	460e      	mov	r6, r1
 8012d66:	d9f4      	bls.n	8012d52 <_printf_i+0x11a>
 8012d68:	2b08      	cmp	r3, #8
 8012d6a:	d10b      	bne.n	8012d84 <_printf_i+0x14c>
 8012d6c:	6823      	ldr	r3, [r4, #0]
 8012d6e:	07de      	lsls	r6, r3, #31
 8012d70:	d508      	bpl.n	8012d84 <_printf_i+0x14c>
 8012d72:	6923      	ldr	r3, [r4, #16]
 8012d74:	6861      	ldr	r1, [r4, #4]
 8012d76:	4299      	cmp	r1, r3
 8012d78:	bfde      	ittt	le
 8012d7a:	2330      	movle	r3, #48	; 0x30
 8012d7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012d84:	1b52      	subs	r2, r2, r5
 8012d86:	6122      	str	r2, [r4, #16]
 8012d88:	f8cd a000 	str.w	sl, [sp]
 8012d8c:	464b      	mov	r3, r9
 8012d8e:	aa03      	add	r2, sp, #12
 8012d90:	4621      	mov	r1, r4
 8012d92:	4640      	mov	r0, r8
 8012d94:	f7ff fee2 	bl	8012b5c <_printf_common>
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d14c      	bne.n	8012e36 <_printf_i+0x1fe>
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012da0:	b004      	add	sp, #16
 8012da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da6:	4835      	ldr	r0, [pc, #212]	; (8012e7c <_printf_i+0x244>)
 8012da8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012dac:	6829      	ldr	r1, [r5, #0]
 8012dae:	6823      	ldr	r3, [r4, #0]
 8012db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8012db4:	6029      	str	r1, [r5, #0]
 8012db6:	061d      	lsls	r5, r3, #24
 8012db8:	d514      	bpl.n	8012de4 <_printf_i+0x1ac>
 8012dba:	07df      	lsls	r7, r3, #31
 8012dbc:	bf44      	itt	mi
 8012dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8012dc2:	6023      	strmi	r3, [r4, #0]
 8012dc4:	b91e      	cbnz	r6, 8012dce <_printf_i+0x196>
 8012dc6:	6823      	ldr	r3, [r4, #0]
 8012dc8:	f023 0320 	bic.w	r3, r3, #32
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	2310      	movs	r3, #16
 8012dd0:	e7b0      	b.n	8012d34 <_printf_i+0xfc>
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	f043 0320 	orr.w	r3, r3, #32
 8012dd8:	6023      	str	r3, [r4, #0]
 8012dda:	2378      	movs	r3, #120	; 0x78
 8012ddc:	4828      	ldr	r0, [pc, #160]	; (8012e80 <_printf_i+0x248>)
 8012dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012de2:	e7e3      	b.n	8012dac <_printf_i+0x174>
 8012de4:	0659      	lsls	r1, r3, #25
 8012de6:	bf48      	it	mi
 8012de8:	b2b6      	uxthmi	r6, r6
 8012dea:	e7e6      	b.n	8012dba <_printf_i+0x182>
 8012dec:	4615      	mov	r5, r2
 8012dee:	e7bb      	b.n	8012d68 <_printf_i+0x130>
 8012df0:	682b      	ldr	r3, [r5, #0]
 8012df2:	6826      	ldr	r6, [r4, #0]
 8012df4:	6961      	ldr	r1, [r4, #20]
 8012df6:	1d18      	adds	r0, r3, #4
 8012df8:	6028      	str	r0, [r5, #0]
 8012dfa:	0635      	lsls	r5, r6, #24
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	d501      	bpl.n	8012e04 <_printf_i+0x1cc>
 8012e00:	6019      	str	r1, [r3, #0]
 8012e02:	e002      	b.n	8012e0a <_printf_i+0x1d2>
 8012e04:	0670      	lsls	r0, r6, #25
 8012e06:	d5fb      	bpl.n	8012e00 <_printf_i+0x1c8>
 8012e08:	8019      	strh	r1, [r3, #0]
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	6123      	str	r3, [r4, #16]
 8012e0e:	4615      	mov	r5, r2
 8012e10:	e7ba      	b.n	8012d88 <_printf_i+0x150>
 8012e12:	682b      	ldr	r3, [r5, #0]
 8012e14:	1d1a      	adds	r2, r3, #4
 8012e16:	602a      	str	r2, [r5, #0]
 8012e18:	681d      	ldr	r5, [r3, #0]
 8012e1a:	6862      	ldr	r2, [r4, #4]
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	4628      	mov	r0, r5
 8012e20:	f7ed f9f6 	bl	8000210 <memchr>
 8012e24:	b108      	cbz	r0, 8012e2a <_printf_i+0x1f2>
 8012e26:	1b40      	subs	r0, r0, r5
 8012e28:	6060      	str	r0, [r4, #4]
 8012e2a:	6863      	ldr	r3, [r4, #4]
 8012e2c:	6123      	str	r3, [r4, #16]
 8012e2e:	2300      	movs	r3, #0
 8012e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e34:	e7a8      	b.n	8012d88 <_printf_i+0x150>
 8012e36:	6923      	ldr	r3, [r4, #16]
 8012e38:	462a      	mov	r2, r5
 8012e3a:	4649      	mov	r1, r9
 8012e3c:	4640      	mov	r0, r8
 8012e3e:	47d0      	blx	sl
 8012e40:	3001      	adds	r0, #1
 8012e42:	d0ab      	beq.n	8012d9c <_printf_i+0x164>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	079b      	lsls	r3, r3, #30
 8012e48:	d413      	bmi.n	8012e72 <_printf_i+0x23a>
 8012e4a:	68e0      	ldr	r0, [r4, #12]
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	4298      	cmp	r0, r3
 8012e50:	bfb8      	it	lt
 8012e52:	4618      	movlt	r0, r3
 8012e54:	e7a4      	b.n	8012da0 <_printf_i+0x168>
 8012e56:	2301      	movs	r3, #1
 8012e58:	4632      	mov	r2, r6
 8012e5a:	4649      	mov	r1, r9
 8012e5c:	4640      	mov	r0, r8
 8012e5e:	47d0      	blx	sl
 8012e60:	3001      	adds	r0, #1
 8012e62:	d09b      	beq.n	8012d9c <_printf_i+0x164>
 8012e64:	3501      	adds	r5, #1
 8012e66:	68e3      	ldr	r3, [r4, #12]
 8012e68:	9903      	ldr	r1, [sp, #12]
 8012e6a:	1a5b      	subs	r3, r3, r1
 8012e6c:	42ab      	cmp	r3, r5
 8012e6e:	dcf2      	bgt.n	8012e56 <_printf_i+0x21e>
 8012e70:	e7eb      	b.n	8012e4a <_printf_i+0x212>
 8012e72:	2500      	movs	r5, #0
 8012e74:	f104 0619 	add.w	r6, r4, #25
 8012e78:	e7f5      	b.n	8012e66 <_printf_i+0x22e>
 8012e7a:	bf00      	nop
 8012e7c:	0802abd6 	.word	0x0802abd6
 8012e80:	0802abe7 	.word	0x0802abe7

08012e84 <_scanf_float>:
 8012e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e88:	b087      	sub	sp, #28
 8012e8a:	4617      	mov	r7, r2
 8012e8c:	9303      	str	r3, [sp, #12]
 8012e8e:	688b      	ldr	r3, [r1, #8]
 8012e90:	1e5a      	subs	r2, r3, #1
 8012e92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e96:	bf83      	ittte	hi
 8012e98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012e9c:	195b      	addhi	r3, r3, r5
 8012e9e:	9302      	strhi	r3, [sp, #8]
 8012ea0:	2300      	movls	r3, #0
 8012ea2:	bf86      	itte	hi
 8012ea4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012ea8:	608b      	strhi	r3, [r1, #8]
 8012eaa:	9302      	strls	r3, [sp, #8]
 8012eac:	680b      	ldr	r3, [r1, #0]
 8012eae:	468b      	mov	fp, r1
 8012eb0:	2500      	movs	r5, #0
 8012eb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012eb6:	f84b 3b1c 	str.w	r3, [fp], #28
 8012eba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012ebe:	4680      	mov	r8, r0
 8012ec0:	460c      	mov	r4, r1
 8012ec2:	465e      	mov	r6, fp
 8012ec4:	46aa      	mov	sl, r5
 8012ec6:	46a9      	mov	r9, r5
 8012ec8:	9501      	str	r5, [sp, #4]
 8012eca:	68a2      	ldr	r2, [r4, #8]
 8012ecc:	b152      	cbz	r2, 8012ee4 <_scanf_float+0x60>
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b4e      	cmp	r3, #78	; 0x4e
 8012ed4:	d864      	bhi.n	8012fa0 <_scanf_float+0x11c>
 8012ed6:	2b40      	cmp	r3, #64	; 0x40
 8012ed8:	d83c      	bhi.n	8012f54 <_scanf_float+0xd0>
 8012eda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012ede:	b2c8      	uxtb	r0, r1
 8012ee0:	280e      	cmp	r0, #14
 8012ee2:	d93a      	bls.n	8012f5a <_scanf_float+0xd6>
 8012ee4:	f1b9 0f00 	cmp.w	r9, #0
 8012ee8:	d003      	beq.n	8012ef2 <_scanf_float+0x6e>
 8012eea:	6823      	ldr	r3, [r4, #0]
 8012eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ef0:	6023      	str	r3, [r4, #0]
 8012ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ef6:	f1ba 0f01 	cmp.w	sl, #1
 8012efa:	f200 8113 	bhi.w	8013124 <_scanf_float+0x2a0>
 8012efe:	455e      	cmp	r6, fp
 8012f00:	f200 8105 	bhi.w	801310e <_scanf_float+0x28a>
 8012f04:	2501      	movs	r5, #1
 8012f06:	4628      	mov	r0, r5
 8012f08:	b007      	add	sp, #28
 8012f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012f12:	2a0d      	cmp	r2, #13
 8012f14:	d8e6      	bhi.n	8012ee4 <_scanf_float+0x60>
 8012f16:	a101      	add	r1, pc, #4	; (adr r1, 8012f1c <_scanf_float+0x98>)
 8012f18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012f1c:	0801305b 	.word	0x0801305b
 8012f20:	08012ee5 	.word	0x08012ee5
 8012f24:	08012ee5 	.word	0x08012ee5
 8012f28:	08012ee5 	.word	0x08012ee5
 8012f2c:	080130bb 	.word	0x080130bb
 8012f30:	08013093 	.word	0x08013093
 8012f34:	08012ee5 	.word	0x08012ee5
 8012f38:	08012ee5 	.word	0x08012ee5
 8012f3c:	08013069 	.word	0x08013069
 8012f40:	08012ee5 	.word	0x08012ee5
 8012f44:	08012ee5 	.word	0x08012ee5
 8012f48:	08012ee5 	.word	0x08012ee5
 8012f4c:	08012ee5 	.word	0x08012ee5
 8012f50:	08013021 	.word	0x08013021
 8012f54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012f58:	e7db      	b.n	8012f12 <_scanf_float+0x8e>
 8012f5a:	290e      	cmp	r1, #14
 8012f5c:	d8c2      	bhi.n	8012ee4 <_scanf_float+0x60>
 8012f5e:	a001      	add	r0, pc, #4	; (adr r0, 8012f64 <_scanf_float+0xe0>)
 8012f60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012f64:	08013013 	.word	0x08013013
 8012f68:	08012ee5 	.word	0x08012ee5
 8012f6c:	08013013 	.word	0x08013013
 8012f70:	080130a7 	.word	0x080130a7
 8012f74:	08012ee5 	.word	0x08012ee5
 8012f78:	08012fc1 	.word	0x08012fc1
 8012f7c:	08012ffd 	.word	0x08012ffd
 8012f80:	08012ffd 	.word	0x08012ffd
 8012f84:	08012ffd 	.word	0x08012ffd
 8012f88:	08012ffd 	.word	0x08012ffd
 8012f8c:	08012ffd 	.word	0x08012ffd
 8012f90:	08012ffd 	.word	0x08012ffd
 8012f94:	08012ffd 	.word	0x08012ffd
 8012f98:	08012ffd 	.word	0x08012ffd
 8012f9c:	08012ffd 	.word	0x08012ffd
 8012fa0:	2b6e      	cmp	r3, #110	; 0x6e
 8012fa2:	d809      	bhi.n	8012fb8 <_scanf_float+0x134>
 8012fa4:	2b60      	cmp	r3, #96	; 0x60
 8012fa6:	d8b2      	bhi.n	8012f0e <_scanf_float+0x8a>
 8012fa8:	2b54      	cmp	r3, #84	; 0x54
 8012faa:	d077      	beq.n	801309c <_scanf_float+0x218>
 8012fac:	2b59      	cmp	r3, #89	; 0x59
 8012fae:	d199      	bne.n	8012ee4 <_scanf_float+0x60>
 8012fb0:	2d07      	cmp	r5, #7
 8012fb2:	d197      	bne.n	8012ee4 <_scanf_float+0x60>
 8012fb4:	2508      	movs	r5, #8
 8012fb6:	e029      	b.n	801300c <_scanf_float+0x188>
 8012fb8:	2b74      	cmp	r3, #116	; 0x74
 8012fba:	d06f      	beq.n	801309c <_scanf_float+0x218>
 8012fbc:	2b79      	cmp	r3, #121	; 0x79
 8012fbe:	e7f6      	b.n	8012fae <_scanf_float+0x12a>
 8012fc0:	6821      	ldr	r1, [r4, #0]
 8012fc2:	05c8      	lsls	r0, r1, #23
 8012fc4:	d51a      	bpl.n	8012ffc <_scanf_float+0x178>
 8012fc6:	9b02      	ldr	r3, [sp, #8]
 8012fc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012fcc:	6021      	str	r1, [r4, #0]
 8012fce:	f109 0901 	add.w	r9, r9, #1
 8012fd2:	b11b      	cbz	r3, 8012fdc <_scanf_float+0x158>
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	3201      	adds	r2, #1
 8012fd8:	9302      	str	r3, [sp, #8]
 8012fda:	60a2      	str	r2, [r4, #8]
 8012fdc:	68a3      	ldr	r3, [r4, #8]
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	60a3      	str	r3, [r4, #8]
 8012fe2:	6923      	ldr	r3, [r4, #16]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	6123      	str	r3, [r4, #16]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	3b01      	subs	r3, #1
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	607b      	str	r3, [r7, #4]
 8012ff0:	f340 8084 	ble.w	80130fc <_scanf_float+0x278>
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	603b      	str	r3, [r7, #0]
 8012ffa:	e766      	b.n	8012eca <_scanf_float+0x46>
 8012ffc:	eb1a 0f05 	cmn.w	sl, r5
 8013000:	f47f af70 	bne.w	8012ee4 <_scanf_float+0x60>
 8013004:	6822      	ldr	r2, [r4, #0]
 8013006:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801300a:	6022      	str	r2, [r4, #0]
 801300c:	f806 3b01 	strb.w	r3, [r6], #1
 8013010:	e7e4      	b.n	8012fdc <_scanf_float+0x158>
 8013012:	6822      	ldr	r2, [r4, #0]
 8013014:	0610      	lsls	r0, r2, #24
 8013016:	f57f af65 	bpl.w	8012ee4 <_scanf_float+0x60>
 801301a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801301e:	e7f4      	b.n	801300a <_scanf_float+0x186>
 8013020:	f1ba 0f00 	cmp.w	sl, #0
 8013024:	d10e      	bne.n	8013044 <_scanf_float+0x1c0>
 8013026:	f1b9 0f00 	cmp.w	r9, #0
 801302a:	d10e      	bne.n	801304a <_scanf_float+0x1c6>
 801302c:	6822      	ldr	r2, [r4, #0]
 801302e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013032:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013036:	d108      	bne.n	801304a <_scanf_float+0x1c6>
 8013038:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801303c:	6022      	str	r2, [r4, #0]
 801303e:	f04f 0a01 	mov.w	sl, #1
 8013042:	e7e3      	b.n	801300c <_scanf_float+0x188>
 8013044:	f1ba 0f02 	cmp.w	sl, #2
 8013048:	d055      	beq.n	80130f6 <_scanf_float+0x272>
 801304a:	2d01      	cmp	r5, #1
 801304c:	d002      	beq.n	8013054 <_scanf_float+0x1d0>
 801304e:	2d04      	cmp	r5, #4
 8013050:	f47f af48 	bne.w	8012ee4 <_scanf_float+0x60>
 8013054:	3501      	adds	r5, #1
 8013056:	b2ed      	uxtb	r5, r5
 8013058:	e7d8      	b.n	801300c <_scanf_float+0x188>
 801305a:	f1ba 0f01 	cmp.w	sl, #1
 801305e:	f47f af41 	bne.w	8012ee4 <_scanf_float+0x60>
 8013062:	f04f 0a02 	mov.w	sl, #2
 8013066:	e7d1      	b.n	801300c <_scanf_float+0x188>
 8013068:	b97d      	cbnz	r5, 801308a <_scanf_float+0x206>
 801306a:	f1b9 0f00 	cmp.w	r9, #0
 801306e:	f47f af3c 	bne.w	8012eea <_scanf_float+0x66>
 8013072:	6822      	ldr	r2, [r4, #0]
 8013074:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013078:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801307c:	f47f af39 	bne.w	8012ef2 <_scanf_float+0x6e>
 8013080:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013084:	6022      	str	r2, [r4, #0]
 8013086:	2501      	movs	r5, #1
 8013088:	e7c0      	b.n	801300c <_scanf_float+0x188>
 801308a:	2d03      	cmp	r5, #3
 801308c:	d0e2      	beq.n	8013054 <_scanf_float+0x1d0>
 801308e:	2d05      	cmp	r5, #5
 8013090:	e7de      	b.n	8013050 <_scanf_float+0x1cc>
 8013092:	2d02      	cmp	r5, #2
 8013094:	f47f af26 	bne.w	8012ee4 <_scanf_float+0x60>
 8013098:	2503      	movs	r5, #3
 801309a:	e7b7      	b.n	801300c <_scanf_float+0x188>
 801309c:	2d06      	cmp	r5, #6
 801309e:	f47f af21 	bne.w	8012ee4 <_scanf_float+0x60>
 80130a2:	2507      	movs	r5, #7
 80130a4:	e7b2      	b.n	801300c <_scanf_float+0x188>
 80130a6:	6822      	ldr	r2, [r4, #0]
 80130a8:	0591      	lsls	r1, r2, #22
 80130aa:	f57f af1b 	bpl.w	8012ee4 <_scanf_float+0x60>
 80130ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80130b2:	6022      	str	r2, [r4, #0]
 80130b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80130b8:	e7a8      	b.n	801300c <_scanf_float+0x188>
 80130ba:	6822      	ldr	r2, [r4, #0]
 80130bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80130c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80130c4:	d006      	beq.n	80130d4 <_scanf_float+0x250>
 80130c6:	0550      	lsls	r0, r2, #21
 80130c8:	f57f af0c 	bpl.w	8012ee4 <_scanf_float+0x60>
 80130cc:	f1b9 0f00 	cmp.w	r9, #0
 80130d0:	f43f af0f 	beq.w	8012ef2 <_scanf_float+0x6e>
 80130d4:	0591      	lsls	r1, r2, #22
 80130d6:	bf58      	it	pl
 80130d8:	9901      	ldrpl	r1, [sp, #4]
 80130da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80130de:	bf58      	it	pl
 80130e0:	eba9 0101 	subpl.w	r1, r9, r1
 80130e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80130e8:	bf58      	it	pl
 80130ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80130ee:	6022      	str	r2, [r4, #0]
 80130f0:	f04f 0900 	mov.w	r9, #0
 80130f4:	e78a      	b.n	801300c <_scanf_float+0x188>
 80130f6:	f04f 0a03 	mov.w	sl, #3
 80130fa:	e787      	b.n	801300c <_scanf_float+0x188>
 80130fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013100:	4639      	mov	r1, r7
 8013102:	4640      	mov	r0, r8
 8013104:	4798      	blx	r3
 8013106:	2800      	cmp	r0, #0
 8013108:	f43f aedf 	beq.w	8012eca <_scanf_float+0x46>
 801310c:	e6ea      	b.n	8012ee4 <_scanf_float+0x60>
 801310e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013116:	463a      	mov	r2, r7
 8013118:	4640      	mov	r0, r8
 801311a:	4798      	blx	r3
 801311c:	6923      	ldr	r3, [r4, #16]
 801311e:	3b01      	subs	r3, #1
 8013120:	6123      	str	r3, [r4, #16]
 8013122:	e6ec      	b.n	8012efe <_scanf_float+0x7a>
 8013124:	1e6b      	subs	r3, r5, #1
 8013126:	2b06      	cmp	r3, #6
 8013128:	d825      	bhi.n	8013176 <_scanf_float+0x2f2>
 801312a:	2d02      	cmp	r5, #2
 801312c:	d836      	bhi.n	801319c <_scanf_float+0x318>
 801312e:	455e      	cmp	r6, fp
 8013130:	f67f aee8 	bls.w	8012f04 <_scanf_float+0x80>
 8013134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013138:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801313c:	463a      	mov	r2, r7
 801313e:	4640      	mov	r0, r8
 8013140:	4798      	blx	r3
 8013142:	6923      	ldr	r3, [r4, #16]
 8013144:	3b01      	subs	r3, #1
 8013146:	6123      	str	r3, [r4, #16]
 8013148:	e7f1      	b.n	801312e <_scanf_float+0x2aa>
 801314a:	9802      	ldr	r0, [sp, #8]
 801314c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013150:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013154:	9002      	str	r0, [sp, #8]
 8013156:	463a      	mov	r2, r7
 8013158:	4640      	mov	r0, r8
 801315a:	4798      	blx	r3
 801315c:	6923      	ldr	r3, [r4, #16]
 801315e:	3b01      	subs	r3, #1
 8013160:	6123      	str	r3, [r4, #16]
 8013162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013166:	fa5f fa8a 	uxtb.w	sl, sl
 801316a:	f1ba 0f02 	cmp.w	sl, #2
 801316e:	d1ec      	bne.n	801314a <_scanf_float+0x2c6>
 8013170:	3d03      	subs	r5, #3
 8013172:	b2ed      	uxtb	r5, r5
 8013174:	1b76      	subs	r6, r6, r5
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	05da      	lsls	r2, r3, #23
 801317a:	d52f      	bpl.n	80131dc <_scanf_float+0x358>
 801317c:	055b      	lsls	r3, r3, #21
 801317e:	d510      	bpl.n	80131a2 <_scanf_float+0x31e>
 8013180:	455e      	cmp	r6, fp
 8013182:	f67f aebf 	bls.w	8012f04 <_scanf_float+0x80>
 8013186:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801318a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801318e:	463a      	mov	r2, r7
 8013190:	4640      	mov	r0, r8
 8013192:	4798      	blx	r3
 8013194:	6923      	ldr	r3, [r4, #16]
 8013196:	3b01      	subs	r3, #1
 8013198:	6123      	str	r3, [r4, #16]
 801319a:	e7f1      	b.n	8013180 <_scanf_float+0x2fc>
 801319c:	46aa      	mov	sl, r5
 801319e:	9602      	str	r6, [sp, #8]
 80131a0:	e7df      	b.n	8013162 <_scanf_float+0x2de>
 80131a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80131a6:	6923      	ldr	r3, [r4, #16]
 80131a8:	2965      	cmp	r1, #101	; 0x65
 80131aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80131ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80131b2:	6123      	str	r3, [r4, #16]
 80131b4:	d00c      	beq.n	80131d0 <_scanf_float+0x34c>
 80131b6:	2945      	cmp	r1, #69	; 0x45
 80131b8:	d00a      	beq.n	80131d0 <_scanf_float+0x34c>
 80131ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131be:	463a      	mov	r2, r7
 80131c0:	4640      	mov	r0, r8
 80131c2:	4798      	blx	r3
 80131c4:	6923      	ldr	r3, [r4, #16]
 80131c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80131ca:	3b01      	subs	r3, #1
 80131cc:	1eb5      	subs	r5, r6, #2
 80131ce:	6123      	str	r3, [r4, #16]
 80131d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131d4:	463a      	mov	r2, r7
 80131d6:	4640      	mov	r0, r8
 80131d8:	4798      	blx	r3
 80131da:	462e      	mov	r6, r5
 80131dc:	6825      	ldr	r5, [r4, #0]
 80131de:	f015 0510 	ands.w	r5, r5, #16
 80131e2:	d159      	bne.n	8013298 <_scanf_float+0x414>
 80131e4:	7035      	strb	r5, [r6, #0]
 80131e6:	6823      	ldr	r3, [r4, #0]
 80131e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80131ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131f0:	d11b      	bne.n	801322a <_scanf_float+0x3a6>
 80131f2:	9b01      	ldr	r3, [sp, #4]
 80131f4:	454b      	cmp	r3, r9
 80131f6:	eba3 0209 	sub.w	r2, r3, r9
 80131fa:	d123      	bne.n	8013244 <_scanf_float+0x3c0>
 80131fc:	2200      	movs	r2, #0
 80131fe:	4659      	mov	r1, fp
 8013200:	4640      	mov	r0, r8
 8013202:	f000 fe97 	bl	8013f34 <_strtod_r>
 8013206:	6822      	ldr	r2, [r4, #0]
 8013208:	9b03      	ldr	r3, [sp, #12]
 801320a:	f012 0f02 	tst.w	r2, #2
 801320e:	ec57 6b10 	vmov	r6, r7, d0
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	d021      	beq.n	801325a <_scanf_float+0x3d6>
 8013216:	9903      	ldr	r1, [sp, #12]
 8013218:	1d1a      	adds	r2, r3, #4
 801321a:	600a      	str	r2, [r1, #0]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	e9c3 6700 	strd	r6, r7, [r3]
 8013222:	68e3      	ldr	r3, [r4, #12]
 8013224:	3301      	adds	r3, #1
 8013226:	60e3      	str	r3, [r4, #12]
 8013228:	e66d      	b.n	8012f06 <_scanf_float+0x82>
 801322a:	9b04      	ldr	r3, [sp, #16]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d0e5      	beq.n	80131fc <_scanf_float+0x378>
 8013230:	9905      	ldr	r1, [sp, #20]
 8013232:	230a      	movs	r3, #10
 8013234:	462a      	mov	r2, r5
 8013236:	3101      	adds	r1, #1
 8013238:	4640      	mov	r0, r8
 801323a:	f000 ff6b 	bl	8014114 <_strtol_r>
 801323e:	9b04      	ldr	r3, [sp, #16]
 8013240:	9e05      	ldr	r6, [sp, #20]
 8013242:	1ac2      	subs	r2, r0, r3
 8013244:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013248:	429e      	cmp	r6, r3
 801324a:	bf28      	it	cs
 801324c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013250:	4912      	ldr	r1, [pc, #72]	; (801329c <_scanf_float+0x418>)
 8013252:	4630      	mov	r0, r6
 8013254:	f000 f82c 	bl	80132b0 <siprintf>
 8013258:	e7d0      	b.n	80131fc <_scanf_float+0x378>
 801325a:	9903      	ldr	r1, [sp, #12]
 801325c:	f012 0f04 	tst.w	r2, #4
 8013260:	f103 0204 	add.w	r2, r3, #4
 8013264:	600a      	str	r2, [r1, #0]
 8013266:	d1d9      	bne.n	801321c <_scanf_float+0x398>
 8013268:	f8d3 8000 	ldr.w	r8, [r3]
 801326c:	ee10 2a10 	vmov	r2, s0
 8013270:	ee10 0a10 	vmov	r0, s0
 8013274:	463b      	mov	r3, r7
 8013276:	4639      	mov	r1, r7
 8013278:	f7ed fc70 	bl	8000b5c <__aeabi_dcmpun>
 801327c:	b128      	cbz	r0, 801328a <_scanf_float+0x406>
 801327e:	4808      	ldr	r0, [pc, #32]	; (80132a0 <_scanf_float+0x41c>)
 8013280:	f000 f810 	bl	80132a4 <nanf>
 8013284:	ed88 0a00 	vstr	s0, [r8]
 8013288:	e7cb      	b.n	8013222 <_scanf_float+0x39e>
 801328a:	4630      	mov	r0, r6
 801328c:	4639      	mov	r1, r7
 801328e:	f7ed fcc3 	bl	8000c18 <__aeabi_d2f>
 8013292:	f8c8 0000 	str.w	r0, [r8]
 8013296:	e7c4      	b.n	8013222 <_scanf_float+0x39e>
 8013298:	2500      	movs	r5, #0
 801329a:	e634      	b.n	8012f06 <_scanf_float+0x82>
 801329c:	0802abf8 	.word	0x0802abf8
 80132a0:	0802acff 	.word	0x0802acff

080132a4 <nanf>:
 80132a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80132ac <nanf+0x8>
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	7fc00000 	.word	0x7fc00000

080132b0 <siprintf>:
 80132b0:	b40e      	push	{r1, r2, r3}
 80132b2:	b500      	push	{lr}
 80132b4:	b09c      	sub	sp, #112	; 0x70
 80132b6:	ab1d      	add	r3, sp, #116	; 0x74
 80132b8:	9002      	str	r0, [sp, #8]
 80132ba:	9006      	str	r0, [sp, #24]
 80132bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80132c0:	4809      	ldr	r0, [pc, #36]	; (80132e8 <siprintf+0x38>)
 80132c2:	9107      	str	r1, [sp, #28]
 80132c4:	9104      	str	r1, [sp, #16]
 80132c6:	4909      	ldr	r1, [pc, #36]	; (80132ec <siprintf+0x3c>)
 80132c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80132cc:	9105      	str	r1, [sp, #20]
 80132ce:	6800      	ldr	r0, [r0, #0]
 80132d0:	9301      	str	r3, [sp, #4]
 80132d2:	a902      	add	r1, sp, #8
 80132d4:	f002 ff84 	bl	80161e0 <_svfiprintf_r>
 80132d8:	9b02      	ldr	r3, [sp, #8]
 80132da:	2200      	movs	r2, #0
 80132dc:	701a      	strb	r2, [r3, #0]
 80132de:	b01c      	add	sp, #112	; 0x70
 80132e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80132e4:	b003      	add	sp, #12
 80132e6:	4770      	bx	lr
 80132e8:	20000044 	.word	0x20000044
 80132ec:	ffff0208 	.word	0xffff0208

080132f0 <sulp>:
 80132f0:	b570      	push	{r4, r5, r6, lr}
 80132f2:	4604      	mov	r4, r0
 80132f4:	460d      	mov	r5, r1
 80132f6:	ec45 4b10 	vmov	d0, r4, r5
 80132fa:	4616      	mov	r6, r2
 80132fc:	f002 fcce 	bl	8015c9c <__ulp>
 8013300:	ec51 0b10 	vmov	r0, r1, d0
 8013304:	b17e      	cbz	r6, 8013326 <sulp+0x36>
 8013306:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801330a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801330e:	2b00      	cmp	r3, #0
 8013310:	dd09      	ble.n	8013326 <sulp+0x36>
 8013312:	051b      	lsls	r3, r3, #20
 8013314:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013318:	2400      	movs	r4, #0
 801331a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801331e:	4622      	mov	r2, r4
 8013320:	462b      	mov	r3, r5
 8013322:	f7ed f981 	bl	8000628 <__aeabi_dmul>
 8013326:	bd70      	pop	{r4, r5, r6, pc}

08013328 <_strtod_l>:
 8013328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801332c:	ed2d 8b02 	vpush	{d8}
 8013330:	b09d      	sub	sp, #116	; 0x74
 8013332:	461f      	mov	r7, r3
 8013334:	2300      	movs	r3, #0
 8013336:	9318      	str	r3, [sp, #96]	; 0x60
 8013338:	4ba2      	ldr	r3, [pc, #648]	; (80135c4 <_strtod_l+0x29c>)
 801333a:	9213      	str	r2, [sp, #76]	; 0x4c
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	9305      	str	r3, [sp, #20]
 8013340:	4604      	mov	r4, r0
 8013342:	4618      	mov	r0, r3
 8013344:	4688      	mov	r8, r1
 8013346:	f7ec ff55 	bl	80001f4 <strlen>
 801334a:	f04f 0a00 	mov.w	sl, #0
 801334e:	4605      	mov	r5, r0
 8013350:	f04f 0b00 	mov.w	fp, #0
 8013354:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801335a:	781a      	ldrb	r2, [r3, #0]
 801335c:	2a2b      	cmp	r2, #43	; 0x2b
 801335e:	d04e      	beq.n	80133fe <_strtod_l+0xd6>
 8013360:	d83b      	bhi.n	80133da <_strtod_l+0xb2>
 8013362:	2a0d      	cmp	r2, #13
 8013364:	d834      	bhi.n	80133d0 <_strtod_l+0xa8>
 8013366:	2a08      	cmp	r2, #8
 8013368:	d834      	bhi.n	80133d4 <_strtod_l+0xac>
 801336a:	2a00      	cmp	r2, #0
 801336c:	d03e      	beq.n	80133ec <_strtod_l+0xc4>
 801336e:	2300      	movs	r3, #0
 8013370:	930a      	str	r3, [sp, #40]	; 0x28
 8013372:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013374:	7833      	ldrb	r3, [r6, #0]
 8013376:	2b30      	cmp	r3, #48	; 0x30
 8013378:	f040 80b0 	bne.w	80134dc <_strtod_l+0x1b4>
 801337c:	7873      	ldrb	r3, [r6, #1]
 801337e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013382:	2b58      	cmp	r3, #88	; 0x58
 8013384:	d168      	bne.n	8013458 <_strtod_l+0x130>
 8013386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013388:	9301      	str	r3, [sp, #4]
 801338a:	ab18      	add	r3, sp, #96	; 0x60
 801338c:	9702      	str	r7, [sp, #8]
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	4a8d      	ldr	r2, [pc, #564]	; (80135c8 <_strtod_l+0x2a0>)
 8013392:	ab19      	add	r3, sp, #100	; 0x64
 8013394:	a917      	add	r1, sp, #92	; 0x5c
 8013396:	4620      	mov	r0, r4
 8013398:	f001 fdda 	bl	8014f50 <__gethex>
 801339c:	f010 0707 	ands.w	r7, r0, #7
 80133a0:	4605      	mov	r5, r0
 80133a2:	d005      	beq.n	80133b0 <_strtod_l+0x88>
 80133a4:	2f06      	cmp	r7, #6
 80133a6:	d12c      	bne.n	8013402 <_strtod_l+0xda>
 80133a8:	3601      	adds	r6, #1
 80133aa:	2300      	movs	r3, #0
 80133ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80133ae:	930a      	str	r3, [sp, #40]	; 0x28
 80133b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f040 8590 	bne.w	8013ed8 <_strtod_l+0xbb0>
 80133b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ba:	b1eb      	cbz	r3, 80133f8 <_strtod_l+0xd0>
 80133bc:	4652      	mov	r2, sl
 80133be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80133c2:	ec43 2b10 	vmov	d0, r2, r3
 80133c6:	b01d      	add	sp, #116	; 0x74
 80133c8:	ecbd 8b02 	vpop	{d8}
 80133cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d0:	2a20      	cmp	r2, #32
 80133d2:	d1cc      	bne.n	801336e <_strtod_l+0x46>
 80133d4:	3301      	adds	r3, #1
 80133d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80133d8:	e7be      	b.n	8013358 <_strtod_l+0x30>
 80133da:	2a2d      	cmp	r2, #45	; 0x2d
 80133dc:	d1c7      	bne.n	801336e <_strtod_l+0x46>
 80133de:	2201      	movs	r2, #1
 80133e0:	920a      	str	r2, [sp, #40]	; 0x28
 80133e2:	1c5a      	adds	r2, r3, #1
 80133e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80133e6:	785b      	ldrb	r3, [r3, #1]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d1c2      	bne.n	8013372 <_strtod_l+0x4a>
 80133ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f040 856e 	bne.w	8013ed4 <_strtod_l+0xbac>
 80133f8:	4652      	mov	r2, sl
 80133fa:	465b      	mov	r3, fp
 80133fc:	e7e1      	b.n	80133c2 <_strtod_l+0x9a>
 80133fe:	2200      	movs	r2, #0
 8013400:	e7ee      	b.n	80133e0 <_strtod_l+0xb8>
 8013402:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013404:	b13a      	cbz	r2, 8013416 <_strtod_l+0xee>
 8013406:	2135      	movs	r1, #53	; 0x35
 8013408:	a81a      	add	r0, sp, #104	; 0x68
 801340a:	f002 fd52 	bl	8015eb2 <__copybits>
 801340e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013410:	4620      	mov	r0, r4
 8013412:	f002 f911 	bl	8015638 <_Bfree>
 8013416:	3f01      	subs	r7, #1
 8013418:	2f04      	cmp	r7, #4
 801341a:	d806      	bhi.n	801342a <_strtod_l+0x102>
 801341c:	e8df f007 	tbb	[pc, r7]
 8013420:	1714030a 	.word	0x1714030a
 8013424:	0a          	.byte	0x0a
 8013425:	00          	.byte	0x00
 8013426:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801342a:	0728      	lsls	r0, r5, #28
 801342c:	d5c0      	bpl.n	80133b0 <_strtod_l+0x88>
 801342e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013432:	e7bd      	b.n	80133b0 <_strtod_l+0x88>
 8013434:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013438:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801343a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801343e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013442:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013446:	e7f0      	b.n	801342a <_strtod_l+0x102>
 8013448:	f8df b180 	ldr.w	fp, [pc, #384]	; 80135cc <_strtod_l+0x2a4>
 801344c:	e7ed      	b.n	801342a <_strtod_l+0x102>
 801344e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013452:	f04f 3aff 	mov.w	sl, #4294967295
 8013456:	e7e8      	b.n	801342a <_strtod_l+0x102>
 8013458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801345a:	1c5a      	adds	r2, r3, #1
 801345c:	9217      	str	r2, [sp, #92]	; 0x5c
 801345e:	785b      	ldrb	r3, [r3, #1]
 8013460:	2b30      	cmp	r3, #48	; 0x30
 8013462:	d0f9      	beq.n	8013458 <_strtod_l+0x130>
 8013464:	2b00      	cmp	r3, #0
 8013466:	d0a3      	beq.n	80133b0 <_strtod_l+0x88>
 8013468:	2301      	movs	r3, #1
 801346a:	f04f 0900 	mov.w	r9, #0
 801346e:	9304      	str	r3, [sp, #16]
 8013470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013472:	9308      	str	r3, [sp, #32]
 8013474:	f8cd 901c 	str.w	r9, [sp, #28]
 8013478:	464f      	mov	r7, r9
 801347a:	220a      	movs	r2, #10
 801347c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801347e:	7806      	ldrb	r6, [r0, #0]
 8013480:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013484:	b2d9      	uxtb	r1, r3
 8013486:	2909      	cmp	r1, #9
 8013488:	d92a      	bls.n	80134e0 <_strtod_l+0x1b8>
 801348a:	9905      	ldr	r1, [sp, #20]
 801348c:	462a      	mov	r2, r5
 801348e:	f003 f91b 	bl	80166c8 <strncmp>
 8013492:	b398      	cbz	r0, 80134fc <_strtod_l+0x1d4>
 8013494:	2000      	movs	r0, #0
 8013496:	4632      	mov	r2, r6
 8013498:	463d      	mov	r5, r7
 801349a:	9005      	str	r0, [sp, #20]
 801349c:	4603      	mov	r3, r0
 801349e:	2a65      	cmp	r2, #101	; 0x65
 80134a0:	d001      	beq.n	80134a6 <_strtod_l+0x17e>
 80134a2:	2a45      	cmp	r2, #69	; 0x45
 80134a4:	d118      	bne.n	80134d8 <_strtod_l+0x1b0>
 80134a6:	b91d      	cbnz	r5, 80134b0 <_strtod_l+0x188>
 80134a8:	9a04      	ldr	r2, [sp, #16]
 80134aa:	4302      	orrs	r2, r0
 80134ac:	d09e      	beq.n	80133ec <_strtod_l+0xc4>
 80134ae:	2500      	movs	r5, #0
 80134b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80134b4:	f108 0201 	add.w	r2, r8, #1
 80134b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80134ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80134be:	2a2b      	cmp	r2, #43	; 0x2b
 80134c0:	d075      	beq.n	80135ae <_strtod_l+0x286>
 80134c2:	2a2d      	cmp	r2, #45	; 0x2d
 80134c4:	d07b      	beq.n	80135be <_strtod_l+0x296>
 80134c6:	f04f 0c00 	mov.w	ip, #0
 80134ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80134ce:	2909      	cmp	r1, #9
 80134d0:	f240 8082 	bls.w	80135d8 <_strtod_l+0x2b0>
 80134d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80134d8:	2600      	movs	r6, #0
 80134da:	e09d      	b.n	8013618 <_strtod_l+0x2f0>
 80134dc:	2300      	movs	r3, #0
 80134de:	e7c4      	b.n	801346a <_strtod_l+0x142>
 80134e0:	2f08      	cmp	r7, #8
 80134e2:	bfd8      	it	le
 80134e4:	9907      	ldrle	r1, [sp, #28]
 80134e6:	f100 0001 	add.w	r0, r0, #1
 80134ea:	bfda      	itte	le
 80134ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80134f0:	9307      	strle	r3, [sp, #28]
 80134f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80134f6:	3701      	adds	r7, #1
 80134f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80134fa:	e7bf      	b.n	801347c <_strtod_l+0x154>
 80134fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134fe:	195a      	adds	r2, r3, r5
 8013500:	9217      	str	r2, [sp, #92]	; 0x5c
 8013502:	5d5a      	ldrb	r2, [r3, r5]
 8013504:	2f00      	cmp	r7, #0
 8013506:	d037      	beq.n	8013578 <_strtod_l+0x250>
 8013508:	9005      	str	r0, [sp, #20]
 801350a:	463d      	mov	r5, r7
 801350c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013510:	2b09      	cmp	r3, #9
 8013512:	d912      	bls.n	801353a <_strtod_l+0x212>
 8013514:	2301      	movs	r3, #1
 8013516:	e7c2      	b.n	801349e <_strtod_l+0x176>
 8013518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801351a:	1c5a      	adds	r2, r3, #1
 801351c:	9217      	str	r2, [sp, #92]	; 0x5c
 801351e:	785a      	ldrb	r2, [r3, #1]
 8013520:	3001      	adds	r0, #1
 8013522:	2a30      	cmp	r2, #48	; 0x30
 8013524:	d0f8      	beq.n	8013518 <_strtod_l+0x1f0>
 8013526:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801352a:	2b08      	cmp	r3, #8
 801352c:	f200 84d9 	bhi.w	8013ee2 <_strtod_l+0xbba>
 8013530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013532:	9005      	str	r0, [sp, #20]
 8013534:	2000      	movs	r0, #0
 8013536:	9308      	str	r3, [sp, #32]
 8013538:	4605      	mov	r5, r0
 801353a:	3a30      	subs	r2, #48	; 0x30
 801353c:	f100 0301 	add.w	r3, r0, #1
 8013540:	d014      	beq.n	801356c <_strtod_l+0x244>
 8013542:	9905      	ldr	r1, [sp, #20]
 8013544:	4419      	add	r1, r3
 8013546:	9105      	str	r1, [sp, #20]
 8013548:	462b      	mov	r3, r5
 801354a:	eb00 0e05 	add.w	lr, r0, r5
 801354e:	210a      	movs	r1, #10
 8013550:	4573      	cmp	r3, lr
 8013552:	d113      	bne.n	801357c <_strtod_l+0x254>
 8013554:	182b      	adds	r3, r5, r0
 8013556:	2b08      	cmp	r3, #8
 8013558:	f105 0501 	add.w	r5, r5, #1
 801355c:	4405      	add	r5, r0
 801355e:	dc1c      	bgt.n	801359a <_strtod_l+0x272>
 8013560:	9907      	ldr	r1, [sp, #28]
 8013562:	230a      	movs	r3, #10
 8013564:	fb03 2301 	mla	r3, r3, r1, r2
 8013568:	9307      	str	r3, [sp, #28]
 801356a:	2300      	movs	r3, #0
 801356c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801356e:	1c51      	adds	r1, r2, #1
 8013570:	9117      	str	r1, [sp, #92]	; 0x5c
 8013572:	7852      	ldrb	r2, [r2, #1]
 8013574:	4618      	mov	r0, r3
 8013576:	e7c9      	b.n	801350c <_strtod_l+0x1e4>
 8013578:	4638      	mov	r0, r7
 801357a:	e7d2      	b.n	8013522 <_strtod_l+0x1fa>
 801357c:	2b08      	cmp	r3, #8
 801357e:	dc04      	bgt.n	801358a <_strtod_l+0x262>
 8013580:	9e07      	ldr	r6, [sp, #28]
 8013582:	434e      	muls	r6, r1
 8013584:	9607      	str	r6, [sp, #28]
 8013586:	3301      	adds	r3, #1
 8013588:	e7e2      	b.n	8013550 <_strtod_l+0x228>
 801358a:	f103 0c01 	add.w	ip, r3, #1
 801358e:	f1bc 0f10 	cmp.w	ip, #16
 8013592:	bfd8      	it	le
 8013594:	fb01 f909 	mulle.w	r9, r1, r9
 8013598:	e7f5      	b.n	8013586 <_strtod_l+0x25e>
 801359a:	2d10      	cmp	r5, #16
 801359c:	bfdc      	itt	le
 801359e:	230a      	movle	r3, #10
 80135a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80135a4:	e7e1      	b.n	801356a <_strtod_l+0x242>
 80135a6:	2300      	movs	r3, #0
 80135a8:	9305      	str	r3, [sp, #20]
 80135aa:	2301      	movs	r3, #1
 80135ac:	e77c      	b.n	80134a8 <_strtod_l+0x180>
 80135ae:	f04f 0c00 	mov.w	ip, #0
 80135b2:	f108 0202 	add.w	r2, r8, #2
 80135b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80135b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80135bc:	e785      	b.n	80134ca <_strtod_l+0x1a2>
 80135be:	f04f 0c01 	mov.w	ip, #1
 80135c2:	e7f6      	b.n	80135b2 <_strtod_l+0x28a>
 80135c4:	0802aee0 	.word	0x0802aee0
 80135c8:	0802ac00 	.word	0x0802ac00
 80135cc:	7ff00000 	.word	0x7ff00000
 80135d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135d2:	1c51      	adds	r1, r2, #1
 80135d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80135d6:	7852      	ldrb	r2, [r2, #1]
 80135d8:	2a30      	cmp	r2, #48	; 0x30
 80135da:	d0f9      	beq.n	80135d0 <_strtod_l+0x2a8>
 80135dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80135e0:	2908      	cmp	r1, #8
 80135e2:	f63f af79 	bhi.w	80134d8 <_strtod_l+0x1b0>
 80135e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80135ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135ec:	9206      	str	r2, [sp, #24]
 80135ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135f0:	1c51      	adds	r1, r2, #1
 80135f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80135f4:	7852      	ldrb	r2, [r2, #1]
 80135f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80135fa:	2e09      	cmp	r6, #9
 80135fc:	d937      	bls.n	801366e <_strtod_l+0x346>
 80135fe:	9e06      	ldr	r6, [sp, #24]
 8013600:	1b89      	subs	r1, r1, r6
 8013602:	2908      	cmp	r1, #8
 8013604:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013608:	dc02      	bgt.n	8013610 <_strtod_l+0x2e8>
 801360a:	4576      	cmp	r6, lr
 801360c:	bfa8      	it	ge
 801360e:	4676      	movge	r6, lr
 8013610:	f1bc 0f00 	cmp.w	ip, #0
 8013614:	d000      	beq.n	8013618 <_strtod_l+0x2f0>
 8013616:	4276      	negs	r6, r6
 8013618:	2d00      	cmp	r5, #0
 801361a:	d14d      	bne.n	80136b8 <_strtod_l+0x390>
 801361c:	9904      	ldr	r1, [sp, #16]
 801361e:	4301      	orrs	r1, r0
 8013620:	f47f aec6 	bne.w	80133b0 <_strtod_l+0x88>
 8013624:	2b00      	cmp	r3, #0
 8013626:	f47f aee1 	bne.w	80133ec <_strtod_l+0xc4>
 801362a:	2a69      	cmp	r2, #105	; 0x69
 801362c:	d027      	beq.n	801367e <_strtod_l+0x356>
 801362e:	dc24      	bgt.n	801367a <_strtod_l+0x352>
 8013630:	2a49      	cmp	r2, #73	; 0x49
 8013632:	d024      	beq.n	801367e <_strtod_l+0x356>
 8013634:	2a4e      	cmp	r2, #78	; 0x4e
 8013636:	f47f aed9 	bne.w	80133ec <_strtod_l+0xc4>
 801363a:	499f      	ldr	r1, [pc, #636]	; (80138b8 <_strtod_l+0x590>)
 801363c:	a817      	add	r0, sp, #92	; 0x5c
 801363e:	f001 fedf 	bl	8015400 <__match>
 8013642:	2800      	cmp	r0, #0
 8013644:	f43f aed2 	beq.w	80133ec <_strtod_l+0xc4>
 8013648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	2b28      	cmp	r3, #40	; 0x28
 801364e:	d12d      	bne.n	80136ac <_strtod_l+0x384>
 8013650:	499a      	ldr	r1, [pc, #616]	; (80138bc <_strtod_l+0x594>)
 8013652:	aa1a      	add	r2, sp, #104	; 0x68
 8013654:	a817      	add	r0, sp, #92	; 0x5c
 8013656:	f001 fee7 	bl	8015428 <__hexnan>
 801365a:	2805      	cmp	r0, #5
 801365c:	d126      	bne.n	80136ac <_strtod_l+0x384>
 801365e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013660:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013664:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013668:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801366c:	e6a0      	b.n	80133b0 <_strtod_l+0x88>
 801366e:	210a      	movs	r1, #10
 8013670:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013674:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013678:	e7b9      	b.n	80135ee <_strtod_l+0x2c6>
 801367a:	2a6e      	cmp	r2, #110	; 0x6e
 801367c:	e7db      	b.n	8013636 <_strtod_l+0x30e>
 801367e:	4990      	ldr	r1, [pc, #576]	; (80138c0 <_strtod_l+0x598>)
 8013680:	a817      	add	r0, sp, #92	; 0x5c
 8013682:	f001 febd 	bl	8015400 <__match>
 8013686:	2800      	cmp	r0, #0
 8013688:	f43f aeb0 	beq.w	80133ec <_strtod_l+0xc4>
 801368c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801368e:	498d      	ldr	r1, [pc, #564]	; (80138c4 <_strtod_l+0x59c>)
 8013690:	3b01      	subs	r3, #1
 8013692:	a817      	add	r0, sp, #92	; 0x5c
 8013694:	9317      	str	r3, [sp, #92]	; 0x5c
 8013696:	f001 feb3 	bl	8015400 <__match>
 801369a:	b910      	cbnz	r0, 80136a2 <_strtod_l+0x37a>
 801369c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801369e:	3301      	adds	r3, #1
 80136a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80136a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80138d4 <_strtod_l+0x5ac>
 80136a6:	f04f 0a00 	mov.w	sl, #0
 80136aa:	e681      	b.n	80133b0 <_strtod_l+0x88>
 80136ac:	4886      	ldr	r0, [pc, #536]	; (80138c8 <_strtod_l+0x5a0>)
 80136ae:	f002 fff3 	bl	8016698 <nan>
 80136b2:	ec5b ab10 	vmov	sl, fp, d0
 80136b6:	e67b      	b.n	80133b0 <_strtod_l+0x88>
 80136b8:	9b05      	ldr	r3, [sp, #20]
 80136ba:	9807      	ldr	r0, [sp, #28]
 80136bc:	1af3      	subs	r3, r6, r3
 80136be:	2f00      	cmp	r7, #0
 80136c0:	bf08      	it	eq
 80136c2:	462f      	moveq	r7, r5
 80136c4:	2d10      	cmp	r5, #16
 80136c6:	9306      	str	r3, [sp, #24]
 80136c8:	46a8      	mov	r8, r5
 80136ca:	bfa8      	it	ge
 80136cc:	f04f 0810 	movge.w	r8, #16
 80136d0:	f7ec ff30 	bl	8000534 <__aeabi_ui2d>
 80136d4:	2d09      	cmp	r5, #9
 80136d6:	4682      	mov	sl, r0
 80136d8:	468b      	mov	fp, r1
 80136da:	dd13      	ble.n	8013704 <_strtod_l+0x3dc>
 80136dc:	4b7b      	ldr	r3, [pc, #492]	; (80138cc <_strtod_l+0x5a4>)
 80136de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80136e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80136e6:	f7ec ff9f 	bl	8000628 <__aeabi_dmul>
 80136ea:	4682      	mov	sl, r0
 80136ec:	4648      	mov	r0, r9
 80136ee:	468b      	mov	fp, r1
 80136f0:	f7ec ff20 	bl	8000534 <__aeabi_ui2d>
 80136f4:	4602      	mov	r2, r0
 80136f6:	460b      	mov	r3, r1
 80136f8:	4650      	mov	r0, sl
 80136fa:	4659      	mov	r1, fp
 80136fc:	f7ec fdde 	bl	80002bc <__adddf3>
 8013700:	4682      	mov	sl, r0
 8013702:	468b      	mov	fp, r1
 8013704:	2d0f      	cmp	r5, #15
 8013706:	dc38      	bgt.n	801377a <_strtod_l+0x452>
 8013708:	9b06      	ldr	r3, [sp, #24]
 801370a:	2b00      	cmp	r3, #0
 801370c:	f43f ae50 	beq.w	80133b0 <_strtod_l+0x88>
 8013710:	dd24      	ble.n	801375c <_strtod_l+0x434>
 8013712:	2b16      	cmp	r3, #22
 8013714:	dc0b      	bgt.n	801372e <_strtod_l+0x406>
 8013716:	496d      	ldr	r1, [pc, #436]	; (80138cc <_strtod_l+0x5a4>)
 8013718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801371c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013720:	4652      	mov	r2, sl
 8013722:	465b      	mov	r3, fp
 8013724:	f7ec ff80 	bl	8000628 <__aeabi_dmul>
 8013728:	4682      	mov	sl, r0
 801372a:	468b      	mov	fp, r1
 801372c:	e640      	b.n	80133b0 <_strtod_l+0x88>
 801372e:	9a06      	ldr	r2, [sp, #24]
 8013730:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013734:	4293      	cmp	r3, r2
 8013736:	db20      	blt.n	801377a <_strtod_l+0x452>
 8013738:	4c64      	ldr	r4, [pc, #400]	; (80138cc <_strtod_l+0x5a4>)
 801373a:	f1c5 050f 	rsb	r5, r5, #15
 801373e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013742:	4652      	mov	r2, sl
 8013744:	465b      	mov	r3, fp
 8013746:	e9d1 0100 	ldrd	r0, r1, [r1]
 801374a:	f7ec ff6d 	bl	8000628 <__aeabi_dmul>
 801374e:	9b06      	ldr	r3, [sp, #24]
 8013750:	1b5d      	subs	r5, r3, r5
 8013752:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013756:	e9d4 2300 	ldrd	r2, r3, [r4]
 801375a:	e7e3      	b.n	8013724 <_strtod_l+0x3fc>
 801375c:	9b06      	ldr	r3, [sp, #24]
 801375e:	3316      	adds	r3, #22
 8013760:	db0b      	blt.n	801377a <_strtod_l+0x452>
 8013762:	9b05      	ldr	r3, [sp, #20]
 8013764:	1b9e      	subs	r6, r3, r6
 8013766:	4b59      	ldr	r3, [pc, #356]	; (80138cc <_strtod_l+0x5a4>)
 8013768:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801376c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013770:	4650      	mov	r0, sl
 8013772:	4659      	mov	r1, fp
 8013774:	f7ed f882 	bl	800087c <__aeabi_ddiv>
 8013778:	e7d6      	b.n	8013728 <_strtod_l+0x400>
 801377a:	9b06      	ldr	r3, [sp, #24]
 801377c:	eba5 0808 	sub.w	r8, r5, r8
 8013780:	4498      	add	r8, r3
 8013782:	f1b8 0f00 	cmp.w	r8, #0
 8013786:	dd74      	ble.n	8013872 <_strtod_l+0x54a>
 8013788:	f018 030f 	ands.w	r3, r8, #15
 801378c:	d00a      	beq.n	80137a4 <_strtod_l+0x47c>
 801378e:	494f      	ldr	r1, [pc, #316]	; (80138cc <_strtod_l+0x5a4>)
 8013790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013794:	4652      	mov	r2, sl
 8013796:	465b      	mov	r3, fp
 8013798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801379c:	f7ec ff44 	bl	8000628 <__aeabi_dmul>
 80137a0:	4682      	mov	sl, r0
 80137a2:	468b      	mov	fp, r1
 80137a4:	f038 080f 	bics.w	r8, r8, #15
 80137a8:	d04f      	beq.n	801384a <_strtod_l+0x522>
 80137aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80137ae:	dd22      	ble.n	80137f6 <_strtod_l+0x4ce>
 80137b0:	2500      	movs	r5, #0
 80137b2:	462e      	mov	r6, r5
 80137b4:	9507      	str	r5, [sp, #28]
 80137b6:	9505      	str	r5, [sp, #20]
 80137b8:	2322      	movs	r3, #34	; 0x22
 80137ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80138d4 <_strtod_l+0x5ac>
 80137be:	6023      	str	r3, [r4, #0]
 80137c0:	f04f 0a00 	mov.w	sl, #0
 80137c4:	9b07      	ldr	r3, [sp, #28]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f43f adf2 	beq.w	80133b0 <_strtod_l+0x88>
 80137cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137ce:	4620      	mov	r0, r4
 80137d0:	f001 ff32 	bl	8015638 <_Bfree>
 80137d4:	9905      	ldr	r1, [sp, #20]
 80137d6:	4620      	mov	r0, r4
 80137d8:	f001 ff2e 	bl	8015638 <_Bfree>
 80137dc:	4631      	mov	r1, r6
 80137de:	4620      	mov	r0, r4
 80137e0:	f001 ff2a 	bl	8015638 <_Bfree>
 80137e4:	9907      	ldr	r1, [sp, #28]
 80137e6:	4620      	mov	r0, r4
 80137e8:	f001 ff26 	bl	8015638 <_Bfree>
 80137ec:	4629      	mov	r1, r5
 80137ee:	4620      	mov	r0, r4
 80137f0:	f001 ff22 	bl	8015638 <_Bfree>
 80137f4:	e5dc      	b.n	80133b0 <_strtod_l+0x88>
 80137f6:	4b36      	ldr	r3, [pc, #216]	; (80138d0 <_strtod_l+0x5a8>)
 80137f8:	9304      	str	r3, [sp, #16]
 80137fa:	2300      	movs	r3, #0
 80137fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013800:	4650      	mov	r0, sl
 8013802:	4659      	mov	r1, fp
 8013804:	4699      	mov	r9, r3
 8013806:	f1b8 0f01 	cmp.w	r8, #1
 801380a:	dc21      	bgt.n	8013850 <_strtod_l+0x528>
 801380c:	b10b      	cbz	r3, 8013812 <_strtod_l+0x4ea>
 801380e:	4682      	mov	sl, r0
 8013810:	468b      	mov	fp, r1
 8013812:	4b2f      	ldr	r3, [pc, #188]	; (80138d0 <_strtod_l+0x5a8>)
 8013814:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013818:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801381c:	4652      	mov	r2, sl
 801381e:	465b      	mov	r3, fp
 8013820:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013824:	f7ec ff00 	bl	8000628 <__aeabi_dmul>
 8013828:	4b2a      	ldr	r3, [pc, #168]	; (80138d4 <_strtod_l+0x5ac>)
 801382a:	460a      	mov	r2, r1
 801382c:	400b      	ands	r3, r1
 801382e:	492a      	ldr	r1, [pc, #168]	; (80138d8 <_strtod_l+0x5b0>)
 8013830:	428b      	cmp	r3, r1
 8013832:	4682      	mov	sl, r0
 8013834:	d8bc      	bhi.n	80137b0 <_strtod_l+0x488>
 8013836:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801383a:	428b      	cmp	r3, r1
 801383c:	bf86      	itte	hi
 801383e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80138dc <_strtod_l+0x5b4>
 8013842:	f04f 3aff 	movhi.w	sl, #4294967295
 8013846:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801384a:	2300      	movs	r3, #0
 801384c:	9304      	str	r3, [sp, #16]
 801384e:	e084      	b.n	801395a <_strtod_l+0x632>
 8013850:	f018 0f01 	tst.w	r8, #1
 8013854:	d005      	beq.n	8013862 <_strtod_l+0x53a>
 8013856:	9b04      	ldr	r3, [sp, #16]
 8013858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385c:	f7ec fee4 	bl	8000628 <__aeabi_dmul>
 8013860:	2301      	movs	r3, #1
 8013862:	9a04      	ldr	r2, [sp, #16]
 8013864:	3208      	adds	r2, #8
 8013866:	f109 0901 	add.w	r9, r9, #1
 801386a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801386e:	9204      	str	r2, [sp, #16]
 8013870:	e7c9      	b.n	8013806 <_strtod_l+0x4de>
 8013872:	d0ea      	beq.n	801384a <_strtod_l+0x522>
 8013874:	f1c8 0800 	rsb	r8, r8, #0
 8013878:	f018 020f 	ands.w	r2, r8, #15
 801387c:	d00a      	beq.n	8013894 <_strtod_l+0x56c>
 801387e:	4b13      	ldr	r3, [pc, #76]	; (80138cc <_strtod_l+0x5a4>)
 8013880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013884:	4650      	mov	r0, sl
 8013886:	4659      	mov	r1, fp
 8013888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388c:	f7ec fff6 	bl	800087c <__aeabi_ddiv>
 8013890:	4682      	mov	sl, r0
 8013892:	468b      	mov	fp, r1
 8013894:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013898:	d0d7      	beq.n	801384a <_strtod_l+0x522>
 801389a:	f1b8 0f1f 	cmp.w	r8, #31
 801389e:	dd1f      	ble.n	80138e0 <_strtod_l+0x5b8>
 80138a0:	2500      	movs	r5, #0
 80138a2:	462e      	mov	r6, r5
 80138a4:	9507      	str	r5, [sp, #28]
 80138a6:	9505      	str	r5, [sp, #20]
 80138a8:	2322      	movs	r3, #34	; 0x22
 80138aa:	f04f 0a00 	mov.w	sl, #0
 80138ae:	f04f 0b00 	mov.w	fp, #0
 80138b2:	6023      	str	r3, [r4, #0]
 80138b4:	e786      	b.n	80137c4 <_strtod_l+0x49c>
 80138b6:	bf00      	nop
 80138b8:	0802abd1 	.word	0x0802abd1
 80138bc:	0802ac14 	.word	0x0802ac14
 80138c0:	0802abc9 	.word	0x0802abc9
 80138c4:	0802ae04 	.word	0x0802ae04
 80138c8:	0802acff 	.word	0x0802acff
 80138cc:	0802af78 	.word	0x0802af78
 80138d0:	0802af50 	.word	0x0802af50
 80138d4:	7ff00000 	.word	0x7ff00000
 80138d8:	7ca00000 	.word	0x7ca00000
 80138dc:	7fefffff 	.word	0x7fefffff
 80138e0:	f018 0310 	ands.w	r3, r8, #16
 80138e4:	bf18      	it	ne
 80138e6:	236a      	movne	r3, #106	; 0x6a
 80138e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013c98 <_strtod_l+0x970>
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	4650      	mov	r0, sl
 80138f0:	4659      	mov	r1, fp
 80138f2:	2300      	movs	r3, #0
 80138f4:	f018 0f01 	tst.w	r8, #1
 80138f8:	d004      	beq.n	8013904 <_strtod_l+0x5dc>
 80138fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80138fe:	f7ec fe93 	bl	8000628 <__aeabi_dmul>
 8013902:	2301      	movs	r3, #1
 8013904:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013908:	f109 0908 	add.w	r9, r9, #8
 801390c:	d1f2      	bne.n	80138f4 <_strtod_l+0x5cc>
 801390e:	b10b      	cbz	r3, 8013914 <_strtod_l+0x5ec>
 8013910:	4682      	mov	sl, r0
 8013912:	468b      	mov	fp, r1
 8013914:	9b04      	ldr	r3, [sp, #16]
 8013916:	b1c3      	cbz	r3, 801394a <_strtod_l+0x622>
 8013918:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801391c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013920:	2b00      	cmp	r3, #0
 8013922:	4659      	mov	r1, fp
 8013924:	dd11      	ble.n	801394a <_strtod_l+0x622>
 8013926:	2b1f      	cmp	r3, #31
 8013928:	f340 8124 	ble.w	8013b74 <_strtod_l+0x84c>
 801392c:	2b34      	cmp	r3, #52	; 0x34
 801392e:	bfde      	ittt	le
 8013930:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013934:	f04f 33ff 	movle.w	r3, #4294967295
 8013938:	fa03 f202 	lslle.w	r2, r3, r2
 801393c:	f04f 0a00 	mov.w	sl, #0
 8013940:	bfcc      	ite	gt
 8013942:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013946:	ea02 0b01 	andle.w	fp, r2, r1
 801394a:	2200      	movs	r2, #0
 801394c:	2300      	movs	r3, #0
 801394e:	4650      	mov	r0, sl
 8013950:	4659      	mov	r1, fp
 8013952:	f7ed f8d1 	bl	8000af8 <__aeabi_dcmpeq>
 8013956:	2800      	cmp	r0, #0
 8013958:	d1a2      	bne.n	80138a0 <_strtod_l+0x578>
 801395a:	9b07      	ldr	r3, [sp, #28]
 801395c:	9300      	str	r3, [sp, #0]
 801395e:	9908      	ldr	r1, [sp, #32]
 8013960:	462b      	mov	r3, r5
 8013962:	463a      	mov	r2, r7
 8013964:	4620      	mov	r0, r4
 8013966:	f001 fecf 	bl	8015708 <__s2b>
 801396a:	9007      	str	r0, [sp, #28]
 801396c:	2800      	cmp	r0, #0
 801396e:	f43f af1f 	beq.w	80137b0 <_strtod_l+0x488>
 8013972:	9b05      	ldr	r3, [sp, #20]
 8013974:	1b9e      	subs	r6, r3, r6
 8013976:	9b06      	ldr	r3, [sp, #24]
 8013978:	2b00      	cmp	r3, #0
 801397a:	bfb4      	ite	lt
 801397c:	4633      	movlt	r3, r6
 801397e:	2300      	movge	r3, #0
 8013980:	930c      	str	r3, [sp, #48]	; 0x30
 8013982:	9b06      	ldr	r3, [sp, #24]
 8013984:	2500      	movs	r5, #0
 8013986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801398a:	9312      	str	r3, [sp, #72]	; 0x48
 801398c:	462e      	mov	r6, r5
 801398e:	9b07      	ldr	r3, [sp, #28]
 8013990:	4620      	mov	r0, r4
 8013992:	6859      	ldr	r1, [r3, #4]
 8013994:	f001 fe10 	bl	80155b8 <_Balloc>
 8013998:	9005      	str	r0, [sp, #20]
 801399a:	2800      	cmp	r0, #0
 801399c:	f43f af0c 	beq.w	80137b8 <_strtod_l+0x490>
 80139a0:	9b07      	ldr	r3, [sp, #28]
 80139a2:	691a      	ldr	r2, [r3, #16]
 80139a4:	3202      	adds	r2, #2
 80139a6:	f103 010c 	add.w	r1, r3, #12
 80139aa:	0092      	lsls	r2, r2, #2
 80139ac:	300c      	adds	r0, #12
 80139ae:	f001 fdf5 	bl	801559c <memcpy>
 80139b2:	ec4b ab10 	vmov	d0, sl, fp
 80139b6:	aa1a      	add	r2, sp, #104	; 0x68
 80139b8:	a919      	add	r1, sp, #100	; 0x64
 80139ba:	4620      	mov	r0, r4
 80139bc:	f002 f9ea 	bl	8015d94 <__d2b>
 80139c0:	ec4b ab18 	vmov	d8, sl, fp
 80139c4:	9018      	str	r0, [sp, #96]	; 0x60
 80139c6:	2800      	cmp	r0, #0
 80139c8:	f43f aef6 	beq.w	80137b8 <_strtod_l+0x490>
 80139cc:	2101      	movs	r1, #1
 80139ce:	4620      	mov	r0, r4
 80139d0:	f001 ff34 	bl	801583c <__i2b>
 80139d4:	4606      	mov	r6, r0
 80139d6:	2800      	cmp	r0, #0
 80139d8:	f43f aeee 	beq.w	80137b8 <_strtod_l+0x490>
 80139dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139de:	9904      	ldr	r1, [sp, #16]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	bfab      	itete	ge
 80139e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80139e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80139e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80139ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80139ee:	bfac      	ite	ge
 80139f0:	eb03 0902 	addge.w	r9, r3, r2
 80139f4:	1ad7      	sublt	r7, r2, r3
 80139f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80139f8:	eba3 0801 	sub.w	r8, r3, r1
 80139fc:	4490      	add	r8, r2
 80139fe:	4ba1      	ldr	r3, [pc, #644]	; (8013c84 <_strtod_l+0x95c>)
 8013a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8013a04:	4598      	cmp	r8, r3
 8013a06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013a0a:	f280 80c7 	bge.w	8013b9c <_strtod_l+0x874>
 8013a0e:	eba3 0308 	sub.w	r3, r3, r8
 8013a12:	2b1f      	cmp	r3, #31
 8013a14:	eba2 0203 	sub.w	r2, r2, r3
 8013a18:	f04f 0101 	mov.w	r1, #1
 8013a1c:	f300 80b1 	bgt.w	8013b82 <_strtod_l+0x85a>
 8013a20:	fa01 f303 	lsl.w	r3, r1, r3
 8013a24:	930d      	str	r3, [sp, #52]	; 0x34
 8013a26:	2300      	movs	r3, #0
 8013a28:	9308      	str	r3, [sp, #32]
 8013a2a:	eb09 0802 	add.w	r8, r9, r2
 8013a2e:	9b04      	ldr	r3, [sp, #16]
 8013a30:	45c1      	cmp	r9, r8
 8013a32:	4417      	add	r7, r2
 8013a34:	441f      	add	r7, r3
 8013a36:	464b      	mov	r3, r9
 8013a38:	bfa8      	it	ge
 8013a3a:	4643      	movge	r3, r8
 8013a3c:	42bb      	cmp	r3, r7
 8013a3e:	bfa8      	it	ge
 8013a40:	463b      	movge	r3, r7
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	bfc2      	ittt	gt
 8013a46:	eba8 0803 	subgt.w	r8, r8, r3
 8013a4a:	1aff      	subgt	r7, r7, r3
 8013a4c:	eba9 0903 	subgt.w	r9, r9, r3
 8013a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd17      	ble.n	8013a86 <_strtod_l+0x75e>
 8013a56:	4631      	mov	r1, r6
 8013a58:	461a      	mov	r2, r3
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f001 ffae 	bl	80159bc <__pow5mult>
 8013a60:	4606      	mov	r6, r0
 8013a62:	2800      	cmp	r0, #0
 8013a64:	f43f aea8 	beq.w	80137b8 <_strtod_l+0x490>
 8013a68:	4601      	mov	r1, r0
 8013a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f001 fefb 	bl	8015868 <__multiply>
 8013a72:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a74:	2800      	cmp	r0, #0
 8013a76:	f43f ae9f 	beq.w	80137b8 <_strtod_l+0x490>
 8013a7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f001 fddb 	bl	8015638 <_Bfree>
 8013a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a84:	9318      	str	r3, [sp, #96]	; 0x60
 8013a86:	f1b8 0f00 	cmp.w	r8, #0
 8013a8a:	f300 808c 	bgt.w	8013ba6 <_strtod_l+0x87e>
 8013a8e:	9b06      	ldr	r3, [sp, #24]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	dd08      	ble.n	8013aa6 <_strtod_l+0x77e>
 8013a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a96:	9905      	ldr	r1, [sp, #20]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f001 ff8f 	bl	80159bc <__pow5mult>
 8013a9e:	9005      	str	r0, [sp, #20]
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	f43f ae89 	beq.w	80137b8 <_strtod_l+0x490>
 8013aa6:	2f00      	cmp	r7, #0
 8013aa8:	dd08      	ble.n	8013abc <_strtod_l+0x794>
 8013aaa:	9905      	ldr	r1, [sp, #20]
 8013aac:	463a      	mov	r2, r7
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f001 ffde 	bl	8015a70 <__lshift>
 8013ab4:	9005      	str	r0, [sp, #20]
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	f43f ae7e 	beq.w	80137b8 <_strtod_l+0x490>
 8013abc:	f1b9 0f00 	cmp.w	r9, #0
 8013ac0:	dd08      	ble.n	8013ad4 <_strtod_l+0x7ac>
 8013ac2:	4631      	mov	r1, r6
 8013ac4:	464a      	mov	r2, r9
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f001 ffd2 	bl	8015a70 <__lshift>
 8013acc:	4606      	mov	r6, r0
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f43f ae72 	beq.w	80137b8 <_strtod_l+0x490>
 8013ad4:	9a05      	ldr	r2, [sp, #20]
 8013ad6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f002 f855 	bl	8015b88 <__mdiff>
 8013ade:	4605      	mov	r5, r0
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	f43f ae69 	beq.w	80137b8 <_strtod_l+0x490>
 8013ae6:	68c3      	ldr	r3, [r0, #12]
 8013ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aea:	2300      	movs	r3, #0
 8013aec:	60c3      	str	r3, [r0, #12]
 8013aee:	4631      	mov	r1, r6
 8013af0:	f002 f82e 	bl	8015b50 <__mcmp>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	da60      	bge.n	8013bba <_strtod_l+0x892>
 8013af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013afa:	ea53 030a 	orrs.w	r3, r3, sl
 8013afe:	f040 8082 	bne.w	8013c06 <_strtod_l+0x8de>
 8013b02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d17d      	bne.n	8013c06 <_strtod_l+0x8de>
 8013b0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b0e:	0d1b      	lsrs	r3, r3, #20
 8013b10:	051b      	lsls	r3, r3, #20
 8013b12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013b16:	d976      	bls.n	8013c06 <_strtod_l+0x8de>
 8013b18:	696b      	ldr	r3, [r5, #20]
 8013b1a:	b913      	cbnz	r3, 8013b22 <_strtod_l+0x7fa>
 8013b1c:	692b      	ldr	r3, [r5, #16]
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	dd71      	ble.n	8013c06 <_strtod_l+0x8de>
 8013b22:	4629      	mov	r1, r5
 8013b24:	2201      	movs	r2, #1
 8013b26:	4620      	mov	r0, r4
 8013b28:	f001 ffa2 	bl	8015a70 <__lshift>
 8013b2c:	4631      	mov	r1, r6
 8013b2e:	4605      	mov	r5, r0
 8013b30:	f002 f80e 	bl	8015b50 <__mcmp>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	dd66      	ble.n	8013c06 <_strtod_l+0x8de>
 8013b38:	9904      	ldr	r1, [sp, #16]
 8013b3a:	4a53      	ldr	r2, [pc, #332]	; (8013c88 <_strtod_l+0x960>)
 8013b3c:	465b      	mov	r3, fp
 8013b3e:	2900      	cmp	r1, #0
 8013b40:	f000 8081 	beq.w	8013c46 <_strtod_l+0x91e>
 8013b44:	ea02 010b 	and.w	r1, r2, fp
 8013b48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b4c:	dc7b      	bgt.n	8013c46 <_strtod_l+0x91e>
 8013b4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b52:	f77f aea9 	ble.w	80138a8 <_strtod_l+0x580>
 8013b56:	4b4d      	ldr	r3, [pc, #308]	; (8013c8c <_strtod_l+0x964>)
 8013b58:	4650      	mov	r0, sl
 8013b5a:	4659      	mov	r1, fp
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	f7ec fd63 	bl	8000628 <__aeabi_dmul>
 8013b62:	460b      	mov	r3, r1
 8013b64:	4303      	orrs	r3, r0
 8013b66:	bf08      	it	eq
 8013b68:	2322      	moveq	r3, #34	; 0x22
 8013b6a:	4682      	mov	sl, r0
 8013b6c:	468b      	mov	fp, r1
 8013b6e:	bf08      	it	eq
 8013b70:	6023      	streq	r3, [r4, #0]
 8013b72:	e62b      	b.n	80137cc <_strtod_l+0x4a4>
 8013b74:	f04f 32ff 	mov.w	r2, #4294967295
 8013b78:	fa02 f303 	lsl.w	r3, r2, r3
 8013b7c:	ea03 0a0a 	and.w	sl, r3, sl
 8013b80:	e6e3      	b.n	801394a <_strtod_l+0x622>
 8013b82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013b86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013b8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013b8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013b92:	fa01 f308 	lsl.w	r3, r1, r8
 8013b96:	9308      	str	r3, [sp, #32]
 8013b98:	910d      	str	r1, [sp, #52]	; 0x34
 8013b9a:	e746      	b.n	8013a2a <_strtod_l+0x702>
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	9308      	str	r3, [sp, #32]
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	930d      	str	r3, [sp, #52]	; 0x34
 8013ba4:	e741      	b.n	8013a2a <_strtod_l+0x702>
 8013ba6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ba8:	4642      	mov	r2, r8
 8013baa:	4620      	mov	r0, r4
 8013bac:	f001 ff60 	bl	8015a70 <__lshift>
 8013bb0:	9018      	str	r0, [sp, #96]	; 0x60
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	f47f af6b 	bne.w	8013a8e <_strtod_l+0x766>
 8013bb8:	e5fe      	b.n	80137b8 <_strtod_l+0x490>
 8013bba:	465f      	mov	r7, fp
 8013bbc:	d16e      	bne.n	8013c9c <_strtod_l+0x974>
 8013bbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bc4:	b342      	cbz	r2, 8013c18 <_strtod_l+0x8f0>
 8013bc6:	4a32      	ldr	r2, [pc, #200]	; (8013c90 <_strtod_l+0x968>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d128      	bne.n	8013c1e <_strtod_l+0x8f6>
 8013bcc:	9b04      	ldr	r3, [sp, #16]
 8013bce:	4651      	mov	r1, sl
 8013bd0:	b1eb      	cbz	r3, 8013c0e <_strtod_l+0x8e6>
 8013bd2:	4b2d      	ldr	r3, [pc, #180]	; (8013c88 <_strtod_l+0x960>)
 8013bd4:	403b      	ands	r3, r7
 8013bd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013bda:	f04f 32ff 	mov.w	r2, #4294967295
 8013bde:	d819      	bhi.n	8013c14 <_strtod_l+0x8ec>
 8013be0:	0d1b      	lsrs	r3, r3, #20
 8013be2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013be6:	fa02 f303 	lsl.w	r3, r2, r3
 8013bea:	4299      	cmp	r1, r3
 8013bec:	d117      	bne.n	8013c1e <_strtod_l+0x8f6>
 8013bee:	4b29      	ldr	r3, [pc, #164]	; (8013c94 <_strtod_l+0x96c>)
 8013bf0:	429f      	cmp	r7, r3
 8013bf2:	d102      	bne.n	8013bfa <_strtod_l+0x8d2>
 8013bf4:	3101      	adds	r1, #1
 8013bf6:	f43f addf 	beq.w	80137b8 <_strtod_l+0x490>
 8013bfa:	4b23      	ldr	r3, [pc, #140]	; (8013c88 <_strtod_l+0x960>)
 8013bfc:	403b      	ands	r3, r7
 8013bfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013c02:	f04f 0a00 	mov.w	sl, #0
 8013c06:	9b04      	ldr	r3, [sp, #16]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d1a4      	bne.n	8013b56 <_strtod_l+0x82e>
 8013c0c:	e5de      	b.n	80137cc <_strtod_l+0x4a4>
 8013c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c12:	e7ea      	b.n	8013bea <_strtod_l+0x8c2>
 8013c14:	4613      	mov	r3, r2
 8013c16:	e7e8      	b.n	8013bea <_strtod_l+0x8c2>
 8013c18:	ea53 030a 	orrs.w	r3, r3, sl
 8013c1c:	d08c      	beq.n	8013b38 <_strtod_l+0x810>
 8013c1e:	9b08      	ldr	r3, [sp, #32]
 8013c20:	b1db      	cbz	r3, 8013c5a <_strtod_l+0x932>
 8013c22:	423b      	tst	r3, r7
 8013c24:	d0ef      	beq.n	8013c06 <_strtod_l+0x8de>
 8013c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c28:	9a04      	ldr	r2, [sp, #16]
 8013c2a:	4650      	mov	r0, sl
 8013c2c:	4659      	mov	r1, fp
 8013c2e:	b1c3      	cbz	r3, 8013c62 <_strtod_l+0x93a>
 8013c30:	f7ff fb5e 	bl	80132f0 <sulp>
 8013c34:	4602      	mov	r2, r0
 8013c36:	460b      	mov	r3, r1
 8013c38:	ec51 0b18 	vmov	r0, r1, d8
 8013c3c:	f7ec fb3e 	bl	80002bc <__adddf3>
 8013c40:	4682      	mov	sl, r0
 8013c42:	468b      	mov	fp, r1
 8013c44:	e7df      	b.n	8013c06 <_strtod_l+0x8de>
 8013c46:	4013      	ands	r3, r2
 8013c48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013c50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013c54:	f04f 3aff 	mov.w	sl, #4294967295
 8013c58:	e7d5      	b.n	8013c06 <_strtod_l+0x8de>
 8013c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c5c:	ea13 0f0a 	tst.w	r3, sl
 8013c60:	e7e0      	b.n	8013c24 <_strtod_l+0x8fc>
 8013c62:	f7ff fb45 	bl	80132f0 <sulp>
 8013c66:	4602      	mov	r2, r0
 8013c68:	460b      	mov	r3, r1
 8013c6a:	ec51 0b18 	vmov	r0, r1, d8
 8013c6e:	f7ec fb23 	bl	80002b8 <__aeabi_dsub>
 8013c72:	2200      	movs	r2, #0
 8013c74:	2300      	movs	r3, #0
 8013c76:	4682      	mov	sl, r0
 8013c78:	468b      	mov	fp, r1
 8013c7a:	f7ec ff3d 	bl	8000af8 <__aeabi_dcmpeq>
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	d0c1      	beq.n	8013c06 <_strtod_l+0x8de>
 8013c82:	e611      	b.n	80138a8 <_strtod_l+0x580>
 8013c84:	fffffc02 	.word	0xfffffc02
 8013c88:	7ff00000 	.word	0x7ff00000
 8013c8c:	39500000 	.word	0x39500000
 8013c90:	000fffff 	.word	0x000fffff
 8013c94:	7fefffff 	.word	0x7fefffff
 8013c98:	0802ac28 	.word	0x0802ac28
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	f002 f8d4 	bl	8015e4c <__ratio>
 8013ca4:	ec59 8b10 	vmov	r8, r9, d0
 8013ca8:	ee10 0a10 	vmov	r0, s0
 8013cac:	2200      	movs	r2, #0
 8013cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	f7ec ff34 	bl	8000b20 <__aeabi_dcmple>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d07a      	beq.n	8013db2 <_strtod_l+0xa8a>
 8013cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d04a      	beq.n	8013d58 <_strtod_l+0xa30>
 8013cc2:	4b95      	ldr	r3, [pc, #596]	; (8013f18 <_strtod_l+0xbf0>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013cca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013f18 <_strtod_l+0xbf0>
 8013cce:	f04f 0800 	mov.w	r8, #0
 8013cd2:	4b92      	ldr	r3, [pc, #584]	; (8013f1c <_strtod_l+0xbf4>)
 8013cd4:	403b      	ands	r3, r7
 8013cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8013cd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013cda:	4b91      	ldr	r3, [pc, #580]	; (8013f20 <_strtod_l+0xbf8>)
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	f040 80b0 	bne.w	8013e42 <_strtod_l+0xb1a>
 8013ce2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013ce6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013cea:	ec4b ab10 	vmov	d0, sl, fp
 8013cee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013cf2:	f001 ffd3 	bl	8015c9c <__ulp>
 8013cf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cfa:	ec53 2b10 	vmov	r2, r3, d0
 8013cfe:	f7ec fc93 	bl	8000628 <__aeabi_dmul>
 8013d02:	4652      	mov	r2, sl
 8013d04:	465b      	mov	r3, fp
 8013d06:	f7ec fad9 	bl	80002bc <__adddf3>
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	4983      	ldr	r1, [pc, #524]	; (8013f1c <_strtod_l+0xbf4>)
 8013d0e:	4a85      	ldr	r2, [pc, #532]	; (8013f24 <_strtod_l+0xbfc>)
 8013d10:	4019      	ands	r1, r3
 8013d12:	4291      	cmp	r1, r2
 8013d14:	4682      	mov	sl, r0
 8013d16:	d960      	bls.n	8013dda <_strtod_l+0xab2>
 8013d18:	ee18 3a90 	vmov	r3, s17
 8013d1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d104      	bne.n	8013d2e <_strtod_l+0xa06>
 8013d24:	ee18 3a10 	vmov	r3, s16
 8013d28:	3301      	adds	r3, #1
 8013d2a:	f43f ad45 	beq.w	80137b8 <_strtod_l+0x490>
 8013d2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8013f30 <_strtod_l+0xc08>
 8013d32:	f04f 3aff 	mov.w	sl, #4294967295
 8013d36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f001 fc7d 	bl	8015638 <_Bfree>
 8013d3e:	9905      	ldr	r1, [sp, #20]
 8013d40:	4620      	mov	r0, r4
 8013d42:	f001 fc79 	bl	8015638 <_Bfree>
 8013d46:	4631      	mov	r1, r6
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f001 fc75 	bl	8015638 <_Bfree>
 8013d4e:	4629      	mov	r1, r5
 8013d50:	4620      	mov	r0, r4
 8013d52:	f001 fc71 	bl	8015638 <_Bfree>
 8013d56:	e61a      	b.n	801398e <_strtod_l+0x666>
 8013d58:	f1ba 0f00 	cmp.w	sl, #0
 8013d5c:	d11b      	bne.n	8013d96 <_strtod_l+0xa6e>
 8013d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d62:	b9f3      	cbnz	r3, 8013da2 <_strtod_l+0xa7a>
 8013d64:	4b6c      	ldr	r3, [pc, #432]	; (8013f18 <_strtod_l+0xbf0>)
 8013d66:	2200      	movs	r2, #0
 8013d68:	4640      	mov	r0, r8
 8013d6a:	4649      	mov	r1, r9
 8013d6c:	f7ec fece 	bl	8000b0c <__aeabi_dcmplt>
 8013d70:	b9d0      	cbnz	r0, 8013da8 <_strtod_l+0xa80>
 8013d72:	4640      	mov	r0, r8
 8013d74:	4649      	mov	r1, r9
 8013d76:	4b6c      	ldr	r3, [pc, #432]	; (8013f28 <_strtod_l+0xc00>)
 8013d78:	2200      	movs	r2, #0
 8013d7a:	f7ec fc55 	bl	8000628 <__aeabi_dmul>
 8013d7e:	4680      	mov	r8, r0
 8013d80:	4689      	mov	r9, r1
 8013d82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013d86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013d8a:	9315      	str	r3, [sp, #84]	; 0x54
 8013d8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013d90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013d94:	e79d      	b.n	8013cd2 <_strtod_l+0x9aa>
 8013d96:	f1ba 0f01 	cmp.w	sl, #1
 8013d9a:	d102      	bne.n	8013da2 <_strtod_l+0xa7a>
 8013d9c:	2f00      	cmp	r7, #0
 8013d9e:	f43f ad83 	beq.w	80138a8 <_strtod_l+0x580>
 8013da2:	4b62      	ldr	r3, [pc, #392]	; (8013f2c <_strtod_l+0xc04>)
 8013da4:	2200      	movs	r2, #0
 8013da6:	e78e      	b.n	8013cc6 <_strtod_l+0x99e>
 8013da8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8013f28 <_strtod_l+0xc00>
 8013dac:	f04f 0800 	mov.w	r8, #0
 8013db0:	e7e7      	b.n	8013d82 <_strtod_l+0xa5a>
 8013db2:	4b5d      	ldr	r3, [pc, #372]	; (8013f28 <_strtod_l+0xc00>)
 8013db4:	4640      	mov	r0, r8
 8013db6:	4649      	mov	r1, r9
 8013db8:	2200      	movs	r2, #0
 8013dba:	f7ec fc35 	bl	8000628 <__aeabi_dmul>
 8013dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dc0:	4680      	mov	r8, r0
 8013dc2:	4689      	mov	r9, r1
 8013dc4:	b933      	cbnz	r3, 8013dd4 <_strtod_l+0xaac>
 8013dc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dca:	900e      	str	r0, [sp, #56]	; 0x38
 8013dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013dd2:	e7dd      	b.n	8013d90 <_strtod_l+0xa68>
 8013dd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013dd8:	e7f9      	b.n	8013dce <_strtod_l+0xaa6>
 8013dda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013dde:	9b04      	ldr	r3, [sp, #16]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1a8      	bne.n	8013d36 <_strtod_l+0xa0e>
 8013de4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dea:	0d1b      	lsrs	r3, r3, #20
 8013dec:	051b      	lsls	r3, r3, #20
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d1a1      	bne.n	8013d36 <_strtod_l+0xa0e>
 8013df2:	4640      	mov	r0, r8
 8013df4:	4649      	mov	r1, r9
 8013df6:	f7ec ff77 	bl	8000ce8 <__aeabi_d2lz>
 8013dfa:	f7ec fbe7 	bl	80005cc <__aeabi_l2d>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	4640      	mov	r0, r8
 8013e04:	4649      	mov	r1, r9
 8013e06:	f7ec fa57 	bl	80002b8 <__aeabi_dsub>
 8013e0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e10:	ea43 030a 	orr.w	r3, r3, sl
 8013e14:	4313      	orrs	r3, r2
 8013e16:	4680      	mov	r8, r0
 8013e18:	4689      	mov	r9, r1
 8013e1a:	d055      	beq.n	8013ec8 <_strtod_l+0xba0>
 8013e1c:	a336      	add	r3, pc, #216	; (adr r3, 8013ef8 <_strtod_l+0xbd0>)
 8013e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e22:	f7ec fe73 	bl	8000b0c <__aeabi_dcmplt>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	f47f acd0 	bne.w	80137cc <_strtod_l+0x4a4>
 8013e2c:	a334      	add	r3, pc, #208	; (adr r3, 8013f00 <_strtod_l+0xbd8>)
 8013e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e32:	4640      	mov	r0, r8
 8013e34:	4649      	mov	r1, r9
 8013e36:	f7ec fe87 	bl	8000b48 <__aeabi_dcmpgt>
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	f43f af7b 	beq.w	8013d36 <_strtod_l+0xa0e>
 8013e40:	e4c4      	b.n	80137cc <_strtod_l+0x4a4>
 8013e42:	9b04      	ldr	r3, [sp, #16]
 8013e44:	b333      	cbz	r3, 8013e94 <_strtod_l+0xb6c>
 8013e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e4c:	d822      	bhi.n	8013e94 <_strtod_l+0xb6c>
 8013e4e:	a32e      	add	r3, pc, #184	; (adr r3, 8013f08 <_strtod_l+0xbe0>)
 8013e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e54:	4640      	mov	r0, r8
 8013e56:	4649      	mov	r1, r9
 8013e58:	f7ec fe62 	bl	8000b20 <__aeabi_dcmple>
 8013e5c:	b1a0      	cbz	r0, 8013e88 <_strtod_l+0xb60>
 8013e5e:	4649      	mov	r1, r9
 8013e60:	4640      	mov	r0, r8
 8013e62:	f7ec feb9 	bl	8000bd8 <__aeabi_d2uiz>
 8013e66:	2801      	cmp	r0, #1
 8013e68:	bf38      	it	cc
 8013e6a:	2001      	movcc	r0, #1
 8013e6c:	f7ec fb62 	bl	8000534 <__aeabi_ui2d>
 8013e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e72:	4680      	mov	r8, r0
 8013e74:	4689      	mov	r9, r1
 8013e76:	bb23      	cbnz	r3, 8013ec2 <_strtod_l+0xb9a>
 8013e78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e7c:	9010      	str	r0, [sp, #64]	; 0x40
 8013e7e:	9311      	str	r3, [sp, #68]	; 0x44
 8013e80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013e90:	1a9b      	subs	r3, r3, r2
 8013e92:	9309      	str	r3, [sp, #36]	; 0x24
 8013e94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e98:	eeb0 0a48 	vmov.f32	s0, s16
 8013e9c:	eef0 0a68 	vmov.f32	s1, s17
 8013ea0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ea4:	f001 fefa 	bl	8015c9c <__ulp>
 8013ea8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013eac:	ec53 2b10 	vmov	r2, r3, d0
 8013eb0:	f7ec fbba 	bl	8000628 <__aeabi_dmul>
 8013eb4:	ec53 2b18 	vmov	r2, r3, d8
 8013eb8:	f7ec fa00 	bl	80002bc <__adddf3>
 8013ebc:	4682      	mov	sl, r0
 8013ebe:	468b      	mov	fp, r1
 8013ec0:	e78d      	b.n	8013dde <_strtod_l+0xab6>
 8013ec2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8013ec6:	e7db      	b.n	8013e80 <_strtod_l+0xb58>
 8013ec8:	a311      	add	r3, pc, #68	; (adr r3, 8013f10 <_strtod_l+0xbe8>)
 8013eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ece:	f7ec fe1d 	bl	8000b0c <__aeabi_dcmplt>
 8013ed2:	e7b2      	b.n	8013e3a <_strtod_l+0xb12>
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013eda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013edc:	6013      	str	r3, [r2, #0]
 8013ede:	f7ff ba6b 	b.w	80133b8 <_strtod_l+0x90>
 8013ee2:	2a65      	cmp	r2, #101	; 0x65
 8013ee4:	f43f ab5f 	beq.w	80135a6 <_strtod_l+0x27e>
 8013ee8:	2a45      	cmp	r2, #69	; 0x45
 8013eea:	f43f ab5c 	beq.w	80135a6 <_strtod_l+0x27e>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	f7ff bb94 	b.w	801361c <_strtod_l+0x2f4>
 8013ef4:	f3af 8000 	nop.w
 8013ef8:	94a03595 	.word	0x94a03595
 8013efc:	3fdfffff 	.word	0x3fdfffff
 8013f00:	35afe535 	.word	0x35afe535
 8013f04:	3fe00000 	.word	0x3fe00000
 8013f08:	ffc00000 	.word	0xffc00000
 8013f0c:	41dfffff 	.word	0x41dfffff
 8013f10:	94a03595 	.word	0x94a03595
 8013f14:	3fcfffff 	.word	0x3fcfffff
 8013f18:	3ff00000 	.word	0x3ff00000
 8013f1c:	7ff00000 	.word	0x7ff00000
 8013f20:	7fe00000 	.word	0x7fe00000
 8013f24:	7c9fffff 	.word	0x7c9fffff
 8013f28:	3fe00000 	.word	0x3fe00000
 8013f2c:	bff00000 	.word	0xbff00000
 8013f30:	7fefffff 	.word	0x7fefffff

08013f34 <_strtod_r>:
 8013f34:	4b01      	ldr	r3, [pc, #4]	; (8013f3c <_strtod_r+0x8>)
 8013f36:	f7ff b9f7 	b.w	8013328 <_strtod_l>
 8013f3a:	bf00      	nop
 8013f3c:	200000ac 	.word	0x200000ac

08013f40 <strtod>:
 8013f40:	460a      	mov	r2, r1
 8013f42:	4601      	mov	r1, r0
 8013f44:	4802      	ldr	r0, [pc, #8]	; (8013f50 <strtod+0x10>)
 8013f46:	4b03      	ldr	r3, [pc, #12]	; (8013f54 <strtod+0x14>)
 8013f48:	6800      	ldr	r0, [r0, #0]
 8013f4a:	f7ff b9ed 	b.w	8013328 <_strtod_l>
 8013f4e:	bf00      	nop
 8013f50:	20000044 	.word	0x20000044
 8013f54:	200000ac 	.word	0x200000ac

08013f58 <strtok>:
 8013f58:	4b16      	ldr	r3, [pc, #88]	; (8013fb4 <strtok+0x5c>)
 8013f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f5c:	681e      	ldr	r6, [r3, #0]
 8013f5e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013f60:	4605      	mov	r5, r0
 8013f62:	b9fc      	cbnz	r4, 8013fa4 <strtok+0x4c>
 8013f64:	2050      	movs	r0, #80	; 0x50
 8013f66:	9101      	str	r1, [sp, #4]
 8013f68:	f001 fafe 	bl	8015568 <malloc>
 8013f6c:	9901      	ldr	r1, [sp, #4]
 8013f6e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013f70:	4602      	mov	r2, r0
 8013f72:	b920      	cbnz	r0, 8013f7e <strtok+0x26>
 8013f74:	4b10      	ldr	r3, [pc, #64]	; (8013fb8 <strtok+0x60>)
 8013f76:	4811      	ldr	r0, [pc, #68]	; (8013fbc <strtok+0x64>)
 8013f78:	2157      	movs	r1, #87	; 0x57
 8013f7a:	f000 f8d7 	bl	801412c <__assert_func>
 8013f7e:	e9c0 4400 	strd	r4, r4, [r0]
 8013f82:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013f86:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013f8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013f8e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013f92:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013f96:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013f9a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013f9e:	6184      	str	r4, [r0, #24]
 8013fa0:	7704      	strb	r4, [r0, #28]
 8013fa2:	6244      	str	r4, [r0, #36]	; 0x24
 8013fa4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	4628      	mov	r0, r5
 8013faa:	b002      	add	sp, #8
 8013fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fb0:	f000 b806 	b.w	8013fc0 <__strtok_r>
 8013fb4:	20000044 	.word	0x20000044
 8013fb8:	0802ac50 	.word	0x0802ac50
 8013fbc:	0802ac67 	.word	0x0802ac67

08013fc0 <__strtok_r>:
 8013fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fc2:	b908      	cbnz	r0, 8013fc8 <__strtok_r+0x8>
 8013fc4:	6810      	ldr	r0, [r2, #0]
 8013fc6:	b188      	cbz	r0, 8013fec <__strtok_r+0x2c>
 8013fc8:	4604      	mov	r4, r0
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013fd0:	460f      	mov	r7, r1
 8013fd2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013fd6:	b91e      	cbnz	r6, 8013fe0 <__strtok_r+0x20>
 8013fd8:	b965      	cbnz	r5, 8013ff4 <__strtok_r+0x34>
 8013fda:	6015      	str	r5, [r2, #0]
 8013fdc:	4628      	mov	r0, r5
 8013fde:	e005      	b.n	8013fec <__strtok_r+0x2c>
 8013fe0:	42b5      	cmp	r5, r6
 8013fe2:	d1f6      	bne.n	8013fd2 <__strtok_r+0x12>
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d1f0      	bne.n	8013fca <__strtok_r+0xa>
 8013fe8:	6014      	str	r4, [r2, #0]
 8013fea:	7003      	strb	r3, [r0, #0]
 8013fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fee:	461c      	mov	r4, r3
 8013ff0:	e00c      	b.n	801400c <__strtok_r+0x4c>
 8013ff2:	b915      	cbnz	r5, 8013ffa <__strtok_r+0x3a>
 8013ff4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ff8:	460e      	mov	r6, r1
 8013ffa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013ffe:	42ab      	cmp	r3, r5
 8014000:	d1f7      	bne.n	8013ff2 <__strtok_r+0x32>
 8014002:	2b00      	cmp	r3, #0
 8014004:	d0f3      	beq.n	8013fee <__strtok_r+0x2e>
 8014006:	2300      	movs	r3, #0
 8014008:	f804 3c01 	strb.w	r3, [r4, #-1]
 801400c:	6014      	str	r4, [r2, #0]
 801400e:	e7ed      	b.n	8013fec <__strtok_r+0x2c>

08014010 <_strtol_l.constprop.0>:
 8014010:	2b01      	cmp	r3, #1
 8014012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014016:	d001      	beq.n	801401c <_strtol_l.constprop.0+0xc>
 8014018:	2b24      	cmp	r3, #36	; 0x24
 801401a:	d906      	bls.n	801402a <_strtol_l.constprop.0+0x1a>
 801401c:	f7fe fa96 	bl	801254c <__errno>
 8014020:	2316      	movs	r3, #22
 8014022:	6003      	str	r3, [r0, #0]
 8014024:	2000      	movs	r0, #0
 8014026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801402a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014110 <_strtol_l.constprop.0+0x100>
 801402e:	460d      	mov	r5, r1
 8014030:	462e      	mov	r6, r5
 8014032:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014036:	f814 700c 	ldrb.w	r7, [r4, ip]
 801403a:	f017 0708 	ands.w	r7, r7, #8
 801403e:	d1f7      	bne.n	8014030 <_strtol_l.constprop.0+0x20>
 8014040:	2c2d      	cmp	r4, #45	; 0x2d
 8014042:	d132      	bne.n	80140aa <_strtol_l.constprop.0+0x9a>
 8014044:	782c      	ldrb	r4, [r5, #0]
 8014046:	2701      	movs	r7, #1
 8014048:	1cb5      	adds	r5, r6, #2
 801404a:	2b00      	cmp	r3, #0
 801404c:	d05b      	beq.n	8014106 <_strtol_l.constprop.0+0xf6>
 801404e:	2b10      	cmp	r3, #16
 8014050:	d109      	bne.n	8014066 <_strtol_l.constprop.0+0x56>
 8014052:	2c30      	cmp	r4, #48	; 0x30
 8014054:	d107      	bne.n	8014066 <_strtol_l.constprop.0+0x56>
 8014056:	782c      	ldrb	r4, [r5, #0]
 8014058:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801405c:	2c58      	cmp	r4, #88	; 0x58
 801405e:	d14d      	bne.n	80140fc <_strtol_l.constprop.0+0xec>
 8014060:	786c      	ldrb	r4, [r5, #1]
 8014062:	2310      	movs	r3, #16
 8014064:	3502      	adds	r5, #2
 8014066:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801406a:	f108 38ff 	add.w	r8, r8, #4294967295
 801406e:	f04f 0c00 	mov.w	ip, #0
 8014072:	fbb8 f9f3 	udiv	r9, r8, r3
 8014076:	4666      	mov	r6, ip
 8014078:	fb03 8a19 	mls	sl, r3, r9, r8
 801407c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014080:	f1be 0f09 	cmp.w	lr, #9
 8014084:	d816      	bhi.n	80140b4 <_strtol_l.constprop.0+0xa4>
 8014086:	4674      	mov	r4, lr
 8014088:	42a3      	cmp	r3, r4
 801408a:	dd24      	ble.n	80140d6 <_strtol_l.constprop.0+0xc6>
 801408c:	f1bc 0f00 	cmp.w	ip, #0
 8014090:	db1e      	blt.n	80140d0 <_strtol_l.constprop.0+0xc0>
 8014092:	45b1      	cmp	r9, r6
 8014094:	d31c      	bcc.n	80140d0 <_strtol_l.constprop.0+0xc0>
 8014096:	d101      	bne.n	801409c <_strtol_l.constprop.0+0x8c>
 8014098:	45a2      	cmp	sl, r4
 801409a:	db19      	blt.n	80140d0 <_strtol_l.constprop.0+0xc0>
 801409c:	fb06 4603 	mla	r6, r6, r3, r4
 80140a0:	f04f 0c01 	mov.w	ip, #1
 80140a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140a8:	e7e8      	b.n	801407c <_strtol_l.constprop.0+0x6c>
 80140aa:	2c2b      	cmp	r4, #43	; 0x2b
 80140ac:	bf04      	itt	eq
 80140ae:	782c      	ldrbeq	r4, [r5, #0]
 80140b0:	1cb5      	addeq	r5, r6, #2
 80140b2:	e7ca      	b.n	801404a <_strtol_l.constprop.0+0x3a>
 80140b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80140b8:	f1be 0f19 	cmp.w	lr, #25
 80140bc:	d801      	bhi.n	80140c2 <_strtol_l.constprop.0+0xb2>
 80140be:	3c37      	subs	r4, #55	; 0x37
 80140c0:	e7e2      	b.n	8014088 <_strtol_l.constprop.0+0x78>
 80140c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80140c6:	f1be 0f19 	cmp.w	lr, #25
 80140ca:	d804      	bhi.n	80140d6 <_strtol_l.constprop.0+0xc6>
 80140cc:	3c57      	subs	r4, #87	; 0x57
 80140ce:	e7db      	b.n	8014088 <_strtol_l.constprop.0+0x78>
 80140d0:	f04f 3cff 	mov.w	ip, #4294967295
 80140d4:	e7e6      	b.n	80140a4 <_strtol_l.constprop.0+0x94>
 80140d6:	f1bc 0f00 	cmp.w	ip, #0
 80140da:	da05      	bge.n	80140e8 <_strtol_l.constprop.0+0xd8>
 80140dc:	2322      	movs	r3, #34	; 0x22
 80140de:	6003      	str	r3, [r0, #0]
 80140e0:	4646      	mov	r6, r8
 80140e2:	b942      	cbnz	r2, 80140f6 <_strtol_l.constprop.0+0xe6>
 80140e4:	4630      	mov	r0, r6
 80140e6:	e79e      	b.n	8014026 <_strtol_l.constprop.0+0x16>
 80140e8:	b107      	cbz	r7, 80140ec <_strtol_l.constprop.0+0xdc>
 80140ea:	4276      	negs	r6, r6
 80140ec:	2a00      	cmp	r2, #0
 80140ee:	d0f9      	beq.n	80140e4 <_strtol_l.constprop.0+0xd4>
 80140f0:	f1bc 0f00 	cmp.w	ip, #0
 80140f4:	d000      	beq.n	80140f8 <_strtol_l.constprop.0+0xe8>
 80140f6:	1e69      	subs	r1, r5, #1
 80140f8:	6011      	str	r1, [r2, #0]
 80140fa:	e7f3      	b.n	80140e4 <_strtol_l.constprop.0+0xd4>
 80140fc:	2430      	movs	r4, #48	; 0x30
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d1b1      	bne.n	8014066 <_strtol_l.constprop.0+0x56>
 8014102:	2308      	movs	r3, #8
 8014104:	e7af      	b.n	8014066 <_strtol_l.constprop.0+0x56>
 8014106:	2c30      	cmp	r4, #48	; 0x30
 8014108:	d0a5      	beq.n	8014056 <_strtol_l.constprop.0+0x46>
 801410a:	230a      	movs	r3, #10
 801410c:	e7ab      	b.n	8014066 <_strtol_l.constprop.0+0x56>
 801410e:	bf00      	nop
 8014110:	0802ad01 	.word	0x0802ad01

08014114 <_strtol_r>:
 8014114:	f7ff bf7c 	b.w	8014010 <_strtol_l.constprop.0>

08014118 <strtol>:
 8014118:	4613      	mov	r3, r2
 801411a:	460a      	mov	r2, r1
 801411c:	4601      	mov	r1, r0
 801411e:	4802      	ldr	r0, [pc, #8]	; (8014128 <strtol+0x10>)
 8014120:	6800      	ldr	r0, [r0, #0]
 8014122:	f7ff bf75 	b.w	8014010 <_strtol_l.constprop.0>
 8014126:	bf00      	nop
 8014128:	20000044 	.word	0x20000044

0801412c <__assert_func>:
 801412c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801412e:	4614      	mov	r4, r2
 8014130:	461a      	mov	r2, r3
 8014132:	4b09      	ldr	r3, [pc, #36]	; (8014158 <__assert_func+0x2c>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4605      	mov	r5, r0
 8014138:	68d8      	ldr	r0, [r3, #12]
 801413a:	b14c      	cbz	r4, 8014150 <__assert_func+0x24>
 801413c:	4b07      	ldr	r3, [pc, #28]	; (801415c <__assert_func+0x30>)
 801413e:	9100      	str	r1, [sp, #0]
 8014140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014144:	4906      	ldr	r1, [pc, #24]	; (8014160 <__assert_func+0x34>)
 8014146:	462b      	mov	r3, r5
 8014148:	f000 fe88 	bl	8014e5c <fiprintf>
 801414c:	f002 fb9e 	bl	801688c <abort>
 8014150:	4b04      	ldr	r3, [pc, #16]	; (8014164 <__assert_func+0x38>)
 8014152:	461c      	mov	r4, r3
 8014154:	e7f3      	b.n	801413e <__assert_func+0x12>
 8014156:	bf00      	nop
 8014158:	20000044 	.word	0x20000044
 801415c:	0802acc4 	.word	0x0802acc4
 8014160:	0802acd1 	.word	0x0802acd1
 8014164:	0802acff 	.word	0x0802acff

08014168 <quorem>:
 8014168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	6903      	ldr	r3, [r0, #16]
 801416e:	690c      	ldr	r4, [r1, #16]
 8014170:	42a3      	cmp	r3, r4
 8014172:	4607      	mov	r7, r0
 8014174:	f2c0 8081 	blt.w	801427a <quorem+0x112>
 8014178:	3c01      	subs	r4, #1
 801417a:	f101 0814 	add.w	r8, r1, #20
 801417e:	f100 0514 	add.w	r5, r0, #20
 8014182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014186:	9301      	str	r3, [sp, #4]
 8014188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801418c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014190:	3301      	adds	r3, #1
 8014192:	429a      	cmp	r2, r3
 8014194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801419c:	fbb2 f6f3 	udiv	r6, r2, r3
 80141a0:	d331      	bcc.n	8014206 <quorem+0x9e>
 80141a2:	f04f 0e00 	mov.w	lr, #0
 80141a6:	4640      	mov	r0, r8
 80141a8:	46ac      	mov	ip, r5
 80141aa:	46f2      	mov	sl, lr
 80141ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80141b0:	b293      	uxth	r3, r2
 80141b2:	fb06 e303 	mla	r3, r6, r3, lr
 80141b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	ebaa 0303 	sub.w	r3, sl, r3
 80141c0:	f8dc a000 	ldr.w	sl, [ip]
 80141c4:	0c12      	lsrs	r2, r2, #16
 80141c6:	fa13 f38a 	uxtah	r3, r3, sl
 80141ca:	fb06 e202 	mla	r2, r6, r2, lr
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	9b00      	ldr	r3, [sp, #0]
 80141d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80141d6:	b292      	uxth	r2, r2
 80141d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80141dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80141e4:	4581      	cmp	r9, r0
 80141e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141ea:	f84c 3b04 	str.w	r3, [ip], #4
 80141ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141f2:	d2db      	bcs.n	80141ac <quorem+0x44>
 80141f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80141f8:	b92b      	cbnz	r3, 8014206 <quorem+0x9e>
 80141fa:	9b01      	ldr	r3, [sp, #4]
 80141fc:	3b04      	subs	r3, #4
 80141fe:	429d      	cmp	r5, r3
 8014200:	461a      	mov	r2, r3
 8014202:	d32e      	bcc.n	8014262 <quorem+0xfa>
 8014204:	613c      	str	r4, [r7, #16]
 8014206:	4638      	mov	r0, r7
 8014208:	f001 fca2 	bl	8015b50 <__mcmp>
 801420c:	2800      	cmp	r0, #0
 801420e:	db24      	blt.n	801425a <quorem+0xf2>
 8014210:	3601      	adds	r6, #1
 8014212:	4628      	mov	r0, r5
 8014214:	f04f 0c00 	mov.w	ip, #0
 8014218:	f858 2b04 	ldr.w	r2, [r8], #4
 801421c:	f8d0 e000 	ldr.w	lr, [r0]
 8014220:	b293      	uxth	r3, r2
 8014222:	ebac 0303 	sub.w	r3, ip, r3
 8014226:	0c12      	lsrs	r2, r2, #16
 8014228:	fa13 f38e 	uxtah	r3, r3, lr
 801422c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014234:	b29b      	uxth	r3, r3
 8014236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801423a:	45c1      	cmp	r9, r8
 801423c:	f840 3b04 	str.w	r3, [r0], #4
 8014240:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014244:	d2e8      	bcs.n	8014218 <quorem+0xb0>
 8014246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801424a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801424e:	b922      	cbnz	r2, 801425a <quorem+0xf2>
 8014250:	3b04      	subs	r3, #4
 8014252:	429d      	cmp	r5, r3
 8014254:	461a      	mov	r2, r3
 8014256:	d30a      	bcc.n	801426e <quorem+0x106>
 8014258:	613c      	str	r4, [r7, #16]
 801425a:	4630      	mov	r0, r6
 801425c:	b003      	add	sp, #12
 801425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014262:	6812      	ldr	r2, [r2, #0]
 8014264:	3b04      	subs	r3, #4
 8014266:	2a00      	cmp	r2, #0
 8014268:	d1cc      	bne.n	8014204 <quorem+0x9c>
 801426a:	3c01      	subs	r4, #1
 801426c:	e7c7      	b.n	80141fe <quorem+0x96>
 801426e:	6812      	ldr	r2, [r2, #0]
 8014270:	3b04      	subs	r3, #4
 8014272:	2a00      	cmp	r2, #0
 8014274:	d1f0      	bne.n	8014258 <quorem+0xf0>
 8014276:	3c01      	subs	r4, #1
 8014278:	e7eb      	b.n	8014252 <quorem+0xea>
 801427a:	2000      	movs	r0, #0
 801427c:	e7ee      	b.n	801425c <quorem+0xf4>
	...

08014280 <_dtoa_r>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	ed2d 8b04 	vpush	{d8-d9}
 8014288:	ec57 6b10 	vmov	r6, r7, d0
 801428c:	b093      	sub	sp, #76	; 0x4c
 801428e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014290:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014294:	9106      	str	r1, [sp, #24]
 8014296:	ee10 aa10 	vmov	sl, s0
 801429a:	4604      	mov	r4, r0
 801429c:	9209      	str	r2, [sp, #36]	; 0x24
 801429e:	930c      	str	r3, [sp, #48]	; 0x30
 80142a0:	46bb      	mov	fp, r7
 80142a2:	b975      	cbnz	r5, 80142c2 <_dtoa_r+0x42>
 80142a4:	2010      	movs	r0, #16
 80142a6:	f001 f95f 	bl	8015568 <malloc>
 80142aa:	4602      	mov	r2, r0
 80142ac:	6260      	str	r0, [r4, #36]	; 0x24
 80142ae:	b920      	cbnz	r0, 80142ba <_dtoa_r+0x3a>
 80142b0:	4ba7      	ldr	r3, [pc, #668]	; (8014550 <_dtoa_r+0x2d0>)
 80142b2:	21ea      	movs	r1, #234	; 0xea
 80142b4:	48a7      	ldr	r0, [pc, #668]	; (8014554 <_dtoa_r+0x2d4>)
 80142b6:	f7ff ff39 	bl	801412c <__assert_func>
 80142ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142be:	6005      	str	r5, [r0, #0]
 80142c0:	60c5      	str	r5, [r0, #12]
 80142c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142c4:	6819      	ldr	r1, [r3, #0]
 80142c6:	b151      	cbz	r1, 80142de <_dtoa_r+0x5e>
 80142c8:	685a      	ldr	r2, [r3, #4]
 80142ca:	604a      	str	r2, [r1, #4]
 80142cc:	2301      	movs	r3, #1
 80142ce:	4093      	lsls	r3, r2
 80142d0:	608b      	str	r3, [r1, #8]
 80142d2:	4620      	mov	r0, r4
 80142d4:	f001 f9b0 	bl	8015638 <_Bfree>
 80142d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142da:	2200      	movs	r2, #0
 80142dc:	601a      	str	r2, [r3, #0]
 80142de:	1e3b      	subs	r3, r7, #0
 80142e0:	bfaa      	itet	ge
 80142e2:	2300      	movge	r3, #0
 80142e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80142e8:	f8c8 3000 	strge.w	r3, [r8]
 80142ec:	4b9a      	ldr	r3, [pc, #616]	; (8014558 <_dtoa_r+0x2d8>)
 80142ee:	bfbc      	itt	lt
 80142f0:	2201      	movlt	r2, #1
 80142f2:	f8c8 2000 	strlt.w	r2, [r8]
 80142f6:	ea33 030b 	bics.w	r3, r3, fp
 80142fa:	d11b      	bne.n	8014334 <_dtoa_r+0xb4>
 80142fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8014302:	6013      	str	r3, [r2, #0]
 8014304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014308:	4333      	orrs	r3, r6
 801430a:	f000 8592 	beq.w	8014e32 <_dtoa_r+0xbb2>
 801430e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014310:	b963      	cbnz	r3, 801432c <_dtoa_r+0xac>
 8014312:	4b92      	ldr	r3, [pc, #584]	; (801455c <_dtoa_r+0x2dc>)
 8014314:	e022      	b.n	801435c <_dtoa_r+0xdc>
 8014316:	4b92      	ldr	r3, [pc, #584]	; (8014560 <_dtoa_r+0x2e0>)
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	3308      	adds	r3, #8
 801431c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801431e:	6013      	str	r3, [r2, #0]
 8014320:	9801      	ldr	r0, [sp, #4]
 8014322:	b013      	add	sp, #76	; 0x4c
 8014324:	ecbd 8b04 	vpop	{d8-d9}
 8014328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432c:	4b8b      	ldr	r3, [pc, #556]	; (801455c <_dtoa_r+0x2dc>)
 801432e:	9301      	str	r3, [sp, #4]
 8014330:	3303      	adds	r3, #3
 8014332:	e7f3      	b.n	801431c <_dtoa_r+0x9c>
 8014334:	2200      	movs	r2, #0
 8014336:	2300      	movs	r3, #0
 8014338:	4650      	mov	r0, sl
 801433a:	4659      	mov	r1, fp
 801433c:	f7ec fbdc 	bl	8000af8 <__aeabi_dcmpeq>
 8014340:	ec4b ab19 	vmov	d9, sl, fp
 8014344:	4680      	mov	r8, r0
 8014346:	b158      	cbz	r0, 8014360 <_dtoa_r+0xe0>
 8014348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801434a:	2301      	movs	r3, #1
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014350:	2b00      	cmp	r3, #0
 8014352:	f000 856b 	beq.w	8014e2c <_dtoa_r+0xbac>
 8014356:	4883      	ldr	r0, [pc, #524]	; (8014564 <_dtoa_r+0x2e4>)
 8014358:	6018      	str	r0, [r3, #0]
 801435a:	1e43      	subs	r3, r0, #1
 801435c:	9301      	str	r3, [sp, #4]
 801435e:	e7df      	b.n	8014320 <_dtoa_r+0xa0>
 8014360:	ec4b ab10 	vmov	d0, sl, fp
 8014364:	aa10      	add	r2, sp, #64	; 0x40
 8014366:	a911      	add	r1, sp, #68	; 0x44
 8014368:	4620      	mov	r0, r4
 801436a:	f001 fd13 	bl	8015d94 <__d2b>
 801436e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014372:	ee08 0a10 	vmov	s16, r0
 8014376:	2d00      	cmp	r5, #0
 8014378:	f000 8084 	beq.w	8014484 <_dtoa_r+0x204>
 801437c:	ee19 3a90 	vmov	r3, s19
 8014380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014384:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014388:	4656      	mov	r6, sl
 801438a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801438e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014392:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014396:	4b74      	ldr	r3, [pc, #464]	; (8014568 <_dtoa_r+0x2e8>)
 8014398:	2200      	movs	r2, #0
 801439a:	4630      	mov	r0, r6
 801439c:	4639      	mov	r1, r7
 801439e:	f7eb ff8b 	bl	80002b8 <__aeabi_dsub>
 80143a2:	a365      	add	r3, pc, #404	; (adr r3, 8014538 <_dtoa_r+0x2b8>)
 80143a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a8:	f7ec f93e 	bl	8000628 <__aeabi_dmul>
 80143ac:	a364      	add	r3, pc, #400	; (adr r3, 8014540 <_dtoa_r+0x2c0>)
 80143ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b2:	f7eb ff83 	bl	80002bc <__adddf3>
 80143b6:	4606      	mov	r6, r0
 80143b8:	4628      	mov	r0, r5
 80143ba:	460f      	mov	r7, r1
 80143bc:	f7ec f8ca 	bl	8000554 <__aeabi_i2d>
 80143c0:	a361      	add	r3, pc, #388	; (adr r3, 8014548 <_dtoa_r+0x2c8>)
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	f7ec f92f 	bl	8000628 <__aeabi_dmul>
 80143ca:	4602      	mov	r2, r0
 80143cc:	460b      	mov	r3, r1
 80143ce:	4630      	mov	r0, r6
 80143d0:	4639      	mov	r1, r7
 80143d2:	f7eb ff73 	bl	80002bc <__adddf3>
 80143d6:	4606      	mov	r6, r0
 80143d8:	460f      	mov	r7, r1
 80143da:	f7ec fbd5 	bl	8000b88 <__aeabi_d2iz>
 80143de:	2200      	movs	r2, #0
 80143e0:	9000      	str	r0, [sp, #0]
 80143e2:	2300      	movs	r3, #0
 80143e4:	4630      	mov	r0, r6
 80143e6:	4639      	mov	r1, r7
 80143e8:	f7ec fb90 	bl	8000b0c <__aeabi_dcmplt>
 80143ec:	b150      	cbz	r0, 8014404 <_dtoa_r+0x184>
 80143ee:	9800      	ldr	r0, [sp, #0]
 80143f0:	f7ec f8b0 	bl	8000554 <__aeabi_i2d>
 80143f4:	4632      	mov	r2, r6
 80143f6:	463b      	mov	r3, r7
 80143f8:	f7ec fb7e 	bl	8000af8 <__aeabi_dcmpeq>
 80143fc:	b910      	cbnz	r0, 8014404 <_dtoa_r+0x184>
 80143fe:	9b00      	ldr	r3, [sp, #0]
 8014400:	3b01      	subs	r3, #1
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	9b00      	ldr	r3, [sp, #0]
 8014406:	2b16      	cmp	r3, #22
 8014408:	d85a      	bhi.n	80144c0 <_dtoa_r+0x240>
 801440a:	9a00      	ldr	r2, [sp, #0]
 801440c:	4b57      	ldr	r3, [pc, #348]	; (801456c <_dtoa_r+0x2ec>)
 801440e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	ec51 0b19 	vmov	r0, r1, d9
 801441a:	f7ec fb77 	bl	8000b0c <__aeabi_dcmplt>
 801441e:	2800      	cmp	r0, #0
 8014420:	d050      	beq.n	80144c4 <_dtoa_r+0x244>
 8014422:	9b00      	ldr	r3, [sp, #0]
 8014424:	3b01      	subs	r3, #1
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	2300      	movs	r3, #0
 801442a:	930b      	str	r3, [sp, #44]	; 0x2c
 801442c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801442e:	1b5d      	subs	r5, r3, r5
 8014430:	1e6b      	subs	r3, r5, #1
 8014432:	9305      	str	r3, [sp, #20]
 8014434:	bf45      	ittet	mi
 8014436:	f1c5 0301 	rsbmi	r3, r5, #1
 801443a:	9304      	strmi	r3, [sp, #16]
 801443c:	2300      	movpl	r3, #0
 801443e:	2300      	movmi	r3, #0
 8014440:	bf4c      	ite	mi
 8014442:	9305      	strmi	r3, [sp, #20]
 8014444:	9304      	strpl	r3, [sp, #16]
 8014446:	9b00      	ldr	r3, [sp, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	db3d      	blt.n	80144c8 <_dtoa_r+0x248>
 801444c:	9b05      	ldr	r3, [sp, #20]
 801444e:	9a00      	ldr	r2, [sp, #0]
 8014450:	920a      	str	r2, [sp, #40]	; 0x28
 8014452:	4413      	add	r3, r2
 8014454:	9305      	str	r3, [sp, #20]
 8014456:	2300      	movs	r3, #0
 8014458:	9307      	str	r3, [sp, #28]
 801445a:	9b06      	ldr	r3, [sp, #24]
 801445c:	2b09      	cmp	r3, #9
 801445e:	f200 8089 	bhi.w	8014574 <_dtoa_r+0x2f4>
 8014462:	2b05      	cmp	r3, #5
 8014464:	bfc4      	itt	gt
 8014466:	3b04      	subgt	r3, #4
 8014468:	9306      	strgt	r3, [sp, #24]
 801446a:	9b06      	ldr	r3, [sp, #24]
 801446c:	f1a3 0302 	sub.w	r3, r3, #2
 8014470:	bfcc      	ite	gt
 8014472:	2500      	movgt	r5, #0
 8014474:	2501      	movle	r5, #1
 8014476:	2b03      	cmp	r3, #3
 8014478:	f200 8087 	bhi.w	801458a <_dtoa_r+0x30a>
 801447c:	e8df f003 	tbb	[pc, r3]
 8014480:	59383a2d 	.word	0x59383a2d
 8014484:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014488:	441d      	add	r5, r3
 801448a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801448e:	2b20      	cmp	r3, #32
 8014490:	bfc1      	itttt	gt
 8014492:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014496:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801449a:	fa0b f303 	lslgt.w	r3, fp, r3
 801449e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80144a2:	bfda      	itte	le
 80144a4:	f1c3 0320 	rsble	r3, r3, #32
 80144a8:	fa06 f003 	lslle.w	r0, r6, r3
 80144ac:	4318      	orrgt	r0, r3
 80144ae:	f7ec f841 	bl	8000534 <__aeabi_ui2d>
 80144b2:	2301      	movs	r3, #1
 80144b4:	4606      	mov	r6, r0
 80144b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80144ba:	3d01      	subs	r5, #1
 80144bc:	930e      	str	r3, [sp, #56]	; 0x38
 80144be:	e76a      	b.n	8014396 <_dtoa_r+0x116>
 80144c0:	2301      	movs	r3, #1
 80144c2:	e7b2      	b.n	801442a <_dtoa_r+0x1aa>
 80144c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80144c6:	e7b1      	b.n	801442c <_dtoa_r+0x1ac>
 80144c8:	9b04      	ldr	r3, [sp, #16]
 80144ca:	9a00      	ldr	r2, [sp, #0]
 80144cc:	1a9b      	subs	r3, r3, r2
 80144ce:	9304      	str	r3, [sp, #16]
 80144d0:	4253      	negs	r3, r2
 80144d2:	9307      	str	r3, [sp, #28]
 80144d4:	2300      	movs	r3, #0
 80144d6:	930a      	str	r3, [sp, #40]	; 0x28
 80144d8:	e7bf      	b.n	801445a <_dtoa_r+0x1da>
 80144da:	2300      	movs	r3, #0
 80144dc:	9308      	str	r3, [sp, #32]
 80144de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	dc55      	bgt.n	8014590 <_dtoa_r+0x310>
 80144e4:	2301      	movs	r3, #1
 80144e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80144ea:	461a      	mov	r2, r3
 80144ec:	9209      	str	r2, [sp, #36]	; 0x24
 80144ee:	e00c      	b.n	801450a <_dtoa_r+0x28a>
 80144f0:	2301      	movs	r3, #1
 80144f2:	e7f3      	b.n	80144dc <_dtoa_r+0x25c>
 80144f4:	2300      	movs	r3, #0
 80144f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144f8:	9308      	str	r3, [sp, #32]
 80144fa:	9b00      	ldr	r3, [sp, #0]
 80144fc:	4413      	add	r3, r2
 80144fe:	9302      	str	r3, [sp, #8]
 8014500:	3301      	adds	r3, #1
 8014502:	2b01      	cmp	r3, #1
 8014504:	9303      	str	r3, [sp, #12]
 8014506:	bfb8      	it	lt
 8014508:	2301      	movlt	r3, #1
 801450a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801450c:	2200      	movs	r2, #0
 801450e:	6042      	str	r2, [r0, #4]
 8014510:	2204      	movs	r2, #4
 8014512:	f102 0614 	add.w	r6, r2, #20
 8014516:	429e      	cmp	r6, r3
 8014518:	6841      	ldr	r1, [r0, #4]
 801451a:	d93d      	bls.n	8014598 <_dtoa_r+0x318>
 801451c:	4620      	mov	r0, r4
 801451e:	f001 f84b 	bl	80155b8 <_Balloc>
 8014522:	9001      	str	r0, [sp, #4]
 8014524:	2800      	cmp	r0, #0
 8014526:	d13b      	bne.n	80145a0 <_dtoa_r+0x320>
 8014528:	4b11      	ldr	r3, [pc, #68]	; (8014570 <_dtoa_r+0x2f0>)
 801452a:	4602      	mov	r2, r0
 801452c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014530:	e6c0      	b.n	80142b4 <_dtoa_r+0x34>
 8014532:	2301      	movs	r3, #1
 8014534:	e7df      	b.n	80144f6 <_dtoa_r+0x276>
 8014536:	bf00      	nop
 8014538:	636f4361 	.word	0x636f4361
 801453c:	3fd287a7 	.word	0x3fd287a7
 8014540:	8b60c8b3 	.word	0x8b60c8b3
 8014544:	3fc68a28 	.word	0x3fc68a28
 8014548:	509f79fb 	.word	0x509f79fb
 801454c:	3fd34413 	.word	0x3fd34413
 8014550:	0802ac50 	.word	0x0802ac50
 8014554:	0802ae0e 	.word	0x0802ae0e
 8014558:	7ff00000 	.word	0x7ff00000
 801455c:	0802ae0a 	.word	0x0802ae0a
 8014560:	0802ae01 	.word	0x0802ae01
 8014564:	0802abd5 	.word	0x0802abd5
 8014568:	3ff80000 	.word	0x3ff80000
 801456c:	0802af78 	.word	0x0802af78
 8014570:	0802ae69 	.word	0x0802ae69
 8014574:	2501      	movs	r5, #1
 8014576:	2300      	movs	r3, #0
 8014578:	9306      	str	r3, [sp, #24]
 801457a:	9508      	str	r5, [sp, #32]
 801457c:	f04f 33ff 	mov.w	r3, #4294967295
 8014580:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014584:	2200      	movs	r2, #0
 8014586:	2312      	movs	r3, #18
 8014588:	e7b0      	b.n	80144ec <_dtoa_r+0x26c>
 801458a:	2301      	movs	r3, #1
 801458c:	9308      	str	r3, [sp, #32]
 801458e:	e7f5      	b.n	801457c <_dtoa_r+0x2fc>
 8014590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014592:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014596:	e7b8      	b.n	801450a <_dtoa_r+0x28a>
 8014598:	3101      	adds	r1, #1
 801459a:	6041      	str	r1, [r0, #4]
 801459c:	0052      	lsls	r2, r2, #1
 801459e:	e7b8      	b.n	8014512 <_dtoa_r+0x292>
 80145a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145a2:	9a01      	ldr	r2, [sp, #4]
 80145a4:	601a      	str	r2, [r3, #0]
 80145a6:	9b03      	ldr	r3, [sp, #12]
 80145a8:	2b0e      	cmp	r3, #14
 80145aa:	f200 809d 	bhi.w	80146e8 <_dtoa_r+0x468>
 80145ae:	2d00      	cmp	r5, #0
 80145b0:	f000 809a 	beq.w	80146e8 <_dtoa_r+0x468>
 80145b4:	9b00      	ldr	r3, [sp, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	dd32      	ble.n	8014620 <_dtoa_r+0x3a0>
 80145ba:	4ab7      	ldr	r2, [pc, #732]	; (8014898 <_dtoa_r+0x618>)
 80145bc:	f003 030f 	and.w	r3, r3, #15
 80145c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80145c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145c8:	9b00      	ldr	r3, [sp, #0]
 80145ca:	05d8      	lsls	r0, r3, #23
 80145cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80145d0:	d516      	bpl.n	8014600 <_dtoa_r+0x380>
 80145d2:	4bb2      	ldr	r3, [pc, #712]	; (801489c <_dtoa_r+0x61c>)
 80145d4:	ec51 0b19 	vmov	r0, r1, d9
 80145d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145dc:	f7ec f94e 	bl	800087c <__aeabi_ddiv>
 80145e0:	f007 070f 	and.w	r7, r7, #15
 80145e4:	4682      	mov	sl, r0
 80145e6:	468b      	mov	fp, r1
 80145e8:	2503      	movs	r5, #3
 80145ea:	4eac      	ldr	r6, [pc, #688]	; (801489c <_dtoa_r+0x61c>)
 80145ec:	b957      	cbnz	r7, 8014604 <_dtoa_r+0x384>
 80145ee:	4642      	mov	r2, r8
 80145f0:	464b      	mov	r3, r9
 80145f2:	4650      	mov	r0, sl
 80145f4:	4659      	mov	r1, fp
 80145f6:	f7ec f941 	bl	800087c <__aeabi_ddiv>
 80145fa:	4682      	mov	sl, r0
 80145fc:	468b      	mov	fp, r1
 80145fe:	e028      	b.n	8014652 <_dtoa_r+0x3d2>
 8014600:	2502      	movs	r5, #2
 8014602:	e7f2      	b.n	80145ea <_dtoa_r+0x36a>
 8014604:	07f9      	lsls	r1, r7, #31
 8014606:	d508      	bpl.n	801461a <_dtoa_r+0x39a>
 8014608:	4640      	mov	r0, r8
 801460a:	4649      	mov	r1, r9
 801460c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014610:	f7ec f80a 	bl	8000628 <__aeabi_dmul>
 8014614:	3501      	adds	r5, #1
 8014616:	4680      	mov	r8, r0
 8014618:	4689      	mov	r9, r1
 801461a:	107f      	asrs	r7, r7, #1
 801461c:	3608      	adds	r6, #8
 801461e:	e7e5      	b.n	80145ec <_dtoa_r+0x36c>
 8014620:	f000 809b 	beq.w	801475a <_dtoa_r+0x4da>
 8014624:	9b00      	ldr	r3, [sp, #0]
 8014626:	4f9d      	ldr	r7, [pc, #628]	; (801489c <_dtoa_r+0x61c>)
 8014628:	425e      	negs	r6, r3
 801462a:	4b9b      	ldr	r3, [pc, #620]	; (8014898 <_dtoa_r+0x618>)
 801462c:	f006 020f 	and.w	r2, r6, #15
 8014630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014638:	ec51 0b19 	vmov	r0, r1, d9
 801463c:	f7eb fff4 	bl	8000628 <__aeabi_dmul>
 8014640:	1136      	asrs	r6, r6, #4
 8014642:	4682      	mov	sl, r0
 8014644:	468b      	mov	fp, r1
 8014646:	2300      	movs	r3, #0
 8014648:	2502      	movs	r5, #2
 801464a:	2e00      	cmp	r6, #0
 801464c:	d17a      	bne.n	8014744 <_dtoa_r+0x4c4>
 801464e:	2b00      	cmp	r3, #0
 8014650:	d1d3      	bne.n	80145fa <_dtoa_r+0x37a>
 8014652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014654:	2b00      	cmp	r3, #0
 8014656:	f000 8082 	beq.w	801475e <_dtoa_r+0x4de>
 801465a:	4b91      	ldr	r3, [pc, #580]	; (80148a0 <_dtoa_r+0x620>)
 801465c:	2200      	movs	r2, #0
 801465e:	4650      	mov	r0, sl
 8014660:	4659      	mov	r1, fp
 8014662:	f7ec fa53 	bl	8000b0c <__aeabi_dcmplt>
 8014666:	2800      	cmp	r0, #0
 8014668:	d079      	beq.n	801475e <_dtoa_r+0x4de>
 801466a:	9b03      	ldr	r3, [sp, #12]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d076      	beq.n	801475e <_dtoa_r+0x4de>
 8014670:	9b02      	ldr	r3, [sp, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	dd36      	ble.n	80146e4 <_dtoa_r+0x464>
 8014676:	9b00      	ldr	r3, [sp, #0]
 8014678:	4650      	mov	r0, sl
 801467a:	4659      	mov	r1, fp
 801467c:	1e5f      	subs	r7, r3, #1
 801467e:	2200      	movs	r2, #0
 8014680:	4b88      	ldr	r3, [pc, #544]	; (80148a4 <_dtoa_r+0x624>)
 8014682:	f7eb ffd1 	bl	8000628 <__aeabi_dmul>
 8014686:	9e02      	ldr	r6, [sp, #8]
 8014688:	4682      	mov	sl, r0
 801468a:	468b      	mov	fp, r1
 801468c:	3501      	adds	r5, #1
 801468e:	4628      	mov	r0, r5
 8014690:	f7eb ff60 	bl	8000554 <__aeabi_i2d>
 8014694:	4652      	mov	r2, sl
 8014696:	465b      	mov	r3, fp
 8014698:	f7eb ffc6 	bl	8000628 <__aeabi_dmul>
 801469c:	4b82      	ldr	r3, [pc, #520]	; (80148a8 <_dtoa_r+0x628>)
 801469e:	2200      	movs	r2, #0
 80146a0:	f7eb fe0c 	bl	80002bc <__adddf3>
 80146a4:	46d0      	mov	r8, sl
 80146a6:	46d9      	mov	r9, fp
 80146a8:	4682      	mov	sl, r0
 80146aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80146ae:	2e00      	cmp	r6, #0
 80146b0:	d158      	bne.n	8014764 <_dtoa_r+0x4e4>
 80146b2:	4b7e      	ldr	r3, [pc, #504]	; (80148ac <_dtoa_r+0x62c>)
 80146b4:	2200      	movs	r2, #0
 80146b6:	4640      	mov	r0, r8
 80146b8:	4649      	mov	r1, r9
 80146ba:	f7eb fdfd 	bl	80002b8 <__aeabi_dsub>
 80146be:	4652      	mov	r2, sl
 80146c0:	465b      	mov	r3, fp
 80146c2:	4680      	mov	r8, r0
 80146c4:	4689      	mov	r9, r1
 80146c6:	f7ec fa3f 	bl	8000b48 <__aeabi_dcmpgt>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	f040 8295 	bne.w	8014bfa <_dtoa_r+0x97a>
 80146d0:	4652      	mov	r2, sl
 80146d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80146d6:	4640      	mov	r0, r8
 80146d8:	4649      	mov	r1, r9
 80146da:	f7ec fa17 	bl	8000b0c <__aeabi_dcmplt>
 80146de:	2800      	cmp	r0, #0
 80146e0:	f040 8289 	bne.w	8014bf6 <_dtoa_r+0x976>
 80146e4:	ec5b ab19 	vmov	sl, fp, d9
 80146e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f2c0 8148 	blt.w	8014980 <_dtoa_r+0x700>
 80146f0:	9a00      	ldr	r2, [sp, #0]
 80146f2:	2a0e      	cmp	r2, #14
 80146f4:	f300 8144 	bgt.w	8014980 <_dtoa_r+0x700>
 80146f8:	4b67      	ldr	r3, [pc, #412]	; (8014898 <_dtoa_r+0x618>)
 80146fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014704:	2b00      	cmp	r3, #0
 8014706:	f280 80d5 	bge.w	80148b4 <_dtoa_r+0x634>
 801470a:	9b03      	ldr	r3, [sp, #12]
 801470c:	2b00      	cmp	r3, #0
 801470e:	f300 80d1 	bgt.w	80148b4 <_dtoa_r+0x634>
 8014712:	f040 826f 	bne.w	8014bf4 <_dtoa_r+0x974>
 8014716:	4b65      	ldr	r3, [pc, #404]	; (80148ac <_dtoa_r+0x62c>)
 8014718:	2200      	movs	r2, #0
 801471a:	4640      	mov	r0, r8
 801471c:	4649      	mov	r1, r9
 801471e:	f7eb ff83 	bl	8000628 <__aeabi_dmul>
 8014722:	4652      	mov	r2, sl
 8014724:	465b      	mov	r3, fp
 8014726:	f7ec fa05 	bl	8000b34 <__aeabi_dcmpge>
 801472a:	9e03      	ldr	r6, [sp, #12]
 801472c:	4637      	mov	r7, r6
 801472e:	2800      	cmp	r0, #0
 8014730:	f040 8245 	bne.w	8014bbe <_dtoa_r+0x93e>
 8014734:	9d01      	ldr	r5, [sp, #4]
 8014736:	2331      	movs	r3, #49	; 0x31
 8014738:	f805 3b01 	strb.w	r3, [r5], #1
 801473c:	9b00      	ldr	r3, [sp, #0]
 801473e:	3301      	adds	r3, #1
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	e240      	b.n	8014bc6 <_dtoa_r+0x946>
 8014744:	07f2      	lsls	r2, r6, #31
 8014746:	d505      	bpl.n	8014754 <_dtoa_r+0x4d4>
 8014748:	e9d7 2300 	ldrd	r2, r3, [r7]
 801474c:	f7eb ff6c 	bl	8000628 <__aeabi_dmul>
 8014750:	3501      	adds	r5, #1
 8014752:	2301      	movs	r3, #1
 8014754:	1076      	asrs	r6, r6, #1
 8014756:	3708      	adds	r7, #8
 8014758:	e777      	b.n	801464a <_dtoa_r+0x3ca>
 801475a:	2502      	movs	r5, #2
 801475c:	e779      	b.n	8014652 <_dtoa_r+0x3d2>
 801475e:	9f00      	ldr	r7, [sp, #0]
 8014760:	9e03      	ldr	r6, [sp, #12]
 8014762:	e794      	b.n	801468e <_dtoa_r+0x40e>
 8014764:	9901      	ldr	r1, [sp, #4]
 8014766:	4b4c      	ldr	r3, [pc, #304]	; (8014898 <_dtoa_r+0x618>)
 8014768:	4431      	add	r1, r6
 801476a:	910d      	str	r1, [sp, #52]	; 0x34
 801476c:	9908      	ldr	r1, [sp, #32]
 801476e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014776:	2900      	cmp	r1, #0
 8014778:	d043      	beq.n	8014802 <_dtoa_r+0x582>
 801477a:	494d      	ldr	r1, [pc, #308]	; (80148b0 <_dtoa_r+0x630>)
 801477c:	2000      	movs	r0, #0
 801477e:	f7ec f87d 	bl	800087c <__aeabi_ddiv>
 8014782:	4652      	mov	r2, sl
 8014784:	465b      	mov	r3, fp
 8014786:	f7eb fd97 	bl	80002b8 <__aeabi_dsub>
 801478a:	9d01      	ldr	r5, [sp, #4]
 801478c:	4682      	mov	sl, r0
 801478e:	468b      	mov	fp, r1
 8014790:	4649      	mov	r1, r9
 8014792:	4640      	mov	r0, r8
 8014794:	f7ec f9f8 	bl	8000b88 <__aeabi_d2iz>
 8014798:	4606      	mov	r6, r0
 801479a:	f7eb fedb 	bl	8000554 <__aeabi_i2d>
 801479e:	4602      	mov	r2, r0
 80147a0:	460b      	mov	r3, r1
 80147a2:	4640      	mov	r0, r8
 80147a4:	4649      	mov	r1, r9
 80147a6:	f7eb fd87 	bl	80002b8 <__aeabi_dsub>
 80147aa:	3630      	adds	r6, #48	; 0x30
 80147ac:	f805 6b01 	strb.w	r6, [r5], #1
 80147b0:	4652      	mov	r2, sl
 80147b2:	465b      	mov	r3, fp
 80147b4:	4680      	mov	r8, r0
 80147b6:	4689      	mov	r9, r1
 80147b8:	f7ec f9a8 	bl	8000b0c <__aeabi_dcmplt>
 80147bc:	2800      	cmp	r0, #0
 80147be:	d163      	bne.n	8014888 <_dtoa_r+0x608>
 80147c0:	4642      	mov	r2, r8
 80147c2:	464b      	mov	r3, r9
 80147c4:	4936      	ldr	r1, [pc, #216]	; (80148a0 <_dtoa_r+0x620>)
 80147c6:	2000      	movs	r0, #0
 80147c8:	f7eb fd76 	bl	80002b8 <__aeabi_dsub>
 80147cc:	4652      	mov	r2, sl
 80147ce:	465b      	mov	r3, fp
 80147d0:	f7ec f99c 	bl	8000b0c <__aeabi_dcmplt>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	f040 80b5 	bne.w	8014944 <_dtoa_r+0x6c4>
 80147da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147dc:	429d      	cmp	r5, r3
 80147de:	d081      	beq.n	80146e4 <_dtoa_r+0x464>
 80147e0:	4b30      	ldr	r3, [pc, #192]	; (80148a4 <_dtoa_r+0x624>)
 80147e2:	2200      	movs	r2, #0
 80147e4:	4650      	mov	r0, sl
 80147e6:	4659      	mov	r1, fp
 80147e8:	f7eb ff1e 	bl	8000628 <__aeabi_dmul>
 80147ec:	4b2d      	ldr	r3, [pc, #180]	; (80148a4 <_dtoa_r+0x624>)
 80147ee:	4682      	mov	sl, r0
 80147f0:	468b      	mov	fp, r1
 80147f2:	4640      	mov	r0, r8
 80147f4:	4649      	mov	r1, r9
 80147f6:	2200      	movs	r2, #0
 80147f8:	f7eb ff16 	bl	8000628 <__aeabi_dmul>
 80147fc:	4680      	mov	r8, r0
 80147fe:	4689      	mov	r9, r1
 8014800:	e7c6      	b.n	8014790 <_dtoa_r+0x510>
 8014802:	4650      	mov	r0, sl
 8014804:	4659      	mov	r1, fp
 8014806:	f7eb ff0f 	bl	8000628 <__aeabi_dmul>
 801480a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801480c:	9d01      	ldr	r5, [sp, #4]
 801480e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014810:	4682      	mov	sl, r0
 8014812:	468b      	mov	fp, r1
 8014814:	4649      	mov	r1, r9
 8014816:	4640      	mov	r0, r8
 8014818:	f7ec f9b6 	bl	8000b88 <__aeabi_d2iz>
 801481c:	4606      	mov	r6, r0
 801481e:	f7eb fe99 	bl	8000554 <__aeabi_i2d>
 8014822:	3630      	adds	r6, #48	; 0x30
 8014824:	4602      	mov	r2, r0
 8014826:	460b      	mov	r3, r1
 8014828:	4640      	mov	r0, r8
 801482a:	4649      	mov	r1, r9
 801482c:	f7eb fd44 	bl	80002b8 <__aeabi_dsub>
 8014830:	f805 6b01 	strb.w	r6, [r5], #1
 8014834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014836:	429d      	cmp	r5, r3
 8014838:	4680      	mov	r8, r0
 801483a:	4689      	mov	r9, r1
 801483c:	f04f 0200 	mov.w	r2, #0
 8014840:	d124      	bne.n	801488c <_dtoa_r+0x60c>
 8014842:	4b1b      	ldr	r3, [pc, #108]	; (80148b0 <_dtoa_r+0x630>)
 8014844:	4650      	mov	r0, sl
 8014846:	4659      	mov	r1, fp
 8014848:	f7eb fd38 	bl	80002bc <__adddf3>
 801484c:	4602      	mov	r2, r0
 801484e:	460b      	mov	r3, r1
 8014850:	4640      	mov	r0, r8
 8014852:	4649      	mov	r1, r9
 8014854:	f7ec f978 	bl	8000b48 <__aeabi_dcmpgt>
 8014858:	2800      	cmp	r0, #0
 801485a:	d173      	bne.n	8014944 <_dtoa_r+0x6c4>
 801485c:	4652      	mov	r2, sl
 801485e:	465b      	mov	r3, fp
 8014860:	4913      	ldr	r1, [pc, #76]	; (80148b0 <_dtoa_r+0x630>)
 8014862:	2000      	movs	r0, #0
 8014864:	f7eb fd28 	bl	80002b8 <__aeabi_dsub>
 8014868:	4602      	mov	r2, r0
 801486a:	460b      	mov	r3, r1
 801486c:	4640      	mov	r0, r8
 801486e:	4649      	mov	r1, r9
 8014870:	f7ec f94c 	bl	8000b0c <__aeabi_dcmplt>
 8014874:	2800      	cmp	r0, #0
 8014876:	f43f af35 	beq.w	80146e4 <_dtoa_r+0x464>
 801487a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801487c:	1e6b      	subs	r3, r5, #1
 801487e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014880:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014884:	2b30      	cmp	r3, #48	; 0x30
 8014886:	d0f8      	beq.n	801487a <_dtoa_r+0x5fa>
 8014888:	9700      	str	r7, [sp, #0]
 801488a:	e049      	b.n	8014920 <_dtoa_r+0x6a0>
 801488c:	4b05      	ldr	r3, [pc, #20]	; (80148a4 <_dtoa_r+0x624>)
 801488e:	f7eb fecb 	bl	8000628 <__aeabi_dmul>
 8014892:	4680      	mov	r8, r0
 8014894:	4689      	mov	r9, r1
 8014896:	e7bd      	b.n	8014814 <_dtoa_r+0x594>
 8014898:	0802af78 	.word	0x0802af78
 801489c:	0802af50 	.word	0x0802af50
 80148a0:	3ff00000 	.word	0x3ff00000
 80148a4:	40240000 	.word	0x40240000
 80148a8:	401c0000 	.word	0x401c0000
 80148ac:	40140000 	.word	0x40140000
 80148b0:	3fe00000 	.word	0x3fe00000
 80148b4:	9d01      	ldr	r5, [sp, #4]
 80148b6:	4656      	mov	r6, sl
 80148b8:	465f      	mov	r7, fp
 80148ba:	4642      	mov	r2, r8
 80148bc:	464b      	mov	r3, r9
 80148be:	4630      	mov	r0, r6
 80148c0:	4639      	mov	r1, r7
 80148c2:	f7eb ffdb 	bl	800087c <__aeabi_ddiv>
 80148c6:	f7ec f95f 	bl	8000b88 <__aeabi_d2iz>
 80148ca:	4682      	mov	sl, r0
 80148cc:	f7eb fe42 	bl	8000554 <__aeabi_i2d>
 80148d0:	4642      	mov	r2, r8
 80148d2:	464b      	mov	r3, r9
 80148d4:	f7eb fea8 	bl	8000628 <__aeabi_dmul>
 80148d8:	4602      	mov	r2, r0
 80148da:	460b      	mov	r3, r1
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80148e4:	f7eb fce8 	bl	80002b8 <__aeabi_dsub>
 80148e8:	f805 6b01 	strb.w	r6, [r5], #1
 80148ec:	9e01      	ldr	r6, [sp, #4]
 80148ee:	9f03      	ldr	r7, [sp, #12]
 80148f0:	1bae      	subs	r6, r5, r6
 80148f2:	42b7      	cmp	r7, r6
 80148f4:	4602      	mov	r2, r0
 80148f6:	460b      	mov	r3, r1
 80148f8:	d135      	bne.n	8014966 <_dtoa_r+0x6e6>
 80148fa:	f7eb fcdf 	bl	80002bc <__adddf3>
 80148fe:	4642      	mov	r2, r8
 8014900:	464b      	mov	r3, r9
 8014902:	4606      	mov	r6, r0
 8014904:	460f      	mov	r7, r1
 8014906:	f7ec f91f 	bl	8000b48 <__aeabi_dcmpgt>
 801490a:	b9d0      	cbnz	r0, 8014942 <_dtoa_r+0x6c2>
 801490c:	4642      	mov	r2, r8
 801490e:	464b      	mov	r3, r9
 8014910:	4630      	mov	r0, r6
 8014912:	4639      	mov	r1, r7
 8014914:	f7ec f8f0 	bl	8000af8 <__aeabi_dcmpeq>
 8014918:	b110      	cbz	r0, 8014920 <_dtoa_r+0x6a0>
 801491a:	f01a 0f01 	tst.w	sl, #1
 801491e:	d110      	bne.n	8014942 <_dtoa_r+0x6c2>
 8014920:	4620      	mov	r0, r4
 8014922:	ee18 1a10 	vmov	r1, s16
 8014926:	f000 fe87 	bl	8015638 <_Bfree>
 801492a:	2300      	movs	r3, #0
 801492c:	9800      	ldr	r0, [sp, #0]
 801492e:	702b      	strb	r3, [r5, #0]
 8014930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014932:	3001      	adds	r0, #1
 8014934:	6018      	str	r0, [r3, #0]
 8014936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014938:	2b00      	cmp	r3, #0
 801493a:	f43f acf1 	beq.w	8014320 <_dtoa_r+0xa0>
 801493e:	601d      	str	r5, [r3, #0]
 8014940:	e4ee      	b.n	8014320 <_dtoa_r+0xa0>
 8014942:	9f00      	ldr	r7, [sp, #0]
 8014944:	462b      	mov	r3, r5
 8014946:	461d      	mov	r5, r3
 8014948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801494c:	2a39      	cmp	r2, #57	; 0x39
 801494e:	d106      	bne.n	801495e <_dtoa_r+0x6de>
 8014950:	9a01      	ldr	r2, [sp, #4]
 8014952:	429a      	cmp	r2, r3
 8014954:	d1f7      	bne.n	8014946 <_dtoa_r+0x6c6>
 8014956:	9901      	ldr	r1, [sp, #4]
 8014958:	2230      	movs	r2, #48	; 0x30
 801495a:	3701      	adds	r7, #1
 801495c:	700a      	strb	r2, [r1, #0]
 801495e:	781a      	ldrb	r2, [r3, #0]
 8014960:	3201      	adds	r2, #1
 8014962:	701a      	strb	r2, [r3, #0]
 8014964:	e790      	b.n	8014888 <_dtoa_r+0x608>
 8014966:	4ba6      	ldr	r3, [pc, #664]	; (8014c00 <_dtoa_r+0x980>)
 8014968:	2200      	movs	r2, #0
 801496a:	f7eb fe5d 	bl	8000628 <__aeabi_dmul>
 801496e:	2200      	movs	r2, #0
 8014970:	2300      	movs	r3, #0
 8014972:	4606      	mov	r6, r0
 8014974:	460f      	mov	r7, r1
 8014976:	f7ec f8bf 	bl	8000af8 <__aeabi_dcmpeq>
 801497a:	2800      	cmp	r0, #0
 801497c:	d09d      	beq.n	80148ba <_dtoa_r+0x63a>
 801497e:	e7cf      	b.n	8014920 <_dtoa_r+0x6a0>
 8014980:	9a08      	ldr	r2, [sp, #32]
 8014982:	2a00      	cmp	r2, #0
 8014984:	f000 80d7 	beq.w	8014b36 <_dtoa_r+0x8b6>
 8014988:	9a06      	ldr	r2, [sp, #24]
 801498a:	2a01      	cmp	r2, #1
 801498c:	f300 80ba 	bgt.w	8014b04 <_dtoa_r+0x884>
 8014990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014992:	2a00      	cmp	r2, #0
 8014994:	f000 80b2 	beq.w	8014afc <_dtoa_r+0x87c>
 8014998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801499c:	9e07      	ldr	r6, [sp, #28]
 801499e:	9d04      	ldr	r5, [sp, #16]
 80149a0:	9a04      	ldr	r2, [sp, #16]
 80149a2:	441a      	add	r2, r3
 80149a4:	9204      	str	r2, [sp, #16]
 80149a6:	9a05      	ldr	r2, [sp, #20]
 80149a8:	2101      	movs	r1, #1
 80149aa:	441a      	add	r2, r3
 80149ac:	4620      	mov	r0, r4
 80149ae:	9205      	str	r2, [sp, #20]
 80149b0:	f000 ff44 	bl	801583c <__i2b>
 80149b4:	4607      	mov	r7, r0
 80149b6:	2d00      	cmp	r5, #0
 80149b8:	dd0c      	ble.n	80149d4 <_dtoa_r+0x754>
 80149ba:	9b05      	ldr	r3, [sp, #20]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	dd09      	ble.n	80149d4 <_dtoa_r+0x754>
 80149c0:	42ab      	cmp	r3, r5
 80149c2:	9a04      	ldr	r2, [sp, #16]
 80149c4:	bfa8      	it	ge
 80149c6:	462b      	movge	r3, r5
 80149c8:	1ad2      	subs	r2, r2, r3
 80149ca:	9204      	str	r2, [sp, #16]
 80149cc:	9a05      	ldr	r2, [sp, #20]
 80149ce:	1aed      	subs	r5, r5, r3
 80149d0:	1ad3      	subs	r3, r2, r3
 80149d2:	9305      	str	r3, [sp, #20]
 80149d4:	9b07      	ldr	r3, [sp, #28]
 80149d6:	b31b      	cbz	r3, 8014a20 <_dtoa_r+0x7a0>
 80149d8:	9b08      	ldr	r3, [sp, #32]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	f000 80af 	beq.w	8014b3e <_dtoa_r+0x8be>
 80149e0:	2e00      	cmp	r6, #0
 80149e2:	dd13      	ble.n	8014a0c <_dtoa_r+0x78c>
 80149e4:	4639      	mov	r1, r7
 80149e6:	4632      	mov	r2, r6
 80149e8:	4620      	mov	r0, r4
 80149ea:	f000 ffe7 	bl	80159bc <__pow5mult>
 80149ee:	ee18 2a10 	vmov	r2, s16
 80149f2:	4601      	mov	r1, r0
 80149f4:	4607      	mov	r7, r0
 80149f6:	4620      	mov	r0, r4
 80149f8:	f000 ff36 	bl	8015868 <__multiply>
 80149fc:	ee18 1a10 	vmov	r1, s16
 8014a00:	4680      	mov	r8, r0
 8014a02:	4620      	mov	r0, r4
 8014a04:	f000 fe18 	bl	8015638 <_Bfree>
 8014a08:	ee08 8a10 	vmov	s16, r8
 8014a0c:	9b07      	ldr	r3, [sp, #28]
 8014a0e:	1b9a      	subs	r2, r3, r6
 8014a10:	d006      	beq.n	8014a20 <_dtoa_r+0x7a0>
 8014a12:	ee18 1a10 	vmov	r1, s16
 8014a16:	4620      	mov	r0, r4
 8014a18:	f000 ffd0 	bl	80159bc <__pow5mult>
 8014a1c:	ee08 0a10 	vmov	s16, r0
 8014a20:	2101      	movs	r1, #1
 8014a22:	4620      	mov	r0, r4
 8014a24:	f000 ff0a 	bl	801583c <__i2b>
 8014a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	4606      	mov	r6, r0
 8014a2e:	f340 8088 	ble.w	8014b42 <_dtoa_r+0x8c2>
 8014a32:	461a      	mov	r2, r3
 8014a34:	4601      	mov	r1, r0
 8014a36:	4620      	mov	r0, r4
 8014a38:	f000 ffc0 	bl	80159bc <__pow5mult>
 8014a3c:	9b06      	ldr	r3, [sp, #24]
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	4606      	mov	r6, r0
 8014a42:	f340 8081 	ble.w	8014b48 <_dtoa_r+0x8c8>
 8014a46:	f04f 0800 	mov.w	r8, #0
 8014a4a:	6933      	ldr	r3, [r6, #16]
 8014a4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014a50:	6918      	ldr	r0, [r3, #16]
 8014a52:	f000 fea3 	bl	801579c <__hi0bits>
 8014a56:	f1c0 0020 	rsb	r0, r0, #32
 8014a5a:	9b05      	ldr	r3, [sp, #20]
 8014a5c:	4418      	add	r0, r3
 8014a5e:	f010 001f 	ands.w	r0, r0, #31
 8014a62:	f000 8092 	beq.w	8014b8a <_dtoa_r+0x90a>
 8014a66:	f1c0 0320 	rsb	r3, r0, #32
 8014a6a:	2b04      	cmp	r3, #4
 8014a6c:	f340 808a 	ble.w	8014b84 <_dtoa_r+0x904>
 8014a70:	f1c0 001c 	rsb	r0, r0, #28
 8014a74:	9b04      	ldr	r3, [sp, #16]
 8014a76:	4403      	add	r3, r0
 8014a78:	9304      	str	r3, [sp, #16]
 8014a7a:	9b05      	ldr	r3, [sp, #20]
 8014a7c:	4403      	add	r3, r0
 8014a7e:	4405      	add	r5, r0
 8014a80:	9305      	str	r3, [sp, #20]
 8014a82:	9b04      	ldr	r3, [sp, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	dd07      	ble.n	8014a98 <_dtoa_r+0x818>
 8014a88:	ee18 1a10 	vmov	r1, s16
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	4620      	mov	r0, r4
 8014a90:	f000 ffee 	bl	8015a70 <__lshift>
 8014a94:	ee08 0a10 	vmov	s16, r0
 8014a98:	9b05      	ldr	r3, [sp, #20]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	dd05      	ble.n	8014aaa <_dtoa_r+0x82a>
 8014a9e:	4631      	mov	r1, r6
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	f000 ffe4 	bl	8015a70 <__lshift>
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d06e      	beq.n	8014b8e <_dtoa_r+0x90e>
 8014ab0:	ee18 0a10 	vmov	r0, s16
 8014ab4:	4631      	mov	r1, r6
 8014ab6:	f001 f84b 	bl	8015b50 <__mcmp>
 8014aba:	2800      	cmp	r0, #0
 8014abc:	da67      	bge.n	8014b8e <_dtoa_r+0x90e>
 8014abe:	9b00      	ldr	r3, [sp, #0]
 8014ac0:	3b01      	subs	r3, #1
 8014ac2:	ee18 1a10 	vmov	r1, s16
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	220a      	movs	r2, #10
 8014aca:	2300      	movs	r3, #0
 8014acc:	4620      	mov	r0, r4
 8014ace:	f000 fdd5 	bl	801567c <__multadd>
 8014ad2:	9b08      	ldr	r3, [sp, #32]
 8014ad4:	ee08 0a10 	vmov	s16, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	f000 81b1 	beq.w	8014e40 <_dtoa_r+0xbc0>
 8014ade:	2300      	movs	r3, #0
 8014ae0:	4639      	mov	r1, r7
 8014ae2:	220a      	movs	r2, #10
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f000 fdc9 	bl	801567c <__multadd>
 8014aea:	9b02      	ldr	r3, [sp, #8]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	4607      	mov	r7, r0
 8014af0:	f300 808e 	bgt.w	8014c10 <_dtoa_r+0x990>
 8014af4:	9b06      	ldr	r3, [sp, #24]
 8014af6:	2b02      	cmp	r3, #2
 8014af8:	dc51      	bgt.n	8014b9e <_dtoa_r+0x91e>
 8014afa:	e089      	b.n	8014c10 <_dtoa_r+0x990>
 8014afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014b02:	e74b      	b.n	801499c <_dtoa_r+0x71c>
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	1e5e      	subs	r6, r3, #1
 8014b08:	9b07      	ldr	r3, [sp, #28]
 8014b0a:	42b3      	cmp	r3, r6
 8014b0c:	bfbf      	itttt	lt
 8014b0e:	9b07      	ldrlt	r3, [sp, #28]
 8014b10:	9607      	strlt	r6, [sp, #28]
 8014b12:	1af2      	sublt	r2, r6, r3
 8014b14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014b16:	bfb6      	itet	lt
 8014b18:	189b      	addlt	r3, r3, r2
 8014b1a:	1b9e      	subge	r6, r3, r6
 8014b1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014b1e:	9b03      	ldr	r3, [sp, #12]
 8014b20:	bfb8      	it	lt
 8014b22:	2600      	movlt	r6, #0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	bfb7      	itett	lt
 8014b28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014b2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014b30:	1a9d      	sublt	r5, r3, r2
 8014b32:	2300      	movlt	r3, #0
 8014b34:	e734      	b.n	80149a0 <_dtoa_r+0x720>
 8014b36:	9e07      	ldr	r6, [sp, #28]
 8014b38:	9d04      	ldr	r5, [sp, #16]
 8014b3a:	9f08      	ldr	r7, [sp, #32]
 8014b3c:	e73b      	b.n	80149b6 <_dtoa_r+0x736>
 8014b3e:	9a07      	ldr	r2, [sp, #28]
 8014b40:	e767      	b.n	8014a12 <_dtoa_r+0x792>
 8014b42:	9b06      	ldr	r3, [sp, #24]
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	dc18      	bgt.n	8014b7a <_dtoa_r+0x8fa>
 8014b48:	f1ba 0f00 	cmp.w	sl, #0
 8014b4c:	d115      	bne.n	8014b7a <_dtoa_r+0x8fa>
 8014b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b52:	b993      	cbnz	r3, 8014b7a <_dtoa_r+0x8fa>
 8014b54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b58:	0d1b      	lsrs	r3, r3, #20
 8014b5a:	051b      	lsls	r3, r3, #20
 8014b5c:	b183      	cbz	r3, 8014b80 <_dtoa_r+0x900>
 8014b5e:	9b04      	ldr	r3, [sp, #16]
 8014b60:	3301      	adds	r3, #1
 8014b62:	9304      	str	r3, [sp, #16]
 8014b64:	9b05      	ldr	r3, [sp, #20]
 8014b66:	3301      	adds	r3, #1
 8014b68:	9305      	str	r3, [sp, #20]
 8014b6a:	f04f 0801 	mov.w	r8, #1
 8014b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f47f af6a 	bne.w	8014a4a <_dtoa_r+0x7ca>
 8014b76:	2001      	movs	r0, #1
 8014b78:	e76f      	b.n	8014a5a <_dtoa_r+0x7da>
 8014b7a:	f04f 0800 	mov.w	r8, #0
 8014b7e:	e7f6      	b.n	8014b6e <_dtoa_r+0x8ee>
 8014b80:	4698      	mov	r8, r3
 8014b82:	e7f4      	b.n	8014b6e <_dtoa_r+0x8ee>
 8014b84:	f43f af7d 	beq.w	8014a82 <_dtoa_r+0x802>
 8014b88:	4618      	mov	r0, r3
 8014b8a:	301c      	adds	r0, #28
 8014b8c:	e772      	b.n	8014a74 <_dtoa_r+0x7f4>
 8014b8e:	9b03      	ldr	r3, [sp, #12]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	dc37      	bgt.n	8014c04 <_dtoa_r+0x984>
 8014b94:	9b06      	ldr	r3, [sp, #24]
 8014b96:	2b02      	cmp	r3, #2
 8014b98:	dd34      	ble.n	8014c04 <_dtoa_r+0x984>
 8014b9a:	9b03      	ldr	r3, [sp, #12]
 8014b9c:	9302      	str	r3, [sp, #8]
 8014b9e:	9b02      	ldr	r3, [sp, #8]
 8014ba0:	b96b      	cbnz	r3, 8014bbe <_dtoa_r+0x93e>
 8014ba2:	4631      	mov	r1, r6
 8014ba4:	2205      	movs	r2, #5
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f000 fd68 	bl	801567c <__multadd>
 8014bac:	4601      	mov	r1, r0
 8014bae:	4606      	mov	r6, r0
 8014bb0:	ee18 0a10 	vmov	r0, s16
 8014bb4:	f000 ffcc 	bl	8015b50 <__mcmp>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	f73f adbb 	bgt.w	8014734 <_dtoa_r+0x4b4>
 8014bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc0:	9d01      	ldr	r5, [sp, #4]
 8014bc2:	43db      	mvns	r3, r3
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	f04f 0800 	mov.w	r8, #0
 8014bca:	4631      	mov	r1, r6
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f000 fd33 	bl	8015638 <_Bfree>
 8014bd2:	2f00      	cmp	r7, #0
 8014bd4:	f43f aea4 	beq.w	8014920 <_dtoa_r+0x6a0>
 8014bd8:	f1b8 0f00 	cmp.w	r8, #0
 8014bdc:	d005      	beq.n	8014bea <_dtoa_r+0x96a>
 8014bde:	45b8      	cmp	r8, r7
 8014be0:	d003      	beq.n	8014bea <_dtoa_r+0x96a>
 8014be2:	4641      	mov	r1, r8
 8014be4:	4620      	mov	r0, r4
 8014be6:	f000 fd27 	bl	8015638 <_Bfree>
 8014bea:	4639      	mov	r1, r7
 8014bec:	4620      	mov	r0, r4
 8014bee:	f000 fd23 	bl	8015638 <_Bfree>
 8014bf2:	e695      	b.n	8014920 <_dtoa_r+0x6a0>
 8014bf4:	2600      	movs	r6, #0
 8014bf6:	4637      	mov	r7, r6
 8014bf8:	e7e1      	b.n	8014bbe <_dtoa_r+0x93e>
 8014bfa:	9700      	str	r7, [sp, #0]
 8014bfc:	4637      	mov	r7, r6
 8014bfe:	e599      	b.n	8014734 <_dtoa_r+0x4b4>
 8014c00:	40240000 	.word	0x40240000
 8014c04:	9b08      	ldr	r3, [sp, #32]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	f000 80ca 	beq.w	8014da0 <_dtoa_r+0xb20>
 8014c0c:	9b03      	ldr	r3, [sp, #12]
 8014c0e:	9302      	str	r3, [sp, #8]
 8014c10:	2d00      	cmp	r5, #0
 8014c12:	dd05      	ble.n	8014c20 <_dtoa_r+0x9a0>
 8014c14:	4639      	mov	r1, r7
 8014c16:	462a      	mov	r2, r5
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f000 ff29 	bl	8015a70 <__lshift>
 8014c1e:	4607      	mov	r7, r0
 8014c20:	f1b8 0f00 	cmp.w	r8, #0
 8014c24:	d05b      	beq.n	8014cde <_dtoa_r+0xa5e>
 8014c26:	6879      	ldr	r1, [r7, #4]
 8014c28:	4620      	mov	r0, r4
 8014c2a:	f000 fcc5 	bl	80155b8 <_Balloc>
 8014c2e:	4605      	mov	r5, r0
 8014c30:	b928      	cbnz	r0, 8014c3e <_dtoa_r+0x9be>
 8014c32:	4b87      	ldr	r3, [pc, #540]	; (8014e50 <_dtoa_r+0xbd0>)
 8014c34:	4602      	mov	r2, r0
 8014c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014c3a:	f7ff bb3b 	b.w	80142b4 <_dtoa_r+0x34>
 8014c3e:	693a      	ldr	r2, [r7, #16]
 8014c40:	3202      	adds	r2, #2
 8014c42:	0092      	lsls	r2, r2, #2
 8014c44:	f107 010c 	add.w	r1, r7, #12
 8014c48:	300c      	adds	r0, #12
 8014c4a:	f000 fca7 	bl	801559c <memcpy>
 8014c4e:	2201      	movs	r2, #1
 8014c50:	4629      	mov	r1, r5
 8014c52:	4620      	mov	r0, r4
 8014c54:	f000 ff0c 	bl	8015a70 <__lshift>
 8014c58:	9b01      	ldr	r3, [sp, #4]
 8014c5a:	f103 0901 	add.w	r9, r3, #1
 8014c5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014c62:	4413      	add	r3, r2
 8014c64:	9305      	str	r3, [sp, #20]
 8014c66:	f00a 0301 	and.w	r3, sl, #1
 8014c6a:	46b8      	mov	r8, r7
 8014c6c:	9304      	str	r3, [sp, #16]
 8014c6e:	4607      	mov	r7, r0
 8014c70:	4631      	mov	r1, r6
 8014c72:	ee18 0a10 	vmov	r0, s16
 8014c76:	f7ff fa77 	bl	8014168 <quorem>
 8014c7a:	4641      	mov	r1, r8
 8014c7c:	9002      	str	r0, [sp, #8]
 8014c7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014c82:	ee18 0a10 	vmov	r0, s16
 8014c86:	f000 ff63 	bl	8015b50 <__mcmp>
 8014c8a:	463a      	mov	r2, r7
 8014c8c:	9003      	str	r0, [sp, #12]
 8014c8e:	4631      	mov	r1, r6
 8014c90:	4620      	mov	r0, r4
 8014c92:	f000 ff79 	bl	8015b88 <__mdiff>
 8014c96:	68c2      	ldr	r2, [r0, #12]
 8014c98:	f109 3bff 	add.w	fp, r9, #4294967295
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	bb02      	cbnz	r2, 8014ce2 <_dtoa_r+0xa62>
 8014ca0:	4601      	mov	r1, r0
 8014ca2:	ee18 0a10 	vmov	r0, s16
 8014ca6:	f000 ff53 	bl	8015b50 <__mcmp>
 8014caa:	4602      	mov	r2, r0
 8014cac:	4629      	mov	r1, r5
 8014cae:	4620      	mov	r0, r4
 8014cb0:	9207      	str	r2, [sp, #28]
 8014cb2:	f000 fcc1 	bl	8015638 <_Bfree>
 8014cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014cba:	ea43 0102 	orr.w	r1, r3, r2
 8014cbe:	9b04      	ldr	r3, [sp, #16]
 8014cc0:	430b      	orrs	r3, r1
 8014cc2:	464d      	mov	r5, r9
 8014cc4:	d10f      	bne.n	8014ce6 <_dtoa_r+0xa66>
 8014cc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014cca:	d02a      	beq.n	8014d22 <_dtoa_r+0xaa2>
 8014ccc:	9b03      	ldr	r3, [sp, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	dd02      	ble.n	8014cd8 <_dtoa_r+0xa58>
 8014cd2:	9b02      	ldr	r3, [sp, #8]
 8014cd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014cd8:	f88b a000 	strb.w	sl, [fp]
 8014cdc:	e775      	b.n	8014bca <_dtoa_r+0x94a>
 8014cde:	4638      	mov	r0, r7
 8014ce0:	e7ba      	b.n	8014c58 <_dtoa_r+0x9d8>
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	e7e2      	b.n	8014cac <_dtoa_r+0xa2c>
 8014ce6:	9b03      	ldr	r3, [sp, #12]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	db04      	blt.n	8014cf6 <_dtoa_r+0xa76>
 8014cec:	9906      	ldr	r1, [sp, #24]
 8014cee:	430b      	orrs	r3, r1
 8014cf0:	9904      	ldr	r1, [sp, #16]
 8014cf2:	430b      	orrs	r3, r1
 8014cf4:	d122      	bne.n	8014d3c <_dtoa_r+0xabc>
 8014cf6:	2a00      	cmp	r2, #0
 8014cf8:	ddee      	ble.n	8014cd8 <_dtoa_r+0xa58>
 8014cfa:	ee18 1a10 	vmov	r1, s16
 8014cfe:	2201      	movs	r2, #1
 8014d00:	4620      	mov	r0, r4
 8014d02:	f000 feb5 	bl	8015a70 <__lshift>
 8014d06:	4631      	mov	r1, r6
 8014d08:	ee08 0a10 	vmov	s16, r0
 8014d0c:	f000 ff20 	bl	8015b50 <__mcmp>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	dc03      	bgt.n	8014d1c <_dtoa_r+0xa9c>
 8014d14:	d1e0      	bne.n	8014cd8 <_dtoa_r+0xa58>
 8014d16:	f01a 0f01 	tst.w	sl, #1
 8014d1a:	d0dd      	beq.n	8014cd8 <_dtoa_r+0xa58>
 8014d1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d20:	d1d7      	bne.n	8014cd2 <_dtoa_r+0xa52>
 8014d22:	2339      	movs	r3, #57	; 0x39
 8014d24:	f88b 3000 	strb.w	r3, [fp]
 8014d28:	462b      	mov	r3, r5
 8014d2a:	461d      	mov	r5, r3
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014d32:	2a39      	cmp	r2, #57	; 0x39
 8014d34:	d071      	beq.n	8014e1a <_dtoa_r+0xb9a>
 8014d36:	3201      	adds	r2, #1
 8014d38:	701a      	strb	r2, [r3, #0]
 8014d3a:	e746      	b.n	8014bca <_dtoa_r+0x94a>
 8014d3c:	2a00      	cmp	r2, #0
 8014d3e:	dd07      	ble.n	8014d50 <_dtoa_r+0xad0>
 8014d40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d44:	d0ed      	beq.n	8014d22 <_dtoa_r+0xaa2>
 8014d46:	f10a 0301 	add.w	r3, sl, #1
 8014d4a:	f88b 3000 	strb.w	r3, [fp]
 8014d4e:	e73c      	b.n	8014bca <_dtoa_r+0x94a>
 8014d50:	9b05      	ldr	r3, [sp, #20]
 8014d52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014d56:	4599      	cmp	r9, r3
 8014d58:	d047      	beq.n	8014dea <_dtoa_r+0xb6a>
 8014d5a:	ee18 1a10 	vmov	r1, s16
 8014d5e:	2300      	movs	r3, #0
 8014d60:	220a      	movs	r2, #10
 8014d62:	4620      	mov	r0, r4
 8014d64:	f000 fc8a 	bl	801567c <__multadd>
 8014d68:	45b8      	cmp	r8, r7
 8014d6a:	ee08 0a10 	vmov	s16, r0
 8014d6e:	f04f 0300 	mov.w	r3, #0
 8014d72:	f04f 020a 	mov.w	r2, #10
 8014d76:	4641      	mov	r1, r8
 8014d78:	4620      	mov	r0, r4
 8014d7a:	d106      	bne.n	8014d8a <_dtoa_r+0xb0a>
 8014d7c:	f000 fc7e 	bl	801567c <__multadd>
 8014d80:	4680      	mov	r8, r0
 8014d82:	4607      	mov	r7, r0
 8014d84:	f109 0901 	add.w	r9, r9, #1
 8014d88:	e772      	b.n	8014c70 <_dtoa_r+0x9f0>
 8014d8a:	f000 fc77 	bl	801567c <__multadd>
 8014d8e:	4639      	mov	r1, r7
 8014d90:	4680      	mov	r8, r0
 8014d92:	2300      	movs	r3, #0
 8014d94:	220a      	movs	r2, #10
 8014d96:	4620      	mov	r0, r4
 8014d98:	f000 fc70 	bl	801567c <__multadd>
 8014d9c:	4607      	mov	r7, r0
 8014d9e:	e7f1      	b.n	8014d84 <_dtoa_r+0xb04>
 8014da0:	9b03      	ldr	r3, [sp, #12]
 8014da2:	9302      	str	r3, [sp, #8]
 8014da4:	9d01      	ldr	r5, [sp, #4]
 8014da6:	ee18 0a10 	vmov	r0, s16
 8014daa:	4631      	mov	r1, r6
 8014dac:	f7ff f9dc 	bl	8014168 <quorem>
 8014db0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014db4:	9b01      	ldr	r3, [sp, #4]
 8014db6:	f805 ab01 	strb.w	sl, [r5], #1
 8014dba:	1aea      	subs	r2, r5, r3
 8014dbc:	9b02      	ldr	r3, [sp, #8]
 8014dbe:	4293      	cmp	r3, r2
 8014dc0:	dd09      	ble.n	8014dd6 <_dtoa_r+0xb56>
 8014dc2:	ee18 1a10 	vmov	r1, s16
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	220a      	movs	r2, #10
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f000 fc56 	bl	801567c <__multadd>
 8014dd0:	ee08 0a10 	vmov	s16, r0
 8014dd4:	e7e7      	b.n	8014da6 <_dtoa_r+0xb26>
 8014dd6:	9b02      	ldr	r3, [sp, #8]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	bfc8      	it	gt
 8014ddc:	461d      	movgt	r5, r3
 8014dde:	9b01      	ldr	r3, [sp, #4]
 8014de0:	bfd8      	it	le
 8014de2:	2501      	movle	r5, #1
 8014de4:	441d      	add	r5, r3
 8014de6:	f04f 0800 	mov.w	r8, #0
 8014dea:	ee18 1a10 	vmov	r1, s16
 8014dee:	2201      	movs	r2, #1
 8014df0:	4620      	mov	r0, r4
 8014df2:	f000 fe3d 	bl	8015a70 <__lshift>
 8014df6:	4631      	mov	r1, r6
 8014df8:	ee08 0a10 	vmov	s16, r0
 8014dfc:	f000 fea8 	bl	8015b50 <__mcmp>
 8014e00:	2800      	cmp	r0, #0
 8014e02:	dc91      	bgt.n	8014d28 <_dtoa_r+0xaa8>
 8014e04:	d102      	bne.n	8014e0c <_dtoa_r+0xb8c>
 8014e06:	f01a 0f01 	tst.w	sl, #1
 8014e0a:	d18d      	bne.n	8014d28 <_dtoa_r+0xaa8>
 8014e0c:	462b      	mov	r3, r5
 8014e0e:	461d      	mov	r5, r3
 8014e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e14:	2a30      	cmp	r2, #48	; 0x30
 8014e16:	d0fa      	beq.n	8014e0e <_dtoa_r+0xb8e>
 8014e18:	e6d7      	b.n	8014bca <_dtoa_r+0x94a>
 8014e1a:	9a01      	ldr	r2, [sp, #4]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d184      	bne.n	8014d2a <_dtoa_r+0xaaa>
 8014e20:	9b00      	ldr	r3, [sp, #0]
 8014e22:	3301      	adds	r3, #1
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	2331      	movs	r3, #49	; 0x31
 8014e28:	7013      	strb	r3, [r2, #0]
 8014e2a:	e6ce      	b.n	8014bca <_dtoa_r+0x94a>
 8014e2c:	4b09      	ldr	r3, [pc, #36]	; (8014e54 <_dtoa_r+0xbd4>)
 8014e2e:	f7ff ba95 	b.w	801435c <_dtoa_r+0xdc>
 8014e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f47f aa6e 	bne.w	8014316 <_dtoa_r+0x96>
 8014e3a:	4b07      	ldr	r3, [pc, #28]	; (8014e58 <_dtoa_r+0xbd8>)
 8014e3c:	f7ff ba8e 	b.w	801435c <_dtoa_r+0xdc>
 8014e40:	9b02      	ldr	r3, [sp, #8]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	dcae      	bgt.n	8014da4 <_dtoa_r+0xb24>
 8014e46:	9b06      	ldr	r3, [sp, #24]
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	f73f aea8 	bgt.w	8014b9e <_dtoa_r+0x91e>
 8014e4e:	e7a9      	b.n	8014da4 <_dtoa_r+0xb24>
 8014e50:	0802ae69 	.word	0x0802ae69
 8014e54:	0802abd4 	.word	0x0802abd4
 8014e58:	0802ae01 	.word	0x0802ae01

08014e5c <fiprintf>:
 8014e5c:	b40e      	push	{r1, r2, r3}
 8014e5e:	b503      	push	{r0, r1, lr}
 8014e60:	4601      	mov	r1, r0
 8014e62:	ab03      	add	r3, sp, #12
 8014e64:	4805      	ldr	r0, [pc, #20]	; (8014e7c <fiprintf+0x20>)
 8014e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e6a:	6800      	ldr	r0, [r0, #0]
 8014e6c:	9301      	str	r3, [sp, #4]
 8014e6e:	f001 fae1 	bl	8016434 <_vfiprintf_r>
 8014e72:	b002      	add	sp, #8
 8014e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e78:	b003      	add	sp, #12
 8014e7a:	4770      	bx	lr
 8014e7c:	20000044 	.word	0x20000044

08014e80 <rshift>:
 8014e80:	6903      	ldr	r3, [r0, #16]
 8014e82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014e8e:	f100 0414 	add.w	r4, r0, #20
 8014e92:	dd45      	ble.n	8014f20 <rshift+0xa0>
 8014e94:	f011 011f 	ands.w	r1, r1, #31
 8014e98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014e9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014ea0:	d10c      	bne.n	8014ebc <rshift+0x3c>
 8014ea2:	f100 0710 	add.w	r7, r0, #16
 8014ea6:	4629      	mov	r1, r5
 8014ea8:	42b1      	cmp	r1, r6
 8014eaa:	d334      	bcc.n	8014f16 <rshift+0x96>
 8014eac:	1a9b      	subs	r3, r3, r2
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	1eea      	subs	r2, r5, #3
 8014eb2:	4296      	cmp	r6, r2
 8014eb4:	bf38      	it	cc
 8014eb6:	2300      	movcc	r3, #0
 8014eb8:	4423      	add	r3, r4
 8014eba:	e015      	b.n	8014ee8 <rshift+0x68>
 8014ebc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014ec0:	f1c1 0820 	rsb	r8, r1, #32
 8014ec4:	40cf      	lsrs	r7, r1
 8014ec6:	f105 0e04 	add.w	lr, r5, #4
 8014eca:	46a1      	mov	r9, r4
 8014ecc:	4576      	cmp	r6, lr
 8014ece:	46f4      	mov	ip, lr
 8014ed0:	d815      	bhi.n	8014efe <rshift+0x7e>
 8014ed2:	1a9a      	subs	r2, r3, r2
 8014ed4:	0092      	lsls	r2, r2, #2
 8014ed6:	3a04      	subs	r2, #4
 8014ed8:	3501      	adds	r5, #1
 8014eda:	42ae      	cmp	r6, r5
 8014edc:	bf38      	it	cc
 8014ede:	2200      	movcc	r2, #0
 8014ee0:	18a3      	adds	r3, r4, r2
 8014ee2:	50a7      	str	r7, [r4, r2]
 8014ee4:	b107      	cbz	r7, 8014ee8 <rshift+0x68>
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	1b1a      	subs	r2, r3, r4
 8014eea:	42a3      	cmp	r3, r4
 8014eec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014ef0:	bf08      	it	eq
 8014ef2:	2300      	moveq	r3, #0
 8014ef4:	6102      	str	r2, [r0, #16]
 8014ef6:	bf08      	it	eq
 8014ef8:	6143      	streq	r3, [r0, #20]
 8014efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014efe:	f8dc c000 	ldr.w	ip, [ip]
 8014f02:	fa0c fc08 	lsl.w	ip, ip, r8
 8014f06:	ea4c 0707 	orr.w	r7, ip, r7
 8014f0a:	f849 7b04 	str.w	r7, [r9], #4
 8014f0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014f12:	40cf      	lsrs	r7, r1
 8014f14:	e7da      	b.n	8014ecc <rshift+0x4c>
 8014f16:	f851 cb04 	ldr.w	ip, [r1], #4
 8014f1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8014f1e:	e7c3      	b.n	8014ea8 <rshift+0x28>
 8014f20:	4623      	mov	r3, r4
 8014f22:	e7e1      	b.n	8014ee8 <rshift+0x68>

08014f24 <__hexdig_fun>:
 8014f24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014f28:	2b09      	cmp	r3, #9
 8014f2a:	d802      	bhi.n	8014f32 <__hexdig_fun+0xe>
 8014f2c:	3820      	subs	r0, #32
 8014f2e:	b2c0      	uxtb	r0, r0
 8014f30:	4770      	bx	lr
 8014f32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014f36:	2b05      	cmp	r3, #5
 8014f38:	d801      	bhi.n	8014f3e <__hexdig_fun+0x1a>
 8014f3a:	3847      	subs	r0, #71	; 0x47
 8014f3c:	e7f7      	b.n	8014f2e <__hexdig_fun+0xa>
 8014f3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014f42:	2b05      	cmp	r3, #5
 8014f44:	d801      	bhi.n	8014f4a <__hexdig_fun+0x26>
 8014f46:	3827      	subs	r0, #39	; 0x27
 8014f48:	e7f1      	b.n	8014f2e <__hexdig_fun+0xa>
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	4770      	bx	lr
	...

08014f50 <__gethex>:
 8014f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f54:	ed2d 8b02 	vpush	{d8}
 8014f58:	b089      	sub	sp, #36	; 0x24
 8014f5a:	ee08 0a10 	vmov	s16, r0
 8014f5e:	9304      	str	r3, [sp, #16]
 8014f60:	4bb4      	ldr	r3, [pc, #720]	; (8015234 <__gethex+0x2e4>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	9301      	str	r3, [sp, #4]
 8014f66:	4618      	mov	r0, r3
 8014f68:	468b      	mov	fp, r1
 8014f6a:	4690      	mov	r8, r2
 8014f6c:	f7eb f942 	bl	80001f4 <strlen>
 8014f70:	9b01      	ldr	r3, [sp, #4]
 8014f72:	f8db 2000 	ldr.w	r2, [fp]
 8014f76:	4403      	add	r3, r0
 8014f78:	4682      	mov	sl, r0
 8014f7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014f7e:	9305      	str	r3, [sp, #20]
 8014f80:	1c93      	adds	r3, r2, #2
 8014f82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014f86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014f8a:	32fe      	adds	r2, #254	; 0xfe
 8014f8c:	18d1      	adds	r1, r2, r3
 8014f8e:	461f      	mov	r7, r3
 8014f90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f94:	9100      	str	r1, [sp, #0]
 8014f96:	2830      	cmp	r0, #48	; 0x30
 8014f98:	d0f8      	beq.n	8014f8c <__gethex+0x3c>
 8014f9a:	f7ff ffc3 	bl	8014f24 <__hexdig_fun>
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d13a      	bne.n	801501a <__gethex+0xca>
 8014fa4:	9901      	ldr	r1, [sp, #4]
 8014fa6:	4652      	mov	r2, sl
 8014fa8:	4638      	mov	r0, r7
 8014faa:	f001 fb8d 	bl	80166c8 <strncmp>
 8014fae:	4605      	mov	r5, r0
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d168      	bne.n	8015086 <__gethex+0x136>
 8014fb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014fb8:	eb07 060a 	add.w	r6, r7, sl
 8014fbc:	f7ff ffb2 	bl	8014f24 <__hexdig_fun>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d062      	beq.n	801508a <__gethex+0x13a>
 8014fc4:	4633      	mov	r3, r6
 8014fc6:	7818      	ldrb	r0, [r3, #0]
 8014fc8:	2830      	cmp	r0, #48	; 0x30
 8014fca:	461f      	mov	r7, r3
 8014fcc:	f103 0301 	add.w	r3, r3, #1
 8014fd0:	d0f9      	beq.n	8014fc6 <__gethex+0x76>
 8014fd2:	f7ff ffa7 	bl	8014f24 <__hexdig_fun>
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	fab0 f480 	clz	r4, r0
 8014fdc:	0964      	lsrs	r4, r4, #5
 8014fde:	4635      	mov	r5, r6
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	463a      	mov	r2, r7
 8014fe4:	4616      	mov	r6, r2
 8014fe6:	3201      	adds	r2, #1
 8014fe8:	7830      	ldrb	r0, [r6, #0]
 8014fea:	f7ff ff9b 	bl	8014f24 <__hexdig_fun>
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	d1f8      	bne.n	8014fe4 <__gethex+0x94>
 8014ff2:	9901      	ldr	r1, [sp, #4]
 8014ff4:	4652      	mov	r2, sl
 8014ff6:	4630      	mov	r0, r6
 8014ff8:	f001 fb66 	bl	80166c8 <strncmp>
 8014ffc:	b980      	cbnz	r0, 8015020 <__gethex+0xd0>
 8014ffe:	b94d      	cbnz	r5, 8015014 <__gethex+0xc4>
 8015000:	eb06 050a 	add.w	r5, r6, sl
 8015004:	462a      	mov	r2, r5
 8015006:	4616      	mov	r6, r2
 8015008:	3201      	adds	r2, #1
 801500a:	7830      	ldrb	r0, [r6, #0]
 801500c:	f7ff ff8a 	bl	8014f24 <__hexdig_fun>
 8015010:	2800      	cmp	r0, #0
 8015012:	d1f8      	bne.n	8015006 <__gethex+0xb6>
 8015014:	1bad      	subs	r5, r5, r6
 8015016:	00ad      	lsls	r5, r5, #2
 8015018:	e004      	b.n	8015024 <__gethex+0xd4>
 801501a:	2400      	movs	r4, #0
 801501c:	4625      	mov	r5, r4
 801501e:	e7e0      	b.n	8014fe2 <__gethex+0x92>
 8015020:	2d00      	cmp	r5, #0
 8015022:	d1f7      	bne.n	8015014 <__gethex+0xc4>
 8015024:	7833      	ldrb	r3, [r6, #0]
 8015026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801502a:	2b50      	cmp	r3, #80	; 0x50
 801502c:	d13b      	bne.n	80150a6 <__gethex+0x156>
 801502e:	7873      	ldrb	r3, [r6, #1]
 8015030:	2b2b      	cmp	r3, #43	; 0x2b
 8015032:	d02c      	beq.n	801508e <__gethex+0x13e>
 8015034:	2b2d      	cmp	r3, #45	; 0x2d
 8015036:	d02e      	beq.n	8015096 <__gethex+0x146>
 8015038:	1c71      	adds	r1, r6, #1
 801503a:	f04f 0900 	mov.w	r9, #0
 801503e:	7808      	ldrb	r0, [r1, #0]
 8015040:	f7ff ff70 	bl	8014f24 <__hexdig_fun>
 8015044:	1e43      	subs	r3, r0, #1
 8015046:	b2db      	uxtb	r3, r3
 8015048:	2b18      	cmp	r3, #24
 801504a:	d82c      	bhi.n	80150a6 <__gethex+0x156>
 801504c:	f1a0 0210 	sub.w	r2, r0, #16
 8015050:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015054:	f7ff ff66 	bl	8014f24 <__hexdig_fun>
 8015058:	1e43      	subs	r3, r0, #1
 801505a:	b2db      	uxtb	r3, r3
 801505c:	2b18      	cmp	r3, #24
 801505e:	d91d      	bls.n	801509c <__gethex+0x14c>
 8015060:	f1b9 0f00 	cmp.w	r9, #0
 8015064:	d000      	beq.n	8015068 <__gethex+0x118>
 8015066:	4252      	negs	r2, r2
 8015068:	4415      	add	r5, r2
 801506a:	f8cb 1000 	str.w	r1, [fp]
 801506e:	b1e4      	cbz	r4, 80150aa <__gethex+0x15a>
 8015070:	9b00      	ldr	r3, [sp, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	bf14      	ite	ne
 8015076:	2700      	movne	r7, #0
 8015078:	2706      	moveq	r7, #6
 801507a:	4638      	mov	r0, r7
 801507c:	b009      	add	sp, #36	; 0x24
 801507e:	ecbd 8b02 	vpop	{d8}
 8015082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015086:	463e      	mov	r6, r7
 8015088:	4625      	mov	r5, r4
 801508a:	2401      	movs	r4, #1
 801508c:	e7ca      	b.n	8015024 <__gethex+0xd4>
 801508e:	f04f 0900 	mov.w	r9, #0
 8015092:	1cb1      	adds	r1, r6, #2
 8015094:	e7d3      	b.n	801503e <__gethex+0xee>
 8015096:	f04f 0901 	mov.w	r9, #1
 801509a:	e7fa      	b.n	8015092 <__gethex+0x142>
 801509c:	230a      	movs	r3, #10
 801509e:	fb03 0202 	mla	r2, r3, r2, r0
 80150a2:	3a10      	subs	r2, #16
 80150a4:	e7d4      	b.n	8015050 <__gethex+0x100>
 80150a6:	4631      	mov	r1, r6
 80150a8:	e7df      	b.n	801506a <__gethex+0x11a>
 80150aa:	1bf3      	subs	r3, r6, r7
 80150ac:	3b01      	subs	r3, #1
 80150ae:	4621      	mov	r1, r4
 80150b0:	2b07      	cmp	r3, #7
 80150b2:	dc0b      	bgt.n	80150cc <__gethex+0x17c>
 80150b4:	ee18 0a10 	vmov	r0, s16
 80150b8:	f000 fa7e 	bl	80155b8 <_Balloc>
 80150bc:	4604      	mov	r4, r0
 80150be:	b940      	cbnz	r0, 80150d2 <__gethex+0x182>
 80150c0:	4b5d      	ldr	r3, [pc, #372]	; (8015238 <__gethex+0x2e8>)
 80150c2:	4602      	mov	r2, r0
 80150c4:	21de      	movs	r1, #222	; 0xde
 80150c6:	485d      	ldr	r0, [pc, #372]	; (801523c <__gethex+0x2ec>)
 80150c8:	f7ff f830 	bl	801412c <__assert_func>
 80150cc:	3101      	adds	r1, #1
 80150ce:	105b      	asrs	r3, r3, #1
 80150d0:	e7ee      	b.n	80150b0 <__gethex+0x160>
 80150d2:	f100 0914 	add.w	r9, r0, #20
 80150d6:	f04f 0b00 	mov.w	fp, #0
 80150da:	f1ca 0301 	rsb	r3, sl, #1
 80150de:	f8cd 9008 	str.w	r9, [sp, #8]
 80150e2:	f8cd b000 	str.w	fp, [sp]
 80150e6:	9306      	str	r3, [sp, #24]
 80150e8:	42b7      	cmp	r7, r6
 80150ea:	d340      	bcc.n	801516e <__gethex+0x21e>
 80150ec:	9802      	ldr	r0, [sp, #8]
 80150ee:	9b00      	ldr	r3, [sp, #0]
 80150f0:	f840 3b04 	str.w	r3, [r0], #4
 80150f4:	eba0 0009 	sub.w	r0, r0, r9
 80150f8:	1080      	asrs	r0, r0, #2
 80150fa:	0146      	lsls	r6, r0, #5
 80150fc:	6120      	str	r0, [r4, #16]
 80150fe:	4618      	mov	r0, r3
 8015100:	f000 fb4c 	bl	801579c <__hi0bits>
 8015104:	1a30      	subs	r0, r6, r0
 8015106:	f8d8 6000 	ldr.w	r6, [r8]
 801510a:	42b0      	cmp	r0, r6
 801510c:	dd63      	ble.n	80151d6 <__gethex+0x286>
 801510e:	1b87      	subs	r7, r0, r6
 8015110:	4639      	mov	r1, r7
 8015112:	4620      	mov	r0, r4
 8015114:	f000 fef0 	bl	8015ef8 <__any_on>
 8015118:	4682      	mov	sl, r0
 801511a:	b1a8      	cbz	r0, 8015148 <__gethex+0x1f8>
 801511c:	1e7b      	subs	r3, r7, #1
 801511e:	1159      	asrs	r1, r3, #5
 8015120:	f003 021f 	and.w	r2, r3, #31
 8015124:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015128:	f04f 0a01 	mov.w	sl, #1
 801512c:	fa0a f202 	lsl.w	r2, sl, r2
 8015130:	420a      	tst	r2, r1
 8015132:	d009      	beq.n	8015148 <__gethex+0x1f8>
 8015134:	4553      	cmp	r3, sl
 8015136:	dd05      	ble.n	8015144 <__gethex+0x1f4>
 8015138:	1eb9      	subs	r1, r7, #2
 801513a:	4620      	mov	r0, r4
 801513c:	f000 fedc 	bl	8015ef8 <__any_on>
 8015140:	2800      	cmp	r0, #0
 8015142:	d145      	bne.n	80151d0 <__gethex+0x280>
 8015144:	f04f 0a02 	mov.w	sl, #2
 8015148:	4639      	mov	r1, r7
 801514a:	4620      	mov	r0, r4
 801514c:	f7ff fe98 	bl	8014e80 <rshift>
 8015150:	443d      	add	r5, r7
 8015152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015156:	42ab      	cmp	r3, r5
 8015158:	da4c      	bge.n	80151f4 <__gethex+0x2a4>
 801515a:	ee18 0a10 	vmov	r0, s16
 801515e:	4621      	mov	r1, r4
 8015160:	f000 fa6a 	bl	8015638 <_Bfree>
 8015164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015166:	2300      	movs	r3, #0
 8015168:	6013      	str	r3, [r2, #0]
 801516a:	27a3      	movs	r7, #163	; 0xa3
 801516c:	e785      	b.n	801507a <__gethex+0x12a>
 801516e:	1e73      	subs	r3, r6, #1
 8015170:	9a05      	ldr	r2, [sp, #20]
 8015172:	9303      	str	r3, [sp, #12]
 8015174:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015178:	4293      	cmp	r3, r2
 801517a:	d019      	beq.n	80151b0 <__gethex+0x260>
 801517c:	f1bb 0f20 	cmp.w	fp, #32
 8015180:	d107      	bne.n	8015192 <__gethex+0x242>
 8015182:	9b02      	ldr	r3, [sp, #8]
 8015184:	9a00      	ldr	r2, [sp, #0]
 8015186:	f843 2b04 	str.w	r2, [r3], #4
 801518a:	9302      	str	r3, [sp, #8]
 801518c:	2300      	movs	r3, #0
 801518e:	9300      	str	r3, [sp, #0]
 8015190:	469b      	mov	fp, r3
 8015192:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015196:	f7ff fec5 	bl	8014f24 <__hexdig_fun>
 801519a:	9b00      	ldr	r3, [sp, #0]
 801519c:	f000 000f 	and.w	r0, r0, #15
 80151a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80151a4:	4303      	orrs	r3, r0
 80151a6:	9300      	str	r3, [sp, #0]
 80151a8:	f10b 0b04 	add.w	fp, fp, #4
 80151ac:	9b03      	ldr	r3, [sp, #12]
 80151ae:	e00d      	b.n	80151cc <__gethex+0x27c>
 80151b0:	9b03      	ldr	r3, [sp, #12]
 80151b2:	9a06      	ldr	r2, [sp, #24]
 80151b4:	4413      	add	r3, r2
 80151b6:	42bb      	cmp	r3, r7
 80151b8:	d3e0      	bcc.n	801517c <__gethex+0x22c>
 80151ba:	4618      	mov	r0, r3
 80151bc:	9901      	ldr	r1, [sp, #4]
 80151be:	9307      	str	r3, [sp, #28]
 80151c0:	4652      	mov	r2, sl
 80151c2:	f001 fa81 	bl	80166c8 <strncmp>
 80151c6:	9b07      	ldr	r3, [sp, #28]
 80151c8:	2800      	cmp	r0, #0
 80151ca:	d1d7      	bne.n	801517c <__gethex+0x22c>
 80151cc:	461e      	mov	r6, r3
 80151ce:	e78b      	b.n	80150e8 <__gethex+0x198>
 80151d0:	f04f 0a03 	mov.w	sl, #3
 80151d4:	e7b8      	b.n	8015148 <__gethex+0x1f8>
 80151d6:	da0a      	bge.n	80151ee <__gethex+0x29e>
 80151d8:	1a37      	subs	r7, r6, r0
 80151da:	4621      	mov	r1, r4
 80151dc:	ee18 0a10 	vmov	r0, s16
 80151e0:	463a      	mov	r2, r7
 80151e2:	f000 fc45 	bl	8015a70 <__lshift>
 80151e6:	1bed      	subs	r5, r5, r7
 80151e8:	4604      	mov	r4, r0
 80151ea:	f100 0914 	add.w	r9, r0, #20
 80151ee:	f04f 0a00 	mov.w	sl, #0
 80151f2:	e7ae      	b.n	8015152 <__gethex+0x202>
 80151f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80151f8:	42a8      	cmp	r0, r5
 80151fa:	dd72      	ble.n	80152e2 <__gethex+0x392>
 80151fc:	1b45      	subs	r5, r0, r5
 80151fe:	42ae      	cmp	r6, r5
 8015200:	dc36      	bgt.n	8015270 <__gethex+0x320>
 8015202:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015206:	2b02      	cmp	r3, #2
 8015208:	d02a      	beq.n	8015260 <__gethex+0x310>
 801520a:	2b03      	cmp	r3, #3
 801520c:	d02c      	beq.n	8015268 <__gethex+0x318>
 801520e:	2b01      	cmp	r3, #1
 8015210:	d11c      	bne.n	801524c <__gethex+0x2fc>
 8015212:	42ae      	cmp	r6, r5
 8015214:	d11a      	bne.n	801524c <__gethex+0x2fc>
 8015216:	2e01      	cmp	r6, #1
 8015218:	d112      	bne.n	8015240 <__gethex+0x2f0>
 801521a:	9a04      	ldr	r2, [sp, #16]
 801521c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015220:	6013      	str	r3, [r2, #0]
 8015222:	2301      	movs	r3, #1
 8015224:	6123      	str	r3, [r4, #16]
 8015226:	f8c9 3000 	str.w	r3, [r9]
 801522a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801522c:	2762      	movs	r7, #98	; 0x62
 801522e:	601c      	str	r4, [r3, #0]
 8015230:	e723      	b.n	801507a <__gethex+0x12a>
 8015232:	bf00      	nop
 8015234:	0802aee0 	.word	0x0802aee0
 8015238:	0802ae69 	.word	0x0802ae69
 801523c:	0802ae7a 	.word	0x0802ae7a
 8015240:	1e71      	subs	r1, r6, #1
 8015242:	4620      	mov	r0, r4
 8015244:	f000 fe58 	bl	8015ef8 <__any_on>
 8015248:	2800      	cmp	r0, #0
 801524a:	d1e6      	bne.n	801521a <__gethex+0x2ca>
 801524c:	ee18 0a10 	vmov	r0, s16
 8015250:	4621      	mov	r1, r4
 8015252:	f000 f9f1 	bl	8015638 <_Bfree>
 8015256:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015258:	2300      	movs	r3, #0
 801525a:	6013      	str	r3, [r2, #0]
 801525c:	2750      	movs	r7, #80	; 0x50
 801525e:	e70c      	b.n	801507a <__gethex+0x12a>
 8015260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015262:	2b00      	cmp	r3, #0
 8015264:	d1f2      	bne.n	801524c <__gethex+0x2fc>
 8015266:	e7d8      	b.n	801521a <__gethex+0x2ca>
 8015268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801526a:	2b00      	cmp	r3, #0
 801526c:	d1d5      	bne.n	801521a <__gethex+0x2ca>
 801526e:	e7ed      	b.n	801524c <__gethex+0x2fc>
 8015270:	1e6f      	subs	r7, r5, #1
 8015272:	f1ba 0f00 	cmp.w	sl, #0
 8015276:	d131      	bne.n	80152dc <__gethex+0x38c>
 8015278:	b127      	cbz	r7, 8015284 <__gethex+0x334>
 801527a:	4639      	mov	r1, r7
 801527c:	4620      	mov	r0, r4
 801527e:	f000 fe3b 	bl	8015ef8 <__any_on>
 8015282:	4682      	mov	sl, r0
 8015284:	117b      	asrs	r3, r7, #5
 8015286:	2101      	movs	r1, #1
 8015288:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801528c:	f007 071f 	and.w	r7, r7, #31
 8015290:	fa01 f707 	lsl.w	r7, r1, r7
 8015294:	421f      	tst	r7, r3
 8015296:	4629      	mov	r1, r5
 8015298:	4620      	mov	r0, r4
 801529a:	bf18      	it	ne
 801529c:	f04a 0a02 	orrne.w	sl, sl, #2
 80152a0:	1b76      	subs	r6, r6, r5
 80152a2:	f7ff fded 	bl	8014e80 <rshift>
 80152a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80152aa:	2702      	movs	r7, #2
 80152ac:	f1ba 0f00 	cmp.w	sl, #0
 80152b0:	d048      	beq.n	8015344 <__gethex+0x3f4>
 80152b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80152b6:	2b02      	cmp	r3, #2
 80152b8:	d015      	beq.n	80152e6 <__gethex+0x396>
 80152ba:	2b03      	cmp	r3, #3
 80152bc:	d017      	beq.n	80152ee <__gethex+0x39e>
 80152be:	2b01      	cmp	r3, #1
 80152c0:	d109      	bne.n	80152d6 <__gethex+0x386>
 80152c2:	f01a 0f02 	tst.w	sl, #2
 80152c6:	d006      	beq.n	80152d6 <__gethex+0x386>
 80152c8:	f8d9 0000 	ldr.w	r0, [r9]
 80152cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80152d0:	f01a 0f01 	tst.w	sl, #1
 80152d4:	d10e      	bne.n	80152f4 <__gethex+0x3a4>
 80152d6:	f047 0710 	orr.w	r7, r7, #16
 80152da:	e033      	b.n	8015344 <__gethex+0x3f4>
 80152dc:	f04f 0a01 	mov.w	sl, #1
 80152e0:	e7d0      	b.n	8015284 <__gethex+0x334>
 80152e2:	2701      	movs	r7, #1
 80152e4:	e7e2      	b.n	80152ac <__gethex+0x35c>
 80152e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152e8:	f1c3 0301 	rsb	r3, r3, #1
 80152ec:	9315      	str	r3, [sp, #84]	; 0x54
 80152ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d0f0      	beq.n	80152d6 <__gethex+0x386>
 80152f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80152f8:	f104 0314 	add.w	r3, r4, #20
 80152fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015300:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015304:	f04f 0c00 	mov.w	ip, #0
 8015308:	4618      	mov	r0, r3
 801530a:	f853 2b04 	ldr.w	r2, [r3], #4
 801530e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015312:	d01c      	beq.n	801534e <__gethex+0x3fe>
 8015314:	3201      	adds	r2, #1
 8015316:	6002      	str	r2, [r0, #0]
 8015318:	2f02      	cmp	r7, #2
 801531a:	f104 0314 	add.w	r3, r4, #20
 801531e:	d13f      	bne.n	80153a0 <__gethex+0x450>
 8015320:	f8d8 2000 	ldr.w	r2, [r8]
 8015324:	3a01      	subs	r2, #1
 8015326:	42b2      	cmp	r2, r6
 8015328:	d10a      	bne.n	8015340 <__gethex+0x3f0>
 801532a:	1171      	asrs	r1, r6, #5
 801532c:	2201      	movs	r2, #1
 801532e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015332:	f006 061f 	and.w	r6, r6, #31
 8015336:	fa02 f606 	lsl.w	r6, r2, r6
 801533a:	421e      	tst	r6, r3
 801533c:	bf18      	it	ne
 801533e:	4617      	movne	r7, r2
 8015340:	f047 0720 	orr.w	r7, r7, #32
 8015344:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015346:	601c      	str	r4, [r3, #0]
 8015348:	9b04      	ldr	r3, [sp, #16]
 801534a:	601d      	str	r5, [r3, #0]
 801534c:	e695      	b.n	801507a <__gethex+0x12a>
 801534e:	4299      	cmp	r1, r3
 8015350:	f843 cc04 	str.w	ip, [r3, #-4]
 8015354:	d8d8      	bhi.n	8015308 <__gethex+0x3b8>
 8015356:	68a3      	ldr	r3, [r4, #8]
 8015358:	459b      	cmp	fp, r3
 801535a:	db19      	blt.n	8015390 <__gethex+0x440>
 801535c:	6861      	ldr	r1, [r4, #4]
 801535e:	ee18 0a10 	vmov	r0, s16
 8015362:	3101      	adds	r1, #1
 8015364:	f000 f928 	bl	80155b8 <_Balloc>
 8015368:	4681      	mov	r9, r0
 801536a:	b918      	cbnz	r0, 8015374 <__gethex+0x424>
 801536c:	4b1a      	ldr	r3, [pc, #104]	; (80153d8 <__gethex+0x488>)
 801536e:	4602      	mov	r2, r0
 8015370:	2184      	movs	r1, #132	; 0x84
 8015372:	e6a8      	b.n	80150c6 <__gethex+0x176>
 8015374:	6922      	ldr	r2, [r4, #16]
 8015376:	3202      	adds	r2, #2
 8015378:	f104 010c 	add.w	r1, r4, #12
 801537c:	0092      	lsls	r2, r2, #2
 801537e:	300c      	adds	r0, #12
 8015380:	f000 f90c 	bl	801559c <memcpy>
 8015384:	4621      	mov	r1, r4
 8015386:	ee18 0a10 	vmov	r0, s16
 801538a:	f000 f955 	bl	8015638 <_Bfree>
 801538e:	464c      	mov	r4, r9
 8015390:	6923      	ldr	r3, [r4, #16]
 8015392:	1c5a      	adds	r2, r3, #1
 8015394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015398:	6122      	str	r2, [r4, #16]
 801539a:	2201      	movs	r2, #1
 801539c:	615a      	str	r2, [r3, #20]
 801539e:	e7bb      	b.n	8015318 <__gethex+0x3c8>
 80153a0:	6922      	ldr	r2, [r4, #16]
 80153a2:	455a      	cmp	r2, fp
 80153a4:	dd0b      	ble.n	80153be <__gethex+0x46e>
 80153a6:	2101      	movs	r1, #1
 80153a8:	4620      	mov	r0, r4
 80153aa:	f7ff fd69 	bl	8014e80 <rshift>
 80153ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153b2:	3501      	adds	r5, #1
 80153b4:	42ab      	cmp	r3, r5
 80153b6:	f6ff aed0 	blt.w	801515a <__gethex+0x20a>
 80153ba:	2701      	movs	r7, #1
 80153bc:	e7c0      	b.n	8015340 <__gethex+0x3f0>
 80153be:	f016 061f 	ands.w	r6, r6, #31
 80153c2:	d0fa      	beq.n	80153ba <__gethex+0x46a>
 80153c4:	4453      	add	r3, sl
 80153c6:	f1c6 0620 	rsb	r6, r6, #32
 80153ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80153ce:	f000 f9e5 	bl	801579c <__hi0bits>
 80153d2:	42b0      	cmp	r0, r6
 80153d4:	dbe7      	blt.n	80153a6 <__gethex+0x456>
 80153d6:	e7f0      	b.n	80153ba <__gethex+0x46a>
 80153d8:	0802ae69 	.word	0x0802ae69

080153dc <L_shift>:
 80153dc:	f1c2 0208 	rsb	r2, r2, #8
 80153e0:	0092      	lsls	r2, r2, #2
 80153e2:	b570      	push	{r4, r5, r6, lr}
 80153e4:	f1c2 0620 	rsb	r6, r2, #32
 80153e8:	6843      	ldr	r3, [r0, #4]
 80153ea:	6804      	ldr	r4, [r0, #0]
 80153ec:	fa03 f506 	lsl.w	r5, r3, r6
 80153f0:	432c      	orrs	r4, r5
 80153f2:	40d3      	lsrs	r3, r2
 80153f4:	6004      	str	r4, [r0, #0]
 80153f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80153fa:	4288      	cmp	r0, r1
 80153fc:	d3f4      	bcc.n	80153e8 <L_shift+0xc>
 80153fe:	bd70      	pop	{r4, r5, r6, pc}

08015400 <__match>:
 8015400:	b530      	push	{r4, r5, lr}
 8015402:	6803      	ldr	r3, [r0, #0]
 8015404:	3301      	adds	r3, #1
 8015406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801540a:	b914      	cbnz	r4, 8015412 <__match+0x12>
 801540c:	6003      	str	r3, [r0, #0]
 801540e:	2001      	movs	r0, #1
 8015410:	bd30      	pop	{r4, r5, pc}
 8015412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015416:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801541a:	2d19      	cmp	r5, #25
 801541c:	bf98      	it	ls
 801541e:	3220      	addls	r2, #32
 8015420:	42a2      	cmp	r2, r4
 8015422:	d0f0      	beq.n	8015406 <__match+0x6>
 8015424:	2000      	movs	r0, #0
 8015426:	e7f3      	b.n	8015410 <__match+0x10>

08015428 <__hexnan>:
 8015428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542c:	680b      	ldr	r3, [r1, #0]
 801542e:	115e      	asrs	r6, r3, #5
 8015430:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015434:	f013 031f 	ands.w	r3, r3, #31
 8015438:	b087      	sub	sp, #28
 801543a:	bf18      	it	ne
 801543c:	3604      	addne	r6, #4
 801543e:	2500      	movs	r5, #0
 8015440:	1f37      	subs	r7, r6, #4
 8015442:	4690      	mov	r8, r2
 8015444:	6802      	ldr	r2, [r0, #0]
 8015446:	9301      	str	r3, [sp, #4]
 8015448:	4682      	mov	sl, r0
 801544a:	f846 5c04 	str.w	r5, [r6, #-4]
 801544e:	46b9      	mov	r9, r7
 8015450:	463c      	mov	r4, r7
 8015452:	9502      	str	r5, [sp, #8]
 8015454:	46ab      	mov	fp, r5
 8015456:	7851      	ldrb	r1, [r2, #1]
 8015458:	1c53      	adds	r3, r2, #1
 801545a:	9303      	str	r3, [sp, #12]
 801545c:	b341      	cbz	r1, 80154b0 <__hexnan+0x88>
 801545e:	4608      	mov	r0, r1
 8015460:	9205      	str	r2, [sp, #20]
 8015462:	9104      	str	r1, [sp, #16]
 8015464:	f7ff fd5e 	bl	8014f24 <__hexdig_fun>
 8015468:	2800      	cmp	r0, #0
 801546a:	d14f      	bne.n	801550c <__hexnan+0xe4>
 801546c:	9904      	ldr	r1, [sp, #16]
 801546e:	9a05      	ldr	r2, [sp, #20]
 8015470:	2920      	cmp	r1, #32
 8015472:	d818      	bhi.n	80154a6 <__hexnan+0x7e>
 8015474:	9b02      	ldr	r3, [sp, #8]
 8015476:	459b      	cmp	fp, r3
 8015478:	dd13      	ble.n	80154a2 <__hexnan+0x7a>
 801547a:	454c      	cmp	r4, r9
 801547c:	d206      	bcs.n	801548c <__hexnan+0x64>
 801547e:	2d07      	cmp	r5, #7
 8015480:	dc04      	bgt.n	801548c <__hexnan+0x64>
 8015482:	462a      	mov	r2, r5
 8015484:	4649      	mov	r1, r9
 8015486:	4620      	mov	r0, r4
 8015488:	f7ff ffa8 	bl	80153dc <L_shift>
 801548c:	4544      	cmp	r4, r8
 801548e:	d950      	bls.n	8015532 <__hexnan+0x10a>
 8015490:	2300      	movs	r3, #0
 8015492:	f1a4 0904 	sub.w	r9, r4, #4
 8015496:	f844 3c04 	str.w	r3, [r4, #-4]
 801549a:	f8cd b008 	str.w	fp, [sp, #8]
 801549e:	464c      	mov	r4, r9
 80154a0:	461d      	mov	r5, r3
 80154a2:	9a03      	ldr	r2, [sp, #12]
 80154a4:	e7d7      	b.n	8015456 <__hexnan+0x2e>
 80154a6:	2929      	cmp	r1, #41	; 0x29
 80154a8:	d156      	bne.n	8015558 <__hexnan+0x130>
 80154aa:	3202      	adds	r2, #2
 80154ac:	f8ca 2000 	str.w	r2, [sl]
 80154b0:	f1bb 0f00 	cmp.w	fp, #0
 80154b4:	d050      	beq.n	8015558 <__hexnan+0x130>
 80154b6:	454c      	cmp	r4, r9
 80154b8:	d206      	bcs.n	80154c8 <__hexnan+0xa0>
 80154ba:	2d07      	cmp	r5, #7
 80154bc:	dc04      	bgt.n	80154c8 <__hexnan+0xa0>
 80154be:	462a      	mov	r2, r5
 80154c0:	4649      	mov	r1, r9
 80154c2:	4620      	mov	r0, r4
 80154c4:	f7ff ff8a 	bl	80153dc <L_shift>
 80154c8:	4544      	cmp	r4, r8
 80154ca:	d934      	bls.n	8015536 <__hexnan+0x10e>
 80154cc:	f1a8 0204 	sub.w	r2, r8, #4
 80154d0:	4623      	mov	r3, r4
 80154d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80154d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80154da:	429f      	cmp	r7, r3
 80154dc:	d2f9      	bcs.n	80154d2 <__hexnan+0xaa>
 80154de:	1b3b      	subs	r3, r7, r4
 80154e0:	f023 0303 	bic.w	r3, r3, #3
 80154e4:	3304      	adds	r3, #4
 80154e6:	3401      	adds	r4, #1
 80154e8:	3e03      	subs	r6, #3
 80154ea:	42b4      	cmp	r4, r6
 80154ec:	bf88      	it	hi
 80154ee:	2304      	movhi	r3, #4
 80154f0:	4443      	add	r3, r8
 80154f2:	2200      	movs	r2, #0
 80154f4:	f843 2b04 	str.w	r2, [r3], #4
 80154f8:	429f      	cmp	r7, r3
 80154fa:	d2fb      	bcs.n	80154f4 <__hexnan+0xcc>
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	b91b      	cbnz	r3, 8015508 <__hexnan+0xe0>
 8015500:	4547      	cmp	r7, r8
 8015502:	d127      	bne.n	8015554 <__hexnan+0x12c>
 8015504:	2301      	movs	r3, #1
 8015506:	603b      	str	r3, [r7, #0]
 8015508:	2005      	movs	r0, #5
 801550a:	e026      	b.n	801555a <__hexnan+0x132>
 801550c:	3501      	adds	r5, #1
 801550e:	2d08      	cmp	r5, #8
 8015510:	f10b 0b01 	add.w	fp, fp, #1
 8015514:	dd06      	ble.n	8015524 <__hexnan+0xfc>
 8015516:	4544      	cmp	r4, r8
 8015518:	d9c3      	bls.n	80154a2 <__hexnan+0x7a>
 801551a:	2300      	movs	r3, #0
 801551c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015520:	2501      	movs	r5, #1
 8015522:	3c04      	subs	r4, #4
 8015524:	6822      	ldr	r2, [r4, #0]
 8015526:	f000 000f 	and.w	r0, r0, #15
 801552a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801552e:	6022      	str	r2, [r4, #0]
 8015530:	e7b7      	b.n	80154a2 <__hexnan+0x7a>
 8015532:	2508      	movs	r5, #8
 8015534:	e7b5      	b.n	80154a2 <__hexnan+0x7a>
 8015536:	9b01      	ldr	r3, [sp, #4]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d0df      	beq.n	80154fc <__hexnan+0xd4>
 801553c:	f04f 32ff 	mov.w	r2, #4294967295
 8015540:	f1c3 0320 	rsb	r3, r3, #32
 8015544:	fa22 f303 	lsr.w	r3, r2, r3
 8015548:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801554c:	401a      	ands	r2, r3
 801554e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015552:	e7d3      	b.n	80154fc <__hexnan+0xd4>
 8015554:	3f04      	subs	r7, #4
 8015556:	e7d1      	b.n	80154fc <__hexnan+0xd4>
 8015558:	2004      	movs	r0, #4
 801555a:	b007      	add	sp, #28
 801555c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015560 <_localeconv_r>:
 8015560:	4800      	ldr	r0, [pc, #0]	; (8015564 <_localeconv_r+0x4>)
 8015562:	4770      	bx	lr
 8015564:	2000019c 	.word	0x2000019c

08015568 <malloc>:
 8015568:	4b02      	ldr	r3, [pc, #8]	; (8015574 <malloc+0xc>)
 801556a:	4601      	mov	r1, r0
 801556c:	6818      	ldr	r0, [r3, #0]
 801556e:	f000 bd67 	b.w	8016040 <_malloc_r>
 8015572:	bf00      	nop
 8015574:	20000044 	.word	0x20000044

08015578 <__ascii_mbtowc>:
 8015578:	b082      	sub	sp, #8
 801557a:	b901      	cbnz	r1, 801557e <__ascii_mbtowc+0x6>
 801557c:	a901      	add	r1, sp, #4
 801557e:	b142      	cbz	r2, 8015592 <__ascii_mbtowc+0x1a>
 8015580:	b14b      	cbz	r3, 8015596 <__ascii_mbtowc+0x1e>
 8015582:	7813      	ldrb	r3, [r2, #0]
 8015584:	600b      	str	r3, [r1, #0]
 8015586:	7812      	ldrb	r2, [r2, #0]
 8015588:	1e10      	subs	r0, r2, #0
 801558a:	bf18      	it	ne
 801558c:	2001      	movne	r0, #1
 801558e:	b002      	add	sp, #8
 8015590:	4770      	bx	lr
 8015592:	4610      	mov	r0, r2
 8015594:	e7fb      	b.n	801558e <__ascii_mbtowc+0x16>
 8015596:	f06f 0001 	mvn.w	r0, #1
 801559a:	e7f8      	b.n	801558e <__ascii_mbtowc+0x16>

0801559c <memcpy>:
 801559c:	440a      	add	r2, r1
 801559e:	4291      	cmp	r1, r2
 80155a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80155a4:	d100      	bne.n	80155a8 <memcpy+0xc>
 80155a6:	4770      	bx	lr
 80155a8:	b510      	push	{r4, lr}
 80155aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155b2:	4291      	cmp	r1, r2
 80155b4:	d1f9      	bne.n	80155aa <memcpy+0xe>
 80155b6:	bd10      	pop	{r4, pc}

080155b8 <_Balloc>:
 80155b8:	b570      	push	{r4, r5, r6, lr}
 80155ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80155bc:	4604      	mov	r4, r0
 80155be:	460d      	mov	r5, r1
 80155c0:	b976      	cbnz	r6, 80155e0 <_Balloc+0x28>
 80155c2:	2010      	movs	r0, #16
 80155c4:	f7ff ffd0 	bl	8015568 <malloc>
 80155c8:	4602      	mov	r2, r0
 80155ca:	6260      	str	r0, [r4, #36]	; 0x24
 80155cc:	b920      	cbnz	r0, 80155d8 <_Balloc+0x20>
 80155ce:	4b18      	ldr	r3, [pc, #96]	; (8015630 <_Balloc+0x78>)
 80155d0:	4818      	ldr	r0, [pc, #96]	; (8015634 <_Balloc+0x7c>)
 80155d2:	2166      	movs	r1, #102	; 0x66
 80155d4:	f7fe fdaa 	bl	801412c <__assert_func>
 80155d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155dc:	6006      	str	r6, [r0, #0]
 80155de:	60c6      	str	r6, [r0, #12]
 80155e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80155e2:	68f3      	ldr	r3, [r6, #12]
 80155e4:	b183      	cbz	r3, 8015608 <_Balloc+0x50>
 80155e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155ee:	b9b8      	cbnz	r0, 8015620 <_Balloc+0x68>
 80155f0:	2101      	movs	r1, #1
 80155f2:	fa01 f605 	lsl.w	r6, r1, r5
 80155f6:	1d72      	adds	r2, r6, #5
 80155f8:	0092      	lsls	r2, r2, #2
 80155fa:	4620      	mov	r0, r4
 80155fc:	f000 fc9d 	bl	8015f3a <_calloc_r>
 8015600:	b160      	cbz	r0, 801561c <_Balloc+0x64>
 8015602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015606:	e00e      	b.n	8015626 <_Balloc+0x6e>
 8015608:	2221      	movs	r2, #33	; 0x21
 801560a:	2104      	movs	r1, #4
 801560c:	4620      	mov	r0, r4
 801560e:	f000 fc94 	bl	8015f3a <_calloc_r>
 8015612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015614:	60f0      	str	r0, [r6, #12]
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1e4      	bne.n	80155e6 <_Balloc+0x2e>
 801561c:	2000      	movs	r0, #0
 801561e:	bd70      	pop	{r4, r5, r6, pc}
 8015620:	6802      	ldr	r2, [r0, #0]
 8015622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015626:	2300      	movs	r3, #0
 8015628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801562c:	e7f7      	b.n	801561e <_Balloc+0x66>
 801562e:	bf00      	nop
 8015630:	0802ac50 	.word	0x0802ac50
 8015634:	0802aef4 	.word	0x0802aef4

08015638 <_Bfree>:
 8015638:	b570      	push	{r4, r5, r6, lr}
 801563a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801563c:	4605      	mov	r5, r0
 801563e:	460c      	mov	r4, r1
 8015640:	b976      	cbnz	r6, 8015660 <_Bfree+0x28>
 8015642:	2010      	movs	r0, #16
 8015644:	f7ff ff90 	bl	8015568 <malloc>
 8015648:	4602      	mov	r2, r0
 801564a:	6268      	str	r0, [r5, #36]	; 0x24
 801564c:	b920      	cbnz	r0, 8015658 <_Bfree+0x20>
 801564e:	4b09      	ldr	r3, [pc, #36]	; (8015674 <_Bfree+0x3c>)
 8015650:	4809      	ldr	r0, [pc, #36]	; (8015678 <_Bfree+0x40>)
 8015652:	218a      	movs	r1, #138	; 0x8a
 8015654:	f7fe fd6a 	bl	801412c <__assert_func>
 8015658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801565c:	6006      	str	r6, [r0, #0]
 801565e:	60c6      	str	r6, [r0, #12]
 8015660:	b13c      	cbz	r4, 8015672 <_Bfree+0x3a>
 8015662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015664:	6862      	ldr	r2, [r4, #4]
 8015666:	68db      	ldr	r3, [r3, #12]
 8015668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801566c:	6021      	str	r1, [r4, #0]
 801566e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015672:	bd70      	pop	{r4, r5, r6, pc}
 8015674:	0802ac50 	.word	0x0802ac50
 8015678:	0802aef4 	.word	0x0802aef4

0801567c <__multadd>:
 801567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015680:	690d      	ldr	r5, [r1, #16]
 8015682:	4607      	mov	r7, r0
 8015684:	460c      	mov	r4, r1
 8015686:	461e      	mov	r6, r3
 8015688:	f101 0c14 	add.w	ip, r1, #20
 801568c:	2000      	movs	r0, #0
 801568e:	f8dc 3000 	ldr.w	r3, [ip]
 8015692:	b299      	uxth	r1, r3
 8015694:	fb02 6101 	mla	r1, r2, r1, r6
 8015698:	0c1e      	lsrs	r6, r3, #16
 801569a:	0c0b      	lsrs	r3, r1, #16
 801569c:	fb02 3306 	mla	r3, r2, r6, r3
 80156a0:	b289      	uxth	r1, r1
 80156a2:	3001      	adds	r0, #1
 80156a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80156a8:	4285      	cmp	r5, r0
 80156aa:	f84c 1b04 	str.w	r1, [ip], #4
 80156ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80156b2:	dcec      	bgt.n	801568e <__multadd+0x12>
 80156b4:	b30e      	cbz	r6, 80156fa <__multadd+0x7e>
 80156b6:	68a3      	ldr	r3, [r4, #8]
 80156b8:	42ab      	cmp	r3, r5
 80156ba:	dc19      	bgt.n	80156f0 <__multadd+0x74>
 80156bc:	6861      	ldr	r1, [r4, #4]
 80156be:	4638      	mov	r0, r7
 80156c0:	3101      	adds	r1, #1
 80156c2:	f7ff ff79 	bl	80155b8 <_Balloc>
 80156c6:	4680      	mov	r8, r0
 80156c8:	b928      	cbnz	r0, 80156d6 <__multadd+0x5a>
 80156ca:	4602      	mov	r2, r0
 80156cc:	4b0c      	ldr	r3, [pc, #48]	; (8015700 <__multadd+0x84>)
 80156ce:	480d      	ldr	r0, [pc, #52]	; (8015704 <__multadd+0x88>)
 80156d0:	21b5      	movs	r1, #181	; 0xb5
 80156d2:	f7fe fd2b 	bl	801412c <__assert_func>
 80156d6:	6922      	ldr	r2, [r4, #16]
 80156d8:	3202      	adds	r2, #2
 80156da:	f104 010c 	add.w	r1, r4, #12
 80156de:	0092      	lsls	r2, r2, #2
 80156e0:	300c      	adds	r0, #12
 80156e2:	f7ff ff5b 	bl	801559c <memcpy>
 80156e6:	4621      	mov	r1, r4
 80156e8:	4638      	mov	r0, r7
 80156ea:	f7ff ffa5 	bl	8015638 <_Bfree>
 80156ee:	4644      	mov	r4, r8
 80156f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156f4:	3501      	adds	r5, #1
 80156f6:	615e      	str	r6, [r3, #20]
 80156f8:	6125      	str	r5, [r4, #16]
 80156fa:	4620      	mov	r0, r4
 80156fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015700:	0802ae69 	.word	0x0802ae69
 8015704:	0802aef4 	.word	0x0802aef4

08015708 <__s2b>:
 8015708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801570c:	460c      	mov	r4, r1
 801570e:	4615      	mov	r5, r2
 8015710:	461f      	mov	r7, r3
 8015712:	2209      	movs	r2, #9
 8015714:	3308      	adds	r3, #8
 8015716:	4606      	mov	r6, r0
 8015718:	fb93 f3f2 	sdiv	r3, r3, r2
 801571c:	2100      	movs	r1, #0
 801571e:	2201      	movs	r2, #1
 8015720:	429a      	cmp	r2, r3
 8015722:	db09      	blt.n	8015738 <__s2b+0x30>
 8015724:	4630      	mov	r0, r6
 8015726:	f7ff ff47 	bl	80155b8 <_Balloc>
 801572a:	b940      	cbnz	r0, 801573e <__s2b+0x36>
 801572c:	4602      	mov	r2, r0
 801572e:	4b19      	ldr	r3, [pc, #100]	; (8015794 <__s2b+0x8c>)
 8015730:	4819      	ldr	r0, [pc, #100]	; (8015798 <__s2b+0x90>)
 8015732:	21ce      	movs	r1, #206	; 0xce
 8015734:	f7fe fcfa 	bl	801412c <__assert_func>
 8015738:	0052      	lsls	r2, r2, #1
 801573a:	3101      	adds	r1, #1
 801573c:	e7f0      	b.n	8015720 <__s2b+0x18>
 801573e:	9b08      	ldr	r3, [sp, #32]
 8015740:	6143      	str	r3, [r0, #20]
 8015742:	2d09      	cmp	r5, #9
 8015744:	f04f 0301 	mov.w	r3, #1
 8015748:	6103      	str	r3, [r0, #16]
 801574a:	dd16      	ble.n	801577a <__s2b+0x72>
 801574c:	f104 0909 	add.w	r9, r4, #9
 8015750:	46c8      	mov	r8, r9
 8015752:	442c      	add	r4, r5
 8015754:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015758:	4601      	mov	r1, r0
 801575a:	3b30      	subs	r3, #48	; 0x30
 801575c:	220a      	movs	r2, #10
 801575e:	4630      	mov	r0, r6
 8015760:	f7ff ff8c 	bl	801567c <__multadd>
 8015764:	45a0      	cmp	r8, r4
 8015766:	d1f5      	bne.n	8015754 <__s2b+0x4c>
 8015768:	f1a5 0408 	sub.w	r4, r5, #8
 801576c:	444c      	add	r4, r9
 801576e:	1b2d      	subs	r5, r5, r4
 8015770:	1963      	adds	r3, r4, r5
 8015772:	42bb      	cmp	r3, r7
 8015774:	db04      	blt.n	8015780 <__s2b+0x78>
 8015776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801577a:	340a      	adds	r4, #10
 801577c:	2509      	movs	r5, #9
 801577e:	e7f6      	b.n	801576e <__s2b+0x66>
 8015780:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015784:	4601      	mov	r1, r0
 8015786:	3b30      	subs	r3, #48	; 0x30
 8015788:	220a      	movs	r2, #10
 801578a:	4630      	mov	r0, r6
 801578c:	f7ff ff76 	bl	801567c <__multadd>
 8015790:	e7ee      	b.n	8015770 <__s2b+0x68>
 8015792:	bf00      	nop
 8015794:	0802ae69 	.word	0x0802ae69
 8015798:	0802aef4 	.word	0x0802aef4

0801579c <__hi0bits>:
 801579c:	0c03      	lsrs	r3, r0, #16
 801579e:	041b      	lsls	r3, r3, #16
 80157a0:	b9d3      	cbnz	r3, 80157d8 <__hi0bits+0x3c>
 80157a2:	0400      	lsls	r0, r0, #16
 80157a4:	2310      	movs	r3, #16
 80157a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80157aa:	bf04      	itt	eq
 80157ac:	0200      	lsleq	r0, r0, #8
 80157ae:	3308      	addeq	r3, #8
 80157b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80157b4:	bf04      	itt	eq
 80157b6:	0100      	lsleq	r0, r0, #4
 80157b8:	3304      	addeq	r3, #4
 80157ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80157be:	bf04      	itt	eq
 80157c0:	0080      	lsleq	r0, r0, #2
 80157c2:	3302      	addeq	r3, #2
 80157c4:	2800      	cmp	r0, #0
 80157c6:	db05      	blt.n	80157d4 <__hi0bits+0x38>
 80157c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80157cc:	f103 0301 	add.w	r3, r3, #1
 80157d0:	bf08      	it	eq
 80157d2:	2320      	moveq	r3, #32
 80157d4:	4618      	mov	r0, r3
 80157d6:	4770      	bx	lr
 80157d8:	2300      	movs	r3, #0
 80157da:	e7e4      	b.n	80157a6 <__hi0bits+0xa>

080157dc <__lo0bits>:
 80157dc:	6803      	ldr	r3, [r0, #0]
 80157de:	f013 0207 	ands.w	r2, r3, #7
 80157e2:	4601      	mov	r1, r0
 80157e4:	d00b      	beq.n	80157fe <__lo0bits+0x22>
 80157e6:	07da      	lsls	r2, r3, #31
 80157e8:	d423      	bmi.n	8015832 <__lo0bits+0x56>
 80157ea:	0798      	lsls	r0, r3, #30
 80157ec:	bf49      	itett	mi
 80157ee:	085b      	lsrmi	r3, r3, #1
 80157f0:	089b      	lsrpl	r3, r3, #2
 80157f2:	2001      	movmi	r0, #1
 80157f4:	600b      	strmi	r3, [r1, #0]
 80157f6:	bf5c      	itt	pl
 80157f8:	600b      	strpl	r3, [r1, #0]
 80157fa:	2002      	movpl	r0, #2
 80157fc:	4770      	bx	lr
 80157fe:	b298      	uxth	r0, r3
 8015800:	b9a8      	cbnz	r0, 801582e <__lo0bits+0x52>
 8015802:	0c1b      	lsrs	r3, r3, #16
 8015804:	2010      	movs	r0, #16
 8015806:	b2da      	uxtb	r2, r3
 8015808:	b90a      	cbnz	r2, 801580e <__lo0bits+0x32>
 801580a:	3008      	adds	r0, #8
 801580c:	0a1b      	lsrs	r3, r3, #8
 801580e:	071a      	lsls	r2, r3, #28
 8015810:	bf04      	itt	eq
 8015812:	091b      	lsreq	r3, r3, #4
 8015814:	3004      	addeq	r0, #4
 8015816:	079a      	lsls	r2, r3, #30
 8015818:	bf04      	itt	eq
 801581a:	089b      	lsreq	r3, r3, #2
 801581c:	3002      	addeq	r0, #2
 801581e:	07da      	lsls	r2, r3, #31
 8015820:	d403      	bmi.n	801582a <__lo0bits+0x4e>
 8015822:	085b      	lsrs	r3, r3, #1
 8015824:	f100 0001 	add.w	r0, r0, #1
 8015828:	d005      	beq.n	8015836 <__lo0bits+0x5a>
 801582a:	600b      	str	r3, [r1, #0]
 801582c:	4770      	bx	lr
 801582e:	4610      	mov	r0, r2
 8015830:	e7e9      	b.n	8015806 <__lo0bits+0x2a>
 8015832:	2000      	movs	r0, #0
 8015834:	4770      	bx	lr
 8015836:	2020      	movs	r0, #32
 8015838:	4770      	bx	lr
	...

0801583c <__i2b>:
 801583c:	b510      	push	{r4, lr}
 801583e:	460c      	mov	r4, r1
 8015840:	2101      	movs	r1, #1
 8015842:	f7ff feb9 	bl	80155b8 <_Balloc>
 8015846:	4602      	mov	r2, r0
 8015848:	b928      	cbnz	r0, 8015856 <__i2b+0x1a>
 801584a:	4b05      	ldr	r3, [pc, #20]	; (8015860 <__i2b+0x24>)
 801584c:	4805      	ldr	r0, [pc, #20]	; (8015864 <__i2b+0x28>)
 801584e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015852:	f7fe fc6b 	bl	801412c <__assert_func>
 8015856:	2301      	movs	r3, #1
 8015858:	6144      	str	r4, [r0, #20]
 801585a:	6103      	str	r3, [r0, #16]
 801585c:	bd10      	pop	{r4, pc}
 801585e:	bf00      	nop
 8015860:	0802ae69 	.word	0x0802ae69
 8015864:	0802aef4 	.word	0x0802aef4

08015868 <__multiply>:
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	4691      	mov	r9, r2
 801586e:	690a      	ldr	r2, [r1, #16]
 8015870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015874:	429a      	cmp	r2, r3
 8015876:	bfb8      	it	lt
 8015878:	460b      	movlt	r3, r1
 801587a:	460c      	mov	r4, r1
 801587c:	bfbc      	itt	lt
 801587e:	464c      	movlt	r4, r9
 8015880:	4699      	movlt	r9, r3
 8015882:	6927      	ldr	r7, [r4, #16]
 8015884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015888:	68a3      	ldr	r3, [r4, #8]
 801588a:	6861      	ldr	r1, [r4, #4]
 801588c:	eb07 060a 	add.w	r6, r7, sl
 8015890:	42b3      	cmp	r3, r6
 8015892:	b085      	sub	sp, #20
 8015894:	bfb8      	it	lt
 8015896:	3101      	addlt	r1, #1
 8015898:	f7ff fe8e 	bl	80155b8 <_Balloc>
 801589c:	b930      	cbnz	r0, 80158ac <__multiply+0x44>
 801589e:	4602      	mov	r2, r0
 80158a0:	4b44      	ldr	r3, [pc, #272]	; (80159b4 <__multiply+0x14c>)
 80158a2:	4845      	ldr	r0, [pc, #276]	; (80159b8 <__multiply+0x150>)
 80158a4:	f240 115d 	movw	r1, #349	; 0x15d
 80158a8:	f7fe fc40 	bl	801412c <__assert_func>
 80158ac:	f100 0514 	add.w	r5, r0, #20
 80158b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80158b4:	462b      	mov	r3, r5
 80158b6:	2200      	movs	r2, #0
 80158b8:	4543      	cmp	r3, r8
 80158ba:	d321      	bcc.n	8015900 <__multiply+0x98>
 80158bc:	f104 0314 	add.w	r3, r4, #20
 80158c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80158c4:	f109 0314 	add.w	r3, r9, #20
 80158c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80158cc:	9202      	str	r2, [sp, #8]
 80158ce:	1b3a      	subs	r2, r7, r4
 80158d0:	3a15      	subs	r2, #21
 80158d2:	f022 0203 	bic.w	r2, r2, #3
 80158d6:	3204      	adds	r2, #4
 80158d8:	f104 0115 	add.w	r1, r4, #21
 80158dc:	428f      	cmp	r7, r1
 80158de:	bf38      	it	cc
 80158e0:	2204      	movcc	r2, #4
 80158e2:	9201      	str	r2, [sp, #4]
 80158e4:	9a02      	ldr	r2, [sp, #8]
 80158e6:	9303      	str	r3, [sp, #12]
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d80c      	bhi.n	8015906 <__multiply+0x9e>
 80158ec:	2e00      	cmp	r6, #0
 80158ee:	dd03      	ble.n	80158f8 <__multiply+0x90>
 80158f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d05a      	beq.n	80159ae <__multiply+0x146>
 80158f8:	6106      	str	r6, [r0, #16]
 80158fa:	b005      	add	sp, #20
 80158fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015900:	f843 2b04 	str.w	r2, [r3], #4
 8015904:	e7d8      	b.n	80158b8 <__multiply+0x50>
 8015906:	f8b3 a000 	ldrh.w	sl, [r3]
 801590a:	f1ba 0f00 	cmp.w	sl, #0
 801590e:	d024      	beq.n	801595a <__multiply+0xf2>
 8015910:	f104 0e14 	add.w	lr, r4, #20
 8015914:	46a9      	mov	r9, r5
 8015916:	f04f 0c00 	mov.w	ip, #0
 801591a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801591e:	f8d9 1000 	ldr.w	r1, [r9]
 8015922:	fa1f fb82 	uxth.w	fp, r2
 8015926:	b289      	uxth	r1, r1
 8015928:	fb0a 110b 	mla	r1, sl, fp, r1
 801592c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015930:	f8d9 2000 	ldr.w	r2, [r9]
 8015934:	4461      	add	r1, ip
 8015936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801593a:	fb0a c20b 	mla	r2, sl, fp, ip
 801593e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015942:	b289      	uxth	r1, r1
 8015944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015948:	4577      	cmp	r7, lr
 801594a:	f849 1b04 	str.w	r1, [r9], #4
 801594e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015952:	d8e2      	bhi.n	801591a <__multiply+0xb2>
 8015954:	9a01      	ldr	r2, [sp, #4]
 8015956:	f845 c002 	str.w	ip, [r5, r2]
 801595a:	9a03      	ldr	r2, [sp, #12]
 801595c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015960:	3304      	adds	r3, #4
 8015962:	f1b9 0f00 	cmp.w	r9, #0
 8015966:	d020      	beq.n	80159aa <__multiply+0x142>
 8015968:	6829      	ldr	r1, [r5, #0]
 801596a:	f104 0c14 	add.w	ip, r4, #20
 801596e:	46ae      	mov	lr, r5
 8015970:	f04f 0a00 	mov.w	sl, #0
 8015974:	f8bc b000 	ldrh.w	fp, [ip]
 8015978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801597c:	fb09 220b 	mla	r2, r9, fp, r2
 8015980:	4492      	add	sl, r2
 8015982:	b289      	uxth	r1, r1
 8015984:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015988:	f84e 1b04 	str.w	r1, [lr], #4
 801598c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015990:	f8be 1000 	ldrh.w	r1, [lr]
 8015994:	0c12      	lsrs	r2, r2, #16
 8015996:	fb09 1102 	mla	r1, r9, r2, r1
 801599a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801599e:	4567      	cmp	r7, ip
 80159a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159a4:	d8e6      	bhi.n	8015974 <__multiply+0x10c>
 80159a6:	9a01      	ldr	r2, [sp, #4]
 80159a8:	50a9      	str	r1, [r5, r2]
 80159aa:	3504      	adds	r5, #4
 80159ac:	e79a      	b.n	80158e4 <__multiply+0x7c>
 80159ae:	3e01      	subs	r6, #1
 80159b0:	e79c      	b.n	80158ec <__multiply+0x84>
 80159b2:	bf00      	nop
 80159b4:	0802ae69 	.word	0x0802ae69
 80159b8:	0802aef4 	.word	0x0802aef4

080159bc <__pow5mult>:
 80159bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159c0:	4615      	mov	r5, r2
 80159c2:	f012 0203 	ands.w	r2, r2, #3
 80159c6:	4606      	mov	r6, r0
 80159c8:	460f      	mov	r7, r1
 80159ca:	d007      	beq.n	80159dc <__pow5mult+0x20>
 80159cc:	4c25      	ldr	r4, [pc, #148]	; (8015a64 <__pow5mult+0xa8>)
 80159ce:	3a01      	subs	r2, #1
 80159d0:	2300      	movs	r3, #0
 80159d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80159d6:	f7ff fe51 	bl	801567c <__multadd>
 80159da:	4607      	mov	r7, r0
 80159dc:	10ad      	asrs	r5, r5, #2
 80159de:	d03d      	beq.n	8015a5c <__pow5mult+0xa0>
 80159e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80159e2:	b97c      	cbnz	r4, 8015a04 <__pow5mult+0x48>
 80159e4:	2010      	movs	r0, #16
 80159e6:	f7ff fdbf 	bl	8015568 <malloc>
 80159ea:	4602      	mov	r2, r0
 80159ec:	6270      	str	r0, [r6, #36]	; 0x24
 80159ee:	b928      	cbnz	r0, 80159fc <__pow5mult+0x40>
 80159f0:	4b1d      	ldr	r3, [pc, #116]	; (8015a68 <__pow5mult+0xac>)
 80159f2:	481e      	ldr	r0, [pc, #120]	; (8015a6c <__pow5mult+0xb0>)
 80159f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80159f8:	f7fe fb98 	bl	801412c <__assert_func>
 80159fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015a00:	6004      	str	r4, [r0, #0]
 8015a02:	60c4      	str	r4, [r0, #12]
 8015a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015a0c:	b94c      	cbnz	r4, 8015a22 <__pow5mult+0x66>
 8015a0e:	f240 2171 	movw	r1, #625	; 0x271
 8015a12:	4630      	mov	r0, r6
 8015a14:	f7ff ff12 	bl	801583c <__i2b>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015a1e:	4604      	mov	r4, r0
 8015a20:	6003      	str	r3, [r0, #0]
 8015a22:	f04f 0900 	mov.w	r9, #0
 8015a26:	07eb      	lsls	r3, r5, #31
 8015a28:	d50a      	bpl.n	8015a40 <__pow5mult+0x84>
 8015a2a:	4639      	mov	r1, r7
 8015a2c:	4622      	mov	r2, r4
 8015a2e:	4630      	mov	r0, r6
 8015a30:	f7ff ff1a 	bl	8015868 <__multiply>
 8015a34:	4639      	mov	r1, r7
 8015a36:	4680      	mov	r8, r0
 8015a38:	4630      	mov	r0, r6
 8015a3a:	f7ff fdfd 	bl	8015638 <_Bfree>
 8015a3e:	4647      	mov	r7, r8
 8015a40:	106d      	asrs	r5, r5, #1
 8015a42:	d00b      	beq.n	8015a5c <__pow5mult+0xa0>
 8015a44:	6820      	ldr	r0, [r4, #0]
 8015a46:	b938      	cbnz	r0, 8015a58 <__pow5mult+0x9c>
 8015a48:	4622      	mov	r2, r4
 8015a4a:	4621      	mov	r1, r4
 8015a4c:	4630      	mov	r0, r6
 8015a4e:	f7ff ff0b 	bl	8015868 <__multiply>
 8015a52:	6020      	str	r0, [r4, #0]
 8015a54:	f8c0 9000 	str.w	r9, [r0]
 8015a58:	4604      	mov	r4, r0
 8015a5a:	e7e4      	b.n	8015a26 <__pow5mult+0x6a>
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a62:	bf00      	nop
 8015a64:	0802b040 	.word	0x0802b040
 8015a68:	0802ac50 	.word	0x0802ac50
 8015a6c:	0802aef4 	.word	0x0802aef4

08015a70 <__lshift>:
 8015a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a74:	460c      	mov	r4, r1
 8015a76:	6849      	ldr	r1, [r1, #4]
 8015a78:	6923      	ldr	r3, [r4, #16]
 8015a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a7e:	68a3      	ldr	r3, [r4, #8]
 8015a80:	4607      	mov	r7, r0
 8015a82:	4691      	mov	r9, r2
 8015a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a88:	f108 0601 	add.w	r6, r8, #1
 8015a8c:	42b3      	cmp	r3, r6
 8015a8e:	db0b      	blt.n	8015aa8 <__lshift+0x38>
 8015a90:	4638      	mov	r0, r7
 8015a92:	f7ff fd91 	bl	80155b8 <_Balloc>
 8015a96:	4605      	mov	r5, r0
 8015a98:	b948      	cbnz	r0, 8015aae <__lshift+0x3e>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	4b2a      	ldr	r3, [pc, #168]	; (8015b48 <__lshift+0xd8>)
 8015a9e:	482b      	ldr	r0, [pc, #172]	; (8015b4c <__lshift+0xdc>)
 8015aa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015aa4:	f7fe fb42 	bl	801412c <__assert_func>
 8015aa8:	3101      	adds	r1, #1
 8015aaa:	005b      	lsls	r3, r3, #1
 8015aac:	e7ee      	b.n	8015a8c <__lshift+0x1c>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	f100 0114 	add.w	r1, r0, #20
 8015ab4:	f100 0210 	add.w	r2, r0, #16
 8015ab8:	4618      	mov	r0, r3
 8015aba:	4553      	cmp	r3, sl
 8015abc:	db37      	blt.n	8015b2e <__lshift+0xbe>
 8015abe:	6920      	ldr	r0, [r4, #16]
 8015ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ac4:	f104 0314 	add.w	r3, r4, #20
 8015ac8:	f019 091f 	ands.w	r9, r9, #31
 8015acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015ad4:	d02f      	beq.n	8015b36 <__lshift+0xc6>
 8015ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8015ada:	468a      	mov	sl, r1
 8015adc:	f04f 0c00 	mov.w	ip, #0
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	fa02 f209 	lsl.w	r2, r2, r9
 8015ae6:	ea42 020c 	orr.w	r2, r2, ip
 8015aea:	f84a 2b04 	str.w	r2, [sl], #4
 8015aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015af2:	4298      	cmp	r0, r3
 8015af4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015af8:	d8f2      	bhi.n	8015ae0 <__lshift+0x70>
 8015afa:	1b03      	subs	r3, r0, r4
 8015afc:	3b15      	subs	r3, #21
 8015afe:	f023 0303 	bic.w	r3, r3, #3
 8015b02:	3304      	adds	r3, #4
 8015b04:	f104 0215 	add.w	r2, r4, #21
 8015b08:	4290      	cmp	r0, r2
 8015b0a:	bf38      	it	cc
 8015b0c:	2304      	movcc	r3, #4
 8015b0e:	f841 c003 	str.w	ip, [r1, r3]
 8015b12:	f1bc 0f00 	cmp.w	ip, #0
 8015b16:	d001      	beq.n	8015b1c <__lshift+0xac>
 8015b18:	f108 0602 	add.w	r6, r8, #2
 8015b1c:	3e01      	subs	r6, #1
 8015b1e:	4638      	mov	r0, r7
 8015b20:	612e      	str	r6, [r5, #16]
 8015b22:	4621      	mov	r1, r4
 8015b24:	f7ff fd88 	bl	8015638 <_Bfree>
 8015b28:	4628      	mov	r0, r5
 8015b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015b32:	3301      	adds	r3, #1
 8015b34:	e7c1      	b.n	8015aba <__lshift+0x4a>
 8015b36:	3904      	subs	r1, #4
 8015b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b40:	4298      	cmp	r0, r3
 8015b42:	d8f9      	bhi.n	8015b38 <__lshift+0xc8>
 8015b44:	e7ea      	b.n	8015b1c <__lshift+0xac>
 8015b46:	bf00      	nop
 8015b48:	0802ae69 	.word	0x0802ae69
 8015b4c:	0802aef4 	.word	0x0802aef4

08015b50 <__mcmp>:
 8015b50:	b530      	push	{r4, r5, lr}
 8015b52:	6902      	ldr	r2, [r0, #16]
 8015b54:	690c      	ldr	r4, [r1, #16]
 8015b56:	1b12      	subs	r2, r2, r4
 8015b58:	d10e      	bne.n	8015b78 <__mcmp+0x28>
 8015b5a:	f100 0314 	add.w	r3, r0, #20
 8015b5e:	3114      	adds	r1, #20
 8015b60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015b68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015b6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015b70:	42a5      	cmp	r5, r4
 8015b72:	d003      	beq.n	8015b7c <__mcmp+0x2c>
 8015b74:	d305      	bcc.n	8015b82 <__mcmp+0x32>
 8015b76:	2201      	movs	r2, #1
 8015b78:	4610      	mov	r0, r2
 8015b7a:	bd30      	pop	{r4, r5, pc}
 8015b7c:	4283      	cmp	r3, r0
 8015b7e:	d3f3      	bcc.n	8015b68 <__mcmp+0x18>
 8015b80:	e7fa      	b.n	8015b78 <__mcmp+0x28>
 8015b82:	f04f 32ff 	mov.w	r2, #4294967295
 8015b86:	e7f7      	b.n	8015b78 <__mcmp+0x28>

08015b88 <__mdiff>:
 8015b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	460c      	mov	r4, r1
 8015b8e:	4606      	mov	r6, r0
 8015b90:	4611      	mov	r1, r2
 8015b92:	4620      	mov	r0, r4
 8015b94:	4690      	mov	r8, r2
 8015b96:	f7ff ffdb 	bl	8015b50 <__mcmp>
 8015b9a:	1e05      	subs	r5, r0, #0
 8015b9c:	d110      	bne.n	8015bc0 <__mdiff+0x38>
 8015b9e:	4629      	mov	r1, r5
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	f7ff fd09 	bl	80155b8 <_Balloc>
 8015ba6:	b930      	cbnz	r0, 8015bb6 <__mdiff+0x2e>
 8015ba8:	4b3a      	ldr	r3, [pc, #232]	; (8015c94 <__mdiff+0x10c>)
 8015baa:	4602      	mov	r2, r0
 8015bac:	f240 2132 	movw	r1, #562	; 0x232
 8015bb0:	4839      	ldr	r0, [pc, #228]	; (8015c98 <__mdiff+0x110>)
 8015bb2:	f7fe fabb 	bl	801412c <__assert_func>
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc0:	bfa4      	itt	ge
 8015bc2:	4643      	movge	r3, r8
 8015bc4:	46a0      	movge	r8, r4
 8015bc6:	4630      	mov	r0, r6
 8015bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015bcc:	bfa6      	itte	ge
 8015bce:	461c      	movge	r4, r3
 8015bd0:	2500      	movge	r5, #0
 8015bd2:	2501      	movlt	r5, #1
 8015bd4:	f7ff fcf0 	bl	80155b8 <_Balloc>
 8015bd8:	b920      	cbnz	r0, 8015be4 <__mdiff+0x5c>
 8015bda:	4b2e      	ldr	r3, [pc, #184]	; (8015c94 <__mdiff+0x10c>)
 8015bdc:	4602      	mov	r2, r0
 8015bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015be2:	e7e5      	b.n	8015bb0 <__mdiff+0x28>
 8015be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015be8:	6926      	ldr	r6, [r4, #16]
 8015bea:	60c5      	str	r5, [r0, #12]
 8015bec:	f104 0914 	add.w	r9, r4, #20
 8015bf0:	f108 0514 	add.w	r5, r8, #20
 8015bf4:	f100 0e14 	add.w	lr, r0, #20
 8015bf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015c00:	f108 0210 	add.w	r2, r8, #16
 8015c04:	46f2      	mov	sl, lr
 8015c06:	2100      	movs	r1, #0
 8015c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015c10:	fa1f f883 	uxth.w	r8, r3
 8015c14:	fa11 f18b 	uxtah	r1, r1, fp
 8015c18:	0c1b      	lsrs	r3, r3, #16
 8015c1a:	eba1 0808 	sub.w	r8, r1, r8
 8015c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015c26:	fa1f f888 	uxth.w	r8, r8
 8015c2a:	1419      	asrs	r1, r3, #16
 8015c2c:	454e      	cmp	r6, r9
 8015c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c32:	f84a 3b04 	str.w	r3, [sl], #4
 8015c36:	d8e7      	bhi.n	8015c08 <__mdiff+0x80>
 8015c38:	1b33      	subs	r3, r6, r4
 8015c3a:	3b15      	subs	r3, #21
 8015c3c:	f023 0303 	bic.w	r3, r3, #3
 8015c40:	3304      	adds	r3, #4
 8015c42:	3415      	adds	r4, #21
 8015c44:	42a6      	cmp	r6, r4
 8015c46:	bf38      	it	cc
 8015c48:	2304      	movcc	r3, #4
 8015c4a:	441d      	add	r5, r3
 8015c4c:	4473      	add	r3, lr
 8015c4e:	469e      	mov	lr, r3
 8015c50:	462e      	mov	r6, r5
 8015c52:	4566      	cmp	r6, ip
 8015c54:	d30e      	bcc.n	8015c74 <__mdiff+0xec>
 8015c56:	f10c 0203 	add.w	r2, ip, #3
 8015c5a:	1b52      	subs	r2, r2, r5
 8015c5c:	f022 0203 	bic.w	r2, r2, #3
 8015c60:	3d03      	subs	r5, #3
 8015c62:	45ac      	cmp	ip, r5
 8015c64:	bf38      	it	cc
 8015c66:	2200      	movcc	r2, #0
 8015c68:	441a      	add	r2, r3
 8015c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015c6e:	b17b      	cbz	r3, 8015c90 <__mdiff+0x108>
 8015c70:	6107      	str	r7, [r0, #16]
 8015c72:	e7a3      	b.n	8015bbc <__mdiff+0x34>
 8015c74:	f856 8b04 	ldr.w	r8, [r6], #4
 8015c78:	fa11 f288 	uxtah	r2, r1, r8
 8015c7c:	1414      	asrs	r4, r2, #16
 8015c7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015c82:	b292      	uxth	r2, r2
 8015c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015c88:	f84e 2b04 	str.w	r2, [lr], #4
 8015c8c:	1421      	asrs	r1, r4, #16
 8015c8e:	e7e0      	b.n	8015c52 <__mdiff+0xca>
 8015c90:	3f01      	subs	r7, #1
 8015c92:	e7ea      	b.n	8015c6a <__mdiff+0xe2>
 8015c94:	0802ae69 	.word	0x0802ae69
 8015c98:	0802aef4 	.word	0x0802aef4

08015c9c <__ulp>:
 8015c9c:	b082      	sub	sp, #8
 8015c9e:	ed8d 0b00 	vstr	d0, [sp]
 8015ca2:	9b01      	ldr	r3, [sp, #4]
 8015ca4:	4912      	ldr	r1, [pc, #72]	; (8015cf0 <__ulp+0x54>)
 8015ca6:	4019      	ands	r1, r3
 8015ca8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015cac:	2900      	cmp	r1, #0
 8015cae:	dd05      	ble.n	8015cbc <__ulp+0x20>
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	ec43 2b10 	vmov	d0, r2, r3
 8015cb8:	b002      	add	sp, #8
 8015cba:	4770      	bx	lr
 8015cbc:	4249      	negs	r1, r1
 8015cbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015cc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015cc6:	f04f 0200 	mov.w	r2, #0
 8015cca:	f04f 0300 	mov.w	r3, #0
 8015cce:	da04      	bge.n	8015cda <__ulp+0x3e>
 8015cd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015cd4:	fa41 f300 	asr.w	r3, r1, r0
 8015cd8:	e7ec      	b.n	8015cb4 <__ulp+0x18>
 8015cda:	f1a0 0114 	sub.w	r1, r0, #20
 8015cde:	291e      	cmp	r1, #30
 8015ce0:	bfda      	itte	le
 8015ce2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015ce6:	fa20 f101 	lsrle.w	r1, r0, r1
 8015cea:	2101      	movgt	r1, #1
 8015cec:	460a      	mov	r2, r1
 8015cee:	e7e1      	b.n	8015cb4 <__ulp+0x18>
 8015cf0:	7ff00000 	.word	0x7ff00000

08015cf4 <__b2d>:
 8015cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cf6:	6905      	ldr	r5, [r0, #16]
 8015cf8:	f100 0714 	add.w	r7, r0, #20
 8015cfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015d00:	1f2e      	subs	r6, r5, #4
 8015d02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015d06:	4620      	mov	r0, r4
 8015d08:	f7ff fd48 	bl	801579c <__hi0bits>
 8015d0c:	f1c0 0320 	rsb	r3, r0, #32
 8015d10:	280a      	cmp	r0, #10
 8015d12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015d90 <__b2d+0x9c>
 8015d16:	600b      	str	r3, [r1, #0]
 8015d18:	dc14      	bgt.n	8015d44 <__b2d+0x50>
 8015d1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015d1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015d22:	42b7      	cmp	r7, r6
 8015d24:	ea41 030c 	orr.w	r3, r1, ip
 8015d28:	bf34      	ite	cc
 8015d2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015d2e:	2100      	movcs	r1, #0
 8015d30:	3015      	adds	r0, #21
 8015d32:	fa04 f000 	lsl.w	r0, r4, r0
 8015d36:	fa21 f10e 	lsr.w	r1, r1, lr
 8015d3a:	ea40 0201 	orr.w	r2, r0, r1
 8015d3e:	ec43 2b10 	vmov	d0, r2, r3
 8015d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d44:	42b7      	cmp	r7, r6
 8015d46:	bf3a      	itte	cc
 8015d48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015d4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015d50:	2100      	movcs	r1, #0
 8015d52:	380b      	subs	r0, #11
 8015d54:	d017      	beq.n	8015d86 <__b2d+0x92>
 8015d56:	f1c0 0c20 	rsb	ip, r0, #32
 8015d5a:	fa04 f500 	lsl.w	r5, r4, r0
 8015d5e:	42be      	cmp	r6, r7
 8015d60:	fa21 f40c 	lsr.w	r4, r1, ip
 8015d64:	ea45 0504 	orr.w	r5, r5, r4
 8015d68:	bf8c      	ite	hi
 8015d6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015d6e:	2400      	movls	r4, #0
 8015d70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015d74:	fa01 f000 	lsl.w	r0, r1, r0
 8015d78:	fa24 f40c 	lsr.w	r4, r4, ip
 8015d7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015d80:	ea40 0204 	orr.w	r2, r0, r4
 8015d84:	e7db      	b.n	8015d3e <__b2d+0x4a>
 8015d86:	ea44 030c 	orr.w	r3, r4, ip
 8015d8a:	460a      	mov	r2, r1
 8015d8c:	e7d7      	b.n	8015d3e <__b2d+0x4a>
 8015d8e:	bf00      	nop
 8015d90:	3ff00000 	.word	0x3ff00000

08015d94 <__d2b>:
 8015d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015d98:	4689      	mov	r9, r1
 8015d9a:	2101      	movs	r1, #1
 8015d9c:	ec57 6b10 	vmov	r6, r7, d0
 8015da0:	4690      	mov	r8, r2
 8015da2:	f7ff fc09 	bl	80155b8 <_Balloc>
 8015da6:	4604      	mov	r4, r0
 8015da8:	b930      	cbnz	r0, 8015db8 <__d2b+0x24>
 8015daa:	4602      	mov	r2, r0
 8015dac:	4b25      	ldr	r3, [pc, #148]	; (8015e44 <__d2b+0xb0>)
 8015dae:	4826      	ldr	r0, [pc, #152]	; (8015e48 <__d2b+0xb4>)
 8015db0:	f240 310a 	movw	r1, #778	; 0x30a
 8015db4:	f7fe f9ba 	bl	801412c <__assert_func>
 8015db8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015dbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015dc0:	bb35      	cbnz	r5, 8015e10 <__d2b+0x7c>
 8015dc2:	2e00      	cmp	r6, #0
 8015dc4:	9301      	str	r3, [sp, #4]
 8015dc6:	d028      	beq.n	8015e1a <__d2b+0x86>
 8015dc8:	4668      	mov	r0, sp
 8015dca:	9600      	str	r6, [sp, #0]
 8015dcc:	f7ff fd06 	bl	80157dc <__lo0bits>
 8015dd0:	9900      	ldr	r1, [sp, #0]
 8015dd2:	b300      	cbz	r0, 8015e16 <__d2b+0x82>
 8015dd4:	9a01      	ldr	r2, [sp, #4]
 8015dd6:	f1c0 0320 	rsb	r3, r0, #32
 8015dda:	fa02 f303 	lsl.w	r3, r2, r3
 8015dde:	430b      	orrs	r3, r1
 8015de0:	40c2      	lsrs	r2, r0
 8015de2:	6163      	str	r3, [r4, #20]
 8015de4:	9201      	str	r2, [sp, #4]
 8015de6:	9b01      	ldr	r3, [sp, #4]
 8015de8:	61a3      	str	r3, [r4, #24]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	bf14      	ite	ne
 8015dee:	2202      	movne	r2, #2
 8015df0:	2201      	moveq	r2, #1
 8015df2:	6122      	str	r2, [r4, #16]
 8015df4:	b1d5      	cbz	r5, 8015e2c <__d2b+0x98>
 8015df6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015dfa:	4405      	add	r5, r0
 8015dfc:	f8c9 5000 	str.w	r5, [r9]
 8015e00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015e04:	f8c8 0000 	str.w	r0, [r8]
 8015e08:	4620      	mov	r0, r4
 8015e0a:	b003      	add	sp, #12
 8015e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015e14:	e7d5      	b.n	8015dc2 <__d2b+0x2e>
 8015e16:	6161      	str	r1, [r4, #20]
 8015e18:	e7e5      	b.n	8015de6 <__d2b+0x52>
 8015e1a:	a801      	add	r0, sp, #4
 8015e1c:	f7ff fcde 	bl	80157dc <__lo0bits>
 8015e20:	9b01      	ldr	r3, [sp, #4]
 8015e22:	6163      	str	r3, [r4, #20]
 8015e24:	2201      	movs	r2, #1
 8015e26:	6122      	str	r2, [r4, #16]
 8015e28:	3020      	adds	r0, #32
 8015e2a:	e7e3      	b.n	8015df4 <__d2b+0x60>
 8015e2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015e30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015e34:	f8c9 0000 	str.w	r0, [r9]
 8015e38:	6918      	ldr	r0, [r3, #16]
 8015e3a:	f7ff fcaf 	bl	801579c <__hi0bits>
 8015e3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015e42:	e7df      	b.n	8015e04 <__d2b+0x70>
 8015e44:	0802ae69 	.word	0x0802ae69
 8015e48:	0802aef4 	.word	0x0802aef4

08015e4c <__ratio>:
 8015e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e50:	4688      	mov	r8, r1
 8015e52:	4669      	mov	r1, sp
 8015e54:	4681      	mov	r9, r0
 8015e56:	f7ff ff4d 	bl	8015cf4 <__b2d>
 8015e5a:	a901      	add	r1, sp, #4
 8015e5c:	4640      	mov	r0, r8
 8015e5e:	ec55 4b10 	vmov	r4, r5, d0
 8015e62:	f7ff ff47 	bl	8015cf4 <__b2d>
 8015e66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015e6e:	eba3 0c02 	sub.w	ip, r3, r2
 8015e72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e76:	1a9b      	subs	r3, r3, r2
 8015e78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015e7c:	ec51 0b10 	vmov	r0, r1, d0
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	bfd6      	itet	le
 8015e84:	460a      	movle	r2, r1
 8015e86:	462a      	movgt	r2, r5
 8015e88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015e8c:	468b      	mov	fp, r1
 8015e8e:	462f      	mov	r7, r5
 8015e90:	bfd4      	ite	le
 8015e92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015e96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	ee10 2a10 	vmov	r2, s0
 8015ea0:	465b      	mov	r3, fp
 8015ea2:	4639      	mov	r1, r7
 8015ea4:	f7ea fcea 	bl	800087c <__aeabi_ddiv>
 8015ea8:	ec41 0b10 	vmov	d0, r0, r1
 8015eac:	b003      	add	sp, #12
 8015eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015eb2 <__copybits>:
 8015eb2:	3901      	subs	r1, #1
 8015eb4:	b570      	push	{r4, r5, r6, lr}
 8015eb6:	1149      	asrs	r1, r1, #5
 8015eb8:	6914      	ldr	r4, [r2, #16]
 8015eba:	3101      	adds	r1, #1
 8015ebc:	f102 0314 	add.w	r3, r2, #20
 8015ec0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015ec8:	1f05      	subs	r5, r0, #4
 8015eca:	42a3      	cmp	r3, r4
 8015ecc:	d30c      	bcc.n	8015ee8 <__copybits+0x36>
 8015ece:	1aa3      	subs	r3, r4, r2
 8015ed0:	3b11      	subs	r3, #17
 8015ed2:	f023 0303 	bic.w	r3, r3, #3
 8015ed6:	3211      	adds	r2, #17
 8015ed8:	42a2      	cmp	r2, r4
 8015eda:	bf88      	it	hi
 8015edc:	2300      	movhi	r3, #0
 8015ede:	4418      	add	r0, r3
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	4288      	cmp	r0, r1
 8015ee4:	d305      	bcc.n	8015ef2 <__copybits+0x40>
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}
 8015ee8:	f853 6b04 	ldr.w	r6, [r3], #4
 8015eec:	f845 6f04 	str.w	r6, [r5, #4]!
 8015ef0:	e7eb      	b.n	8015eca <__copybits+0x18>
 8015ef2:	f840 3b04 	str.w	r3, [r0], #4
 8015ef6:	e7f4      	b.n	8015ee2 <__copybits+0x30>

08015ef8 <__any_on>:
 8015ef8:	f100 0214 	add.w	r2, r0, #20
 8015efc:	6900      	ldr	r0, [r0, #16]
 8015efe:	114b      	asrs	r3, r1, #5
 8015f00:	4298      	cmp	r0, r3
 8015f02:	b510      	push	{r4, lr}
 8015f04:	db11      	blt.n	8015f2a <__any_on+0x32>
 8015f06:	dd0a      	ble.n	8015f1e <__any_on+0x26>
 8015f08:	f011 011f 	ands.w	r1, r1, #31
 8015f0c:	d007      	beq.n	8015f1e <__any_on+0x26>
 8015f0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015f12:	fa24 f001 	lsr.w	r0, r4, r1
 8015f16:	fa00 f101 	lsl.w	r1, r0, r1
 8015f1a:	428c      	cmp	r4, r1
 8015f1c:	d10b      	bne.n	8015f36 <__any_on+0x3e>
 8015f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015f22:	4293      	cmp	r3, r2
 8015f24:	d803      	bhi.n	8015f2e <__any_on+0x36>
 8015f26:	2000      	movs	r0, #0
 8015f28:	bd10      	pop	{r4, pc}
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	e7f7      	b.n	8015f1e <__any_on+0x26>
 8015f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015f32:	2900      	cmp	r1, #0
 8015f34:	d0f5      	beq.n	8015f22 <__any_on+0x2a>
 8015f36:	2001      	movs	r0, #1
 8015f38:	e7f6      	b.n	8015f28 <__any_on+0x30>

08015f3a <_calloc_r>:
 8015f3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f3c:	fba1 2402 	umull	r2, r4, r1, r2
 8015f40:	b94c      	cbnz	r4, 8015f56 <_calloc_r+0x1c>
 8015f42:	4611      	mov	r1, r2
 8015f44:	9201      	str	r2, [sp, #4]
 8015f46:	f000 f87b 	bl	8016040 <_malloc_r>
 8015f4a:	9a01      	ldr	r2, [sp, #4]
 8015f4c:	4605      	mov	r5, r0
 8015f4e:	b930      	cbnz	r0, 8015f5e <_calloc_r+0x24>
 8015f50:	4628      	mov	r0, r5
 8015f52:	b003      	add	sp, #12
 8015f54:	bd30      	pop	{r4, r5, pc}
 8015f56:	220c      	movs	r2, #12
 8015f58:	6002      	str	r2, [r0, #0]
 8015f5a:	2500      	movs	r5, #0
 8015f5c:	e7f8      	b.n	8015f50 <_calloc_r+0x16>
 8015f5e:	4621      	mov	r1, r4
 8015f60:	f7fc fb1e 	bl	80125a0 <memset>
 8015f64:	e7f4      	b.n	8015f50 <_calloc_r+0x16>
	...

08015f68 <_free_r>:
 8015f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f6a:	2900      	cmp	r1, #0
 8015f6c:	d044      	beq.n	8015ff8 <_free_r+0x90>
 8015f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f72:	9001      	str	r0, [sp, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	f1a1 0404 	sub.w	r4, r1, #4
 8015f7a:	bfb8      	it	lt
 8015f7c:	18e4      	addlt	r4, r4, r3
 8015f7e:	f000 fec7 	bl	8016d10 <__malloc_lock>
 8015f82:	4a1e      	ldr	r2, [pc, #120]	; (8015ffc <_free_r+0x94>)
 8015f84:	9801      	ldr	r0, [sp, #4]
 8015f86:	6813      	ldr	r3, [r2, #0]
 8015f88:	b933      	cbnz	r3, 8015f98 <_free_r+0x30>
 8015f8a:	6063      	str	r3, [r4, #4]
 8015f8c:	6014      	str	r4, [r2, #0]
 8015f8e:	b003      	add	sp, #12
 8015f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f94:	f000 bec2 	b.w	8016d1c <__malloc_unlock>
 8015f98:	42a3      	cmp	r3, r4
 8015f9a:	d908      	bls.n	8015fae <_free_r+0x46>
 8015f9c:	6825      	ldr	r5, [r4, #0]
 8015f9e:	1961      	adds	r1, r4, r5
 8015fa0:	428b      	cmp	r3, r1
 8015fa2:	bf01      	itttt	eq
 8015fa4:	6819      	ldreq	r1, [r3, #0]
 8015fa6:	685b      	ldreq	r3, [r3, #4]
 8015fa8:	1949      	addeq	r1, r1, r5
 8015faa:	6021      	streq	r1, [r4, #0]
 8015fac:	e7ed      	b.n	8015f8a <_free_r+0x22>
 8015fae:	461a      	mov	r2, r3
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	b10b      	cbz	r3, 8015fb8 <_free_r+0x50>
 8015fb4:	42a3      	cmp	r3, r4
 8015fb6:	d9fa      	bls.n	8015fae <_free_r+0x46>
 8015fb8:	6811      	ldr	r1, [r2, #0]
 8015fba:	1855      	adds	r5, r2, r1
 8015fbc:	42a5      	cmp	r5, r4
 8015fbe:	d10b      	bne.n	8015fd8 <_free_r+0x70>
 8015fc0:	6824      	ldr	r4, [r4, #0]
 8015fc2:	4421      	add	r1, r4
 8015fc4:	1854      	adds	r4, r2, r1
 8015fc6:	42a3      	cmp	r3, r4
 8015fc8:	6011      	str	r1, [r2, #0]
 8015fca:	d1e0      	bne.n	8015f8e <_free_r+0x26>
 8015fcc:	681c      	ldr	r4, [r3, #0]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	6053      	str	r3, [r2, #4]
 8015fd2:	4421      	add	r1, r4
 8015fd4:	6011      	str	r1, [r2, #0]
 8015fd6:	e7da      	b.n	8015f8e <_free_r+0x26>
 8015fd8:	d902      	bls.n	8015fe0 <_free_r+0x78>
 8015fda:	230c      	movs	r3, #12
 8015fdc:	6003      	str	r3, [r0, #0]
 8015fde:	e7d6      	b.n	8015f8e <_free_r+0x26>
 8015fe0:	6825      	ldr	r5, [r4, #0]
 8015fe2:	1961      	adds	r1, r4, r5
 8015fe4:	428b      	cmp	r3, r1
 8015fe6:	bf04      	itt	eq
 8015fe8:	6819      	ldreq	r1, [r3, #0]
 8015fea:	685b      	ldreq	r3, [r3, #4]
 8015fec:	6063      	str	r3, [r4, #4]
 8015fee:	bf04      	itt	eq
 8015ff0:	1949      	addeq	r1, r1, r5
 8015ff2:	6021      	streq	r1, [r4, #0]
 8015ff4:	6054      	str	r4, [r2, #4]
 8015ff6:	e7ca      	b.n	8015f8e <_free_r+0x26>
 8015ff8:	b003      	add	sp, #12
 8015ffa:	bd30      	pop	{r4, r5, pc}
 8015ffc:	20000d7c 	.word	0x20000d7c

08016000 <sbrk_aligned>:
 8016000:	b570      	push	{r4, r5, r6, lr}
 8016002:	4e0e      	ldr	r6, [pc, #56]	; (801603c <sbrk_aligned+0x3c>)
 8016004:	460c      	mov	r4, r1
 8016006:	6831      	ldr	r1, [r6, #0]
 8016008:	4605      	mov	r5, r0
 801600a:	b911      	cbnz	r1, 8016012 <sbrk_aligned+0x12>
 801600c:	f000 fb4c 	bl	80166a8 <_sbrk_r>
 8016010:	6030      	str	r0, [r6, #0]
 8016012:	4621      	mov	r1, r4
 8016014:	4628      	mov	r0, r5
 8016016:	f000 fb47 	bl	80166a8 <_sbrk_r>
 801601a:	1c43      	adds	r3, r0, #1
 801601c:	d00a      	beq.n	8016034 <sbrk_aligned+0x34>
 801601e:	1cc4      	adds	r4, r0, #3
 8016020:	f024 0403 	bic.w	r4, r4, #3
 8016024:	42a0      	cmp	r0, r4
 8016026:	d007      	beq.n	8016038 <sbrk_aligned+0x38>
 8016028:	1a21      	subs	r1, r4, r0
 801602a:	4628      	mov	r0, r5
 801602c:	f000 fb3c 	bl	80166a8 <_sbrk_r>
 8016030:	3001      	adds	r0, #1
 8016032:	d101      	bne.n	8016038 <sbrk_aligned+0x38>
 8016034:	f04f 34ff 	mov.w	r4, #4294967295
 8016038:	4620      	mov	r0, r4
 801603a:	bd70      	pop	{r4, r5, r6, pc}
 801603c:	20000d80 	.word	0x20000d80

08016040 <_malloc_r>:
 8016040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016044:	1ccd      	adds	r5, r1, #3
 8016046:	f025 0503 	bic.w	r5, r5, #3
 801604a:	3508      	adds	r5, #8
 801604c:	2d0c      	cmp	r5, #12
 801604e:	bf38      	it	cc
 8016050:	250c      	movcc	r5, #12
 8016052:	2d00      	cmp	r5, #0
 8016054:	4607      	mov	r7, r0
 8016056:	db01      	blt.n	801605c <_malloc_r+0x1c>
 8016058:	42a9      	cmp	r1, r5
 801605a:	d905      	bls.n	8016068 <_malloc_r+0x28>
 801605c:	230c      	movs	r3, #12
 801605e:	603b      	str	r3, [r7, #0]
 8016060:	2600      	movs	r6, #0
 8016062:	4630      	mov	r0, r6
 8016064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016068:	4e2e      	ldr	r6, [pc, #184]	; (8016124 <_malloc_r+0xe4>)
 801606a:	f000 fe51 	bl	8016d10 <__malloc_lock>
 801606e:	6833      	ldr	r3, [r6, #0]
 8016070:	461c      	mov	r4, r3
 8016072:	bb34      	cbnz	r4, 80160c2 <_malloc_r+0x82>
 8016074:	4629      	mov	r1, r5
 8016076:	4638      	mov	r0, r7
 8016078:	f7ff ffc2 	bl	8016000 <sbrk_aligned>
 801607c:	1c43      	adds	r3, r0, #1
 801607e:	4604      	mov	r4, r0
 8016080:	d14d      	bne.n	801611e <_malloc_r+0xde>
 8016082:	6834      	ldr	r4, [r6, #0]
 8016084:	4626      	mov	r6, r4
 8016086:	2e00      	cmp	r6, #0
 8016088:	d140      	bne.n	801610c <_malloc_r+0xcc>
 801608a:	6823      	ldr	r3, [r4, #0]
 801608c:	4631      	mov	r1, r6
 801608e:	4638      	mov	r0, r7
 8016090:	eb04 0803 	add.w	r8, r4, r3
 8016094:	f000 fb08 	bl	80166a8 <_sbrk_r>
 8016098:	4580      	cmp	r8, r0
 801609a:	d13a      	bne.n	8016112 <_malloc_r+0xd2>
 801609c:	6821      	ldr	r1, [r4, #0]
 801609e:	3503      	adds	r5, #3
 80160a0:	1a6d      	subs	r5, r5, r1
 80160a2:	f025 0503 	bic.w	r5, r5, #3
 80160a6:	3508      	adds	r5, #8
 80160a8:	2d0c      	cmp	r5, #12
 80160aa:	bf38      	it	cc
 80160ac:	250c      	movcc	r5, #12
 80160ae:	4629      	mov	r1, r5
 80160b0:	4638      	mov	r0, r7
 80160b2:	f7ff ffa5 	bl	8016000 <sbrk_aligned>
 80160b6:	3001      	adds	r0, #1
 80160b8:	d02b      	beq.n	8016112 <_malloc_r+0xd2>
 80160ba:	6823      	ldr	r3, [r4, #0]
 80160bc:	442b      	add	r3, r5
 80160be:	6023      	str	r3, [r4, #0]
 80160c0:	e00e      	b.n	80160e0 <_malloc_r+0xa0>
 80160c2:	6822      	ldr	r2, [r4, #0]
 80160c4:	1b52      	subs	r2, r2, r5
 80160c6:	d41e      	bmi.n	8016106 <_malloc_r+0xc6>
 80160c8:	2a0b      	cmp	r2, #11
 80160ca:	d916      	bls.n	80160fa <_malloc_r+0xba>
 80160cc:	1961      	adds	r1, r4, r5
 80160ce:	42a3      	cmp	r3, r4
 80160d0:	6025      	str	r5, [r4, #0]
 80160d2:	bf18      	it	ne
 80160d4:	6059      	strne	r1, [r3, #4]
 80160d6:	6863      	ldr	r3, [r4, #4]
 80160d8:	bf08      	it	eq
 80160da:	6031      	streq	r1, [r6, #0]
 80160dc:	5162      	str	r2, [r4, r5]
 80160de:	604b      	str	r3, [r1, #4]
 80160e0:	4638      	mov	r0, r7
 80160e2:	f104 060b 	add.w	r6, r4, #11
 80160e6:	f000 fe19 	bl	8016d1c <__malloc_unlock>
 80160ea:	f026 0607 	bic.w	r6, r6, #7
 80160ee:	1d23      	adds	r3, r4, #4
 80160f0:	1af2      	subs	r2, r6, r3
 80160f2:	d0b6      	beq.n	8016062 <_malloc_r+0x22>
 80160f4:	1b9b      	subs	r3, r3, r6
 80160f6:	50a3      	str	r3, [r4, r2]
 80160f8:	e7b3      	b.n	8016062 <_malloc_r+0x22>
 80160fa:	6862      	ldr	r2, [r4, #4]
 80160fc:	42a3      	cmp	r3, r4
 80160fe:	bf0c      	ite	eq
 8016100:	6032      	streq	r2, [r6, #0]
 8016102:	605a      	strne	r2, [r3, #4]
 8016104:	e7ec      	b.n	80160e0 <_malloc_r+0xa0>
 8016106:	4623      	mov	r3, r4
 8016108:	6864      	ldr	r4, [r4, #4]
 801610a:	e7b2      	b.n	8016072 <_malloc_r+0x32>
 801610c:	4634      	mov	r4, r6
 801610e:	6876      	ldr	r6, [r6, #4]
 8016110:	e7b9      	b.n	8016086 <_malloc_r+0x46>
 8016112:	230c      	movs	r3, #12
 8016114:	603b      	str	r3, [r7, #0]
 8016116:	4638      	mov	r0, r7
 8016118:	f000 fe00 	bl	8016d1c <__malloc_unlock>
 801611c:	e7a1      	b.n	8016062 <_malloc_r+0x22>
 801611e:	6025      	str	r5, [r4, #0]
 8016120:	e7de      	b.n	80160e0 <_malloc_r+0xa0>
 8016122:	bf00      	nop
 8016124:	20000d7c 	.word	0x20000d7c

08016128 <__ssputs_r>:
 8016128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801612c:	688e      	ldr	r6, [r1, #8]
 801612e:	429e      	cmp	r6, r3
 8016130:	4682      	mov	sl, r0
 8016132:	460c      	mov	r4, r1
 8016134:	4690      	mov	r8, r2
 8016136:	461f      	mov	r7, r3
 8016138:	d838      	bhi.n	80161ac <__ssputs_r+0x84>
 801613a:	898a      	ldrh	r2, [r1, #12]
 801613c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016140:	d032      	beq.n	80161a8 <__ssputs_r+0x80>
 8016142:	6825      	ldr	r5, [r4, #0]
 8016144:	6909      	ldr	r1, [r1, #16]
 8016146:	eba5 0901 	sub.w	r9, r5, r1
 801614a:	6965      	ldr	r5, [r4, #20]
 801614c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016154:	3301      	adds	r3, #1
 8016156:	444b      	add	r3, r9
 8016158:	106d      	asrs	r5, r5, #1
 801615a:	429d      	cmp	r5, r3
 801615c:	bf38      	it	cc
 801615e:	461d      	movcc	r5, r3
 8016160:	0553      	lsls	r3, r2, #21
 8016162:	d531      	bpl.n	80161c8 <__ssputs_r+0xa0>
 8016164:	4629      	mov	r1, r5
 8016166:	f7ff ff6b 	bl	8016040 <_malloc_r>
 801616a:	4606      	mov	r6, r0
 801616c:	b950      	cbnz	r0, 8016184 <__ssputs_r+0x5c>
 801616e:	230c      	movs	r3, #12
 8016170:	f8ca 3000 	str.w	r3, [sl]
 8016174:	89a3      	ldrh	r3, [r4, #12]
 8016176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801617a:	81a3      	strh	r3, [r4, #12]
 801617c:	f04f 30ff 	mov.w	r0, #4294967295
 8016180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016184:	6921      	ldr	r1, [r4, #16]
 8016186:	464a      	mov	r2, r9
 8016188:	f7ff fa08 	bl	801559c <memcpy>
 801618c:	89a3      	ldrh	r3, [r4, #12]
 801618e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016196:	81a3      	strh	r3, [r4, #12]
 8016198:	6126      	str	r6, [r4, #16]
 801619a:	6165      	str	r5, [r4, #20]
 801619c:	444e      	add	r6, r9
 801619e:	eba5 0509 	sub.w	r5, r5, r9
 80161a2:	6026      	str	r6, [r4, #0]
 80161a4:	60a5      	str	r5, [r4, #8]
 80161a6:	463e      	mov	r6, r7
 80161a8:	42be      	cmp	r6, r7
 80161aa:	d900      	bls.n	80161ae <__ssputs_r+0x86>
 80161ac:	463e      	mov	r6, r7
 80161ae:	6820      	ldr	r0, [r4, #0]
 80161b0:	4632      	mov	r2, r6
 80161b2:	4641      	mov	r1, r8
 80161b4:	f000 fd92 	bl	8016cdc <memmove>
 80161b8:	68a3      	ldr	r3, [r4, #8]
 80161ba:	1b9b      	subs	r3, r3, r6
 80161bc:	60a3      	str	r3, [r4, #8]
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	4433      	add	r3, r6
 80161c2:	6023      	str	r3, [r4, #0]
 80161c4:	2000      	movs	r0, #0
 80161c6:	e7db      	b.n	8016180 <__ssputs_r+0x58>
 80161c8:	462a      	mov	r2, r5
 80161ca:	f000 fdad 	bl	8016d28 <_realloc_r>
 80161ce:	4606      	mov	r6, r0
 80161d0:	2800      	cmp	r0, #0
 80161d2:	d1e1      	bne.n	8016198 <__ssputs_r+0x70>
 80161d4:	6921      	ldr	r1, [r4, #16]
 80161d6:	4650      	mov	r0, sl
 80161d8:	f7ff fec6 	bl	8015f68 <_free_r>
 80161dc:	e7c7      	b.n	801616e <__ssputs_r+0x46>
	...

080161e0 <_svfiprintf_r>:
 80161e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e4:	4698      	mov	r8, r3
 80161e6:	898b      	ldrh	r3, [r1, #12]
 80161e8:	061b      	lsls	r3, r3, #24
 80161ea:	b09d      	sub	sp, #116	; 0x74
 80161ec:	4607      	mov	r7, r0
 80161ee:	460d      	mov	r5, r1
 80161f0:	4614      	mov	r4, r2
 80161f2:	d50e      	bpl.n	8016212 <_svfiprintf_r+0x32>
 80161f4:	690b      	ldr	r3, [r1, #16]
 80161f6:	b963      	cbnz	r3, 8016212 <_svfiprintf_r+0x32>
 80161f8:	2140      	movs	r1, #64	; 0x40
 80161fa:	f7ff ff21 	bl	8016040 <_malloc_r>
 80161fe:	6028      	str	r0, [r5, #0]
 8016200:	6128      	str	r0, [r5, #16]
 8016202:	b920      	cbnz	r0, 801620e <_svfiprintf_r+0x2e>
 8016204:	230c      	movs	r3, #12
 8016206:	603b      	str	r3, [r7, #0]
 8016208:	f04f 30ff 	mov.w	r0, #4294967295
 801620c:	e0d1      	b.n	80163b2 <_svfiprintf_r+0x1d2>
 801620e:	2340      	movs	r3, #64	; 0x40
 8016210:	616b      	str	r3, [r5, #20]
 8016212:	2300      	movs	r3, #0
 8016214:	9309      	str	r3, [sp, #36]	; 0x24
 8016216:	2320      	movs	r3, #32
 8016218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801621c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016220:	2330      	movs	r3, #48	; 0x30
 8016222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80163cc <_svfiprintf_r+0x1ec>
 8016226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801622a:	f04f 0901 	mov.w	r9, #1
 801622e:	4623      	mov	r3, r4
 8016230:	469a      	mov	sl, r3
 8016232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016236:	b10a      	cbz	r2, 801623c <_svfiprintf_r+0x5c>
 8016238:	2a25      	cmp	r2, #37	; 0x25
 801623a:	d1f9      	bne.n	8016230 <_svfiprintf_r+0x50>
 801623c:	ebba 0b04 	subs.w	fp, sl, r4
 8016240:	d00b      	beq.n	801625a <_svfiprintf_r+0x7a>
 8016242:	465b      	mov	r3, fp
 8016244:	4622      	mov	r2, r4
 8016246:	4629      	mov	r1, r5
 8016248:	4638      	mov	r0, r7
 801624a:	f7ff ff6d 	bl	8016128 <__ssputs_r>
 801624e:	3001      	adds	r0, #1
 8016250:	f000 80aa 	beq.w	80163a8 <_svfiprintf_r+0x1c8>
 8016254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016256:	445a      	add	r2, fp
 8016258:	9209      	str	r2, [sp, #36]	; 0x24
 801625a:	f89a 3000 	ldrb.w	r3, [sl]
 801625e:	2b00      	cmp	r3, #0
 8016260:	f000 80a2 	beq.w	80163a8 <_svfiprintf_r+0x1c8>
 8016264:	2300      	movs	r3, #0
 8016266:	f04f 32ff 	mov.w	r2, #4294967295
 801626a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801626e:	f10a 0a01 	add.w	sl, sl, #1
 8016272:	9304      	str	r3, [sp, #16]
 8016274:	9307      	str	r3, [sp, #28]
 8016276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801627a:	931a      	str	r3, [sp, #104]	; 0x68
 801627c:	4654      	mov	r4, sl
 801627e:	2205      	movs	r2, #5
 8016280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016284:	4851      	ldr	r0, [pc, #324]	; (80163cc <_svfiprintf_r+0x1ec>)
 8016286:	f7e9 ffc3 	bl	8000210 <memchr>
 801628a:	9a04      	ldr	r2, [sp, #16]
 801628c:	b9d8      	cbnz	r0, 80162c6 <_svfiprintf_r+0xe6>
 801628e:	06d0      	lsls	r0, r2, #27
 8016290:	bf44      	itt	mi
 8016292:	2320      	movmi	r3, #32
 8016294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016298:	0711      	lsls	r1, r2, #28
 801629a:	bf44      	itt	mi
 801629c:	232b      	movmi	r3, #43	; 0x2b
 801629e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162a2:	f89a 3000 	ldrb.w	r3, [sl]
 80162a6:	2b2a      	cmp	r3, #42	; 0x2a
 80162a8:	d015      	beq.n	80162d6 <_svfiprintf_r+0xf6>
 80162aa:	9a07      	ldr	r2, [sp, #28]
 80162ac:	4654      	mov	r4, sl
 80162ae:	2000      	movs	r0, #0
 80162b0:	f04f 0c0a 	mov.w	ip, #10
 80162b4:	4621      	mov	r1, r4
 80162b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162ba:	3b30      	subs	r3, #48	; 0x30
 80162bc:	2b09      	cmp	r3, #9
 80162be:	d94e      	bls.n	801635e <_svfiprintf_r+0x17e>
 80162c0:	b1b0      	cbz	r0, 80162f0 <_svfiprintf_r+0x110>
 80162c2:	9207      	str	r2, [sp, #28]
 80162c4:	e014      	b.n	80162f0 <_svfiprintf_r+0x110>
 80162c6:	eba0 0308 	sub.w	r3, r0, r8
 80162ca:	fa09 f303 	lsl.w	r3, r9, r3
 80162ce:	4313      	orrs	r3, r2
 80162d0:	9304      	str	r3, [sp, #16]
 80162d2:	46a2      	mov	sl, r4
 80162d4:	e7d2      	b.n	801627c <_svfiprintf_r+0x9c>
 80162d6:	9b03      	ldr	r3, [sp, #12]
 80162d8:	1d19      	adds	r1, r3, #4
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	9103      	str	r1, [sp, #12]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	bfbb      	ittet	lt
 80162e2:	425b      	neglt	r3, r3
 80162e4:	f042 0202 	orrlt.w	r2, r2, #2
 80162e8:	9307      	strge	r3, [sp, #28]
 80162ea:	9307      	strlt	r3, [sp, #28]
 80162ec:	bfb8      	it	lt
 80162ee:	9204      	strlt	r2, [sp, #16]
 80162f0:	7823      	ldrb	r3, [r4, #0]
 80162f2:	2b2e      	cmp	r3, #46	; 0x2e
 80162f4:	d10c      	bne.n	8016310 <_svfiprintf_r+0x130>
 80162f6:	7863      	ldrb	r3, [r4, #1]
 80162f8:	2b2a      	cmp	r3, #42	; 0x2a
 80162fa:	d135      	bne.n	8016368 <_svfiprintf_r+0x188>
 80162fc:	9b03      	ldr	r3, [sp, #12]
 80162fe:	1d1a      	adds	r2, r3, #4
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	9203      	str	r2, [sp, #12]
 8016304:	2b00      	cmp	r3, #0
 8016306:	bfb8      	it	lt
 8016308:	f04f 33ff 	movlt.w	r3, #4294967295
 801630c:	3402      	adds	r4, #2
 801630e:	9305      	str	r3, [sp, #20]
 8016310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80163dc <_svfiprintf_r+0x1fc>
 8016314:	7821      	ldrb	r1, [r4, #0]
 8016316:	2203      	movs	r2, #3
 8016318:	4650      	mov	r0, sl
 801631a:	f7e9 ff79 	bl	8000210 <memchr>
 801631e:	b140      	cbz	r0, 8016332 <_svfiprintf_r+0x152>
 8016320:	2340      	movs	r3, #64	; 0x40
 8016322:	eba0 000a 	sub.w	r0, r0, sl
 8016326:	fa03 f000 	lsl.w	r0, r3, r0
 801632a:	9b04      	ldr	r3, [sp, #16]
 801632c:	4303      	orrs	r3, r0
 801632e:	3401      	adds	r4, #1
 8016330:	9304      	str	r3, [sp, #16]
 8016332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016336:	4826      	ldr	r0, [pc, #152]	; (80163d0 <_svfiprintf_r+0x1f0>)
 8016338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801633c:	2206      	movs	r2, #6
 801633e:	f7e9 ff67 	bl	8000210 <memchr>
 8016342:	2800      	cmp	r0, #0
 8016344:	d038      	beq.n	80163b8 <_svfiprintf_r+0x1d8>
 8016346:	4b23      	ldr	r3, [pc, #140]	; (80163d4 <_svfiprintf_r+0x1f4>)
 8016348:	bb1b      	cbnz	r3, 8016392 <_svfiprintf_r+0x1b2>
 801634a:	9b03      	ldr	r3, [sp, #12]
 801634c:	3307      	adds	r3, #7
 801634e:	f023 0307 	bic.w	r3, r3, #7
 8016352:	3308      	adds	r3, #8
 8016354:	9303      	str	r3, [sp, #12]
 8016356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016358:	4433      	add	r3, r6
 801635a:	9309      	str	r3, [sp, #36]	; 0x24
 801635c:	e767      	b.n	801622e <_svfiprintf_r+0x4e>
 801635e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016362:	460c      	mov	r4, r1
 8016364:	2001      	movs	r0, #1
 8016366:	e7a5      	b.n	80162b4 <_svfiprintf_r+0xd4>
 8016368:	2300      	movs	r3, #0
 801636a:	3401      	adds	r4, #1
 801636c:	9305      	str	r3, [sp, #20]
 801636e:	4619      	mov	r1, r3
 8016370:	f04f 0c0a 	mov.w	ip, #10
 8016374:	4620      	mov	r0, r4
 8016376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801637a:	3a30      	subs	r2, #48	; 0x30
 801637c:	2a09      	cmp	r2, #9
 801637e:	d903      	bls.n	8016388 <_svfiprintf_r+0x1a8>
 8016380:	2b00      	cmp	r3, #0
 8016382:	d0c5      	beq.n	8016310 <_svfiprintf_r+0x130>
 8016384:	9105      	str	r1, [sp, #20]
 8016386:	e7c3      	b.n	8016310 <_svfiprintf_r+0x130>
 8016388:	fb0c 2101 	mla	r1, ip, r1, r2
 801638c:	4604      	mov	r4, r0
 801638e:	2301      	movs	r3, #1
 8016390:	e7f0      	b.n	8016374 <_svfiprintf_r+0x194>
 8016392:	ab03      	add	r3, sp, #12
 8016394:	9300      	str	r3, [sp, #0]
 8016396:	462a      	mov	r2, r5
 8016398:	4b0f      	ldr	r3, [pc, #60]	; (80163d8 <_svfiprintf_r+0x1f8>)
 801639a:	a904      	add	r1, sp, #16
 801639c:	4638      	mov	r0, r7
 801639e:	f7fc f9a7 	bl	80126f0 <_printf_float>
 80163a2:	1c42      	adds	r2, r0, #1
 80163a4:	4606      	mov	r6, r0
 80163a6:	d1d6      	bne.n	8016356 <_svfiprintf_r+0x176>
 80163a8:	89ab      	ldrh	r3, [r5, #12]
 80163aa:	065b      	lsls	r3, r3, #25
 80163ac:	f53f af2c 	bmi.w	8016208 <_svfiprintf_r+0x28>
 80163b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163b2:	b01d      	add	sp, #116	; 0x74
 80163b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b8:	ab03      	add	r3, sp, #12
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	462a      	mov	r2, r5
 80163be:	4b06      	ldr	r3, [pc, #24]	; (80163d8 <_svfiprintf_r+0x1f8>)
 80163c0:	a904      	add	r1, sp, #16
 80163c2:	4638      	mov	r0, r7
 80163c4:	f7fc fc38 	bl	8012c38 <_printf_i>
 80163c8:	e7eb      	b.n	80163a2 <_svfiprintf_r+0x1c2>
 80163ca:	bf00      	nop
 80163cc:	0802b04c 	.word	0x0802b04c
 80163d0:	0802b056 	.word	0x0802b056
 80163d4:	080126f1 	.word	0x080126f1
 80163d8:	08016129 	.word	0x08016129
 80163dc:	0802b052 	.word	0x0802b052

080163e0 <__sfputc_r>:
 80163e0:	6893      	ldr	r3, [r2, #8]
 80163e2:	3b01      	subs	r3, #1
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	b410      	push	{r4}
 80163e8:	6093      	str	r3, [r2, #8]
 80163ea:	da08      	bge.n	80163fe <__sfputc_r+0x1e>
 80163ec:	6994      	ldr	r4, [r2, #24]
 80163ee:	42a3      	cmp	r3, r4
 80163f0:	db01      	blt.n	80163f6 <__sfputc_r+0x16>
 80163f2:	290a      	cmp	r1, #10
 80163f4:	d103      	bne.n	80163fe <__sfputc_r+0x1e>
 80163f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163fa:	f000 b979 	b.w	80166f0 <__swbuf_r>
 80163fe:	6813      	ldr	r3, [r2, #0]
 8016400:	1c58      	adds	r0, r3, #1
 8016402:	6010      	str	r0, [r2, #0]
 8016404:	7019      	strb	r1, [r3, #0]
 8016406:	4608      	mov	r0, r1
 8016408:	f85d 4b04 	ldr.w	r4, [sp], #4
 801640c:	4770      	bx	lr

0801640e <__sfputs_r>:
 801640e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016410:	4606      	mov	r6, r0
 8016412:	460f      	mov	r7, r1
 8016414:	4614      	mov	r4, r2
 8016416:	18d5      	adds	r5, r2, r3
 8016418:	42ac      	cmp	r4, r5
 801641a:	d101      	bne.n	8016420 <__sfputs_r+0x12>
 801641c:	2000      	movs	r0, #0
 801641e:	e007      	b.n	8016430 <__sfputs_r+0x22>
 8016420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016424:	463a      	mov	r2, r7
 8016426:	4630      	mov	r0, r6
 8016428:	f7ff ffda 	bl	80163e0 <__sfputc_r>
 801642c:	1c43      	adds	r3, r0, #1
 801642e:	d1f3      	bne.n	8016418 <__sfputs_r+0xa>
 8016430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016434 <_vfiprintf_r>:
 8016434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016438:	460d      	mov	r5, r1
 801643a:	b09d      	sub	sp, #116	; 0x74
 801643c:	4614      	mov	r4, r2
 801643e:	4698      	mov	r8, r3
 8016440:	4606      	mov	r6, r0
 8016442:	b118      	cbz	r0, 801644c <_vfiprintf_r+0x18>
 8016444:	6983      	ldr	r3, [r0, #24]
 8016446:	b90b      	cbnz	r3, 801644c <_vfiprintf_r+0x18>
 8016448:	f000 fb42 	bl	8016ad0 <__sinit>
 801644c:	4b89      	ldr	r3, [pc, #548]	; (8016674 <_vfiprintf_r+0x240>)
 801644e:	429d      	cmp	r5, r3
 8016450:	d11b      	bne.n	801648a <_vfiprintf_r+0x56>
 8016452:	6875      	ldr	r5, [r6, #4]
 8016454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016456:	07d9      	lsls	r1, r3, #31
 8016458:	d405      	bmi.n	8016466 <_vfiprintf_r+0x32>
 801645a:	89ab      	ldrh	r3, [r5, #12]
 801645c:	059a      	lsls	r2, r3, #22
 801645e:	d402      	bmi.n	8016466 <_vfiprintf_r+0x32>
 8016460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016462:	f000 fbd3 	bl	8016c0c <__retarget_lock_acquire_recursive>
 8016466:	89ab      	ldrh	r3, [r5, #12]
 8016468:	071b      	lsls	r3, r3, #28
 801646a:	d501      	bpl.n	8016470 <_vfiprintf_r+0x3c>
 801646c:	692b      	ldr	r3, [r5, #16]
 801646e:	b9eb      	cbnz	r3, 80164ac <_vfiprintf_r+0x78>
 8016470:	4629      	mov	r1, r5
 8016472:	4630      	mov	r0, r6
 8016474:	f000 f99c 	bl	80167b0 <__swsetup_r>
 8016478:	b1c0      	cbz	r0, 80164ac <_vfiprintf_r+0x78>
 801647a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801647c:	07dc      	lsls	r4, r3, #31
 801647e:	d50e      	bpl.n	801649e <_vfiprintf_r+0x6a>
 8016480:	f04f 30ff 	mov.w	r0, #4294967295
 8016484:	b01d      	add	sp, #116	; 0x74
 8016486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648a:	4b7b      	ldr	r3, [pc, #492]	; (8016678 <_vfiprintf_r+0x244>)
 801648c:	429d      	cmp	r5, r3
 801648e:	d101      	bne.n	8016494 <_vfiprintf_r+0x60>
 8016490:	68b5      	ldr	r5, [r6, #8]
 8016492:	e7df      	b.n	8016454 <_vfiprintf_r+0x20>
 8016494:	4b79      	ldr	r3, [pc, #484]	; (801667c <_vfiprintf_r+0x248>)
 8016496:	429d      	cmp	r5, r3
 8016498:	bf08      	it	eq
 801649a:	68f5      	ldreq	r5, [r6, #12]
 801649c:	e7da      	b.n	8016454 <_vfiprintf_r+0x20>
 801649e:	89ab      	ldrh	r3, [r5, #12]
 80164a0:	0598      	lsls	r0, r3, #22
 80164a2:	d4ed      	bmi.n	8016480 <_vfiprintf_r+0x4c>
 80164a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80164a6:	f000 fbb2 	bl	8016c0e <__retarget_lock_release_recursive>
 80164aa:	e7e9      	b.n	8016480 <_vfiprintf_r+0x4c>
 80164ac:	2300      	movs	r3, #0
 80164ae:	9309      	str	r3, [sp, #36]	; 0x24
 80164b0:	2320      	movs	r3, #32
 80164b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80164b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80164ba:	2330      	movs	r3, #48	; 0x30
 80164bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016680 <_vfiprintf_r+0x24c>
 80164c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80164c4:	f04f 0901 	mov.w	r9, #1
 80164c8:	4623      	mov	r3, r4
 80164ca:	469a      	mov	sl, r3
 80164cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164d0:	b10a      	cbz	r2, 80164d6 <_vfiprintf_r+0xa2>
 80164d2:	2a25      	cmp	r2, #37	; 0x25
 80164d4:	d1f9      	bne.n	80164ca <_vfiprintf_r+0x96>
 80164d6:	ebba 0b04 	subs.w	fp, sl, r4
 80164da:	d00b      	beq.n	80164f4 <_vfiprintf_r+0xc0>
 80164dc:	465b      	mov	r3, fp
 80164de:	4622      	mov	r2, r4
 80164e0:	4629      	mov	r1, r5
 80164e2:	4630      	mov	r0, r6
 80164e4:	f7ff ff93 	bl	801640e <__sfputs_r>
 80164e8:	3001      	adds	r0, #1
 80164ea:	f000 80aa 	beq.w	8016642 <_vfiprintf_r+0x20e>
 80164ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164f0:	445a      	add	r2, fp
 80164f2:	9209      	str	r2, [sp, #36]	; 0x24
 80164f4:	f89a 3000 	ldrb.w	r3, [sl]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f000 80a2 	beq.w	8016642 <_vfiprintf_r+0x20e>
 80164fe:	2300      	movs	r3, #0
 8016500:	f04f 32ff 	mov.w	r2, #4294967295
 8016504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016508:	f10a 0a01 	add.w	sl, sl, #1
 801650c:	9304      	str	r3, [sp, #16]
 801650e:	9307      	str	r3, [sp, #28]
 8016510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016514:	931a      	str	r3, [sp, #104]	; 0x68
 8016516:	4654      	mov	r4, sl
 8016518:	2205      	movs	r2, #5
 801651a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801651e:	4858      	ldr	r0, [pc, #352]	; (8016680 <_vfiprintf_r+0x24c>)
 8016520:	f7e9 fe76 	bl	8000210 <memchr>
 8016524:	9a04      	ldr	r2, [sp, #16]
 8016526:	b9d8      	cbnz	r0, 8016560 <_vfiprintf_r+0x12c>
 8016528:	06d1      	lsls	r1, r2, #27
 801652a:	bf44      	itt	mi
 801652c:	2320      	movmi	r3, #32
 801652e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016532:	0713      	lsls	r3, r2, #28
 8016534:	bf44      	itt	mi
 8016536:	232b      	movmi	r3, #43	; 0x2b
 8016538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801653c:	f89a 3000 	ldrb.w	r3, [sl]
 8016540:	2b2a      	cmp	r3, #42	; 0x2a
 8016542:	d015      	beq.n	8016570 <_vfiprintf_r+0x13c>
 8016544:	9a07      	ldr	r2, [sp, #28]
 8016546:	4654      	mov	r4, sl
 8016548:	2000      	movs	r0, #0
 801654a:	f04f 0c0a 	mov.w	ip, #10
 801654e:	4621      	mov	r1, r4
 8016550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016554:	3b30      	subs	r3, #48	; 0x30
 8016556:	2b09      	cmp	r3, #9
 8016558:	d94e      	bls.n	80165f8 <_vfiprintf_r+0x1c4>
 801655a:	b1b0      	cbz	r0, 801658a <_vfiprintf_r+0x156>
 801655c:	9207      	str	r2, [sp, #28]
 801655e:	e014      	b.n	801658a <_vfiprintf_r+0x156>
 8016560:	eba0 0308 	sub.w	r3, r0, r8
 8016564:	fa09 f303 	lsl.w	r3, r9, r3
 8016568:	4313      	orrs	r3, r2
 801656a:	9304      	str	r3, [sp, #16]
 801656c:	46a2      	mov	sl, r4
 801656e:	e7d2      	b.n	8016516 <_vfiprintf_r+0xe2>
 8016570:	9b03      	ldr	r3, [sp, #12]
 8016572:	1d19      	adds	r1, r3, #4
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	9103      	str	r1, [sp, #12]
 8016578:	2b00      	cmp	r3, #0
 801657a:	bfbb      	ittet	lt
 801657c:	425b      	neglt	r3, r3
 801657e:	f042 0202 	orrlt.w	r2, r2, #2
 8016582:	9307      	strge	r3, [sp, #28]
 8016584:	9307      	strlt	r3, [sp, #28]
 8016586:	bfb8      	it	lt
 8016588:	9204      	strlt	r2, [sp, #16]
 801658a:	7823      	ldrb	r3, [r4, #0]
 801658c:	2b2e      	cmp	r3, #46	; 0x2e
 801658e:	d10c      	bne.n	80165aa <_vfiprintf_r+0x176>
 8016590:	7863      	ldrb	r3, [r4, #1]
 8016592:	2b2a      	cmp	r3, #42	; 0x2a
 8016594:	d135      	bne.n	8016602 <_vfiprintf_r+0x1ce>
 8016596:	9b03      	ldr	r3, [sp, #12]
 8016598:	1d1a      	adds	r2, r3, #4
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	9203      	str	r2, [sp, #12]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	bfb8      	it	lt
 80165a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80165a6:	3402      	adds	r4, #2
 80165a8:	9305      	str	r3, [sp, #20]
 80165aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016690 <_vfiprintf_r+0x25c>
 80165ae:	7821      	ldrb	r1, [r4, #0]
 80165b0:	2203      	movs	r2, #3
 80165b2:	4650      	mov	r0, sl
 80165b4:	f7e9 fe2c 	bl	8000210 <memchr>
 80165b8:	b140      	cbz	r0, 80165cc <_vfiprintf_r+0x198>
 80165ba:	2340      	movs	r3, #64	; 0x40
 80165bc:	eba0 000a 	sub.w	r0, r0, sl
 80165c0:	fa03 f000 	lsl.w	r0, r3, r0
 80165c4:	9b04      	ldr	r3, [sp, #16]
 80165c6:	4303      	orrs	r3, r0
 80165c8:	3401      	adds	r4, #1
 80165ca:	9304      	str	r3, [sp, #16]
 80165cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165d0:	482c      	ldr	r0, [pc, #176]	; (8016684 <_vfiprintf_r+0x250>)
 80165d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80165d6:	2206      	movs	r2, #6
 80165d8:	f7e9 fe1a 	bl	8000210 <memchr>
 80165dc:	2800      	cmp	r0, #0
 80165de:	d03f      	beq.n	8016660 <_vfiprintf_r+0x22c>
 80165e0:	4b29      	ldr	r3, [pc, #164]	; (8016688 <_vfiprintf_r+0x254>)
 80165e2:	bb1b      	cbnz	r3, 801662c <_vfiprintf_r+0x1f8>
 80165e4:	9b03      	ldr	r3, [sp, #12]
 80165e6:	3307      	adds	r3, #7
 80165e8:	f023 0307 	bic.w	r3, r3, #7
 80165ec:	3308      	adds	r3, #8
 80165ee:	9303      	str	r3, [sp, #12]
 80165f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165f2:	443b      	add	r3, r7
 80165f4:	9309      	str	r3, [sp, #36]	; 0x24
 80165f6:	e767      	b.n	80164c8 <_vfiprintf_r+0x94>
 80165f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80165fc:	460c      	mov	r4, r1
 80165fe:	2001      	movs	r0, #1
 8016600:	e7a5      	b.n	801654e <_vfiprintf_r+0x11a>
 8016602:	2300      	movs	r3, #0
 8016604:	3401      	adds	r4, #1
 8016606:	9305      	str	r3, [sp, #20]
 8016608:	4619      	mov	r1, r3
 801660a:	f04f 0c0a 	mov.w	ip, #10
 801660e:	4620      	mov	r0, r4
 8016610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016614:	3a30      	subs	r2, #48	; 0x30
 8016616:	2a09      	cmp	r2, #9
 8016618:	d903      	bls.n	8016622 <_vfiprintf_r+0x1ee>
 801661a:	2b00      	cmp	r3, #0
 801661c:	d0c5      	beq.n	80165aa <_vfiprintf_r+0x176>
 801661e:	9105      	str	r1, [sp, #20]
 8016620:	e7c3      	b.n	80165aa <_vfiprintf_r+0x176>
 8016622:	fb0c 2101 	mla	r1, ip, r1, r2
 8016626:	4604      	mov	r4, r0
 8016628:	2301      	movs	r3, #1
 801662a:	e7f0      	b.n	801660e <_vfiprintf_r+0x1da>
 801662c:	ab03      	add	r3, sp, #12
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	462a      	mov	r2, r5
 8016632:	4b16      	ldr	r3, [pc, #88]	; (801668c <_vfiprintf_r+0x258>)
 8016634:	a904      	add	r1, sp, #16
 8016636:	4630      	mov	r0, r6
 8016638:	f7fc f85a 	bl	80126f0 <_printf_float>
 801663c:	4607      	mov	r7, r0
 801663e:	1c78      	adds	r0, r7, #1
 8016640:	d1d6      	bne.n	80165f0 <_vfiprintf_r+0x1bc>
 8016642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016644:	07d9      	lsls	r1, r3, #31
 8016646:	d405      	bmi.n	8016654 <_vfiprintf_r+0x220>
 8016648:	89ab      	ldrh	r3, [r5, #12]
 801664a:	059a      	lsls	r2, r3, #22
 801664c:	d402      	bmi.n	8016654 <_vfiprintf_r+0x220>
 801664e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016650:	f000 fadd 	bl	8016c0e <__retarget_lock_release_recursive>
 8016654:	89ab      	ldrh	r3, [r5, #12]
 8016656:	065b      	lsls	r3, r3, #25
 8016658:	f53f af12 	bmi.w	8016480 <_vfiprintf_r+0x4c>
 801665c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801665e:	e711      	b.n	8016484 <_vfiprintf_r+0x50>
 8016660:	ab03      	add	r3, sp, #12
 8016662:	9300      	str	r3, [sp, #0]
 8016664:	462a      	mov	r2, r5
 8016666:	4b09      	ldr	r3, [pc, #36]	; (801668c <_vfiprintf_r+0x258>)
 8016668:	a904      	add	r1, sp, #16
 801666a:	4630      	mov	r0, r6
 801666c:	f7fc fae4 	bl	8012c38 <_printf_i>
 8016670:	e7e4      	b.n	801663c <_vfiprintf_r+0x208>
 8016672:	bf00      	nop
 8016674:	0802b080 	.word	0x0802b080
 8016678:	0802b0a0 	.word	0x0802b0a0
 801667c:	0802b060 	.word	0x0802b060
 8016680:	0802b04c 	.word	0x0802b04c
 8016684:	0802b056 	.word	0x0802b056
 8016688:	080126f1 	.word	0x080126f1
 801668c:	0801640f 	.word	0x0801640f
 8016690:	0802b052 	.word	0x0802b052
 8016694:	00000000 	.word	0x00000000

08016698 <nan>:
 8016698:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80166a0 <nan+0x8>
 801669c:	4770      	bx	lr
 801669e:	bf00      	nop
 80166a0:	00000000 	.word	0x00000000
 80166a4:	7ff80000 	.word	0x7ff80000

080166a8 <_sbrk_r>:
 80166a8:	b538      	push	{r3, r4, r5, lr}
 80166aa:	4d06      	ldr	r5, [pc, #24]	; (80166c4 <_sbrk_r+0x1c>)
 80166ac:	2300      	movs	r3, #0
 80166ae:	4604      	mov	r4, r0
 80166b0:	4608      	mov	r0, r1
 80166b2:	602b      	str	r3, [r5, #0]
 80166b4:	f7f4 fa46 	bl	800ab44 <_sbrk>
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	d102      	bne.n	80166c2 <_sbrk_r+0x1a>
 80166bc:	682b      	ldr	r3, [r5, #0]
 80166be:	b103      	cbz	r3, 80166c2 <_sbrk_r+0x1a>
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	bd38      	pop	{r3, r4, r5, pc}
 80166c4:	20000d88 	.word	0x20000d88

080166c8 <strncmp>:
 80166c8:	b510      	push	{r4, lr}
 80166ca:	b17a      	cbz	r2, 80166ec <strncmp+0x24>
 80166cc:	4603      	mov	r3, r0
 80166ce:	3901      	subs	r1, #1
 80166d0:	1884      	adds	r4, r0, r2
 80166d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80166d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80166da:	4290      	cmp	r0, r2
 80166dc:	d101      	bne.n	80166e2 <strncmp+0x1a>
 80166de:	42a3      	cmp	r3, r4
 80166e0:	d101      	bne.n	80166e6 <strncmp+0x1e>
 80166e2:	1a80      	subs	r0, r0, r2
 80166e4:	bd10      	pop	{r4, pc}
 80166e6:	2800      	cmp	r0, #0
 80166e8:	d1f3      	bne.n	80166d2 <strncmp+0xa>
 80166ea:	e7fa      	b.n	80166e2 <strncmp+0x1a>
 80166ec:	4610      	mov	r0, r2
 80166ee:	e7f9      	b.n	80166e4 <strncmp+0x1c>

080166f0 <__swbuf_r>:
 80166f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f2:	460e      	mov	r6, r1
 80166f4:	4614      	mov	r4, r2
 80166f6:	4605      	mov	r5, r0
 80166f8:	b118      	cbz	r0, 8016702 <__swbuf_r+0x12>
 80166fa:	6983      	ldr	r3, [r0, #24]
 80166fc:	b90b      	cbnz	r3, 8016702 <__swbuf_r+0x12>
 80166fe:	f000 f9e7 	bl	8016ad0 <__sinit>
 8016702:	4b21      	ldr	r3, [pc, #132]	; (8016788 <__swbuf_r+0x98>)
 8016704:	429c      	cmp	r4, r3
 8016706:	d12b      	bne.n	8016760 <__swbuf_r+0x70>
 8016708:	686c      	ldr	r4, [r5, #4]
 801670a:	69a3      	ldr	r3, [r4, #24]
 801670c:	60a3      	str	r3, [r4, #8]
 801670e:	89a3      	ldrh	r3, [r4, #12]
 8016710:	071a      	lsls	r2, r3, #28
 8016712:	d52f      	bpl.n	8016774 <__swbuf_r+0x84>
 8016714:	6923      	ldr	r3, [r4, #16]
 8016716:	b36b      	cbz	r3, 8016774 <__swbuf_r+0x84>
 8016718:	6923      	ldr	r3, [r4, #16]
 801671a:	6820      	ldr	r0, [r4, #0]
 801671c:	1ac0      	subs	r0, r0, r3
 801671e:	6963      	ldr	r3, [r4, #20]
 8016720:	b2f6      	uxtb	r6, r6
 8016722:	4283      	cmp	r3, r0
 8016724:	4637      	mov	r7, r6
 8016726:	dc04      	bgt.n	8016732 <__swbuf_r+0x42>
 8016728:	4621      	mov	r1, r4
 801672a:	4628      	mov	r0, r5
 801672c:	f000 f93c 	bl	80169a8 <_fflush_r>
 8016730:	bb30      	cbnz	r0, 8016780 <__swbuf_r+0x90>
 8016732:	68a3      	ldr	r3, [r4, #8]
 8016734:	3b01      	subs	r3, #1
 8016736:	60a3      	str	r3, [r4, #8]
 8016738:	6823      	ldr	r3, [r4, #0]
 801673a:	1c5a      	adds	r2, r3, #1
 801673c:	6022      	str	r2, [r4, #0]
 801673e:	701e      	strb	r6, [r3, #0]
 8016740:	6963      	ldr	r3, [r4, #20]
 8016742:	3001      	adds	r0, #1
 8016744:	4283      	cmp	r3, r0
 8016746:	d004      	beq.n	8016752 <__swbuf_r+0x62>
 8016748:	89a3      	ldrh	r3, [r4, #12]
 801674a:	07db      	lsls	r3, r3, #31
 801674c:	d506      	bpl.n	801675c <__swbuf_r+0x6c>
 801674e:	2e0a      	cmp	r6, #10
 8016750:	d104      	bne.n	801675c <__swbuf_r+0x6c>
 8016752:	4621      	mov	r1, r4
 8016754:	4628      	mov	r0, r5
 8016756:	f000 f927 	bl	80169a8 <_fflush_r>
 801675a:	b988      	cbnz	r0, 8016780 <__swbuf_r+0x90>
 801675c:	4638      	mov	r0, r7
 801675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016760:	4b0a      	ldr	r3, [pc, #40]	; (801678c <__swbuf_r+0x9c>)
 8016762:	429c      	cmp	r4, r3
 8016764:	d101      	bne.n	801676a <__swbuf_r+0x7a>
 8016766:	68ac      	ldr	r4, [r5, #8]
 8016768:	e7cf      	b.n	801670a <__swbuf_r+0x1a>
 801676a:	4b09      	ldr	r3, [pc, #36]	; (8016790 <__swbuf_r+0xa0>)
 801676c:	429c      	cmp	r4, r3
 801676e:	bf08      	it	eq
 8016770:	68ec      	ldreq	r4, [r5, #12]
 8016772:	e7ca      	b.n	801670a <__swbuf_r+0x1a>
 8016774:	4621      	mov	r1, r4
 8016776:	4628      	mov	r0, r5
 8016778:	f000 f81a 	bl	80167b0 <__swsetup_r>
 801677c:	2800      	cmp	r0, #0
 801677e:	d0cb      	beq.n	8016718 <__swbuf_r+0x28>
 8016780:	f04f 37ff 	mov.w	r7, #4294967295
 8016784:	e7ea      	b.n	801675c <__swbuf_r+0x6c>
 8016786:	bf00      	nop
 8016788:	0802b080 	.word	0x0802b080
 801678c:	0802b0a0 	.word	0x0802b0a0
 8016790:	0802b060 	.word	0x0802b060

08016794 <__ascii_wctomb>:
 8016794:	b149      	cbz	r1, 80167aa <__ascii_wctomb+0x16>
 8016796:	2aff      	cmp	r2, #255	; 0xff
 8016798:	bf85      	ittet	hi
 801679a:	238a      	movhi	r3, #138	; 0x8a
 801679c:	6003      	strhi	r3, [r0, #0]
 801679e:	700a      	strbls	r2, [r1, #0]
 80167a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80167a4:	bf98      	it	ls
 80167a6:	2001      	movls	r0, #1
 80167a8:	4770      	bx	lr
 80167aa:	4608      	mov	r0, r1
 80167ac:	4770      	bx	lr
	...

080167b0 <__swsetup_r>:
 80167b0:	4b32      	ldr	r3, [pc, #200]	; (801687c <__swsetup_r+0xcc>)
 80167b2:	b570      	push	{r4, r5, r6, lr}
 80167b4:	681d      	ldr	r5, [r3, #0]
 80167b6:	4606      	mov	r6, r0
 80167b8:	460c      	mov	r4, r1
 80167ba:	b125      	cbz	r5, 80167c6 <__swsetup_r+0x16>
 80167bc:	69ab      	ldr	r3, [r5, #24]
 80167be:	b913      	cbnz	r3, 80167c6 <__swsetup_r+0x16>
 80167c0:	4628      	mov	r0, r5
 80167c2:	f000 f985 	bl	8016ad0 <__sinit>
 80167c6:	4b2e      	ldr	r3, [pc, #184]	; (8016880 <__swsetup_r+0xd0>)
 80167c8:	429c      	cmp	r4, r3
 80167ca:	d10f      	bne.n	80167ec <__swsetup_r+0x3c>
 80167cc:	686c      	ldr	r4, [r5, #4]
 80167ce:	89a3      	ldrh	r3, [r4, #12]
 80167d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167d4:	0719      	lsls	r1, r3, #28
 80167d6:	d42c      	bmi.n	8016832 <__swsetup_r+0x82>
 80167d8:	06dd      	lsls	r5, r3, #27
 80167da:	d411      	bmi.n	8016800 <__swsetup_r+0x50>
 80167dc:	2309      	movs	r3, #9
 80167de:	6033      	str	r3, [r6, #0]
 80167e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80167e4:	81a3      	strh	r3, [r4, #12]
 80167e6:	f04f 30ff 	mov.w	r0, #4294967295
 80167ea:	e03e      	b.n	801686a <__swsetup_r+0xba>
 80167ec:	4b25      	ldr	r3, [pc, #148]	; (8016884 <__swsetup_r+0xd4>)
 80167ee:	429c      	cmp	r4, r3
 80167f0:	d101      	bne.n	80167f6 <__swsetup_r+0x46>
 80167f2:	68ac      	ldr	r4, [r5, #8]
 80167f4:	e7eb      	b.n	80167ce <__swsetup_r+0x1e>
 80167f6:	4b24      	ldr	r3, [pc, #144]	; (8016888 <__swsetup_r+0xd8>)
 80167f8:	429c      	cmp	r4, r3
 80167fa:	bf08      	it	eq
 80167fc:	68ec      	ldreq	r4, [r5, #12]
 80167fe:	e7e6      	b.n	80167ce <__swsetup_r+0x1e>
 8016800:	0758      	lsls	r0, r3, #29
 8016802:	d512      	bpl.n	801682a <__swsetup_r+0x7a>
 8016804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016806:	b141      	cbz	r1, 801681a <__swsetup_r+0x6a>
 8016808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801680c:	4299      	cmp	r1, r3
 801680e:	d002      	beq.n	8016816 <__swsetup_r+0x66>
 8016810:	4630      	mov	r0, r6
 8016812:	f7ff fba9 	bl	8015f68 <_free_r>
 8016816:	2300      	movs	r3, #0
 8016818:	6363      	str	r3, [r4, #52]	; 0x34
 801681a:	89a3      	ldrh	r3, [r4, #12]
 801681c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016820:	81a3      	strh	r3, [r4, #12]
 8016822:	2300      	movs	r3, #0
 8016824:	6063      	str	r3, [r4, #4]
 8016826:	6923      	ldr	r3, [r4, #16]
 8016828:	6023      	str	r3, [r4, #0]
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	f043 0308 	orr.w	r3, r3, #8
 8016830:	81a3      	strh	r3, [r4, #12]
 8016832:	6923      	ldr	r3, [r4, #16]
 8016834:	b94b      	cbnz	r3, 801684a <__swsetup_r+0x9a>
 8016836:	89a3      	ldrh	r3, [r4, #12]
 8016838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801683c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016840:	d003      	beq.n	801684a <__swsetup_r+0x9a>
 8016842:	4621      	mov	r1, r4
 8016844:	4630      	mov	r0, r6
 8016846:	f000 fa09 	bl	8016c5c <__smakebuf_r>
 801684a:	89a0      	ldrh	r0, [r4, #12]
 801684c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016850:	f010 0301 	ands.w	r3, r0, #1
 8016854:	d00a      	beq.n	801686c <__swsetup_r+0xbc>
 8016856:	2300      	movs	r3, #0
 8016858:	60a3      	str	r3, [r4, #8]
 801685a:	6963      	ldr	r3, [r4, #20]
 801685c:	425b      	negs	r3, r3
 801685e:	61a3      	str	r3, [r4, #24]
 8016860:	6923      	ldr	r3, [r4, #16]
 8016862:	b943      	cbnz	r3, 8016876 <__swsetup_r+0xc6>
 8016864:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016868:	d1ba      	bne.n	80167e0 <__swsetup_r+0x30>
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	0781      	lsls	r1, r0, #30
 801686e:	bf58      	it	pl
 8016870:	6963      	ldrpl	r3, [r4, #20]
 8016872:	60a3      	str	r3, [r4, #8]
 8016874:	e7f4      	b.n	8016860 <__swsetup_r+0xb0>
 8016876:	2000      	movs	r0, #0
 8016878:	e7f7      	b.n	801686a <__swsetup_r+0xba>
 801687a:	bf00      	nop
 801687c:	20000044 	.word	0x20000044
 8016880:	0802b080 	.word	0x0802b080
 8016884:	0802b0a0 	.word	0x0802b0a0
 8016888:	0802b060 	.word	0x0802b060

0801688c <abort>:
 801688c:	b508      	push	{r3, lr}
 801688e:	2006      	movs	r0, #6
 8016890:	f000 faa2 	bl	8016dd8 <raise>
 8016894:	2001      	movs	r0, #1
 8016896:	f7f4 f8dd 	bl	800aa54 <_exit>
	...

0801689c <__sflush_r>:
 801689c:	898a      	ldrh	r2, [r1, #12]
 801689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168a2:	4605      	mov	r5, r0
 80168a4:	0710      	lsls	r0, r2, #28
 80168a6:	460c      	mov	r4, r1
 80168a8:	d458      	bmi.n	801695c <__sflush_r+0xc0>
 80168aa:	684b      	ldr	r3, [r1, #4]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	dc05      	bgt.n	80168bc <__sflush_r+0x20>
 80168b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	dc02      	bgt.n	80168bc <__sflush_r+0x20>
 80168b6:	2000      	movs	r0, #0
 80168b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168be:	2e00      	cmp	r6, #0
 80168c0:	d0f9      	beq.n	80168b6 <__sflush_r+0x1a>
 80168c2:	2300      	movs	r3, #0
 80168c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80168c8:	682f      	ldr	r7, [r5, #0]
 80168ca:	602b      	str	r3, [r5, #0]
 80168cc:	d032      	beq.n	8016934 <__sflush_r+0x98>
 80168ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80168d0:	89a3      	ldrh	r3, [r4, #12]
 80168d2:	075a      	lsls	r2, r3, #29
 80168d4:	d505      	bpl.n	80168e2 <__sflush_r+0x46>
 80168d6:	6863      	ldr	r3, [r4, #4]
 80168d8:	1ac0      	subs	r0, r0, r3
 80168da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168dc:	b10b      	cbz	r3, 80168e2 <__sflush_r+0x46>
 80168de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168e0:	1ac0      	subs	r0, r0, r3
 80168e2:	2300      	movs	r3, #0
 80168e4:	4602      	mov	r2, r0
 80168e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168e8:	6a21      	ldr	r1, [r4, #32]
 80168ea:	4628      	mov	r0, r5
 80168ec:	47b0      	blx	r6
 80168ee:	1c43      	adds	r3, r0, #1
 80168f0:	89a3      	ldrh	r3, [r4, #12]
 80168f2:	d106      	bne.n	8016902 <__sflush_r+0x66>
 80168f4:	6829      	ldr	r1, [r5, #0]
 80168f6:	291d      	cmp	r1, #29
 80168f8:	d82c      	bhi.n	8016954 <__sflush_r+0xb8>
 80168fa:	4a2a      	ldr	r2, [pc, #168]	; (80169a4 <__sflush_r+0x108>)
 80168fc:	40ca      	lsrs	r2, r1
 80168fe:	07d6      	lsls	r6, r2, #31
 8016900:	d528      	bpl.n	8016954 <__sflush_r+0xb8>
 8016902:	2200      	movs	r2, #0
 8016904:	6062      	str	r2, [r4, #4]
 8016906:	04d9      	lsls	r1, r3, #19
 8016908:	6922      	ldr	r2, [r4, #16]
 801690a:	6022      	str	r2, [r4, #0]
 801690c:	d504      	bpl.n	8016918 <__sflush_r+0x7c>
 801690e:	1c42      	adds	r2, r0, #1
 8016910:	d101      	bne.n	8016916 <__sflush_r+0x7a>
 8016912:	682b      	ldr	r3, [r5, #0]
 8016914:	b903      	cbnz	r3, 8016918 <__sflush_r+0x7c>
 8016916:	6560      	str	r0, [r4, #84]	; 0x54
 8016918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801691a:	602f      	str	r7, [r5, #0]
 801691c:	2900      	cmp	r1, #0
 801691e:	d0ca      	beq.n	80168b6 <__sflush_r+0x1a>
 8016920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016924:	4299      	cmp	r1, r3
 8016926:	d002      	beq.n	801692e <__sflush_r+0x92>
 8016928:	4628      	mov	r0, r5
 801692a:	f7ff fb1d 	bl	8015f68 <_free_r>
 801692e:	2000      	movs	r0, #0
 8016930:	6360      	str	r0, [r4, #52]	; 0x34
 8016932:	e7c1      	b.n	80168b8 <__sflush_r+0x1c>
 8016934:	6a21      	ldr	r1, [r4, #32]
 8016936:	2301      	movs	r3, #1
 8016938:	4628      	mov	r0, r5
 801693a:	47b0      	blx	r6
 801693c:	1c41      	adds	r1, r0, #1
 801693e:	d1c7      	bne.n	80168d0 <__sflush_r+0x34>
 8016940:	682b      	ldr	r3, [r5, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d0c4      	beq.n	80168d0 <__sflush_r+0x34>
 8016946:	2b1d      	cmp	r3, #29
 8016948:	d001      	beq.n	801694e <__sflush_r+0xb2>
 801694a:	2b16      	cmp	r3, #22
 801694c:	d101      	bne.n	8016952 <__sflush_r+0xb6>
 801694e:	602f      	str	r7, [r5, #0]
 8016950:	e7b1      	b.n	80168b6 <__sflush_r+0x1a>
 8016952:	89a3      	ldrh	r3, [r4, #12]
 8016954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016958:	81a3      	strh	r3, [r4, #12]
 801695a:	e7ad      	b.n	80168b8 <__sflush_r+0x1c>
 801695c:	690f      	ldr	r7, [r1, #16]
 801695e:	2f00      	cmp	r7, #0
 8016960:	d0a9      	beq.n	80168b6 <__sflush_r+0x1a>
 8016962:	0793      	lsls	r3, r2, #30
 8016964:	680e      	ldr	r6, [r1, #0]
 8016966:	bf08      	it	eq
 8016968:	694b      	ldreq	r3, [r1, #20]
 801696a:	600f      	str	r7, [r1, #0]
 801696c:	bf18      	it	ne
 801696e:	2300      	movne	r3, #0
 8016970:	eba6 0807 	sub.w	r8, r6, r7
 8016974:	608b      	str	r3, [r1, #8]
 8016976:	f1b8 0f00 	cmp.w	r8, #0
 801697a:	dd9c      	ble.n	80168b6 <__sflush_r+0x1a>
 801697c:	6a21      	ldr	r1, [r4, #32]
 801697e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016980:	4643      	mov	r3, r8
 8016982:	463a      	mov	r2, r7
 8016984:	4628      	mov	r0, r5
 8016986:	47b0      	blx	r6
 8016988:	2800      	cmp	r0, #0
 801698a:	dc06      	bgt.n	801699a <__sflush_r+0xfe>
 801698c:	89a3      	ldrh	r3, [r4, #12]
 801698e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016992:	81a3      	strh	r3, [r4, #12]
 8016994:	f04f 30ff 	mov.w	r0, #4294967295
 8016998:	e78e      	b.n	80168b8 <__sflush_r+0x1c>
 801699a:	4407      	add	r7, r0
 801699c:	eba8 0800 	sub.w	r8, r8, r0
 80169a0:	e7e9      	b.n	8016976 <__sflush_r+0xda>
 80169a2:	bf00      	nop
 80169a4:	20400001 	.word	0x20400001

080169a8 <_fflush_r>:
 80169a8:	b538      	push	{r3, r4, r5, lr}
 80169aa:	690b      	ldr	r3, [r1, #16]
 80169ac:	4605      	mov	r5, r0
 80169ae:	460c      	mov	r4, r1
 80169b0:	b913      	cbnz	r3, 80169b8 <_fflush_r+0x10>
 80169b2:	2500      	movs	r5, #0
 80169b4:	4628      	mov	r0, r5
 80169b6:	bd38      	pop	{r3, r4, r5, pc}
 80169b8:	b118      	cbz	r0, 80169c2 <_fflush_r+0x1a>
 80169ba:	6983      	ldr	r3, [r0, #24]
 80169bc:	b90b      	cbnz	r3, 80169c2 <_fflush_r+0x1a>
 80169be:	f000 f887 	bl	8016ad0 <__sinit>
 80169c2:	4b14      	ldr	r3, [pc, #80]	; (8016a14 <_fflush_r+0x6c>)
 80169c4:	429c      	cmp	r4, r3
 80169c6:	d11b      	bne.n	8016a00 <_fflush_r+0x58>
 80169c8:	686c      	ldr	r4, [r5, #4]
 80169ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d0ef      	beq.n	80169b2 <_fflush_r+0xa>
 80169d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80169d4:	07d0      	lsls	r0, r2, #31
 80169d6:	d404      	bmi.n	80169e2 <_fflush_r+0x3a>
 80169d8:	0599      	lsls	r1, r3, #22
 80169da:	d402      	bmi.n	80169e2 <_fflush_r+0x3a>
 80169dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169de:	f000 f915 	bl	8016c0c <__retarget_lock_acquire_recursive>
 80169e2:	4628      	mov	r0, r5
 80169e4:	4621      	mov	r1, r4
 80169e6:	f7ff ff59 	bl	801689c <__sflush_r>
 80169ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80169ec:	07da      	lsls	r2, r3, #31
 80169ee:	4605      	mov	r5, r0
 80169f0:	d4e0      	bmi.n	80169b4 <_fflush_r+0xc>
 80169f2:	89a3      	ldrh	r3, [r4, #12]
 80169f4:	059b      	lsls	r3, r3, #22
 80169f6:	d4dd      	bmi.n	80169b4 <_fflush_r+0xc>
 80169f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169fa:	f000 f908 	bl	8016c0e <__retarget_lock_release_recursive>
 80169fe:	e7d9      	b.n	80169b4 <_fflush_r+0xc>
 8016a00:	4b05      	ldr	r3, [pc, #20]	; (8016a18 <_fflush_r+0x70>)
 8016a02:	429c      	cmp	r4, r3
 8016a04:	d101      	bne.n	8016a0a <_fflush_r+0x62>
 8016a06:	68ac      	ldr	r4, [r5, #8]
 8016a08:	e7df      	b.n	80169ca <_fflush_r+0x22>
 8016a0a:	4b04      	ldr	r3, [pc, #16]	; (8016a1c <_fflush_r+0x74>)
 8016a0c:	429c      	cmp	r4, r3
 8016a0e:	bf08      	it	eq
 8016a10:	68ec      	ldreq	r4, [r5, #12]
 8016a12:	e7da      	b.n	80169ca <_fflush_r+0x22>
 8016a14:	0802b080 	.word	0x0802b080
 8016a18:	0802b0a0 	.word	0x0802b0a0
 8016a1c:	0802b060 	.word	0x0802b060

08016a20 <std>:
 8016a20:	2300      	movs	r3, #0
 8016a22:	b510      	push	{r4, lr}
 8016a24:	4604      	mov	r4, r0
 8016a26:	e9c0 3300 	strd	r3, r3, [r0]
 8016a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a2e:	6083      	str	r3, [r0, #8]
 8016a30:	8181      	strh	r1, [r0, #12]
 8016a32:	6643      	str	r3, [r0, #100]	; 0x64
 8016a34:	81c2      	strh	r2, [r0, #14]
 8016a36:	6183      	str	r3, [r0, #24]
 8016a38:	4619      	mov	r1, r3
 8016a3a:	2208      	movs	r2, #8
 8016a3c:	305c      	adds	r0, #92	; 0x5c
 8016a3e:	f7fb fdaf 	bl	80125a0 <memset>
 8016a42:	4b05      	ldr	r3, [pc, #20]	; (8016a58 <std+0x38>)
 8016a44:	6263      	str	r3, [r4, #36]	; 0x24
 8016a46:	4b05      	ldr	r3, [pc, #20]	; (8016a5c <std+0x3c>)
 8016a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a4a:	4b05      	ldr	r3, [pc, #20]	; (8016a60 <std+0x40>)
 8016a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a4e:	4b05      	ldr	r3, [pc, #20]	; (8016a64 <std+0x44>)
 8016a50:	6224      	str	r4, [r4, #32]
 8016a52:	6323      	str	r3, [r4, #48]	; 0x30
 8016a54:	bd10      	pop	{r4, pc}
 8016a56:	bf00      	nop
 8016a58:	08016e11 	.word	0x08016e11
 8016a5c:	08016e33 	.word	0x08016e33
 8016a60:	08016e6b 	.word	0x08016e6b
 8016a64:	08016e8f 	.word	0x08016e8f

08016a68 <_cleanup_r>:
 8016a68:	4901      	ldr	r1, [pc, #4]	; (8016a70 <_cleanup_r+0x8>)
 8016a6a:	f000 b8af 	b.w	8016bcc <_fwalk_reent>
 8016a6e:	bf00      	nop
 8016a70:	080169a9 	.word	0x080169a9

08016a74 <__sfmoreglue>:
 8016a74:	b570      	push	{r4, r5, r6, lr}
 8016a76:	2268      	movs	r2, #104	; 0x68
 8016a78:	1e4d      	subs	r5, r1, #1
 8016a7a:	4355      	muls	r5, r2
 8016a7c:	460e      	mov	r6, r1
 8016a7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016a82:	f7ff fadd 	bl	8016040 <_malloc_r>
 8016a86:	4604      	mov	r4, r0
 8016a88:	b140      	cbz	r0, 8016a9c <__sfmoreglue+0x28>
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	e9c0 1600 	strd	r1, r6, [r0]
 8016a90:	300c      	adds	r0, #12
 8016a92:	60a0      	str	r0, [r4, #8]
 8016a94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016a98:	f7fb fd82 	bl	80125a0 <memset>
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	bd70      	pop	{r4, r5, r6, pc}

08016aa0 <__sfp_lock_acquire>:
 8016aa0:	4801      	ldr	r0, [pc, #4]	; (8016aa8 <__sfp_lock_acquire+0x8>)
 8016aa2:	f000 b8b3 	b.w	8016c0c <__retarget_lock_acquire_recursive>
 8016aa6:	bf00      	nop
 8016aa8:	20000d85 	.word	0x20000d85

08016aac <__sfp_lock_release>:
 8016aac:	4801      	ldr	r0, [pc, #4]	; (8016ab4 <__sfp_lock_release+0x8>)
 8016aae:	f000 b8ae 	b.w	8016c0e <__retarget_lock_release_recursive>
 8016ab2:	bf00      	nop
 8016ab4:	20000d85 	.word	0x20000d85

08016ab8 <__sinit_lock_acquire>:
 8016ab8:	4801      	ldr	r0, [pc, #4]	; (8016ac0 <__sinit_lock_acquire+0x8>)
 8016aba:	f000 b8a7 	b.w	8016c0c <__retarget_lock_acquire_recursive>
 8016abe:	bf00      	nop
 8016ac0:	20000d86 	.word	0x20000d86

08016ac4 <__sinit_lock_release>:
 8016ac4:	4801      	ldr	r0, [pc, #4]	; (8016acc <__sinit_lock_release+0x8>)
 8016ac6:	f000 b8a2 	b.w	8016c0e <__retarget_lock_release_recursive>
 8016aca:	bf00      	nop
 8016acc:	20000d86 	.word	0x20000d86

08016ad0 <__sinit>:
 8016ad0:	b510      	push	{r4, lr}
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	f7ff fff0 	bl	8016ab8 <__sinit_lock_acquire>
 8016ad8:	69a3      	ldr	r3, [r4, #24]
 8016ada:	b11b      	cbz	r3, 8016ae4 <__sinit+0x14>
 8016adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ae0:	f7ff bff0 	b.w	8016ac4 <__sinit_lock_release>
 8016ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8016aea:	4b13      	ldr	r3, [pc, #76]	; (8016b38 <__sinit+0x68>)
 8016aec:	4a13      	ldr	r2, [pc, #76]	; (8016b3c <__sinit+0x6c>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016af2:	42a3      	cmp	r3, r4
 8016af4:	bf04      	itt	eq
 8016af6:	2301      	moveq	r3, #1
 8016af8:	61a3      	streq	r3, [r4, #24]
 8016afa:	4620      	mov	r0, r4
 8016afc:	f000 f820 	bl	8016b40 <__sfp>
 8016b00:	6060      	str	r0, [r4, #4]
 8016b02:	4620      	mov	r0, r4
 8016b04:	f000 f81c 	bl	8016b40 <__sfp>
 8016b08:	60a0      	str	r0, [r4, #8]
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	f000 f818 	bl	8016b40 <__sfp>
 8016b10:	2200      	movs	r2, #0
 8016b12:	60e0      	str	r0, [r4, #12]
 8016b14:	2104      	movs	r1, #4
 8016b16:	6860      	ldr	r0, [r4, #4]
 8016b18:	f7ff ff82 	bl	8016a20 <std>
 8016b1c:	68a0      	ldr	r0, [r4, #8]
 8016b1e:	2201      	movs	r2, #1
 8016b20:	2109      	movs	r1, #9
 8016b22:	f7ff ff7d 	bl	8016a20 <std>
 8016b26:	68e0      	ldr	r0, [r4, #12]
 8016b28:	2202      	movs	r2, #2
 8016b2a:	2112      	movs	r1, #18
 8016b2c:	f7ff ff78 	bl	8016a20 <std>
 8016b30:	2301      	movs	r3, #1
 8016b32:	61a3      	str	r3, [r4, #24]
 8016b34:	e7d2      	b.n	8016adc <__sinit+0xc>
 8016b36:	bf00      	nop
 8016b38:	0802abc0 	.word	0x0802abc0
 8016b3c:	08016a69 	.word	0x08016a69

08016b40 <__sfp>:
 8016b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b42:	4607      	mov	r7, r0
 8016b44:	f7ff ffac 	bl	8016aa0 <__sfp_lock_acquire>
 8016b48:	4b1e      	ldr	r3, [pc, #120]	; (8016bc4 <__sfp+0x84>)
 8016b4a:	681e      	ldr	r6, [r3, #0]
 8016b4c:	69b3      	ldr	r3, [r6, #24]
 8016b4e:	b913      	cbnz	r3, 8016b56 <__sfp+0x16>
 8016b50:	4630      	mov	r0, r6
 8016b52:	f7ff ffbd 	bl	8016ad0 <__sinit>
 8016b56:	3648      	adds	r6, #72	; 0x48
 8016b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016b5c:	3b01      	subs	r3, #1
 8016b5e:	d503      	bpl.n	8016b68 <__sfp+0x28>
 8016b60:	6833      	ldr	r3, [r6, #0]
 8016b62:	b30b      	cbz	r3, 8016ba8 <__sfp+0x68>
 8016b64:	6836      	ldr	r6, [r6, #0]
 8016b66:	e7f7      	b.n	8016b58 <__sfp+0x18>
 8016b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b6c:	b9d5      	cbnz	r5, 8016ba4 <__sfp+0x64>
 8016b6e:	4b16      	ldr	r3, [pc, #88]	; (8016bc8 <__sfp+0x88>)
 8016b70:	60e3      	str	r3, [r4, #12]
 8016b72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b76:	6665      	str	r5, [r4, #100]	; 0x64
 8016b78:	f000 f847 	bl	8016c0a <__retarget_lock_init_recursive>
 8016b7c:	f7ff ff96 	bl	8016aac <__sfp_lock_release>
 8016b80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016b84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016b88:	6025      	str	r5, [r4, #0]
 8016b8a:	61a5      	str	r5, [r4, #24]
 8016b8c:	2208      	movs	r2, #8
 8016b8e:	4629      	mov	r1, r5
 8016b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b94:	f7fb fd04 	bl	80125a0 <memset>
 8016b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ba4:	3468      	adds	r4, #104	; 0x68
 8016ba6:	e7d9      	b.n	8016b5c <__sfp+0x1c>
 8016ba8:	2104      	movs	r1, #4
 8016baa:	4638      	mov	r0, r7
 8016bac:	f7ff ff62 	bl	8016a74 <__sfmoreglue>
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	6030      	str	r0, [r6, #0]
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d1d5      	bne.n	8016b64 <__sfp+0x24>
 8016bb8:	f7ff ff78 	bl	8016aac <__sfp_lock_release>
 8016bbc:	230c      	movs	r3, #12
 8016bbe:	603b      	str	r3, [r7, #0]
 8016bc0:	e7ee      	b.n	8016ba0 <__sfp+0x60>
 8016bc2:	bf00      	nop
 8016bc4:	0802abc0 	.word	0x0802abc0
 8016bc8:	ffff0001 	.word	0xffff0001

08016bcc <_fwalk_reent>:
 8016bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bd0:	4606      	mov	r6, r0
 8016bd2:	4688      	mov	r8, r1
 8016bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016bd8:	2700      	movs	r7, #0
 8016bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bde:	f1b9 0901 	subs.w	r9, r9, #1
 8016be2:	d505      	bpl.n	8016bf0 <_fwalk_reent+0x24>
 8016be4:	6824      	ldr	r4, [r4, #0]
 8016be6:	2c00      	cmp	r4, #0
 8016be8:	d1f7      	bne.n	8016bda <_fwalk_reent+0xe>
 8016bea:	4638      	mov	r0, r7
 8016bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bf0:	89ab      	ldrh	r3, [r5, #12]
 8016bf2:	2b01      	cmp	r3, #1
 8016bf4:	d907      	bls.n	8016c06 <_fwalk_reent+0x3a>
 8016bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	d003      	beq.n	8016c06 <_fwalk_reent+0x3a>
 8016bfe:	4629      	mov	r1, r5
 8016c00:	4630      	mov	r0, r6
 8016c02:	47c0      	blx	r8
 8016c04:	4307      	orrs	r7, r0
 8016c06:	3568      	adds	r5, #104	; 0x68
 8016c08:	e7e9      	b.n	8016bde <_fwalk_reent+0x12>

08016c0a <__retarget_lock_init_recursive>:
 8016c0a:	4770      	bx	lr

08016c0c <__retarget_lock_acquire_recursive>:
 8016c0c:	4770      	bx	lr

08016c0e <__retarget_lock_release_recursive>:
 8016c0e:	4770      	bx	lr

08016c10 <__swhatbuf_r>:
 8016c10:	b570      	push	{r4, r5, r6, lr}
 8016c12:	460e      	mov	r6, r1
 8016c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c18:	2900      	cmp	r1, #0
 8016c1a:	b096      	sub	sp, #88	; 0x58
 8016c1c:	4614      	mov	r4, r2
 8016c1e:	461d      	mov	r5, r3
 8016c20:	da08      	bge.n	8016c34 <__swhatbuf_r+0x24>
 8016c22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016c26:	2200      	movs	r2, #0
 8016c28:	602a      	str	r2, [r5, #0]
 8016c2a:	061a      	lsls	r2, r3, #24
 8016c2c:	d410      	bmi.n	8016c50 <__swhatbuf_r+0x40>
 8016c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c32:	e00e      	b.n	8016c52 <__swhatbuf_r+0x42>
 8016c34:	466a      	mov	r2, sp
 8016c36:	f000 f951 	bl	8016edc <_fstat_r>
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	dbf1      	blt.n	8016c22 <__swhatbuf_r+0x12>
 8016c3e:	9a01      	ldr	r2, [sp, #4]
 8016c40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016c44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c48:	425a      	negs	r2, r3
 8016c4a:	415a      	adcs	r2, r3
 8016c4c:	602a      	str	r2, [r5, #0]
 8016c4e:	e7ee      	b.n	8016c2e <__swhatbuf_r+0x1e>
 8016c50:	2340      	movs	r3, #64	; 0x40
 8016c52:	2000      	movs	r0, #0
 8016c54:	6023      	str	r3, [r4, #0]
 8016c56:	b016      	add	sp, #88	; 0x58
 8016c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c5c <__smakebuf_r>:
 8016c5c:	898b      	ldrh	r3, [r1, #12]
 8016c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c60:	079d      	lsls	r5, r3, #30
 8016c62:	4606      	mov	r6, r0
 8016c64:	460c      	mov	r4, r1
 8016c66:	d507      	bpl.n	8016c78 <__smakebuf_r+0x1c>
 8016c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c6c:	6023      	str	r3, [r4, #0]
 8016c6e:	6123      	str	r3, [r4, #16]
 8016c70:	2301      	movs	r3, #1
 8016c72:	6163      	str	r3, [r4, #20]
 8016c74:	b002      	add	sp, #8
 8016c76:	bd70      	pop	{r4, r5, r6, pc}
 8016c78:	ab01      	add	r3, sp, #4
 8016c7a:	466a      	mov	r2, sp
 8016c7c:	f7ff ffc8 	bl	8016c10 <__swhatbuf_r>
 8016c80:	9900      	ldr	r1, [sp, #0]
 8016c82:	4605      	mov	r5, r0
 8016c84:	4630      	mov	r0, r6
 8016c86:	f7ff f9db 	bl	8016040 <_malloc_r>
 8016c8a:	b948      	cbnz	r0, 8016ca0 <__smakebuf_r+0x44>
 8016c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c90:	059a      	lsls	r2, r3, #22
 8016c92:	d4ef      	bmi.n	8016c74 <__smakebuf_r+0x18>
 8016c94:	f023 0303 	bic.w	r3, r3, #3
 8016c98:	f043 0302 	orr.w	r3, r3, #2
 8016c9c:	81a3      	strh	r3, [r4, #12]
 8016c9e:	e7e3      	b.n	8016c68 <__smakebuf_r+0xc>
 8016ca0:	4b0d      	ldr	r3, [pc, #52]	; (8016cd8 <__smakebuf_r+0x7c>)
 8016ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ca4:	89a3      	ldrh	r3, [r4, #12]
 8016ca6:	6020      	str	r0, [r4, #0]
 8016ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cac:	81a3      	strh	r3, [r4, #12]
 8016cae:	9b00      	ldr	r3, [sp, #0]
 8016cb0:	6163      	str	r3, [r4, #20]
 8016cb2:	9b01      	ldr	r3, [sp, #4]
 8016cb4:	6120      	str	r0, [r4, #16]
 8016cb6:	b15b      	cbz	r3, 8016cd0 <__smakebuf_r+0x74>
 8016cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cbc:	4630      	mov	r0, r6
 8016cbe:	f000 f91f 	bl	8016f00 <_isatty_r>
 8016cc2:	b128      	cbz	r0, 8016cd0 <__smakebuf_r+0x74>
 8016cc4:	89a3      	ldrh	r3, [r4, #12]
 8016cc6:	f023 0303 	bic.w	r3, r3, #3
 8016cca:	f043 0301 	orr.w	r3, r3, #1
 8016cce:	81a3      	strh	r3, [r4, #12]
 8016cd0:	89a0      	ldrh	r0, [r4, #12]
 8016cd2:	4305      	orrs	r5, r0
 8016cd4:	81a5      	strh	r5, [r4, #12]
 8016cd6:	e7cd      	b.n	8016c74 <__smakebuf_r+0x18>
 8016cd8:	08016a69 	.word	0x08016a69

08016cdc <memmove>:
 8016cdc:	4288      	cmp	r0, r1
 8016cde:	b510      	push	{r4, lr}
 8016ce0:	eb01 0402 	add.w	r4, r1, r2
 8016ce4:	d902      	bls.n	8016cec <memmove+0x10>
 8016ce6:	4284      	cmp	r4, r0
 8016ce8:	4623      	mov	r3, r4
 8016cea:	d807      	bhi.n	8016cfc <memmove+0x20>
 8016cec:	1e43      	subs	r3, r0, #1
 8016cee:	42a1      	cmp	r1, r4
 8016cf0:	d008      	beq.n	8016d04 <memmove+0x28>
 8016cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016cfa:	e7f8      	b.n	8016cee <memmove+0x12>
 8016cfc:	4402      	add	r2, r0
 8016cfe:	4601      	mov	r1, r0
 8016d00:	428a      	cmp	r2, r1
 8016d02:	d100      	bne.n	8016d06 <memmove+0x2a>
 8016d04:	bd10      	pop	{r4, pc}
 8016d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d0e:	e7f7      	b.n	8016d00 <memmove+0x24>

08016d10 <__malloc_lock>:
 8016d10:	4801      	ldr	r0, [pc, #4]	; (8016d18 <__malloc_lock+0x8>)
 8016d12:	f7ff bf7b 	b.w	8016c0c <__retarget_lock_acquire_recursive>
 8016d16:	bf00      	nop
 8016d18:	20000d84 	.word	0x20000d84

08016d1c <__malloc_unlock>:
 8016d1c:	4801      	ldr	r0, [pc, #4]	; (8016d24 <__malloc_unlock+0x8>)
 8016d1e:	f7ff bf76 	b.w	8016c0e <__retarget_lock_release_recursive>
 8016d22:	bf00      	nop
 8016d24:	20000d84 	.word	0x20000d84

08016d28 <_realloc_r>:
 8016d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2c:	4680      	mov	r8, r0
 8016d2e:	4614      	mov	r4, r2
 8016d30:	460e      	mov	r6, r1
 8016d32:	b921      	cbnz	r1, 8016d3e <_realloc_r+0x16>
 8016d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d38:	4611      	mov	r1, r2
 8016d3a:	f7ff b981 	b.w	8016040 <_malloc_r>
 8016d3e:	b92a      	cbnz	r2, 8016d4c <_realloc_r+0x24>
 8016d40:	f7ff f912 	bl	8015f68 <_free_r>
 8016d44:	4625      	mov	r5, r4
 8016d46:	4628      	mov	r0, r5
 8016d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d4c:	f000 f8fa 	bl	8016f44 <_malloc_usable_size_r>
 8016d50:	4284      	cmp	r4, r0
 8016d52:	4607      	mov	r7, r0
 8016d54:	d802      	bhi.n	8016d5c <_realloc_r+0x34>
 8016d56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016d5a:	d812      	bhi.n	8016d82 <_realloc_r+0x5a>
 8016d5c:	4621      	mov	r1, r4
 8016d5e:	4640      	mov	r0, r8
 8016d60:	f7ff f96e 	bl	8016040 <_malloc_r>
 8016d64:	4605      	mov	r5, r0
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d0ed      	beq.n	8016d46 <_realloc_r+0x1e>
 8016d6a:	42bc      	cmp	r4, r7
 8016d6c:	4622      	mov	r2, r4
 8016d6e:	4631      	mov	r1, r6
 8016d70:	bf28      	it	cs
 8016d72:	463a      	movcs	r2, r7
 8016d74:	f7fe fc12 	bl	801559c <memcpy>
 8016d78:	4631      	mov	r1, r6
 8016d7a:	4640      	mov	r0, r8
 8016d7c:	f7ff f8f4 	bl	8015f68 <_free_r>
 8016d80:	e7e1      	b.n	8016d46 <_realloc_r+0x1e>
 8016d82:	4635      	mov	r5, r6
 8016d84:	e7df      	b.n	8016d46 <_realloc_r+0x1e>

08016d86 <_raise_r>:
 8016d86:	291f      	cmp	r1, #31
 8016d88:	b538      	push	{r3, r4, r5, lr}
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	460d      	mov	r5, r1
 8016d8e:	d904      	bls.n	8016d9a <_raise_r+0x14>
 8016d90:	2316      	movs	r3, #22
 8016d92:	6003      	str	r3, [r0, #0]
 8016d94:	f04f 30ff 	mov.w	r0, #4294967295
 8016d98:	bd38      	pop	{r3, r4, r5, pc}
 8016d9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016d9c:	b112      	cbz	r2, 8016da4 <_raise_r+0x1e>
 8016d9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016da2:	b94b      	cbnz	r3, 8016db8 <_raise_r+0x32>
 8016da4:	4620      	mov	r0, r4
 8016da6:	f000 f831 	bl	8016e0c <_getpid_r>
 8016daa:	462a      	mov	r2, r5
 8016dac:	4601      	mov	r1, r0
 8016dae:	4620      	mov	r0, r4
 8016db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016db4:	f000 b818 	b.w	8016de8 <_kill_r>
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	d00a      	beq.n	8016dd2 <_raise_r+0x4c>
 8016dbc:	1c59      	adds	r1, r3, #1
 8016dbe:	d103      	bne.n	8016dc8 <_raise_r+0x42>
 8016dc0:	2316      	movs	r3, #22
 8016dc2:	6003      	str	r3, [r0, #0]
 8016dc4:	2001      	movs	r0, #1
 8016dc6:	e7e7      	b.n	8016d98 <_raise_r+0x12>
 8016dc8:	2400      	movs	r4, #0
 8016dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016dce:	4628      	mov	r0, r5
 8016dd0:	4798      	blx	r3
 8016dd2:	2000      	movs	r0, #0
 8016dd4:	e7e0      	b.n	8016d98 <_raise_r+0x12>
	...

08016dd8 <raise>:
 8016dd8:	4b02      	ldr	r3, [pc, #8]	; (8016de4 <raise+0xc>)
 8016dda:	4601      	mov	r1, r0
 8016ddc:	6818      	ldr	r0, [r3, #0]
 8016dde:	f7ff bfd2 	b.w	8016d86 <_raise_r>
 8016de2:	bf00      	nop
 8016de4:	20000044 	.word	0x20000044

08016de8 <_kill_r>:
 8016de8:	b538      	push	{r3, r4, r5, lr}
 8016dea:	4d07      	ldr	r5, [pc, #28]	; (8016e08 <_kill_r+0x20>)
 8016dec:	2300      	movs	r3, #0
 8016dee:	4604      	mov	r4, r0
 8016df0:	4608      	mov	r0, r1
 8016df2:	4611      	mov	r1, r2
 8016df4:	602b      	str	r3, [r5, #0]
 8016df6:	f7f3 fe1d 	bl	800aa34 <_kill>
 8016dfa:	1c43      	adds	r3, r0, #1
 8016dfc:	d102      	bne.n	8016e04 <_kill_r+0x1c>
 8016dfe:	682b      	ldr	r3, [r5, #0]
 8016e00:	b103      	cbz	r3, 8016e04 <_kill_r+0x1c>
 8016e02:	6023      	str	r3, [r4, #0]
 8016e04:	bd38      	pop	{r3, r4, r5, pc}
 8016e06:	bf00      	nop
 8016e08:	20000d88 	.word	0x20000d88

08016e0c <_getpid_r>:
 8016e0c:	f7f3 be0a 	b.w	800aa24 <_getpid>

08016e10 <__sread>:
 8016e10:	b510      	push	{r4, lr}
 8016e12:	460c      	mov	r4, r1
 8016e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e18:	f000 f89c 	bl	8016f54 <_read_r>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	bfab      	itete	ge
 8016e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e22:	89a3      	ldrhlt	r3, [r4, #12]
 8016e24:	181b      	addge	r3, r3, r0
 8016e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e2a:	bfac      	ite	ge
 8016e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e2e:	81a3      	strhlt	r3, [r4, #12]
 8016e30:	bd10      	pop	{r4, pc}

08016e32 <__swrite>:
 8016e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e36:	461f      	mov	r7, r3
 8016e38:	898b      	ldrh	r3, [r1, #12]
 8016e3a:	05db      	lsls	r3, r3, #23
 8016e3c:	4605      	mov	r5, r0
 8016e3e:	460c      	mov	r4, r1
 8016e40:	4616      	mov	r6, r2
 8016e42:	d505      	bpl.n	8016e50 <__swrite+0x1e>
 8016e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e48:	2302      	movs	r3, #2
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f000 f868 	bl	8016f20 <_lseek_r>
 8016e50:	89a3      	ldrh	r3, [r4, #12]
 8016e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e5a:	81a3      	strh	r3, [r4, #12]
 8016e5c:	4632      	mov	r2, r6
 8016e5e:	463b      	mov	r3, r7
 8016e60:	4628      	mov	r0, r5
 8016e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e66:	f000 b817 	b.w	8016e98 <_write_r>

08016e6a <__sseek>:
 8016e6a:	b510      	push	{r4, lr}
 8016e6c:	460c      	mov	r4, r1
 8016e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e72:	f000 f855 	bl	8016f20 <_lseek_r>
 8016e76:	1c43      	adds	r3, r0, #1
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	bf15      	itete	ne
 8016e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e86:	81a3      	strheq	r3, [r4, #12]
 8016e88:	bf18      	it	ne
 8016e8a:	81a3      	strhne	r3, [r4, #12]
 8016e8c:	bd10      	pop	{r4, pc}

08016e8e <__sclose>:
 8016e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e92:	f000 b813 	b.w	8016ebc <_close_r>
	...

08016e98 <_write_r>:
 8016e98:	b538      	push	{r3, r4, r5, lr}
 8016e9a:	4d07      	ldr	r5, [pc, #28]	; (8016eb8 <_write_r+0x20>)
 8016e9c:	4604      	mov	r4, r0
 8016e9e:	4608      	mov	r0, r1
 8016ea0:	4611      	mov	r1, r2
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	602a      	str	r2, [r5, #0]
 8016ea6:	461a      	mov	r2, r3
 8016ea8:	f7f3 fdfb 	bl	800aaa2 <_write>
 8016eac:	1c43      	adds	r3, r0, #1
 8016eae:	d102      	bne.n	8016eb6 <_write_r+0x1e>
 8016eb0:	682b      	ldr	r3, [r5, #0]
 8016eb2:	b103      	cbz	r3, 8016eb6 <_write_r+0x1e>
 8016eb4:	6023      	str	r3, [r4, #0]
 8016eb6:	bd38      	pop	{r3, r4, r5, pc}
 8016eb8:	20000d88 	.word	0x20000d88

08016ebc <_close_r>:
 8016ebc:	b538      	push	{r3, r4, r5, lr}
 8016ebe:	4d06      	ldr	r5, [pc, #24]	; (8016ed8 <_close_r+0x1c>)
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	4604      	mov	r4, r0
 8016ec4:	4608      	mov	r0, r1
 8016ec6:	602b      	str	r3, [r5, #0]
 8016ec8:	f7f3 fe07 	bl	800aada <_close>
 8016ecc:	1c43      	adds	r3, r0, #1
 8016ece:	d102      	bne.n	8016ed6 <_close_r+0x1a>
 8016ed0:	682b      	ldr	r3, [r5, #0]
 8016ed2:	b103      	cbz	r3, 8016ed6 <_close_r+0x1a>
 8016ed4:	6023      	str	r3, [r4, #0]
 8016ed6:	bd38      	pop	{r3, r4, r5, pc}
 8016ed8:	20000d88 	.word	0x20000d88

08016edc <_fstat_r>:
 8016edc:	b538      	push	{r3, r4, r5, lr}
 8016ede:	4d07      	ldr	r5, [pc, #28]	; (8016efc <_fstat_r+0x20>)
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	4608      	mov	r0, r1
 8016ee6:	4611      	mov	r1, r2
 8016ee8:	602b      	str	r3, [r5, #0]
 8016eea:	f7f3 fe02 	bl	800aaf2 <_fstat>
 8016eee:	1c43      	adds	r3, r0, #1
 8016ef0:	d102      	bne.n	8016ef8 <_fstat_r+0x1c>
 8016ef2:	682b      	ldr	r3, [r5, #0]
 8016ef4:	b103      	cbz	r3, 8016ef8 <_fstat_r+0x1c>
 8016ef6:	6023      	str	r3, [r4, #0]
 8016ef8:	bd38      	pop	{r3, r4, r5, pc}
 8016efa:	bf00      	nop
 8016efc:	20000d88 	.word	0x20000d88

08016f00 <_isatty_r>:
 8016f00:	b538      	push	{r3, r4, r5, lr}
 8016f02:	4d06      	ldr	r5, [pc, #24]	; (8016f1c <_isatty_r+0x1c>)
 8016f04:	2300      	movs	r3, #0
 8016f06:	4604      	mov	r4, r0
 8016f08:	4608      	mov	r0, r1
 8016f0a:	602b      	str	r3, [r5, #0]
 8016f0c:	f7f3 fe01 	bl	800ab12 <_isatty>
 8016f10:	1c43      	adds	r3, r0, #1
 8016f12:	d102      	bne.n	8016f1a <_isatty_r+0x1a>
 8016f14:	682b      	ldr	r3, [r5, #0]
 8016f16:	b103      	cbz	r3, 8016f1a <_isatty_r+0x1a>
 8016f18:	6023      	str	r3, [r4, #0]
 8016f1a:	bd38      	pop	{r3, r4, r5, pc}
 8016f1c:	20000d88 	.word	0x20000d88

08016f20 <_lseek_r>:
 8016f20:	b538      	push	{r3, r4, r5, lr}
 8016f22:	4d07      	ldr	r5, [pc, #28]	; (8016f40 <_lseek_r+0x20>)
 8016f24:	4604      	mov	r4, r0
 8016f26:	4608      	mov	r0, r1
 8016f28:	4611      	mov	r1, r2
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	602a      	str	r2, [r5, #0]
 8016f2e:	461a      	mov	r2, r3
 8016f30:	f7f3 fdfa 	bl	800ab28 <_lseek>
 8016f34:	1c43      	adds	r3, r0, #1
 8016f36:	d102      	bne.n	8016f3e <_lseek_r+0x1e>
 8016f38:	682b      	ldr	r3, [r5, #0]
 8016f3a:	b103      	cbz	r3, 8016f3e <_lseek_r+0x1e>
 8016f3c:	6023      	str	r3, [r4, #0]
 8016f3e:	bd38      	pop	{r3, r4, r5, pc}
 8016f40:	20000d88 	.word	0x20000d88

08016f44 <_malloc_usable_size_r>:
 8016f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f48:	1f18      	subs	r0, r3, #4
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	bfbc      	itt	lt
 8016f4e:	580b      	ldrlt	r3, [r1, r0]
 8016f50:	18c0      	addlt	r0, r0, r3
 8016f52:	4770      	bx	lr

08016f54 <_read_r>:
 8016f54:	b538      	push	{r3, r4, r5, lr}
 8016f56:	4d07      	ldr	r5, [pc, #28]	; (8016f74 <_read_r+0x20>)
 8016f58:	4604      	mov	r4, r0
 8016f5a:	4608      	mov	r0, r1
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	2200      	movs	r2, #0
 8016f60:	602a      	str	r2, [r5, #0]
 8016f62:	461a      	mov	r2, r3
 8016f64:	f7f3 fd80 	bl	800aa68 <_read>
 8016f68:	1c43      	adds	r3, r0, #1
 8016f6a:	d102      	bne.n	8016f72 <_read_r+0x1e>
 8016f6c:	682b      	ldr	r3, [r5, #0]
 8016f6e:	b103      	cbz	r3, 8016f72 <_read_r+0x1e>
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	20000d88 	.word	0x20000d88

08016f78 <_init>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	bf00      	nop
 8016f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f7e:	bc08      	pop	{r3}
 8016f80:	469e      	mov	lr, r3
 8016f82:	4770      	bx	lr

08016f84 <_fini>:
 8016f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f86:	bf00      	nop
 8016f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f8a:	bc08      	pop	{r3}
 8016f8c:	469e      	mov	lr, r3
 8016f8e:	4770      	bx	lr
